{"version":3,"file":"locate_symbol.js","sourceRoot":"","sources":["../../../../packages/language-service/src/locate_symbol.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AST, Attribute, BoundDirectivePropertyAst, BoundEventAst, ElementAst, TemplateAst, TemplateAstPath, findNode, tokenReference} from '@angular/compiler';\nimport {getExpressionScope} from '@angular/compiler-cli/src/language_services';\n\nimport {TemplateInfo} from './common';\nimport {getExpressionSymbol} from './expressions';\nimport {Definition, Location, Span, Symbol, SymbolTable} from './types';\nimport {diagnosticInfoFromTemplateInfo, findTemplateAstAt, inSpan, offsetSpan, spanOf} from './utils';\n\nexport interface SymbolInfo {\n  symbol: Symbol;\n  span: Span;\n}\n\nexport function locateSymbol(info: TemplateInfo): SymbolInfo|undefined {\n  if (!info.position) return undefined;\n  const templatePosition = info.position - info.template.span.start;\n  const path = findTemplateAstAt(info.templateAst, templatePosition);\n  if (path.tail) {\n    let symbol: Symbol|undefined = undefined;\n    let span: Span|undefined = undefined;\n    const attributeValueSymbol = (ast: AST, inEvent: boolean = false): boolean => {\n      const attribute = findAttribute(info);\n      if (attribute) {\n        if (inSpan(templatePosition, spanOf(attribute.valueSpan))) {\n          const dinfo = diagnosticInfoFromTemplateInfo(info);\n          const scope = getExpressionScope(dinfo, path, inEvent);\n          if (attribute.valueSpan) {\n            const expressionOffset = attribute.valueSpan.start.offset + 1;\n            const result = getExpressionSymbol(\n                scope, ast, templatePosition - expressionOffset, info.template.query);\n            if (result) {\n              symbol = result.symbol;\n              span = offsetSpan(result.span, expressionOffset);\n            }\n          }\n          return true;\n        }\n      }\n      return false;\n    };\n    path.tail.visit(\n        {\n          visitNgContent(ast) {},\n          visitEmbeddedTemplate(ast) {},\n          visitElement(ast) {\n            const component = ast.directives.find(d => d.directive.isComponent);\n            if (component) {\n              symbol = info.template.query.getTypeSymbol(component.directive.type.reference);\n              symbol = symbol && new OverrideKindSymbol(symbol, 'component');\n              span = spanOf(ast);\n            } else {\n              // Find a directive that matches the element name\n              const directive = ast.directives.find(\n                  d => d.directive.selector != null && d.directive.selector.indexOf(ast.name) >= 0);\n              if (directive) {\n                symbol = info.template.query.getTypeSymbol(directive.directive.type.reference);\n                symbol = symbol && new OverrideKindSymbol(symbol, 'directive');\n                span = spanOf(ast);\n              }\n            }\n          },\n          visitReference(ast) {\n            symbol = ast.value && info.template.query.getTypeSymbol(tokenReference(ast.value));\n            span = spanOf(ast);\n          },\n          visitVariable(ast) {},\n          visitEvent(ast) {\n            if (!attributeValueSymbol(ast.handler, /* inEvent */ true)) {\n              symbol = findOutputBinding(info, path, ast);\n              symbol = symbol && new OverrideKindSymbol(symbol, 'event');\n              span = spanOf(ast);\n            }\n          },\n          visitElementProperty(ast) { attributeValueSymbol(ast.value); },\n          visitAttr(ast) {},\n          visitBoundText(ast) {\n            const expressionPosition = templatePosition - ast.sourceSpan.start.offset;\n            if (inSpan(expressionPosition, ast.value.span)) {\n              const dinfo = diagnosticInfoFromTemplateInfo(info);\n              const scope = getExpressionScope(dinfo, path, /* includeEvent */ false);\n              const result =\n                  getExpressionSymbol(scope, ast.value, expressionPosition, info.template.query);\n              if (result) {\n                symbol = result.symbol;\n                span = offsetSpan(result.span, ast.sourceSpan.start.offset);\n              }\n            }\n          },\n          visitText(ast) {},\n          visitDirective(ast) {\n            symbol = info.template.query.getTypeSymbol(ast.directive.type.reference);\n            span = spanOf(ast);\n          },\n          visitDirectiveProperty(ast) {\n            if (!attributeValueSymbol(ast.value)) {\n              symbol = findInputBinding(info, path, ast);\n              span = spanOf(ast);\n            }\n          }\n        },\n        null);\n    if (symbol && span) {\n      return {symbol, span: offsetSpan(span, info.template.span.start)};\n    }\n  }\n}\n\nfunction findAttribute(info: TemplateInfo): Attribute|undefined {\n  if (info.position) {\n    const templatePosition = info.position - info.template.span.start;\n    const path = findNode(info.htmlAst, templatePosition);\n    return path.first(Attribute);\n  }\n}\n\nfunction findInputBinding(\n    info: TemplateInfo, path: TemplateAstPath, binding: BoundDirectivePropertyAst): Symbol|\n    undefined {\n  const element = path.first(ElementAst);\n  if (element) {\n    for (const directive of element.directives) {\n      const invertedInput = invertMap(directive.directive.inputs);\n      const fieldName = invertedInput[binding.templateName];\n      if (fieldName) {\n        const classSymbol = info.template.query.getTypeSymbol(directive.directive.type.reference);\n        if (classSymbol) {\n          return classSymbol.members().get(fieldName);\n        }\n      }\n    }\n  }\n}\n\nfunction findOutputBinding(\n    info: TemplateInfo, path: TemplateAstPath, binding: BoundEventAst): Symbol|undefined {\n  const element = path.first(ElementAst);\n  if (element) {\n    for (const directive of element.directives) {\n      const invertedOutputs = invertMap(directive.directive.outputs);\n      const fieldName = invertedOutputs[binding.name];\n      if (fieldName) {\n        const classSymbol = info.template.query.getTypeSymbol(directive.directive.type.reference);\n        if (classSymbol) {\n          return classSymbol.members().get(fieldName);\n        }\n      }\n    }\n  }\n}\n\nfunction invertMap(obj: {[name: string]: string}): {[name: string]: string} {\n  const result: {[name: string]: string} = {};\n  for (const name of Object.keys(obj)) {\n    const v = obj[name];\n    result[v] = name;\n  }\n  return result;\n}\n\n/**\n * Wrap a symbol and change its kind to component.\n */\nclass OverrideKindSymbol implements Symbol {\n  public readonly kind: string;\n  constructor(private sym: Symbol, kindOverride: string) { this.kind = kindOverride; }\n\n  get name(): string { return this.sym.name; }\n\n  get language(): string { return this.sym.language; }\n\n  get type(): Symbol|undefined { return this.sym.type; }\n\n  get container(): Symbol|undefined { return this.sym.container; }\n\n  get public(): boolean { return this.sym.public; }\n\n  get callable(): boolean { return this.sym.callable; }\n\n  get nullable(): boolean { return this.sym.nullable; }\n\n  get definition(): Definition { return this.sym.definition; }\n\n  members() { return this.sym.members(); }\n\n  signatures() { return this.sym.signatures(); }\n\n  selectSignature(types: Symbol[]) { return this.sym.selectSignature(types); }\n\n  indexed(argument: Symbol) { return this.sym.indexed(argument); }\n}\n"]}