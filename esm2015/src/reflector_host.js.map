{"version":3,"file":"reflector_host.js","sourceRoot":"","sources":["../../../../packages/language-service/src/reflector_host.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {StaticSymbolResolverHost} from '@angular/compiler';\nimport {CompilerOptions, MetadataCollector, MetadataReaderCache, MetadataReaderHost, createMetadataReaderCache, readMetadata} from '@angular/compiler-cli/src/language_services';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nclass ReflectorModuleModuleResolutionHost implements ts.ModuleResolutionHost, MetadataReaderHost {\n  // Note: verboseInvalidExpressions is important so that\n  // the collector will collect errors instead of throwing\n  private metadataCollector = new MetadataCollector({verboseInvalidExpression: true});\n\n  constructor(private host: ts.LanguageServiceHost, private getProgram: () => ts.Program) {\n    if (host.directoryExists)\n      this.directoryExists = directoryName => this.host.directoryExists !(directoryName);\n  }\n\n  fileExists(fileName: string): boolean { return !!this.host.getScriptSnapshot(fileName); }\n\n  readFile(fileName: string): string {\n    let snapshot = this.host.getScriptSnapshot(fileName);\n    if (snapshot) {\n      return snapshot.getText(0, snapshot.getLength());\n    }\n\n    // Typescript readFile() declaration should be `readFile(fileName: string): string | undefined\n    return undefined !;\n  }\n\n  directoryExists: (directoryName: string) => boolean;\n\n  getSourceFileMetadata(fileName: string) {\n    const sf = this.getProgram().getSourceFile(fileName);\n    return sf ? this.metadataCollector.getMetadata(sf) : undefined;\n  }\n\n  cacheMetadata(fileName: string) {\n    // Don't cache the metadata for .ts files as they might change in the editor!\n    return fileName.endsWith('.d.ts');\n  }\n}\n\nexport class ReflectorHost implements StaticSymbolResolverHost {\n  private moduleResolutionCache: ts.ModuleResolutionCache;\n  private hostAdapter: ReflectorModuleModuleResolutionHost;\n  private metadataReaderCache = createMetadataReaderCache();\n\n  constructor(\n      getProgram: () => ts.Program, serviceHost: ts.LanguageServiceHost,\n      private options: CompilerOptions) {\n    this.hostAdapter = new ReflectorModuleModuleResolutionHost(serviceHost, getProgram);\n    this.moduleResolutionCache =\n        ts.createModuleResolutionCache(serviceHost.getCurrentDirectory(), (s) => s);\n  }\n\n  getMetadataFor(modulePath: string): {[key: string]: any}[]|undefined {\n    return readMetadata(modulePath, this.hostAdapter, this.metadataReaderCache);\n  }\n\n  moduleNameToFileName(moduleName: string, containingFile?: string): string|null {\n    if (!containingFile) {\n      if (moduleName.indexOf('.') === 0) {\n        throw new Error('Resolution of relative paths requires a containing file.');\n      }\n      // Any containing file gives the same result for absolute imports\n      containingFile = path.join(this.options.basePath !, 'index.ts').replace(/\\\\/g, '/');\n    }\n    const resolved =\n        ts.resolveModuleName(moduleName, containingFile !, this.options, this.hostAdapter)\n            .resolvedModule;\n    return resolved ? resolved.resolvedFileName : null;\n  }\n\n  getOutputName(filePath: string) { return filePath; }\n}\n"]}