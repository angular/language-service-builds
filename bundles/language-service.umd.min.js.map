{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../packages/compiler/esm5/src/core.js","../../../packages/compiler/esm5/src/util.js","../../../packages/compiler/esm5/src/template_parser/template_ast.js","../../../packages/compiler/esm5/src/config.js","../../../packages/compiler/esm5/src/aot/static_symbol.js","../../../packages/compiler/esm5/src/compile_metadata.js","../../../packages/compiler/esm5/src/ast_path.js","../../../packages/compiler/esm5/src/ml_parser/ast.js","../../../packages/compiler/esm5/src/assertions.js","../../../packages/compiler/esm5/src/ml_parser/interpolation_config.js","../../../packages/compiler/esm5/src/style_url_resolver.js","../../../packages/compiler/esm5/src/ml_parser/tags.js","../../../packages/compiler/esm5/src/template_parser/template_preparser.js","../../../packages/compiler/esm5/src/directive_normalizer.js","../../../packages/compiler/esm5/src/directive_resolver.js","../../../packages/compiler/esm5/src/chars.js","../../../packages/compiler/esm5/src/expression_parser/lexer.js","../../../packages/compiler/esm5/src/expression_parser/ast.js","../../../packages/compiler/esm5/src/expression_parser/parser.js","../../../packages/compiler/esm5/src/parse_util.js","../../../packages/compiler/esm5/src/ml_parser/lexer.js","../../../packages/compiler/esm5/src/ml_parser/parser.js","../../../packages/compiler/esm5/src/i18n/digest.js","../../../packages/compiler/esm5/src/i18n/i18n_ast.js","../../../packages/compiler/esm5/src/ml_parser/html_tags.js","../../../packages/compiler/esm5/src/i18n/serializers/placeholder.js","../../../packages/compiler/esm5/src/i18n/i18n_parser.js","../../../packages/compiler/esm5/src/i18n/parse_util.js","../../../packages/compiler/esm5/src/i18n/extractor_merger.js","../../../packages/compiler/esm5/src/ml_parser/xml_tags.js","../../../packages/compiler/esm5/src/ml_parser/xml_parser.js","../../../packages/compiler/esm5/src/i18n/serializers/serializer.js","../../../packages/compiler/esm5/src/i18n/serializers/xml_helper.js","../../../packages/compiler/esm5/src/i18n/serializers/xliff.js","../../../packages/compiler/esm5/src/i18n/serializers/xliff2.js","../../../packages/compiler/esm5/src/i18n/serializers/xmb.js","../../../packages/compiler/esm5/src/i18n/serializers/xtb.js","../../../packages/compiler/esm5/src/ml_parser/html_parser.js","../../../packages/compiler/esm5/src/i18n/translation_bundle.js","../../../packages/compiler/esm5/src/i18n/i18n_html_parser.js","../../../packages/compiler/esm5/src/identifiers.js","../../../packages/compiler/esm5/src/output/output_ast.js","../../../packages/compiler/esm5/src/output/value_util.js","../../../packages/compiler/esm5/src/injectable_compiler.js","../../../packages/compiler/esm5/src/aot/util.js","../../../packages/compiler/esm5/src/lifecycle_reflector.js","../../../packages/compiler/esm5/src/selector.js","../../../packages/compiler/esm5/src/metadata_resolver.js","../../../packages/compiler/esm5/src/provider_analyzer.js","../../../packages/compiler/esm5/src/view_compiler/provider_compiler.js","../../../packages/compiler/esm5/src/ng_module_compiler.js","../../../packages/compiler/esm5/src/ng_module_resolver.js","../../../packages/compiler/esm5/src/output/source_map.js","../../../packages/compiler/esm5/src/output/abstract_emitter.js","../../../packages/compiler/esm5/src/output/ts_emitter.js","../../../packages/compiler/esm5/src/pipe_resolver.js","../../../packages/compiler/esm5/src/schema/dom_security_schema.js","../../../packages/compiler/esm5/src/schema/dom_element_schema_registry.js","../../../packages/compiler/esm5/src/shadow_css.js","../../../packages/compiler/esm5/src/style_compiler.js","../../../packages/compiler/esm5/src/ml_parser/html_whitespaces.js","../../../packages/compiler/esm5/src/ml_parser/icu_ast_expander.js","../../../packages/compiler/esm5/src/template_parser/binding_parser.js","../../../packages/compiler/esm5/src/template_parser/template_parser.js","../../../packages/compiler/esm5/src/compiler_util/expression_converter.js","../../../packages/compiler/esm5/src/view_compiler/type_check_compiler.js","../../../packages/compiler/esm5/src/view_compiler/view_compiler.js","../../../packages/compiler/esm5/src/constant_pool.js","../../../packages/compiler/esm5/src/i18n/message_bundle.js","../../../packages/compiler/esm5/src/render3/r3_identifiers.js","../../../packages/compiler/esm5/src/render3/r3_module_compiler.js","../../../packages/compiler/esm5/src/output/map_util.js","../../../packages/compiler/esm5/src/render3/r3_view_compiler.js","../../../packages/compiler/esm5/src/aot/generated_file.js","../../../packages/compiler/esm5/src/aot/lazy_routes.js","../../../packages/compiler/esm5/src/aot/static_symbol_resolver.js","../../../packages/compiler/esm5/src/aot/summary_serializer.js","../../../packages/compiler/esm5/src/aot/compiler.js","../../../packages/compiler/esm5/src/render3/r3_pipe_compiler.js","../../../packages/compiler/esm5/src/aot/formatted_error.js","../../../packages/compiler/esm5/src/aot/static_reflector.js","../../../packages/compiler/esm5/src/aot/summary_resolver.js","../../../packages/compiler/esm5/src/aot/compiler_factory.js","../../../packages/compiler/esm5/src/summary_resolver.js","../../../packages/compiler/esm5/src/output/output_interpreter.js","../../../packages/compiler/esm5/src/output/output_jit.js","../../../packages/compiler/esm5/src/output/abstract_js_emitter.js","../../../packages/compiler/esm5/src/jit/compiler.js","../../../packages/compiler/esm5/src/url_resolver.js","../../../packages/compiler/esm5/src/resource_loader.js","../../../packages/compiler/esm5/src/i18n/extractor.js","../../../packages/compiler/esm5/src/i18n/index.js","../../../../packages/compiler-cli/src/diagnostics/symbols.ts","../../../../packages/compiler-cli/src/diagnostics/expression_type.ts","../../../../packages/compiler-cli/src/diagnostics/expression_diagnostics.ts","../../../../packages/compiler-cli/src/diagnostics/typescript_version.ts","../../../../packages/compiler-cli/src/diagnostics/typescript_symbols.ts","../../../../packages/compiler-cli/src/metadata/schema.ts","../../../../packages/compiler-cli/src/metadata/evaluator.ts","../../../../packages/compiler-cli/src/metadata/symbols.ts","../../../../packages/compiler-cli/src/metadata/collector.ts","../../../../packages/compiler-cli/src/metadata/bundler.ts","../../../../packages/compiler-cli/src/metadata/index_writer.ts","../../../../packages/compiler-cli/src/metadata/bundle_index_host.ts","../../../../packages/compiler-cli/src/transformers/api.ts","../../../../packages/compiler-cli/src/transformers/util.ts","../../../../packages/compiler-cli/src/transformers/metadata_reader.ts","../../../../packages/compiler-cli/src/language_services.ts","../../../../node_modules/rxjs/src/internal/util/isFunction.ts","../../../../node_modules/rxjs/src/internal/config.ts","../../../../node_modules/rxjs/src/internal/Observer.ts","../../../../node_modules/rxjs/src/internal/util/isObject.ts","../../../../node_modules/rxjs/src/internal/util/tryCatch.ts","../../../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../../../../node_modules/rxjs/src/internal/Subscription.ts","../../../../node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","../../../../node_modules/rxjs/src/internal/Subscriber.ts","../../../../node_modules/rxjs/src/internal/util/toSubscriber.ts","../../../../node_modules/rxjs/src/internal/util/noop.ts","../../../../node_modules/rxjs/src/internal/util/pipe.ts","../../../../node_modules/rxjs/src/internal/Observable.ts","../../../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","../../../../node_modules/rxjs/src/internal/SubjectSubscription.ts","../../../../node_modules/rxjs/src/internal/Subject.ts","../../../../node_modules/rxjs/src/internal/operators/refCount.ts","../../../../node_modules/rxjs/src/internal/observable/ConnectableObservable.ts","../../../../node_modules/rxjs/src/internal/BehaviorSubject.ts","../../../../node_modules/rxjs/src/internal/scheduler/Action.ts","../../../../node_modules/rxjs/src/internal/scheduler/AsyncAction.ts","../../../../node_modules/rxjs/src/internal/scheduler/QueueAction.ts","../../../../node_modules/rxjs/src/internal/Scheduler.ts","../../../../node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts","../../../../node_modules/rxjs/src/internal/scheduler/QueueScheduler.ts","../../../../node_modules/rxjs/src/internal/observable/empty.ts","../../../../node_modules/rxjs/src/internal/util/isScheduler.ts","../../../../node_modules/rxjs/src/internal/util/subscribeToArray.ts","../../../../node_modules/rxjs/src/internal/observable/fromArray.ts","../../../../node_modules/rxjs/src/internal/observable/scalar.ts","../../../../node_modules/rxjs/src/internal/observable/of.ts","../../../../node_modules/rxjs/src/internal/observable/throwError.ts","../../../../node_modules/rxjs/src/internal/Notification.ts","../../../../node_modules/rxjs/src/internal/operators/observeOn.ts","../../../../node_modules/rxjs/src/internal/ReplaySubject.ts","../../../../node_modules/rxjs/src/internal/AsyncSubject.ts","../../../../node_modules/rxjs/src/internal/util/Immediate.ts","../../../../node_modules/rxjs/src/internal/scheduler/AsapAction.ts","../../../../node_modules/rxjs/src/internal/scheduler/AsapScheduler.ts","../../../../node_modules/rxjs/src/internal/scheduler/AnimationFrameAction.ts","../../../../node_modules/rxjs/src/internal/scheduler/AnimationFrameScheduler.ts","../../../../node_modules/rxjs/src/internal/scheduler/VirtualTimeScheduler.ts","../../../../node_modules/rxjs/src/internal/util/identity.ts","../../../../node_modules/rxjs/src/internal/util/ArgumentOutOfRangeError.ts","../../../../node_modules/rxjs/src/internal/util/EmptyError.ts","../../../../node_modules/rxjs/src/internal/util/TimeoutError.ts","../../../../node_modules/rxjs/src/internal/operators/map.ts","../../../../node_modules/rxjs/src/internal/observable/bindCallback.ts","../../../../node_modules/rxjs/src/internal/observable/bindNodeCallback.ts","../../../../node_modules/rxjs/src/internal/OuterSubscriber.ts","../../../../node_modules/rxjs/src/internal/InnerSubscriber.ts","../../../../node_modules/rxjs/src/internal/util/subscribeToPromise.ts","../../../../node_modules/rxjs/src/internal/symbol/iterator.ts","../../../../node_modules/rxjs/src/internal/util/subscribeToIterable.ts","../../../../node_modules/rxjs/src/internal/util/subscribeToObservable.ts","../../../../node_modules/rxjs/src/internal/util/isPromise.ts","../../../../node_modules/rxjs/src/internal/util/subscribeTo.ts","../../../../node_modules/rxjs/src/internal/util/subscribeToResult.ts","../../../../node_modules/rxjs/src/internal/observable/combineLatest.ts","../../../../node_modules/rxjs/src/internal/util/isObservable.ts","../../../../node_modules/rxjs/src/internal/util/isIterable.ts","../../../../node_modules/rxjs/src/internal/observable/fromPromise.ts","../../../../node_modules/rxjs/src/internal/observable/fromIterable.ts","../../../../node_modules/rxjs/src/internal/observable/fromObservable.ts","../../../../node_modules/rxjs/src/internal/observable/from.ts","../../../../node_modules/rxjs/src/internal/operators/mergeMap.ts","../../../../node_modules/rxjs/src/internal/observable/concat.ts","../../../../node_modules/rxjs/src/internal/observable/defer.ts","../../../../node_modules/rxjs/src/internal/observable/forkJoin.ts","../../../../node_modules/rxjs/src/internal/observable/fromEvent.ts","../../../../node_modules/rxjs/src/internal/observable/fromEventPattern.ts","../../../../node_modules/rxjs/src/internal/observable/generate.ts","../../../../node_modules/rxjs/src/internal/observable/iif.ts","../../../../node_modules/rxjs/src/internal/util/isNumeric.ts","../../../../node_modules/rxjs/src/internal/observable/interval.ts","../../../../node_modules/rxjs/src/internal/observable/merge.ts","../../../../node_modules/rxjs/src/internal/observable/never.ts","../../../../node_modules/rxjs/src/internal/observable/onErrorResumeNext.ts","../../../../node_modules/rxjs/src/internal/observable/pairs.ts","../../../../node_modules/rxjs/src/internal/observable/race.ts","../../../../node_modules/rxjs/src/internal/observable/range.ts","../../../../node_modules/rxjs/src/internal/observable/timer.ts","../../../../node_modules/rxjs/src/internal/observable/using.ts","../../../../node_modules/rxjs/src/internal/observable/zip.ts","../../../../node_modules/rxjs/src/index.ts","../../../../node_modules/rxjs/src/internal/operators/audit.ts","../../../../node_modules/rxjs/src/internal/operators/buffer.ts","../../../../node_modules/rxjs/src/internal/operators/bufferCount.ts","../../../../node_modules/rxjs/src/internal/operators/bufferTime.ts","../../../../node_modules/rxjs/src/internal/operators/bufferToggle.ts","../../../../node_modules/rxjs/src/internal/operators/bufferWhen.ts","../../../../node_modules/rxjs/src/internal/operators/catchError.ts","../../../../node_modules/rxjs/src/internal/operators/combineAll.ts","../../../../node_modules/rxjs/src/internal/operators/combineLatest.ts","../../../../node_modules/rxjs/src/internal/operators/concat.ts","../../../../node_modules/rxjs/src/internal/operators/count.ts","../../../../node_modules/rxjs/src/internal/operators/debounce.ts","../../../../node_modules/rxjs/src/internal/operators/debounceTime.ts","../../../../node_modules/rxjs/src/internal/operators/defaultIfEmpty.ts","../../../../node_modules/rxjs/src/internal/util/isDate.ts","../../../../node_modules/rxjs/src/internal/operators/delay.ts","../../../../node_modules/rxjs/src/internal/operators/delayWhen.ts","../../../../node_modules/rxjs/src/internal/operators/dematerialize.ts","../../../../node_modules/rxjs/src/internal/operators/distinct.ts","../../../../node_modules/rxjs/src/internal/operators/distinctUntilChanged.ts","../../../../node_modules/rxjs/src/internal/operators/filter.ts","../../../../node_modules/rxjs/src/internal/operators/tap.ts","../../../../node_modules/rxjs/src/internal/operators/throwIfEmpty.ts","../../../../node_modules/rxjs/src/internal/operators/take.ts","../../../../node_modules/rxjs/src/internal/operators/elementAt.ts","../../../../node_modules/rxjs/src/internal/operators/every.ts","../../../../node_modules/rxjs/src/internal/operators/exhaust.ts","../../../../node_modules/rxjs/src/internal/operators/exhaustMap.ts","../../../../node_modules/rxjs/src/internal/operators/expand.ts","../../../../node_modules/rxjs/src/internal/operators/finalize.ts","../../../../node_modules/rxjs/src/internal/operators/find.ts","../../../../node_modules/rxjs/src/internal/operators/groupBy.ts","../../../../node_modules/rxjs/src/internal/operators/ignoreElements.ts","../../../../node_modules/rxjs/src/internal/operators/isEmpty.ts","../../../../node_modules/rxjs/src/internal/operators/takeLast.ts","../../../../node_modules/rxjs/src/internal/operators/mapTo.ts","../../../../node_modules/rxjs/src/internal/operators/materialize.ts","../../../../node_modules/rxjs/src/internal/operators/scan.ts","../../../../node_modules/rxjs/src/internal/operators/reduce.ts","../../../../node_modules/rxjs/src/internal/operators/max.ts","../../../../node_modules/rxjs/src/internal/operators/merge.ts","../../../../node_modules/rxjs/src/internal/operators/mergeMapTo.ts","../../../../node_modules/rxjs/src/internal/operators/mergeScan.ts","../../../../node_modules/rxjs/src/internal/operators/min.ts","../../../../node_modules/rxjs/src/internal/operators/multicast.ts","../../../../node_modules/rxjs/src/internal/operators/onErrorResumeNext.ts","../../../../node_modules/rxjs/src/internal/operators/pairwise.ts","../../../../node_modules/rxjs/src/internal/util/not.ts","../../../../node_modules/rxjs/src/internal/operators/partition.ts","../../../../node_modules/rxjs/src/internal/operators/pluck.ts","../../../../node_modules/rxjs/src/internal/operators/publish.ts","../../../../node_modules/rxjs/src/internal/operators/publishLast.ts","../../../../node_modules/rxjs/src/internal/operators/publishReplay.ts","../../../../node_modules/rxjs/src/internal/operators/race.ts","../../../../node_modules/rxjs/src/internal/operators/repeat.ts","../../../../node_modules/rxjs/src/internal/operators/repeatWhen.ts","../../../../node_modules/rxjs/src/internal/operators/retry.ts","../../../../node_modules/rxjs/src/internal/operators/retryWhen.ts","../../../../node_modules/rxjs/src/internal/operators/sample.ts","../../../../node_modules/rxjs/src/internal/operators/sampleTime.ts","../../../../node_modules/rxjs/src/internal/operators/sequenceEqual.ts","../../../../node_modules/rxjs/src/internal/operators/share.ts","../../../../node_modules/rxjs/src/internal/operators/shareReplay.ts","../../../../node_modules/rxjs/src/internal/operators/single.ts","../../../../node_modules/rxjs/src/internal/operators/skip.ts","../../../../node_modules/rxjs/src/internal/operators/skipLast.ts","../../../../node_modules/rxjs/src/internal/operators/skipUntil.ts","../../../../node_modules/rxjs/src/internal/operators/skipWhile.ts","../../../../node_modules/rxjs/src/internal/operators/startWith.ts","../../../../node_modules/rxjs/src/internal/observable/SubscribeOnObservable.ts","../../../../node_modules/rxjs/src/internal/operators/subscribeOn.ts","../../../../node_modules/rxjs/src/internal/operators/switchMap.ts","../../../../node_modules/rxjs/src/internal/operators/switchAll.ts","../../../../node_modules/rxjs/src/internal/operators/takeUntil.ts","../../../../node_modules/rxjs/src/internal/operators/takeWhile.ts","../../../../node_modules/rxjs/src/internal/operators/throttle.ts","../../../../node_modules/rxjs/src/internal/operators/throttleTime.ts","../../../../node_modules/rxjs/src/internal/operators/timeInterval.ts","../../../../node_modules/rxjs/src/internal/operators/timeoutWith.ts","../../../../node_modules/rxjs/src/internal/operators/timestamp.ts","../../../../node_modules/rxjs/src/internal/operators/toArray.ts","../../../../node_modules/rxjs/src/internal/operators/window.ts","../../../../node_modules/rxjs/src/internal/operators/windowCount.ts","../../../../node_modules/rxjs/src/internal/operators/windowTime.ts","../../../../node_modules/rxjs/src/internal/operators/windowToggle.ts","../../../../node_modules/rxjs/src/internal/operators/windowWhen.ts","../../../../node_modules/rxjs/src/internal/operators/withLatestFrom.ts","../../../../node_modules/rxjs/src/internal/operators/zip.ts","../../../../node_modules/rxjs/src/internal/operators/zipAll.ts","../../../../node_modules/rxjs/src/operators/index.ts","../../../packages/core/esm5/src/di/defs.js","../../../packages/core/esm5/src/di/injection_token.js","../../../packages/core/esm5/src/util/decorators.js","../../../packages/core/esm5/src/change_detection/constants.js","../../../packages/core/esm5/src/type.js","../../../packages/core/esm5/src/util.js","../../../packages/core/esm5/src/reflection/reflection_capabilities.js","../../../packages/core/esm5/src/di/forward_ref.js","../../../packages/core/esm5/src/di/injector.js","../../../packages/core/esm5/src/util/property.js","../../../packages/core/esm5/src/di/injectable.js","../../../packages/core/esm5/src/metadata/ng_module.js","../../../packages/core/esm5/src/metadata/view.js","../../../packages/core/esm5/src/version.js","../../../packages/core/esm5/src/errors.js","../../../packages/core/esm5/src/error_handler.js","../../../packages/core/esm5/src/di/reflective_errors.js","../../../packages/core/esm5/src/di/reflective_key.js","../../../packages/core/esm5/src/reflection/reflector.js","../../../packages/core/esm5/src/di/reflective_provider.js","../../../packages/core/esm5/src/di/reflective_injector.js","../../../packages/core/esm5/src/application_init.js","../../../packages/core/esm5/src/application_tokens.js","../../../packages/core/esm5/src/console.js","../../../packages/core/esm5/src/linker/compiler.js","../../../packages/core/esm5/src/profile/wtf_impl.js","../../../packages/core/esm5/src/linker/component_factory_resolver.js","../../../packages/core/esm5/src/event_emitter.js","../../../packages/core/esm5/src/zone/ng_zone.js","../../../packages/core/esm5/src/testability/testability.js","../../../packages/core/esm5/src/application_ref.js","../../../packages/core/esm5/src/zone.js","../../../packages/core/esm5/src/render/api.js","../../../packages/core/esm5/src/linker/element_ref.js","../../../packages/core/esm5/src/linker/ng_module_factory_loader.js","../../../packages/core/esm5/src/linker/query_list.js","../../../packages/core/esm5/src/linker/system_js_ng_module_factory_loader.js","../../../packages/core/esm5/src/debug/debug_node.js","../../../packages/core/esm5/src/linker/view_ref.js","../../../packages/core/esm5/src/change_detection/change_detection_util.js","../../../packages/core/esm5/src/change_detection/differs/default_iterable_differ.js","../../../packages/core/esm5/src/change_detection/differs/default_keyvalue_differ.js","../../../packages/core/esm5/src/change_detection/differs/iterable_differs.js","../../../packages/core/esm5/src/change_detection/differs/keyvalue_differs.js","../../../packages/core/esm5/src/change_detection/change_detection.js","../../../packages/core/esm5/src/application_module.js","../../../packages/core/esm5/src/sanitization/inert_body.js","../../../packages/core/esm5/src/sanitization/html_sanitizer.js","../../../packages/core/esm5/src/sanitization/security.js","../../../packages/core/esm5/src/view/types.js","../../../packages/core/esm5/src/view/errors.js","../../../packages/core/esm5/src/view/util.js","../../../packages/core/esm5/src/view/element.js","../../../packages/core/esm5/src/view/ng_module.js","../../../packages/core/esm5/src/view/view_attach.js","../../../packages/core/esm5/src/view/refs.js","../../../packages/core/esm5/src/view/provider.js","../../../packages/core/esm5/src/view/query.js","../../../packages/core/esm5/src/view/ng_content.js","../../../packages/core/esm5/src/view/text.js","../../../packages/core/esm5/src/view/view.js","../../../packages/core/esm5/src/view/pure_expression.js","../../../packages/core/esm5/src/view/services.js","../../../packages/core/esm5/src/view/entrypoint.js","../../../packages/core/esm5/src/render3/hooks.js","../../../packages/core/esm5/src/render3/ng_dev_mode.js","../../../packages/core/esm5/src/render3/node_assert.js","../../../packages/core/esm5/src/render3/interfaces/container.js","../../../packages/core/esm5/src/render3/util.js","../../../packages/core/esm5/src/render3/node_manipulation.js","../../../packages/core/esm5/src/render3/instructions.js","../../../packages/core/esm5/src/render3/view_ref.js","../../../packages/core/esm5/src/render3/di.js","../../../packages/core/esm5/src/render3/errors.js","../../../packages/core/esm5/src/render3/definition.js","../../../packages/core/esm5/src/render3/query.js","../../../packages/language-service/esm5/src/utils.js","../../../packages/language-service/esm5/src/expressions.js","../../../packages/language-service/esm5/src/html_info.js","../../../packages/language-service/esm5/src/completions.js","../../../packages/language-service/esm5/src/locate_symbol.js","../../../packages/language-service/esm5/src/language_service.js","../../../packages/language-service/esm5/src/diagnostics.js","../../../packages/language-service/esm5/src/hover.js","../../../packages/language-service/esm5/src/reflector_host.js","../../../packages/language-service/esm5/src/typescript_host.js","../../../packages/language-service/esm5/src/ts_plugin.js"],"names":["extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","this","constructor","create","prototype","__assign","assign","t","s","i","n","arguments","length","call","o","Symbol","iterator","m","next","value","done","__read","r","e","ar","push","error","__await","v","indexOf","getOwnPropertySymbols","decorators","target","key","desc","Reflect","decorate","c","defineProperty","paramIndex","decorator","metadataKey","metadataValue","metadata","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","result","then","rejected","apply","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","op","TypeError","pop","exports","concat","asyncIterator","q","a","resume","settle","fulfill","shift","__values","cooked","raw","mod","__esModule","k","default","createInject","makeMetadataFactory","token","createInjectionToken","_desc","ngInjectableDef","undefined","createAttribute","attributeName","createContentChildren","selector","data","tslib_1.__assign","first","isViewQuery","descendants","createContentChild","createViewChildren","dir","ViewEncapsulation","Emulated","Native","None","ChangeDetectionStrategy","OnPush","Default","changeDetection","createPipe","pure","createInput","bindingPropertyName","createOutput","createHostBinding","hostPropertyName","createHostListener","eventName","args","injectable","CUSTOM_ELEMENTS_SCHEMA","name","NO_ERRORS_SCHEMA","createSelf","createSkipSelf","createHost","Type","Function","SecurityContext","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","MissingTranslationStrategy","Error","Warning","props","factory","_i","values","ngMetadataName","Ignore","TypeElement","TypeText","ProjectedTemplate","CatRenderNode","TypeNgContent","TypePipe","TypePureArray","TypePureObject","TypePurePipe","CatPureExpression","TypeValueProvider","TypeClassProvider","TypeFactoryProvider","TypeUseExistingProvider","LazyProvider","PrivateProvider","TypeDirective","Component","CatProviderNoDirective","CatProvider","OnInit","OnDestroy","DoCheck","OnChanges","AfterContentInit","AfterContentChecked","AfterViewInit","AfterViewChecked","EmbeddedViews","ComponentView","TypeContentQuery","StaticQuery","DynamicQuery","CatQuery","Types","Optional","Self","SkipSelf","Inline","Dynamic","TypeElementAttribute","TypeElementClass","TypeProperty","SyntheticProperty","CatSyntheticProperty","First","All","ElementRef","TemplateRef","ViewContainerRef","Provider","DASH_CASE_REGEXP","_splitAt","input","character","defaultValues","visitValue","visitor","context","isArray","visitArray","visitStringMap","ValueTransformer","map","visitPrimitive","visitOther","isPromise","syntaxError","msg","parseErrors","ERROR_SYNTAX_ERROR","ERROR_PARSE_ERRORS","STRING_MAP_PROTO","getPrototypeOf","encoded","index","str","codePoint","charCodeAt","low","String","fromCharCode","MAX_LENGTH_STRINGIFY","stringify","join","overriddenName","res","JSON","_a","toString","newLineIndex","substring","resolveForwardRef","type","obj","full","splits","split","major","TextAst","visit","BoundTextAst","AttrAst","BoundElementPropertyAst","securityContext","unit","sourceSpan","BoundEventAst","phase","handler","ReferenceAst","originalValue","VariableAst","ElementAst","attrs","inputs","outputs","references","directives","providers","hasViewContainer","queryMatches","children","ngContentIndex","endSourceSpan","EmbeddedTemplateAst","variables","BoundDirectivePropertyAst","directiveName","templateName","DirectiveAst","directive","hostProperties","hostEvents","contentQueryStartId","ProviderAst","multiProvider","eager","providerType","lifecycleHooks","isModule","ProviderAstType","PublicService","PrivateService","Directive","Builtin","NgContentAst","visitNgContent","Style","Animation","NullTemplateVisitor","visitEmbeddedTemplate","visitElement","visitReference","visitVariable","visitEvent","visitElementProperty","visitAttr","visitBoundText","visitText","visitDirective","visitDirectiveProperty","RecursiveTemplateAstVisitor","ast","visitChildren","results","templateVisitAll","asts","forEach","astResult","_b","_c","defaultEncapsulation","_d","useJit","_e","jitDevMode","_f","missingTranslation","preserveWhitespaces","strictInjectionParameters","members","assertNoMembers","declarationFile","cache","get","StaticSymbol","set","HOST_REG_EXP","_anonymousTypeIndex","identifierName","compileIdentifier","reference","ref","identifier","CompileSummaryKind","Pipe","NgModule","Injectable","tokenReference","moduleUrl","styles","styleUrls","CompileTemplateMetadata","encapsulation","template","templateUrl","htmlAst","externalStylesheets","animations","ngContentSelectors","interpolation","isInline","_normalizeArray","flatten$1","toSummary","CompileDirectiveMetadata","isHost","isComponent","exportAs","hostListeners","hostAttributes","viewProviders","queries","guards","viewQueries","entryComponents","componentViewType","rendererType","componentFactory","host","keys","matches","match","inputsMap","bindConfig","parts","splitAtColon","outputsMap","summaryKind","CompilePipeMetadata","CompileNgModuleMetadata","declaredDirectives","exportedDirectives","declaredPipes","exportedPipes","bootstrapComponents","importedModules","exportedModules","schemas","transitiveModule","id","module","modules","TransitiveCompileNgModuleMetadata","directivesSet","Set","exportedDirectivesSet","pipesSet","pipes","exportedPipesSet","modulesSet","addProvider","addDirective","addExportedDirective","addPipe","addExportedPipe","addModule","addEntryComponent","ec","entryComponentsSet","has","componentType","add","useClass","useValue","useExisting","useFactory","deps","multi","list","url","compMeta","filePath","ngModuleType","AstPath","path$$1","position","path","parentOf","ctor","Text","Expansion","switchValue","cases","switchValueSourceSpan","visitExpansion","ExpansionCase","expression","valueSourceSpan","expSourceSpan","visitExpansionCase","Attribute","valueSpan","visitAttribute","Element","startSourceSpan","Comment","visitAll","nodes","RecursiveVisitor","visitComment","class_1","start","offset","end","spanOf","span","assertArrayOfStrings","INTERPOLATION_BLACKLIST_REGEXPS","assertInterpolationSymbols","start_1","end_1","regexp","test","fromArray","markers","DEFAULT_INTERPOLATION_CONFIG","StyleWithImports","style","isStyleUrlResolvable","TagContentType","RAW_TEXT","ESCAPABLE_RAW_TEXT","splitNsName","elementName","colonIndex","NAMED_ENTITIES","Aacute","aacute","Acirc","acirc","acute","AElig","aelig","Agrave","agrave","alefsym","Alpha","alpha","amp","and","ang","apos","Aring","aring","asymp","Atilde","atilde","Auml","auml","bdquo","Beta","beta","brvbar","bull","cap","Ccedil","ccedil","cedil","cent","Chi","chi","circ","clubs","cong","copy","crarr","cup","curren","dagger","Dagger","darr","dArr","deg","Delta","delta","diams","divide","Eacute","eacute","Ecirc","ecirc","Egrave","egrave","empty","emsp","ensp","Epsilon","epsilon","equiv","Eta","eta","ETH","eth","Euml","euml","euro","exist","fnof","forall","frac12","frac14","frac34","frasl","Gamma","gamma","ge","gt","harr","hArr","hearts","hellip","Iacute","iacute","Icirc","icirc","iexcl","Igrave","igrave","image","infin","int","Iota","iota","iquest","isin","Iuml","iuml","Kappa","kappa","Lambda","lambda","lang","laquo","larr","lArr","lceil","ldquo","le","lfloor","lowast","loz","lrm","lsaquo","lsquo","lt","macr","mdash","micro","middot","minus","Mu","mu","nabla","nbsp","ndash","ne","ni","not","notin","nsub","Ntilde","ntilde","Nu","nu","Oacute","oacute","Ocirc","ocirc","OElig","oelig","Ograve","ograve","oline","Omega","omega","Omicron","omicron","oplus","or","ordf","ordm","Oslash","oslash","Otilde","otilde","otimes","Ouml","ouml","para","permil","perp","Phi","phi","Pi","pi","piv","plusmn","pound","prime","Prime","prod","prop","Psi","psi","quot","radic","rang","raquo","rarr","rArr","rceil","rdquo","real","reg","rfloor","Rho","rho","rlm","rsaquo","rsquo","sbquo","Scaron","scaron","sdot","sect","shy","Sigma","sigma","sigmaf","sim","spades","sub","sube","sum","sup","sup1","sup2","sup3","supe","szlig","Tau","tau","there4","Theta","theta","thetasym","thinsp","THORN","thorn","tilde","times","trade","Uacute","uacute","uarr","uArr","Ucirc","ucirc","Ugrave","ugrave","uml","upsih","Upsilon","upsilon","Uuml","uuml","weierp","Xi","xi","Yacute","yacute","yen","yuml","Yuml","zwj","zwnj","NG_CONTENT_SELECT_ATTR","LINK_ELEMENT","LINK_STYLE_REL_ATTR","LINK_STYLE_HREF_ATTR","NG_PROJECT_AS","preparseElement","selectAttr","hrefAttr","relAttr","nonBindable","projectAs","attr","lcAttrName","toLowerCase","NG_NON_BINDABLE_ATTR","normalizeNgContentSelect","nodeName","PreparsedElementType","OTHER","isNgContent","NG_CONTENT","STYLE_ELEMENT","SCRIPT_ELEMENT","STYLESHEET","PreparsedElement","DirectiveNormalizer","_resourceLoader","_urlResolver","_htmlParser","_config","_resourceLoaderCache","Map","clear","clearCacheFor","normalizedDirective","_this","_fetch","normalizeTemplate","prenormData","isDefined","_preParseTemplate","prenomData","templateAbsUrl","interpolationConfig","InterpolationConfig","rootNodesAndErrors","parse","templateSourceUrl","errors","templateMetadataStyles","_normalizeStylesheet","CompileStylesheetMetadata","TemplatePreparseVisitor","rootNodes","templateStyles","_normalizeTemplateMetadata","preparsedTemplate","slice","_inlineStyles","inlineStyleUrls","stylesheets","styleUrl","stylesheet","targetStyles","_loadMissingExternalStylesheets","loadedStylesheets","SyncAsync","filter","loadedStyle","allStyleUrls","allStyles","resolver","baseUrl","foundUrls","modifiedCssText","styleWithImports","replace","CSS_STRIPPABLE_COMMENT_REGEXP","CSS_IMPORT_REGEXP","preparsedElement","ngNonBindableStackCount","textContent_1","child","QUERY_METADATA_IDENTIFIERS","createViewChild","isDirective","DirectiveResolver","throwIfNotFound","typeMetadata","_reflector","annotations","findLast","isDirectiveMetadata","propertyMetadata","propMetadata","_mergeWithPropertyMetadata","dm","directiveType","propName","isTypeOf","output","hostBinding","startWith","hostListener","query","some","def","trim","_dedupeBindings","bindings","names","publicNames","reversedResult","binding","name_1","_extractPublicName","mergedInputs","mergedOutputs","mergedHost","mergedQueries","comp","createComponent","moduleId","createDirective","arr","condition","$EOF","$TAB","$LF","$VTAB","$FF","$CR","$SPACE","$DQ","$$","$SQ","$PLUS","$MINUS","$SLASH","$SEMICOLON","$EQ","$GT","$0","$9","$A","$E","$F","$Z","$_","$a","$e","$f","$n","$r","$t","$v","$BT","TokenType","Character","Identifier","Keyword","Operator","Number","tokenize","text","scanner","_Scanner","tokens","scanToken","Lexer","Token","numValue","strValue","isCharacter","code","isOperator","operater","isKeywordUndefined","advance","peek","chars.isDigit","isIdentifierStart","chars.$PERIOD","scanIdentifier","chars.$LBRACE","chars.$RBRACE","scanNumber","chars.$LBRACKET","chars.$COLON","chars.$HASH","scanCharacter","chars.$MINUS","chars.$STAR","scanString","chars.$CARET","scanOperator","scanComplexOperator","chars.$AMPERSAND","$NBSP","isWhitespace","one","twoCode","two","threeCode","three","newOperatorToken","isIdentifierPart","simple","isDigit","isExponentSign","parseInt","quote","buffer","marker","unescapedCode","hex","unescape","message","isIdentifier","errLocation","ctxLocation","ParseSpan","AST","_super","Quote","prefix","uninterpretedExpression","location","visitQuote","EmptyExpr","ImplicitReceiver","Chain","tslib_1.__extends","visitChain","Conditional","trueExp","falseExp","visitConditional","PropertyRead","receiver","visitPropertyRead","PropertyWrite","visitPropertyWrite","SafePropertyRead","visitSafePropertyRead","KeyedRead","visitKeyedRead","KeyedWrite","visitKeyedWrite","BindingPipe","exp","visitPipe","LiteralPrimitive","visitLiteralPrimitive","LiteralArray","visitLiteralArray","LiteralMap","visitLiteralMap","Interpolation","strings","expressions","visitInterpolation","Binary","operation","left","right","visitBinary","PrefixNot","visitPrefixNot","NonNullAssert","visitNonNullAssert","MethodCall","visitMethodCall","SafeMethodCall","visitSafeMethodCall","FunctionCall","visitFunctionCall","ASTWithSource","source","keyIsVar","NullAstVisitor","visitImplicitReceiver","RecursiveAstVisitor","AstTransformer","AstMemoryEfficientTransformer","modified","original","visitAstChildren","offsets","templateBindings","warnings","_createInterpolateRegExp","config","pattern","escapeRegExp","RegExp","_checkNoInterpolation","sourceToLex","_stripComments","_parseBindingAst","SimpleExpressionChecker","check","_parseQuote","Parser","prefixSeparatorIndex","_lexer","prefixTokens","prefixToken","splitInterpolation","expressionText","_ParseAST","part","_reportError","_findInterpolationErrorColumn","wrapLiteralPrimitive","_commentStart","outerQuote","char","nextChar","isQuote","partInErrIdx","j","inputLength","parseAction","optionalCharacter","isKeywordAs","expectCharacter","optionalOperator","expectOperator","operator","expectIdentifierOrKeyword","isKeyword","expectIdentifierOrKeywordOrString","isString","parseChain","exprs","inputIndex","expr","parsePipe","parseExpression","parseConditional","parseLogicalOr","yes","no","parseLogicalAnd","parseEquality","parseRelational","parseAdditive","parseMultiplicative","parsePrefix","parseCallChain","parsePrimary","parseAccessMemberOrMethodCall","rbracketsExpected","rparensExpected","parseCallArguments","chars.$RPAREN","isKeywordNull","isKeywordTrue","isKeywordFalse","isKeywordThis","elements","parseExpressionList","$LBRACE","parseLiteralMap","isNumber","toNumber","literalValue","terminator","rbracesExpected","quoted","chars.$COMMA","isSafe","positionals","expectTemplateBindingKey","operatorFound","parseTemplateBindings","peekKeywordLet","rawKey","toUpperCase","name_2","peekKeywordAs","letStart","EOF","TemplateBinding","chars.$SEMICOLON","letName","locationText","skip","isError","ParserError","ParseLocation","file","line","col","moveBy","content","len","ch","priorLine","substr","lastIndexOf","getContext","maxLines","startOffset","endOffset","ctxChars","ctxLines","maxChars","before","after","ParseSourceFile","ParseSourceSpan","details","ParseErrorLevel","WARNING","ERROR","ParseError","level","contextualMessage","typeSourceSpan","kind","identifierModuleUrl","TokenType$1","TAG_OPEN_START","TAG_OPEN_END","TAG_OPEN_END_VOID","TAG_CLOSE","TEXT","COMMENT_START","COMMENT_END","CDATA_START","CDATA_END","ATTR_NAME","ATTR_VALUE","DOC_TYPE","EXPANSION_FORM_START","EXPANSION_CASE_VALUE","EXPANSION_CASE_EXP_START","EXPANSION_CASE_EXP_END","EXPANSION_FORM_END","TokenError","errorMsg","tokenType","TokenizeResult","_CR_OR_CRLF_REGEXP","_unknownEntityErrorMsg","entitySrc","_ControlFlowError","_Tokenizer","_file","_getTagDefinition","_tokenizeIcu","_interpolationConfig","_peek","_nextPeek","_index","_line","_column","_expansionCaseStack","_inInterpolation","_getLocation","_attemptCharCode","_consumeCdata","_consumeComment","_consumeDocType","_consumeTagClose","_consumeTagOpen","_tokenizeExpansionForm","_consumeText","srcTokens","dstTokens","lastDstToken","isExpansionFormStart","_input","_consumeExpansionFormStart","_isInExpansionForm","_consumeExpansionCaseStart","_isInExpansionCase","_consumeExpansionCaseEnd","_consumeExpansionFormEnd","_getSpan","_beginToken","_endToken","Token$1","_currentTokenType","_currentTokenStart","_createError","_advance","_length","_unexpectedCharacterErrorMsg","charCode","_attemptCharCodeCaseInsensitive","_requireCharCode","_attemptStr","chars","initialPosition","_savePosition","_restorePosition","_attemptStrCaseInsensitive","_requireStr","_attemptCharCodeUntilFn","_requireCharCodeUntilFn","predicate","_attemptUntilChar","_readChar","decodeEntities","_decodeEntity","startPosition","isNamedEntityEnd","isHex","numberStart","isDigitEntityEnd","strNum","entity","firstCharOfEnd","attemptEndRest","tagCloseStart","textStart","_consumePrefixAndName","nameStart","nameOrPrefixStart","tagName","lowercaseTagName","savedPos","isAsciiLetter","_consumeTagOpenStart","isNotWhitespace","_consumeAttributeName","_consumeAttributeValue","_consumeTagOpenEnd","contentTokenType","contentType","_consumeRawTextWithTagClose","textToken","_consumeRawText","prefixAndName","quoteChar","valueStart","_processCarriageReturns","_readUntil","_isTextEnd","nbTokens","TreeError","ParseTreeResult","parseExpansionForms","tokensAndErrors","getTagDefinition","tokenizeExpansionForms","treeAndErrors","_TreeBuilder","build","_consumeStartTag","lex.TokenType","_consumeEndTag","_closeVoidElement","_consumeExpansion","_rootNodes","_errors","prev","_advanceIf","expCase","html.Expansion","parsedExp","html.ExpansionCase","_collectExpansionExpTokens","expansionFormStack","lastOnStack","parent_1","_getParentElement","ignoreFirstLf","startTagToken","fullName","_getElementFullName","selfClosing","tagDef","canSelfClose","getNsPrefix","isVoid","el","_pushElement","parentEl","isClosedByChild","_elementStack","_getParentElementSkippingContainers","parent","container","requireExtraParent","newParent","parentToAdd","endTagToken","_popElement","stackIndex","splice","closedByParent","_consumeAttr","attrName","mergeNsAndName","valueToken","Attribute$1","isNgContainer","_addToParent","node","localName","parentElement","utf8","utf8Encode","words32","endian","stringToWords32","Endian","Big","w","h0","h1","h2","h3","h4","rol32","fk","temp","reduce","add32","decimalDigest","meaning","fingerprint","hi","lo","him","lom","ah","al","count","decimal","toThePower","_SerializerVisitor","visitContainer","visitIcu","visitTagPlaceholder","ph","visitPlaceholder","visitIcuPlaceholder","serializerVisitor","_SerializerIgnoreIcuExpVisitor","icu","strCases","hash32","mix","wordAt","Little","sub32","word","byteAt","addBigInt","x","Math","max","carry","tmpSum","num","product","bToThePower","placeholders","placeholderToMessage","description","startLine","startCol","endLine","endCol","Container","Icu","TagPlaceholder","tag","startName","closeName","Placeholder","IcuPlaceholder","CloneVisitor","RecurseVisitor","HtmlTagDefinition","closedByChildren","requiredParents","implicitNamespacePrefix","PARSABLE_DATA","currentParent","TAG_DEFINITIONS","base","meta","area","embed","link","img","param","hr","tr","td","th","svg","math","li","dt","dd","rb","rt","rtc","rp","optgroup","option","pre","listing","_DEFAULT_TAG_DEFINITION","TAG_TO_PLACEHOLDER_NAMES","A","B","BR","EM","H1","H2","H3","H4","H5","H6","HR","I","LI","LINK","OL","Q","S","SMALL","SUB","SUP","TBODY","TD","TFOOT","TH","THEAD","signature","_hashTag","_signatureToName","upperTag","getCloseTagPlaceholderName","_hashClosingTag","PlaceholderRegistry","getPlaceholderName","upperName","getUniquePlaceholder","_generateUniqueName","_placeHolderNameCounts","_isIcu","html.visitAll","_icuDepth","i18n.Message","_placeholderRegistry","_I18nVisitor","getHtmlTagDefinition","startPhName","getStartTagPlaceholderName","_placeholderToContent","i18n.TagPlaceholder","i18nIcuCases","i18nIcu","_visitTextWithInterpolation","Text$1","sDelimiter","eDelimiter","i18n.Text","baseName","i18n.Placeholder","phName","lastStringIdx","_CUSTOM_PH_EXP","I18nError","__extends","_I18N_ATTR","ExtractionResult","messages","_VisitorMode","_init","Extract","translations","Merge","_translations","translatedNode","_Visitor","icuCase","wasInIcu","_inIcu","_isInTranslatableSection","_addMessage","_mode","comment","isOpening","isClosing","_isClosingComment","_inI18nBlock","_depth","_blockStartDepth","_closeTranslatableSection","_blockChildren","_blockMeaningAndDesc","_translateMessage","i18nCommentsWarned","console","warn","_I18N_COMMENT_PREFIX_REGEXP","_openTranslatableSection","_mayBeAddBlockChildren","childNodes","translatedChildNodes","i18nAttr","i18nMeta","isImplicit","_implicitTags","isTopLevelImplicit","wasInImplicitNode","_inI18nNode","isTranslatable","visited","_visitAttributesOf","wasInI18nNode","_inImplicitNode","mode","_msgCountAtSectionStart","_expParser","toI18nMessage","explicitAttrNameToValue","implicitAttrNames","_implicitAttrs","startsWith","msgMeta","_translateAttributes","attributes","i18nParsedMessageMeta","_parseMessageMeta","translatedAttributes","html.Attribute","_createI18nMessage","html.Text","digest","directChildren","startIndex","_messages","i18n","idIndex","ID_SEPARATOR","descIndex","MEANING_SEPARATOR","meaningAndDesc","_TAG_DEFINITION","XmlTagDefinition","Serializer","createNameMapper","SimplePlaceholderMapper","mapName","internalToPublic","toPublicName","toInternalName","visitPlaceholderName","internalName","publicName","publicToInternal","nextId","publicToNextId","_visitor","visitTag","strAttrs","_serializeAttributes","visitDeclaration","visitDoctype","doctype","Declaration","unescapedAttrs","Doctype","Tag","CR","ws","_ESCAPED_CHARS","Xliff","write","locale","_WriteVisitor","transUnits","contextTags","sources","contextGroupTag","xml.CR","purpose","context-type","Text$2","transUnit","datatype","serialize","xml.Text","priority","from","xml.Tag","source-language","xml.Declaration","load","XliffParser","msgIdToHtml","i18nNodesByMsgId","converter","XmlToI18n","msgId","convert","i18nNodes","expressionPlaceholder","ctype","getCtypeForTag","equiv-text","ml.visitAll","_unitMlString","_msgIdToHtml","xml","XmlParser","xliff","idAttr","element","find","_addError","innerTextStart","innerTextEnd","innerText","localeAttr","xmlIcu","nameAttr","i18n.Icu","caseMap","Xliff2","_WriteVisitor$1","units","notes","category","segment","_VERSION","_XMLNS","xml.serialize","_MARKER_TAG","Xliff2Parser","XmlToI18n$1","getTypeForTag","_nextPlaceholderId","disp","tagPc","equivStart","equivEnd","dispStart","dispEnd","idStr","_SOURCE_TAG","_locale","versionAttr","version","startAttr","endAttr","_PLACEHOLDER_TAG","startId","endId","Xmb","exampleVisitor","ExampleVisitor","_Visitor$2","rootNode","sourceTags","encoding","digest$1","startEx","startTagPh","addDefaultExamples","exText","decl","Xtb","XmlToI18n$2","valueFn","enumerable","createLazyProperty","XtbParser","xtb","_bundleDepth","langAttr","TranslationBundle","_i18nNodesByMsgId","mapperFactory","missingTranslationStrategy","serializer","srcMsg","html","_i18nToHtml","I18nToHtmlVisitor","_digest","_mapperFactory","_missingTranslationStrategy","_console","_contextStack","_convertToText","HtmlParser","_mapper","_srcMsg","mapper","ctx","I18NHtmlParser","translationsFormat","format","createSerializer","_translationBundle","parseResult","implicitTags","implicitAttrs","merge","Identifiers","ANALYZE_FOR_ENTRY_COMPONENTS","moduleName","CORE","NgModuleRef","ChangeDetectorRef","QueryList","CodegenComponentFactoryResolver","ComponentFactoryResolver","ComponentFactory","ComponentRef","NgModuleFactory","createModuleFactory","moduleDef","moduleProviderDef","RegisterModuleFactoryFn","inject","INJECTOR","Injector","defineInjectable","LOCALE_ID","TRANSLATIONS_FORMAT","inlineInterpolate","interpolate","EMPTY_ARRAY","EMPTY_MAP","Renderer","viewDef","elementDef","anchorDef","textDef","directiveDef","providerDef","queryDef","pureArrayDef","pureObjectDef","purePipeDef","nodeValue","ngContentDef","unwrapValue","createRendererType2","RendererType2","ViewDefinition","TypeModifier","Const","modifiers","hasModifier","modifier","BuiltinTypeName","Bool","Int","Inferred","BuiltinType","visitType","visitBuiltinType","ExpressionType","visitExpressionType","ArrayType","of","visitArrayType","MapType","valueType","visitMapType","Type$1","DYNAMIC_TYPE","INFERRED_TYPE","BinaryOperator","Equals","NotEquals","Identical","NotIdentical","Minus","Plus","Divide","Multiply","Modulo","And","Or","BitwiseAnd","Lower","LowerEquals","Bigger","BiggerEquals","nullSafeIsEquivalent","other","areAllEquivalent","isEquivalent","Expression","callFn","equals","notEquals","identical","notIdentical","plus","multiply","modulo","lower","lowerEquals","bigger","biggerEquals","cast","CastExpr","toStmt","ExpressionStatement","BuiltinVar","This","Super","CatchError","CatchStack","ReadVarExpr","builtin","visitExpression","WriteVarExpr","toDeclStmt","DeclareVarStmt","WriteKeyExpr","visitWriteKeyExpr","WritePropExpr","visitWritePropExpr","BuiltinMethod","ConcatArray","SubscribeObservable","Bind","InvokeMethodExpr","method","visitInvokeMethodExpr","InvokeFunctionExpr","fn","visitInvokeFunctionExpr","InstantiateExpr","classExpr","visitInstantiateExpr","LiteralExpr","visitLiteralExpr","ExternalExpr","typeParams","runtime","visitExternalExpr","ConditionalExpr","trueCase","falseCase","visitConditionalExpr","NotExpr","visitNotExpr","AssertNotNull","visitAssertNotNullExpr","visitCastExpr","FnParam","FunctionExpr","params","statements","DeclareFunctionStmt","BinaryOperatorExpr","lhs","rhs","parens","visitBinaryOperatorExpr","ReadPropExpr","ReadKeyExpr","LiteralArrayExpr","entries","every","isConstant","visitLiteralArrayExpr","LiteralMapEntry","LiteralMapExpr","visitLiteralMapExpr","CommaExpr","NULL_EXPR","TYPED_NULL_EXPR","StmtModifier","Final","Private","Exported","Static","Statement","visitStatement","visitDeclareVarStmt","visitDeclareFunctionStmt","visitExpressionStmt","ReturnStatement","visitReturnStmt","AbstractClassPart","ClassField","initializer","ClassMethod","ClassGetter","ClassStmt","fields","getters","constructorMethod","methods","stmt","visitDeclareClassStmt","IfStmt","visitIfStmt","CommentStmt","multiline","visitCommentStmt","JSDocCommentStmt","tags","visitJSDocCommentStmt","out","tags_1","tagToString","serializeTags","TryCatchStmt","bodyStmts","catchStmts","visitTryCatchStmt","ThrowStmt","transformExpr","transformStmt","visitReadVarExpr","visitWriteVarExpr","visitFunctionExpr","visitReadPropExpr","visitReadKeyExpr","entry","visitCommaExpr","visitAllExpressions","getter","visitAllStatements","ctorMethod","visitThrowStmt","stmts","findReadVarNames","_ReadVarVisitor","varNames","RecursiveAstVisitor$1","_FindExternalReferencesVisitor","applySourceSpanToStatementIfNeeded","applySourceSpanToExpressionIfNeeded","transformer","_ApplySourceSpanTransformer","_clone","clone","convertValueToOutputAst","_ValueOutputAstTransformer","o.LiteralMapExpr","quotedSet","o.literal","mapEntry","InjectableCompiler","depsArray","dep","o.importExpr","defaultValue","flags","literal","tokenInjector","importExpr","factoryFor","retValue","clazz","symbol","injectableDef","providedIn","compile","o.ClassMethod","alwaysGenerateDef","className","splitTypescriptSuffix","forceSourceFile","lastDot","LOWERED_SYMBOL","LifecycleHooks","hook","_SELECTOR_REGEXP","_addResult","cssSel","notSelectors","classNames","cssSelector","CssSelector","current","inNot","lastIndex","exec","setElement","addClassName","addAttribute","isElementSelector","getMatchingElementTemplate","classAttr","getAttrs","klass","SelectorMatcher","_elementMap","_elementPartialMap","_classMap","createNotMatcher","addSelectables","cssSelectors","callbackCtxt","listContext","SelectorListContext","_listContexts","matcher","selectable","SelectorContext","isTerminal","_addTerminal","_addPartial","_classPartialMap","terminalMap","_attrValueMap","terminalValuesMap","partialMap","_attrValuePartialMap","partialValuesMap","terminalList","matchedCallback","alreadyMatched","_matchTerminal","_matchPartial","name_3","selectables","starSelectables","nestedSelector","selectors","cbContext","finalize","callback","CompileMetadataResolver","_ngModuleResolver","_directiveResolver","_pipeResolver","_summaryResolver","_schemaRegistry","_directiveNormalizer","_staticSymbolCache","_errorCollector","_nonNormalizedDirectiveCache","_directiveCache","_summaryCache","_shallowModuleCache","dirMeta","delete","_pipeCache","_ngModuleOfTypes","clearCache","_createProxyClass","baseType","delegate","proxyClass","setDelegate","getGeneratedClass","dirType","ngfactoryFilePath","getComponentViewClass","getHostComponentViewClass","cpl.identifierName","getRendererType","rendererTypeName","hostView","initComponentFactory","_loadSummary","typeSummary","summary","resolveSummary","getHostComponentMetadata","hostViewType","hostType","cpl.CompileTemplateMetadata","diDeps","isSync","getNonNormalizedDirectiveMetadata","annotation","createDirectiveMetadata","templateMetadata","normalizedDirMeta","templateMeta","componentModuleUrl","cacheEntry","nonNormalizedTemplateMetadata","noUndefined","entryComponentMetadata","_getProvidersMetadata","stringifyType","flattenAndDedupeArray","_getEntryComponentMetadata","getDefaultComponentElementName","_getQueriesMetadata","_getTypeMetadata","changeDetectionStrategy","getComponentFactory","getDirectiveSummary","dirSummary","isPipe","isNgModule","getNgModuleSummary","moduleType","alreadyCollecting","moduleSummary","moduleMeta","getNgModuleMetadata","ngModule","loading","promise","loadDirectiveMetadata","getShallowModuleMetadata","compileMeta","ngModuleMeta","shallowAnnotations","createNgModule","rawExports","rawImports","imports","_ngModuleCache","exportedNonModuleIdentifiers","importedType","importedModuleType","isValidType","moduleWithProviders","_checkSelfImport","_getTypeDescriptor","importedModuleSummary","exportedType","exportedModuleSummary","_getTransitiveNgModuleMetadata","declarations","declaredType","declaredIdentifier","_getIdentifierMetadata","_addTypeToModule","exportedId","bootstrap","oldModule","modulesByToken","cpl.tokenReference","modSummary","addedTokens","tokenRef","provider","prevModules","moduleRef","isInjectable","getInjectableSummary","dependencies","throwOnUnknownDeps","ann","createInjectable","_getFactoryMetadata","pipeType","pipeMeta","getPipeSummary","pipeSummary","getOrLoadPipeMetadata","_loadPipeMetadata","pipeAnnotation","typeOrFunc","hasUnknownDeps","dependenciesMetadata","parameters","isAttribute","isSelf","isSkipSelf","isOptional","paramEntry","createOptional","_getTokenMetadata","depsTokens","targetEntryComponents","debugInfo","compileProviders","providerIdx","providerMeta","cpl.ProviderMeta","_validateProvider","ProviderMeta","provide","providersInfo","soFar","seenProvider","seenProviderIdx","resolveExternalReference","_getEntryComponentsFromProvider","getProviderMetadata","targetIdentifiers","components","collectedIdentifiers","_CompileValueConverter","_getInjectableTypeMetadata","compileDeps","compileTypeMetadata","compileFactoryMetadata","propertyName","_queryVarBindings","varName","error$$1","otherType","array","tree","item","flattenArray","ProviderError","reflector","component","viewQueryId","_getViewQueries","ProviderElementContext","viewContext","_parent","_isViewRoot","_directiveAsts","refs","isTemplate","_sourceSpan","_transformedProviders","_seenProviders","_queriedTokens","transformedHasViewContainer","_attrs","attrAst","targetErrors","directivesMeta","directiveAst","_allProviders","_resolveProviders","providersByToken","_contentQueries","contentQueryId","contentQueries","directiveIndex","_getContentQueries","_addQueryReadsTo","templateRefId","createTokenForExternalReference","refAst","defaultQueryValue","lazyProviders","eagerProviders","sortedProviderTypes","transformProviders","sortedDirectives","sort","dir1","dir2","allMatches","queryReadTokens","queryValue","read","_getQueriesFor","currentEl","distance","requestingProviderType","resolvedProvider","transformedProviderAst","tokenName","transformedProviders","transformedUseValue","transformedUseExisting","transformedDeps","existingDiDep","_getDependency","_transformProvider","attrValue","isValue","_getOrCreateLocalProvider","currElement","currEager","_getLocalDependency","prevElement","NgModuleProviderAnalyzer","extraProviders","errorString","requestorSourceSpan","targetProvidersByToken","isUseValue","providerAst","lifecycleHook","lifecycleHookToNodeFlag","allDepDefs","allParams","providerIndex","depExprs","convertDeps","instantiate","literalArr","o.variable","depIndex","paramName","multiProviderDef","singleProviderDef","providerExpr","depsExpr","o.NULL_EXPR","depDef","tokenExpr","nodeFlag","o.literalArr","entryComponentFactories","entryComponent","classMeta","NgModuleCompileResult","ngModuleFactoryVar","providerParser","providerDefs","componentFactoryResolverProviderDef","o.FnParam","ngModuleDef","ngModuleDefFactory","LOG_VAR","_createNgModuleFactory","registerFactoryStmt","variable","NgModuleCompiler","createStub","ngModuleFactoryStmt","NgModuleResolver","SourceMapGenerator","addSource","addLine","col0","sourceUrl","sourceLine0","sourceCol0","currentLine","sourcesContent","lastCol0","hasMappings","configurable","toJSON","sourcesIndex","mappings","lastSourceIndex","lastSourceLine0","segments","segAsStr","toBase64VLQ","lastSourceCol0","VERSION","sourceRoot","toJsComment","b64","i1","i2","i3","toBase64Digit","isNaN","digit","B64_DIGITS","CATCH_STACK_VAR$1","indent","partsLength","srcSpans","EmitterVisitorContext","_indent","_lines","_EmittedLine","createRoot","println","print","lastPart","lineLength","newLine","_currentLine","removeEmptyLastLine","incIndent","decIndent","popClass","_classes","toSource","toSourceMapGenerator","genFilePath","startsAtLine","mapFirstOffsetIfNeeded","firstOffsetMapped","addMapping","sourceLines","lineIdx","spans","_INDENT_WITH","spanIdx","sourceLine","sourceCol","column","emittedLine","_preambleLineCount","columnsLeft","_createIndent","partIndex","AbstractEmitterVisitor","hasElseCase","lineWasEmpty","lineIsEmpty","getBuiltinMethodName","o.BuiltinVar","CATCH_ERROR_VAR$1","escapeIdentifier","_escapeDollarInStrings","o.BinaryOperator","opStr","visitAllObjects","separator","incrementedIndent","escapeDollar","alwaysQuote","_SINGLE_QUOTE_ESCAPE_STRING_RE","debugOutputAstAsTypeScript","_TsEmitterVisitor","o.Expression","preamble","emitSourceMaps","referenceFilter","importFilter","preambleLines","reexportsCode","reexports","reexport","as","exportedModuleName","importsWithPrefixes","importedModuleName","lines","sm","emitStatementsAndContext","sourceText","TypeScriptEmitter","defaultType","typeExpression","_printColonType","pushClass","field","_visitClassField","_visitClassConstructor","_visitClassGetter","_visitClassMethod","_visitParams","o.BuiltinTypeName","typeStr","o.BuiltinMethod","size","metas","registerContext","specs","spec","specs_1","SECURITY_SCHEMA","SCHEMA$1","_ATTR_TO_PROP","class","for","formaction","readonly","DomElementSchemaRegistry","_schema","encodedType","strType","properties","typeNames","superName","superType","property","BOOLEAN$1","NUMBER$1","OBJECT$1","STRING$1","schemaMetas","schema","hasElement","getMappedPropName","validateProperty","validateAttribute","normalizeAnimationStyleProperty","camelCaseProp","userProvidedProp","val","strVal","valAndSuffixMatch","ElementSchemaRegistry","cssText","hostSelector","commentsWithHash","_commentWithHashRe","_insertDirectives","_cssContentNextSelectorRe","_cssContentRuleRe","scopeSelector","unscopedRules","_extractUnscopedRulesFromCssText","_insertPolyfillHostInCssText","_convertColonHost","_convertColonHostContext","_convertShadowDOMSelectors","_cssContentUnscopedRuleRe","regExp","partReplacer","_polyfillHostNoCombinator","suffix","_polyfillHost","_colonHostPartReplacer","ruleCallback","inputWithEscapedBlocks","nextBlockIndex","rule","_scopeSelector","strictStyling","inputParts","_curlyRe","resultParts","escapedBlocks","bracketCount","currentBlockParts","CLOSE_CURLY","BLOCK_PLACEHOLDER","OPEN_CURLY","escapeBlocks","escapedString","_ruleRe","contentPrefix","blocks","CssRule","strict","_shadowDeepSelectors","deepParts","otherParts","shallowPart","_selectorNeedsScoping","_applyStrictSelectorScope","_applySelectorScope","ShadowCss","_makeScopeMatcher","replaceBy_1","_polyfillHostNoCombinatorRe","hnc","colon","_scopeSelectorPart","scopedP","_applySimpleSelectorScope","_polyfillHostRe","safeContent","SafeSelector","shouldScope","sep","part_1","scopedSelector","_colonHostContextRe","_polyfillHostContext","_colonHostRe","keep","replaceBy","_content","pseudo","restore","_parenSuffix","_cssColonHostRe","_cssColonHostContextRe","_shadowDOMSelectorsRe","_commentRe","StringWithEscapedBlocks","setValue","outputCtx","stylesVar","isShimmed","StyleCompiler","compileComponent","_compileStyles","needsStyleShim","shim","isComponentStylesheet","styleExpressions","plainStyle","_shimIfNeeded","StylesCompileDependency","getStylesVarName","exprIndex","PRESERVE_WS_ATTR_NAME","SKIP_WS_TRIM_TAGS","WS_REPLACE_REGEXP","WS_CHARS","WhitespaceVisitor","NO_WS_REGEXP","expandNodes","expander","_Expander","ExpansionResult","isExpanded","expanded","ExpansionError","PLURAL_CASES","html.Element","expansionResult","BoundPropertyType","DEFAULT","LITERAL_ATTR","ANIMATION","BindingParser","_exprParser","_targetErrors","pipe","pipesByName","createBoundHostProperties","boundProps_1","parsePropertyBinding","elementSelector","createDirectiveHostEventAsts","targetEventAsts_1","parseEvent","parseInterpolation","sourceInfo","_reportExpressionParserErrors","_checkPipes","targetMatchableAttrs","targetProps","targetVars","_parseTemplateBindings","_parsePropertyAst","bindingsResult","warning","_parseAnimation","isAnimationProp","_isAnimationLabel","isHostBinding","parseSimpleBinding","parseBinding","createElementPropertyAst","boundProp","isAnimation","PropertyBindingType","bindingType","boundPropertyName","securityContexts","_validatePropertyOrAttributeName","calcPossibleSecurityContexts","nsSeparatorIdx","Class","targetEvents","_parseAnimationEvent","_parseAction","collector","PipeCollector","pipeName","isAttr","report","registry","ctxs","elementNames","allKnownElementNames","notElementNames","TemplateParseError","templateAst","usedPipes","TemplateParser","transforms","tryParse","htmlParseResult","getInterpolationConfig","htmlAstWithErrors","uniqDirectives","removeSummaryDuplicates","uniqPipes","providerViewContext","ProviderViewContext","bindingParser","parseVisitor","TemplateParseVisitor","EMPTY_ELEMENT_CONTEXT","getUsedPipes","_assertNoReferenceDuplicationOnTemplate","TemplateParseResult","expandHtml","forced","expandedHtmlAst","existingReferences","_bindingParser","_schemas","selectorMatcher","directivesIndex","ngContentCount","findNgContentIndex","TEXT_CSS_SELECTOR","matchableAttrs","elementOrDirectiveProps","elementOrDirectiveRefs","elementVars","events","templateElementOrDirectiveProps","templateMatchableAttrs","templateElementVars","hasInlineTemplates","isTemplateElement","isNgTemplate","templateBindingsSource","hasBinding","_parseAttr","normalizedName","_normalizeAttributeName","hasTemplateBinding","parseInlineTemplateBinding","elementCssSelector","createElementCssSelector$1","_parseDirectives","directiveMetas","matchElement","boundDirectivePropNames","directiveAsts","_createDirectiveAsts","isViewRoot","providerContext","queryStartIndex","NON_BINDABLE_VISITOR","ElementContext","afterElement","parsedElement","projectionSelector","_isEmptyTextNode","_assertAllEventsPublishedByDirectives","_assertNoComponentsNorElementBindingsOnTemplate","elementProps","transformedDirectiveAsts","_assertElementExists","_assertOnlyOneComponent","ngContentIndex_1","createElementCssSelector","templateQueryStartIndex","templateSelector","templateDirectiveMetas","templateBoundDirectivePropNames","templateDirectiveAsts","templateElementProps","_createElementPropertyAsts","templateProviderContext","targetRefs","srcSpan","bindParts","BIND_NAME_REGEXP","_parseVariable","_parseReference","_parseAssignmentEvent","parseLiteralAttr","parsePropertyInterpolation","hasElementSelector","elementSourceSpan","targetReferences","targetBoundDirectivePropNames","matchedReferences","directiveProperties","createDirectiveHostPropertyAsts","_checkPropertiesInSchema","elOrDirRef","isReferenceToDirective","createTokenForReference","refToken","boundProps","targetBoundDirectiveProps","prevValue","boundPropsByName_1","isLiteral","dirProp","elProp","isEmptyExpression","boundElementProps","_findComponentDirectives","_findComponentDirectiveNames","componentTypeNames","elName","allDirectiveEvents","event","Property","hasProperty","NonBindableVisitor","attrNameAndValues","ElementOrDirectiveRef","splitClasses","classAttrValue","_ngContentIndexMatcher","_wildcardNgContentIndex","wildcardNgContentIndex","ngContentIndices","elNameNoNs","attrNameNoNs","CLASS_ATTR","items","EventHandlerVars","render3Stmts","statement","allowDefault","convertActionBinding","localResolver","implicitReceiver","action","bindingId","interpolationFunction","DefaultLocalResolver","actionWithoutBuiltins","convertPropertyBindingBuiltins","literalMap","o.literalMap","createPipeConverter","_AstToIrVisitor","actionStmts","flattenStatements","arg","_Mode","temporaryCount","unshift","temporaryDeclaration","returnExpr","convertStmtIntoExpression","preventDefaultVar","createPreventDefaultVar","converterFactory","convertBuiltins","ConvertPropertyBindingResult","currValExpr","BindingForm","General","convertPropertyBinding","expressionWithoutBuiltins","form","createCurrValueExpr","outputExpr","TrySimple","convertToStatementIfNeeded","_BuiltinAstConverter","cdAst.AstTransformer","BuiltinFunctionCall","_converterFactory","createLiteralMapConverter","_localResolver","_implicitReceiver","convertedArgs","_visit","leftMostSafe","leftMostSafeNode","convertSafeAccess","o.DYNAMIC_TYPE","varExpr","_getLocal","guardedExpression","needsTemporary","temporary","allocateTemporary","_resultMap","cdAst.SafeMethodCall","isBlank","access","_nodeMap","visitSome","releaseTemporary","_currentTemporary","temporaryName","getLocal","cdAst.FunctionCall","componentId","externalReferenceVars","embeddedViewCount","viewBuilderFactory","embeddedViewIndex","ViewBuilder","options","TypeCheckCompiler","TypeCheckLocalResolver","isHostComponent","refOutputVars","getOutputVar","getTypeGuardExpressions","guard","useIf","targetStatements","viewStmts","bindingCount","updates","o.ExpressionStatement","preprocessUpdateExpression","o.applySourceSpanToStatementIfNeeded","defaultResolver","actions","guardExpression","guardClause","fullTemplateTypeCheck","visitElementOrTemplate","outputVarType","dirAst","inputAst","hostEventAst","currBuilder","varAst","pipeOutputVar","argCount","callMethod","ViewCompileResult","viewClassVar","rendererTypeVar","staticQueryIds","findStaticQueryIds","dynamicQueryIds","childData","queryId","renderComponentVarName","template_1","customRenderData","o.LiteralMapEntry","renderComponentVar","o.importType","o.StmtModifier","importType","ViewBuilder$1","viewName","ViewCompiler","LOG_VAR$1","CHECK_VAR","astNodes","nodeStaticQueryIds","purePipeNodeIndices","_createPipe","queryIds_1","queryIndex","calcStaticDynamicQueryFlags","nodeFlags","nodeDef","needsAdditionalRootNode","lastAstNode","_createNodeExpressions","updateRendererStmts","updateDirectivesStmts","nodeDefExprs","updateRendererFn","_createUpdateFn","updateDirectivesFn","o.DeclareFunctionStmt","viewFlags","viewFactory","updateFn","updateStmts","o.fn","preStmts","o.INFERRED_TYPE","COMP_VAR","VIEW_VAR","compType","nodeIndex","updateRendererExpressions","inter","bindingIndex","_preprocessUpdateExpression","checkIndex","childCount","queryMatchesExpr","_createElementHandleEventFn","_visitElementOrTemplate","usedEvents","dirHostBindings","hostBindings","inputDefs","outputDefs","elementBindingDef","compAst","compRendererType","compView","elementAst","mapResult","attrValue2","CLASS_ATTR$1","STYLE_ATTR","elementEventNameAndTarget","elementEventFullName","dirIndex","localDirAst","_visitDirective","dirHostEvents","_visitProvider","queryMatchExprs","refNodeIndices","outputAst","eventAst","elementNodeIndex","queryIds","_visitProviderOrDirective","mapValue","updateDirectiveExpressions","dirContextExpr","updateDirectives","_visitComponentFactoryResolverProvider","componentDirMeta","_addProviderNode","providerFlags","currViewExpr","refNodeIndex","varValue","_createLiteralArrayConverter","valueExpr_1","_createLiteralMapConverter","valueExpr_2","compViewExpr","compBuilder","pipeNodeIndex","pipeValueExpr_1","callUnwrapValue","callCheckStmt","checkIndex_1","nodeValueExpr_1","diDep","pipeDef","self","updateBindingCount","updateRenderer","createUpdateStatements","allowEmptyExprs","o.applySourceSpanToExpressionIfNeeded","handlers","handleEventFn","handleEventStmts","handleEventBindingCount","trueStmts","ALLOW_DEFAULT_VAR","fullEventName","EVENT_NAME_VAR","BOOL_TYPE","isFirst","FixupExpression","resolved","KEY_CONTEXT","fixup","ConstantPool","literals","literalFactories","injectorDefinitions","getConstLiteral","literal$$1","forceShared","keyOf","newValue","shared","freshName","getTranslation","o.JSDocCommentStmt","docStmt","variable$$1","freshTranslationName","fnCall","definitions","definitionsOf","propertyNameOf","argumentsForKey","_getLiteralFactory","expressionForKey","resultMap","literalFactory","literalFactoryArguments","resultExpressions","isVariable","pureFunctionDeclaration","nextNameIndex","componentDefinitions","directiveDefinitions","KeyVisitor","invalid","MessageBundle","htmlParserResult","i18nParserResult","extractMessages","filterSources","mapperVisitor","MapPlaceholderNames","msgList","src","transformedMessage","Message","CORE$1","Identifiers$1","NEW_METHOD","TRANSFORM_METHOD","PATCH_DEPS","createElement","elementEnd","elementProperty","elementAttribute","elementClassNamed","elementStyleNamed","containerCreate","containerEnd","directiveCreate","directiveInput","textCreateBound","bind","interpolation1","interpolation2","interpolation3","interpolation4","interpolation5","interpolation6","interpolation7","interpolation8","interpolationV","pureFunction0","pureFunction1","pureFunction2","pureFunction3","pureFunction4","pureFunction5","pureFunction6","pureFunction7","pureFunction8","pureFunctionV","pipeBind1","pipeBind2","pipeBind3","pipeBind4","pipeBindV","projection","projectionDef","refreshComponent","directiveLifeCycle","injectElementRef","injectTemplateRef","injectViewContainerRef","defineComponent","defineDirective","defineInjector","definePipe","convertMetaToOutput","compileNgModule","injectableCompiler","injectorDefArg","o.ClassField","rawProviders","compileDirective","definitionMapValues","directiveMetadata","getOwnPropertyNames","createHostAttributesArray","conditionallyCreateMapObjectLiteral","definitionField","constantPool","definitionFunction","classReference","unsupported","feature","R3","BINDING_INSTRUCTION_MAP","getLiteralFactory","noop","declared","declareLocalVarCallback","nestedScope","BindingScope","declareCallback","referenceNameIndex","ROOT_SCOPE","TemplateDefinitionBuilder","contextParameter","parentBindingScope","contextName","addDirectiveDependency","addPipeDependency","_dataIndex","_bindingContext","_temporaryAllocated","_prefix","_creationMode","_variableMode","_bindingMode","_postfix","_projectionDefinitionIndex","invalid$1","_inI18nSection","_i18nSectionIndex","_phToNodeIdxes","bindingScope","lhsVar","_valueConverter","ValueConverter","allocateDataSlot","slot","buildTemplateFunction","variables_1","variableName","scopedName","freshReferenceName","contentProjections","getContentProjection","infos_1","info","instruction","getQueryPredicate","querySlot","getQueryList","refresh","queryRefresh","updateDirective","CONTEXT_NAME","o.ifStmt","creationMode","updateMode","ifStmt","bitwiseAnd","phToNodeIdx","phMap","o.NUMBER_TYPE","_contentProjections","elementIndex","outputAttrs","attrI18nMetas","nullNode","hasI18nAttr","parseI18nMeta","attrArg","flatten","i18nMessages","trimTrailingNulls","implicit","functionName","localVars","bindingExpr","rhsExpression","listener","convertedBinding","_visitDirectives","directives_1","templateIndex","templateRef","templateDirective","dependency","templateContext","attributeNames","visitSingleI18nTextChild","definitionOf","getDefinition","o.DeclareVarStmt","convertedPropertyBinding","bindingContext","createFactory","elementRef","viewContainerRef","queryDefinitions","queries_1","o.ReturnStatement","TEMPORARY_NAME","hostBindingSourceSpan","getDirectiveMemory","assignToTemporary","callQueryRefresh","andExpression","directiveSummary","bindings_1","eventBindings","eventBindings_1","bindingName","sanitizeIdentifier","typeName","mapToExpression","allocateSlot","slotPseudoLocal","pipeBinding","ContentProjectionVisitor","projectionMap","selectorText","parserSelectorToR3Selector","positive","parserSelectorToSimpleSelector","classes","asLiteral","ID_SEPARATOR$1","MEANING_SEPARATOR$1","GeneratedFile","srcFileUrl","genFileUrl","sourceOrStmts","allLazyRoutes","ROUTES","loadChildren_1","_collectLoadChildren","route","parseLazyRoute","routes","routes_1","loadChildren","routePath","routeName","referencedModule","ResolvedStaticSymbol","StaticSymbolResolver","staticSymbolCache","summaryResolver","errorRecorder","metadataCache","resolvedSymbols","resolvedFilePaths","resolveSymbol","_resolveSymbolMembers","staticSymbol","resultFromSummary","_resolveSymbolFromSummary","useSummaries","baseSymbol","getStaticSymbol","baseImportAs","getImportAs","summarizedFileName","summarizedName","summaryForJitFileName","summaryForJitName","resolvedSymbol","unwrapResolvedMetadata","getKnownModuleName","recordImportAs","recordModuleNameForFileName","fileName","symbols","symbolFromFile","symbols_1","ignoreErrorsFor","cb","recorder","baseResolvedSymbol","baseMetadata","__symbolic","statics","getModuleMetadata","getSymbolsOf","summarySymbols","_createSymbolsOf","metadataSymbols","moduleExport","export","exportSymbol","symbolName","symName","unescapeIdentifier","resolvedModule","resolveModule","targetSymbol","sourceSymbol","this_1","createExport","topLevelSymbolNames_1","origins_1","origin","originFilePath","symbolResourcePaths","reportError","createResolvedSymbol","symbolMeta","isTsFile","TS","isLibraryFile","transformedMeta_1","arity","_originalFileMemo","getOutputName","topLevelPath","transformedMeta","ReferenceTransformer","functionParams","symbolic","oldLen","getOriginalName","topLevelSymbolNames","unwrappedTransformedMeta","moduleMetadata","moduleMetadatas","getMetadataFor","maxVersion_1","md","errorMessage","containingFile","moduleNameToFileName","createSummaryForJitFunction","fnName","ToJsonSerializer","symbolResolver","srcFileName","indexBySymbol","reexportedBy","processedSummaryBySymbol","addSummary","unprocessedSummary","unprocessedSymbolSummariesBySymbol","processedSummary","processValue","processedSummaries","clone_1","metadata_1","isMethodCallOnVariable","declarationSymbol","ngModuleSummary","summary_1","importAs","reexportSymbol","__symbol","toSummaryFileName","loadSummary","visitStaticSymbol","ForJitSerializer","addSourceType","addLibType","exportAsArr","exportAsBySymbol","exportAsArr_1","ngModuleSymbols","isLibrary","serializeSummaryWithDeps","ngModuleSymbol","jitExportAsName","serializeSummaryRef","serializeSummary","Transformer","FromJsonDeserializer","symbolCache","deserialize","libraryFileName","json","allImportAs","serializedSymbol","fromSummaryFileName","StubEmitFlags","Basic","TypeCheck","AotCompiler","_options","_host","_metadataResolver","_templateParser","_styleCompiler","_viewCompiler","_typeCheckCompiler","_ngModuleCompiler","_injectableCompiler","_outputEmitter","_symbolResolver","_analyzedFilesForInjectables","analyzeModulesSync","rootFiles","analyzeResult","analyzeAndValidateNgModules","analyzeModulesAsync","_analyzeFile","analyzedFile","_analyzedFiles","_analyzeFileForInjectables","findGeneratedFileNames","allowEmptyCodegenFiles","injectables","ngModules","exportsNonSourceFiles","genFileNames","enableSummariesForJit","fileSuffix","normalizeGenFileSuffix","dirSymbol","normalizedUrl","resourceNameToFileName","needsShim","_stylesModuleUrl","emitBasicStub","genFileName","originalFileName","_createOutputContext","endsWith","originalFile","_createEmptyStub","createForJitStub","emitTypeCheckStub","_createNgFactoryStub","loadFilesAsync","fileNames","tsFiles","files","loadingPromises","loadNgModuleDirectiveAndPipeMetadata","analyzedInjectables","tsFile","all","loadFilesSync","externalReferences","_externalIdentifierReferences","typeIndex","o.expressionType","ngModuleIndex","expressionType","dirId","getDirectiveMetadata","_createTypeCheckBlock","references_1","emitMessageBundle","htmlParser","messageBundle","compMetas","updateFromTemplate","emitAllPartialModules","r3Files","ngModuleByPipeOrDirective","contextMap","_compilePartialModule","_compileShallowModules","shallowModules","hostBindingParser","expressionParser","compileIvyComponent","compileIvyDirective","_parseTemplate","parsedTemplate","parsedPipes","pipeExps","createDirectiveSelector","firstSelector","selectorAttributes","createHostBindingsFunction","templateTypeName","pipeMap","importExpr$$1","uniqueKey","directiveMap","directiveExps","exps","features","lifecycle","NgOnChangesFeature","o.ClassStmt","o.CommentStmt","pipeMetadata","getPipeMetadata","templateFactory","emitAllPartialModules2","_emitPartialModule2","emitAllImpls","generatedFiles","_createSummary","_compileModule","stylesheetMeta","_codegenStyles","_compileComponent","componentStylesheet","_compileComponentFactory","ngFactoryCtx","symbolSummaries","typeData","forJitOutputCtx","forJitCtx","types","toJsonSerializer","forJitSerializer_1","serializeSummaries","summaryFileName","normalizedLocale","i18nFormat","hostMeta","hostViewFactoryVar","compFactoryVar","inputsExprs","outputsExprs","createComponentFactory","directiveIdentifiers","componentStyles","stylesExpr","viewResult","_templateAstCache","importModule","_fileNameToModuleName","suppliedTypeParams","missingTypeParamsCount","stylesheetMetadata","_codegenSourceModule","listLazyRoutes","entryRoute","analyzedModules","visitLazyRoute","seenRoutes","lazyRoutes","lazyRoutes_2","lazyRoute","lazyRoutes_1","staticSymbolResolver","metadataResolver","seenFiles","visitFile","isSourceFile","analyzeFile","modMeta","validateAnalyzedModules","symbolsMissingModule","hasDecorators","isNgSymbol","getInjectableMetadata","Visitor","isValueExportingNonSourceFile","mergeAnalyzedFiles","analyzedFiles","allNgModules","allPipesAndDirectives","af","FORMATTED_MESSAGE","formatChain","chain","indentStr","ANGULAR_CORE","HIDDEN_KEY","IGNORE","StaticReflector","knownMetadataClasses","knownMetadataFunctions","annotationCache","shallowAnnotationCache","propertyCache","parameterCache","methodCache","staticCache","conversionMap","resolvedExternalReferences","annotationForParentClassWithSummaryKind","initializeConversionMap","kc","_registerDecoratorOrConstructor","kf","_registerFunction","declarationSymbol_1","refSymbol","getSymbolByModule","findSymbolDeclaration","resolvedMetadata","tryAnnotations","originalRecorder","simplify","classMetadata","getTypeMetadata","parentType","findParentType","parentAnnotations","ownAnnotations_1","requiredAnnotationTypes","requiredType","formatMetadataError","metadataError","parentPropMetadata_1","parentProp","members_1","parameters_1","ctorData","rawParameterTypes","parameterDecorators_1","rawParamType","nestedResult","paramType","trySimplify","_methodNames","methodNames","parentMethodNames_1","members_2","isMethod","_staticMembers","staticMembers","staticMemberData","hasLifecycleHook","lcProperty","staticMembers_1","findDeclaration","injectionToken","opaqueToken","tryFindDeclaration","lazy","simplifyInContext","depth","simplifyNested","nestedContext","isMetadataError","summaryMsg","REFERENCE_TO_NONEXPORTED_CLASS","VARIABLE_NOT_INITIALIZED","DESTRUCTURE_NOT_SUPPORTED","COULD_NOT_RESOLVE_TYPE","FUNCTION_CALL_NOT_SUPPORTED","REFERENCE_TO_LOCAL_SYMBOL","errorSummary","advise","isPrimitive","spreadArray","simplifyEagerly","spreadArray_1","spreadItem","result_2","value_2","shouldIgnore","declarationValue","resolveReferenceValue","operand","indexTarget","member","selectContext","selectTarget","localValue","scope","BindingScope$1","missing","argExpressions","functionSymbol","targetFunction","targetExpression","value_1","defaults","calling","functionScope","define","result_1","oldScope","simplifyCall","transform","USE_VALUE","PROVIDE","simplifyLazily","reportingContext","METADATA_ERROR","PopulatedScope","formatMetadataMessageChain","expandedMessage","AotSummaryResolver","rootSymbol","summaryCache","_loadSummaryFile","hasSummary","loadedFilePaths","summaryFilePath","deserializeSummaries","summaries","knownFileNameToModuleNames","basePath","SummaryResolver","_summaries","JitSummaryResolver","_executeFunctionStatements","varValues","childCtx","createChildWihtLocalVars","vars","_ExecutionContext","instance","ReturnValue","StatementInterpreter","initialValue","currCtx","CATCH_ERROR_VAR","CATCH_STACK_VAR","CATCH_ERROR_VAR$2","CATCH_STACK_VAR$2","subscribe","fnExpr","_classStmt","_ctx","propertyDescriptors","instanceCtx","paramNames","ctorParamNames","superClass","createDynamicClass","_declareFn","jitStatements","createSourceMaps","JitEmitterVisitor","createReturnStmt","createSourceMap","fnBody","fnArgNames","fnArgValues","emptyFn","evalExpression","getArgs","_evalArgValues","_evalExportedVars","AbstractJsEmitterVisitor","JitCompiler","_compilerConfig","getExtraNgModuleProviders","_compiledTemplateCache","_compiledHostTemplateCache","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","loadAotSummaries","_addAotSummaries","fn$$1","_addedAotSummaries","_filterJitIdentifiers","_compileModuleAndComponents","_compileModuleAndAllComponents","_loadModules","componentFactories","_compileComponents","mainNgModule","mainModule","nestedNgModule","ngModuleFactory","_compiledNgModuleCache","createOutputContext","compileResult","allComponentFactories","moduleByJitDirective","templates","transJitModules","localMod","localModuleMeta","dirRef","_createCompiledTemplate","_createCompiledHostTemplate","entryComponentType","hasAotSummary","compiledTemplate","assertComponent","viewDefFactory","_compileTemplate","isCompiled","externalStylesheetsByModuleUrl","outputContext","compiledStylesheet","compileStyles","_resolveStylesCompileResult","_resolveAndEvalStylesCompileResult","_interpretOrJit","interpretStatements","CompiledTemplate","compiled","viewClass","_viewClass","resolvedUrl","_split","encodeURI","baseParts","_ComponentIndex","Scheme","_joinAndCanonicalizePath","Port","Path","_resolveUrl","resolvedParts","_packagePrefix","_splitRe","UserInfo","Domain","QueryData","Fragment","opt_scheme","opt_userInfo","opt_domain","opt_port","opt_path","opt_queryData","opt_fragment","leadingSlash","trailingSlash","up","pos","ResourceLoader","Extractor","extract","urlResolver","createAotUrlResolver","StaticSymbolCache","CompilerConfig","normalizer","loadResource","elementSchemaRegistry","staticReflector","PipeResolver","extractor","compilerHost","errorCollector","enableIvy","tmplParser","UrlResolver","DiagnosticKind","TypeDiagnostic","[object Object]","diagnostics","callable","normalize","Undefined","Null","Other","getType","nullable","getNonNullableType","leftType","leftKind","leftRawKind","rightRawKind","operKind","Any","errorAst","Boolean","getBuiltinType","rightType","getTypeUnion","compiler_1","selectSignature","language","public","definition","signatures","argument","undefinedType","targetType","indexed","keyType","anyType","getArrayType","resolveMethodCall","getPipes","expType","resolvePropertyRead","_anyType","_undefinedType","receiverType","isAny","receiverInfo","reportWarning","getExpressionDiagnostics","analyzer","expression_type","AstType","getDiagnostics","templateOffset","refinedVariableType","templateElement","ngForDirective","expression_type_1","ngForOfBinding","getElementType","getExpressionScope","includeEvent","processReferences","getTypeSymbol","getDefinitionOf","super","getReferences","getTemplateContext","getTypeKind","Unbound","getVarDeclarations","getEventDeclaration","referenceTable","createSymbolTable","variableTable","eventsTable","mergeSymbolTable","getTemplateExpressionDiagnostics","ExpressionDiagnosticsVisitor","diagnoseExpression","attributeValueLocation","hasTemplateReference","previousDirectiveSummary","last","findNode","tail","offsetSpan","amount","min","longestArray","comparisonResult","high","tsNumbers","toNumbers","compareNumbers","ts__default","ts","getCombinedModifierFlags","ModifierFlags","NodeFlags","isReferenceType","ObjectFlags","TypeFlags","objectFlags","Reference","program","getSourceFile","forEachChild","SyntaxKind","ClassDeclaration","classDeclaration","getSymbolQuery","checker","fetchPipes","TypeScriptSymbolQuery","getClassMembers","getClassFromStaticSymbol","getTypeAtLocation","declaration","TypeWrapper","getPipesTable","PipesTable","typeCache","StringLike","StringLiteral","NumberLike","Union","typeKindOf","unionType","subType","candidate","TypeParameter","getTsTypeOf","getBuiltinTypeFromTs","elementType","getTypeParameterOf","tsType","nonNullableType","pipesCache","typeSymbol","findClassSymbolInContext","contextType","getTemplateRefContextType","SymbolWrapper","symbols$$2","MapSymbolTable","addAll","DeclaredSymbol","symbolTables","symbolTable","sourceFile","getPositionOfLineAndCharacter","findChild","LastToken","betterNode","getStart","getEnd","spanAt","getTypeOfSymbolAtLocation","constructorDeclaration","parameter","typeReference","typeArguments","getTypeWrapper","typeCallable","getCallSignatures","signaturesOf","SignatureWrapper","getSymbol","definitionFromTsSymbol","SymbolTableWrapper","getProperties","SymbolFlags","Alias","getAliasedSymbol","ClassMember","parentDeclarationOf","getContainerOf","valueDeclaration","isPrivate","_members","Interface","getDeclaredTypeOfSymbol","typeWrapper","_tsType","getParameters","getReturnType","SignatureResultOverride","resultType","tsVersion","isVersionBetween","toSymbolTable","toSymbolTableFactory","table","own","toSymbols","getFromSymbolTable","_values","previous","PipeSymbol","EmptyTable","parameterType","classSymbol","findClassSymbol","findTransformMethodType","classType","getProperty","INDEX_PATTERN","indexVersion","path__default","dirname","moduleSymbol","getExportsOfModule","setParents","AsExpression","TrueKeyword","AnyKeyword","NullKeyword","numeric","NumericLiteral","NoSubstitutionTemplateLiteral","VoidExpression","InterfaceDeclaration","SourceFile","isMetadataSymbolicReferenceExpression","METADATA_VERSION","isModuleMetadata","isClassMetadata","isMemberMetadata","isMethodMetadata","isConstructorMetadata","isMetadataSymbolicExpression","isMetadataSymbolicBinaryExpression","isMetadataSymbolicIndexExpression","isMetadataSymbolicCallExpression","isMetadataSymbolicPrefixExpression","isMetadataSymbolicIfExpression","isMetadataGlobalReferenceExpression","isMetadataModuleReferenceExpression","isMetadataImportedSymbolReferenceExpression","isMetadataImportDefaultReference","isMetadataSymbolicSelectExpression","SpreadElement","SpreadElementExpression","isMethodCallOf","callExpression","memberName","PropertyAccessExpression","isCallOf","ident","nodeMap","everyNodeChild","getSourceFileOfNode","getLineAndCharacterOfPosition","errorSymbol","isPropertyAssignment","PropertyAssignment","Evaluator","recordExport","evaluateNode","isFoldableWorker","folding","ObjectLiteralExpression","propertyAssignment","ArrayLiteralExpression","CallExpression","arrayNode","arrayValue","FalseKeyword","TemplateHead","TemplateMiddle","TemplateTail","ParenthesizedExpression","parenthesizedExpression","BinaryExpression","binaryExpression","operatorToken","PlusToken","MinusToken","AsteriskToken","SlashToken","PercentToken","AmpersandAmpersandToken","BarBarToken","propertyAccessExpression","ElementAccessExpression","elementAccessExpression","argumentExpression","TemplateExpression","preferReference","recordEntry","substituteExpression","newEntry","recordMapEntry","isFoldableError","resolveName","schema_1","ShorthandPropertyAssignment","assignment","nameOf","propertyValue","quotedNames","isMetadataSymbolicSpreadExpression","spreadValue","spreadElementSyntaxKind","firstArgument","ArrowFunction","arrowFunction","arrayOrEmpty","isFoldable","NewExpression","newExpression","newArgs","newTarget","TypeReference","QualifiedName","qualifiedName","typeNameNode","getReference","typeReferenceNode","UndefinedKeyword","StringKeyword","NumberKeyword","BooleanKeyword","arrayTypeNode","TypeAssertionExpression","typeAssertion","PrefixUnaryExpression","prefixUnaryExpression","TildeToken","ExclamationToken","operatorText","AmpersandToken","BarToken","CaretToken","EqualsEqualsToken","ExclamationEqualsToken","EqualsEqualsEqualsToken","ExclamationEqualsEqualsToken","LessThanToken","GreaterThanToken","LessThanEqualsToken","GreaterThanEqualsToken","LessThanLessThanToken","GreaterThanGreaterThanToken","GreaterThanGreaterThanGreaterThanToken","getText","ConditionalExpression","conditionalExpression","thenExpression","whenTrue","whenFalse","elseExpression","FunctionExpression","TaggedTemplateExpression","templateExpression","templateSpans","head","asExpression","ClassExpression","Symbols","_symbols","buildImports","ImportEqualsDeclaration","moduleReference","externalReference","stripQuotes","importEqualsDeclaration","ImportDeclaration","importDecl","moduleSpecifier","importClause","namedBindings","NamedImports","NamespaceImport","isStatic","MetadataCollector","locals","symbols$2","composedSubstituter","evaluator","evaluator_1","evaluator$$1","evaluatorOptions","errorSym","maybeGetSimpleFunction","functionDeclaration","functionBody","func","addNamesOf","bindingPattern","namesOf","returnStatement","classMetadataOf","getDecorators","decoratorNode","referenceFrom","heritageClauses","hc","extends","typeParameters","recordMember","recordStaticMember","Constructor","MethodDeclaration","maybeFunc","methodDecorators","parameterDecoratorData","parametersData","hasDecoratorData","hasParameterData","parameterData","isConstructor","SetAccessor","propertyDecorators","ExportDeclaration","exportClause","exportDeclaration","exportedAs","exportMap","isExported","isExport","isExportedIdentifier","exportedIdentifierName","exportedName","interfaceDeclaration","interfaceName","FunctionDeclaration","nameNode","propNode","TypeAliasDeclaration","typeDeclaration","EnumDeclaration","enumDeclaration","enumValueHolder","enumName","enumValue","nextDefaultValue","VariableStatement","declarationList","variableDeclaration","variableStatement","exported","defineReference","BindingElement","ObjectBindingPattern","ArrayBindingPattern","validateExpression","shouldReportNode","lineInfo","isFunctionMetadata","oldLocals","indexExpression","prefixExpression","selectExpression","spreadExpression","ifExpression","validateClass","classData","parameterDecorators","validateMember","staticMember","nodeStart","validateMetadata","MetadataBundler","root","privateSymbolPrefix","symbolMap","exportedSymbols","exportAll","rootModule","canonicalizeSymbols","getEntries","privates","referenced","privateName","origins","getReExports","importName","fullModuleName","getMetadata","exportedSymbol","reexportedAs","exportFrom","symbolOf","exportItem","canonicalizeSymbol","rootExport","getRootExport","getSymbolDeclaration","canonicalSymbol","convertSymbol","digits","PRIVATE_NAME_CHARS","floor","exportedNames","newPrivateName","symbolsMap","declaredName","exportAlls","convertEntry","convertFunction","isInterfaceMetadata","convertValue","convertExpression","convertMembers","convertStatics","convertMember","convertError","object","convertReference","convertExpressionNode","createReference","canonicalSymbolOf","referencedName","symbolKey","normalPath","fileExists","ScriptTarget","Latest","INDEX_HEADER","compare","select","privateEntriesToIndex","compareEntries","compareModules","orderedExports","DTS","ngOptions","getMetadataCache","indexFile","messageText","DiagnosticCategory","getMetadataBundle","bundler","indexModule","flatModuleId","CompilerHostAdapter","flatModulePrivateSymbolPrefix","metadataBundle","flatModuleOutFile","JS_EXT","libraryIndex","basename","syntheticIndex","normalSyntheticIndexName","newHost","readFile","languageVersion","onError","sf","createSourceFile","fileNameToModuleName","writeByteOrderMark","sourceFiles","writeFile","metadataName","indexMetadata","DEFAULT_ERROR_CODE","UNKNOWN_ERROR_CODE","SOURCE","isTsDiagnostic","diagnostic","isNgDiagnostic","EmitFlags","GENERATED_FILES","tsStructureIsReused","structureIsReused","userError","createMessageDiagnostic","api","isInRootDir","rootDir","pathStartsWithPrefix","rootDirs","rel","ng","upgradeMetadataWithDtsData","oldMetadata","dtsFilePath","newMetadata","getSourceFileMetadata","dtsMetadata","createMetadataReaderCache","readMetadata","metadataPath","util","metadataOrMetadatas","metadatas","maxMetadata","readMetadataFile","cacheMetadata","expression_diagnostics","typescript_symbols","language_services_15","language_services","isFunction_1","createCommonjsModule","_enable_super_gross_mode_that_will_cause_bad_things","stack","log","Observer","err","useDeprecatedSynchronousErrorHandling","isObject_1","tryCatch_1","tryCatchTarget","errorObject_1","errorObject","UnsubscriptionError","Subscription","unsubscribe","_parents","hasErrors","closed","_subscriptions","remove","isFunction","_unsubscribe","tryCatch","isArray_1","UnsubscriptionError_1","flattenUnsubscriptionErrors","isObject","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","Subscriber","destinationOrNext","complete","syncErrorValue","syncErrorThrown","Observer_1","syncErrorThrowable","isStopped","destination","isTrustedSubscriber","trustedSubscriber","rxSubscriber","SafeSubscriber","rxSubscriber_1","_complete","_next","_error","_unsubscribeAndRecycle","_parentSubscriber","observerOrNext","_context","__tryOrSetError","__tryOrUnsub","hostReportError_1","hostReportError","wrappedComplete","config_1","nextOrObserver","Subscriber_1","noop_1","pipe_1","pipeFromArray","fns","Observable","lift","sink","toSubscriber_1","toSubscriber","_subscribe","_trySubscribe","getPromiseCtor","promiseCtor","operations","toPromise","ObjectUnsubscribedError","subject","subscriber","SubjectSubscription","observers","subscriberIndex","SubjectSubscriber","Subject","hasError","thrownError","AnonymousSubject","ObjectUnsubscribedError_1","Subscription_1","SubjectSubscription_1","observable","Observable_1","refCount","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","subjectFactory","_isComplete","ConnectableObservable","getSubject","_subject","ConnectableSubscriber","refCount_1","connectableProto","connectableObservableDescriptor","writable","BehaviorSubject","_value","getValue","Action","schedule","state","delay","scheduler","work","pending","AsyncAction","recycleAsyncId","requestAsyncId","setInterval","flush","execute","_execute","errored","errorValue","QueueAction","Scheduler","SchedulerAction","scheduled","active","QueueScheduler","emptyScheduled","isScheduler_1","subscribeToArray","scalar_1","isScheduler","empty_1","fromArray_1","scalar","dispatch","Notification","observe","observer","do","accept","toObservable","of_1","throwError_1","throwError","createNext","createComplete","completeNotification","observeOn","ObserveOnOperator","ObserveOnSubscriber","notification","scheduleMessage","ObserveOnMessage","Notification_1","createError","ReplaySubject","bufferSize","windowTime","POSITIVE_INFINITY","_events","_infiniteTimeWindow","_bufferSize","_windowTime","nextTimeWindow","nextInfiniteTimeWindow","ReplayEvent","_getNow","_trimBufferThenGetEvents","observeOn_1","queue","now","eventsCount","spliceCount","time","hasNext","hasCompleted","AsyncSubject","Immediate","handle","nextHandle","tasksByHandle","runIfPresent","AsapAction","clearImmediate","AsapScheduler","AnimationFrameAction","cancelAnimationFrame","AnimationFrameScheduler","VirtualTimeScheduler","maxFrames","VirtualAction","frame","sortActions","identity_1","ArgumentOutOfRangeError","EmptyError","TimeoutError","project","MapOperator","MapSubscriber","callbackFunc","innerArgs","dispatchNext","bindCallback","resultSelector","map_1","dispatchError","bindNodeCallback","OuterSubscriber","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","InnerSubscriber","subscribeToPromise","getSymbolIterator","subscribeToIterable","iterator_1","iterable","iterator$$1","subscribeToObservable","obs","isPromise_1","_isScalar","subscribeToArray_1","isArrayLike","observable_1","subscribeToResult_1","subscribeTo_1","combineLatest","observables","CombineLatestOperator","CombineLatestSubscriber","toRespond","subscribeToResult","unused","oldVal","_tryResultSelector","isObservable_1","isIterable_1","iterator$$2","observable$$2","subscribeTo","isObservable","isArrayLike_1","fromPromise_1","fromPromise","isIterable","fromIterable_1","fromIterable","mergeMap","concurrent","from_1","ii","MergeMapOperator","MergeMapSubscriber","_tryNext","_innerSub","ish","observableFactory","forkJoin","ForkJoinSubscriber","completed","haveValues","innerSubscription","_hasValue","fromEvent","setupSubscription","sourceObj","isHTMLCollection","isEventTarget","source_1","addEventListener","removeEventListener","on","off","isJQueryStyleEventEmitter","source_2","addListener","removeListener","isNodeStyleEventEmitter","source_3","fromEventPattern","addHandler","removeHandler","needIterate","iterate","conditionResult","generate","initialStateOrOptions","resultSelectorOrObservable","initialState","identity","trueResult","falseResult","interval","period","async_1","async","isNumeric_1","isNumeric","counter","NEVER","onErrorResumeNext","remainder","subNext","pairs","race","RaceOperator","hasFirst","RaceSubscriber","range","timer","dueTime","periodOrScheduler","due","resourceFactory","resource","zip","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","hasValue","shouldComplete","_tryresultSelector","nextResult","isComplete","index$2","ConnectableObservable_1","ReplaySubject_1","AsyncSubject_1","queueScheduler","animationFrameScheduler","animationFrame","VirtualTimeScheduler_1","Scheduler_1","TimeoutError_1","using","using_1","zip_1","empty_2","audit","durationSelector","AuditOperator","AuditSubscriber","throttled","duration","clearThrottle","closingNotifier","BufferOperator","BufferSubscriber","bufferCount","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeOperator","BufferTimeSubscriber","Context","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","creationState","dispatchBufferClose","closeState","dispatchBufferCreation","filledBufferContext","context_1","onBufferFull","context_2","closeContext","prevContext","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferWhen","BufferWhenOperator","subscribing","BufferWhenSubscriber","closingSubscription","catchError","CatchOperator","caught","CatchSubscriber","err2","combineAll_1","CountOperator","CountSubscriber","_tryPredicate","debounce","DebounceOperator","durationSubscription","DebounceSubscriber","emitValue","debounceTime","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debouncedNext","defaultIfEmpty","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","isDate_1","delayFor","isDate","abs","DelayOperator","DelaySubscriber","delay_1","_schedule","scheduleNotification","DelayMessage","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","sourceSubscribed","SubscriptionDelaySubscriber","subscribeToSource","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","distinct","keySelector","flushes","DistinctOperator","DistinctSubscriber","_useKeySelector","_finalizeNext","distinctUntilChanged","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","FilterOperator","FilterSubscriber","tap","DoOperator","TapSubscriber","_tapNext","_tapError","_tapComplete","throwIfEmpty","errorFactory","defaultErrorFactory","TakeOperator","total","ArgumentOutOfRangeError_1","TakeSubscriber","throwIfEmpty_1","hasDefaultValue","EveryOperator","EverySubscriber","everyValueMatch","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","exhaustMap","ExhauseMapOperator","ExhaustMapSubscriber","tryNext","expand","ExpandOperator","ExpandSubscriber","subscribeToProjection","FinallyOperator","FinallySubscriber","FindValueOperator","yieldIndex","FindValueSubscriber","groupBy","subjectSelector","GroupByOperator","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","group","Subject_1","GroupedObservable","groupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","IsEmptyOperator","IsEmptySubscriber","TakeLastOperator","ring","TakeLastSubscriber","idx","mapTo","MapToOperator","MapToSubscriber","materialize","MaterializeOperator","MaterializeSubscriber","scan","hasSeed","ScanOperator","accumulator","seed","ScanSubscriber","_seed","scan_1","takeLast_1","takeLast","defaultIfEmpty_1","acc","comparer","innerObservable","mergeMap_1","mergeScan","MergeScanOperator","MergeScanSubscriber","multicast","subjectOrSubjectFactory","MulticastOperator","nextSources","OnErrorResumeNextOperator","onErrorResumeNextStatic","OnErrorResumeNextSubscriber","subscribeToNextSource","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","pred","notPred","currentProp","plucker","publishLast_1","selectorOrScheduler","repeat","RepeatOperator","RepeatSubscriber","repeatWhen","notifier","RepeatWhenOperator","sourceIsBeingSubscribedTo","RepeatWhenSubscriber","retries","subscribeToRetries","retriesSubscription","notifications","retry","RetryOperator","RetrySubscriber","retryWhen","RetryWhenOperator","RetryWhenSubscriber","sample","SampleOperator","sampleSubscriber","SampleSubscriber","sampleTime","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","areEqual","nextB","shareReplay","shareReplayOperator","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","SkipOperator","SkipSubscriber","SkipLastOperator","_skipCount","_count","_ring","SkipLastSubscriber","skipCount","currentIndex","oldValue","skipUntil","SkipUntilOperator","SkipUntilSubscriber","skipWhile","SkipWhileOperator","skipping","SkipWhileSubscriber","tryCallPredicate","concat_1","SubscribeOnObservable","delayTime","asap","subscribeOn","SubscribeOnOperator","switchMap","SwitchMapOperator","SwitchMapSubscriber","switchAll_1","takeUntil","TakeUntilOperator","takeUntilSubscriber","TakeUntilSubscriber","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","throttle","defaultThrottleConfig","ThrottleOperator","leading","trailing","ThrottleSubscriber","_leading","_trailing","_throttled","send","_sendValue","tryDurationSelector","throttlingDone","throttleTime","throttle_1","ThrottleTimeOperator","ThrottleTimeSubscriber","_hasTrailingValue","_trailingValue","timeInterval","defer_1","defer","TimeInterval","timeoutWith","withObservable","absoluteTimeout","waitFor","TimeoutWithOperator","TimeoutWithSubscriber","scheduleTimeout","dispatchTimeout","timestamp","Timestamp","toArray_1","toArrayReducer","window","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","window_1","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","timeSpanState","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","context_3","context_4","inner","windowWhen","unsubscribeClosingNotification","closingNotification","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","found","_tryProject","zipAll_1","merge_2$1","mergeMap_2","opts","InjectionToken","metaCtor","makeMetadataCtor","DecoratorFactory","annotationInstance","TypeDecorator","cls","typeFn","ANNOTATIONS","chainFn","parentClass","ParamDecoratorFactory","ParamDecorator","unusedKey","PARAMETERS","Type$1$1","__window","__self","WorkerGlobalScope","_symbolIterator","Symbol_1","scheduleMicroTask","Zone","stringify$1","_reflect","reflect","_global","ReflectionCapabilities","paramTypes","paramAnnotations","_ownParameters","DELEGATE_CTOR","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","parentCtor","tsickleCtorParams","ctorParameters","paramTypes_1","ctorParam","convertTsickleDecoratorIntoMetadata","_zipTypesAndAnnotations","paramAnnotations_1","isType","getParentCtor","_ownAnnotations","_ownPropMetadata","propDecorators","propDecorators_1","propMetadata_1","ownPropMetadata","setter","resolveEnum","decoratorInvocations","decoratorInvocation","parentProto","resolveForwardRef$1","__forward_ref__","forwardRef","NullInjector","notFoundValue","_THROW_IF_NOT_FOUND","StaticInjector","THROW_IF_NOT_FOUND","NULL","IDENT","GET_PROPERTY_NAME","MULTI_PROVIDER_FN","GET_PROPERTY_NAME$1","USE_VALUE$1","objWithPropertyToExtract","getClosureSafeProperty$1","NG_TEMP_TOKEN_PATH","NULL_INJECTOR","records","staticError","providerDeps","Inject$1","computeDeps","useNew","resolveProvider","multiProviderMixError","record","_records","tryResolveToken","tokenPath","formatError","CIRCULAR","NO_NEW_LINE","depRecords","depRecord","childRecord","resolveToken","charAt","_currentInjector","convertInjectableProviderToFactory","deps_1","reflectionCapabilities","injectArgs","USE_VALUE$1$1","valueProvider_1","existingProvider_1","factoryProvider_1","EMPTY_ARRAY$1","classProvider_1","deps_2","deps_3","makeDecorator","injectableType","NgModule$1","ngInjectorDef","defaultErrorLogger","ErrorHandler","handleError","originalError","_findOriginalError","_findContext","errorLogger","getErrorLogger","getOriginalError","constructResolvingPath","findFirstClosedCycle","reverse","injectionError","injector","constructResolvingMessage","errMsg","wrappedError","addKey","ReflectiveKey","_globalKeyRegistry","numberOfKeys","_allKeys","newKey","KeyRegistry","caps","Reflector","importUri","fromKey","resolvedFactories","ResolvedReflectiveFactory","resolveReflectiveFactory","factoryFn","resolvedDeps","_dependenciesFor","aliasInstance","ReflectiveDependency","constructDependencies","resolveReflectiveProviders","normalizedProvidersMap","existing","ResolvedReflectiveProvider_","_normalizeProviders","optional","_createDependency","visibility","paramMetadata","ReflectiveInjector_","_providers","_constructionCounter","keyIds","objs","resolveAndCreateChild","createChildFromResolved","resolveAndInstantiate","instantiateResolved","getProviderAtIndex","_new","_instantiateProvider","_instantiate","ResolvedReflectiveFactory$$1","originalException","_getByReflectiveDependency","INJECTOR_KEY","_getByKeySelf","_getObjByKeyId","keyId","UNDEFINED","inj","inj_","_mapProviders","displayName","isPromise$1","ApplicationInitStatus","appInits","initialized","runInitializers","asyncInitPromises","initResult","catch","Injectable$1","PLATFORM_INITIALIZER","APP_BOOTSTRAP_LISTENER","Console","Compiler","trace","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryBoundToModule","wtf","EventEmitter","isAsync","generatorOrNext","schedulerFn","errorFn","completeFn","__isAsync","setTimeout","index_15","hasPendingMicrotasks","onStable","assertZonePatched","zone","_nesting","_outer","_inner","fork","isAngularZone","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","invoke","hasTaskState","hasTask","change","microTask","checkStable","hasPendingMacrotasks","macroTask","onHandleError","scheduleEventTask","EMPTY_PAYLOAD","noop$1","runTask","isStable","onMicrotaskEmpty","runOutsideAngular","NoopNgZone","_ngZone","run","taskTrackingZone","_watchAngularEvents","onUnstable","_didWork","_isZoneStable","NgZone","assertNotInAngularZone","_runCallbacksIfReady","Testability","increasePendingRequestCount","decreasePendingRequestCount","_pendingCount","_callbacks","clearTimeout","timeoutId","doneCb","pending_1","getPendingTasks","updateCb","creationLocation","timeout","getPendingRequestCount","exactMatch","TestabilityRegistry","unregisterApplication","getTestability","elem","findInAncestors","PlatformRef","_injector","ngZone","ngZoneOption","getNgZone","ngZoneInjector","moduleFactory","exceptionHandler","onDestroy","_modules","errorHandler","initStatus","donePromise","_moduleDoBootstrap","compilerOptions","compilerFactory","CompilerFactory","appRef","ApplicationRef","_bootstrapComponents","ngDoBootstrap","destroy","_destroyed","optionsReducer","dst","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_stable","componentTypes","_enforceNoNewChanges","isDevMode","tick","isCurrentlyStable","index_1","unstableSub","assertInAngularZone","componentOrFactory","rootSelectorOrNode","selectorOrNode","compRef","_unloadComponent","testability","registerApplication","nativeElement","_loadComponent","_runningTick","_tickScope","_views","view","detectChanges","checkNoChanges","detachView","componentRef","attachView","wtfCreateScope","RendererFactory2","_results","flatten$2","flatItem","EventListener","EmbeddedViewRef","ViewRef","DebugNode","nativeNode","_debugContext","DebugElement","addChild","providerTokens","removeChild","childIndex","insertChildrenAfter","newChildren","siblingIndex","insertBefore","refChild","newChild","refIndex","queryAll","queryAllNodes","triggerEventHandler","eventObj","listeners","parentNode","devModeEqual","isListLikeIterableA","isListLikeIterable","isListLikeIterableB","comparator","iterator1","iterator2","item1","item2","areIterablesEqual","WrappedValue","wrap","isWrapped","SimpleChange","isFirstChange","DefaultIterableDifferFactory","trackByFn","trackByIdentity","DefaultIterableDiffer","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","forEachItem","forEachOperation","addRemoveOffset","moveOffsets","nextRemove","adjPreviousIndex","getPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","forEachPreviousItem","forEachAddedItem","forEachMovedItem","forEachRemovedItem","forEachIdentityChange","diff","collection","_reset","itemTrackBy","mayBeDirty","index_1$$1","_trackByFn","looseIdentical","trackById","_verifyReinsertion","_addIdentityChange","isDirty","nextRecord","_nextPrevious","_nextAdded","_removalsTail","previousRecord","_prev","_moveAfter","_reinsertAfter","reinsertRecord","_addToRemovals","_unlink","_nextMoved","prevRecord","_prevRemoved","_insertAfter","_DuplicateMap","_remove","toIndex","_identityChangesTail","_identityChangesHead","_nextIdentityChange","_head","_tail","_nextDup","_DuplicateItemRecordList","atOrAfterIndex","_prevDup","put","duplicates","moveOffset","isJsObject","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","previousValue","currentValue","record_1","KeyValueChangeRecord_","_nextChanged","_addToAdditions","_addToChanges","IterableDiffers","factories","supports","KeyValueDiffers","kv","keyValDiff","parentPlatformFactory","defaultIterableDiffers","_iterableDiffersFactory","_keyValueDiffersFactory","_localeFactory","tagSet","merge$1","sets","sets_1","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","SecurityContext$1","OPTIONAL_END_TAG_ELEMENTS","initState","priorInitState","newInitState","shouldCallLifecycleInitHook","initIndex","Services","setCurrentNode","createRootView","createEmbeddedView","createComponentView","createNgModuleRef","overrideProvider","overrideComponentView","clearOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","currValue","isFirstCheck","_tokenKeyCache","tokenKey","checkBinding","bindingIdx","oldValues","checkAndUpdateBinding","checkBindingNoChanges","markParentViewsForCheck","currView","markParentViewsForCheckProjectedViews","endView","asElementData","componentView","handleEvent","declaredViewContainer","viewParentEl","sourceName","renderHost","renderParent","componentRendererType","ViewEncapsulation$1","renderElement","resolveDefinition","DEFINITION_CACHE","NOOP","visitRootRenderNodes","nextSibling","visitSiblingRenderNodes","endIndex","visitRenderNode","visitProjectedRenderNodes","isComponentView","hostElDef","projectedNodes","projectableNodes","rn","renderNode","bindingFlags","execRenderNodeAction","embeddedViews","_embeddedViews","renderer","appendChild","NS_PREFIX_RE","splitNamespace","elDef","ns","createComment","getParentRenderElement","selectRootElement","listenToElementOutputs","handleEventClosure","renderEventHandlerClosure","listenTarget","listenerView","checkAndUpdateElementValue","elData","renderNode$$1","renderValue","sanitizer","sanitize","setAttribute","setElementAttribute","addClass","setElementClass","setStyle","NgModuleRefTokenKey","former","setCurrentInjector","InjectorRefTokenKey","INJECTORRefTokenKey","tokenKey_1","InjectorRefTokenKey$1","INJECTORRefTokenKey$1","_createProviderInstance","_def","providersByKey","providerInstance","_createProviderInstance$1","UNDEFINED_VALUE","resolveNgModuleDep","depValues","_createClass","_callFactory","attachEmbeddedView","parentView","elementData","viewIndex","viewContainerParent","addToArray","vcElementData","projectedViews","dvcElementData","_projectedViews","parentNodeDef","detachEmbeddedView","removeFromArray","prevRenderNode","EMPTY_CONTEXT","ComponentFactory_","_inputs","_outputs","inputsArr","outputsArr","componentNodeIndex","asProviderData","VERSION$2","ComponentRef_","ViewRef_","_view","_viewRef","_component","_elDef","changeDetectorRef","Injector_","createViewContainerData","ViewContainerRef_","_data","attachToViewContainerRef","ngModuleRef","contextInjector","parentInjector","insert","viewRef","destroyed","viewRef_","move","oldViewIndex","newViewIndex","dirtyParentQueries","detach","createChangeDetectorRef","fs","fs$$1","rendererFactory","begin","disposables","_appRef","detachFromAppRef","attachToAppRef","vcRef","createTemplateData","TemplateRef_","_parentView","createInjector$1","allowPrivateServices","createRendererV1","RendererAdapter","namespaceAndName","hostElement","createTemplateAnchor","createText","projectNodes","attachViewAfter","viewRootNodes","attributeValue","isAdd","styleName","styleValue","setText","animate","NgModuleRef_","_moduleType","provDef","injectFlags","lifecycles","RendererV1TokenKey","Renderer2TokenKey","Renderer2","ElementRefTokenKey","createPipeInstance","createDirectiveInstance","createClass","eventHandlerClosure","callFactory","startView","tokenKey$$1","ChangeDetectorRefTokenKey","searchView","findCompView","ViewContainerRefTokenKey","viewContainer","TemplateRefTokenKey","providerDef_1","allProviders","publicProviders","providerData","updateProp","changes","unwrap","callLifecycleHooksChildrenFirst","callProviderLifecycles","childFlags","directChildFlags","callElementProvidersLifecycles","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","nodeMatchedQueries","isEmbeddedView","tplDef","filterId","asQueryList","setDirty","checkAndUpdateQuery","queryList","dirty","directiveInstance","newValues","calcQueryValues","reset","notify","boundValue","matchedQueries","getQueryValue","childMatchedQueries","embeddedView","dvc","projectedView","queryValueType","appendNgContent","_addInterpolationPart","anchorDef$$1","compRenderer","createView","outputCount","createViewNodes","hostDef","nodeData","compViewDef","createProviderInstance","initView","execEmbeddedViewsAction","ViewAction","CheckNoChanges","shiftInitState","markProjectedViewsForCheck","CheckAndUpdate","execQueriesAction","callInit","checkAndUpdateNode","argStyle","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","bindLen","changed","checkAndUpdateElementInline","checkAndUpdateTextInline","ngOnChanges","ngOnInit","checkAndUpdateDirectiveInline","asPureExpressionData","checkAndUpdateNodeInline","checkAndUpdateElementDynamic","checkAndUpdateTextDynamic","checkAndUpdateDirectiveDynamic","i_1","checkNoChangesNode","checkNoChangesQuery","Destroy","destroyNode","asTextData","renderText","destroyViewNodes","CreateViewNodes","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","execComponentViewsAction","viewState","execProjectedViewsAction","queryFlags","staticDynamicQueryFlag","checkType","nodeCount","initServicesIfNeeded","services","debugSetCurrentNode","debugCreateRootView","debugCreateEmbeddedView","debugCreateComponentView","debugCreateNgModuleRef","debugOverrideProvider","debugOverrideComponentView","debugClearOverrides","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","DebugContext_","createProdRootView","prodCheckAndUpdateNode","prodCheckNoChangesNode","elInjector","createRootData","Sanitizer","createRenderer","viewDef$$1","viewDefOverrides","hasOverrides","hasDeprecatedOverrides","providerOverrides","override","deprecatedBehavior","splitDepsDsl","moduleSet_1","applyProviderOverridesToNgModule","applyProviderOverridesToView","elIndicesWithOverwrittenProviders","lastElementDef","elementIndicesWithOverwrittenProviders","elIndex","callWithDebugContext","DebugAction","debugUpdateDirectives","debugCheckAndUpdateNode","debugCheckNoChangesNode","nextDirectiveWithBinding","debugUpdateRenderer","nextRenderNodeWithBinding","givenValues","bindingValues","normalizeDebugBindingName","normalizeDebugBindingValue","removeAttribute","CAMEL_CASE_REGEXP","elView","elOrCompView","childDef","collectReferences","findHostElement","logError","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","oldAction","_currentAction","oldView","_currentView","oldNodeIndex","_currentNodeIndex","getCurrentDebugContext","DebugRendererFactory2","DebugRenderer2","renderData","whenRenderingDone","namespace","debugCtx","debugEl","getDebugNode","debugChildEl","debugRefEl","oldChild","removeClass","NgModuleFactory_","_ngModuleDefFactory","executeHooks","allHooks","checkHooks","ngDevMode","assertNotNull","stringify$1$1","stopNode","currentNode","pNextOrParent","findFirstRNode","currentSibling","initialNode","nextNode","getNextLNodeWithProjection","native","lContainerNode","childContainerData","dynamicLContainerNode","views","addRemoveViewFromContainer","insertMode","beforeNode","assertNodeType","createTextNode","isProceduralRenderer","getNextOrParentSiblingNode","removeView","removeIndex","viewNode","setViewNext","rootView","viewOrContainer","cleanUpView","getParentState","destroyViewTree","cleanup","tView","NG_HOST_SYMBOL","currentView","enterView","newView","tData","firstTemplatePass","bindingStartIndex","previousOrParentNode","isParent","leaveView","checkNoChangesMode","viewHooks","viewCheckHooks","refreshDirectives","executeInitAndContentHooks","defs","createLView","viewId","dynamicViewCount","createLNodeObject","nodeInjector","renderEmbeddedTemplate","isState","_isParent","_previousOrParentNode","rf","lView","getOrCreateTView","directiveRegistry","pipeRegistry","assertNull","assertDataNext","tNode","refreshDynamicChildren","initHooks","contentHooks","contentCheckHooks","destroyHooks","pipeDestroyHooks","container_1","componentRefresh","assertNotNull$1","instanceOrArray","markViewDirty","rootContext","clean","_CLEAN_PROMISE","res_1","_getComponentHostLElementNode","getRootView","componentOrContext","getRenderFlags","setHostBindings","_ROOT_DIRECTIVE_INDICES","hostNode","detectChangesInternal","_lViewNode","notImplemented","ReadFromInjectorFn","getOrCreateElementRef","di","ElementRef$1","getOrCreateTemplateRef","vcRefHost","assertNodeOfPossibleTypes","lContainer","nextIndex","canInsertNativeNode","parentLNode","getOrCreateContainerRef","directiveIdx","_viewRefs","_lContainerNode","lViewNode","adjustedIdx","_adjustIndex","findNextRNodeSibling","containerNextNativeNode","insertView","newIndex","assertLessThan","TemplateRef$1","destroyFn","EmbeddedViewRef$1","_template","QueryList_","inSpan","exclusive","getSelectors","removeSuffix","elements_1","diagnosticInfoFromTemplateInfo","findTemplateAstAt","allowWidening","spanA","spanB","findAstAt","excludeEmpty","getExpressionCompletions","query$$1","language_services_7","language_services_4","getExpressionSymbol","onclick","ondblclick","onmousedown","onmouseup","onmouseover","onmousemove","onmouseout","onkeypress","onkeydown","onkeyup","onload","onunload","href","alt","tabindex","media","nohref","usemap","onfocus","onblur","charset","declare","classid","codebase","codetype","archive","standby","title","cite","datetime","shape","coords","enctype","onsubmit","onreset","accept-charset","valuetype","longdesc","width","disabled","onselect","accesskey","multiple","onchange","selected","checked","maxlength","rows","cols","height","border","rules","cellspacing","cellpadding","datapagesize","align","charoff","valign","abbr","axis","headers","rowspan","colspan","profile","http-equiv","scheme","hreflang","rev","ismap","TT","BIG","STRONG","DFN","CODE","SAMP","KBD","VAR","CITE","ABBR","ACRONYM","SPAN","BDO","BODY","ADDRESS","DIV","MAP","AREA","IMG","OBJECT","PARAM","PRE","BLOCKQUOTE","INS","DEL","DL","DT","DD","UL","FORM","LABEL","INPUT","SELECT","OPTGROUP","OPTION","TEXTAREA","FIELDSET","LEGEND","BUTTON","TABLE","CAPTION","COLGROUP","COL","TR","HEAD","TITLE","BASE","META","NOSCRIPT","defaultAttributes","indexes","indexes_1","SCHEMA","EVENT","BOOLEAN","SchemaInformation","typeParts","NUMBER","STRING","allKnownElements","eventsOf","propertiesOf","typeOf","_instance","hiddenHtmlElements","script","noscript","getTemplateCompletions","templateInfo","templatePosition_1","mostSpecific","path_1","elementCompletions","startTagSpan","tagLen","ExpressionVisitor","language_services_2","dinfo","widerPath_1","widerVisitor","attributeValueCompletions","attributeCompletions","re","entityCompletions","getSourceText","astPosition_1","templatePath","interpolationCompletions","voidElementAttributeCompletions","attributeCompletionsForElement","htmlAttributes","fromHtml","htmlProperties","propertyNames","htmlEvents","eventNames","selectorMap","applicableSelectors","selectorAndAttributeNames","selectorAndAttr","attrs_1","duplicate","inputOutput","cloneAttr","expandedAttr","getAttributeInfosForElement","nameOfAttr","htmlNames","uniqueByName","getExpressionScope$$1","key_1","selectorInfo","selector_1","templateBindingResult","valueRelativePosition_1","lowerName","keyCompletions","equalLocation","contextTable","symbolsToCompletions","expressionPosition","completions","attributeValuePosition","templateAttr","templatePosition","symbol_1","inEvent","findAttribute","attribute","expressionOffset","span_1","OverrideKindSymbol","attributeValueSymbol_1","invertMap","invertedOutputs","fieldName","findOutputBinding","invertedInput","findInputBinding","sym","kindOverride","createLanguageService","LanguageServiceImpl","getTemplateReferences","getTemplates","astProvider","getTemplateAst","expressionDiagnostics","language_services_3","templates_1","_loop_1","getTemplateDiagnostics","getDeclarations","getAnalyzedModules","declarationSpan","declarations_1","getDeclarationDiagnostics","uniqueBySpan","getPipesAt","getTemplateAstAtPosition","getCompletionsAt","getDefinitionAt","getHoverAt","locateSymbol","container$$1","hoverTextOf","getHover","getTemplateAt","contextFile","rawHtmlParser","parser","getReflector","module_1","moduleSize","resultSize","findSuitableDefaultModule","resolvedDirectives","tryParseHtml","htmlResult","getSpanAt","getProgram","metadataCollector","language_services_13","verboseInvalidExpression","directoryExists","directoryName","getScriptSnapshot","snapshot","getLength","ReflectorModuleModuleResolutionHost","ts.createModuleResolutionCache","metadataReaderCache","language_services_14","hostAdapter","serviceHost","moduleResolutionCache","createModuleResolutionCache","getCurrentDirectory","modulePath","path.join","ts.resolveModuleName","resolveModuleName","DummyHtmlParser","DummyResourceLoader","TypeScriptServiceHost","tsService","_typeCache","setSite","service","validate","_resolver","moduleResolver","directiveResolver","resourceLoader","createOfflineCompileUrlResolver","directiveNormalizer","pipeResolver","collectError","ensureTemplateMap","templateReferences","fileToComponent","getSourceFromType","getScriptVersion","updateAnalyzedModules","ensureAnalyzedModules","getScriptFileNames","analyzeNgModules","getSourceFiles","version_1","ts.forEachChild","getSourceFromNode","templateSource","visit_1","getDeclarationFromNode","visit_2","modulesOutOfDate","_checker","getTypeChecker","lastProgram","invalidateFile","_staticSymbolResolver","clearCaches","seen_1","version$$1","fileVersions","collectedErrors","templateReference","getSourceFromDeclaration","language_services_10","queryCache","pipes_1","language_services_12","language_services_11","ts.SyntaxKind","getTemplateClassDeclFromNode","stringOf","shrink","spanOf$1","getTemplateClassFromStaticSymbol","_reflectorHost","scriptFileNames","path.dirname","tsConfigPath","existsSync","parentDir","findTsConfig","genDir","getCompilationSettings","paths","ReflectorHost","errorMap","sourceFilePath","reflectorHost","ssr","currentToken","missingTemplate","callTarget","Decorator","getCollectedErrors","defaultSpan","position_1","isFormattedError","convertChain","errorToDiagnosticWithChain","WeakMap","projectHostMap","oldLS","languageService","tryCall","tryFilenameCall","ls","tryFilenameOneCall","tryFilenameTwoCall","p1","p2","tryFilenameThreeCall","p3","tryFilenameFourCall","p4","cleanupSemanticCache","getSyntacticDiagnostics","getSemanticDiagnostics","getCompilerOptionsDiagnostics","getSyntacticClassifications","getSemanticClassifications","getEncodedSyntacticClassifications","getEncodedSemanticClassifications","getCompletionsAtPosition","getCompletionEntryDetails","getCompletionEntrySymbol","getQuickInfoAtPosition","getNameOrDottedNameSpan","getBreakpointStatementAtPosition","getSignatureHelpItems","getRenameInfo","findRenameLocations","getDefinitionAtPosition","getImplementationAtPosition","getReferencesAtPosition","findReferences","getDocumentHighlights","getOccurrencesAtPosition","getNavigateToItems","searchValue","maxResultCount","excludeDtsFiles","getNavigationBarItems","getNavigationTree","getOutliningSpans","getTodoComments","getBraceMatchingAtPosition","getIndentationAtPosition","getFormattingEditsForRange","getFormattingEditsForDocument","getFormattingEditsAfterKeystroke","getDocCommentTemplateAtPosition","isValidBraceCompletionAtPosition","getSpanOfEnclosingComment","getCodeFixesAtPosition","applyCodeActionCommand","getEmitOutput","dispose","getApplicableRefactors","getEditsForRefactor","getDefinitionAndBoundSpan","getCombinedCodeFix","fixId","formatOptions","typescriptOnly","proxy","diagnosticMessageToDiagnosticMessageText","diagnosticChainToDiagnosticChain","tryOperation","attempting","projectService","logger","languageServiceHost","isGlobalCompletion","isMemberCompletion","isNewIdentifierLocation","results_1","sortText","kindModifiers","displayParts","ours","documentation","textSpan","file_1","diagnosticToDiagnostic","ours_1","loc","containerName","containerKind"],"mappings":"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aAAiB,YAAA,WAAA,SACjB,aAAW,gBAAA,YAAA,eAAA,8BAEAL,gBAAAM,cACX,cACA,kBACA,YACA,YACA,YACA,eACA,gBACA,aACD;;;;;;;;sICaC6yE,UACA,iYAEA,s1BACA,qgCACA,gOACA,2uBACA,uBACA,2CACA,uBACA,wCACA,uBACA,kCACA,yCACA,mLACA,8JACA,eACA,yBACA,iCACA,iQACA,yHACA,sCACA,+BACA,4BACA,0BACA,8BACA,yCACA,6BACA,0BACA,uDACA,wCACA,qCACA,uGACA,iGACA,sOACA,mDACA,sBACA,wCACA,6BACA,2JACA,oJACA,wbACA,+BACA,8BACA,6BACA,wIACA,yBACA,4HACA,8BACA,mDACA,2DACA,sCACA,kDACA,uIACA,yCACA,6EACA,wDACA,wBACA,gDACA,yBACA,2BACA,qCACA,mCACA,gGACA,wGACA,wBACA,0BACA,mDACA,sBACA,2CACA,8BACA,mHACA,+DACA,oHACA,iDACA,wDACA,0BACA,qNACA,2BACA,sDACA,iCACA,yBACA,oCACA,wBACA,+BACA,qCACA,wCACA,6BACA,+BACA,2BACA,mBACA,sBACA,8BACA,sBACA,4BACA,kCACA,0BACA,+BACA,gCACA,gCACA,6BACA,2BACA,sBACA,+CACA,+CACA,+CACA,+CACA,6BACA,sBACA,sBACA,0BACA,2BACA,uBACA,2BACA,iCACA,0BACA,qBACA,2BACA,qBACA,oCACA,wBACA,4BACA,2BACA,qCACA,oBACA,qBACA,mBACA,uBACA,2BACA,sBACA,8BACA,+BACA,qCACA,2BACA,mDACA,yBACA,2BACA,mBACA,8CACA,6BACA,qBACA,mCACA,kCACA,kCACA,oBACA,0BACA,8BACA,2BACF,wEACmB,gFACjB,yBACA,8BACA,sBAEAC,eACAC,MAAA,YACFC,IAAA,UACEC,WAAA,aACAn/C,UAAkB,YAClBo/C,SAAS,oBACD,qCAEgC,SAAE7/C,iBAElC8/C,+BACA1rD,MAAA4L,OAAAp7B,KAAAZ,OAAqBA,kBACrB+7E,oBACAloE,QAAU,SAAWmoE,aAC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GACA,iGACA,sOACA,mDACA,sBACA,wCACA,6BACA,2JACA,oJACA,wbACA,+BACA,8BACA,6BACA,wIACA,yBACA,4HACA,8BACA,mDACA,2DACA,sCACA,kDACA,uIACA,yCACA,6EACA,wDACA,wBACA,gDACA,yBACA,2BACA,qCACA,mCACA,gGACA,wGACA,wBACA,0BACA,mDACA,sBACA,2CACA,8BACA,mHACA,+DACA,oHACA,iDACA,wDACA,0BACA,qNACA,2BACA,sDACA,iCACA,yBACA,oCACA,wBACA,+BACA,qCACA,wCACA,6BACA,+BACA,2BACA,mBACA,sBACA,8BACA,sBACA,4BACA,kCACA,0BACA,+BACA,gCACA,gCACA,6BACA,2BACA,sBACA,+CACA,+CACA,+CACA,+CACA,6BACA,sBACA,sBACA,0BACA,2BACA,uBACA,2BACA,iCACA,0BACA,qBACA,2BACA,qBACA,oCACA,wBACA,4BACA,2BACA,qCACA,oBACA,qBACA,mBACA,uBACA,2BACA,sBACA,8BACA,+BACA,qCACA,2BACA,mDACA,yBACA,2BACA,mBACA,8CACA,6BACA,qBACA,mCACA,kCACA,kCACA,oBACA,0BACA,8BACA,2BACF,wEAQE,gFACA,yBACA,8BACA,sBAEAC,MAAA,QACAC,QAAS,iBACD,gBACC,gBACL,2BAC4B,oBACxBC,wBACA/+K,MAAIpwB,UACJ48E,iBACA/oE,QAAW,SAAGmoE,aACd,IAAA/jE,MAAS+jE,YAAW1sE,MAAQ,KACxB4sE,WAAYjkE,MAAA,GAAU3I,MAAG,KACzB8/L,WAAYn3L,MAAA,GAAS,KAAI3I,MAAM,KAE/BJ,QADWkgM,UAAA,GAEP9/L,MAAK,KAAOuE,QAAA,SAAeokC,KAAA,OAAA7nB,MAAAwsD,OAAA3kC,IAAAnpB,eAAA5f,qBAC9BkgM,UAAA,GACJ/yH,UAAAD,WAAAhsD,MAAAwsD,OAAAR,UAAAttD,eACD,GAAAutD,UACI,IAAI,IAAAr6E,OAAYq6E,UACfntE,KAAAlN,KAAAq6E,UAAAr6E,gBAGA6R,QAAA,SAAAyoE,UACQ,eAERA,SAAAx6B,WAAA,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","file":"/home/travis/build/angular/angular/dist/packages-dist/language-service/bundles/language-service.umd.min.js.map","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\n// Attention:\n// This file duplicates types and values from @angular/core\n// so that we are able to make @angular/compiler independent of @angular/core.\n// This is important to prevent a build cycle, as @angular/core needs to\n// be compiled with the compiler.\n/**\n * @record\n */\nexport function Inject() { }\nfunction Inject_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Inject.prototype.token;\n}\nexport var /** @type {?} */ createInject = makeMetadataFactory('Inject', function (token) { return ({ token: token }); });\nexport var /** @type {?} */ createInjectionToken = makeMetadataFactory('InjectionToken', function (desc) { return ({ _desc: desc, ngInjectableDef: undefined }); });\n/**\n * @record\n */\nexport function Attribute() { }\nfunction Attribute_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Attribute.prototype.attributeName;\n}\nexport var /** @type {?} */ createAttribute = makeMetadataFactory('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });\n/**\n * @record\n */\nexport function Query() { }\nfunction Query_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Query.prototype.descendants;\n    /** @type {?} */\n    Query.prototype.first;\n    /** @type {?} */\n    Query.prototype.read;\n    /** @type {?} */\n    Query.prototype.isViewQuery;\n    /** @type {?} */\n    Query.prototype.selector;\n}\nexport var /** @type {?} */ createContentChildren = makeMetadataFactory('ContentChildren', function (selector, data) {\n    if (data === void 0) { data = {}; }\n    return (tslib_1.__assign({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));\n});\nexport var /** @type {?} */ createContentChild = makeMetadataFactory('ContentChild', function (selector, data) {\n    if (data === void 0) { data = {}; }\n    return (tslib_1.__assign({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));\n});\nexport var /** @type {?} */ createViewChildren = makeMetadataFactory('ViewChildren', function (selector, data) {\n    if (data === void 0) { data = {}; }\n    return (tslib_1.__assign({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));\n});\nexport var /** @type {?} */ createViewChild = makeMetadataFactory('ViewChild', function (selector, data) {\n    return (tslib_1.__assign({ selector: selector, first: true, isViewQuery: true, descendants: true }, data));\n});\n/**\n * @record\n */\nexport function Directive() { }\nfunction Directive_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Directive.prototype.selector;\n    /** @type {?|undefined} */\n    Directive.prototype.inputs;\n    /** @type {?|undefined} */\n    Directive.prototype.outputs;\n    /** @type {?|undefined} */\n    Directive.prototype.host;\n    /** @type {?|undefined} */\n    Directive.prototype.providers;\n    /** @type {?|undefined} */\n    Directive.prototype.exportAs;\n    /** @type {?|undefined} */\n    Directive.prototype.queries;\n    /** @type {?|undefined} */\n    Directive.prototype.guards;\n}\nexport var /** @type {?} */ createDirective = makeMetadataFactory('Directive', function (dir) {\n    if (dir === void 0) { dir = {}; }\n    return dir;\n});\n/**\n * @record\n */\nexport function Component() { }\nfunction Component_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Component.prototype.changeDetection;\n    /** @type {?|undefined} */\n    Component.prototype.viewProviders;\n    /** @type {?|undefined} */\n    Component.prototype.moduleId;\n    /** @type {?|undefined} */\n    Component.prototype.templateUrl;\n    /** @type {?|undefined} */\n    Component.prototype.template;\n    /** @type {?|undefined} */\n    Component.prototype.styleUrls;\n    /** @type {?|undefined} */\n    Component.prototype.styles;\n    /** @type {?|undefined} */\n    Component.prototype.animations;\n    /** @type {?|undefined} */\n    Component.prototype.encapsulation;\n    /** @type {?|undefined} */\n    Component.prototype.interpolation;\n    /** @type {?|undefined} */\n    Component.prototype.entryComponents;\n    /** @type {?|undefined} */\n    Component.prototype.preserveWhitespaces;\n}\n/** @enum {number} */\nvar ViewEncapsulation = {\n    Emulated: 0,\n    Native: 1,\n    None: 2,\n};\nexport { ViewEncapsulation };\nViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\nViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\nViewEncapsulation[ViewEncapsulation.None] = \"None\";\n/** @enum {number} */\nvar ChangeDetectionStrategy = {\n    OnPush: 0,\n    Default: 1,\n};\nexport { ChangeDetectionStrategy };\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = \"OnPush\";\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = \"Default\";\nexport var /** @type {?} */ createComponent = makeMetadataFactory('Component', function (c) {\n    if (c === void 0) { c = {}; }\n    return (tslib_1.__assign({ changeDetection: ChangeDetectionStrategy.Default }, c));\n});\n/**\n * @record\n */\nexport function Pipe() { }\nfunction Pipe_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Pipe.prototype.name;\n    /** @type {?|undefined} */\n    Pipe.prototype.pure;\n}\nexport var /** @type {?} */ createPipe = makeMetadataFactory('Pipe', function (p) { return (tslib_1.__assign({ pure: true }, p)); });\n/**\n * @record\n */\nexport function Input() { }\nfunction Input_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Input.prototype.bindingPropertyName;\n}\nexport var /** @type {?} */ createInput = makeMetadataFactory('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\n/**\n * @record\n */\nexport function Output() { }\nfunction Output_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Output.prototype.bindingPropertyName;\n}\nexport var /** @type {?} */ createOutput = makeMetadataFactory('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\n/**\n * @record\n */\nexport function HostBinding() { }\nfunction HostBinding_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    HostBinding.prototype.hostPropertyName;\n}\nexport var /** @type {?} */ createHostBinding = makeMetadataFactory('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });\n/**\n * @record\n */\nexport function HostListener() { }\nfunction HostListener_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    HostListener.prototype.eventName;\n    /** @type {?|undefined} */\n    HostListener.prototype.args;\n}\nexport var /** @type {?} */ createHostListener = makeMetadataFactory('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });\n/**\n * @record\n */\nexport function NgModule() { }\nfunction NgModule_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    NgModule.prototype.providers;\n    /** @type {?|undefined} */\n    NgModule.prototype.declarations;\n    /** @type {?|undefined} */\n    NgModule.prototype.imports;\n    /** @type {?|undefined} */\n    NgModule.prototype.exports;\n    /** @type {?|undefined} */\n    NgModule.prototype.entryComponents;\n    /** @type {?|undefined} */\n    NgModule.prototype.bootstrap;\n    /** @type {?|undefined} */\n    NgModule.prototype.schemas;\n    /** @type {?|undefined} */\n    NgModule.prototype.id;\n}\nexport var /** @type {?} */ createNgModule = makeMetadataFactory('NgModule', function (ngModule) { return ngModule; });\n/**\n * @record\n */\nexport function ModuleWithProviders() { }\nfunction ModuleWithProviders_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ModuleWithProviders.prototype.ngModule;\n    /** @type {?|undefined} */\n    ModuleWithProviders.prototype.providers;\n}\n/**\n * @record\n */\nexport function Injectable() { }\nfunction Injectable_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Injectable.prototype.providedIn;\n    /** @type {?|undefined} */\n    Injectable.prototype.useClass;\n    /** @type {?|undefined} */\n    Injectable.prototype.useExisting;\n    /** @type {?|undefined} */\n    Injectable.prototype.useValue;\n    /** @type {?|undefined} */\n    Injectable.prototype.useFactory;\n    /** @type {?|undefined} */\n    Injectable.prototype.deps;\n}\nexport var /** @type {?} */ createInjectable = makeMetadataFactory('Injectable', function (injectable) {\n    if (injectable === void 0) { injectable = {}; }\n    return injectable;\n});\n/**\n * @record\n */\nexport function SchemaMetadata() { }\nfunction SchemaMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SchemaMetadata.prototype.name;\n}\nexport var /** @type {?} */ CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\nexport var /** @type {?} */ NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\nexport var /** @type {?} */ createOptional = makeMetadataFactory('Optional');\nexport var /** @type {?} */ createSelf = makeMetadataFactory('Self');\nexport var /** @type {?} */ createSkipSelf = makeMetadataFactory('SkipSelf');\nexport var /** @type {?} */ createHost = makeMetadataFactory('Host');\nexport var /** @type {?} */ Type = Function;\n/** @enum {number} */\nvar SecurityContext = {\n    NONE: 0,\n    HTML: 1,\n    STYLE: 2,\n    SCRIPT: 3,\n    URL: 4,\n    RESOURCE_URL: 5,\n};\nexport { SecurityContext };\nSecurityContext[SecurityContext.NONE] = \"NONE\";\nSecurityContext[SecurityContext.HTML] = \"HTML\";\nSecurityContext[SecurityContext.STYLE] = \"STYLE\";\nSecurityContext[SecurityContext.SCRIPT] = \"SCRIPT\";\nSecurityContext[SecurityContext.URL] = \"URL\";\nSecurityContext[SecurityContext.RESOURCE_URL] = \"RESOURCE_URL\";\n/** @enum {number} */\nvar NodeFlags = {\n    None: 0,\n    TypeElement: 1,\n    TypeText: 2,\n    ProjectedTemplate: 4,\n    CatRenderNode: 3,\n    TypeNgContent: 8,\n    TypePipe: 16,\n    TypePureArray: 32,\n    TypePureObject: 64,\n    TypePurePipe: 128,\n    CatPureExpression: 224,\n    TypeValueProvider: 256,\n    TypeClassProvider: 512,\n    TypeFactoryProvider: 1024,\n    TypeUseExistingProvider: 2048,\n    LazyProvider: 4096,\n    PrivateProvider: 8192,\n    TypeDirective: 16384,\n    Component: 32768,\n    CatProviderNoDirective: 3840,\n    CatProvider: 20224,\n    OnInit: 65536,\n    OnDestroy: 131072,\n    DoCheck: 262144,\n    OnChanges: 524288,\n    AfterContentInit: 1048576,\n    AfterContentChecked: 2097152,\n    AfterViewInit: 4194304,\n    AfterViewChecked: 8388608,\n    EmbeddedViews: 16777216,\n    ComponentView: 33554432,\n    TypeContentQuery: 67108864,\n    TypeViewQuery: 134217728,\n    StaticQuery: 268435456,\n    DynamicQuery: 536870912,\n    TypeModuleProvider: 1073741824,\n    CatQuery: 201326592,\n    // mutually exclusive values...\n    Types: 201347067,\n};\nexport { NodeFlags };\n/** @enum {number} */\nvar DepFlags = {\n    None: 0,\n    SkipSelf: 1,\n    Optional: 2,\n    Self: 4,\n    Value: 8,\n};\nexport { DepFlags };\n/** @enum {number} */\nvar InjectFlags = {\n    Default: 0,\n    /** Skip the node that is requesting injection. */\n    SkipSelf: 1,\n    /** Don't descend into ancestors of the node requesting injection. */\n    Self: 2,\n};\nexport { InjectFlags };\n/** @enum {number} */\nvar ArgumentType = { Inline: 0, Dynamic: 1, };\nexport { ArgumentType };\n/** @enum {number} */\nvar BindingFlags = {\n    TypeElementAttribute: 1,\n    TypeElementClass: 2,\n    TypeElementStyle: 4,\n    TypeProperty: 8,\n    SyntheticProperty: 16,\n    SyntheticHostProperty: 32,\n    CatSyntheticProperty: 48,\n    // mutually exclusive values...\n    Types: 15,\n};\nexport { BindingFlags };\n/** @enum {number} */\nvar QueryBindingType = { First: 0, All: 1, };\nexport { QueryBindingType };\n/** @enum {number} */\nvar QueryValueType = {\n    ElementRef: 0,\n    RenderElement: 1,\n    TemplateRef: 2,\n    ViewContainerRef: 3,\n    Provider: 4,\n};\nexport { QueryValueType };\n/** @enum {number} */\nvar ViewFlags = {\n    None: 0,\n    OnPush: 2,\n};\nexport { ViewFlags };\n/** @enum {number} */\nvar MissingTranslationStrategy = {\n    Error: 0,\n    Warning: 1,\n    Ignore: 2,\n};\nexport { MissingTranslationStrategy };\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = \"Error\";\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = \"Warning\";\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = \"Ignore\";\n/**\n * @record\n * @template T\n */\nexport function MetadataFactory() { }\nfunction MetadataFactory_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (...args: any[]): T;\n    */\n    /** @type {?} */\n    MetadataFactory.prototype.isTypeOf;\n    /** @type {?} */\n    MetadataFactory.prototype.ngMetadataName;\n}\n/**\n * @template T\n * @param {?} name\n * @param {?=} props\n * @return {?}\n */\nfunction makeMetadataFactory(name, props) {\n    var /** @type {?} */ factory = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var /** @type {?} */ values = props ? props.apply(void 0, args) : {};\n        return tslib_1.__assign({ ngMetadataName: name }, values);\n    };\n    factory.isTypeOf = function (obj) { return obj && obj.ngMetadataName === name; };\n    factory.ngMetadataName = name;\n    return factory;\n}\n/**\n * @record\n */\nexport function Route() { }\nfunction Route_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Route.prototype.children;\n    /** @type {?|undefined} */\n    Route.prototype.loadChildren;\n}\n//# sourceMappingURL=core.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ DASH_CASE_REGEXP = /-+([a-z0-9])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nexport function dashCaseToCamelCase(input) {\n    return input.replace(DASH_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return m[1].toUpperCase();\n    });\n}\n/**\n * @param {?} input\n * @param {?} defaultValues\n * @return {?}\n */\nexport function splitAtColon(input, defaultValues) {\n    return _splitAt(input, ':', defaultValues);\n}\n/**\n * @param {?} input\n * @param {?} defaultValues\n * @return {?}\n */\nexport function splitAtPeriod(input, defaultValues) {\n    return _splitAt(input, '.', defaultValues);\n}\n/**\n * @param {?} input\n * @param {?} character\n * @param {?} defaultValues\n * @return {?}\n */\nfunction _splitAt(input, character, defaultValues) {\n    var /** @type {?} */ characterIndex = input.indexOf(character);\n    if (characterIndex == -1)\n        return defaultValues;\n    return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];\n}\n/**\n * @param {?} value\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nexport function visitValue(value, visitor, context) {\n    if (Array.isArray(value)) {\n        return visitor.visitArray(/** @type {?} */ (value), context);\n    }\n    if (isStrictStringMap(value)) {\n        return visitor.visitStringMap(/** @type {?} */ (value), context);\n    }\n    if (value == null || typeof value == 'string' || typeof value == 'number' ||\n        typeof value == 'boolean') {\n        return visitor.visitPrimitive(value, context);\n    }\n    return visitor.visitOther(value, context);\n}\n/**\n * @param {?} val\n * @return {?}\n */\nexport function isDefined(val) {\n    return val !== null && val !== undefined;\n}\n/**\n * @template T\n * @param {?} val\n * @return {?}\n */\nexport function noUndefined(val) {\n    return val === undefined ? /** @type {?} */ ((null)) : val;\n}\n/**\n * @record\n */\nexport function ValueVisitor() { }\nfunction ValueVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ValueVisitor.prototype.visitArray;\n    /** @type {?} */\n    ValueVisitor.prototype.visitStringMap;\n    /** @type {?} */\n    ValueVisitor.prototype.visitPrimitive;\n    /** @type {?} */\n    ValueVisitor.prototype.visitOther;\n}\nvar ValueTransformer = /** @class */ (function () {\n    function ValueTransformer() {\n    }\n    /**\n     * @param {?} arr\n     * @param {?} context\n     * @return {?}\n     */\n    ValueTransformer.prototype.visitArray = /**\n     * @param {?} arr\n     * @param {?} context\n     * @return {?}\n     */\n    function (arr, context) {\n        var _this = this;\n        return arr.map(function (value) { return visitValue(value, _this, context); });\n    };\n    /**\n     * @param {?} map\n     * @param {?} context\n     * @return {?}\n     */\n    ValueTransformer.prototype.visitStringMap = /**\n     * @param {?} map\n     * @param {?} context\n     * @return {?}\n     */\n    function (map, context) {\n        var _this = this;\n        var /** @type {?} */ result = {};\n        Object.keys(map).forEach(function (key) { result[key] = visitValue(map[key], _this, context); });\n        return result;\n    };\n    /**\n     * @param {?} value\n     * @param {?} context\n     * @return {?}\n     */\n    ValueTransformer.prototype.visitPrimitive = /**\n     * @param {?} value\n     * @param {?} context\n     * @return {?}\n     */\n    function (value, context) { return value; };\n    /**\n     * @param {?} value\n     * @param {?} context\n     * @return {?}\n     */\n    ValueTransformer.prototype.visitOther = /**\n     * @param {?} value\n     * @param {?} context\n     * @return {?}\n     */\n    function (value, context) { return value; };\n    return ValueTransformer;\n}());\nexport { ValueTransformer };\nexport var /** @type {?} */ SyncAsync = {\n    assertSync: function (value) {\n        if (isPromise(value)) {\n            throw new Error(\"Illegal state: value cannot be a promise\");\n        }\n        return value;\n    },\n    then: function (value, cb) { return isPromise(value) ? value.then(cb) : cb(value); },\n    all: function (syncAsyncValues) {\n        return syncAsyncValues.some(isPromise) ? Promise.all(syncAsyncValues) : /** @type {?} */ (syncAsyncValues);\n    }\n};\n/**\n * @param {?} msg\n * @return {?}\n */\nexport function error(msg) {\n    throw new Error(\"Internal Error: \" + msg);\n}\n/**\n * @param {?} msg\n * @param {?=} parseErrors\n * @return {?}\n */\nexport function syntaxError(msg, parseErrors) {\n    var /** @type {?} */ error = Error(msg);\n    (/** @type {?} */ (error))[ERROR_SYNTAX_ERROR] = true;\n    if (parseErrors)\n        (/** @type {?} */ (error))[ERROR_PARSE_ERRORS] = parseErrors;\n    return error;\n}\nvar /** @type {?} */ ERROR_SYNTAX_ERROR = 'ngSyntaxError';\nvar /** @type {?} */ ERROR_PARSE_ERRORS = 'ngParseErrors';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function isSyntaxError(error) {\n    return (/** @type {?} */ (error))[ERROR_SYNTAX_ERROR];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getParseErrors(error) {\n    return (/** @type {?} */ (error))[ERROR_PARSE_ERRORS] || [];\n}\n/**\n * @param {?} s\n * @return {?}\n */\nexport function escapeRegExp(s) {\n    return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n}\nvar /** @type {?} */ STRING_MAP_PROTO = Object.getPrototypeOf({});\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isStrictStringMap(obj) {\n    return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;\n}\n/**\n * @param {?} str\n * @return {?}\n */\nexport function utf8Encode(str) {\n    var /** @type {?} */ encoded = '';\n    for (var /** @type {?} */ index = 0; index < str.length; index++) {\n        var /** @type {?} */ codePoint = str.charCodeAt(index);\n        // decode surrogate\n        // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > (index + 1)) {\n            var /** @type {?} */ low = str.charCodeAt(index + 1);\n            if (low >= 0xdc00 && low <= 0xdfff) {\n                index++;\n                codePoint = ((codePoint - 0xd800) << 10) + low - 0xdc00 + 0x10000;\n            }\n        }\n        if (codePoint <= 0x7f) {\n            encoded += String.fromCharCode(codePoint);\n        }\n        else if (codePoint <= 0x7ff) {\n            encoded += String.fromCharCode(((codePoint >> 6) & 0x1F) | 0xc0, (codePoint & 0x3f) | 0x80);\n        }\n        else if (codePoint <= 0xffff) {\n            encoded += String.fromCharCode((codePoint >> 12) | 0xe0, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\n        }\n        else if (codePoint <= 0x1fffff) {\n            encoded += String.fromCharCode(((codePoint >> 18) & 0x07) | 0xf0, ((codePoint >> 12) & 0x3f) | 0x80, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\n        }\n    }\n    return encoded;\n}\n/**\n * @record\n */\nexport function OutputContext() { }\nfunction OutputContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    OutputContext.prototype.genFilePath;\n    /** @type {?} */\n    OutputContext.prototype.statements;\n    /** @type {?} */\n    OutputContext.prototype.constantPool;\n    /** @type {?} */\n    OutputContext.prototype.importExpr;\n}\nvar /** @type {?} */ MAX_LENGTH_STRINGIFY = 100;\n/**\n * @param {?} token\n * @return {?}\n */\nexport function stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return \"\" + token.overriddenName;\n    }\n    if (token.name) {\n        return \"\" + token.name;\n    }\n    var /** @type {?} */ res;\n    try {\n        res = JSON.stringify(token);\n    }\n    catch (_a) {\n        res = token.toString();\n    }\n    if (res == null) {\n        return '' + res;\n    }\n    var /** @type {?} */ newLineIndex = res.indexOf('\\n');\n    if (0 < newLineIndex) {\n        res = res.substring(0, newLineIndex);\n    }\n    if (MAX_LENGTH_STRINGIFY < res.length) {\n        res = res.substring(0, MAX_LENGTH_STRINGIFY) + '...';\n    }\n    return res;\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n * @param {?} type\n * @return {?}\n */\nexport function resolveForwardRef(type) {\n    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__')) {\n        return type();\n    }\n    else {\n        return type;\n    }\n}\n/**\n * Determine if the argument is shaped like a Promise\n * @param {?} obj\n * @return {?}\n */\nexport function isPromise(obj) {\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return !!obj && typeof obj.then === 'function';\n}\nvar Version = /** @class */ (function () {\n    function Version(full) {\n        this.full = full;\n        var /** @type {?} */ splits = full.split('.');\n        this.major = splits[0];\n        this.minor = splits[1];\n        this.patch = splits.slice(2).join('.');\n    }\n    return Version;\n}());\nexport { Version };\nfunction Version_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Version.prototype.major;\n    /** @type {?} */\n    Version.prototype.minor;\n    /** @type {?} */\n    Version.prototype.patch;\n    /** @type {?} */\n    Version.prototype.full;\n}\n/**\n * @record\n */\nexport function Console() { }\nfunction Console_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Console.prototype.log;\n    /** @type {?} */\n    Console.prototype.warn;\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * An Abstract Syntax Tree node representing part of a parsed Angular template.\n * @record\n */\nexport function TemplateAst() { }\nfunction TemplateAst_tsickle_Closure_declarations() {\n    /**\n     * The source span from which this node was parsed.\n     * @type {?}\n     */\n    TemplateAst.prototype.sourceSpan;\n    /**\n     * Visit this node and possibly transform it.\n     * @type {?}\n     */\n    TemplateAst.prototype.visit;\n}\n/**\n * A segment of text within the template.\n */\nvar /**\n * A segment of text within the template.\n */\nTextAst = /** @class */ (function () {\n    function TextAst(value, ngContentIndex, sourceSpan) {\n        this.value = value;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    TextAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitText(this, context); };\n    return TextAst;\n}());\n/**\n * A segment of text within the template.\n */\nexport { TextAst };\nfunction TextAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TextAst.prototype.value;\n    /** @type {?} */\n    TextAst.prototype.ngContentIndex;\n    /** @type {?} */\n    TextAst.prototype.sourceSpan;\n}\n/**\n * A bound expression within the text of a template.\n */\nvar /**\n * A bound expression within the text of a template.\n */\nBoundTextAst = /** @class */ (function () {\n    function BoundTextAst(value, ngContentIndex, sourceSpan) {\n        this.value = value;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    BoundTextAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitBoundText(this, context);\n    };\n    return BoundTextAst;\n}());\n/**\n * A bound expression within the text of a template.\n */\nexport { BoundTextAst };\nfunction BoundTextAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BoundTextAst.prototype.value;\n    /** @type {?} */\n    BoundTextAst.prototype.ngContentIndex;\n    /** @type {?} */\n    BoundTextAst.prototype.sourceSpan;\n}\n/**\n * A plain attribute on an element.\n */\nvar /**\n * A plain attribute on an element.\n */\nAttrAst = /** @class */ (function () {\n    function AttrAst(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    AttrAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitAttr(this, context); };\n    return AttrAst;\n}());\n/**\n * A plain attribute on an element.\n */\nexport { AttrAst };\nfunction AttrAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AttrAst.prototype.name;\n    /** @type {?} */\n    AttrAst.prototype.value;\n    /** @type {?} */\n    AttrAst.prototype.sourceSpan;\n}\n/**\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n * `[\\@trigger]=\"stateExp\"`)\n */\nvar /**\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n * `[\\@trigger]=\"stateExp\"`)\n */\nBoundElementPropertyAst = /** @class */ (function () {\n    function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {\n        this.name = name;\n        this.type = type;\n        this.securityContext = securityContext;\n        this.value = value;\n        this.unit = unit;\n        this.sourceSpan = sourceSpan;\n        this.isAnimation = this.type === PropertyBindingType.Animation;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    BoundElementPropertyAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitElementProperty(this, context);\n    };\n    return BoundElementPropertyAst;\n}());\n/**\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n * `[\\@trigger]=\"stateExp\"`)\n */\nexport { BoundElementPropertyAst };\nfunction BoundElementPropertyAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BoundElementPropertyAst.prototype.isAnimation;\n    /** @type {?} */\n    BoundElementPropertyAst.prototype.name;\n    /** @type {?} */\n    BoundElementPropertyAst.prototype.type;\n    /** @type {?} */\n    BoundElementPropertyAst.prototype.securityContext;\n    /** @type {?} */\n    BoundElementPropertyAst.prototype.value;\n    /** @type {?} */\n    BoundElementPropertyAst.prototype.unit;\n    /** @type {?} */\n    BoundElementPropertyAst.prototype.sourceSpan;\n}\n/**\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n * `(\\@trigger.phase)=\"callback($event)\"`).\n */\nvar /**\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n * `(\\@trigger.phase)=\"callback($event)\"`).\n */\nBoundEventAst = /** @class */ (function () {\n    function BoundEventAst(name, target, phase, handler, sourceSpan) {\n        this.name = name;\n        this.target = target;\n        this.phase = phase;\n        this.handler = handler;\n        this.sourceSpan = sourceSpan;\n        this.fullName = BoundEventAst.calcFullName(this.name, this.target, this.phase);\n        this.isAnimation = !!this.phase;\n    }\n    /**\n     * @param {?} name\n     * @param {?} target\n     * @param {?} phase\n     * @return {?}\n     */\n    BoundEventAst.calcFullName = /**\n     * @param {?} name\n     * @param {?} target\n     * @param {?} phase\n     * @return {?}\n     */\n    function (name, target, phase) {\n        if (target) {\n            return target + \":\" + name;\n        }\n        else if (phase) {\n            return \"@\" + name + \".\" + phase;\n        }\n        else {\n            return name;\n        }\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    BoundEventAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitEvent(this, context);\n    };\n    return BoundEventAst;\n}());\n/**\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n * `(\\@trigger.phase)=\"callback($event)\"`).\n */\nexport { BoundEventAst };\nfunction BoundEventAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BoundEventAst.prototype.fullName;\n    /** @type {?} */\n    BoundEventAst.prototype.isAnimation;\n    /** @type {?} */\n    BoundEventAst.prototype.name;\n    /** @type {?} */\n    BoundEventAst.prototype.target;\n    /** @type {?} */\n    BoundEventAst.prototype.phase;\n    /** @type {?} */\n    BoundEventAst.prototype.handler;\n    /** @type {?} */\n    BoundEventAst.prototype.sourceSpan;\n}\n/**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nvar /**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nReferenceAst = /** @class */ (function () {\n    function ReferenceAst(name, value, originalValue, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.originalValue = originalValue;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ReferenceAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitReference(this, context);\n    };\n    return ReferenceAst;\n}());\n/**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nexport { ReferenceAst };\nfunction ReferenceAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReferenceAst.prototype.name;\n    /** @type {?} */\n    ReferenceAst.prototype.value;\n    /** @type {?} */\n    ReferenceAst.prototype.originalValue;\n    /** @type {?} */\n    ReferenceAst.prototype.sourceSpan;\n}\n/**\n * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\n */\nvar /**\n * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\n */\nVariableAst = /** @class */ (function () {\n    function VariableAst(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    VariableAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitVariable(this, context);\n    };\n    return VariableAst;\n}());\n/**\n * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\n */\nexport { VariableAst };\nfunction VariableAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    VariableAst.prototype.name;\n    /** @type {?} */\n    VariableAst.prototype.value;\n    /** @type {?} */\n    VariableAst.prototype.sourceSpan;\n}\n/**\n * An element declaration in a template.\n */\nvar /**\n * An element declaration in a template.\n */\nElementAst = /** @class */ (function () {\n    function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan, endSourceSpan) {\n        this.name = name;\n        this.attrs = attrs;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.references = references;\n        this.directives = directives;\n        this.providers = providers;\n        this.hasViewContainer = hasViewContainer;\n        this.queryMatches = queryMatches;\n        this.children = children;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ElementAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitElement(this, context);\n    };\n    return ElementAst;\n}());\n/**\n * An element declaration in a template.\n */\nexport { ElementAst };\nfunction ElementAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElementAst.prototype.name;\n    /** @type {?} */\n    ElementAst.prototype.attrs;\n    /** @type {?} */\n    ElementAst.prototype.inputs;\n    /** @type {?} */\n    ElementAst.prototype.outputs;\n    /** @type {?} */\n    ElementAst.prototype.references;\n    /** @type {?} */\n    ElementAst.prototype.directives;\n    /** @type {?} */\n    ElementAst.prototype.providers;\n    /** @type {?} */\n    ElementAst.prototype.hasViewContainer;\n    /** @type {?} */\n    ElementAst.prototype.queryMatches;\n    /** @type {?} */\n    ElementAst.prototype.children;\n    /** @type {?} */\n    ElementAst.prototype.ngContentIndex;\n    /** @type {?} */\n    ElementAst.prototype.sourceSpan;\n    /** @type {?} */\n    ElementAst.prototype.endSourceSpan;\n}\n/**\n * A `<ng-template>` element included in an Angular template.\n */\nvar /**\n * A `<ng-template>` element included in an Angular template.\n */\nEmbeddedTemplateAst = /** @class */ (function () {\n    function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan) {\n        this.attrs = attrs;\n        this.outputs = outputs;\n        this.references = references;\n        this.variables = variables;\n        this.directives = directives;\n        this.providers = providers;\n        this.hasViewContainer = hasViewContainer;\n        this.queryMatches = queryMatches;\n        this.children = children;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    EmbeddedTemplateAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitEmbeddedTemplate(this, context);\n    };\n    return EmbeddedTemplateAst;\n}());\n/**\n * A `<ng-template>` element included in an Angular template.\n */\nexport { EmbeddedTemplateAst };\nfunction EmbeddedTemplateAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.attrs;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.outputs;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.references;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.variables;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.directives;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.providers;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.hasViewContainer;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.queryMatches;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.children;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.ngContentIndex;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.sourceSpan;\n}\n/**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nvar /**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nBoundDirectivePropertyAst = /** @class */ (function () {\n    function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {\n        this.directiveName = directiveName;\n        this.templateName = templateName;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    BoundDirectivePropertyAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitDirectiveProperty(this, context);\n    };\n    return BoundDirectivePropertyAst;\n}());\n/**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nexport { BoundDirectivePropertyAst };\nfunction BoundDirectivePropertyAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BoundDirectivePropertyAst.prototype.directiveName;\n    /** @type {?} */\n    BoundDirectivePropertyAst.prototype.templateName;\n    /** @type {?} */\n    BoundDirectivePropertyAst.prototype.value;\n    /** @type {?} */\n    BoundDirectivePropertyAst.prototype.sourceSpan;\n}\n/**\n * A directive declared on an element.\n */\nvar /**\n * A directive declared on an element.\n */\nDirectiveAst = /** @class */ (function () {\n    function DirectiveAst(directive, inputs, hostProperties, hostEvents, contentQueryStartId, sourceSpan) {\n        this.directive = directive;\n        this.inputs = inputs;\n        this.hostProperties = hostProperties;\n        this.hostEvents = hostEvents;\n        this.contentQueryStartId = contentQueryStartId;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    DirectiveAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitDirective(this, context);\n    };\n    return DirectiveAst;\n}());\n/**\n * A directive declared on an element.\n */\nexport { DirectiveAst };\nfunction DirectiveAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DirectiveAst.prototype.directive;\n    /** @type {?} */\n    DirectiveAst.prototype.inputs;\n    /** @type {?} */\n    DirectiveAst.prototype.hostProperties;\n    /** @type {?} */\n    DirectiveAst.prototype.hostEvents;\n    /** @type {?} */\n    DirectiveAst.prototype.contentQueryStartId;\n    /** @type {?} */\n    DirectiveAst.prototype.sourceSpan;\n}\n/**\n * A provider declared on an element\n */\nvar /**\n * A provider declared on an element\n */\nProviderAst = /** @class */ (function () {\n    function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan, isModule) {\n        this.token = token;\n        this.multiProvider = multiProvider;\n        this.eager = eager;\n        this.providers = providers;\n        this.providerType = providerType;\n        this.lifecycleHooks = lifecycleHooks;\n        this.sourceSpan = sourceSpan;\n        this.isModule = isModule;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ProviderAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        // No visit method in the visitor for now...\n        return null;\n    };\n    return ProviderAst;\n}());\n/**\n * A provider declared on an element\n */\nexport { ProviderAst };\nfunction ProviderAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProviderAst.prototype.token;\n    /** @type {?} */\n    ProviderAst.prototype.multiProvider;\n    /** @type {?} */\n    ProviderAst.prototype.eager;\n    /** @type {?} */\n    ProviderAst.prototype.providers;\n    /** @type {?} */\n    ProviderAst.prototype.providerType;\n    /** @type {?} */\n    ProviderAst.prototype.lifecycleHooks;\n    /** @type {?} */\n    ProviderAst.prototype.sourceSpan;\n    /** @type {?} */\n    ProviderAst.prototype.isModule;\n}\n/** @enum {number} */\nvar ProviderAstType = {\n    PublicService: 0,\n    PrivateService: 1,\n    Component: 2,\n    Directive: 3,\n    Builtin: 4,\n};\nexport { ProviderAstType };\nProviderAstType[ProviderAstType.PublicService] = \"PublicService\";\nProviderAstType[ProviderAstType.PrivateService] = \"PrivateService\";\nProviderAstType[ProviderAstType.Component] = \"Component\";\nProviderAstType[ProviderAstType.Directive] = \"Directive\";\nProviderAstType[ProviderAstType.Builtin] = \"Builtin\";\n/**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nvar /**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nNgContentAst = /** @class */ (function () {\n    function NgContentAst(index, ngContentIndex, sourceSpan) {\n        this.index = index;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    NgContentAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitNgContent(this, context);\n    };\n    return NgContentAst;\n}());\n/**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nexport { NgContentAst };\nfunction NgContentAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgContentAst.prototype.index;\n    /** @type {?} */\n    NgContentAst.prototype.ngContentIndex;\n    /** @type {?} */\n    NgContentAst.prototype.sourceSpan;\n}\n/** @enum {number} */\nvar PropertyBindingType = {\n    /**\n       * A normal binding to a property (e.g. `[property]=\"expression\"`).\n       */\n    Property: 0,\n    /**\n       * A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n       */\n    Attribute: 1,\n    /**\n       * A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n       */\n    Class: 2,\n    /**\n       * A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n       */\n    Style: 3,\n    /**\n       * A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n       */\n    Animation: 4,\n};\nexport { PropertyBindingType };\nPropertyBindingType[PropertyBindingType.Property] = \"Property\";\nPropertyBindingType[PropertyBindingType.Attribute] = \"Attribute\";\nPropertyBindingType[PropertyBindingType.Class] = \"Class\";\nPropertyBindingType[PropertyBindingType.Style] = \"Style\";\nPropertyBindingType[PropertyBindingType.Animation] = \"Animation\";\n/**\n * @record\n */\nexport function QueryMatch() { }\nfunction QueryMatch_tsickle_Closure_declarations() {\n    /** @type {?} */\n    QueryMatch.prototype.queryId;\n    /** @type {?} */\n    QueryMatch.prototype.value;\n}\n/**\n * A visitor for {\\@link TemplateAst} trees that will process each node.\n * @record\n */\nexport function TemplateAstVisitor() { }\nfunction TemplateAstVisitor_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    TemplateAstVisitor.prototype.visit;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitNgContent;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitEmbeddedTemplate;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitElement;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitReference;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitVariable;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitEvent;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitElementProperty;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitAttr;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitBoundText;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitText;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitDirective;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitDirectiveProperty;\n}\n/**\n * A visitor that accepts each node but doesn't do anything. It is intended to be used\n * as the base class for a visitor that is only interested in a subset of the node types.\n */\nvar /**\n * A visitor that accepts each node but doesn't do anything. It is intended to be used\n * as the base class for a visitor that is only interested in a subset of the node types.\n */\nNullTemplateVisitor = /** @class */ (function () {\n    function NullTemplateVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitNgContent = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitEmbeddedTemplate = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitElement = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitReference = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitVariable = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitEvent = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitElementProperty = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitAttr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitBoundText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitDirective = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitDirectiveProperty = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    return NullTemplateVisitor;\n}());\n/**\n * A visitor that accepts each node but doesn't do anything. It is intended to be used\n * as the base class for a visitor that is only interested in a subset of the node types.\n */\nexport { NullTemplateVisitor };\n/**\n * Base class that can be used to build a visitor that visits each node\n * in an template ast recursively.\n */\nvar /**\n * Base class that can be used to build a visitor that visits each node\n * in an template ast recursively.\n */\nRecursiveTemplateAstVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(RecursiveTemplateAstVisitor, _super);\n    function RecursiveTemplateAstVisitor() {\n        return _super.call(this) || this;\n    }\n    // Nodes with children\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveTemplateAstVisitor.prototype.visitEmbeddedTemplate = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitChildren(context, function (visit) {\n            visit(ast.attrs);\n            visit(ast.references);\n            visit(ast.variables);\n            visit(ast.directives);\n            visit(ast.providers);\n            visit(ast.children);\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveTemplateAstVisitor.prototype.visitElement = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitChildren(context, function (visit) {\n            visit(ast.attrs);\n            visit(ast.inputs);\n            visit(ast.outputs);\n            visit(ast.references);\n            visit(ast.directives);\n            visit(ast.providers);\n            visit(ast.children);\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveTemplateAstVisitor.prototype.visitDirective = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitChildren(context, function (visit) {\n            visit(ast.inputs);\n            visit(ast.hostProperties);\n            visit(ast.hostEvents);\n        });\n    };\n    /**\n     * @template T\n     * @param {?} context\n     * @param {?} cb\n     * @return {?}\n     */\n    RecursiveTemplateAstVisitor.prototype.visitChildren = /**\n     * @template T\n     * @param {?} context\n     * @param {?} cb\n     * @return {?}\n     */\n    function (context, cb) {\n        var /** @type {?} */ results = [];\n        var /** @type {?} */ t = this;\n        /**\n         * @template T\n         * @param {?} children\n         * @return {?}\n         */\n        function visit(children) {\n            if (children && children.length)\n                results.push(templateVisitAll(t, children, context));\n        }\n        cb(visit);\n        return [].concat.apply([], results);\n    };\n    return RecursiveTemplateAstVisitor;\n}(NullTemplateVisitor));\n/**\n * Base class that can be used to build a visitor that visits each node\n * in an template ast recursively.\n */\nexport { RecursiveTemplateAstVisitor };\n/**\n * Visit every node in a list of {\\@link TemplateAst}s with the given {\\@link TemplateAstVisitor}.\n * @param {?} visitor\n * @param {?} asts\n * @param {?=} context\n * @return {?}\n */\nexport function templateVisitAll(visitor, asts, context) {\n    if (context === void 0) { context = null; }\n    var /** @type {?} */ result = [];\n    var /** @type {?} */ visit = visitor.visit ?\n        function (ast) { return ((visitor.visit))(ast, context) || ast.visit(visitor, context); } :\n        function (ast) { return ast.visit(visitor, context); };\n    asts.forEach(function (ast) {\n        var /** @type {?} */ astResult = visit(ast);\n        if (astResult) {\n            result.push(astResult);\n        }\n    });\n    return result;\n}\n//# sourceMappingURL=template_ast.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewEncapsulation } from './core';\nimport { noUndefined } from './util';\nvar CompilerConfig = /** @class */ (function () {\n    function CompilerConfig(_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.defaultEncapsulation, defaultEncapsulation = _c === void 0 ? ViewEncapsulation.Emulated : _c, _d = _b.useJit, useJit = _d === void 0 ? true : _d, _e = _b.jitDevMode, jitDevMode = _e === void 0 ? false : _e, _f = _b.missingTranslation, missingTranslation = _f === void 0 ? null : _f, preserveWhitespaces = _b.preserveWhitespaces, strictInjectionParameters = _b.strictInjectionParameters;\n        this.defaultEncapsulation = defaultEncapsulation;\n        this.useJit = !!useJit;\n        this.jitDevMode = !!jitDevMode;\n        this.missingTranslation = missingTranslation;\n        this.preserveWhitespaces = preserveWhitespacesDefault(noUndefined(preserveWhitespaces));\n        this.strictInjectionParameters = strictInjectionParameters === true;\n    }\n    return CompilerConfig;\n}());\nexport { CompilerConfig };\nfunction CompilerConfig_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompilerConfig.prototype.defaultEncapsulation;\n    /** @type {?} */\n    CompilerConfig.prototype.useJit;\n    /** @type {?} */\n    CompilerConfig.prototype.jitDevMode;\n    /** @type {?} */\n    CompilerConfig.prototype.missingTranslation;\n    /** @type {?} */\n    CompilerConfig.prototype.preserveWhitespaces;\n    /** @type {?} */\n    CompilerConfig.prototype.strictInjectionParameters;\n}\n/**\n * @param {?} preserveWhitespacesOption\n * @param {?=} defaultSetting\n * @return {?}\n */\nexport function preserveWhitespacesDefault(preserveWhitespacesOption, defaultSetting) {\n    if (defaultSetting === void 0) { defaultSetting = false; }\n    return preserveWhitespacesOption === null ? defaultSetting : preserveWhitespacesOption;\n}\n//# sourceMappingURL=config.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A token representing the a reference to a static type.\n *\n * This token is unique for a filePath and name and can be used as a hash table key.\n */\nvar /**\n * A token representing the a reference to a static type.\n *\n * This token is unique for a filePath and name and can be used as a hash table key.\n */\nStaticSymbol = /** @class */ (function () {\n    function StaticSymbol(filePath, name, members) {\n        this.filePath = filePath;\n        this.name = name;\n        this.members = members;\n    }\n    /**\n     * @return {?}\n     */\n    StaticSymbol.prototype.assertNoMembers = /**\n     * @return {?}\n     */\n    function () {\n        if (this.members.length) {\n            throw new Error(\"Illegal state: symbol without members expected, but got \" + JSON.stringify(this) + \".\");\n        }\n    };\n    return StaticSymbol;\n}());\n/**\n * A token representing the a reference to a static type.\n *\n * This token is unique for a filePath and name and can be used as a hash table key.\n */\nexport { StaticSymbol };\nfunction StaticSymbol_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StaticSymbol.prototype.filePath;\n    /** @type {?} */\n    StaticSymbol.prototype.name;\n    /** @type {?} */\n    StaticSymbol.prototype.members;\n}\n/**\n * A cache of static symbol used by the StaticReflector to return the same symbol for the\n * same symbol values.\n */\nvar /**\n * A cache of static symbol used by the StaticReflector to return the same symbol for the\n * same symbol values.\n */\nStaticSymbolCache = /** @class */ (function () {\n    function StaticSymbolCache() {\n        this.cache = new Map();\n    }\n    /**\n     * @param {?} declarationFile\n     * @param {?} name\n     * @param {?=} members\n     * @return {?}\n     */\n    StaticSymbolCache.prototype.get = /**\n     * @param {?} declarationFile\n     * @param {?} name\n     * @param {?=} members\n     * @return {?}\n     */\n    function (declarationFile, name, members) {\n        members = members || [];\n        var /** @type {?} */ memberSuffix = members.length ? \".\" + members.join('.') : '';\n        var /** @type {?} */ key = \"\\\"\" + declarationFile + \"\\\".\" + name + memberSuffix;\n        var /** @type {?} */ result = this.cache.get(key);\n        if (!result) {\n            result = new StaticSymbol(declarationFile, name, members);\n            this.cache.set(key, result);\n        }\n        return result;\n    };\n    return StaticSymbolCache;\n}());\n/**\n * A cache of static symbol used by the StaticReflector to return the same symbol for the\n * same symbol values.\n */\nexport { StaticSymbolCache };\nfunction StaticSymbolCache_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StaticSymbolCache.prototype.cache;\n}\n//# sourceMappingURL=static_symbol.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticSymbol } from './aot/static_symbol';\nimport { splitAtColon, stringify } from './util';\n// group 0: \"[prop] or (event) or @trigger\"\n// group 1: \"prop\" from \"[prop]\"\n// group 2: \"event\" from \"(event)\"\n// group 3: \"@trigger\" from \"@trigger\"\nvar /** @type {?} */ HOST_REG_EXP = /^(?:(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\)))|(\\@[-\\w]+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nexport function sanitizeIdentifier(name) {\n    return name.replace(/\\W/g, '_');\n}\nvar /** @type {?} */ _anonymousTypeIndex = 0;\n/**\n * @param {?} compileIdentifier\n * @return {?}\n */\nexport function identifierName(compileIdentifier) {\n    if (!compileIdentifier || !compileIdentifier.reference) {\n        return null;\n    }\n    var /** @type {?} */ ref = compileIdentifier.reference;\n    if (ref instanceof StaticSymbol) {\n        return ref.name;\n    }\n    if (ref['__anonymousType']) {\n        return ref['__anonymousType'];\n    }\n    var /** @type {?} */ identifier = stringify(ref);\n    if (identifier.indexOf('(') >= 0) {\n        // case: anonymous functions!\n        identifier = \"anonymous_\" + _anonymousTypeIndex++;\n        ref['__anonymousType'] = identifier;\n    }\n    else {\n        identifier = sanitizeIdentifier(identifier);\n    }\n    return identifier;\n}\n/**\n * @param {?} compileIdentifier\n * @return {?}\n */\nexport function identifierModuleUrl(compileIdentifier) {\n    var /** @type {?} */ ref = compileIdentifier.reference;\n    if (ref instanceof StaticSymbol) {\n        return ref.filePath;\n    }\n    // Runtime type\n    return \"./\" + stringify(ref);\n}\n/**\n * @param {?} compType\n * @param {?} embeddedTemplateIndex\n * @return {?}\n */\nexport function viewClassName(compType, embeddedTemplateIndex) {\n    return \"View_\" + identifierName({ reference: compType }) + \"_\" + embeddedTemplateIndex;\n}\n/**\n * @param {?} compType\n * @return {?}\n */\nexport function rendererTypeName(compType) {\n    return \"RenderType_\" + identifierName({ reference: compType });\n}\n/**\n * @param {?} compType\n * @return {?}\n */\nexport function hostViewClassName(compType) {\n    return \"HostView_\" + identifierName({ reference: compType });\n}\n/**\n * @param {?} compType\n * @return {?}\n */\nexport function componentFactoryName(compType) {\n    return identifierName({ reference: compType }) + \"NgFactory\";\n}\n/**\n * @record\n */\nexport function ProxyClass() { }\nfunction ProxyClass_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProxyClass.prototype.setDelegate;\n}\n/**\n * @record\n */\nexport function CompileIdentifierMetadata() { }\nfunction CompileIdentifierMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileIdentifierMetadata.prototype.reference;\n}\n/** @enum {number} */\nvar CompileSummaryKind = {\n    Pipe: 0,\n    Directive: 1,\n    NgModule: 2,\n    Injectable: 3,\n};\nexport { CompileSummaryKind };\nCompileSummaryKind[CompileSummaryKind.Pipe] = \"Pipe\";\nCompileSummaryKind[CompileSummaryKind.Directive] = \"Directive\";\nCompileSummaryKind[CompileSummaryKind.NgModule] = \"NgModule\";\nCompileSummaryKind[CompileSummaryKind.Injectable] = \"Injectable\";\n/**\n * A CompileSummary is the data needed to use a directive / pipe / module\n * in other modules / components. However, this data is not enough to compile\n * the directive / module itself.\n * @record\n */\nexport function CompileTypeSummary() { }\nfunction CompileTypeSummary_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileTypeSummary.prototype.summaryKind;\n    /** @type {?} */\n    CompileTypeSummary.prototype.type;\n}\n/**\n * @record\n */\nexport function CompileDiDependencyMetadata() { }\nfunction CompileDiDependencyMetadata_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.isAttribute;\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.isSelf;\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.isHost;\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.isSkipSelf;\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.isOptional;\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.isValue;\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.token;\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.value;\n}\n/**\n * @record\n */\nexport function CompileProviderMetadata() { }\nfunction CompileProviderMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileProviderMetadata.prototype.token;\n    /** @type {?|undefined} */\n    CompileProviderMetadata.prototype.useClass;\n    /** @type {?|undefined} */\n    CompileProviderMetadata.prototype.useValue;\n    /** @type {?|undefined} */\n    CompileProviderMetadata.prototype.useExisting;\n    /** @type {?|undefined} */\n    CompileProviderMetadata.prototype.useFactory;\n    /** @type {?|undefined} */\n    CompileProviderMetadata.prototype.deps;\n    /** @type {?|undefined} */\n    CompileProviderMetadata.prototype.multi;\n}\n/**\n * @record\n */\nexport function CompileFactoryMetadata() { }\nfunction CompileFactoryMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileFactoryMetadata.prototype.diDeps;\n    /** @type {?} */\n    CompileFactoryMetadata.prototype.reference;\n}\n/**\n * @param {?} token\n * @return {?}\n */\nexport function tokenName(token) {\n    return token.value != null ? sanitizeIdentifier(token.value) : identifierName(token.identifier);\n}\n/**\n * @param {?} token\n * @return {?}\n */\nexport function tokenReference(token) {\n    if (token.identifier != null) {\n        return token.identifier.reference;\n    }\n    else {\n        return token.value;\n    }\n}\n/**\n * @record\n */\nexport function CompileTokenMetadata() { }\nfunction CompileTokenMetadata_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    CompileTokenMetadata.prototype.value;\n    /** @type {?|undefined} */\n    CompileTokenMetadata.prototype.identifier;\n}\n/**\n * @record\n */\nexport function CompileInjectableMetadata() { }\nfunction CompileInjectableMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileInjectableMetadata.prototype.symbol;\n    /** @type {?} */\n    CompileInjectableMetadata.prototype.type;\n    /** @type {?|undefined} */\n    CompileInjectableMetadata.prototype.providedIn;\n    /** @type {?|undefined} */\n    CompileInjectableMetadata.prototype.useValue;\n    /** @type {?|undefined} */\n    CompileInjectableMetadata.prototype.useClass;\n    /** @type {?|undefined} */\n    CompileInjectableMetadata.prototype.useExisting;\n    /** @type {?|undefined} */\n    CompileInjectableMetadata.prototype.useFactory;\n    /** @type {?|undefined} */\n    CompileInjectableMetadata.prototype.deps;\n}\n/**\n * Metadata regarding compilation of a type.\n * @record\n */\nexport function CompileTypeMetadata() { }\nfunction CompileTypeMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileTypeMetadata.prototype.diDeps;\n    /** @type {?} */\n    CompileTypeMetadata.prototype.lifecycleHooks;\n    /** @type {?} */\n    CompileTypeMetadata.prototype.reference;\n}\n/**\n * @record\n */\nexport function CompileQueryMetadata() { }\nfunction CompileQueryMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileQueryMetadata.prototype.selectors;\n    /** @type {?} */\n    CompileQueryMetadata.prototype.descendants;\n    /** @type {?} */\n    CompileQueryMetadata.prototype.first;\n    /** @type {?} */\n    CompileQueryMetadata.prototype.propertyName;\n    /** @type {?} */\n    CompileQueryMetadata.prototype.read;\n}\n/**\n * Metadata about a stylesheet\n */\nvar /**\n * Metadata about a stylesheet\n */\nCompileStylesheetMetadata = /** @class */ (function () {\n    function CompileStylesheetMetadata(_a) {\n        var _b = _a === void 0 ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls;\n        this.moduleUrl = moduleUrl || null;\n        this.styles = _normalizeArray(styles);\n        this.styleUrls = _normalizeArray(styleUrls);\n    }\n    return CompileStylesheetMetadata;\n}());\n/**\n * Metadata about a stylesheet\n */\nexport { CompileStylesheetMetadata };\nfunction CompileStylesheetMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileStylesheetMetadata.prototype.moduleUrl;\n    /** @type {?} */\n    CompileStylesheetMetadata.prototype.styles;\n    /** @type {?} */\n    CompileStylesheetMetadata.prototype.styleUrls;\n}\n/**\n * Summary Metadata regarding compilation of a template.\n * @record\n */\nexport function CompileTemplateSummary() { }\nfunction CompileTemplateSummary_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileTemplateSummary.prototype.ngContentSelectors;\n    /** @type {?} */\n    CompileTemplateSummary.prototype.encapsulation;\n}\n/**\n * Metadata regarding compilation of a template.\n */\nvar /**\n * Metadata regarding compilation of a template.\n */\nCompileTemplateMetadata = /** @class */ (function () {\n    function CompileTemplateMetadata(_a) {\n        var encapsulation = _a.encapsulation, template = _a.template, templateUrl = _a.templateUrl, htmlAst = _a.htmlAst, styles = _a.styles, styleUrls = _a.styleUrls, externalStylesheets = _a.externalStylesheets, animations = _a.animations, ngContentSelectors = _a.ngContentSelectors, interpolation = _a.interpolation, isInline = _a.isInline, preserveWhitespaces = _a.preserveWhitespaces;\n        this.encapsulation = encapsulation;\n        this.template = template;\n        this.templateUrl = templateUrl;\n        this.htmlAst = htmlAst;\n        this.styles = _normalizeArray(styles);\n        this.styleUrls = _normalizeArray(styleUrls);\n        this.externalStylesheets = _normalizeArray(externalStylesheets);\n        this.animations = animations ? flatten(animations) : [];\n        this.ngContentSelectors = ngContentSelectors || [];\n        if (interpolation && interpolation.length != 2) {\n            throw new Error(\"'interpolation' should have a start and an end symbol.\");\n        }\n        this.interpolation = interpolation;\n        this.isInline = isInline;\n        this.preserveWhitespaces = preserveWhitespaces;\n    }\n    /**\n     * @return {?}\n     */\n    CompileTemplateMetadata.prototype.toSummary = /**\n     * @return {?}\n     */\n    function () {\n        return {\n            ngContentSelectors: this.ngContentSelectors,\n            encapsulation: this.encapsulation,\n        };\n    };\n    return CompileTemplateMetadata;\n}());\n/**\n * Metadata regarding compilation of a template.\n */\nexport { CompileTemplateMetadata };\nfunction CompileTemplateMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.encapsulation;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.template;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.templateUrl;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.htmlAst;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.isInline;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.styles;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.styleUrls;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.externalStylesheets;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.animations;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.ngContentSelectors;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.interpolation;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.preserveWhitespaces;\n}\n/**\n * @record\n */\nexport function CompileEntryComponentMetadata() { }\nfunction CompileEntryComponentMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileEntryComponentMetadata.prototype.componentType;\n    /** @type {?} */\n    CompileEntryComponentMetadata.prototype.componentFactory;\n}\n/**\n * @record\n */\nexport function CompileDirectiveSummary() { }\nfunction CompileDirectiveSummary_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.type;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.isComponent;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.selector;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.exportAs;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.inputs;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.outputs;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.hostListeners;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.hostProperties;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.hostAttributes;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.providers;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.viewProviders;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.queries;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.guards;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.viewQueries;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.entryComponents;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.changeDetection;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.template;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.componentViewType;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.rendererType;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.componentFactory;\n}\n/**\n * Metadata regarding compilation of a directive.\n */\nvar /**\n * Metadata regarding compilation of a directive.\n */\nCompileDirectiveMetadata = /** @class */ (function () {\n    function CompileDirectiveMetadata(_a) {\n        var isHost = _a.isHost, type = _a.type, isComponent = _a.isComponent, selector = _a.selector, exportAs = _a.exportAs, changeDetection = _a.changeDetection, inputs = _a.inputs, outputs = _a.outputs, hostListeners = _a.hostListeners, hostProperties = _a.hostProperties, hostAttributes = _a.hostAttributes, providers = _a.providers, viewProviders = _a.viewProviders, queries = _a.queries, guards = _a.guards, viewQueries = _a.viewQueries, entryComponents = _a.entryComponents, template = _a.template, componentViewType = _a.componentViewType, rendererType = _a.rendererType, componentFactory = _a.componentFactory;\n        this.isHost = !!isHost;\n        this.type = type;\n        this.isComponent = isComponent;\n        this.selector = selector;\n        this.exportAs = exportAs;\n        this.changeDetection = changeDetection;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.hostListeners = hostListeners;\n        this.hostProperties = hostProperties;\n        this.hostAttributes = hostAttributes;\n        this.providers = _normalizeArray(providers);\n        this.viewProviders = _normalizeArray(viewProviders);\n        this.queries = _normalizeArray(queries);\n        this.guards = guards;\n        this.viewQueries = _normalizeArray(viewQueries);\n        this.entryComponents = _normalizeArray(entryComponents);\n        this.template = template;\n        this.componentViewType = componentViewType;\n        this.rendererType = rendererType;\n        this.componentFactory = componentFactory;\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    CompileDirectiveMetadata.create = /**\n     * @param {?} __0\n     * @return {?}\n     */\n    function (_a) {\n        var isHost = _a.isHost, type = _a.type, isComponent = _a.isComponent, selector = _a.selector, exportAs = _a.exportAs, changeDetection = _a.changeDetection, inputs = _a.inputs, outputs = _a.outputs, host = _a.host, providers = _a.providers, viewProviders = _a.viewProviders, queries = _a.queries, guards = _a.guards, viewQueries = _a.viewQueries, entryComponents = _a.entryComponents, template = _a.template, componentViewType = _a.componentViewType, rendererType = _a.rendererType, componentFactory = _a.componentFactory;\n        var /** @type {?} */ hostListeners = {};\n        var /** @type {?} */ hostProperties = {};\n        var /** @type {?} */ hostAttributes = {};\n        if (host != null) {\n            Object.keys(host).forEach(function (key) {\n                var /** @type {?} */ value = host[key];\n                var /** @type {?} */ matches = key.match(HOST_REG_EXP);\n                if (matches === null) {\n                    hostAttributes[key] = value;\n                }\n                else if (matches[1] != null) {\n                    hostProperties[matches[1]] = value;\n                }\n                else if (matches[2] != null) {\n                    hostListeners[matches[2]] = value;\n                }\n            });\n        }\n        var /** @type {?} */ inputsMap = {};\n        if (inputs != null) {\n            inputs.forEach(function (bindConfig) {\n                // canonical syntax: `dirProp: elProp`\n                // if there is no `:`, use dirProp = elProp\n                var /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n                inputsMap[parts[0]] = parts[1];\n            });\n        }\n        var /** @type {?} */ outputsMap = {};\n        if (outputs != null) {\n            outputs.forEach(function (bindConfig) {\n                // canonical syntax: `dirProp: elProp`\n                // if there is no `:`, use dirProp = elProp\n                var /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n                outputsMap[parts[0]] = parts[1];\n            });\n        }\n        return new CompileDirectiveMetadata({\n            isHost: isHost,\n            type: type,\n            isComponent: !!isComponent, selector: selector, exportAs: exportAs, changeDetection: changeDetection,\n            inputs: inputsMap,\n            outputs: outputsMap,\n            hostListeners: hostListeners,\n            hostProperties: hostProperties,\n            hostAttributes: hostAttributes,\n            providers: providers,\n            viewProviders: viewProviders,\n            queries: queries,\n            guards: guards,\n            viewQueries: viewQueries,\n            entryComponents: entryComponents,\n            template: template,\n            componentViewType: componentViewType,\n            rendererType: rendererType,\n            componentFactory: componentFactory,\n        });\n    };\n    /**\n     * @return {?}\n     */\n    CompileDirectiveMetadata.prototype.toSummary = /**\n     * @return {?}\n     */\n    function () {\n        return {\n            summaryKind: CompileSummaryKind.Directive,\n            type: this.type,\n            isComponent: this.isComponent,\n            selector: this.selector,\n            exportAs: this.exportAs,\n            inputs: this.inputs,\n            outputs: this.outputs,\n            hostListeners: this.hostListeners,\n            hostProperties: this.hostProperties,\n            hostAttributes: this.hostAttributes,\n            providers: this.providers,\n            viewProviders: this.viewProviders,\n            queries: this.queries,\n            guards: this.guards,\n            viewQueries: this.viewQueries,\n            entryComponents: this.entryComponents,\n            changeDetection: this.changeDetection,\n            template: this.template && this.template.toSummary(),\n            componentViewType: this.componentViewType,\n            rendererType: this.rendererType,\n            componentFactory: this.componentFactory\n        };\n    };\n    return CompileDirectiveMetadata;\n}());\n/**\n * Metadata regarding compilation of a directive.\n */\nexport { CompileDirectiveMetadata };\nfunction CompileDirectiveMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.isHost;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.type;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.isComponent;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.selector;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.exportAs;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.changeDetection;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.inputs;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.outputs;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.hostListeners;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.hostProperties;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.hostAttributes;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.providers;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.viewProviders;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.queries;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.guards;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.viewQueries;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.entryComponents;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.template;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.componentViewType;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.rendererType;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.componentFactory;\n}\n/**\n * @record\n */\nexport function CompilePipeSummary() { }\nfunction CompilePipeSummary_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompilePipeSummary.prototype.type;\n    /** @type {?} */\n    CompilePipeSummary.prototype.name;\n    /** @type {?} */\n    CompilePipeSummary.prototype.pure;\n}\nvar CompilePipeMetadata = /** @class */ (function () {\n    function CompilePipeMetadata(_a) {\n        var type = _a.type, name = _a.name, pure = _a.pure;\n        this.type = type;\n        this.name = name;\n        this.pure = !!pure;\n    }\n    /**\n     * @return {?}\n     */\n    CompilePipeMetadata.prototype.toSummary = /**\n     * @return {?}\n     */\n    function () {\n        return {\n            summaryKind: CompileSummaryKind.Pipe,\n            type: this.type,\n            name: this.name,\n            pure: this.pure\n        };\n    };\n    return CompilePipeMetadata;\n}());\nexport { CompilePipeMetadata };\nfunction CompilePipeMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompilePipeMetadata.prototype.type;\n    /** @type {?} */\n    CompilePipeMetadata.prototype.name;\n    /** @type {?} */\n    CompilePipeMetadata.prototype.pure;\n}\n/**\n * @record\n */\nexport function CompileNgModuleSummary() { }\nfunction CompileNgModuleSummary_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileNgModuleSummary.prototype.type;\n    /** @type {?} */\n    CompileNgModuleSummary.prototype.exportedDirectives;\n    /** @type {?} */\n    CompileNgModuleSummary.prototype.exportedPipes;\n    /** @type {?} */\n    CompileNgModuleSummary.prototype.entryComponents;\n    /** @type {?} */\n    CompileNgModuleSummary.prototype.providers;\n    /** @type {?} */\n    CompileNgModuleSummary.prototype.modules;\n}\nvar CompileShallowModuleMetadata = /** @class */ (function () {\n    function CompileShallowModuleMetadata() {\n    }\n    return CompileShallowModuleMetadata;\n}());\nexport { CompileShallowModuleMetadata };\nfunction CompileShallowModuleMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileShallowModuleMetadata.prototype.type;\n    /** @type {?} */\n    CompileShallowModuleMetadata.prototype.rawExports;\n    /** @type {?} */\n    CompileShallowModuleMetadata.prototype.rawImports;\n    /** @type {?} */\n    CompileShallowModuleMetadata.prototype.rawProviders;\n}\n/**\n * Metadata regarding compilation of a module.\n */\nvar /**\n * Metadata regarding compilation of a module.\n */\nCompileNgModuleMetadata = /** @class */ (function () {\n    function CompileNgModuleMetadata(_a) {\n        var type = _a.type, providers = _a.providers, declaredDirectives = _a.declaredDirectives, exportedDirectives = _a.exportedDirectives, declaredPipes = _a.declaredPipes, exportedPipes = _a.exportedPipes, entryComponents = _a.entryComponents, bootstrapComponents = _a.bootstrapComponents, importedModules = _a.importedModules, exportedModules = _a.exportedModules, schemas = _a.schemas, transitiveModule = _a.transitiveModule, id = _a.id;\n        this.type = type || null;\n        this.declaredDirectives = _normalizeArray(declaredDirectives);\n        this.exportedDirectives = _normalizeArray(exportedDirectives);\n        this.declaredPipes = _normalizeArray(declaredPipes);\n        this.exportedPipes = _normalizeArray(exportedPipes);\n        this.providers = _normalizeArray(providers);\n        this.entryComponents = _normalizeArray(entryComponents);\n        this.bootstrapComponents = _normalizeArray(bootstrapComponents);\n        this.importedModules = _normalizeArray(importedModules);\n        this.exportedModules = _normalizeArray(exportedModules);\n        this.schemas = _normalizeArray(schemas);\n        this.id = id || null;\n        this.transitiveModule = transitiveModule || null;\n    }\n    /**\n     * @return {?}\n     */\n    CompileNgModuleMetadata.prototype.toSummary = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ module = /** @type {?} */ ((this.transitiveModule));\n        return {\n            summaryKind: CompileSummaryKind.NgModule,\n            type: this.type,\n            entryComponents: module.entryComponents,\n            providers: module.providers,\n            modules: module.modules,\n            exportedDirectives: module.exportedDirectives,\n            exportedPipes: module.exportedPipes\n        };\n    };\n    return CompileNgModuleMetadata;\n}());\n/**\n * Metadata regarding compilation of a module.\n */\nexport { CompileNgModuleMetadata };\nfunction CompileNgModuleMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.type;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.declaredDirectives;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.exportedDirectives;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.declaredPipes;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.exportedPipes;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.entryComponents;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.bootstrapComponents;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.providers;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.importedModules;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.exportedModules;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.schemas;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.id;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.transitiveModule;\n}\nvar TransitiveCompileNgModuleMetadata = /** @class */ (function () {\n    function TransitiveCompileNgModuleMetadata() {\n        this.directivesSet = new Set();\n        this.directives = [];\n        this.exportedDirectivesSet = new Set();\n        this.exportedDirectives = [];\n        this.pipesSet = new Set();\n        this.pipes = [];\n        this.exportedPipesSet = new Set();\n        this.exportedPipes = [];\n        this.modulesSet = new Set();\n        this.modules = [];\n        this.entryComponentsSet = new Set();\n        this.entryComponents = [];\n        this.providers = [];\n    }\n    /**\n     * @param {?} provider\n     * @param {?} module\n     * @return {?}\n     */\n    TransitiveCompileNgModuleMetadata.prototype.addProvider = /**\n     * @param {?} provider\n     * @param {?} module\n     * @return {?}\n     */\n    function (provider, module) {\n        this.providers.push({ provider: provider, module: module });\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    TransitiveCompileNgModuleMetadata.prototype.addDirective = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        if (!this.directivesSet.has(id.reference)) {\n            this.directivesSet.add(id.reference);\n            this.directives.push(id);\n        }\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    TransitiveCompileNgModuleMetadata.prototype.addExportedDirective = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        if (!this.exportedDirectivesSet.has(id.reference)) {\n            this.exportedDirectivesSet.add(id.reference);\n            this.exportedDirectives.push(id);\n        }\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    TransitiveCompileNgModuleMetadata.prototype.addPipe = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        if (!this.pipesSet.has(id.reference)) {\n            this.pipesSet.add(id.reference);\n            this.pipes.push(id);\n        }\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    TransitiveCompileNgModuleMetadata.prototype.addExportedPipe = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        if (!this.exportedPipesSet.has(id.reference)) {\n            this.exportedPipesSet.add(id.reference);\n            this.exportedPipes.push(id);\n        }\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    TransitiveCompileNgModuleMetadata.prototype.addModule = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        if (!this.modulesSet.has(id.reference)) {\n            this.modulesSet.add(id.reference);\n            this.modules.push(id);\n        }\n    };\n    /**\n     * @param {?} ec\n     * @return {?}\n     */\n    TransitiveCompileNgModuleMetadata.prototype.addEntryComponent = /**\n     * @param {?} ec\n     * @return {?}\n     */\n    function (ec) {\n        if (!this.entryComponentsSet.has(ec.componentType)) {\n            this.entryComponentsSet.add(ec.componentType);\n            this.entryComponents.push(ec);\n        }\n    };\n    return TransitiveCompileNgModuleMetadata;\n}());\nexport { TransitiveCompileNgModuleMetadata };\nfunction TransitiveCompileNgModuleMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.directivesSet;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.directives;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.exportedDirectivesSet;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.exportedDirectives;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.pipesSet;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.pipes;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.exportedPipesSet;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.exportedPipes;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.modulesSet;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.modules;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.entryComponentsSet;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.entryComponents;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.providers;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction _normalizeArray(obj) {\n    return obj || [];\n}\nvar ProviderMeta = /** @class */ (function () {\n    function ProviderMeta(token, _a) {\n        var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;\n        this.token = token;\n        this.useClass = useClass || null;\n        this.useValue = useValue;\n        this.useExisting = useExisting;\n        this.useFactory = useFactory || null;\n        this.dependencies = deps || null;\n        this.multi = !!multi;\n    }\n    return ProviderMeta;\n}());\nexport { ProviderMeta };\nfunction ProviderMeta_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProviderMeta.prototype.token;\n    /** @type {?} */\n    ProviderMeta.prototype.useClass;\n    /** @type {?} */\n    ProviderMeta.prototype.useValue;\n    /** @type {?} */\n    ProviderMeta.prototype.useExisting;\n    /** @type {?} */\n    ProviderMeta.prototype.useFactory;\n    /** @type {?} */\n    ProviderMeta.prototype.dependencies;\n    /** @type {?} */\n    ProviderMeta.prototype.multi;\n}\n/**\n * @template T\n * @param {?} list\n * @return {?}\n */\nexport function flatten(list) {\n    return list.reduce(function (flat, item) {\n        var /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;\n        return (/** @type {?} */ (flat)).concat(flatItem);\n    }, []);\n}\n/**\n * @param {?} url\n * @return {?}\n */\nfunction jitSourceUrl(url) {\n    // Note: We need 3 \"/\" so that ng shows up as a separate domain\n    // in the chrome dev tools.\n    return url.replace(/(\\w+:\\/\\/[\\w:-]+)?(\\/+)?/, 'ng:///');\n}\n/**\n * @param {?} ngModuleType\n * @param {?} compMeta\n * @param {?} templateMeta\n * @return {?}\n */\nexport function templateSourceUrl(ngModuleType, compMeta, templateMeta) {\n    var /** @type {?} */ url;\n    if (templateMeta.isInline) {\n        if (compMeta.type.reference instanceof StaticSymbol) {\n            // Note: a .ts file might contain multiple components with inline templates,\n            // so we need to give them unique urls, as these will be used for sourcemaps.\n            url = compMeta.type.reference.filePath + \".\" + compMeta.type.reference.name + \".html\";\n        }\n        else {\n            url = identifierName(ngModuleType) + \"/\" + identifierName(compMeta.type) + \".html\";\n        }\n    }\n    else {\n        url = /** @type {?} */ ((templateMeta.templateUrl));\n    }\n    return compMeta.type.reference instanceof StaticSymbol ? url : jitSourceUrl(url);\n}\n/**\n * @param {?} meta\n * @param {?} id\n * @return {?}\n */\nexport function sharedStylesheetJitUrl(meta, id) {\n    var /** @type {?} */ pathParts = /** @type {?} */ ((meta.moduleUrl)).split(/\\/\\\\/g);\n    var /** @type {?} */ baseName = pathParts[pathParts.length - 1];\n    return jitSourceUrl(\"css/\" + id + baseName + \".ngstyle.js\");\n}\n/**\n * @param {?} moduleMeta\n * @return {?}\n */\nexport function ngModuleJitUrl(moduleMeta) {\n    return jitSourceUrl(identifierName(moduleMeta.type) + \"/module.ngfactory.js\");\n}\n/**\n * @param {?} ngModuleType\n * @param {?} compMeta\n * @return {?}\n */\nexport function templateJitUrl(ngModuleType, compMeta) {\n    return jitSourceUrl(identifierName(ngModuleType) + \"/\" + identifierName(compMeta.type) + \".ngfactory.js\");\n}\n//# sourceMappingURL=compile_metadata.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A path is an ordered set of elements. Typically a path is to  a\n * particular offset in a source file. The head of the list is the top\n * most node. The tail is the node that contains the offset directly.\n *\n * For example, the expression `a + b + c` might have an ast that looks\n * like:\n *     +\n *    / \\\n *   a   +\n *      / \\\n *     b   c\n *\n * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,\n * 'c' at 9-10]` and the path the node at offset 1 would be\n * `['+' at 1-10, 'a' at 1-2]`.\n * @template T\n */\nvar /**\n * A path is an ordered set of elements. Typically a path is to  a\n * particular offset in a source file. The head of the list is the top\n * most node. The tail is the node that contains the offset directly.\n *\n * For example, the expression `a + b + c` might have an ast that looks\n * like:\n *     +\n *    / \\\n *   a   +\n *      / \\\n *     b   c\n *\n * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,\n * 'c' at 9-10]` and the path the node at offset 1 would be\n * `['+' at 1-10, 'a' at 1-2]`.\n * @template T\n */\nAstPath = /** @class */ (function () {\n    function AstPath(path, position) {\n        if (position === void 0) { position = -1; }\n        this.path = path;\n        this.position = position;\n    }\n    Object.defineProperty(AstPath.prototype, \"empty\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return !this.path || !this.path.length; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AstPath.prototype, \"head\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.path[0]; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AstPath.prototype, \"tail\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.path[this.path.length - 1]; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    AstPath.prototype.parentOf = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        return node && this.path[this.path.indexOf(node) - 1];\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    AstPath.prototype.childOf = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { return this.path[this.path.indexOf(node) + 1]; };\n    /**\n     * @template N\n     * @param {?} ctor\n     * @return {?}\n     */\n    AstPath.prototype.first = /**\n     * @template N\n     * @param {?} ctor\n     * @return {?}\n     */\n    function (ctor) {\n        for (var /** @type {?} */ i = this.path.length - 1; i >= 0; i--) {\n            var /** @type {?} */ item = this.path[i];\n            if (item instanceof ctor)\n                return /** @type {?} */ (item);\n        }\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    AstPath.prototype.push = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { this.path.push(node); };\n    /**\n     * @return {?}\n     */\n    AstPath.prototype.pop = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((this.path.pop())); };\n    return AstPath;\n}());\n/**\n * A path is an ordered set of elements. Typically a path is to  a\n * particular offset in a source file. The head of the list is the top\n * most node. The tail is the node that contains the offset directly.\n *\n * For example, the expression `a + b + c` might have an ast that looks\n * like:\n *     +\n *    / \\\n *   a   +\n *      / \\\n *     b   c\n *\n * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,\n * 'c' at 9-10]` and the path the node at offset 1 would be\n * `['+' at 1-10, 'a' at 1-2]`.\n * @template T\n */\nexport { AstPath };\nfunction AstPath_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AstPath.prototype.path;\n    /** @type {?} */\n    AstPath.prototype.position;\n}\n//# sourceMappingURL=ast_path.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { AstPath } from '../ast_path';\n/**\n * @record\n */\nexport function Node() { }\nfunction Node_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Node.prototype.sourceSpan;\n    /** @type {?} */\n    Node.prototype.visit;\n}\nvar Text = /** @class */ (function () {\n    function Text(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Text.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitText(this, context); };\n    return Text;\n}());\nexport { Text };\nfunction Text_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Text.prototype.value;\n    /** @type {?} */\n    Text.prototype.sourceSpan;\n}\nvar Expansion = /** @class */ (function () {\n    function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {\n        this.switchValue = switchValue;\n        this.type = type;\n        this.cases = cases;\n        this.sourceSpan = sourceSpan;\n        this.switchValueSourceSpan = switchValueSourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Expansion.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitExpansion(this, context); };\n    return Expansion;\n}());\nexport { Expansion };\nfunction Expansion_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Expansion.prototype.switchValue;\n    /** @type {?} */\n    Expansion.prototype.type;\n    /** @type {?} */\n    Expansion.prototype.cases;\n    /** @type {?} */\n    Expansion.prototype.sourceSpan;\n    /** @type {?} */\n    Expansion.prototype.switchValueSourceSpan;\n}\nvar ExpansionCase = /** @class */ (function () {\n    function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {\n        this.value = value;\n        this.expression = expression;\n        this.sourceSpan = sourceSpan;\n        this.valueSourceSpan = valueSourceSpan;\n        this.expSourceSpan = expSourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ExpansionCase.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitExpansionCase(this, context); };\n    return ExpansionCase;\n}());\nexport { ExpansionCase };\nfunction ExpansionCase_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExpansionCase.prototype.value;\n    /** @type {?} */\n    ExpansionCase.prototype.expression;\n    /** @type {?} */\n    ExpansionCase.prototype.sourceSpan;\n    /** @type {?} */\n    ExpansionCase.prototype.valueSourceSpan;\n    /** @type {?} */\n    ExpansionCase.prototype.expSourceSpan;\n}\nvar Attribute = /** @class */ (function () {\n    function Attribute(name, value, sourceSpan, valueSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.valueSpan = valueSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Attribute.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitAttribute(this, context); };\n    return Attribute;\n}());\nexport { Attribute };\nfunction Attribute_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Attribute.prototype.name;\n    /** @type {?} */\n    Attribute.prototype.value;\n    /** @type {?} */\n    Attribute.prototype.sourceSpan;\n    /** @type {?} */\n    Attribute.prototype.valueSpan;\n}\nvar Element = /** @class */ (function () {\n    function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {\n        if (startSourceSpan === void 0) { startSourceSpan = null; }\n        if (endSourceSpan === void 0) { endSourceSpan = null; }\n        this.name = name;\n        this.attrs = attrs;\n        this.children = children;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Element.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitElement(this, context); };\n    return Element;\n}());\nexport { Element };\nfunction Element_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Element.prototype.name;\n    /** @type {?} */\n    Element.prototype.attrs;\n    /** @type {?} */\n    Element.prototype.children;\n    /** @type {?} */\n    Element.prototype.sourceSpan;\n    /** @type {?} */\n    Element.prototype.startSourceSpan;\n    /** @type {?} */\n    Element.prototype.endSourceSpan;\n}\nvar Comment = /** @class */ (function () {\n    function Comment(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Comment.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitComment(this, context); };\n    return Comment;\n}());\nexport { Comment };\nfunction Comment_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Comment.prototype.value;\n    /** @type {?} */\n    Comment.prototype.sourceSpan;\n}\n/**\n * @record\n */\nexport function Visitor() { }\nfunction Visitor_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Visitor.prototype.visit;\n    /** @type {?} */\n    Visitor.prototype.visitElement;\n    /** @type {?} */\n    Visitor.prototype.visitAttribute;\n    /** @type {?} */\n    Visitor.prototype.visitText;\n    /** @type {?} */\n    Visitor.prototype.visitComment;\n    /** @type {?} */\n    Visitor.prototype.visitExpansion;\n    /** @type {?} */\n    Visitor.prototype.visitExpansionCase;\n}\n/**\n * @param {?} visitor\n * @param {?} nodes\n * @param {?=} context\n * @return {?}\n */\nexport function visitAll(visitor, nodes, context) {\n    if (context === void 0) { context = null; }\n    var /** @type {?} */ result = [];\n    var /** @type {?} */ visit = visitor.visit ?\n        function (ast) { return ((visitor.visit))(ast, context) || ast.visit(visitor, context); } :\n        function (ast) { return ast.visit(visitor, context); };\n    nodes.forEach(function (ast) {\n        var /** @type {?} */ astResult = visit(ast);\n        if (astResult) {\n            result.push(astResult);\n        }\n    });\n    return result;\n}\nvar RecursiveVisitor = /** @class */ (function () {\n    function RecursiveVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitElement = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        this.visitChildren(context, function (visit) {\n            visit(ast.attrs);\n            visit(ast.children);\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitAttribute = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitComment = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitExpansion = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitChildren(context, function (visit) { visit(ast.cases); });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitExpansionCase = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @template T\n     * @param {?} context\n     * @param {?} cb\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitChildren = /**\n     * @template T\n     * @param {?} context\n     * @param {?} cb\n     * @return {?}\n     */\n    function (context, cb) {\n        var /** @type {?} */ results = [];\n        var /** @type {?} */ t = this;\n        /**\n         * @template T\n         * @param {?} children\n         * @return {?}\n         */\n        function visit(children) {\n            if (children)\n                results.push(visitAll(t, children, context));\n        }\n        cb(visit);\n        return [].concat.apply([], results);\n    };\n    return RecursiveVisitor;\n}());\nexport { RecursiveVisitor };\n/**\n * @param {?} ast\n * @return {?}\n */\nfunction spanOf(ast) {\n    var /** @type {?} */ start = ast.sourceSpan.start.offset;\n    var /** @type {?} */ end = ast.sourceSpan.end.offset;\n    if (ast instanceof Element) {\n        if (ast.endSourceSpan) {\n            end = ast.endSourceSpan.end.offset;\n        }\n        else if (ast.children && ast.children.length) {\n            end = spanOf(ast.children[ast.children.length - 1]).end;\n        }\n    }\n    return { start: start, end: end };\n}\n/**\n * @param {?} nodes\n * @param {?} position\n * @return {?}\n */\nexport function findNode(nodes, position) {\n    var /** @type {?} */ path = [];\n    var /** @type {?} */ visitor = new /** @class */ (function (_super) {\n        tslib_1.__extends(class_1, _super);\n        function class_1() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * @param {?} ast\n         * @param {?} context\n         * @return {?}\n         */\n        class_1.prototype.visit = /**\n         * @param {?} ast\n         * @param {?} context\n         * @return {?}\n         */\n        function (ast, context) {\n            var /** @type {?} */ span = spanOf(ast);\n            if (span.start <= position && position < span.end) {\n                path.push(ast);\n            }\n            else {\n                // Returning a value here will result in the children being skipped.\n                return true;\n            }\n        };\n        return class_1;\n    }(RecursiveVisitor));\n    visitAll(visitor, nodes);\n    return new AstPath(path, position);\n}\n//# sourceMappingURL=ast.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} identifier\n * @param {?} value\n * @return {?}\n */\nexport function assertArrayOfStrings(identifier, value) {\n    if (value == null) {\n        return;\n    }\n    if (!Array.isArray(value)) {\n        throw new Error(\"Expected '\" + identifier + \"' to be an array of strings.\");\n    }\n    for (var /** @type {?} */ i = 0; i < value.length; i += 1) {\n        if (typeof value[i] !== 'string') {\n            throw new Error(\"Expected '\" + identifier + \"' to be an array of strings.\");\n        }\n    }\n}\nvar /** @type {?} */ INTERPOLATION_BLACKLIST_REGEXPS = [\n    /^\\s*$/,\n    /[<>]/,\n    /^[{}]$/,\n    /&(#|[a-z])/i,\n    /^\\/\\//,\n];\n/**\n * @param {?} identifier\n * @param {?} value\n * @return {?}\n */\nexport function assertInterpolationSymbols(identifier, value) {\n    if (value != null && !(Array.isArray(value) && value.length == 2)) {\n        throw new Error(\"Expected '\" + identifier + \"' to be an array, [start, end].\");\n    }\n    else if (value != null) {\n        var /** @type {?} */ start_1 = /** @type {?} */ (value[0]);\n        var /** @type {?} */ end_1 = /** @type {?} */ (value[1]);\n        // black list checking\n        INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {\n            if (regexp.test(start_1) || regexp.test(end_1)) {\n                throw new Error(\"['\" + start_1 + \"', '\" + end_1 + \"'] contains unusable interpolation symbol.\");\n            }\n        });\n    }\n}\n//# sourceMappingURL=assertions.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertInterpolationSymbols } from '../assertions';\nvar InterpolationConfig = /** @class */ (function () {\n    function InterpolationConfig(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n    /**\n     * @param {?} markers\n     * @return {?}\n     */\n    InterpolationConfig.fromArray = /**\n     * @param {?} markers\n     * @return {?}\n     */\n    function (markers) {\n        if (!markers) {\n            return DEFAULT_INTERPOLATION_CONFIG;\n        }\n        assertInterpolationSymbols('interpolation', markers);\n        return new InterpolationConfig(markers[0], markers[1]);\n    };\n    return InterpolationConfig;\n}());\nexport { InterpolationConfig };\nfunction InterpolationConfig_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InterpolationConfig.prototype.start;\n    /** @type {?} */\n    InterpolationConfig.prototype.end;\n}\nexport var /** @type {?} */ DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');\n//# sourceMappingURL=interpolation_config.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar StyleWithImports = /** @class */ (function () {\n    function StyleWithImports(style, styleUrls) {\n        this.style = style;\n        this.styleUrls = styleUrls;\n    }\n    return StyleWithImports;\n}());\nexport { StyleWithImports };\nfunction StyleWithImports_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StyleWithImports.prototype.style;\n    /** @type {?} */\n    StyleWithImports.prototype.styleUrls;\n}\n/**\n * @param {?} url\n * @return {?}\n */\nexport function isStyleUrlResolvable(url) {\n    if (url == null || url.length === 0 || url[0] == '/')\n        return false;\n    var /** @type {?} */ schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);\n    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';\n}\n/**\n * Rewrites stylesheets by resolving and removing the \\@import urls that\n * are either relative or don't have a `package:` scheme\n * @param {?} resolver\n * @param {?} baseUrl\n * @param {?} cssText\n * @return {?}\n */\nexport function extractStyleUrls(resolver, baseUrl, cssText) {\n    var /** @type {?} */ foundUrls = [];\n    var /** @type {?} */ modifiedCssText = cssText.replace(CSS_STRIPPABLE_COMMENT_REGEXP, '')\n        .replace(CSS_IMPORT_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        var /** @type {?} */ url = m[1] || m[2];\n        if (!isStyleUrlResolvable(url)) {\n            // Do not attempt to resolve non-package absolute URLs with URI\n            // scheme\n            return m[0];\n        }\n        foundUrls.push(resolver.resolve(baseUrl, url));\n        return '';\n    });\n    return new StyleWithImports(modifiedCssText, foundUrls);\n}\nvar /** @type {?} */ CSS_IMPORT_REGEXP = /@import\\s+(?:url\\()?\\s*(?:(?:['\"]([^'\"]*))|([^;\\)\\s]*))[^;]*;?/g;\nvar /** @type {?} */ CSS_STRIPPABLE_COMMENT_REGEXP = /\\/\\*(?!#\\s*(?:sourceURL|sourceMappingURL)=)[\\s\\S]+?\\*\\//g;\nvar /** @type {?} */ URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;\n//# sourceMappingURL=style_url_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar TagContentType = {\n    RAW_TEXT: 0,\n    ESCAPABLE_RAW_TEXT: 1,\n    PARSABLE_DATA: 2,\n};\nexport { TagContentType };\nTagContentType[TagContentType.RAW_TEXT] = \"RAW_TEXT\";\nTagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = \"ESCAPABLE_RAW_TEXT\";\nTagContentType[TagContentType.PARSABLE_DATA] = \"PARSABLE_DATA\";\n/**\n * @record\n */\nexport function TagDefinition() { }\nfunction TagDefinition_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TagDefinition.prototype.closedByParent;\n    /** @type {?} */\n    TagDefinition.prototype.requiredParents;\n    /** @type {?} */\n    TagDefinition.prototype.parentToAdd;\n    /** @type {?} */\n    TagDefinition.prototype.implicitNamespacePrefix;\n    /** @type {?} */\n    TagDefinition.prototype.contentType;\n    /** @type {?} */\n    TagDefinition.prototype.isVoid;\n    /** @type {?} */\n    TagDefinition.prototype.ignoreFirstLf;\n    /** @type {?} */\n    TagDefinition.prototype.canSelfClose;\n    /** @type {?} */\n    TagDefinition.prototype.requireExtraParent;\n    /** @type {?} */\n    TagDefinition.prototype.isClosedByChild;\n}\n/**\n * @param {?} elementName\n * @return {?}\n */\nexport function splitNsName(elementName) {\n    if (elementName[0] != ':') {\n        return [null, elementName];\n    }\n    var /** @type {?} */ colonIndex = elementName.indexOf(':', 1);\n    if (colonIndex == -1) {\n        throw new Error(\"Unsupported format \\\"\" + elementName + \"\\\" expecting \\\":namespace:name\\\"\");\n    }\n    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];\n}\n/**\n * @param {?} tagName\n * @return {?}\n */\nexport function isNgContainer(tagName) {\n    return splitNsName(tagName)[1] === 'ng-container';\n}\n/**\n * @param {?} tagName\n * @return {?}\n */\nexport function isNgContent(tagName) {\n    return splitNsName(tagName)[1] === 'ng-content';\n}\n/**\n * @param {?} tagName\n * @return {?}\n */\nexport function isNgTemplate(tagName) {\n    return splitNsName(tagName)[1] === 'ng-template';\n}\n/**\n * @param {?} fullName\n * @return {?}\n */\nexport function getNsPrefix(fullName) {\n    return fullName === null ? null : splitNsName(fullName)[0];\n}\n/**\n * @param {?} prefix\n * @param {?} localName\n * @return {?}\n */\nexport function mergeNsAndName(prefix, localName) {\n    return prefix ? \":\" + prefix + \":\" + localName : localName;\n}\n// see http://www.w3.org/TR/html51/syntax.html#named-character-references\n// see https://html.spec.whatwg.org/multipage/entities.json\n// This list is not exhaustive to keep the compiler footprint low.\n// The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not\n// exist.\nexport var /** @type {?} */ NAMED_ENTITIES = {\n    'Aacute': '\\u00C1',\n    'aacute': '\\u00E1',\n    'Acirc': '\\u00C2',\n    'acirc': '\\u00E2',\n    'acute': '\\u00B4',\n    'AElig': '\\u00C6',\n    'aelig': '\\u00E6',\n    'Agrave': '\\u00C0',\n    'agrave': '\\u00E0',\n    'alefsym': '\\u2135',\n    'Alpha': '\\u0391',\n    'alpha': '\\u03B1',\n    'amp': '&',\n    'and': '\\u2227',\n    'ang': '\\u2220',\n    'apos': '\\u0027',\n    'Aring': '\\u00C5',\n    'aring': '\\u00E5',\n    'asymp': '\\u2248',\n    'Atilde': '\\u00C3',\n    'atilde': '\\u00E3',\n    'Auml': '\\u00C4',\n    'auml': '\\u00E4',\n    'bdquo': '\\u201E',\n    'Beta': '\\u0392',\n    'beta': '\\u03B2',\n    'brvbar': '\\u00A6',\n    'bull': '\\u2022',\n    'cap': '\\u2229',\n    'Ccedil': '\\u00C7',\n    'ccedil': '\\u00E7',\n    'cedil': '\\u00B8',\n    'cent': '\\u00A2',\n    'Chi': '\\u03A7',\n    'chi': '\\u03C7',\n    'circ': '\\u02C6',\n    'clubs': '\\u2663',\n    'cong': '\\u2245',\n    'copy': '\\u00A9',\n    'crarr': '\\u21B5',\n    'cup': '\\u222A',\n    'curren': '\\u00A4',\n    'dagger': '\\u2020',\n    'Dagger': '\\u2021',\n    'darr': '\\u2193',\n    'dArr': '\\u21D3',\n    'deg': '\\u00B0',\n    'Delta': '\\u0394',\n    'delta': '\\u03B4',\n    'diams': '\\u2666',\n    'divide': '\\u00F7',\n    'Eacute': '\\u00C9',\n    'eacute': '\\u00E9',\n    'Ecirc': '\\u00CA',\n    'ecirc': '\\u00EA',\n    'Egrave': '\\u00C8',\n    'egrave': '\\u00E8',\n    'empty': '\\u2205',\n    'emsp': '\\u2003',\n    'ensp': '\\u2002',\n    'Epsilon': '\\u0395',\n    'epsilon': '\\u03B5',\n    'equiv': '\\u2261',\n    'Eta': '\\u0397',\n    'eta': '\\u03B7',\n    'ETH': '\\u00D0',\n    'eth': '\\u00F0',\n    'Euml': '\\u00CB',\n    'euml': '\\u00EB',\n    'euro': '\\u20AC',\n    'exist': '\\u2203',\n    'fnof': '\\u0192',\n    'forall': '\\u2200',\n    'frac12': '\\u00BD',\n    'frac14': '\\u00BC',\n    'frac34': '\\u00BE',\n    'frasl': '\\u2044',\n    'Gamma': '\\u0393',\n    'gamma': '\\u03B3',\n    'ge': '\\u2265',\n    'gt': '>',\n    'harr': '\\u2194',\n    'hArr': '\\u21D4',\n    'hearts': '\\u2665',\n    'hellip': '\\u2026',\n    'Iacute': '\\u00CD',\n    'iacute': '\\u00ED',\n    'Icirc': '\\u00CE',\n    'icirc': '\\u00EE',\n    'iexcl': '\\u00A1',\n    'Igrave': '\\u00CC',\n    'igrave': '\\u00EC',\n    'image': '\\u2111',\n    'infin': '\\u221E',\n    'int': '\\u222B',\n    'Iota': '\\u0399',\n    'iota': '\\u03B9',\n    'iquest': '\\u00BF',\n    'isin': '\\u2208',\n    'Iuml': '\\u00CF',\n    'iuml': '\\u00EF',\n    'Kappa': '\\u039A',\n    'kappa': '\\u03BA',\n    'Lambda': '\\u039B',\n    'lambda': '\\u03BB',\n    'lang': '\\u27E8',\n    'laquo': '\\u00AB',\n    'larr': '\\u2190',\n    'lArr': '\\u21D0',\n    'lceil': '\\u2308',\n    'ldquo': '\\u201C',\n    'le': '\\u2264',\n    'lfloor': '\\u230A',\n    'lowast': '\\u2217',\n    'loz': '\\u25CA',\n    'lrm': '\\u200E',\n    'lsaquo': '\\u2039',\n    'lsquo': '\\u2018',\n    'lt': '<',\n    'macr': '\\u00AF',\n    'mdash': '\\u2014',\n    'micro': '\\u00B5',\n    'middot': '\\u00B7',\n    'minus': '\\u2212',\n    'Mu': '\\u039C',\n    'mu': '\\u03BC',\n    'nabla': '\\u2207',\n    'nbsp': '\\u00A0',\n    'ndash': '\\u2013',\n    'ne': '\\u2260',\n    'ni': '\\u220B',\n    'not': '\\u00AC',\n    'notin': '\\u2209',\n    'nsub': '\\u2284',\n    'Ntilde': '\\u00D1',\n    'ntilde': '\\u00F1',\n    'Nu': '\\u039D',\n    'nu': '\\u03BD',\n    'Oacute': '\\u00D3',\n    'oacute': '\\u00F3',\n    'Ocirc': '\\u00D4',\n    'ocirc': '\\u00F4',\n    'OElig': '\\u0152',\n    'oelig': '\\u0153',\n    'Ograve': '\\u00D2',\n    'ograve': '\\u00F2',\n    'oline': '\\u203E',\n    'Omega': '\\u03A9',\n    'omega': '\\u03C9',\n    'Omicron': '\\u039F',\n    'omicron': '\\u03BF',\n    'oplus': '\\u2295',\n    'or': '\\u2228',\n    'ordf': '\\u00AA',\n    'ordm': '\\u00BA',\n    'Oslash': '\\u00D8',\n    'oslash': '\\u00F8',\n    'Otilde': '\\u00D5',\n    'otilde': '\\u00F5',\n    'otimes': '\\u2297',\n    'Ouml': '\\u00D6',\n    'ouml': '\\u00F6',\n    'para': '\\u00B6',\n    'permil': '\\u2030',\n    'perp': '\\u22A5',\n    'Phi': '\\u03A6',\n    'phi': '\\u03C6',\n    'Pi': '\\u03A0',\n    'pi': '\\u03C0',\n    'piv': '\\u03D6',\n    'plusmn': '\\u00B1',\n    'pound': '\\u00A3',\n    'prime': '\\u2032',\n    'Prime': '\\u2033',\n    'prod': '\\u220F',\n    'prop': '\\u221D',\n    'Psi': '\\u03A8',\n    'psi': '\\u03C8',\n    'quot': '\\u0022',\n    'radic': '\\u221A',\n    'rang': '\\u27E9',\n    'raquo': '\\u00BB',\n    'rarr': '\\u2192',\n    'rArr': '\\u21D2',\n    'rceil': '\\u2309',\n    'rdquo': '\\u201D',\n    'real': '\\u211C',\n    'reg': '\\u00AE',\n    'rfloor': '\\u230B',\n    'Rho': '\\u03A1',\n    'rho': '\\u03C1',\n    'rlm': '\\u200F',\n    'rsaquo': '\\u203A',\n    'rsquo': '\\u2019',\n    'sbquo': '\\u201A',\n    'Scaron': '\\u0160',\n    'scaron': '\\u0161',\n    'sdot': '\\u22C5',\n    'sect': '\\u00A7',\n    'shy': '\\u00AD',\n    'Sigma': '\\u03A3',\n    'sigma': '\\u03C3',\n    'sigmaf': '\\u03C2',\n    'sim': '\\u223C',\n    'spades': '\\u2660',\n    'sub': '\\u2282',\n    'sube': '\\u2286',\n    'sum': '\\u2211',\n    'sup': '\\u2283',\n    'sup1': '\\u00B9',\n    'sup2': '\\u00B2',\n    'sup3': '\\u00B3',\n    'supe': '\\u2287',\n    'szlig': '\\u00DF',\n    'Tau': '\\u03A4',\n    'tau': '\\u03C4',\n    'there4': '\\u2234',\n    'Theta': '\\u0398',\n    'theta': '\\u03B8',\n    'thetasym': '\\u03D1',\n    'thinsp': '\\u2009',\n    'THORN': '\\u00DE',\n    'thorn': '\\u00FE',\n    'tilde': '\\u02DC',\n    'times': '\\u00D7',\n    'trade': '\\u2122',\n    'Uacute': '\\u00DA',\n    'uacute': '\\u00FA',\n    'uarr': '\\u2191',\n    'uArr': '\\u21D1',\n    'Ucirc': '\\u00DB',\n    'ucirc': '\\u00FB',\n    'Ugrave': '\\u00D9',\n    'ugrave': '\\u00F9',\n    'uml': '\\u00A8',\n    'upsih': '\\u03D2',\n    'Upsilon': '\\u03A5',\n    'upsilon': '\\u03C5',\n    'Uuml': '\\u00DC',\n    'uuml': '\\u00FC',\n    'weierp': '\\u2118',\n    'Xi': '\\u039E',\n    'xi': '\\u03BE',\n    'Yacute': '\\u00DD',\n    'yacute': '\\u00FD',\n    'yen': '\\u00A5',\n    'yuml': '\\u00FF',\n    'Yuml': '\\u0178',\n    'Zeta': '\\u0396',\n    'zeta': '\\u03B6',\n    'zwj': '\\u200D',\n    'zwnj': '\\u200C',\n};\n// The &ngsp; pseudo-entity is denoting a space. see:\n// https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart\nexport var /** @type {?} */ NGSP_UNICODE = '\\uE500';\nNAMED_ENTITIES['ngsp'] = NGSP_UNICODE;\n//# sourceMappingURL=tags.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isNgContent } from '../ml_parser/tags';\nvar /** @type {?} */ NG_CONTENT_SELECT_ATTR = 'select';\nvar /** @type {?} */ LINK_ELEMENT = 'link';\nvar /** @type {?} */ LINK_STYLE_REL_ATTR = 'rel';\nvar /** @type {?} */ LINK_STYLE_HREF_ATTR = 'href';\nvar /** @type {?} */ LINK_STYLE_REL_VALUE = 'stylesheet';\nvar /** @type {?} */ STYLE_ELEMENT = 'style';\nvar /** @type {?} */ SCRIPT_ELEMENT = 'script';\nvar /** @type {?} */ NG_NON_BINDABLE_ATTR = 'ngNonBindable';\nvar /** @type {?} */ NG_PROJECT_AS = 'ngProjectAs';\n/**\n * @param {?} ast\n * @return {?}\n */\nexport function preparseElement(ast) {\n    var /** @type {?} */ selectAttr = /** @type {?} */ ((null));\n    var /** @type {?} */ hrefAttr = /** @type {?} */ ((null));\n    var /** @type {?} */ relAttr = /** @type {?} */ ((null));\n    var /** @type {?} */ nonBindable = false;\n    var /** @type {?} */ projectAs = /** @type {?} */ ((null));\n    ast.attrs.forEach(function (attr) {\n        var /** @type {?} */ lcAttrName = attr.name.toLowerCase();\n        if (lcAttrName == NG_CONTENT_SELECT_ATTR) {\n            selectAttr = attr.value;\n        }\n        else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\n            hrefAttr = attr.value;\n        }\n        else if (lcAttrName == LINK_STYLE_REL_ATTR) {\n            relAttr = attr.value;\n        }\n        else if (attr.name == NG_NON_BINDABLE_ATTR) {\n            nonBindable = true;\n        }\n        else if (attr.name == NG_PROJECT_AS) {\n            if (attr.value.length > 0) {\n                projectAs = attr.value;\n            }\n        }\n    });\n    selectAttr = normalizeNgContentSelect(selectAttr);\n    var /** @type {?} */ nodeName = ast.name.toLowerCase();\n    var /** @type {?} */ type = PreparsedElementType.OTHER;\n    if (isNgContent(nodeName)) {\n        type = PreparsedElementType.NG_CONTENT;\n    }\n    else if (nodeName == STYLE_ELEMENT) {\n        type = PreparsedElementType.STYLE;\n    }\n    else if (nodeName == SCRIPT_ELEMENT) {\n        type = PreparsedElementType.SCRIPT;\n    }\n    else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\n        type = PreparsedElementType.STYLESHEET;\n    }\n    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\n}\n/** @enum {number} */\nvar PreparsedElementType = {\n    NG_CONTENT: 0,\n    STYLE: 1,\n    STYLESHEET: 2,\n    SCRIPT: 3,\n    OTHER: 4,\n};\nexport { PreparsedElementType };\nPreparsedElementType[PreparsedElementType.NG_CONTENT] = \"NG_CONTENT\";\nPreparsedElementType[PreparsedElementType.STYLE] = \"STYLE\";\nPreparsedElementType[PreparsedElementType.STYLESHEET] = \"STYLESHEET\";\nPreparsedElementType[PreparsedElementType.SCRIPT] = \"SCRIPT\";\nPreparsedElementType[PreparsedElementType.OTHER] = \"OTHER\";\nvar PreparsedElement = /** @class */ (function () {\n    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {\n        this.type = type;\n        this.selectAttr = selectAttr;\n        this.hrefAttr = hrefAttr;\n        this.nonBindable = nonBindable;\n        this.projectAs = projectAs;\n    }\n    return PreparsedElement;\n}());\nexport { PreparsedElement };\nfunction PreparsedElement_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PreparsedElement.prototype.type;\n    /** @type {?} */\n    PreparsedElement.prototype.selectAttr;\n    /** @type {?} */\n    PreparsedElement.prototype.hrefAttr;\n    /** @type {?} */\n    PreparsedElement.prototype.nonBindable;\n    /** @type {?} */\n    PreparsedElement.prototype.projectAs;\n}\n/**\n * @param {?} selectAttr\n * @return {?}\n */\nfunction normalizeNgContentSelect(selectAttr) {\n    if (selectAttr === null || selectAttr.length === 0) {\n        return '*';\n    }\n    return selectAttr;\n}\n//# sourceMappingURL=template_preparser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileStylesheetMetadata, CompileTemplateMetadata, templateSourceUrl } from './compile_metadata';\nimport { preserveWhitespacesDefault } from './config';\nimport { ViewEncapsulation } from './core';\nimport * as html from './ml_parser/ast';\nimport { InterpolationConfig } from './ml_parser/interpolation_config';\nimport { extractStyleUrls, isStyleUrlResolvable } from './style_url_resolver';\nimport { PreparsedElementType, preparseElement } from './template_parser/template_preparser';\nimport { SyncAsync, isDefined, stringify, syntaxError } from './util';\n/**\n * @record\n */\nexport function PrenormalizedTemplateMetadata() { }\nfunction PrenormalizedTemplateMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.ngModuleType;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.componentType;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.moduleUrl;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.template;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.templateUrl;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.styles;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.styleUrls;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.interpolation;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.encapsulation;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.animations;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.preserveWhitespaces;\n}\nvar DirectiveNormalizer = /** @class */ (function () {\n    function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {\n        this._resourceLoader = _resourceLoader;\n        this._urlResolver = _urlResolver;\n        this._htmlParser = _htmlParser;\n        this._config = _config;\n        this._resourceLoaderCache = new Map();\n    }\n    /**\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype.clearCache = /**\n     * @return {?}\n     */\n    function () { this._resourceLoaderCache.clear(); };\n    /**\n     * @param {?} normalizedDirective\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype.clearCacheFor = /**\n     * @param {?} normalizedDirective\n     * @return {?}\n     */\n    function (normalizedDirective) {\n        var _this = this;\n        if (!normalizedDirective.isComponent) {\n            return;\n        }\n        var /** @type {?} */ template = /** @type {?} */ ((normalizedDirective.template));\n        this._resourceLoaderCache.delete(/** @type {?} */ ((template.templateUrl)));\n        template.externalStylesheets.forEach(function (stylesheet) { _this._resourceLoaderCache.delete(/** @type {?} */ ((stylesheet.moduleUrl))); });\n    };\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._fetch = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) {\n        var /** @type {?} */ result = this._resourceLoaderCache.get(url);\n        if (!result) {\n            result = this._resourceLoader.get(url);\n            this._resourceLoaderCache.set(url, result);\n        }\n        return result;\n    };\n    /**\n     * @param {?} prenormData\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype.normalizeTemplate = /**\n     * @param {?} prenormData\n     * @return {?}\n     */\n    function (prenormData) {\n        var _this = this;\n        if (isDefined(prenormData.template)) {\n            if (isDefined(prenormData.templateUrl)) {\n                throw syntaxError(\"'\" + stringify(prenormData.componentType) + \"' component cannot define both template and templateUrl\");\n            }\n            if (typeof prenormData.template !== 'string') {\n                throw syntaxError(\"The template specified for component \" + stringify(prenormData.componentType) + \" is not a string\");\n            }\n        }\n        else if (isDefined(prenormData.templateUrl)) {\n            if (typeof prenormData.templateUrl !== 'string') {\n                throw syntaxError(\"The templateUrl specified for component \" + stringify(prenormData.componentType) + \" is not a string\");\n            }\n        }\n        else {\n            throw syntaxError(\"No template specified for component \" + stringify(prenormData.componentType));\n        }\n        if (isDefined(prenormData.preserveWhitespaces) &&\n            typeof prenormData.preserveWhitespaces !== 'boolean') {\n            throw syntaxError(\"The preserveWhitespaces option for component \" + stringify(prenormData.componentType) + \" must be a boolean\");\n        }\n        return SyncAsync.then(this._preParseTemplate(prenormData), function (preparsedTemplate) { return _this._normalizeTemplateMetadata(prenormData, preparsedTemplate); });\n    };\n    /**\n     * @param {?} prenomData\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._preParseTemplate = /**\n     * @param {?} prenomData\n     * @return {?}\n     */\n    function (prenomData) {\n        var _this = this;\n        var /** @type {?} */ template;\n        var /** @type {?} */ templateUrl;\n        if (prenomData.template != null) {\n            template = prenomData.template;\n            templateUrl = prenomData.moduleUrl;\n        }\n        else {\n            templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, /** @type {?} */ ((prenomData.templateUrl)));\n            template = this._fetch(templateUrl);\n        }\n        return SyncAsync.then(template, function (template) { return _this._preparseLoadedTemplate(prenomData, template, templateUrl); });\n    };\n    /**\n     * @param {?} prenormData\n     * @param {?} template\n     * @param {?} templateAbsUrl\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._preparseLoadedTemplate = /**\n     * @param {?} prenormData\n     * @param {?} template\n     * @param {?} templateAbsUrl\n     * @return {?}\n     */\n    function (prenormData, template, templateAbsUrl) {\n        var /** @type {?} */ isInline = !!prenormData.template;\n        var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(/** @type {?} */ ((prenormData.interpolation)));\n        var /** @type {?} */ rootNodesAndErrors = this._htmlParser.parse(template, templateSourceUrl({ reference: prenormData.ngModuleType }, { type: { reference: prenormData.componentType } }, { isInline: isInline, templateUrl: templateAbsUrl }), true, interpolationConfig);\n        if (rootNodesAndErrors.errors.length > 0) {\n            var /** @type {?} */ errorString = rootNodesAndErrors.errors.join('\\n');\n            throw syntaxError(\"Template parse errors:\\n\" + errorString);\n        }\n        var /** @type {?} */ templateMetadataStyles = this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: prenormData.styles, moduleUrl: prenormData.moduleUrl }));\n        var /** @type {?} */ visitor = new TemplatePreparseVisitor();\n        html.visitAll(visitor, rootNodesAndErrors.rootNodes);\n        var /** @type {?} */ templateStyles = this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));\n        var /** @type {?} */ styles = templateMetadataStyles.styles.concat(templateStyles.styles);\n        var /** @type {?} */ inlineStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);\n        var /** @type {?} */ styleUrls = this\n            ._normalizeStylesheet(new CompileStylesheetMetadata({ styleUrls: prenormData.styleUrls, moduleUrl: prenormData.moduleUrl }))\n            .styleUrls;\n        return {\n            template: template,\n            templateUrl: templateAbsUrl, isInline: isInline,\n            htmlAst: rootNodesAndErrors, styles: styles, inlineStyleUrls: inlineStyleUrls, styleUrls: styleUrls,\n            ngContentSelectors: visitor.ngContentSelectors,\n        };\n    };\n    /**\n     * @param {?} prenormData\n     * @param {?} preparsedTemplate\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._normalizeTemplateMetadata = /**\n     * @param {?} prenormData\n     * @param {?} preparsedTemplate\n     * @return {?}\n     */\n    function (prenormData, preparsedTemplate) {\n        var _this = this;\n        return SyncAsync.then(this._loadMissingExternalStylesheets(preparsedTemplate.styleUrls.concat(preparsedTemplate.inlineStyleUrls)), function (externalStylesheets) {\n            return _this._normalizeLoadedTemplateMetadata(prenormData, preparsedTemplate, externalStylesheets);\n        });\n    };\n    /**\n     * @param {?} prenormData\n     * @param {?} preparsedTemplate\n     * @param {?} stylesheets\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._normalizeLoadedTemplateMetadata = /**\n     * @param {?} prenormData\n     * @param {?} preparsedTemplate\n     * @param {?} stylesheets\n     * @return {?}\n     */\n    function (prenormData, preparsedTemplate, stylesheets) {\n        var _this = this;\n        // Algorithm:\n        // - produce exactly 1 entry per original styleUrl in\n        // CompileTemplateMetadata.externalStylesheets with all styles inlined\n        // - inline all styles that are referenced by the template into CompileTemplateMetadata.styles.\n        // Reason: be able to determine how many stylesheets there are even without loading\n        // the template nor the stylesheets, so we can create a stub for TypeScript always synchronously\n        // (as resource loading may be async)\n        var /** @type {?} */ styles = preparsedTemplate.styles.slice();\n        this._inlineStyles(preparsedTemplate.inlineStyleUrls, stylesheets, styles);\n        var /** @type {?} */ styleUrls = preparsedTemplate.styleUrls;\n        var /** @type {?} */ externalStylesheets = styleUrls.map(function (styleUrl) {\n            var /** @type {?} */ stylesheet = /** @type {?} */ ((stylesheets.get(styleUrl)));\n            var /** @type {?} */ styles = stylesheet.styles.slice();\n            _this._inlineStyles(stylesheet.styleUrls, stylesheets, styles);\n            return new CompileStylesheetMetadata({ moduleUrl: styleUrl, styles: styles });\n        });\n        var /** @type {?} */ encapsulation = prenormData.encapsulation;\n        if (encapsulation == null) {\n            encapsulation = this._config.defaultEncapsulation;\n        }\n        if (encapsulation === ViewEncapsulation.Emulated && styles.length === 0 &&\n            styleUrls.length === 0) {\n            encapsulation = ViewEncapsulation.None;\n        }\n        return new CompileTemplateMetadata({\n            encapsulation: encapsulation,\n            template: preparsedTemplate.template,\n            templateUrl: preparsedTemplate.templateUrl,\n            htmlAst: preparsedTemplate.htmlAst, styles: styles, styleUrls: styleUrls,\n            ngContentSelectors: preparsedTemplate.ngContentSelectors,\n            animations: prenormData.animations,\n            interpolation: prenormData.interpolation,\n            isInline: preparsedTemplate.isInline, externalStylesheets: externalStylesheets,\n            preserveWhitespaces: preserveWhitespacesDefault(prenormData.preserveWhitespaces, this._config.preserveWhitespaces),\n        });\n    };\n    /**\n     * @param {?} styleUrls\n     * @param {?} stylesheets\n     * @param {?} targetStyles\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._inlineStyles = /**\n     * @param {?} styleUrls\n     * @param {?} stylesheets\n     * @param {?} targetStyles\n     * @return {?}\n     */\n    function (styleUrls, stylesheets, targetStyles) {\n        var _this = this;\n        styleUrls.forEach(function (styleUrl) {\n            var /** @type {?} */ stylesheet = /** @type {?} */ ((stylesheets.get(styleUrl)));\n            stylesheet.styles.forEach(function (style) { return targetStyles.push(style); });\n            _this._inlineStyles(stylesheet.styleUrls, stylesheets, targetStyles);\n        });\n    };\n    /**\n     * @param {?} styleUrls\n     * @param {?=} loadedStylesheets\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._loadMissingExternalStylesheets = /**\n     * @param {?} styleUrls\n     * @param {?=} loadedStylesheets\n     * @return {?}\n     */\n    function (styleUrls, loadedStylesheets) {\n        var _this = this;\n        if (loadedStylesheets === void 0) { loadedStylesheets = new Map(); }\n        return SyncAsync.then(SyncAsync.all(styleUrls.filter(function (styleUrl) { return !loadedStylesheets.has(styleUrl); })\n            .map(function (styleUrl) {\n            return SyncAsync.then(_this._fetch(styleUrl), function (loadedStyle) {\n                var /** @type {?} */ stylesheet = _this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));\n                loadedStylesheets.set(styleUrl, stylesheet);\n                return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);\n            });\n        })), function (_) { return loadedStylesheets; });\n    };\n    /**\n     * @param {?} stylesheet\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._normalizeStylesheet = /**\n     * @param {?} stylesheet\n     * @return {?}\n     */\n    function (stylesheet) {\n        var _this = this;\n        var /** @type {?} */ moduleUrl = /** @type {?} */ ((stylesheet.moduleUrl));\n        var /** @type {?} */ allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)\n            .map(function (url) { return _this._urlResolver.resolve(moduleUrl, url); });\n        var /** @type {?} */ allStyles = stylesheet.styles.map(function (style) {\n            var /** @type {?} */ styleWithImports = extractStyleUrls(_this._urlResolver, moduleUrl, style);\n            allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);\n            return styleWithImports.style;\n        });\n        return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: moduleUrl });\n    };\n    return DirectiveNormalizer;\n}());\nexport { DirectiveNormalizer };\nfunction DirectiveNormalizer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DirectiveNormalizer.prototype._resourceLoaderCache;\n    /** @type {?} */\n    DirectiveNormalizer.prototype._resourceLoader;\n    /** @type {?} */\n    DirectiveNormalizer.prototype._urlResolver;\n    /** @type {?} */\n    DirectiveNormalizer.prototype._htmlParser;\n    /** @type {?} */\n    DirectiveNormalizer.prototype._config;\n}\n/**\n * @record\n */\nfunction PreparsedTemplate() { }\nfunction PreparsedTemplate_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PreparsedTemplate.prototype.template;\n    /** @type {?} */\n    PreparsedTemplate.prototype.templateUrl;\n    /** @type {?} */\n    PreparsedTemplate.prototype.isInline;\n    /** @type {?} */\n    PreparsedTemplate.prototype.htmlAst;\n    /** @type {?} */\n    PreparsedTemplate.prototype.styles;\n    /** @type {?} */\n    PreparsedTemplate.prototype.inlineStyleUrls;\n    /** @type {?} */\n    PreparsedTemplate.prototype.styleUrls;\n    /** @type {?} */\n    PreparsedTemplate.prototype.ngContentSelectors;\n}\nvar TemplatePreparseVisitor = /** @class */ (function () {\n    function TemplatePreparseVisitor() {\n        this.ngContentSelectors = [];\n        this.styles = [];\n        this.styleUrls = [];\n        this.ngNonBindableStackCount = 0;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    TemplatePreparseVisitor.prototype.visitElement = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ preparsedElement = preparseElement(ast);\n        switch (preparsedElement.type) {\n            case PreparsedElementType.NG_CONTENT:\n                if (this.ngNonBindableStackCount === 0) {\n                    this.ngContentSelectors.push(preparsedElement.selectAttr);\n                }\n                break;\n            case PreparsedElementType.STYLE:\n                var /** @type {?} */ textContent_1 = '';\n                ast.children.forEach(function (child) {\n                    if (child instanceof html.Text) {\n                        textContent_1 += child.value;\n                    }\n                });\n                this.styles.push(textContent_1);\n                break;\n            case PreparsedElementType.STYLESHEET:\n                this.styleUrls.push(preparsedElement.hrefAttr);\n                break;\n            default:\n                break;\n        }\n        if (preparsedElement.nonBindable) {\n            this.ngNonBindableStackCount++;\n        }\n        html.visitAll(this, ast.children);\n        if (preparsedElement.nonBindable) {\n            this.ngNonBindableStackCount--;\n        }\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    TemplatePreparseVisitor.prototype.visitExpansion = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { html.visitAll(this, ast.cases); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    TemplatePreparseVisitor.prototype.visitExpansionCase = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        html.visitAll(this, ast.expression);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    TemplatePreparseVisitor.prototype.visitComment = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return null; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    TemplatePreparseVisitor.prototype.visitAttribute = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return null; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    TemplatePreparseVisitor.prototype.visitText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return null; };\n    return TemplatePreparseVisitor;\n}());\nfunction TemplatePreparseVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplatePreparseVisitor.prototype.ngContentSelectors;\n    /** @type {?} */\n    TemplatePreparseVisitor.prototype.styles;\n    /** @type {?} */\n    TemplatePreparseVisitor.prototype.styleUrls;\n    /** @type {?} */\n    TemplatePreparseVisitor.prototype.ngNonBindableStackCount;\n}\n//# sourceMappingURL=directive_normalizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { createComponent, createContentChild, createContentChildren, createDirective, createHostBinding, createHostListener, createInput, createOutput, createViewChild, createViewChildren } from './core';\nimport { resolveForwardRef, splitAtColon, stringify } from './util';\nvar /** @type {?} */ QUERY_METADATA_IDENTIFIERS = [\n    createViewChild,\n    createViewChildren,\n    createContentChild,\n    createContentChildren,\n];\nvar DirectiveResolver = /** @class */ (function () {\n    function DirectiveResolver(_reflector) {\n        this._reflector = _reflector;\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    DirectiveResolver.prototype.isDirective = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n        return typeMetadata && typeMetadata.some(isDirectiveMetadata);\n    };\n    /**\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    DirectiveResolver.prototype.resolve = /**\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n        if (typeMetadata) {\n            var /** @type {?} */ metadata = findLast(typeMetadata, isDirectiveMetadata);\n            if (metadata) {\n                var /** @type {?} */ propertyMetadata = this._reflector.propMetadata(type);\n                var /** @type {?} */ guards = this._reflector.guards(type);\n                return this._mergeWithPropertyMetadata(metadata, propertyMetadata, guards, type);\n            }\n        }\n        if (throwIfNotFound) {\n            throw new Error(\"No Directive annotation found on \" + stringify(type));\n        }\n        return null;\n    };\n    /**\n     * @param {?} dm\n     * @param {?} propertyMetadata\n     * @param {?} guards\n     * @param {?} directiveType\n     * @return {?}\n     */\n    DirectiveResolver.prototype._mergeWithPropertyMetadata = /**\n     * @param {?} dm\n     * @param {?} propertyMetadata\n     * @param {?} guards\n     * @param {?} directiveType\n     * @return {?}\n     */\n    function (dm, propertyMetadata, guards, directiveType) {\n        var /** @type {?} */ inputs = [];\n        var /** @type {?} */ outputs = [];\n        var /** @type {?} */ host = {};\n        var /** @type {?} */ queries = {};\n        Object.keys(propertyMetadata).forEach(function (propName) {\n            var /** @type {?} */ input = findLast(propertyMetadata[propName], function (a) { return createInput.isTypeOf(a); });\n            if (input) {\n                if (input.bindingPropertyName) {\n                    inputs.push(propName + \": \" + input.bindingPropertyName);\n                }\n                else {\n                    inputs.push(propName);\n                }\n            }\n            var /** @type {?} */ output = findLast(propertyMetadata[propName], function (a) { return createOutput.isTypeOf(a); });\n            if (output) {\n                if (output.bindingPropertyName) {\n                    outputs.push(propName + \": \" + output.bindingPropertyName);\n                }\n                else {\n                    outputs.push(propName);\n                }\n            }\n            var /** @type {?} */ hostBindings = propertyMetadata[propName].filter(function (a) { return createHostBinding.isTypeOf(a); });\n            hostBindings.forEach(function (hostBinding) {\n                if (hostBinding.hostPropertyName) {\n                    var /** @type {?} */ startWith = hostBinding.hostPropertyName[0];\n                    if (startWith === '(') {\n                        throw new Error(\"@HostBinding can not bind to events. Use @HostListener instead.\");\n                    }\n                    else if (startWith === '[') {\n                        throw new Error(\"@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.\");\n                    }\n                    host[\"[\" + hostBinding.hostPropertyName + \"]\"] = propName;\n                }\n                else {\n                    host[\"[\" + propName + \"]\"] = propName;\n                }\n            });\n            var /** @type {?} */ hostListeners = propertyMetadata[propName].filter(function (a) { return createHostListener.isTypeOf(a); });\n            hostListeners.forEach(function (hostListener) {\n                var /** @type {?} */ args = hostListener.args || [];\n                host[\"(\" + hostListener.eventName + \")\"] = propName + \"(\" + args.join(',') + \")\";\n            });\n            var /** @type {?} */ query = findLast(propertyMetadata[propName], function (a) { return QUERY_METADATA_IDENTIFIERS.some(function (i) { return i.isTypeOf(a); }); });\n            if (query) {\n                queries[propName] = query;\n            }\n        });\n        return this._merge(dm, inputs, outputs, host, queries, guards, directiveType);\n    };\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    DirectiveResolver.prototype._extractPublicName = /**\n     * @param {?} def\n     * @return {?}\n     */\n    function (def) { return splitAtColon(def, [/** @type {?} */ ((null)), def])[1].trim(); };\n    /**\n     * @param {?} bindings\n     * @return {?}\n     */\n    DirectiveResolver.prototype._dedupeBindings = /**\n     * @param {?} bindings\n     * @return {?}\n     */\n    function (bindings) {\n        var /** @type {?} */ names = new Set();\n        var /** @type {?} */ publicNames = new Set();\n        var /** @type {?} */ reversedResult = [];\n        // go last to first to allow later entries to overwrite previous entries\n        for (var /** @type {?} */ i = bindings.length - 1; i >= 0; i--) {\n            var /** @type {?} */ binding = bindings[i];\n            var /** @type {?} */ name_1 = this._extractPublicName(binding);\n            publicNames.add(name_1);\n            if (!names.has(name_1)) {\n                names.add(name_1);\n                reversedResult.push(binding);\n            }\n        }\n        return reversedResult.reverse();\n    };\n    /**\n     * @param {?} directive\n     * @param {?} inputs\n     * @param {?} outputs\n     * @param {?} host\n     * @param {?} queries\n     * @param {?} guards\n     * @param {?} directiveType\n     * @return {?}\n     */\n    DirectiveResolver.prototype._merge = /**\n     * @param {?} directive\n     * @param {?} inputs\n     * @param {?} outputs\n     * @param {?} host\n     * @param {?} queries\n     * @param {?} guards\n     * @param {?} directiveType\n     * @return {?}\n     */\n    function (directive, inputs, outputs, host, queries, guards, directiveType) {\n        var /** @type {?} */ mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);\n        var /** @type {?} */ mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);\n        var /** @type {?} */ mergedHost = directive.host ? tslib_1.__assign({}, directive.host, host) : host;\n        var /** @type {?} */ mergedQueries = directive.queries ? tslib_1.__assign({}, directive.queries, queries) : queries;\n        if (createComponent.isTypeOf(directive)) {\n            var /** @type {?} */ comp = /** @type {?} */ (directive);\n            return createComponent({\n                selector: comp.selector,\n                inputs: mergedInputs,\n                outputs: mergedOutputs,\n                host: mergedHost,\n                exportAs: comp.exportAs,\n                moduleId: comp.moduleId,\n                queries: mergedQueries,\n                changeDetection: comp.changeDetection,\n                providers: comp.providers,\n                viewProviders: comp.viewProviders,\n                entryComponents: comp.entryComponents,\n                template: comp.template,\n                templateUrl: comp.templateUrl,\n                styles: comp.styles,\n                styleUrls: comp.styleUrls,\n                encapsulation: comp.encapsulation,\n                animations: comp.animations,\n                interpolation: comp.interpolation,\n                preserveWhitespaces: directive.preserveWhitespaces,\n            });\n        }\n        else {\n            return createDirective({\n                selector: directive.selector,\n                inputs: mergedInputs,\n                outputs: mergedOutputs,\n                host: mergedHost,\n                exportAs: directive.exportAs,\n                queries: mergedQueries,\n                providers: directive.providers, guards: guards\n            });\n        }\n    };\n    return DirectiveResolver;\n}());\nexport { DirectiveResolver };\nfunction DirectiveResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DirectiveResolver.prototype._reflector;\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction isDirectiveMetadata(type) {\n    return createDirective.isTypeOf(type) || createComponent.isTypeOf(type);\n}\n/**\n * @template T\n * @param {?} arr\n * @param {?} condition\n * @return {?}\n */\nexport function findLast(arr, condition) {\n    for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n        if (condition(arr[i])) {\n            return arr[i];\n        }\n    }\n    return null;\n}\n//# sourceMappingURL=directive_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport var /** @type {?} */ $EOF = 0;\nexport var /** @type {?} */ $TAB = 9;\nexport var /** @type {?} */ $LF = 10;\nexport var /** @type {?} */ $VTAB = 11;\nexport var /** @type {?} */ $FF = 12;\nexport var /** @type {?} */ $CR = 13;\nexport var /** @type {?} */ $SPACE = 32;\nexport var /** @type {?} */ $BANG = 33;\nexport var /** @type {?} */ $DQ = 34;\nexport var /** @type {?} */ $HASH = 35;\nexport var /** @type {?} */ $$ = 36;\nexport var /** @type {?} */ $PERCENT = 37;\nexport var /** @type {?} */ $AMPERSAND = 38;\nexport var /** @type {?} */ $SQ = 39;\nexport var /** @type {?} */ $LPAREN = 40;\nexport var /** @type {?} */ $RPAREN = 41;\nexport var /** @type {?} */ $STAR = 42;\nexport var /** @type {?} */ $PLUS = 43;\nexport var /** @type {?} */ $COMMA = 44;\nexport var /** @type {?} */ $MINUS = 45;\nexport var /** @type {?} */ $PERIOD = 46;\nexport var /** @type {?} */ $SLASH = 47;\nexport var /** @type {?} */ $COLON = 58;\nexport var /** @type {?} */ $SEMICOLON = 59;\nexport var /** @type {?} */ $LT = 60;\nexport var /** @type {?} */ $EQ = 61;\nexport var /** @type {?} */ $GT = 62;\nexport var /** @type {?} */ $QUESTION = 63;\nexport var /** @type {?} */ $0 = 48;\nexport var /** @type {?} */ $9 = 57;\nexport var /** @type {?} */ $A = 65;\nexport var /** @type {?} */ $E = 69;\nexport var /** @type {?} */ $F = 70;\nexport var /** @type {?} */ $X = 88;\nexport var /** @type {?} */ $Z = 90;\nexport var /** @type {?} */ $LBRACKET = 91;\nexport var /** @type {?} */ $BACKSLASH = 92;\nexport var /** @type {?} */ $RBRACKET = 93;\nexport var /** @type {?} */ $CARET = 94;\nexport var /** @type {?} */ $_ = 95;\nexport var /** @type {?} */ $a = 97;\nexport var /** @type {?} */ $e = 101;\nexport var /** @type {?} */ $f = 102;\nexport var /** @type {?} */ $n = 110;\nexport var /** @type {?} */ $r = 114;\nexport var /** @type {?} */ $t = 116;\nexport var /** @type {?} */ $u = 117;\nexport var /** @type {?} */ $v = 118;\nexport var /** @type {?} */ $x = 120;\nexport var /** @type {?} */ $z = 122;\nexport var /** @type {?} */ $LBRACE = 123;\nexport var /** @type {?} */ $BAR = 124;\nexport var /** @type {?} */ $RBRACE = 125;\nexport var /** @type {?} */ $NBSP = 160;\nexport var /** @type {?} */ $PIPE = 124;\nexport var /** @type {?} */ $TILDA = 126;\nexport var /** @type {?} */ $AT = 64;\nexport var /** @type {?} */ $BT = 96;\n/**\n * @param {?} code\n * @return {?}\n */\nexport function isWhitespace(code) {\n    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nexport function isDigit(code) {\n    return $0 <= code && code <= $9;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nexport function isAsciiLetter(code) {\n    return code >= $a && code <= $z || code >= $A && code <= $Z;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nexport function isAsciiHexDigit(code) {\n    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);\n}\n//# sourceMappingURL=chars.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as chars from '../chars';\n/** @enum {number} */\nvar TokenType = {\n    Character: 0,\n    Identifier: 1,\n    Keyword: 2,\n    String: 3,\n    Operator: 4,\n    Number: 5,\n    Error: 6,\n};\nexport { TokenType };\nTokenType[TokenType.Character] = \"Character\";\nTokenType[TokenType.Identifier] = \"Identifier\";\nTokenType[TokenType.Keyword] = \"Keyword\";\nTokenType[TokenType.String] = \"String\";\nTokenType[TokenType.Operator] = \"Operator\";\nTokenType[TokenType.Number] = \"Number\";\nTokenType[TokenType.Error] = \"Error\";\nvar /** @type {?} */ KEYWORDS = ['var', 'let', 'as', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];\nvar Lexer = /** @class */ (function () {\n    function Lexer() {\n    }\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    Lexer.prototype.tokenize = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) {\n        var /** @type {?} */ scanner = new _Scanner(text);\n        var /** @type {?} */ tokens = [];\n        var /** @type {?} */ token = scanner.scanToken();\n        while (token != null) {\n            tokens.push(token);\n            token = scanner.scanToken();\n        }\n        return tokens;\n    };\n    return Lexer;\n}());\nexport { Lexer };\nvar Token = /** @class */ (function () {\n    function Token(index, type, numValue, strValue) {\n        this.index = index;\n        this.type = type;\n        this.numValue = numValue;\n        this.strValue = strValue;\n    }\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    Token.prototype.isCharacter = /**\n     * @param {?} code\n     * @return {?}\n     */\n    function (code) {\n        return this.type == TokenType.Character && this.numValue == code;\n    };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isNumber = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Number; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isString = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.String; };\n    /**\n     * @param {?} operater\n     * @return {?}\n     */\n    Token.prototype.isOperator = /**\n     * @param {?} operater\n     * @return {?}\n     */\n    function (operater) {\n        return this.type == TokenType.Operator && this.strValue == operater;\n    };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isIdentifier = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Identifier; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeyword = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Keyword; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordLet = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Keyword && this.strValue == 'let'; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordAs = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Keyword && this.strValue == 'as'; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordNull = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Keyword && this.strValue == 'null'; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordUndefined = /**\n     * @return {?}\n     */\n    function () {\n        return this.type == TokenType.Keyword && this.strValue == 'undefined';\n    };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordTrue = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Keyword && this.strValue == 'true'; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordFalse = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Keyword && this.strValue == 'false'; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordThis = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Keyword && this.strValue == 'this'; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isError = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Error; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.toNumber = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Number ? this.numValue : -1; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        switch (this.type) {\n            case TokenType.Character:\n            case TokenType.Identifier:\n            case TokenType.Keyword:\n            case TokenType.Operator:\n            case TokenType.String:\n            case TokenType.Error:\n                return this.strValue;\n            case TokenType.Number:\n                return this.numValue.toString();\n            default:\n                return null;\n        }\n    };\n    return Token;\n}());\nexport { Token };\nfunction Token_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Token.prototype.index;\n    /** @type {?} */\n    Token.prototype.type;\n    /** @type {?} */\n    Token.prototype.numValue;\n    /** @type {?} */\n    Token.prototype.strValue;\n}\n/**\n * @param {?} index\n * @param {?} code\n * @return {?}\n */\nfunction newCharacterToken(index, code) {\n    return new Token(index, TokenType.Character, code, String.fromCharCode(code));\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newIdentifierToken(index, text) {\n    return new Token(index, TokenType.Identifier, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newKeywordToken(index, text) {\n    return new Token(index, TokenType.Keyword, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newOperatorToken(index, text) {\n    return new Token(index, TokenType.Operator, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newStringToken(index, text) {\n    return new Token(index, TokenType.String, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} n\n * @return {?}\n */\nfunction newNumberToken(index, n) {\n    return new Token(index, TokenType.Number, n, '');\n}\n/**\n * @param {?} index\n * @param {?} message\n * @return {?}\n */\nfunction newErrorToken(index, message) {\n    return new Token(index, TokenType.Error, 0, message);\n}\nexport var /** @type {?} */ EOF = new Token(-1, TokenType.Character, 0, '');\nvar _Scanner = /** @class */ (function () {\n    function _Scanner(input) {\n        this.input = input;\n        this.peek = 0;\n        this.index = -1;\n        this.length = input.length;\n        this.advance();\n    }\n    /**\n     * @return {?}\n     */\n    _Scanner.prototype.advance = /**\n     * @return {?}\n     */\n    function () {\n        this.peek = ++this.index >= this.length ? chars.$EOF : this.input.charCodeAt(this.index);\n    };\n    /**\n     * @return {?}\n     */\n    _Scanner.prototype.scanToken = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ input = this.input, /** @type {?} */ length = this.length;\n        var /** @type {?} */ peek = this.peek, /** @type {?} */ index = this.index;\n        // Skip whitespace.\n        while (peek <= chars.$SPACE) {\n            if (++index >= length) {\n                peek = chars.$EOF;\n                break;\n            }\n            else {\n                peek = input.charCodeAt(index);\n            }\n        }\n        this.peek = peek;\n        this.index = index;\n        if (index >= length) {\n            return null;\n        }\n        // Handle identifiers and numbers.\n        if (isIdentifierStart(peek))\n            return this.scanIdentifier();\n        if (chars.isDigit(peek))\n            return this.scanNumber(index);\n        var /** @type {?} */ start = index;\n        switch (peek) {\n            case chars.$PERIOD:\n                this.advance();\n                return chars.isDigit(this.peek) ? this.scanNumber(start) :\n                    newCharacterToken(start, chars.$PERIOD);\n            case chars.$LPAREN:\n            case chars.$RPAREN:\n            case chars.$LBRACE:\n            case chars.$RBRACE:\n            case chars.$LBRACKET:\n            case chars.$RBRACKET:\n            case chars.$COMMA:\n            case chars.$COLON:\n            case chars.$SEMICOLON:\n                return this.scanCharacter(start, peek);\n            case chars.$SQ:\n            case chars.$DQ:\n                return this.scanString();\n            case chars.$HASH:\n            case chars.$PLUS:\n            case chars.$MINUS:\n            case chars.$STAR:\n            case chars.$SLASH:\n            case chars.$PERCENT:\n            case chars.$CARET:\n                return this.scanOperator(start, String.fromCharCode(peek));\n            case chars.$QUESTION:\n                return this.scanComplexOperator(start, '?', chars.$PERIOD, '.');\n            case chars.$LT:\n            case chars.$GT:\n                return this.scanComplexOperator(start, String.fromCharCode(peek), chars.$EQ, '=');\n            case chars.$BANG:\n            case chars.$EQ:\n                return this.scanComplexOperator(start, String.fromCharCode(peek), chars.$EQ, '=', chars.$EQ, '=');\n            case chars.$AMPERSAND:\n                return this.scanComplexOperator(start, '&', chars.$AMPERSAND, '&');\n            case chars.$BAR:\n                return this.scanComplexOperator(start, '|', chars.$BAR, '|');\n            case chars.$NBSP:\n                while (chars.isWhitespace(this.peek))\n                    this.advance();\n                return this.scanToken();\n        }\n        this.advance();\n        return this.error(\"Unexpected character [\" + String.fromCharCode(peek) + \"]\", 0);\n    };\n    /**\n     * @param {?} start\n     * @param {?} code\n     * @return {?}\n     */\n    _Scanner.prototype.scanCharacter = /**\n     * @param {?} start\n     * @param {?} code\n     * @return {?}\n     */\n    function (start, code) {\n        this.advance();\n        return newCharacterToken(start, code);\n    };\n    /**\n     * @param {?} start\n     * @param {?} str\n     * @return {?}\n     */\n    _Scanner.prototype.scanOperator = /**\n     * @param {?} start\n     * @param {?} str\n     * @return {?}\n     */\n    function (start, str) {\n        this.advance();\n        return newOperatorToken(start, str);\n    };\n    /**\n     * Tokenize a 2/3 char long operator\n     *\n     * @param start start index in the expression\n     * @param one first symbol (always part of the operator)\n     * @param twoCode code point for the second symbol\n     * @param two second symbol (part of the operator when the second code point matches)\n     * @param threeCode code point for the third symbol\n     * @param three third symbol (part of the operator when provided and matches source expression)\n     */\n    /**\n     * Tokenize a 2/3 char long operator\n     *\n     * @param {?} start start index in the expression\n     * @param {?} one first symbol (always part of the operator)\n     * @param {?} twoCode code point for the second symbol\n     * @param {?} two second symbol (part of the operator when the second code point matches)\n     * @param {?=} threeCode code point for the third symbol\n     * @param {?=} three third symbol (part of the operator when provided and matches source expression)\n     * @return {?}\n     */\n    _Scanner.prototype.scanComplexOperator = /**\n     * Tokenize a 2/3 char long operator\n     *\n     * @param {?} start start index in the expression\n     * @param {?} one first symbol (always part of the operator)\n     * @param {?} twoCode code point for the second symbol\n     * @param {?} two second symbol (part of the operator when the second code point matches)\n     * @param {?=} threeCode code point for the third symbol\n     * @param {?=} three third symbol (part of the operator when provided and matches source expression)\n     * @return {?}\n     */\n    function (start, one, twoCode, two, threeCode, three) {\n        this.advance();\n        var /** @type {?} */ str = one;\n        if (this.peek == twoCode) {\n            this.advance();\n            str += two;\n        }\n        if (threeCode != null && this.peek == threeCode) {\n            this.advance();\n            str += three;\n        }\n        return newOperatorToken(start, str);\n    };\n    /**\n     * @return {?}\n     */\n    _Scanner.prototype.scanIdentifier = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ start = this.index;\n        this.advance();\n        while (isIdentifierPart(this.peek))\n            this.advance();\n        var /** @type {?} */ str = this.input.substring(start, this.index);\n        return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :\n            newIdentifierToken(start, str);\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _Scanner.prototype.scanNumber = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        var /** @type {?} */ simple = (this.index === start);\n        this.advance(); // Skip initial digit.\n        while (true) {\n            if (chars.isDigit(this.peek)) {\n                // Do nothing.\n            }\n            else if (this.peek == chars.$PERIOD) {\n                simple = false;\n            }\n            else if (isExponentStart(this.peek)) {\n                this.advance();\n                if (isExponentSign(this.peek))\n                    this.advance();\n                if (!chars.isDigit(this.peek))\n                    return this.error('Invalid exponent', -1);\n                simple = false;\n            }\n            else {\n                break;\n            }\n            this.advance();\n        }\n        var /** @type {?} */ str = this.input.substring(start, this.index);\n        var /** @type {?} */ value = simple ? parseIntAutoRadix(str) : parseFloat(str);\n        return newNumberToken(start, value);\n    };\n    /**\n     * @return {?}\n     */\n    _Scanner.prototype.scanString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ start = this.index;\n        var /** @type {?} */ quote = this.peek;\n        this.advance(); // Skip initial quote.\n        var /** @type {?} */ buffer = '';\n        var /** @type {?} */ marker = this.index;\n        var /** @type {?} */ input = this.input;\n        while (this.peek != quote) {\n            if (this.peek == chars.$BACKSLASH) {\n                buffer += input.substring(marker, this.index);\n                this.advance();\n                var /** @type {?} */ unescapedCode = void 0;\n                // Workaround for TS2.1-introduced type strictness\n                this.peek = this.peek;\n                if (this.peek == chars.$u) {\n                    // 4 character hex code for unicode character.\n                    var /** @type {?} */ hex = input.substring(this.index + 1, this.index + 5);\n                    if (/^[0-9a-f]+$/i.test(hex)) {\n                        unescapedCode = parseInt(hex, 16);\n                    }\n                    else {\n                        return this.error(\"Invalid unicode escape [\\\\u\" + hex + \"]\", 0);\n                    }\n                    for (var /** @type {?} */ i = 0; i < 5; i++) {\n                        this.advance();\n                    }\n                }\n                else {\n                    unescapedCode = unescape(this.peek);\n                    this.advance();\n                }\n                buffer += String.fromCharCode(unescapedCode);\n                marker = this.index;\n            }\n            else if (this.peek == chars.$EOF) {\n                return this.error('Unterminated quote', 0);\n            }\n            else {\n                this.advance();\n            }\n        }\n        var /** @type {?} */ last = input.substring(marker, this.index);\n        this.advance(); // Skip terminating quote.\n        return newStringToken(start, buffer + last);\n    };\n    /**\n     * @param {?} message\n     * @param {?} offset\n     * @return {?}\n     */\n    _Scanner.prototype.error = /**\n     * @param {?} message\n     * @param {?} offset\n     * @return {?}\n     */\n    function (message, offset) {\n        var /** @type {?} */ position = this.index + offset;\n        return newErrorToken(position, \"Lexer Error: \" + message + \" at column \" + position + \" in expression [\" + this.input + \"]\");\n    };\n    return _Scanner;\n}());\nfunction _Scanner_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _Scanner.prototype.length;\n    /** @type {?} */\n    _Scanner.prototype.peek;\n    /** @type {?} */\n    _Scanner.prototype.index;\n    /** @type {?} */\n    _Scanner.prototype.input;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isIdentifierStart(code) {\n    return (chars.$a <= code && code <= chars.$z) || (chars.$A <= code && code <= chars.$Z) ||\n        (code == chars.$_) || (code == chars.$$);\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function isIdentifier(input) {\n    if (input.length == 0)\n        return false;\n    var /** @type {?} */ scanner = new _Scanner(input);\n    if (!isIdentifierStart(scanner.peek))\n        return false;\n    scanner.advance();\n    while (scanner.peek !== chars.$EOF) {\n        if (!isIdentifierPart(scanner.peek))\n            return false;\n        scanner.advance();\n    }\n    return true;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isIdentifierPart(code) {\n    return chars.isAsciiLetter(code) || chars.isDigit(code) || (code == chars.$_) ||\n        (code == chars.$$);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isExponentStart(code) {\n    return code == chars.$e || code == chars.$E;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isExponentSign(code) {\n    return code == chars.$MINUS || code == chars.$PLUS;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nexport function isQuote(code) {\n    return code === chars.$SQ || code === chars.$DQ || code === chars.$BT;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction unescape(code) {\n    switch (code) {\n        case chars.$n:\n            return chars.$LF;\n        case chars.$f:\n            return chars.$FF;\n        case chars.$r:\n            return chars.$CR;\n        case chars.$t:\n            return chars.$TAB;\n        case chars.$v:\n            return chars.$VTAB;\n        default:\n            return code;\n    }\n}\n/**\n * @param {?} text\n * @return {?}\n */\nfunction parseIntAutoRadix(text) {\n    var /** @type {?} */ result = parseInt(text);\n    if (isNaN(result)) {\n        throw new Error('Invalid integer literal when parsing ' + text);\n    }\n    return result;\n}\n//# sourceMappingURL=lexer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nvar ParserError = /** @class */ (function () {\n    function ParserError(message, input, errLocation, ctxLocation) {\n        this.input = input;\n        this.errLocation = errLocation;\n        this.ctxLocation = ctxLocation;\n        this.message = \"Parser Error: \" + message + \" \" + errLocation + \" [\" + input + \"] in \" + ctxLocation;\n    }\n    return ParserError;\n}());\nexport { ParserError };\nfunction ParserError_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParserError.prototype.message;\n    /** @type {?} */\n    ParserError.prototype.input;\n    /** @type {?} */\n    ParserError.prototype.errLocation;\n    /** @type {?} */\n    ParserError.prototype.ctxLocation;\n}\nvar ParseSpan = /** @class */ (function () {\n    function ParseSpan(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n    return ParseSpan;\n}());\nexport { ParseSpan };\nfunction ParseSpan_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParseSpan.prototype.start;\n    /** @type {?} */\n    ParseSpan.prototype.end;\n}\nvar AST = /** @class */ (function () {\n    function AST(span) {\n        this.span = span;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    AST.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return null;\n    };\n    /**\n     * @return {?}\n     */\n    AST.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return 'AST'; };\n    return AST;\n}());\nexport { AST };\nfunction AST_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AST.prototype.span;\n}\n/**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nvar /**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nQuote = /** @class */ (function (_super) {\n    tslib_1.__extends(Quote, _super);\n    function Quote(span, prefix, uninterpretedExpression, location) {\n        var _this = _super.call(this, span) || this;\n        _this.prefix = prefix;\n        _this.uninterpretedExpression = uninterpretedExpression;\n        _this.location = location;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Quote.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitQuote(this, context);\n    };\n    /**\n     * @return {?}\n     */\n    Quote.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return 'Quote'; };\n    return Quote;\n}(AST));\n/**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nexport { Quote };\nfunction Quote_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Quote.prototype.prefix;\n    /** @type {?} */\n    Quote.prototype.uninterpretedExpression;\n    /** @type {?} */\n    Quote.prototype.location;\n}\nvar EmptyExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(EmptyExpr, _super);\n    function EmptyExpr() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    EmptyExpr.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        // do nothing\n    };\n    return EmptyExpr;\n}(AST));\nexport { EmptyExpr };\nvar ImplicitReceiver = /** @class */ (function (_super) {\n    tslib_1.__extends(ImplicitReceiver, _super);\n    function ImplicitReceiver() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    ImplicitReceiver.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitImplicitReceiver(this, context);\n    };\n    return ImplicitReceiver;\n}(AST));\nexport { ImplicitReceiver };\n/**\n * Multiple expressions separated by a semicolon.\n */\nvar /**\n * Multiple expressions separated by a semicolon.\n */\nChain = /** @class */ (function (_super) {\n    tslib_1.__extends(Chain, _super);\n    function Chain(span, expressions) {\n        var _this = _super.call(this, span) || this;\n        _this.expressions = expressions;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Chain.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitChain(this, context);\n    };\n    return Chain;\n}(AST));\n/**\n * Multiple expressions separated by a semicolon.\n */\nexport { Chain };\nfunction Chain_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Chain.prototype.expressions;\n}\nvar Conditional = /** @class */ (function (_super) {\n    tslib_1.__extends(Conditional, _super);\n    function Conditional(span, condition, trueExp, falseExp) {\n        var _this = _super.call(this, span) || this;\n        _this.condition = condition;\n        _this.trueExp = trueExp;\n        _this.falseExp = falseExp;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Conditional.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitConditional(this, context);\n    };\n    return Conditional;\n}(AST));\nexport { Conditional };\nfunction Conditional_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Conditional.prototype.condition;\n    /** @type {?} */\n    Conditional.prototype.trueExp;\n    /** @type {?} */\n    Conditional.prototype.falseExp;\n}\nvar PropertyRead = /** @class */ (function (_super) {\n    tslib_1.__extends(PropertyRead, _super);\n    function PropertyRead(span, receiver, name) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    PropertyRead.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitPropertyRead(this, context);\n    };\n    return PropertyRead;\n}(AST));\nexport { PropertyRead };\nfunction PropertyRead_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PropertyRead.prototype.receiver;\n    /** @type {?} */\n    PropertyRead.prototype.name;\n}\nvar PropertyWrite = /** @class */ (function (_super) {\n    tslib_1.__extends(PropertyWrite, _super);\n    function PropertyWrite(span, receiver, name, value) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    PropertyWrite.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitPropertyWrite(this, context);\n    };\n    return PropertyWrite;\n}(AST));\nexport { PropertyWrite };\nfunction PropertyWrite_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PropertyWrite.prototype.receiver;\n    /** @type {?} */\n    PropertyWrite.prototype.name;\n    /** @type {?} */\n    PropertyWrite.prototype.value;\n}\nvar SafePropertyRead = /** @class */ (function (_super) {\n    tslib_1.__extends(SafePropertyRead, _super);\n    function SafePropertyRead(span, receiver, name) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    SafePropertyRead.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitSafePropertyRead(this, context);\n    };\n    return SafePropertyRead;\n}(AST));\nexport { SafePropertyRead };\nfunction SafePropertyRead_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SafePropertyRead.prototype.receiver;\n    /** @type {?} */\n    SafePropertyRead.prototype.name;\n}\nvar KeyedRead = /** @class */ (function (_super) {\n    tslib_1.__extends(KeyedRead, _super);\n    function KeyedRead(span, obj, key) {\n        var _this = _super.call(this, span) || this;\n        _this.obj = obj;\n        _this.key = key;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    KeyedRead.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitKeyedRead(this, context);\n    };\n    return KeyedRead;\n}(AST));\nexport { KeyedRead };\nfunction KeyedRead_tsickle_Closure_declarations() {\n    /** @type {?} */\n    KeyedRead.prototype.obj;\n    /** @type {?} */\n    KeyedRead.prototype.key;\n}\nvar KeyedWrite = /** @class */ (function (_super) {\n    tslib_1.__extends(KeyedWrite, _super);\n    function KeyedWrite(span, obj, key, value) {\n        var _this = _super.call(this, span) || this;\n        _this.obj = obj;\n        _this.key = key;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    KeyedWrite.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitKeyedWrite(this, context);\n    };\n    return KeyedWrite;\n}(AST));\nexport { KeyedWrite };\nfunction KeyedWrite_tsickle_Closure_declarations() {\n    /** @type {?} */\n    KeyedWrite.prototype.obj;\n    /** @type {?} */\n    KeyedWrite.prototype.key;\n    /** @type {?} */\n    KeyedWrite.prototype.value;\n}\nvar BindingPipe = /** @class */ (function (_super) {\n    tslib_1.__extends(BindingPipe, _super);\n    function BindingPipe(span, exp, name, args) {\n        var _this = _super.call(this, span) || this;\n        _this.exp = exp;\n        _this.name = name;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    BindingPipe.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitPipe(this, context);\n    };\n    return BindingPipe;\n}(AST));\nexport { BindingPipe };\nfunction BindingPipe_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BindingPipe.prototype.exp;\n    /** @type {?} */\n    BindingPipe.prototype.name;\n    /** @type {?} */\n    BindingPipe.prototype.args;\n}\nvar LiteralPrimitive = /** @class */ (function (_super) {\n    tslib_1.__extends(LiteralPrimitive, _super);\n    function LiteralPrimitive(span, value) {\n        var _this = _super.call(this, span) || this;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    LiteralPrimitive.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitLiteralPrimitive(this, context);\n    };\n    return LiteralPrimitive;\n}(AST));\nexport { LiteralPrimitive };\nfunction LiteralPrimitive_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LiteralPrimitive.prototype.value;\n}\nvar LiteralArray = /** @class */ (function (_super) {\n    tslib_1.__extends(LiteralArray, _super);\n    function LiteralArray(span, expressions) {\n        var _this = _super.call(this, span) || this;\n        _this.expressions = expressions;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    LiteralArray.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitLiteralArray(this, context);\n    };\n    return LiteralArray;\n}(AST));\nexport { LiteralArray };\nfunction LiteralArray_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LiteralArray.prototype.expressions;\n}\nvar LiteralMap = /** @class */ (function (_super) {\n    tslib_1.__extends(LiteralMap, _super);\n    function LiteralMap(span, keys, values) {\n        var _this = _super.call(this, span) || this;\n        _this.keys = keys;\n        _this.values = values;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    LiteralMap.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitLiteralMap(this, context);\n    };\n    return LiteralMap;\n}(AST));\nexport { LiteralMap };\nfunction LiteralMap_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LiteralMap.prototype.keys;\n    /** @type {?} */\n    LiteralMap.prototype.values;\n}\nvar Interpolation = /** @class */ (function (_super) {\n    tslib_1.__extends(Interpolation, _super);\n    function Interpolation(span, strings, expressions) {\n        var _this = _super.call(this, span) || this;\n        _this.strings = strings;\n        _this.expressions = expressions;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Interpolation.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitInterpolation(this, context);\n    };\n    return Interpolation;\n}(AST));\nexport { Interpolation };\nfunction Interpolation_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Interpolation.prototype.strings;\n    /** @type {?} */\n    Interpolation.prototype.expressions;\n}\nvar Binary = /** @class */ (function (_super) {\n    tslib_1.__extends(Binary, _super);\n    function Binary(span, operation, left, right) {\n        var _this = _super.call(this, span) || this;\n        _this.operation = operation;\n        _this.left = left;\n        _this.right = right;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Binary.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitBinary(this, context);\n    };\n    return Binary;\n}(AST));\nexport { Binary };\nfunction Binary_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Binary.prototype.operation;\n    /** @type {?} */\n    Binary.prototype.left;\n    /** @type {?} */\n    Binary.prototype.right;\n}\nvar PrefixNot = /** @class */ (function (_super) {\n    tslib_1.__extends(PrefixNot, _super);\n    function PrefixNot(span, expression) {\n        var _this = _super.call(this, span) || this;\n        _this.expression = expression;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    PrefixNot.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitPrefixNot(this, context);\n    };\n    return PrefixNot;\n}(AST));\nexport { PrefixNot };\nfunction PrefixNot_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PrefixNot.prototype.expression;\n}\nvar NonNullAssert = /** @class */ (function (_super) {\n    tslib_1.__extends(NonNullAssert, _super);\n    function NonNullAssert(span, expression) {\n        var _this = _super.call(this, span) || this;\n        _this.expression = expression;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    NonNullAssert.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitNonNullAssert(this, context);\n    };\n    return NonNullAssert;\n}(AST));\nexport { NonNullAssert };\nfunction NonNullAssert_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NonNullAssert.prototype.expression;\n}\nvar MethodCall = /** @class */ (function (_super) {\n    tslib_1.__extends(MethodCall, _super);\n    function MethodCall(span, receiver, name, args) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    MethodCall.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitMethodCall(this, context);\n    };\n    return MethodCall;\n}(AST));\nexport { MethodCall };\nfunction MethodCall_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MethodCall.prototype.receiver;\n    /** @type {?} */\n    MethodCall.prototype.name;\n    /** @type {?} */\n    MethodCall.prototype.args;\n}\nvar SafeMethodCall = /** @class */ (function (_super) {\n    tslib_1.__extends(SafeMethodCall, _super);\n    function SafeMethodCall(span, receiver, name, args) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    SafeMethodCall.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitSafeMethodCall(this, context);\n    };\n    return SafeMethodCall;\n}(AST));\nexport { SafeMethodCall };\nfunction SafeMethodCall_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SafeMethodCall.prototype.receiver;\n    /** @type {?} */\n    SafeMethodCall.prototype.name;\n    /** @type {?} */\n    SafeMethodCall.prototype.args;\n}\nvar FunctionCall = /** @class */ (function (_super) {\n    tslib_1.__extends(FunctionCall, _super);\n    function FunctionCall(span, target, args) {\n        var _this = _super.call(this, span) || this;\n        _this.target = target;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    FunctionCall.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitFunctionCall(this, context);\n    };\n    return FunctionCall;\n}(AST));\nexport { FunctionCall };\nfunction FunctionCall_tsickle_Closure_declarations() {\n    /** @type {?} */\n    FunctionCall.prototype.target;\n    /** @type {?} */\n    FunctionCall.prototype.args;\n}\nvar ASTWithSource = /** @class */ (function (_super) {\n    tslib_1.__extends(ASTWithSource, _super);\n    function ASTWithSource(ast, source, location, errors) {\n        var _this = _super.call(this, new ParseSpan(0, source == null ? 0 : source.length)) || this;\n        _this.ast = ast;\n        _this.source = source;\n        _this.location = location;\n        _this.errors = errors;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    ASTWithSource.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return this.ast.visit(visitor, context);\n    };\n    /**\n     * @return {?}\n     */\n    ASTWithSource.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this.source + \" in \" + this.location; };\n    return ASTWithSource;\n}(AST));\nexport { ASTWithSource };\nfunction ASTWithSource_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ASTWithSource.prototype.ast;\n    /** @type {?} */\n    ASTWithSource.prototype.source;\n    /** @type {?} */\n    ASTWithSource.prototype.location;\n    /** @type {?} */\n    ASTWithSource.prototype.errors;\n}\nvar TemplateBinding = /** @class */ (function () {\n    function TemplateBinding(span, key, keyIsVar, name, expression) {\n        this.span = span;\n        this.key = key;\n        this.keyIsVar = keyIsVar;\n        this.name = name;\n        this.expression = expression;\n    }\n    return TemplateBinding;\n}());\nexport { TemplateBinding };\nfunction TemplateBinding_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateBinding.prototype.span;\n    /** @type {?} */\n    TemplateBinding.prototype.key;\n    /** @type {?} */\n    TemplateBinding.prototype.keyIsVar;\n    /** @type {?} */\n    TemplateBinding.prototype.name;\n    /** @type {?} */\n    TemplateBinding.prototype.expression;\n}\n/**\n * @record\n */\nexport function AstVisitor() { }\nfunction AstVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AstVisitor.prototype.visitBinary;\n    /** @type {?} */\n    AstVisitor.prototype.visitChain;\n    /** @type {?} */\n    AstVisitor.prototype.visitConditional;\n    /** @type {?} */\n    AstVisitor.prototype.visitFunctionCall;\n    /** @type {?} */\n    AstVisitor.prototype.visitImplicitReceiver;\n    /** @type {?} */\n    AstVisitor.prototype.visitInterpolation;\n    /** @type {?} */\n    AstVisitor.prototype.visitKeyedRead;\n    /** @type {?} */\n    AstVisitor.prototype.visitKeyedWrite;\n    /** @type {?} */\n    AstVisitor.prototype.visitLiteralArray;\n    /** @type {?} */\n    AstVisitor.prototype.visitLiteralMap;\n    /** @type {?} */\n    AstVisitor.prototype.visitLiteralPrimitive;\n    /** @type {?} */\n    AstVisitor.prototype.visitMethodCall;\n    /** @type {?} */\n    AstVisitor.prototype.visitPipe;\n    /** @type {?} */\n    AstVisitor.prototype.visitPrefixNot;\n    /** @type {?} */\n    AstVisitor.prototype.visitNonNullAssert;\n    /** @type {?} */\n    AstVisitor.prototype.visitPropertyRead;\n    /** @type {?} */\n    AstVisitor.prototype.visitPropertyWrite;\n    /** @type {?} */\n    AstVisitor.prototype.visitQuote;\n    /** @type {?} */\n    AstVisitor.prototype.visitSafeMethodCall;\n    /** @type {?} */\n    AstVisitor.prototype.visitSafePropertyRead;\n    /** @type {?|undefined} */\n    AstVisitor.prototype.visit;\n}\nvar NullAstVisitor = /** @class */ (function () {\n    function NullAstVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitBinary = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitChain = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitConditional = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitFunctionCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitImplicitReceiver = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitInterpolation = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitKeyedRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitKeyedWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitLiteralPrimitive = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitPrefixNot = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitNonNullAssert = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitPropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitPropertyWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitQuote = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitSafeMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitSafePropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    return NullAstVisitor;\n}());\nexport { NullAstVisitor };\nvar RecursiveAstVisitor = /** @class */ (function () {\n    function RecursiveAstVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitBinary = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.left.visit(this);\n        ast.right.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitChain = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return this.visitAll(ast.expressions, context); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitConditional = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.condition.visit(this);\n        ast.trueExp.visit(this);\n        ast.falseExp.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.exp.visit(this);\n        this.visitAll(ast.args, context);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitFunctionCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        /** @type {?} */ ((ast.target)).visit(this);\n        this.visitAll(ast.args, context);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitImplicitReceiver = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return null; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitInterpolation = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitAll(ast.expressions, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitKeyedRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.obj.visit(this);\n        ast.key.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitKeyedWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.obj.visit(this);\n        ast.key.visit(this);\n        ast.value.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitAll(ast.expressions, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return this.visitAll(ast.values, context); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitLiteralPrimitive = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return null; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visit(this);\n        return this.visitAll(ast.args, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitPrefixNot = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.expression.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitNonNullAssert = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.expression.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitPropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitPropertyWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visit(this);\n        ast.value.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitSafePropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitSafeMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visit(this);\n        return this.visitAll(ast.args, context);\n    };\n    /**\n     * @param {?} asts\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitAll = /**\n     * @param {?} asts\n     * @param {?} context\n     * @return {?}\n     */\n    function (asts, context) {\n        var _this = this;\n        asts.forEach(function (ast) { return ast.visit(_this, context); });\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitQuote = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return null; };\n    return RecursiveAstVisitor;\n}());\nexport { RecursiveAstVisitor };\nvar AstTransformer = /** @class */ (function () {\n    function AstTransformer() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitImplicitReceiver = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return ast; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitInterpolation = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitLiteralPrimitive = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new LiteralPrimitive(ast.span, ast.value);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitPropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitPropertyWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value.visit(this));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitSafePropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitSafeMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new SafeMethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitFunctionCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new FunctionCall(ast.span, /** @type {?} */ ((ast.target)).visit(this), this.visitAll(ast.args));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new LiteralArray(ast.span, this.visitAll(ast.expressions));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitBinary = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitPrefixNot = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new PrefixNot(ast.span, ast.expression.visit(this));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitNonNullAssert = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new NonNullAssert(ast.span, ast.expression.visit(this));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitConditional = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new Conditional(ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitKeyedRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitKeyedWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new KeyedWrite(ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));\n    };\n    /**\n     * @param {?} asts\n     * @return {?}\n     */\n    AstTransformer.prototype.visitAll = /**\n     * @param {?} asts\n     * @return {?}\n     */\n    function (asts) {\n        var /** @type {?} */ res = new Array(asts.length);\n        for (var /** @type {?} */ i = 0; i < asts.length; ++i) {\n            res[i] = asts[i].visit(this);\n        }\n        return res;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitChain = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new Chain(ast.span, this.visitAll(ast.expressions));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitQuote = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);\n    };\n    return AstTransformer;\n}());\nexport { AstTransformer };\nvar AstMemoryEfficientTransformer = /** @class */ (function () {\n    function AstMemoryEfficientTransformer() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitImplicitReceiver = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return ast; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitInterpolation = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions)\n            return new Interpolation(ast.span, ast.strings, expressions);\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitLiteralPrimitive = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return ast; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitPropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ receiver = ast.receiver.visit(this);\n        if (receiver !== ast.receiver) {\n            return new PropertyRead(ast.span, receiver, ast.name);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitPropertyWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ receiver = ast.receiver.visit(this);\n        var /** @type {?} */ value = ast.value.visit(this);\n        if (receiver !== ast.receiver || value !== ast.value) {\n            return new PropertyWrite(ast.span, receiver, ast.name, value);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitSafePropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ receiver = ast.receiver.visit(this);\n        if (receiver !== ast.receiver) {\n            return new SafePropertyRead(ast.span, receiver, ast.name);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ receiver = ast.receiver.visit(this);\n        if (receiver !== ast.receiver) {\n            return new MethodCall(ast.span, receiver, ast.name, this.visitAll(ast.args));\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitSafeMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ receiver = ast.receiver.visit(this);\n        var /** @type {?} */ args = this.visitAll(ast.args);\n        if (receiver !== ast.receiver || args !== ast.args) {\n            return new SafeMethodCall(ast.span, receiver, ast.name, args);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitFunctionCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ target = ast.target && ast.target.visit(this);\n        var /** @type {?} */ args = this.visitAll(ast.args);\n        if (target !== ast.target || args !== ast.args) {\n            return new FunctionCall(ast.span, target, args);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions) {\n            return new LiteralArray(ast.span, expressions);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ values = this.visitAll(ast.values);\n        if (values !== ast.values) {\n            return new LiteralMap(ast.span, ast.keys, values);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitBinary = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ left = ast.left.visit(this);\n        var /** @type {?} */ right = ast.right.visit(this);\n        if (left !== ast.left || right !== ast.right) {\n            return new Binary(ast.span, ast.operation, left, right);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitPrefixNot = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ expression = ast.expression.visit(this);\n        if (expression !== ast.expression) {\n            return new PrefixNot(ast.span, expression);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitNonNullAssert = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ expression = ast.expression.visit(this);\n        if (expression !== ast.expression) {\n            return new NonNullAssert(ast.span, expression);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitConditional = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ condition = ast.condition.visit(this);\n        var /** @type {?} */ trueExp = ast.trueExp.visit(this);\n        var /** @type {?} */ falseExp = ast.falseExp.visit(this);\n        if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== falseExp) {\n            return new Conditional(ast.span, condition, trueExp, falseExp);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ exp = ast.exp.visit(this);\n        var /** @type {?} */ args = this.visitAll(ast.args);\n        if (exp !== ast.exp || args !== ast.args) {\n            return new BindingPipe(ast.span, exp, ast.name, args);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitKeyedRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ obj = ast.obj.visit(this);\n        var /** @type {?} */ key = ast.key.visit(this);\n        if (obj !== ast.obj || key !== ast.key) {\n            return new KeyedRead(ast.span, obj, key);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitKeyedWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ obj = ast.obj.visit(this);\n        var /** @type {?} */ key = ast.key.visit(this);\n        var /** @type {?} */ value = ast.value.visit(this);\n        if (obj !== ast.obj || key !== ast.key || value !== ast.value) {\n            return new KeyedWrite(ast.span, obj, key, value);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} asts\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitAll = /**\n     * @param {?} asts\n     * @return {?}\n     */\n    function (asts) {\n        var /** @type {?} */ res = new Array(asts.length);\n        var /** @type {?} */ modified = false;\n        for (var /** @type {?} */ i = 0; i < asts.length; ++i) {\n            var /** @type {?} */ original = asts[i];\n            var /** @type {?} */ value = original.visit(this);\n            res[i] = value;\n            modified = modified || value !== original;\n        }\n        return modified ? res : asts;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitChain = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions) {\n            return new Chain(ast.span, expressions);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitQuote = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return ast; };\n    return AstMemoryEfficientTransformer;\n}());\nexport { AstMemoryEfficientTransformer };\n/**\n * @param {?} ast\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nexport function visitAstChildren(ast, visitor, context) {\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function visit(ast) {\n        visitor.visit && visitor.visit(ast, context) || ast.visit(visitor, context);\n    }\n    /**\n     * @template T\n     * @param {?} asts\n     * @return {?}\n     */\n    function visitAll(asts) { asts.forEach(visit); }\n    ast.visit({\n        visitBinary: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.left);\n            visit(ast.right);\n        },\n        visitChain: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { visitAll(ast.expressions); },\n        visitConditional: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.condition);\n            visit(ast.trueExp);\n            visit(ast.falseExp);\n        },\n        visitFunctionCall: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            if (ast.target) {\n                visit(ast.target);\n            }\n            visitAll(ast.args);\n        },\n        visitImplicitReceiver: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { },\n        visitInterpolation: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { visitAll(ast.expressions); },\n        visitKeyedRead: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.obj);\n            visit(ast.key);\n        },\n        visitKeyedWrite: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.obj);\n            visit(ast.key);\n            visit(ast.obj);\n        },\n        visitLiteralArray: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { visitAll(ast.expressions); },\n        visitLiteralMap: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { },\n        visitLiteralPrimitive: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { },\n        visitMethodCall: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.receiver);\n            visitAll(ast.args);\n        },\n        visitPipe: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.exp);\n            visitAll(ast.args);\n        },\n        visitPrefixNot: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { visit(ast.expression); },\n        visitNonNullAssert: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { visit(ast.expression); },\n        visitPropertyRead: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { visit(ast.receiver); },\n        visitPropertyWrite: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.receiver);\n            visit(ast.value);\n        },\n        visitQuote: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { },\n        visitSafeMethodCall: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.receiver);\n            visitAll(ast.args);\n        },\n        visitSafePropertyRead: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { visit(ast.receiver); },\n    });\n}\n//# sourceMappingURL=ast.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as chars from '../chars';\nimport { DEFAULT_INTERPOLATION_CONFIG } from '../ml_parser/interpolation_config';\nimport { escapeRegExp } from '../util';\nimport { ASTWithSource, Binary, BindingPipe, Chain, Conditional, EmptyExpr, FunctionCall, ImplicitReceiver, Interpolation, KeyedRead, KeyedWrite, LiteralArray, LiteralMap, LiteralPrimitive, MethodCall, NonNullAssert, ParseSpan, ParserError, PrefixNot, PropertyRead, PropertyWrite, Quote, SafeMethodCall, SafePropertyRead, TemplateBinding } from './ast';\nimport { EOF, TokenType, isIdentifier, isQuote } from './lexer';\nvar SplitInterpolation = /** @class */ (function () {\n    function SplitInterpolation(strings, expressions, offsets) {\n        this.strings = strings;\n        this.expressions = expressions;\n        this.offsets = offsets;\n    }\n    return SplitInterpolation;\n}());\nexport { SplitInterpolation };\nfunction SplitInterpolation_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SplitInterpolation.prototype.strings;\n    /** @type {?} */\n    SplitInterpolation.prototype.expressions;\n    /** @type {?} */\n    SplitInterpolation.prototype.offsets;\n}\nvar TemplateBindingParseResult = /** @class */ (function () {\n    function TemplateBindingParseResult(templateBindings, warnings, errors) {\n        this.templateBindings = templateBindings;\n        this.warnings = warnings;\n        this.errors = errors;\n    }\n    return TemplateBindingParseResult;\n}());\nexport { TemplateBindingParseResult };\nfunction TemplateBindingParseResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateBindingParseResult.prototype.templateBindings;\n    /** @type {?} */\n    TemplateBindingParseResult.prototype.warnings;\n    /** @type {?} */\n    TemplateBindingParseResult.prototype.errors;\n}\n/**\n * @param {?} config\n * @return {?}\n */\nfunction _createInterpolateRegExp(config) {\n    var /** @type {?} */ pattern = escapeRegExp(config.start) + '([\\\\s\\\\S]*?)' + escapeRegExp(config.end);\n    return new RegExp(pattern, 'g');\n}\nvar Parser = /** @class */ (function () {\n    function Parser(_lexer) {\n        this._lexer = _lexer;\n        this.errors = [];\n    }\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parseAction = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (input, location, interpolationConfig) {\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        this._checkNoInterpolation(input, location, interpolationConfig);\n        var /** @type {?} */ sourceToLex = this._stripComments(input);\n        var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(input));\n        var /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)\n            .parseChain();\n        return new ASTWithSource(ast, input, location, this.errors);\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parseBinding = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (input, location, interpolationConfig) {\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);\n        return new ASTWithSource(ast, input, location, this.errors);\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parseSimpleBinding = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (input, location, interpolationConfig) {\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);\n        var /** @type {?} */ errors = SimpleExpressionChecker.check(ast);\n        if (errors.length > 0) {\n            this._reportError(\"Host binding expression cannot contain \" + errors.join(' '), input, location);\n        }\n        return new ASTWithSource(ast, input, location, this.errors);\n    };\n    /**\n     * @param {?} message\n     * @param {?} input\n     * @param {?} errLocation\n     * @param {?=} ctxLocation\n     * @return {?}\n     */\n    Parser.prototype._reportError = /**\n     * @param {?} message\n     * @param {?} input\n     * @param {?} errLocation\n     * @param {?=} ctxLocation\n     * @return {?}\n     */\n    function (message, input, errLocation, ctxLocation) {\n        this.errors.push(new ParserError(message, input, errLocation, ctxLocation));\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype._parseBindingAst = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    function (input, location, interpolationConfig) {\n        // Quotes expressions use 3rd-party expression language. We don't want to use\n        // our lexer or parser for that, so we check for that ahead of time.\n        var /** @type {?} */ quote = this._parseQuote(input, location);\n        if (quote != null) {\n            return quote;\n        }\n        this._checkNoInterpolation(input, location, interpolationConfig);\n        var /** @type {?} */ sourceToLex = this._stripComments(input);\n        var /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);\n        return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)\n            .parseChain();\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n    Parser.prototype._parseQuote = /**\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n    function (input, location) {\n        if (input == null)\n            return null;\n        var /** @type {?} */ prefixSeparatorIndex = input.indexOf(':');\n        if (prefixSeparatorIndex == -1)\n            return null;\n        var /** @type {?} */ prefix = input.substring(0, prefixSeparatorIndex).trim();\n        if (!isIdentifier(prefix))\n            return null;\n        var /** @type {?} */ uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\n        return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);\n    };\n    /**\n     * @param {?} prefixToken\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n    Parser.prototype.parseTemplateBindings = /**\n     * @param {?} prefixToken\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n    function (prefixToken, input, location) {\n        var /** @type {?} */ tokens = this._lexer.tokenize(input);\n        if (prefixToken) {\n            // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).\n            var /** @type {?} */ prefixTokens = this._lexer.tokenize(prefixToken).map(function (t) {\n                t.index = 0;\n                return t;\n            });\n            tokens.unshift.apply(tokens, prefixTokens);\n        }\n        return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0)\n            .parseTemplateBindings();\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parseInterpolation = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (input, location, interpolationConfig) {\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        var /** @type {?} */ split = this.splitInterpolation(input, location, interpolationConfig);\n        if (split == null)\n            return null;\n        var /** @type {?} */ expressions = [];\n        for (var /** @type {?} */ i = 0; i < split.expressions.length; ++i) {\n            var /** @type {?} */ expressionText = split.expressions[i];\n            var /** @type {?} */ sourceToLex = this._stripComments(expressionText);\n            var /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);\n            var /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length))\n                .parseChain();\n            expressions.push(ast);\n        }\n        return new ASTWithSource(new Interpolation(new ParseSpan(0, input == null ? 0 : input.length), split.strings, expressions), input, location, this.errors);\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.splitInterpolation = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (input, location, interpolationConfig) {\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);\n        var /** @type {?} */ parts = input.split(regexp);\n        if (parts.length <= 1) {\n            return null;\n        }\n        var /** @type {?} */ strings = [];\n        var /** @type {?} */ expressions = [];\n        var /** @type {?} */ offsets = [];\n        var /** @type {?} */ offset = 0;\n        for (var /** @type {?} */ i = 0; i < parts.length; i++) {\n            var /** @type {?} */ part = parts[i];\n            if (i % 2 === 0) {\n                // fixed string\n                strings.push(part);\n                offset += part.length;\n            }\n            else if (part.trim().length > 0) {\n                offset += interpolationConfig.start.length;\n                expressions.push(part);\n                offsets.push(offset);\n                offset += part.length + interpolationConfig.end.length;\n            }\n            else {\n                this._reportError('Blank expressions are not allowed in interpolated strings', input, \"at column \" + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + \" in\", location);\n                expressions.push('$implict');\n                offsets.push(offset);\n            }\n        }\n        return new SplitInterpolation(strings, expressions, offsets);\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n    Parser.prototype.wrapLiteralPrimitive = /**\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n    function (input, location) {\n        return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, input == null ? 0 : input.length), input), input, location, this.errors);\n    };\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    Parser.prototype._stripComments = /**\n     * @param {?} input\n     * @return {?}\n     */\n    function (input) {\n        var /** @type {?} */ i = this._commentStart(input);\n        return i != null ? input.substring(0, i).trim() : input;\n    };\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    Parser.prototype._commentStart = /**\n     * @param {?} input\n     * @return {?}\n     */\n    function (input) {\n        var /** @type {?} */ outerQuote = null;\n        for (var /** @type {?} */ i = 0; i < input.length - 1; i++) {\n            var /** @type {?} */ char = input.charCodeAt(i);\n            var /** @type {?} */ nextChar = input.charCodeAt(i + 1);\n            if (char === chars.$SLASH && nextChar == chars.$SLASH && outerQuote == null)\n                return i;\n            if (outerQuote === char) {\n                outerQuote = null;\n            }\n            else if (outerQuote == null && isQuote(char)) {\n                outerQuote = char;\n            }\n        }\n        return null;\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype._checkNoInterpolation = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    function (input, location, interpolationConfig) {\n        var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);\n        var /** @type {?} */ parts = input.split(regexp);\n        if (parts.length > 1) {\n            this._reportError(\"Got interpolation (\" + interpolationConfig.start + interpolationConfig.end + \") where expression was expected\", input, \"at column \" + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + \" in\", location);\n        }\n    };\n    /**\n     * @param {?} parts\n     * @param {?} partInErrIdx\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype._findInterpolationErrorColumn = /**\n     * @param {?} parts\n     * @param {?} partInErrIdx\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    function (parts, partInErrIdx, interpolationConfig) {\n        var /** @type {?} */ errLocation = '';\n        for (var /** @type {?} */ j = 0; j < partInErrIdx; j++) {\n            errLocation += j % 2 === 0 ?\n                parts[j] :\n                \"\" + interpolationConfig.start + parts[j] + interpolationConfig.end;\n        }\n        return errLocation.length;\n    };\n    return Parser;\n}());\nexport { Parser };\nfunction Parser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Parser.prototype.errors;\n    /** @type {?} */\n    Parser.prototype._lexer;\n}\nvar _ParseAST = /** @class */ (function () {\n    function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {\n        this.input = input;\n        this.location = location;\n        this.tokens = tokens;\n        this.inputLength = inputLength;\n        this.parseAction = parseAction;\n        this.errors = errors;\n        this.offset = offset;\n        this.rparensExpected = 0;\n        this.rbracketsExpected = 0;\n        this.rbracesExpected = 0;\n        this.index = 0;\n    }\n    /**\n     * @param {?} offset\n     * @return {?}\n     */\n    _ParseAST.prototype.peek = /**\n     * @param {?} offset\n     * @return {?}\n     */\n    function (offset) {\n        var /** @type {?} */ i = this.index + offset;\n        return i < this.tokens.length ? this.tokens[i] : EOF;\n    };\n    Object.defineProperty(_ParseAST.prototype, \"next\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.peek(0); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_ParseAST.prototype, \"inputIndex\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return (this.index < this.tokens.length) ? this.next.index + this.offset :\n                this.inputLength + this.offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _ParseAST.prototype.span = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) { return new ParseSpan(start, this.inputIndex); };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.advance = /**\n     * @return {?}\n     */\n    function () { this.index++; };\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    _ParseAST.prototype.optionalCharacter = /**\n     * @param {?} code\n     * @return {?}\n     */\n    function (code) {\n        if (this.next.isCharacter(code)) {\n            this.advance();\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.peekKeywordLet = /**\n     * @return {?}\n     */\n    function () { return this.next.isKeywordLet(); };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.peekKeywordAs = /**\n     * @return {?}\n     */\n    function () { return this.next.isKeywordAs(); };\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    _ParseAST.prototype.expectCharacter = /**\n     * @param {?} code\n     * @return {?}\n     */\n    function (code) {\n        if (this.optionalCharacter(code))\n            return;\n        this.error(\"Missing expected \" + String.fromCharCode(code));\n    };\n    /**\n     * @param {?} op\n     * @return {?}\n     */\n    _ParseAST.prototype.optionalOperator = /**\n     * @param {?} op\n     * @return {?}\n     */\n    function (op) {\n        if (this.next.isOperator(op)) {\n            this.advance();\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @param {?} operator\n     * @return {?}\n     */\n    _ParseAST.prototype.expectOperator = /**\n     * @param {?} operator\n     * @return {?}\n     */\n    function (operator) {\n        if (this.optionalOperator(operator))\n            return;\n        this.error(\"Missing expected operator \" + operator);\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.expectIdentifierOrKeyword = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ n = this.next;\n        if (!n.isIdentifier() && !n.isKeyword()) {\n            this.error(\"Unexpected token \" + n + \", expected identifier or keyword\");\n            return '';\n        }\n        this.advance();\n        return /** @type {?} */ (n.toString());\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.expectIdentifierOrKeywordOrString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ n = this.next;\n        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n            this.error(\"Unexpected token \" + n + \", expected identifier, keyword, or string\");\n            return '';\n        }\n        this.advance();\n        return /** @type {?} */ (n.toString());\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseChain = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ exprs = [];\n        var /** @type {?} */ start = this.inputIndex;\n        while (this.index < this.tokens.length) {\n            var /** @type {?} */ expr = this.parsePipe();\n            exprs.push(expr);\n            if (this.optionalCharacter(chars.$SEMICOLON)) {\n                if (!this.parseAction) {\n                    this.error('Binding expression cannot contain chained expression');\n                }\n                while (this.optionalCharacter(chars.$SEMICOLON)) {\n                } // read all semicolons\n            }\n            else if (this.index < this.tokens.length) {\n                this.error(\"Unexpected token '\" + this.next + \"'\");\n            }\n        }\n        if (exprs.length == 0)\n            return new EmptyExpr(this.span(start));\n        if (exprs.length == 1)\n            return exprs[0];\n        return new Chain(this.span(start), exprs);\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parsePipe = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ result = this.parseExpression();\n        if (this.optionalOperator('|')) {\n            if (this.parseAction) {\n                this.error('Cannot have a pipe in an action expression');\n            }\n            do {\n                var /** @type {?} */ name_1 = this.expectIdentifierOrKeyword();\n                var /** @type {?} */ args = [];\n                while (this.optionalCharacter(chars.$COLON)) {\n                    args.push(this.parseExpression());\n                }\n                result = new BindingPipe(this.span(result.span.start), result, name_1, args);\n            } while (this.optionalOperator('|'));\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseExpression = /**\n     * @return {?}\n     */\n    function () { return this.parseConditional(); };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseConditional = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ start = this.inputIndex;\n        var /** @type {?} */ result = this.parseLogicalOr();\n        if (this.optionalOperator('?')) {\n            var /** @type {?} */ yes = this.parsePipe();\n            var /** @type {?} */ no = void 0;\n            if (!this.optionalCharacter(chars.$COLON)) {\n                var /** @type {?} */ end = this.inputIndex;\n                var /** @type {?} */ expression = this.input.substring(start, end);\n                this.error(\"Conditional expression \" + expression + \" requires all 3 expressions\");\n                no = new EmptyExpr(this.span(start));\n            }\n            else {\n                no = this.parsePipe();\n            }\n            return new Conditional(this.span(start), result, yes, no);\n        }\n        else {\n            return result;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseLogicalOr = /**\n     * @return {?}\n     */\n    function () {\n        // '||'\n        var /** @type {?} */ result = this.parseLogicalAnd();\n        while (this.optionalOperator('||')) {\n            var /** @type {?} */ right = this.parseLogicalAnd();\n            result = new Binary(this.span(result.span.start), '||', result, right);\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseLogicalAnd = /**\n     * @return {?}\n     */\n    function () {\n        // '&&'\n        var /** @type {?} */ result = this.parseEquality();\n        while (this.optionalOperator('&&')) {\n            var /** @type {?} */ right = this.parseEquality();\n            result = new Binary(this.span(result.span.start), '&&', result, right);\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseEquality = /**\n     * @return {?}\n     */\n    function () {\n        // '==','!=','===','!=='\n        var /** @type {?} */ result = this.parseRelational();\n        while (this.next.type == TokenType.Operator) {\n            var /** @type {?} */ operator = this.next.strValue;\n            switch (operator) {\n                case '==':\n                case '===':\n                case '!=':\n                case '!==':\n                    this.advance();\n                    var /** @type {?} */ right = this.parseRelational();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseRelational = /**\n     * @return {?}\n     */\n    function () {\n        // '<', '>', '<=', '>='\n        var /** @type {?} */ result = this.parseAdditive();\n        while (this.next.type == TokenType.Operator) {\n            var /** @type {?} */ operator = this.next.strValue;\n            switch (operator) {\n                case '<':\n                case '>':\n                case '<=':\n                case '>=':\n                    this.advance();\n                    var /** @type {?} */ right = this.parseAdditive();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseAdditive = /**\n     * @return {?}\n     */\n    function () {\n        // '+', '-'\n        var /** @type {?} */ result = this.parseMultiplicative();\n        while (this.next.type == TokenType.Operator) {\n            var /** @type {?} */ operator = this.next.strValue;\n            switch (operator) {\n                case '+':\n                case '-':\n                    this.advance();\n                    var /** @type {?} */ right = this.parseMultiplicative();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseMultiplicative = /**\n     * @return {?}\n     */\n    function () {\n        // '*', '%', '/'\n        var /** @type {?} */ result = this.parsePrefix();\n        while (this.next.type == TokenType.Operator) {\n            var /** @type {?} */ operator = this.next.strValue;\n            switch (operator) {\n                case '*':\n                case '%':\n                case '/':\n                    this.advance();\n                    var /** @type {?} */ right = this.parsePrefix();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parsePrefix = /**\n     * @return {?}\n     */\n    function () {\n        if (this.next.type == TokenType.Operator) {\n            var /** @type {?} */ start = this.inputIndex;\n            var /** @type {?} */ operator = this.next.strValue;\n            var /** @type {?} */ result = void 0;\n            switch (operator) {\n                case '+':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return new Binary(this.span(start), '-', result, new LiteralPrimitive(new ParseSpan(start, start), 0));\n                case '-':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);\n                case '!':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return new PrefixNot(this.span(start), result);\n            }\n        }\n        return this.parseCallChain();\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseCallChain = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ result = this.parsePrimary();\n        while (true) {\n            if (this.optionalCharacter(chars.$PERIOD)) {\n                result = this.parseAccessMemberOrMethodCall(result, false);\n            }\n            else if (this.optionalOperator('?.')) {\n                result = this.parseAccessMemberOrMethodCall(result, true);\n            }\n            else if (this.optionalCharacter(chars.$LBRACKET)) {\n                this.rbracketsExpected++;\n                var /** @type {?} */ key = this.parsePipe();\n                this.rbracketsExpected--;\n                this.expectCharacter(chars.$RBRACKET);\n                if (this.optionalOperator('=')) {\n                    var /** @type {?} */ value = this.parseConditional();\n                    result = new KeyedWrite(this.span(result.span.start), result, key, value);\n                }\n                else {\n                    result = new KeyedRead(this.span(result.span.start), result, key);\n                }\n            }\n            else if (this.optionalCharacter(chars.$LPAREN)) {\n                this.rparensExpected++;\n                var /** @type {?} */ args = this.parseCallArguments();\n                this.rparensExpected--;\n                this.expectCharacter(chars.$RPAREN);\n                result = new FunctionCall(this.span(result.span.start), result, args);\n            }\n            else if (this.optionalOperator('!')) {\n                result = new NonNullAssert(this.span(result.span.start), result);\n            }\n            else {\n                return result;\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parsePrimary = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ start = this.inputIndex;\n        if (this.optionalCharacter(chars.$LPAREN)) {\n            this.rparensExpected++;\n            var /** @type {?} */ result = this.parsePipe();\n            this.rparensExpected--;\n            this.expectCharacter(chars.$RPAREN);\n            return result;\n        }\n        else if (this.next.isKeywordNull()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), null);\n        }\n        else if (this.next.isKeywordUndefined()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), void 0);\n        }\n        else if (this.next.isKeywordTrue()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), true);\n        }\n        else if (this.next.isKeywordFalse()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), false);\n        }\n        else if (this.next.isKeywordThis()) {\n            this.advance();\n            return new ImplicitReceiver(this.span(start));\n        }\n        else if (this.optionalCharacter(chars.$LBRACKET)) {\n            this.rbracketsExpected++;\n            var /** @type {?} */ elements = this.parseExpressionList(chars.$RBRACKET);\n            this.rbracketsExpected--;\n            this.expectCharacter(chars.$RBRACKET);\n            return new LiteralArray(this.span(start), elements);\n        }\n        else if (this.next.isCharacter(chars.$LBRACE)) {\n            return this.parseLiteralMap();\n        }\n        else if (this.next.isIdentifier()) {\n            return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);\n        }\n        else if (this.next.isNumber()) {\n            var /** @type {?} */ value = this.next.toNumber();\n            this.advance();\n            return new LiteralPrimitive(this.span(start), value);\n        }\n        else if (this.next.isString()) {\n            var /** @type {?} */ literalValue = this.next.toString();\n            this.advance();\n            return new LiteralPrimitive(this.span(start), literalValue);\n        }\n        else if (this.index >= this.tokens.length) {\n            this.error(\"Unexpected end of expression: \" + this.input);\n            return new EmptyExpr(this.span(start));\n        }\n        else {\n            this.error(\"Unexpected token \" + this.next);\n            return new EmptyExpr(this.span(start));\n        }\n    };\n    /**\n     * @param {?} terminator\n     * @return {?}\n     */\n    _ParseAST.prototype.parseExpressionList = /**\n     * @param {?} terminator\n     * @return {?}\n     */\n    function (terminator) {\n        var /** @type {?} */ result = [];\n        if (!this.next.isCharacter(terminator)) {\n            do {\n                result.push(this.parsePipe());\n            } while (this.optionalCharacter(chars.$COMMA));\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseLiteralMap = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ keys = [];\n        var /** @type {?} */ values = [];\n        var /** @type {?} */ start = this.inputIndex;\n        this.expectCharacter(chars.$LBRACE);\n        if (!this.optionalCharacter(chars.$RBRACE)) {\n            this.rbracesExpected++;\n            do {\n                var /** @type {?} */ quoted = this.next.isString();\n                var /** @type {?} */ key = this.expectIdentifierOrKeywordOrString();\n                keys.push({ key: key, quoted: quoted });\n                this.expectCharacter(chars.$COLON);\n                values.push(this.parsePipe());\n            } while (this.optionalCharacter(chars.$COMMA));\n            this.rbracesExpected--;\n            this.expectCharacter(chars.$RBRACE);\n        }\n        return new LiteralMap(this.span(start), keys, values);\n    };\n    /**\n     * @param {?} receiver\n     * @param {?=} isSafe\n     * @return {?}\n     */\n    _ParseAST.prototype.parseAccessMemberOrMethodCall = /**\n     * @param {?} receiver\n     * @param {?=} isSafe\n     * @return {?}\n     */\n    function (receiver, isSafe) {\n        if (isSafe === void 0) { isSafe = false; }\n        var /** @type {?} */ start = receiver.span.start;\n        var /** @type {?} */ id = this.expectIdentifierOrKeyword();\n        if (this.optionalCharacter(chars.$LPAREN)) {\n            this.rparensExpected++;\n            var /** @type {?} */ args = this.parseCallArguments();\n            this.expectCharacter(chars.$RPAREN);\n            this.rparensExpected--;\n            var /** @type {?} */ span = this.span(start);\n            return isSafe ? new SafeMethodCall(span, receiver, id, args) :\n                new MethodCall(span, receiver, id, args);\n        }\n        else {\n            if (isSafe) {\n                if (this.optionalOperator('=')) {\n                    this.error('The \\'?.\\' operator cannot be used in the assignment');\n                    return new EmptyExpr(this.span(start));\n                }\n                else {\n                    return new SafePropertyRead(this.span(start), receiver, id);\n                }\n            }\n            else {\n                if (this.optionalOperator('=')) {\n                    if (!this.parseAction) {\n                        this.error('Bindings cannot contain assignments');\n                        return new EmptyExpr(this.span(start));\n                    }\n                    var /** @type {?} */ value = this.parseConditional();\n                    return new PropertyWrite(this.span(start), receiver, id, value);\n                }\n                else {\n                    return new PropertyRead(this.span(start), receiver, id);\n                }\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseCallArguments = /**\n     * @return {?}\n     */\n    function () {\n        if (this.next.isCharacter(chars.$RPAREN))\n            return [];\n        var /** @type {?} */ positionals = [];\n        do {\n            positionals.push(this.parsePipe());\n        } while (this.optionalCharacter(chars.$COMMA));\n        return /** @type {?} */ (positionals);\n    };\n    /**\n     * An identifier, a keyword, a string with an optional `-` in between.\n     */\n    /**\n     * An identifier, a keyword, a string with an optional `-` in between.\n     * @return {?}\n     */\n    _ParseAST.prototype.expectTemplateBindingKey = /**\n     * An identifier, a keyword, a string with an optional `-` in between.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ result = '';\n        var /** @type {?} */ operatorFound = false;\n        do {\n            result += this.expectIdentifierOrKeywordOrString();\n            operatorFound = this.optionalOperator('-');\n            if (operatorFound) {\n                result += '-';\n            }\n        } while (operatorFound);\n        return result.toString();\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseTemplateBindings = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ bindings = [];\n        var /** @type {?} */ prefix = /** @type {?} */ ((null));\n        var /** @type {?} */ warnings = [];\n        while (this.index < this.tokens.length) {\n            var /** @type {?} */ start = this.inputIndex;\n            var /** @type {?} */ keyIsVar = this.peekKeywordLet();\n            if (keyIsVar) {\n                this.advance();\n            }\n            var /** @type {?} */ rawKey = this.expectTemplateBindingKey();\n            var /** @type {?} */ key = rawKey;\n            if (!keyIsVar) {\n                if (prefix == null) {\n                    prefix = key;\n                }\n                else {\n                    key = prefix + key[0].toUpperCase() + key.substring(1);\n                }\n            }\n            this.optionalCharacter(chars.$COLON);\n            var /** @type {?} */ name_2 = /** @type {?} */ ((null));\n            var /** @type {?} */ expression = /** @type {?} */ ((null));\n            if (keyIsVar) {\n                if (this.optionalOperator('=')) {\n                    name_2 = this.expectTemplateBindingKey();\n                }\n                else {\n                    name_2 = '\\$implicit';\n                }\n            }\n            else if (this.peekKeywordAs()) {\n                var /** @type {?} */ letStart = this.inputIndex;\n                this.advance(); // consume `as`\n                name_2 = rawKey;\n                key = this.expectTemplateBindingKey(); // read local var name\n                keyIsVar = true;\n            }\n            else if (this.next !== EOF && !this.peekKeywordLet()) {\n                var /** @type {?} */ start_1 = this.inputIndex;\n                var /** @type {?} */ ast = this.parsePipe();\n                var /** @type {?} */ source = this.input.substring(start_1 - this.offset, this.inputIndex - this.offset);\n                expression = new ASTWithSource(ast, source, this.location, this.errors);\n            }\n            bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name_2, expression));\n            if (this.peekKeywordAs() && !keyIsVar) {\n                var /** @type {?} */ letStart = this.inputIndex;\n                this.advance(); // consume `as`\n                var /** @type {?} */ letName = this.expectTemplateBindingKey(); // read local var name\n                bindings.push(new TemplateBinding(this.span(letStart), letName, true, key, /** @type {?} */ ((null))));\n            }\n            if (!this.optionalCharacter(chars.$SEMICOLON)) {\n                this.optionalCharacter(chars.$COMMA);\n            }\n        }\n        return new TemplateBindingParseResult(bindings, warnings, this.errors);\n    };\n    /**\n     * @param {?} message\n     * @param {?=} index\n     * @return {?}\n     */\n    _ParseAST.prototype.error = /**\n     * @param {?} message\n     * @param {?=} index\n     * @return {?}\n     */\n    function (message, index) {\n        if (index === void 0) { index = null; }\n        this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));\n        this.skip();\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    _ParseAST.prototype.locationText = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        if (index === void 0) { index = null; }\n        if (index == null)\n            index = this.index;\n        return (index < this.tokens.length) ? \"at column \" + (this.tokens[index].index + 1) + \" in\" :\n            \"at the end of the expression\";\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.skip = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ n = this.next;\n        while (this.index < this.tokens.length && !n.isCharacter(chars.$SEMICOLON) &&\n            (this.rparensExpected <= 0 || !n.isCharacter(chars.$RPAREN)) &&\n            (this.rbracesExpected <= 0 || !n.isCharacter(chars.$RBRACE)) &&\n            (this.rbracketsExpected <= 0 || !n.isCharacter(chars.$RBRACKET))) {\n            if (this.next.isError()) {\n                this.errors.push(new ParserError(/** @type {?} */ ((this.next.toString())), this.input, this.locationText(), this.location));\n            }\n            this.advance();\n            n = this.next;\n        }\n    };\n    return _ParseAST;\n}());\nexport { _ParseAST };\nfunction _ParseAST_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _ParseAST.prototype.rparensExpected;\n    /** @type {?} */\n    _ParseAST.prototype.rbracketsExpected;\n    /** @type {?} */\n    _ParseAST.prototype.rbracesExpected;\n    /** @type {?} */\n    _ParseAST.prototype.index;\n    /** @type {?} */\n    _ParseAST.prototype.input;\n    /** @type {?} */\n    _ParseAST.prototype.location;\n    /** @type {?} */\n    _ParseAST.prototype.tokens;\n    /** @type {?} */\n    _ParseAST.prototype.inputLength;\n    /** @type {?} */\n    _ParseAST.prototype.parseAction;\n    /** @type {?} */\n    _ParseAST.prototype.errors;\n    /** @type {?} */\n    _ParseAST.prototype.offset;\n}\nvar SimpleExpressionChecker = /** @class */ (function () {\n    function SimpleExpressionChecker() {\n        this.errors = [];\n    }\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    SimpleExpressionChecker.check = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var /** @type {?} */ s = new SimpleExpressionChecker();\n        ast.visit(s);\n        return s.errors;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitImplicitReceiver = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitInterpolation = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitLiteralPrimitive = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitPropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitPropertyWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitSafePropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitSafeMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitFunctionCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { this.visitAll(ast.expressions); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { this.visitAll(ast.values); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitBinary = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitPrefixNot = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitNonNullAssert = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitConditional = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { this.errors.push('pipes'); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitKeyedRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitKeyedWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} asts\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitAll = /**\n     * @param {?} asts\n     * @return {?}\n     */\n    function (asts) {\n        var _this = this;\n        return asts.map(function (node) { return node.visit(_this); });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitChain = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitQuote = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    return SimpleExpressionChecker;\n}());\nfunction SimpleExpressionChecker_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SimpleExpressionChecker.prototype.errors;\n}\n//# sourceMappingURL=parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport * as chars from './chars';\nimport { identifierModuleUrl, identifierName } from './compile_metadata';\nvar ParseLocation = /** @class */ (function () {\n    function ParseLocation(file, offset, line, col) {\n        this.file = file;\n        this.offset = offset;\n        this.line = line;\n        this.col = col;\n    }\n    /**\n     * @return {?}\n     */\n    ParseLocation.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return this.offset != null ? this.file.url + \"@\" + this.line + \":\" + this.col : this.file.url;\n    };\n    /**\n     * @param {?} delta\n     * @return {?}\n     */\n    ParseLocation.prototype.moveBy = /**\n     * @param {?} delta\n     * @return {?}\n     */\n    function (delta) {\n        var /** @type {?} */ source = this.file.content;\n        var /** @type {?} */ len = source.length;\n        var /** @type {?} */ offset = this.offset;\n        var /** @type {?} */ line = this.line;\n        var /** @type {?} */ col = this.col;\n        while (offset > 0 && delta < 0) {\n            offset--;\n            delta++;\n            var /** @type {?} */ ch = source.charCodeAt(offset);\n            if (ch == chars.$LF) {\n                line--;\n                var /** @type {?} */ priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode(chars.$LF));\n                col = priorLine > 0 ? offset - priorLine : offset;\n            }\n            else {\n                col--;\n            }\n        }\n        while (offset < len && delta > 0) {\n            var /** @type {?} */ ch = source.charCodeAt(offset);\n            offset++;\n            delta--;\n            if (ch == chars.$LF) {\n                line++;\n                col = 0;\n            }\n            else {\n                col++;\n            }\n        }\n        return new ParseLocation(this.file, offset, line, col);\n    };\n    // Return the source around the location\n    // Up to `maxChars` or `maxLines` on each side of the location\n    /**\n     * @param {?} maxChars\n     * @param {?} maxLines\n     * @return {?}\n     */\n    ParseLocation.prototype.getContext = /**\n     * @param {?} maxChars\n     * @param {?} maxLines\n     * @return {?}\n     */\n    function (maxChars, maxLines) {\n        var /** @type {?} */ content = this.file.content;\n        var /** @type {?} */ startOffset = this.offset;\n        if (startOffset != null) {\n            if (startOffset > content.length - 1) {\n                startOffset = content.length - 1;\n            }\n            var /** @type {?} */ endOffset = startOffset;\n            var /** @type {?} */ ctxChars = 0;\n            var /** @type {?} */ ctxLines = 0;\n            while (ctxChars < maxChars && startOffset > 0) {\n                startOffset--;\n                ctxChars++;\n                if (content[startOffset] == '\\n') {\n                    if (++ctxLines == maxLines) {\n                        break;\n                    }\n                }\n            }\n            ctxChars = 0;\n            ctxLines = 0;\n            while (ctxChars < maxChars && endOffset < content.length - 1) {\n                endOffset++;\n                ctxChars++;\n                if (content[endOffset] == '\\n') {\n                    if (++ctxLines == maxLines) {\n                        break;\n                    }\n                }\n            }\n            return {\n                before: content.substring(startOffset, this.offset),\n                after: content.substring(this.offset, endOffset + 1),\n            };\n        }\n        return null;\n    };\n    return ParseLocation;\n}());\nexport { ParseLocation };\nfunction ParseLocation_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParseLocation.prototype.file;\n    /** @type {?} */\n    ParseLocation.prototype.offset;\n    /** @type {?} */\n    ParseLocation.prototype.line;\n    /** @type {?} */\n    ParseLocation.prototype.col;\n}\nvar ParseSourceFile = /** @class */ (function () {\n    function ParseSourceFile(content, url) {\n        this.content = content;\n        this.url = url;\n    }\n    return ParseSourceFile;\n}());\nexport { ParseSourceFile };\nfunction ParseSourceFile_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParseSourceFile.prototype.content;\n    /** @type {?} */\n    ParseSourceFile.prototype.url;\n}\nvar ParseSourceSpan = /** @class */ (function () {\n    function ParseSourceSpan(start, end, details) {\n        if (details === void 0) { details = null; }\n        this.start = start;\n        this.end = end;\n        this.details = details;\n    }\n    /**\n     * @return {?}\n     */\n    ParseSourceSpan.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return this.start.file.content.substring(this.start.offset, this.end.offset);\n    };\n    return ParseSourceSpan;\n}());\nexport { ParseSourceSpan };\nfunction ParseSourceSpan_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParseSourceSpan.prototype.start;\n    /** @type {?} */\n    ParseSourceSpan.prototype.end;\n    /** @type {?} */\n    ParseSourceSpan.prototype.details;\n}\n/** @enum {number} */\nvar ParseErrorLevel = {\n    WARNING: 0,\n    ERROR: 1,\n};\nexport { ParseErrorLevel };\nParseErrorLevel[ParseErrorLevel.WARNING] = \"WARNING\";\nParseErrorLevel[ParseErrorLevel.ERROR] = \"ERROR\";\nvar ParseError = /** @class */ (function () {\n    function ParseError(span, msg, level) {\n        if (level === void 0) { level = ParseErrorLevel.ERROR; }\n        this.span = span;\n        this.msg = msg;\n        this.level = level;\n    }\n    /**\n     * @return {?}\n     */\n    ParseError.prototype.contextualMessage = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ ctx = this.span.start.getContext(100, 3);\n        return ctx ? this.msg + \" (\\\"\" + ctx.before + \"[\" + ParseErrorLevel[this.level] + \" ->]\" + ctx.after + \"\\\")\" :\n            this.msg;\n    };\n    /**\n     * @return {?}\n     */\n    ParseError.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ details = this.span.details ? \", \" + this.span.details : '';\n        return this.contextualMessage() + \": \" + this.span.start + details;\n    };\n    return ParseError;\n}());\nexport { ParseError };\nfunction ParseError_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParseError.prototype.span;\n    /** @type {?} */\n    ParseError.prototype.msg;\n    /** @type {?} */\n    ParseError.prototype.level;\n}\n/**\n * @param {?} kind\n * @param {?} type\n * @return {?}\n */\nexport function typeSourceSpan(kind, type) {\n    var /** @type {?} */ moduleUrl = identifierModuleUrl(type);\n    var /** @type {?} */ sourceFileName = moduleUrl != null ? \"in \" + kind + \" \" + identifierName(type) + \" in \" + moduleUrl :\n        \"in \" + kind + \" \" + identifierName(type);\n    var /** @type {?} */ sourceFile = new ParseSourceFile('', sourceFileName);\n    return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));\n}\n//# sourceMappingURL=parse_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as chars from '../chars';\nimport { ParseError, ParseLocation, ParseSourceFile, ParseSourceSpan } from '../parse_util';\nimport { DEFAULT_INTERPOLATION_CONFIG } from './interpolation_config';\nimport { NAMED_ENTITIES, TagContentType } from './tags';\n/** @enum {number} */\nvar TokenType = {\n    TAG_OPEN_START: 0,\n    TAG_OPEN_END: 1,\n    TAG_OPEN_END_VOID: 2,\n    TAG_CLOSE: 3,\n    TEXT: 4,\n    ESCAPABLE_RAW_TEXT: 5,\n    RAW_TEXT: 6,\n    COMMENT_START: 7,\n    COMMENT_END: 8,\n    CDATA_START: 9,\n    CDATA_END: 10,\n    ATTR_NAME: 11,\n    ATTR_VALUE: 12,\n    DOC_TYPE: 13,\n    EXPANSION_FORM_START: 14,\n    EXPANSION_CASE_VALUE: 15,\n    EXPANSION_CASE_EXP_START: 16,\n    EXPANSION_CASE_EXP_END: 17,\n    EXPANSION_FORM_END: 18,\n    EOF: 19,\n};\nexport { TokenType };\nTokenType[TokenType.TAG_OPEN_START] = \"TAG_OPEN_START\";\nTokenType[TokenType.TAG_OPEN_END] = \"TAG_OPEN_END\";\nTokenType[TokenType.TAG_OPEN_END_VOID] = \"TAG_OPEN_END_VOID\";\nTokenType[TokenType.TAG_CLOSE] = \"TAG_CLOSE\";\nTokenType[TokenType.TEXT] = \"TEXT\";\nTokenType[TokenType.ESCAPABLE_RAW_TEXT] = \"ESCAPABLE_RAW_TEXT\";\nTokenType[TokenType.RAW_TEXT] = \"RAW_TEXT\";\nTokenType[TokenType.COMMENT_START] = \"COMMENT_START\";\nTokenType[TokenType.COMMENT_END] = \"COMMENT_END\";\nTokenType[TokenType.CDATA_START] = \"CDATA_START\";\nTokenType[TokenType.CDATA_END] = \"CDATA_END\";\nTokenType[TokenType.ATTR_NAME] = \"ATTR_NAME\";\nTokenType[TokenType.ATTR_VALUE] = \"ATTR_VALUE\";\nTokenType[TokenType.DOC_TYPE] = \"DOC_TYPE\";\nTokenType[TokenType.EXPANSION_FORM_START] = \"EXPANSION_FORM_START\";\nTokenType[TokenType.EXPANSION_CASE_VALUE] = \"EXPANSION_CASE_VALUE\";\nTokenType[TokenType.EXPANSION_CASE_EXP_START] = \"EXPANSION_CASE_EXP_START\";\nTokenType[TokenType.EXPANSION_CASE_EXP_END] = \"EXPANSION_CASE_EXP_END\";\nTokenType[TokenType.EXPANSION_FORM_END] = \"EXPANSION_FORM_END\";\nTokenType[TokenType.EOF] = \"EOF\";\nvar Token = /** @class */ (function () {\n    function Token(type, parts, sourceSpan) {\n        this.type = type;\n        this.parts = parts;\n        this.sourceSpan = sourceSpan;\n    }\n    return Token;\n}());\nexport { Token };\nfunction Token_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Token.prototype.type;\n    /** @type {?} */\n    Token.prototype.parts;\n    /** @type {?} */\n    Token.prototype.sourceSpan;\n}\nvar TokenError = /** @class */ (function (_super) {\n    tslib_1.__extends(TokenError, _super);\n    function TokenError(errorMsg, tokenType, span) {\n        var _this = _super.call(this, span, errorMsg) || this;\n        _this.tokenType = tokenType;\n        return _this;\n    }\n    return TokenError;\n}(ParseError));\nexport { TokenError };\nfunction TokenError_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TokenError.prototype.tokenType;\n}\nvar TokenizeResult = /** @class */ (function () {\n    function TokenizeResult(tokens, errors) {\n        this.tokens = tokens;\n        this.errors = errors;\n    }\n    return TokenizeResult;\n}());\nexport { TokenizeResult };\nfunction TokenizeResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TokenizeResult.prototype.tokens;\n    /** @type {?} */\n    TokenizeResult.prototype.errors;\n}\n/**\n * @param {?} source\n * @param {?} url\n * @param {?} getTagDefinition\n * @param {?=} tokenizeExpansionForms\n * @param {?=} interpolationConfig\n * @return {?}\n */\nexport function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {\n    if (tokenizeExpansionForms === void 0) { tokenizeExpansionForms = false; }\n    if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n    return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig)\n        .tokenize();\n}\nvar /** @type {?} */ _CR_OR_CRLF_REGEXP = /\\r\\n?/g;\n/**\n * @param {?} charCode\n * @return {?}\n */\nfunction _unexpectedCharacterErrorMsg(charCode) {\n    var /** @type {?} */ char = charCode === chars.$EOF ? 'EOF' : String.fromCharCode(charCode);\n    return \"Unexpected character \\\"\" + char + \"\\\"\";\n}\n/**\n * @param {?} entitySrc\n * @return {?}\n */\nfunction _unknownEntityErrorMsg(entitySrc) {\n    return \"Unknown entity \\\"\" + entitySrc + \"\\\" - use the \\\"&#<decimal>;\\\" or  \\\"&#x<hex>;\\\" syntax\";\n}\nvar _ControlFlowError = /** @class */ (function () {\n    function _ControlFlowError(error) {\n        this.error = error;\n    }\n    return _ControlFlowError;\n}());\nfunction _ControlFlowError_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _ControlFlowError.prototype.error;\n}\nvar _Tokenizer = /** @class */ (function () {\n    /**\n     * @param _file The html source\n     * @param _getTagDefinition\n     * @param _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)\n     * @param _interpolationConfig\n     */\n    function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {\n        if (_interpolationConfig === void 0) { _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        this._file = _file;\n        this._getTagDefinition = _getTagDefinition;\n        this._tokenizeIcu = _tokenizeIcu;\n        this._interpolationConfig = _interpolationConfig;\n        this._peek = -1;\n        this._nextPeek = -1;\n        this._index = -1;\n        this._line = 0;\n        this._column = -1;\n        this._expansionCaseStack = [];\n        this._inInterpolation = false;\n        this.tokens = [];\n        this.errors = [];\n        this._input = _file.content;\n        this._length = _file.content.length;\n        this._advance();\n    }\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    _Tokenizer.prototype._processCarriageReturns = /**\n     * @param {?} content\n     * @return {?}\n     */\n    function (content) {\n        // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream\n        // In order to keep the original position in the source, we can not\n        // pre-process it.\n        // Instead CRs are processed right before instantiating the tokens.\n        return content.replace(_CR_OR_CRLF_REGEXP, '\\n');\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype.tokenize = /**\n     * @return {?}\n     */\n    function () {\n        while (this._peek !== chars.$EOF) {\n            var /** @type {?} */ start = this._getLocation();\n            try {\n                if (this._attemptCharCode(chars.$LT)) {\n                    if (this._attemptCharCode(chars.$BANG)) {\n                        if (this._attemptCharCode(chars.$LBRACKET)) {\n                            this._consumeCdata(start);\n                        }\n                        else if (this._attemptCharCode(chars.$MINUS)) {\n                            this._consumeComment(start);\n                        }\n                        else {\n                            this._consumeDocType(start);\n                        }\n                    }\n                    else if (this._attemptCharCode(chars.$SLASH)) {\n                        this._consumeTagClose(start);\n                    }\n                    else {\n                        this._consumeTagOpen(start);\n                    }\n                }\n                else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {\n                    this._consumeText();\n                }\n            }\n            catch (/** @type {?} */ e) {\n                if (e instanceof _ControlFlowError) {\n                    this.errors.push(e.error);\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        this._beginToken(TokenType.EOF);\n        this._endToken([]);\n        return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);\n    };\n    /**\n     * \\@internal\n     * @return {?} whether an ICU token has been created\n     */\n    _Tokenizer.prototype._tokenizeExpansionForm = /**\n     * \\@internal\n     * @return {?} whether an ICU token has been created\n     */\n    function () {\n        if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\n            this._consumeExpansionFormStart();\n            return true;\n        }\n        if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {\n            this._consumeExpansionCaseStart();\n            return true;\n        }\n        if (this._peek === chars.$RBRACE) {\n            if (this._isInExpansionCase()) {\n                this._consumeExpansionCaseEnd();\n                return true;\n            }\n            if (this._isInExpansionForm()) {\n                this._consumeExpansionFormEnd();\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._getLocation = /**\n     * @return {?}\n     */\n    function () {\n        return new ParseLocation(this._file, this._index, this._line, this._column);\n    };\n    /**\n     * @param {?=} start\n     * @param {?=} end\n     * @return {?}\n     */\n    _Tokenizer.prototype._getSpan = /**\n     * @param {?=} start\n     * @param {?=} end\n     * @return {?}\n     */\n    function (start, end) {\n        if (start === void 0) { start = this._getLocation(); }\n        if (end === void 0) { end = this._getLocation(); }\n        return new ParseSourceSpan(start, end);\n    };\n    /**\n     * @param {?} type\n     * @param {?=} start\n     * @return {?}\n     */\n    _Tokenizer.prototype._beginToken = /**\n     * @param {?} type\n     * @param {?=} start\n     * @return {?}\n     */\n    function (type, start) {\n        if (start === void 0) { start = this._getLocation(); }\n        this._currentTokenStart = start;\n        this._currentTokenType = type;\n    };\n    /**\n     * @param {?} parts\n     * @param {?=} end\n     * @return {?}\n     */\n    _Tokenizer.prototype._endToken = /**\n     * @param {?} parts\n     * @param {?=} end\n     * @return {?}\n     */\n    function (parts, end) {\n        if (end === void 0) { end = this._getLocation(); }\n        var /** @type {?} */ token = new Token(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));\n        this.tokens.push(token);\n        this._currentTokenStart = /** @type {?} */ ((null));\n        this._currentTokenType = /** @type {?} */ ((null));\n        return token;\n    };\n    /**\n     * @param {?} msg\n     * @param {?} span\n     * @return {?}\n     */\n    _Tokenizer.prototype._createError = /**\n     * @param {?} msg\n     * @param {?} span\n     * @return {?}\n     */\n    function (msg, span) {\n        if (this._isInExpansionForm()) {\n            msg += \" (Do you have an unescaped \\\"{\\\" in your template? Use \\\"{{ '{' }}\\\") to escape it.)\";\n        }\n        var /** @type {?} */ error = new TokenError(msg, this._currentTokenType, span);\n        this._currentTokenStart = /** @type {?} */ ((null));\n        this._currentTokenType = /** @type {?} */ ((null));\n        return new _ControlFlowError(error);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._advance = /**\n     * @return {?}\n     */\n    function () {\n        if (this._index >= this._length) {\n            throw this._createError(_unexpectedCharacterErrorMsg(chars.$EOF), this._getSpan());\n        }\n        if (this._peek === chars.$LF) {\n            this._line++;\n            this._column = 0;\n        }\n        else if (this._peek !== chars.$LF && this._peek !== chars.$CR) {\n            this._column++;\n        }\n        this._index++;\n        this._peek = this._index >= this._length ? chars.$EOF : this._input.charCodeAt(this._index);\n        this._nextPeek =\n            this._index + 1 >= this._length ? chars.$EOF : this._input.charCodeAt(this._index + 1);\n    };\n    /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    _Tokenizer.prototype._attemptCharCode = /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    function (charCode) {\n        if (this._peek === charCode) {\n            this._advance();\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    _Tokenizer.prototype._attemptCharCodeCaseInsensitive = /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    function (charCode) {\n        if (compareCharCodeCaseInsensitive(this._peek, charCode)) {\n            this._advance();\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    _Tokenizer.prototype._requireCharCode = /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    function (charCode) {\n        var /** @type {?} */ location = this._getLocation();\n        if (!this._attemptCharCode(charCode)) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));\n        }\n    };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    _Tokenizer.prototype._attemptStr = /**\n     * @param {?} chars\n     * @return {?}\n     */\n    function (chars) {\n        var /** @type {?} */ len = chars.length;\n        if (this._index + len > this._length) {\n            return false;\n        }\n        var /** @type {?} */ initialPosition = this._savePosition();\n        for (var /** @type {?} */ i = 0; i < len; i++) {\n            if (!this._attemptCharCode(chars.charCodeAt(i))) {\n                // If attempting to parse the string fails, we want to reset the parser\n                // to where it was before the attempt\n                this._restorePosition(initialPosition);\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    _Tokenizer.prototype._attemptStrCaseInsensitive = /**\n     * @param {?} chars\n     * @return {?}\n     */\n    function (chars) {\n        for (var /** @type {?} */ i = 0; i < chars.length; i++) {\n            if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    _Tokenizer.prototype._requireStr = /**\n     * @param {?} chars\n     * @return {?}\n     */\n    function (chars) {\n        var /** @type {?} */ location = this._getLocation();\n        if (!this._attemptStr(chars)) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));\n        }\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    _Tokenizer.prototype._attemptCharCodeUntilFn = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        while (!predicate(this._peek)) {\n            this._advance();\n        }\n    };\n    /**\n     * @param {?} predicate\n     * @param {?} len\n     * @return {?}\n     */\n    _Tokenizer.prototype._requireCharCodeUntilFn = /**\n     * @param {?} predicate\n     * @param {?} len\n     * @return {?}\n     */\n    function (predicate, len) {\n        var /** @type {?} */ start = this._getLocation();\n        this._attemptCharCodeUntilFn(predicate);\n        if (this._index - start.offset < len) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));\n        }\n    };\n    /**\n     * @param {?} char\n     * @return {?}\n     */\n    _Tokenizer.prototype._attemptUntilChar = /**\n     * @param {?} char\n     * @return {?}\n     */\n    function (char) {\n        while (this._peek !== char) {\n            this._advance();\n        }\n    };\n    /**\n     * @param {?} decodeEntities\n     * @return {?}\n     */\n    _Tokenizer.prototype._readChar = /**\n     * @param {?} decodeEntities\n     * @return {?}\n     */\n    function (decodeEntities) {\n        if (decodeEntities && this._peek === chars.$AMPERSAND) {\n            return this._decodeEntity();\n        }\n        else {\n            var /** @type {?} */ index = this._index;\n            this._advance();\n            return this._input[index];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._decodeEntity = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ start = this._getLocation();\n        this._advance();\n        if (this._attemptCharCode(chars.$HASH)) {\n            var /** @type {?} */ isHex = this._attemptCharCode(chars.$x) || this._attemptCharCode(chars.$X);\n            var /** @type {?} */ numberStart = this._getLocation().offset;\n            this._attemptCharCodeUntilFn(isDigitEntityEnd);\n            if (this._peek != chars.$SEMICOLON) {\n                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n            }\n            this._advance();\n            var /** @type {?} */ strNum = this._input.substring(numberStart, this._index - 1);\n            try {\n                var /** @type {?} */ charCode = parseInt(strNum, isHex ? 16 : 10);\n                return String.fromCharCode(charCode);\n            }\n            catch (/** @type {?} */ e) {\n                var /** @type {?} */ entity = this._input.substring(start.offset + 1, this._index - 1);\n                throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));\n            }\n        }\n        else {\n            var /** @type {?} */ startPosition = this._savePosition();\n            this._attemptCharCodeUntilFn(isNamedEntityEnd);\n            if (this._peek != chars.$SEMICOLON) {\n                this._restorePosition(startPosition);\n                return '&';\n            }\n            this._advance();\n            var /** @type {?} */ name_1 = this._input.substring(start.offset + 1, this._index - 1);\n            var /** @type {?} */ char = NAMED_ENTITIES[name_1];\n            if (!char) {\n                throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));\n            }\n            return char;\n        }\n    };\n    /**\n     * @param {?} decodeEntities\n     * @param {?} firstCharOfEnd\n     * @param {?} attemptEndRest\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeRawText = /**\n     * @param {?} decodeEntities\n     * @param {?} firstCharOfEnd\n     * @param {?} attemptEndRest\n     * @return {?}\n     */\n    function (decodeEntities, firstCharOfEnd, attemptEndRest) {\n        var /** @type {?} */ tagCloseStart;\n        var /** @type {?} */ textStart = this._getLocation();\n        this._beginToken(decodeEntities ? TokenType.ESCAPABLE_RAW_TEXT : TokenType.RAW_TEXT, textStart);\n        var /** @type {?} */ parts = [];\n        while (true) {\n            tagCloseStart = this._getLocation();\n            if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {\n                break;\n            }\n            if (this._index > tagCloseStart.offset) {\n                // add the characters consumed by the previous if statement to the output\n                parts.push(this._input.substring(tagCloseStart.offset, this._index));\n            }\n            while (this._peek !== firstCharOfEnd) {\n                parts.push(this._readChar(decodeEntities));\n            }\n        }\n        return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeComment = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        var _this = this;\n        this._beginToken(TokenType.COMMENT_START, start);\n        this._requireCharCode(chars.$MINUS);\n        this._endToken([]);\n        var /** @type {?} */ textToken = this._consumeRawText(false, chars.$MINUS, function () { return _this._attemptStr('->'); });\n        this._beginToken(TokenType.COMMENT_END, textToken.sourceSpan.end);\n        this._endToken([]);\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeCdata = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        var _this = this;\n        this._beginToken(TokenType.CDATA_START, start);\n        this._requireStr('CDATA[');\n        this._endToken([]);\n        var /** @type {?} */ textToken = this._consumeRawText(false, chars.$RBRACKET, function () { return _this._attemptStr(']>'); });\n        this._beginToken(TokenType.CDATA_END, textToken.sourceSpan.end);\n        this._endToken([]);\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeDocType = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        this._beginToken(TokenType.DOC_TYPE, start);\n        this._attemptUntilChar(chars.$GT);\n        this._advance();\n        this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumePrefixAndName = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ nameOrPrefixStart = this._index;\n        var /** @type {?} */ prefix = /** @type {?} */ ((null));\n        while (this._peek !== chars.$COLON && !isPrefixEnd(this._peek)) {\n            this._advance();\n        }\n        var /** @type {?} */ nameStart;\n        if (this._peek === chars.$COLON) {\n            this._advance();\n            prefix = this._input.substring(nameOrPrefixStart, this._index - 1);\n            nameStart = this._index;\n        }\n        else {\n            nameStart = nameOrPrefixStart;\n        }\n        this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);\n        var /** @type {?} */ name = this._input.substring(nameStart, this._index);\n        return [prefix, name];\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeTagOpen = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        var /** @type {?} */ savedPos = this._savePosition();\n        var /** @type {?} */ tagName;\n        var /** @type {?} */ lowercaseTagName;\n        try {\n            if (!chars.isAsciiLetter(this._peek)) {\n                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n            }\n            var /** @type {?} */ nameStart = this._index;\n            this._consumeTagOpenStart(start);\n            tagName = this._input.substring(nameStart, this._index);\n            lowercaseTagName = tagName.toLowerCase();\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            while (this._peek !== chars.$SLASH && this._peek !== chars.$GT) {\n                this._consumeAttributeName();\n                this._attemptCharCodeUntilFn(isNotWhitespace);\n                if (this._attemptCharCode(chars.$EQ)) {\n                    this._attemptCharCodeUntilFn(isNotWhitespace);\n                    this._consumeAttributeValue();\n                }\n                this._attemptCharCodeUntilFn(isNotWhitespace);\n            }\n            this._consumeTagOpenEnd();\n        }\n        catch (/** @type {?} */ e) {\n            if (e instanceof _ControlFlowError) {\n                // When the start tag is invalid, assume we want a \"<\"\n                this._restorePosition(savedPos);\n                // Back to back text tokens are merged at the end\n                this._beginToken(TokenType.TEXT, start);\n                this._endToken(['<']);\n                return;\n            }\n            throw e;\n        }\n        var /** @type {?} */ contentTokenType = this._getTagDefinition(tagName).contentType;\n        if (contentTokenType === TagContentType.RAW_TEXT) {\n            this._consumeRawTextWithTagClose(lowercaseTagName, false);\n        }\n        else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {\n            this._consumeRawTextWithTagClose(lowercaseTagName, true);\n        }\n    };\n    /**\n     * @param {?} lowercaseTagName\n     * @param {?} decodeEntities\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeRawTextWithTagClose = /**\n     * @param {?} lowercaseTagName\n     * @param {?} decodeEntities\n     * @return {?}\n     */\n    function (lowercaseTagName, decodeEntities) {\n        var _this = this;\n        var /** @type {?} */ textToken = this._consumeRawText(decodeEntities, chars.$LT, function () {\n            if (!_this._attemptCharCode(chars.$SLASH))\n                return false;\n            _this._attemptCharCodeUntilFn(isNotWhitespace);\n            if (!_this._attemptStrCaseInsensitive(lowercaseTagName))\n                return false;\n            _this._attemptCharCodeUntilFn(isNotWhitespace);\n            return _this._attemptCharCode(chars.$GT);\n        });\n        this._beginToken(TokenType.TAG_CLOSE, textToken.sourceSpan.end);\n        this._endToken([/** @type {?} */ ((null)), lowercaseTagName]);\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeTagOpenStart = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        this._beginToken(TokenType.TAG_OPEN_START, start);\n        var /** @type {?} */ parts = this._consumePrefixAndName();\n        this._endToken(parts);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeAttributeName = /**\n     * @return {?}\n     */\n    function () {\n        this._beginToken(TokenType.ATTR_NAME);\n        var /** @type {?} */ prefixAndName = this._consumePrefixAndName();\n        this._endToken(prefixAndName);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeAttributeValue = /**\n     * @return {?}\n     */\n    function () {\n        this._beginToken(TokenType.ATTR_VALUE);\n        var /** @type {?} */ value;\n        if (this._peek === chars.$SQ || this._peek === chars.$DQ) {\n            var /** @type {?} */ quoteChar = this._peek;\n            this._advance();\n            var /** @type {?} */ parts = [];\n            while (this._peek !== quoteChar) {\n                parts.push(this._readChar(true));\n            }\n            value = parts.join('');\n            this._advance();\n        }\n        else {\n            var /** @type {?} */ valueStart = this._index;\n            this._requireCharCodeUntilFn(isNameEnd, 1);\n            value = this._input.substring(valueStart, this._index);\n        }\n        this._endToken([this._processCarriageReturns(value)]);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeTagOpenEnd = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ tokenType = this._attemptCharCode(chars.$SLASH) ? TokenType.TAG_OPEN_END_VOID : TokenType.TAG_OPEN_END;\n        this._beginToken(tokenType);\n        this._requireCharCode(chars.$GT);\n        this._endToken([]);\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeTagClose = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        this._beginToken(TokenType.TAG_CLOSE, start);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        var /** @type {?} */ prefixAndName = this._consumePrefixAndName();\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._requireCharCode(chars.$GT);\n        this._endToken(prefixAndName);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeExpansionFormStart = /**\n     * @return {?}\n     */\n    function () {\n        this._beginToken(TokenType.EXPANSION_FORM_START, this._getLocation());\n        this._requireCharCode(chars.$LBRACE);\n        this._endToken([]);\n        this._expansionCaseStack.push(TokenType.EXPANSION_FORM_START);\n        this._beginToken(TokenType.RAW_TEXT, this._getLocation());\n        var /** @type {?} */ condition = this._readUntil(chars.$COMMA);\n        this._endToken([condition], this._getLocation());\n        this._requireCharCode(chars.$COMMA);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._beginToken(TokenType.RAW_TEXT, this._getLocation());\n        var /** @type {?} */ type = this._readUntil(chars.$COMMA);\n        this._endToken([type], this._getLocation());\n        this._requireCharCode(chars.$COMMA);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeExpansionCaseStart = /**\n     * @return {?}\n     */\n    function () {\n        this._beginToken(TokenType.EXPANSION_CASE_VALUE, this._getLocation());\n        var /** @type {?} */ value = this._readUntil(chars.$LBRACE).trim();\n        this._endToken([value], this._getLocation());\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._beginToken(TokenType.EXPANSION_CASE_EXP_START, this._getLocation());\n        this._requireCharCode(chars.$LBRACE);\n        this._endToken([], this._getLocation());\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._expansionCaseStack.push(TokenType.EXPANSION_CASE_EXP_START);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeExpansionCaseEnd = /**\n     * @return {?}\n     */\n    function () {\n        this._beginToken(TokenType.EXPANSION_CASE_EXP_END, this._getLocation());\n        this._requireCharCode(chars.$RBRACE);\n        this._endToken([], this._getLocation());\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._expansionCaseStack.pop();\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeExpansionFormEnd = /**\n     * @return {?}\n     */\n    function () {\n        this._beginToken(TokenType.EXPANSION_FORM_END, this._getLocation());\n        this._requireCharCode(chars.$RBRACE);\n        this._endToken([]);\n        this._expansionCaseStack.pop();\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeText = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ start = this._getLocation();\n        this._beginToken(TokenType.TEXT, start);\n        var /** @type {?} */ parts = [];\n        do {\n            if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {\n                parts.push(this._interpolationConfig.start);\n                this._inInterpolation = true;\n            }\n            else if (this._interpolationConfig && this._inInterpolation &&\n                this._attemptStr(this._interpolationConfig.end)) {\n                parts.push(this._interpolationConfig.end);\n                this._inInterpolation = false;\n            }\n            else {\n                parts.push(this._readChar(true));\n            }\n        } while (!this._isTextEnd());\n        this._endToken([this._processCarriageReturns(parts.join(''))]);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._isTextEnd = /**\n     * @return {?}\n     */\n    function () {\n        if (this._peek === chars.$LT || this._peek === chars.$EOF) {\n            return true;\n        }\n        if (this._tokenizeIcu && !this._inInterpolation) {\n            if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\n                // start of an expansion form\n                return true;\n            }\n            if (this._peek === chars.$RBRACE && this._isInExpansionCase()) {\n                // end of and expansion case\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._savePosition = /**\n     * @return {?}\n     */\n    function () {\n        return [this._peek, this._index, this._column, this._line, this.tokens.length];\n    };\n    /**\n     * @param {?} char\n     * @return {?}\n     */\n    _Tokenizer.prototype._readUntil = /**\n     * @param {?} char\n     * @return {?}\n     */\n    function (char) {\n        var /** @type {?} */ start = this._index;\n        this._attemptUntilChar(char);\n        return this._input.substring(start, this._index);\n    };\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    _Tokenizer.prototype._restorePosition = /**\n     * @param {?} position\n     * @return {?}\n     */\n    function (position) {\n        this._peek = position[0];\n        this._index = position[1];\n        this._column = position[2];\n        this._line = position[3];\n        var /** @type {?} */ nbTokens = position[4];\n        if (nbTokens < this.tokens.length) {\n            // remove any extra tokens\n            this.tokens = this.tokens.slice(0, nbTokens);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._isInExpansionCase = /**\n     * @return {?}\n     */\n    function () {\n        return this._expansionCaseStack.length > 0 &&\n            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n                TokenType.EXPANSION_CASE_EXP_START;\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._isInExpansionForm = /**\n     * @return {?}\n     */\n    function () {\n        return this._expansionCaseStack.length > 0 &&\n            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n                TokenType.EXPANSION_FORM_START;\n    };\n    return _Tokenizer;\n}());\nfunction _Tokenizer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _Tokenizer.prototype._input;\n    /** @type {?} */\n    _Tokenizer.prototype._length;\n    /** @type {?} */\n    _Tokenizer.prototype._peek;\n    /** @type {?} */\n    _Tokenizer.prototype._nextPeek;\n    /** @type {?} */\n    _Tokenizer.prototype._index;\n    /** @type {?} */\n    _Tokenizer.prototype._line;\n    /** @type {?} */\n    _Tokenizer.prototype._column;\n    /** @type {?} */\n    _Tokenizer.prototype._currentTokenStart;\n    /** @type {?} */\n    _Tokenizer.prototype._currentTokenType;\n    /** @type {?} */\n    _Tokenizer.prototype._expansionCaseStack;\n    /** @type {?} */\n    _Tokenizer.prototype._inInterpolation;\n    /** @type {?} */\n    _Tokenizer.prototype.tokens;\n    /** @type {?} */\n    _Tokenizer.prototype.errors;\n    /** @type {?} */\n    _Tokenizer.prototype._file;\n    /** @type {?} */\n    _Tokenizer.prototype._getTagDefinition;\n    /** @type {?} */\n    _Tokenizer.prototype._tokenizeIcu;\n    /** @type {?} */\n    _Tokenizer.prototype._interpolationConfig;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isNotWhitespace(code) {\n    return !chars.isWhitespace(code) || code === chars.$EOF;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isNameEnd(code) {\n    return chars.isWhitespace(code) || code === chars.$GT || code === chars.$SLASH ||\n        code === chars.$SQ || code === chars.$DQ || code === chars.$EQ;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isPrefixEnd(code) {\n    return (code < chars.$a || chars.$z < code) && (code < chars.$A || chars.$Z < code) &&\n        (code < chars.$0 || code > chars.$9);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isDigitEntityEnd(code) {\n    return code == chars.$SEMICOLON || code == chars.$EOF || !chars.isAsciiHexDigit(code);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isNamedEntityEnd(code) {\n    return code == chars.$SEMICOLON || code == chars.$EOF || !chars.isAsciiLetter(code);\n}\n/**\n * @param {?} input\n * @param {?} offset\n * @param {?} interpolationConfig\n * @return {?}\n */\nfunction isExpansionFormStart(input, offset, interpolationConfig) {\n    var /** @type {?} */ isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;\n    return input.charCodeAt(offset) == chars.$LBRACE && !isInterpolationStart;\n}\n/**\n * @param {?} peek\n * @return {?}\n */\nfunction isExpansionCaseStart(peek) {\n    return peek === chars.$EQ || chars.isAsciiLetter(peek) || chars.isDigit(peek);\n}\n/**\n * @param {?} code1\n * @param {?} code2\n * @return {?}\n */\nfunction compareCharCodeCaseInsensitive(code1, code2) {\n    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction toUpperCaseCharCode(code) {\n    return code >= chars.$a && code <= chars.$z ? code - chars.$a + chars.$A : code;\n}\n/**\n * @param {?} srcTokens\n * @return {?}\n */\nfunction mergeTextTokens(srcTokens) {\n    var /** @type {?} */ dstTokens = [];\n    var /** @type {?} */ lastDstToken = undefined;\n    for (var /** @type {?} */ i = 0; i < srcTokens.length; i++) {\n        var /** @type {?} */ token = srcTokens[i];\n        if (lastDstToken && lastDstToken.type == TokenType.TEXT && token.type == TokenType.TEXT) {\n            lastDstToken.parts[0] += token.parts[0];\n            lastDstToken.sourceSpan.end = token.sourceSpan.end;\n        }\n        else {\n            lastDstToken = token;\n            dstTokens.push(lastDstToken);\n        }\n    }\n    return dstTokens;\n}\n//# sourceMappingURL=lexer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ParseError, ParseSourceSpan } from '../parse_util';\nimport * as html from './ast';\nimport { DEFAULT_INTERPOLATION_CONFIG } from './interpolation_config';\nimport * as lex from './lexer';\nimport { getNsPrefix, isNgContainer, mergeNsAndName } from './tags';\nvar TreeError = /** @class */ (function (_super) {\n    tslib_1.__extends(TreeError, _super);\n    function TreeError(elementName, span, msg) {\n        var _this = _super.call(this, span, msg) || this;\n        _this.elementName = elementName;\n        return _this;\n    }\n    /**\n     * @param {?} elementName\n     * @param {?} span\n     * @param {?} msg\n     * @return {?}\n     */\n    TreeError.create = /**\n     * @param {?} elementName\n     * @param {?} span\n     * @param {?} msg\n     * @return {?}\n     */\n    function (elementName, span, msg) {\n        return new TreeError(elementName, span, msg);\n    };\n    return TreeError;\n}(ParseError));\nexport { TreeError };\nfunction TreeError_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TreeError.prototype.elementName;\n}\nvar ParseTreeResult = /** @class */ (function () {\n    function ParseTreeResult(rootNodes, errors) {\n        this.rootNodes = rootNodes;\n        this.errors = errors;\n    }\n    return ParseTreeResult;\n}());\nexport { ParseTreeResult };\nfunction ParseTreeResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParseTreeResult.prototype.rootNodes;\n    /** @type {?} */\n    ParseTreeResult.prototype.errors;\n}\nvar Parser = /** @class */ (function () {\n    function Parser(getTagDefinition) {\n        this.getTagDefinition = getTagDefinition;\n    }\n    /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parse = /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (source, url, parseExpansionForms, interpolationConfig) {\n        if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        var /** @type {?} */ tokensAndErrors = lex.tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);\n        var /** @type {?} */ treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();\n        return new ParseTreeResult(treeAndErrors.rootNodes, (/** @type {?} */ (tokensAndErrors.errors)).concat(treeAndErrors.errors));\n    };\n    return Parser;\n}());\nexport { Parser };\nfunction Parser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Parser.prototype.getTagDefinition;\n}\nvar _TreeBuilder = /** @class */ (function () {\n    function _TreeBuilder(tokens, getTagDefinition) {\n        this.tokens = tokens;\n        this.getTagDefinition = getTagDefinition;\n        this._index = -1;\n        this._rootNodes = [];\n        this._errors = [];\n        this._elementStack = [];\n        this._advance();\n    }\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype.build = /**\n     * @return {?}\n     */\n    function () {\n        while (this._peek.type !== lex.TokenType.EOF) {\n            if (this._peek.type === lex.TokenType.TAG_OPEN_START) {\n                this._consumeStartTag(this._advance());\n            }\n            else if (this._peek.type === lex.TokenType.TAG_CLOSE) {\n                this._consumeEndTag(this._advance());\n            }\n            else if (this._peek.type === lex.TokenType.CDATA_START) {\n                this._closeVoidElement();\n                this._consumeCdata(this._advance());\n            }\n            else if (this._peek.type === lex.TokenType.COMMENT_START) {\n                this._closeVoidElement();\n                this._consumeComment(this._advance());\n            }\n            else if (this._peek.type === lex.TokenType.TEXT || this._peek.type === lex.TokenType.RAW_TEXT ||\n                this._peek.type === lex.TokenType.ESCAPABLE_RAW_TEXT) {\n                this._closeVoidElement();\n                this._consumeText(this._advance());\n            }\n            else if (this._peek.type === lex.TokenType.EXPANSION_FORM_START) {\n                this._consumeExpansion(this._advance());\n            }\n            else {\n                // Skip all other tokens...\n                this._advance();\n            }\n        }\n        return new ParseTreeResult(this._rootNodes, this._errors);\n    };\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype._advance = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ prev = this._peek;\n        if (this._index < this.tokens.length - 1) {\n            // Note: there is always an EOF token at the end\n            this._index++;\n        }\n        this._peek = this.tokens[this._index];\n        return prev;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    _TreeBuilder.prototype._advanceIf = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        if (this._peek.type === type) {\n            return this._advance();\n        }\n        return null;\n    };\n    /**\n     * @param {?} startToken\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeCdata = /**\n     * @param {?} startToken\n     * @return {?}\n     */\n    function (startToken) {\n        this._consumeText(this._advance());\n        this._advanceIf(lex.TokenType.CDATA_END);\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeComment = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        var /** @type {?} */ text = this._advanceIf(lex.TokenType.RAW_TEXT);\n        this._advanceIf(lex.TokenType.COMMENT_END);\n        var /** @type {?} */ value = text != null ? text.parts[0].trim() : null;\n        this._addToParent(new html.Comment(value, token.sourceSpan));\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeExpansion = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        var /** @type {?} */ switchValue = this._advance();\n        var /** @type {?} */ type = this._advance();\n        var /** @type {?} */ cases = [];\n        // read =\n        while (this._peek.type === lex.TokenType.EXPANSION_CASE_VALUE) {\n            var /** @type {?} */ expCase = this._parseExpansionCase();\n            if (!expCase)\n                return; // error\n            cases.push(expCase);\n        }\n        // read the final }\n        if (this._peek.type !== lex.TokenType.EXPANSION_FORM_END) {\n            this._errors.push(TreeError.create(null, this._peek.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n            return;\n        }\n        var /** @type {?} */ sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);\n        this._addToParent(new html.Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\n        this._advance();\n    };\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype._parseExpansionCase = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ value = this._advance();\n        // read {\n        if (this._peek.type !== lex.TokenType.EXPANSION_CASE_EXP_START) {\n            this._errors.push(TreeError.create(null, this._peek.sourceSpan, \"Invalid ICU message. Missing '{'.\"));\n            return null;\n        }\n        // read until }\n        var /** @type {?} */ start = this._advance();\n        var /** @type {?} */ exp = this._collectExpansionExpTokens(start);\n        if (!exp)\n            return null;\n        var /** @type {?} */ end = this._advance();\n        exp.push(new lex.Token(lex.TokenType.EOF, [], end.sourceSpan));\n        // parse everything in between { and }\n        var /** @type {?} */ parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();\n        if (parsedExp.errors.length > 0) {\n            this._errors = this._errors.concat(/** @type {?} */ (parsedExp.errors));\n            return null;\n        }\n        var /** @type {?} */ sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);\n        var /** @type {?} */ expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);\n        return new html.ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _TreeBuilder.prototype._collectExpansionExpTokens = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        var /** @type {?} */ exp = [];\n        var /** @type {?} */ expansionFormStack = [lex.TokenType.EXPANSION_CASE_EXP_START];\n        while (true) {\n            if (this._peek.type === lex.TokenType.EXPANSION_FORM_START ||\n                this._peek.type === lex.TokenType.EXPANSION_CASE_EXP_START) {\n                expansionFormStack.push(this._peek.type);\n            }\n            if (this._peek.type === lex.TokenType.EXPANSION_CASE_EXP_END) {\n                if (lastOnStack(expansionFormStack, lex.TokenType.EXPANSION_CASE_EXP_START)) {\n                    expansionFormStack.pop();\n                    if (expansionFormStack.length == 0)\n                        return exp;\n                }\n                else {\n                    this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                    return null;\n                }\n            }\n            if (this._peek.type === lex.TokenType.EXPANSION_FORM_END) {\n                if (lastOnStack(expansionFormStack, lex.TokenType.EXPANSION_FORM_START)) {\n                    expansionFormStack.pop();\n                }\n                else {\n                    this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                    return null;\n                }\n            }\n            if (this._peek.type === lex.TokenType.EOF) {\n                this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                return null;\n            }\n            exp.push(this._advance());\n        }\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeText = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        var /** @type {?} */ text = token.parts[0];\n        if (text.length > 0 && text[0] == '\\n') {\n            var /** @type {?} */ parent_1 = this._getParentElement();\n            if (parent_1 != null && parent_1.children.length == 0 &&\n                this.getTagDefinition(parent_1.name).ignoreFirstLf) {\n                text = text.substring(1);\n            }\n        }\n        if (text.length > 0) {\n            this._addToParent(new html.Text(text, token.sourceSpan));\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype._closeVoidElement = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ el = this._getParentElement();\n        if (el && this.getTagDefinition(el.name).isVoid) {\n            this._elementStack.pop();\n        }\n    };\n    /**\n     * @param {?} startTagToken\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeStartTag = /**\n     * @param {?} startTagToken\n     * @return {?}\n     */\n    function (startTagToken) {\n        var /** @type {?} */ prefix = startTagToken.parts[0];\n        var /** @type {?} */ name = startTagToken.parts[1];\n        var /** @type {?} */ attrs = [];\n        while (this._peek.type === lex.TokenType.ATTR_NAME) {\n            attrs.push(this._consumeAttr(this._advance()));\n        }\n        var /** @type {?} */ fullName = this._getElementFullName(prefix, name, this._getParentElement());\n        var /** @type {?} */ selfClosing = false;\n        // Note: There could have been a tokenizer error\n        // so that we don't get a token for the end tag...\n        if (this._peek.type === lex.TokenType.TAG_OPEN_END_VOID) {\n            this._advance();\n            selfClosing = true;\n            var /** @type {?} */ tagDef = this.getTagDefinition(fullName);\n            if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {\n                this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, \"Only void and foreign elements can be self closed \\\"\" + startTagToken.parts[1] + \"\\\"\"));\n            }\n        }\n        else if (this._peek.type === lex.TokenType.TAG_OPEN_END) {\n            this._advance();\n            selfClosing = false;\n        }\n        var /** @type {?} */ end = this._peek.sourceSpan.start;\n        var /** @type {?} */ span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);\n        var /** @type {?} */ el = new html.Element(fullName, attrs, [], span, span, undefined);\n        this._pushElement(el);\n        if (selfClosing) {\n            this._popElement(fullName);\n            el.endSourceSpan = span;\n        }\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    _TreeBuilder.prototype._pushElement = /**\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        var /** @type {?} */ parentEl = this._getParentElement();\n        if (parentEl && this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {\n            this._elementStack.pop();\n        }\n        var /** @type {?} */ tagDef = this.getTagDefinition(el.name);\n        var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;\n        if (parent && tagDef.requireExtraParent(parent.name)) {\n            var /** @type {?} */ newParent = new html.Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n            this._insertBeforeContainer(parent, container, newParent);\n        }\n        this._addToParent(el);\n        this._elementStack.push(el);\n    };\n    /**\n     * @param {?} endTagToken\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeEndTag = /**\n     * @param {?} endTagToken\n     * @return {?}\n     */\n    function (endTagToken) {\n        var /** @type {?} */ fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());\n        if (this._getParentElement()) {\n            /** @type {?} */ ((this._getParentElement())).endSourceSpan = endTagToken.sourceSpan;\n        }\n        if (this.getTagDefinition(fullName).isVoid) {\n            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, \"Void elements do not have end tags \\\"\" + endTagToken.parts[1] + \"\\\"\"));\n        }\n        else if (!this._popElement(fullName)) {\n            var /** @type {?} */ errMsg = \"Unexpected closing tag \\\"\" + fullName + \"\\\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags\";\n            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));\n        }\n    };\n    /**\n     * @param {?} fullName\n     * @return {?}\n     */\n    _TreeBuilder.prototype._popElement = /**\n     * @param {?} fullName\n     * @return {?}\n     */\n    function (fullName) {\n        for (var /** @type {?} */ stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {\n            var /** @type {?} */ el = this._elementStack[stackIndex];\n            if (el.name == fullName) {\n                this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);\n                return true;\n            }\n            if (!this.getTagDefinition(el.name).closedByParent) {\n                return false;\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {?} attrName\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeAttr = /**\n     * @param {?} attrName\n     * @return {?}\n     */\n    function (attrName) {\n        var /** @type {?} */ fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);\n        var /** @type {?} */ end = attrName.sourceSpan.end;\n        var /** @type {?} */ value = '';\n        var /** @type {?} */ valueSpan = /** @type {?} */ ((undefined));\n        if (this._peek.type === lex.TokenType.ATTR_VALUE) {\n            var /** @type {?} */ valueToken = this._advance();\n            value = valueToken.parts[0];\n            end = valueToken.sourceSpan.end;\n            valueSpan = valueToken.sourceSpan;\n        }\n        return new html.Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);\n    };\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype._getParentElement = /**\n     * @return {?}\n     */\n    function () {\n        return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;\n    };\n    /**\n     * Returns the parent in the DOM and the container.\n     *\n     * `<ng-container>` elements are skipped as they are not rendered as DOM element.\n     * @return {?}\n     */\n    _TreeBuilder.prototype._getParentElementSkippingContainers = /**\n     * Returns the parent in the DOM and the container.\n     *\n     * `<ng-container>` elements are skipped as they are not rendered as DOM element.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ container = null;\n        for (var /** @type {?} */ i = this._elementStack.length - 1; i >= 0; i--) {\n            if (!isNgContainer(this._elementStack[i].name)) {\n                return { parent: this._elementStack[i], container: container };\n            }\n            container = this._elementStack[i];\n        }\n        return { parent: null, container: container };\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    _TreeBuilder.prototype._addToParent = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        var /** @type {?} */ parent = this._getParentElement();\n        if (parent != null) {\n            parent.children.push(node);\n        }\n        else {\n            this._rootNodes.push(node);\n        }\n    };\n    /**\n     * Insert a node between the parent and the container.\n     * When no container is given, the node is appended as a child of the parent.\n     * Also updates the element stack accordingly.\n     *\n     * \\@internal\n     * @param {?} parent\n     * @param {?} container\n     * @param {?} node\n     * @return {?}\n     */\n    _TreeBuilder.prototype._insertBeforeContainer = /**\n     * Insert a node between the parent and the container.\n     * When no container is given, the node is appended as a child of the parent.\n     * Also updates the element stack accordingly.\n     *\n     * \\@internal\n     * @param {?} parent\n     * @param {?} container\n     * @param {?} node\n     * @return {?}\n     */\n    function (parent, container, node) {\n        if (!container) {\n            this._addToParent(node);\n            this._elementStack.push(node);\n        }\n        else {\n            if (parent) {\n                // replace the container with the new node in the children\n                var /** @type {?} */ index = parent.children.indexOf(container);\n                parent.children[index] = node;\n            }\n            else {\n                this._rootNodes.push(node);\n            }\n            node.children.push(container);\n            this._elementStack.splice(this._elementStack.indexOf(container), 0, node);\n        }\n    };\n    /**\n     * @param {?} prefix\n     * @param {?} localName\n     * @param {?} parentElement\n     * @return {?}\n     */\n    _TreeBuilder.prototype._getElementFullName = /**\n     * @param {?} prefix\n     * @param {?} localName\n     * @param {?} parentElement\n     * @return {?}\n     */\n    function (prefix, localName, parentElement) {\n        if (prefix == null) {\n            prefix = /** @type {?} */ ((this.getTagDefinition(localName).implicitNamespacePrefix));\n            if (prefix == null && parentElement != null) {\n                prefix = getNsPrefix(parentElement.name);\n            }\n        }\n        return mergeNsAndName(prefix, localName);\n    };\n    return _TreeBuilder;\n}());\nfunction _TreeBuilder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _TreeBuilder.prototype._index;\n    /** @type {?} */\n    _TreeBuilder.prototype._peek;\n    /** @type {?} */\n    _TreeBuilder.prototype._rootNodes;\n    /** @type {?} */\n    _TreeBuilder.prototype._errors;\n    /** @type {?} */\n    _TreeBuilder.prototype._elementStack;\n    /** @type {?} */\n    _TreeBuilder.prototype.tokens;\n    /** @type {?} */\n    _TreeBuilder.prototype.getTagDefinition;\n}\n/**\n * @param {?} stack\n * @param {?} element\n * @return {?}\n */\nfunction lastOnStack(stack, element) {\n    return stack.length > 0 && stack[stack.length - 1] === element;\n}\n//# sourceMappingURL=parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { utf8Encode } from '../util';\n/**\n * @param {?} message\n * @return {?}\n */\nexport function digest(message) {\n    return message.id || sha1(serializeNodes(message.nodes).join('') + (\"[\" + message.meaning + \"]\"));\n}\n/**\n * @param {?} message\n * @return {?}\n */\nexport function decimalDigest(message) {\n    if (message.id) {\n        return message.id;\n    }\n    var /** @type {?} */ visitor = new _SerializerIgnoreIcuExpVisitor();\n    var /** @type {?} */ parts = message.nodes.map(function (a) { return a.visit(visitor, null); });\n    return computeMsgId(parts.join(''), message.meaning);\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * \\@internal\n */\nvar /**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * \\@internal\n */\n_SerializerVisitor = /** @class */ (function () {\n    function _SerializerVisitor() {\n    }\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    _SerializerVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { return text.value; };\n    /**\n     * @param {?} container\n     * @param {?} context\n     * @return {?}\n     */\n    _SerializerVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?} context\n     * @return {?}\n     */\n    function (container, context) {\n        var _this = this;\n        return \"[\" + container.children.map(function (child) { return child.visit(_this); }).join(', ') + \"]\";\n    };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    _SerializerVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return k + \" {\" + icu.cases[k].visit(_this) + \"}\"; });\n        return \"{\" + icu.expression + \", \" + icu.type + \", \" + strCases.join(', ') + \"}\";\n    };\n    /**\n     * @param {?} ph\n     * @param {?} context\n     * @return {?}\n     */\n    _SerializerVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var _this = this;\n        return ph.isVoid ?\n            \"<ph tag name=\\\"\" + ph.startName + \"\\\"/>\" :\n            \"<ph tag name=\\\"\" + ph.startName + \"\\\">\" + ph.children.map(function (child) { return child.visit(_this); }).join(', ') + \"</ph name=\\\"\" + ph.closeName + \"\\\">\";\n    };\n    /**\n     * @param {?} ph\n     * @param {?} context\n     * @return {?}\n     */\n    _SerializerVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?} context\n     * @return {?}\n     */\n    function (ph, context) {\n        return ph.value ? \"<ph name=\\\"\" + ph.name + \"\\\">\" + ph.value + \"</ph>\" : \"<ph name=\\\"\" + ph.name + \"\\\"/>\";\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _SerializerVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        return \"<ph icu name=\\\"\" + ph.name + \"\\\">\" + ph.value.visit(this) + \"</ph>\";\n    };\n    return _SerializerVisitor;\n}());\nvar /** @type {?} */ serializerVisitor = new _SerializerVisitor();\n/**\n * @param {?} nodes\n * @return {?}\n */\nexport function serializeNodes(nodes) {\n    return nodes.map(function (a) { return a.visit(serializerVisitor, null); });\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n *\n * \\@internal\n */\nvar /**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n *\n * \\@internal\n */\n_SerializerIgnoreIcuExpVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(_SerializerIgnoreIcuExpVisitor, _super);\n    function _SerializerIgnoreIcuExpVisitor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    _SerializerIgnoreIcuExpVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return k + \" {\" + icu.cases[k].visit(_this) + \"}\"; });\n        // Do not take the expression into account\n        return \"{\" + icu.type + \", \" + strCases.join(', ') + \"}\";\n    };\n    return _SerializerIgnoreIcuExpVisitor;\n}(_SerializerVisitor));\n/**\n * Compute the SHA1 of the given string\n *\n * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n *\n * WARNING: this function has not been designed not tested with security in mind.\n *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n * @param {?} str\n * @return {?}\n */\nexport function sha1(str) {\n    var /** @type {?} */ utf8 = utf8Encode(str);\n    var /** @type {?} */ words32 = stringToWords32(utf8, Endian.Big);\n    var /** @type {?} */ len = utf8.length * 8;\n    var /** @type {?} */ w = new Array(80);\n    var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0], a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];\n    words32[len >> 5] |= 0x80 << (24 - len % 32);\n    words32[((len + 64 >> 9) << 4) + 15] = len;\n    for (var /** @type {?} */ i = 0; i < words32.length; i += 16) {\n        var _b = [a, b, c, d, e], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];\n        for (var /** @type {?} */ j = 0; j < 80; j++) {\n            if (j < 16) {\n                w[j] = words32[i + j];\n            }\n            else {\n                w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n            }\n            var _c = fk(j, b, c, d), f = _c[0], k = _c[1];\n            var /** @type {?} */ temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n            _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];\n        }\n        _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];\n    }\n    return byteStringToHexString(words32ToByteString([a, b, c, d, e]));\n    var _d, _e;\n}\n/**\n * @param {?} index\n * @param {?} b\n * @param {?} c\n * @param {?} d\n * @return {?}\n */\nfunction fk(index, b, c, d) {\n    if (index < 20) {\n        return [(b & c) | (~b & d), 0x5a827999];\n    }\n    if (index < 40) {\n        return [b ^ c ^ d, 0x6ed9eba1];\n    }\n    if (index < 60) {\n        return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];\n    }\n    return [b ^ c ^ d, 0xca62c1d6];\n}\n/**\n * Compute the fingerprint of the given string\n *\n * The output is 64 bit number encoded as a decimal string\n *\n * based on:\n * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n * @param {?} str\n * @return {?}\n */\nexport function fingerprint(str) {\n    var /** @type {?} */ utf8 = utf8Encode(str);\n    var _a = [hash32(utf8, 0), hash32(utf8, 102072)], hi = _a[0], lo = _a[1];\n    if (hi == 0 && (lo == 0 || lo == 1)) {\n        hi = hi ^ 0x130f9bef;\n        lo = lo ^ -0x6b5f56d8;\n    }\n    return [hi, lo];\n}\n/**\n * @param {?} msg\n * @param {?} meaning\n * @return {?}\n */\nexport function computeMsgId(msg, meaning) {\n    var _a = fingerprint(msg), hi = _a[0], lo = _a[1];\n    if (meaning) {\n        var _b = fingerprint(meaning), him = _b[0], lom = _b[1];\n        _c = add64(rol64([hi, lo], 1), [him, lom]), hi = _c[0], lo = _c[1];\n    }\n    return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));\n    var _c;\n}\n/**\n * @param {?} str\n * @param {?} c\n * @return {?}\n */\nfunction hash32(str, c) {\n    var _a = [0x9e3779b9, 0x9e3779b9], a = _a[0], b = _a[1];\n    var /** @type {?} */ i;\n    var /** @type {?} */ len = str.length;\n    for (i = 0; i + 12 <= len; i += 12) {\n        a = add32(a, wordAt(str, i, Endian.Little));\n        b = add32(b, wordAt(str, i + 4, Endian.Little));\n        c = add32(c, wordAt(str, i + 8, Endian.Little));\n        _b = mix([a, b, c]), a = _b[0], b = _b[1], c = _b[2];\n    }\n    a = add32(a, wordAt(str, i, Endian.Little));\n    b = add32(b, wordAt(str, i + 4, Endian.Little));\n    // the first byte of c is reserved for the length\n    c = add32(c, len);\n    c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);\n    return mix([a, b, c])[2];\n    var _b;\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction mix(_a) {\n    var a = _a[0], b = _a[1], c = _a[2];\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 13;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 8;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 13;\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 12;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 16;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 5;\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 3;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 10;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 15;\n    return [a, b, c];\n}\n/** @enum {number} */\nvar Endian = {\n    Little: 0,\n    Big: 1,\n};\nEndian[Endian.Little] = \"Little\";\nEndian[Endian.Big] = \"Big\";\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction add32(a, b) {\n    return add32to64(a, b)[1];\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction add32to64(a, b) {\n    var /** @type {?} */ low = (a & 0xffff) + (b & 0xffff);\n    var /** @type {?} */ high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n    return [high >>> 16, (high << 16) | (low & 0xffff)];\n}\n/**\n * @param {?} __0\n * @param {?} __1\n * @return {?}\n */\nfunction add64(_a, _b) {\n    var ah = _a[0], al = _a[1];\n    var bh = _b[0], bl = _b[1];\n    var _c = add32to64(al, bl), carry = _c[0], l = _c[1];\n    var /** @type {?} */ h = add32(add32(ah, bh), carry);\n    return [h, l];\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sub32(a, b) {\n    var /** @type {?} */ low = (a & 0xffff) - (b & 0xffff);\n    var /** @type {?} */ high = (a >> 16) - (b >> 16) + (low >> 16);\n    return (high << 16) | (low & 0xffff);\n}\n/**\n * @param {?} a\n * @param {?} count\n * @return {?}\n */\nfunction rol32(a, count) {\n    return (a << count) | (a >>> (32 - count));\n}\n/**\n * @param {?} __0\n * @param {?} count\n * @return {?}\n */\nfunction rol64(_a, count) {\n    var hi = _a[0], lo = _a[1];\n    var /** @type {?} */ h = (hi << count) | (lo >>> (32 - count));\n    var /** @type {?} */ l = (lo << count) | (hi >>> (32 - count));\n    return [h, l];\n}\n/**\n * @param {?} str\n * @param {?} endian\n * @return {?}\n */\nfunction stringToWords32(str, endian) {\n    var /** @type {?} */ words32 = Array((str.length + 3) >>> 2);\n    for (var /** @type {?} */ i = 0; i < words32.length; i++) {\n        words32[i] = wordAt(str, i * 4, endian);\n    }\n    return words32;\n}\n/**\n * @param {?} str\n * @param {?} index\n * @return {?}\n */\nfunction byteAt(str, index) {\n    return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;\n}\n/**\n * @param {?} str\n * @param {?} index\n * @param {?} endian\n * @return {?}\n */\nfunction wordAt(str, index, endian) {\n    var /** @type {?} */ word = 0;\n    if (endian === Endian.Big) {\n        for (var /** @type {?} */ i = 0; i < 4; i++) {\n            word += byteAt(str, index + i) << (24 - 8 * i);\n        }\n    }\n    else {\n        for (var /** @type {?} */ i = 0; i < 4; i++) {\n            word += byteAt(str, index + i) << 8 * i;\n        }\n    }\n    return word;\n}\n/**\n * @param {?} words32\n * @return {?}\n */\nfunction words32ToByteString(words32) {\n    return words32.reduce(function (str, word) { return str + word32ToByteString(word); }, '');\n}\n/**\n * @param {?} word\n * @return {?}\n */\nfunction word32ToByteString(word) {\n    var /** @type {?} */ str = '';\n    for (var /** @type {?} */ i = 0; i < 4; i++) {\n        str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);\n    }\n    return str;\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction byteStringToHexString(str) {\n    var /** @type {?} */ hex = '';\n    for (var /** @type {?} */ i = 0; i < str.length; i++) {\n        var /** @type {?} */ b = byteAt(str, i);\n        hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n    }\n    return hex.toLowerCase();\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction byteStringToDecString(str) {\n    var /** @type {?} */ decimal = '';\n    var /** @type {?} */ toThePower = '1';\n    for (var /** @type {?} */ i = str.length - 1; i >= 0; i--) {\n        decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));\n        toThePower = numberTimesBigInt(256, toThePower);\n    }\n    return decimal.split('').reverse().join('');\n}\n/**\n * @param {?} x\n * @param {?} y\n * @return {?}\n */\nfunction addBigInt(x, y) {\n    var /** @type {?} */ sum = '';\n    var /** @type {?} */ len = Math.max(x.length, y.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ carry = 0; i < len || carry; i++) {\n        var /** @type {?} */ tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);\n        if (tmpSum >= 10) {\n            carry = 1;\n            sum += tmpSum - 10;\n        }\n        else {\n            carry = 0;\n            sum += tmpSum;\n        }\n    }\n    return sum;\n}\n/**\n * @param {?} num\n * @param {?} b\n * @return {?}\n */\nfunction numberTimesBigInt(num, b) {\n    var /** @type {?} */ product = '';\n    var /** @type {?} */ bToThePower = b;\n    for (; num !== 0; num = num >>> 1) {\n        if (num & 1)\n            product = addBigInt(product, bToThePower);\n        bToThePower = addBigInt(bToThePower, bToThePower);\n    }\n    return product;\n}\n//# sourceMappingURL=digest.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar Message = /** @class */ (function () {\n    /**\n     * @param nodes message AST\n     * @param placeholders maps placeholder names to static content\n     * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)\n     * @param meaning\n     * @param description\n     * @param id\n     */\n    function Message(nodes, placeholders, placeholderToMessage, meaning, description, id) {\n        this.nodes = nodes;\n        this.placeholders = placeholders;\n        this.placeholderToMessage = placeholderToMessage;\n        this.meaning = meaning;\n        this.description = description;\n        this.id = id;\n        if (nodes.length) {\n            this.sources = [{\n                    filePath: nodes[0].sourceSpan.start.file.url,\n                    startLine: nodes[0].sourceSpan.start.line + 1,\n                    startCol: nodes[0].sourceSpan.start.col + 1,\n                    endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,\n                    endCol: nodes[0].sourceSpan.start.col + 1\n                }];\n        }\n        else {\n            this.sources = [];\n        }\n    }\n    return Message;\n}());\nexport { Message };\nfunction Message_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Message.prototype.sources;\n    /** @type {?} */\n    Message.prototype.nodes;\n    /** @type {?} */\n    Message.prototype.placeholders;\n    /** @type {?} */\n    Message.prototype.placeholderToMessage;\n    /** @type {?} */\n    Message.prototype.meaning;\n    /** @type {?} */\n    Message.prototype.description;\n    /** @type {?} */\n    Message.prototype.id;\n}\n/**\n * @record\n */\nexport function MessageSpan() { }\nfunction MessageSpan_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MessageSpan.prototype.filePath;\n    /** @type {?} */\n    MessageSpan.prototype.startLine;\n    /** @type {?} */\n    MessageSpan.prototype.startCol;\n    /** @type {?} */\n    MessageSpan.prototype.endLine;\n    /** @type {?} */\n    MessageSpan.prototype.endCol;\n}\n/**\n * @record\n */\nexport function Node() { }\nfunction Node_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Node.prototype.sourceSpan;\n    /** @type {?} */\n    Node.prototype.visit;\n}\nvar Text = /** @class */ (function () {\n    function Text(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Text.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitText(this, context); };\n    return Text;\n}());\nexport { Text };\nfunction Text_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Text.prototype.value;\n    /** @type {?} */\n    Text.prototype.sourceSpan;\n}\nvar Container = /** @class */ (function () {\n    function Container(children, sourceSpan) {\n        this.children = children;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Container.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitContainer(this, context); };\n    return Container;\n}());\nexport { Container };\nfunction Container_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Container.prototype.children;\n    /** @type {?} */\n    Container.prototype.sourceSpan;\n}\nvar Icu = /** @class */ (function () {\n    function Icu(expression, type, cases, sourceSpan) {\n        this.expression = expression;\n        this.type = type;\n        this.cases = cases;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Icu.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitIcu(this, context); };\n    return Icu;\n}());\nexport { Icu };\nfunction Icu_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Icu.prototype.expressionPlaceholder;\n    /** @type {?} */\n    Icu.prototype.expression;\n    /** @type {?} */\n    Icu.prototype.type;\n    /** @type {?} */\n    Icu.prototype.cases;\n    /** @type {?} */\n    Icu.prototype.sourceSpan;\n}\nvar TagPlaceholder = /** @class */ (function () {\n    function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {\n        this.tag = tag;\n        this.attrs = attrs;\n        this.startName = startName;\n        this.closeName = closeName;\n        this.children = children;\n        this.isVoid = isVoid;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    TagPlaceholder.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitTagPlaceholder(this, context); };\n    return TagPlaceholder;\n}());\nexport { TagPlaceholder };\nfunction TagPlaceholder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TagPlaceholder.prototype.tag;\n    /** @type {?} */\n    TagPlaceholder.prototype.attrs;\n    /** @type {?} */\n    TagPlaceholder.prototype.startName;\n    /** @type {?} */\n    TagPlaceholder.prototype.closeName;\n    /** @type {?} */\n    TagPlaceholder.prototype.children;\n    /** @type {?} */\n    TagPlaceholder.prototype.isVoid;\n    /** @type {?} */\n    TagPlaceholder.prototype.sourceSpan;\n}\nvar Placeholder = /** @class */ (function () {\n    function Placeholder(value, name, sourceSpan) {\n        this.value = value;\n        this.name = name;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Placeholder.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitPlaceholder(this, context); };\n    return Placeholder;\n}());\nexport { Placeholder };\nfunction Placeholder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Placeholder.prototype.value;\n    /** @type {?} */\n    Placeholder.prototype.name;\n    /** @type {?} */\n    Placeholder.prototype.sourceSpan;\n}\nvar IcuPlaceholder = /** @class */ (function () {\n    function IcuPlaceholder(value, name, sourceSpan) {\n        this.value = value;\n        this.name = name;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    IcuPlaceholder.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitIcuPlaceholder(this, context); };\n    return IcuPlaceholder;\n}());\nexport { IcuPlaceholder };\nfunction IcuPlaceholder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    IcuPlaceholder.prototype.value;\n    /** @type {?} */\n    IcuPlaceholder.prototype.name;\n    /** @type {?} */\n    IcuPlaceholder.prototype.sourceSpan;\n}\n/**\n * @record\n */\nexport function Visitor() { }\nfunction Visitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Visitor.prototype.visitText;\n    /** @type {?} */\n    Visitor.prototype.visitContainer;\n    /** @type {?} */\n    Visitor.prototype.visitIcu;\n    /** @type {?} */\n    Visitor.prototype.visitTagPlaceholder;\n    /** @type {?} */\n    Visitor.prototype.visitPlaceholder;\n    /** @type {?} */\n    Visitor.prototype.visitIcuPlaceholder;\n}\nvar CloneVisitor = /** @class */ (function () {\n    function CloneVisitor() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    CloneVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    function (text, context) { return new Text(text.value, text.sourceSpan); };\n    /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    CloneVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    function (container, context) {\n        var _this = this;\n        var /** @type {?} */ children = container.children.map(function (n) { return n.visit(_this, context); });\n        return new Container(children, container.sourceSpan);\n    };\n    /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    CloneVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        var /** @type {?} */ cases = {};\n        Object.keys(icu.cases).forEach(function (key) { return cases[key] = icu.cases[key].visit(_this, context); });\n        var /** @type {?} */ msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan);\n        msg.expressionPlaceholder = icu.expressionPlaceholder;\n        return msg;\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    CloneVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var _this = this;\n        var /** @type {?} */ children = ph.children.map(function (n) { return n.visit(_this, context); });\n        return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan);\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    CloneVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        return new Placeholder(ph.value, ph.name, ph.sourceSpan);\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    CloneVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);\n    };\n    return CloneVisitor;\n}());\nexport { CloneVisitor };\nvar RecurseVisitor = /** @class */ (function () {\n    function RecurseVisitor() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    function (text, context) { };\n    /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    function (container, context) {\n        var _this = this;\n        container.children.forEach(function (child) { return child.visit(_this); });\n    };\n    /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        Object.keys(icu.cases).forEach(function (k) { icu.cases[k].visit(_this); });\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var _this = this;\n        ph.children.forEach(function (child) { return child.visit(_this); });\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) { };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) { };\n    return RecurseVisitor;\n}());\nexport { RecurseVisitor };\n//# sourceMappingURL=i18n_ast.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TagContentType } from './tags';\nvar HtmlTagDefinition = /** @class */ (function () {\n    function HtmlTagDefinition(_a) {\n        var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;\n        var _this = this;\n        this.closedByChildren = {};\n        this.closedByParent = false;\n        this.canSelfClose = false;\n        if (closedByChildren && closedByChildren.length > 0) {\n            closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });\n        }\n        this.isVoid = isVoid;\n        this.closedByParent = closedByParent || isVoid;\n        if (requiredParents && requiredParents.length > 0) {\n            this.requiredParents = {};\n            // The first parent is the list is automatically when none of the listed parents are present\n            this.parentToAdd = requiredParents[0];\n            requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });\n        }\n        this.implicitNamespacePrefix = implicitNamespacePrefix || null;\n        this.contentType = contentType;\n        this.ignoreFirstLf = ignoreFirstLf;\n    }\n    /**\n     * @param {?} currentParent\n     * @return {?}\n     */\n    HtmlTagDefinition.prototype.requireExtraParent = /**\n     * @param {?} currentParent\n     * @return {?}\n     */\n    function (currentParent) {\n        if (!this.requiredParents) {\n            return false;\n        }\n        if (!currentParent) {\n            return true;\n        }\n        var /** @type {?} */ lcParent = currentParent.toLowerCase();\n        var /** @type {?} */ isParentTemplate = lcParent === 'template' || currentParent === 'ng-template';\n        return !isParentTemplate && this.requiredParents[lcParent] != true;\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    HtmlTagDefinition.prototype.isClosedByChild = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return this.isVoid || name.toLowerCase() in this.closedByChildren;\n    };\n    return HtmlTagDefinition;\n}());\nexport { HtmlTagDefinition };\nfunction HtmlTagDefinition_tsickle_Closure_declarations() {\n    /** @type {?} */\n    HtmlTagDefinition.prototype.closedByChildren;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.closedByParent;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.requiredParents;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.parentToAdd;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.implicitNamespacePrefix;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.contentType;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.isVoid;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.ignoreFirstLf;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.canSelfClose;\n}\n// see http://www.w3.org/TR/html51/syntax.html#optional-tags\n// This implementation does not fully conform to the HTML5 spec.\nvar /** @type {?} */ TAG_DEFINITIONS = {\n    'base': new HtmlTagDefinition({ isVoid: true }),\n    'meta': new HtmlTagDefinition({ isVoid: true }),\n    'area': new HtmlTagDefinition({ isVoid: true }),\n    'embed': new HtmlTagDefinition({ isVoid: true }),\n    'link': new HtmlTagDefinition({ isVoid: true }),\n    'img': new HtmlTagDefinition({ isVoid: true }),\n    'input': new HtmlTagDefinition({ isVoid: true }),\n    'param': new HtmlTagDefinition({ isVoid: true }),\n    'hr': new HtmlTagDefinition({ isVoid: true }),\n    'br': new HtmlTagDefinition({ isVoid: true }),\n    'source': new HtmlTagDefinition({ isVoid: true }),\n    'track': new HtmlTagDefinition({ isVoid: true }),\n    'wbr': new HtmlTagDefinition({ isVoid: true }),\n    'p': new HtmlTagDefinition({\n        closedByChildren: [\n            'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',\n            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',\n            'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'\n        ],\n        closedByParent: true\n    }),\n    'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),\n    'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),\n    'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),\n    'tr': new HtmlTagDefinition({\n        closedByChildren: ['tr'],\n        requiredParents: ['tbody', 'tfoot', 'thead'],\n        closedByParent: true\n    }),\n    'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n    'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n    'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),\n    'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),\n    'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),\n    'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),\n    'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),\n    'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),\n    'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n    'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n    'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),\n    'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n    'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),\n    'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),\n    'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),\n    'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),\n    'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\n    'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\n    'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),\n    'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),\n};\nvar /** @type {?} */ _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();\n/**\n * @param {?} tagName\n * @return {?}\n */\nexport function getHtmlTagDefinition(tagName) {\n    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;\n}\n//# sourceMappingURL=html_tags.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ TAG_TO_PLACEHOLDER_NAMES = {\n    'A': 'LINK',\n    'B': 'BOLD_TEXT',\n    'BR': 'LINE_BREAK',\n    'EM': 'EMPHASISED_TEXT',\n    'H1': 'HEADING_LEVEL1',\n    'H2': 'HEADING_LEVEL2',\n    'H3': 'HEADING_LEVEL3',\n    'H4': 'HEADING_LEVEL4',\n    'H5': 'HEADING_LEVEL5',\n    'H6': 'HEADING_LEVEL6',\n    'HR': 'HORIZONTAL_RULE',\n    'I': 'ITALIC_TEXT',\n    'LI': 'LIST_ITEM',\n    'LINK': 'MEDIA_LINK',\n    'OL': 'ORDERED_LIST',\n    'P': 'PARAGRAPH',\n    'Q': 'QUOTATION',\n    'S': 'STRIKETHROUGH_TEXT',\n    'SMALL': 'SMALL_TEXT',\n    'SUB': 'SUBSTRIPT',\n    'SUP': 'SUPERSCRIPT',\n    'TBODY': 'TABLE_BODY',\n    'TD': 'TABLE_CELL',\n    'TFOOT': 'TABLE_FOOTER',\n    'TH': 'TABLE_HEADER_CELL',\n    'THEAD': 'TABLE_HEADER',\n    'TR': 'TABLE_ROW',\n    'TT': 'MONOSPACED_TEXT',\n    'U': 'UNDERLINED_TEXT',\n    'UL': 'UNORDERED_LIST',\n};\n/**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n */\nvar /**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n */\nPlaceholderRegistry = /** @class */ (function () {\n    function PlaceholderRegistry() {\n        this._placeHolderNameCounts = {};\n        this._signatureToName = {};\n    }\n    /**\n     * @param {?} tag\n     * @param {?} attrs\n     * @param {?} isVoid\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype.getStartTagPlaceholderName = /**\n     * @param {?} tag\n     * @param {?} attrs\n     * @param {?} isVoid\n     * @return {?}\n     */\n    function (tag, attrs, isVoid) {\n        var /** @type {?} */ signature = this._hashTag(tag, attrs, isVoid);\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        var /** @type {?} */ upperTag = tag.toUpperCase();\n        var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || \"TAG_\" + upperTag;\n        var /** @type {?} */ name = this._generateUniqueName(isVoid ? baseName : \"START_\" + baseName);\n        this._signatureToName[signature] = name;\n        return name;\n    };\n    /**\n     * @param {?} tag\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype.getCloseTagPlaceholderName = /**\n     * @param {?} tag\n     * @return {?}\n     */\n    function (tag) {\n        var /** @type {?} */ signature = this._hashClosingTag(tag);\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        var /** @type {?} */ upperTag = tag.toUpperCase();\n        var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || \"TAG_\" + upperTag;\n        var /** @type {?} */ name = this._generateUniqueName(\"CLOSE_\" + baseName);\n        this._signatureToName[signature] = name;\n        return name;\n    };\n    /**\n     * @param {?} name\n     * @param {?} content\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype.getPlaceholderName = /**\n     * @param {?} name\n     * @param {?} content\n     * @return {?}\n     */\n    function (name, content) {\n        var /** @type {?} */ upperName = name.toUpperCase();\n        var /** @type {?} */ signature = \"PH: \" + upperName + \"=\" + content;\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        var /** @type {?} */ uniqueName = this._generateUniqueName(upperName);\n        this._signatureToName[signature] = uniqueName;\n        return uniqueName;\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype.getUniquePlaceholder = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return this._generateUniqueName(name.toUpperCase());\n    };\n    /**\n     * @param {?} tag\n     * @param {?} attrs\n     * @param {?} isVoid\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype._hashTag = /**\n     * @param {?} tag\n     * @param {?} attrs\n     * @param {?} isVoid\n     * @return {?}\n     */\n    function (tag, attrs, isVoid) {\n        var /** @type {?} */ start = \"<\" + tag;\n        var /** @type {?} */ strAttrs = Object.keys(attrs).sort().map(function (name) { return \" \" + name + \"=\" + attrs[name]; }).join('');\n        var /** @type {?} */ end = isVoid ? '/>' : \"></\" + tag + \">\";\n        return start + strAttrs + end;\n    };\n    /**\n     * @param {?} tag\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype._hashClosingTag = /**\n     * @param {?} tag\n     * @return {?}\n     */\n    function (tag) { return this._hashTag(\"/\" + tag, {}, false); };\n    /**\n     * @param {?} base\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype._generateUniqueName = /**\n     * @param {?} base\n     * @return {?}\n     */\n    function (base) {\n        var /** @type {?} */ seen = this._placeHolderNameCounts.hasOwnProperty(base);\n        if (!seen) {\n            this._placeHolderNameCounts[base] = 1;\n            return base;\n        }\n        var /** @type {?} */ id = this._placeHolderNameCounts[base];\n        this._placeHolderNameCounts[base] = id + 1;\n        return base + \"_\" + id;\n    };\n    return PlaceholderRegistry;\n}());\n/**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n */\nexport { PlaceholderRegistry };\nfunction PlaceholderRegistry_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PlaceholderRegistry.prototype._placeHolderNameCounts;\n    /** @type {?} */\n    PlaceholderRegistry.prototype._signatureToName;\n}\n//# sourceMappingURL=placeholder.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Lexer as ExpressionLexer } from '../expression_parser/lexer';\nimport { Parser as ExpressionParser } from '../expression_parser/parser';\nimport * as html from '../ml_parser/ast';\nimport { getHtmlTagDefinition } from '../ml_parser/html_tags';\nimport * as i18n from './i18n_ast';\nimport { PlaceholderRegistry } from './serializers/placeholder';\nvar /** @type {?} */ _expParser = new ExpressionParser(new ExpressionLexer());\n/**\n * Returns a function converting html nodes to an i18n Message given an interpolationConfig\n * @param {?} interpolationConfig\n * @return {?}\n */\nexport function createI18nMessageFactory(interpolationConfig) {\n    var /** @type {?} */ visitor = new _I18nVisitor(_expParser, interpolationConfig);\n    return function (nodes, meaning, description, id) {\n        return visitor.toI18nMessage(nodes, meaning, description, id);\n    };\n}\nvar _I18nVisitor = /** @class */ (function () {\n    function _I18nVisitor(_expressionParser, _interpolationConfig) {\n        this._expressionParser = _expressionParser;\n        this._interpolationConfig = _interpolationConfig;\n    }\n    /**\n     * @param {?} nodes\n     * @param {?} meaning\n     * @param {?} description\n     * @param {?} id\n     * @return {?}\n     */\n    _I18nVisitor.prototype.toI18nMessage = /**\n     * @param {?} nodes\n     * @param {?} meaning\n     * @param {?} description\n     * @param {?} id\n     * @return {?}\n     */\n    function (nodes, meaning, description, id) {\n        this._isIcu = nodes.length == 1 && nodes[0] instanceof html.Expansion;\n        this._icuDepth = 0;\n        this._placeholderRegistry = new PlaceholderRegistry();\n        this._placeholderToContent = {};\n        this._placeholderToMessage = {};\n        var /** @type {?} */ i18nodes = html.visitAll(this, nodes, {});\n        return new i18n.Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);\n    };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    _I18nVisitor.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    function (el, context) {\n        var /** @type {?} */ children = html.visitAll(this, el.children);\n        var /** @type {?} */ attrs = {};\n        el.attrs.forEach(function (attr) {\n            // Do not visit the attributes, translatable ones are top-level ASTs\n            attrs[attr.name] = attr.value;\n        });\n        var /** @type {?} */ isVoid = getHtmlTagDefinition(el.name).isVoid;\n        var /** @type {?} */ startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n        this._placeholderToContent[startPhName] = /** @type {?} */ ((el.sourceSpan)).toString();\n        var /** @type {?} */ closePhName = '';\n        if (!isVoid) {\n            closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);\n            this._placeholderToContent[closePhName] = \"</\" + el.name + \">\";\n        }\n        return new i18n.TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, /** @type {?} */ ((el.sourceSpan)));\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    _I18nVisitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) {\n        return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);\n    };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    _I18nVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) {\n        return this._visitTextWithInterpolation(text.value, /** @type {?} */ ((text.sourceSpan)));\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    _I18nVisitor.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { return null; };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    _I18nVisitor.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        this._icuDepth++;\n        var /** @type {?} */ i18nIcuCases = {};\n        var /** @type {?} */ i18nIcu = new i18n.Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n        icu.cases.forEach(function (caze) {\n            i18nIcuCases[caze.value] = new i18n.Container(caze.expression.map(function (node) { return node.visit(_this, {}); }), caze.expSourceSpan);\n        });\n        this._icuDepth--;\n        if (this._isIcu || this._icuDepth > 0) {\n            // Returns an ICU node when:\n            // - the message (vs a part of the message) is an ICU message, or\n            // - the ICU message is nested.\n            var /** @type {?} */ expPh = this._placeholderRegistry.getUniquePlaceholder(\"VAR_\" + icu.type);\n            i18nIcu.expressionPlaceholder = expPh;\n            this._placeholderToContent[expPh] = icu.switchValue;\n            return i18nIcu;\n        }\n        // Else returns a placeholder\n        // ICU placeholders should not be replaced with their original content but with the their\n        // translations. We need to create a new visitor (they are not re-entrant) to compute the\n        // message id.\n        // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n        var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\n        var /** @type {?} */ visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);\n        this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '', '');\n        return new i18n.IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n    };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    _I18nVisitor.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (icuCase, context) {\n        throw new Error('Unreachable code');\n    };\n    /**\n     * @param {?} text\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    _I18nVisitor.prototype._visitTextWithInterpolation = /**\n     * @param {?} text\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (text, sourceSpan) {\n        var /** @type {?} */ splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);\n        if (!splitInterpolation) {\n            // No expression, return a single text\n            return new i18n.Text(text, sourceSpan);\n        }\n        // Return a group of text + expressions\n        var /** @type {?} */ nodes = [];\n        var /** @type {?} */ container = new i18n.Container(nodes, sourceSpan);\n        var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;\n        for (var /** @type {?} */ i = 0; i < splitInterpolation.strings.length - 1; i++) {\n            var /** @type {?} */ expression = splitInterpolation.expressions[i];\n            var /** @type {?} */ baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';\n            var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);\n            if (splitInterpolation.strings[i].length) {\n                // No need to add empty strings\n                nodes.push(new i18n.Text(splitInterpolation.strings[i], sourceSpan));\n            }\n            nodes.push(new i18n.Placeholder(expression, phName, sourceSpan));\n            this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;\n        }\n        // The last index contains no expression\n        var /** @type {?} */ lastStringIdx = splitInterpolation.strings.length - 1;\n        if (splitInterpolation.strings[lastStringIdx].length) {\n            nodes.push(new i18n.Text(splitInterpolation.strings[lastStringIdx], sourceSpan));\n        }\n        return container;\n    };\n    return _I18nVisitor;\n}());\nfunction _I18nVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _I18nVisitor.prototype._isIcu;\n    /** @type {?} */\n    _I18nVisitor.prototype._icuDepth;\n    /** @type {?} */\n    _I18nVisitor.prototype._placeholderRegistry;\n    /** @type {?} */\n    _I18nVisitor.prototype._placeholderToContent;\n    /** @type {?} */\n    _I18nVisitor.prototype._placeholderToMessage;\n    /** @type {?} */\n    _I18nVisitor.prototype._expressionParser;\n    /** @type {?} */\n    _I18nVisitor.prototype._interpolationConfig;\n}\nvar /** @type {?} */ _CUSTOM_PH_EXP = /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*(\"|')([\\s\\S]*?)\\1[\\s\\S]*\\)/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction _extractPlaceholderName(input) {\n    return input.split(_CUSTOM_PH_EXP)[2];\n}\n//# sourceMappingURL=i18n_parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ParseError } from '../parse_util';\n/**\n * An i18n error.\n */\nvar /**\n * An i18n error.\n */\nI18nError = /** @class */ (function (_super) {\n    tslib_1.__extends(I18nError, _super);\n    function I18nError(span, msg) {\n        return _super.call(this, span, msg) || this;\n    }\n    return I18nError;\n}(ParseError));\n/**\n * An i18n error.\n */\nexport { I18nError };\n//# sourceMappingURL=parse_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as html from '../ml_parser/ast';\nimport { ParseTreeResult } from '../ml_parser/parser';\nimport * as i18n from './i18n_ast';\nimport { createI18nMessageFactory } from './i18n_parser';\nimport { I18nError } from './parse_util';\nvar /** @type {?} */ _I18N_ATTR = 'i18n';\nvar /** @type {?} */ _I18N_ATTR_PREFIX = 'i18n-';\nvar /** @type {?} */ _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;\nvar /** @type {?} */ MEANING_SEPARATOR = '|';\nvar /** @type {?} */ ID_SEPARATOR = '@@';\nvar /** @type {?} */ i18nCommentsWarned = false;\n/**\n * Extract translatable messages from an html AST\n * @param {?} nodes\n * @param {?} interpolationConfig\n * @param {?} implicitTags\n * @param {?} implicitAttrs\n * @return {?}\n */\nexport function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {\n    var /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);\n    return visitor.extract(nodes, interpolationConfig);\n}\n/**\n * @param {?} nodes\n * @param {?} translations\n * @param {?} interpolationConfig\n * @param {?} implicitTags\n * @param {?} implicitAttrs\n * @return {?}\n */\nexport function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {\n    var /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);\n    return visitor.merge(nodes, translations, interpolationConfig);\n}\nvar ExtractionResult = /** @class */ (function () {\n    function ExtractionResult(messages, errors) {\n        this.messages = messages;\n        this.errors = errors;\n    }\n    return ExtractionResult;\n}());\nexport { ExtractionResult };\nfunction ExtractionResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExtractionResult.prototype.messages;\n    /** @type {?} */\n    ExtractionResult.prototype.errors;\n}\n/** @enum {number} */\nvar _VisitorMode = {\n    Extract: 0,\n    Merge: 1,\n};\n_VisitorMode[_VisitorMode.Extract] = \"Extract\";\n_VisitorMode[_VisitorMode.Merge] = \"Merge\";\n/**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n *\n * \\@internal\n */\nvar /**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n *\n * \\@internal\n */\n_Visitor = /** @class */ (function () {\n    function _Visitor(_implicitTags, _implicitAttrs) {\n        this._implicitTags = _implicitTags;\n        this._implicitAttrs = _implicitAttrs;\n    }\n    /**\n     * Extracts the messages from the tree\n     */\n    /**\n     * Extracts the messages from the tree\n     * @param {?} nodes\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    _Visitor.prototype.extract = /**\n     * Extracts the messages from the tree\n     * @param {?} nodes\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    function (nodes, interpolationConfig) {\n        var _this = this;\n        this._init(_VisitorMode.Extract, interpolationConfig);\n        nodes.forEach(function (node) { return node.visit(_this, null); });\n        if (this._inI18nBlock) {\n            this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n        }\n        return new ExtractionResult(this._messages, this._errors);\n    };\n    /**\n     * Returns a tree where all translatable nodes are translated\n     */\n    /**\n     * Returns a tree where all translatable nodes are translated\n     * @param {?} nodes\n     * @param {?} translations\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    _Visitor.prototype.merge = /**\n     * Returns a tree where all translatable nodes are translated\n     * @param {?} nodes\n     * @param {?} translations\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    function (nodes, translations, interpolationConfig) {\n        this._init(_VisitorMode.Merge, interpolationConfig);\n        this._translations = translations;\n        // Construct a single fake root element\n        var /** @type {?} */ wrapper = new html.Element('wrapper', [], nodes, /** @type {?} */ ((undefined)), undefined, undefined);\n        var /** @type {?} */ translatedNode = wrapper.visit(this, null);\n        if (this._inI18nBlock) {\n            this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n        }\n        return new ParseTreeResult(translatedNode.children, this._errors);\n    };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (icuCase, context) {\n        // Parse cases for translatable html attributes\n        var /** @type {?} */ expression = html.visitAll(this, icuCase.expression, context);\n        if (this._mode === _VisitorMode.Merge) {\n            return new html.ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);\n        }\n    };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        this._mayBeAddBlockChildren(icu);\n        var /** @type {?} */ wasInIcu = this._inIcu;\n        if (!this._inIcu) {\n            // nested ICU messages should not be extracted but top-level translated as a whole\n            if (this._isInTranslatableSection) {\n                this._addMessage([icu]);\n            }\n            this._inIcu = true;\n        }\n        var /** @type {?} */ cases = html.visitAll(this, icu.cases, context);\n        if (this._mode === _VisitorMode.Merge) {\n            icu = new html.Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\n        }\n        this._inIcu = wasInIcu;\n        return icu;\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) {\n        var /** @type {?} */ isOpening = _isOpeningComment(comment);\n        if (isOpening && this._isInTranslatableSection) {\n            this._reportError(comment, 'Could not start a block inside a translatable section');\n            return;\n        }\n        var /** @type {?} */ isClosing = _isClosingComment(comment);\n        if (isClosing && !this._inI18nBlock) {\n            this._reportError(comment, 'Trying to close an unopened block');\n            return;\n        }\n        if (!this._inI18nNode && !this._inIcu) {\n            if (!this._inI18nBlock) {\n                if (isOpening) {\n                    // deprecated from v5 you should use <ng-container i18n> instead of i18n comments\n                    if (!i18nCommentsWarned && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\n                        i18nCommentsWarned = true;\n                        var /** @type {?} */ details = comment.sourceSpan.details ? \", \" + comment.sourceSpan.details : '';\n                        // TODO(ocombe): use a log service once there is a public one available\n                        console.warn(\"I18n comments are deprecated, use an <ng-container> element instead (\" + comment.sourceSpan.start + details + \")\");\n                    }\n                    this._inI18nBlock = true;\n                    this._blockStartDepth = this._depth;\n                    this._blockChildren = [];\n                    this._blockMeaningAndDesc = /** @type {?} */ ((comment.value)).replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();\n                    this._openTranslatableSection(comment);\n                }\n            }\n            else {\n                if (isClosing) {\n                    if (this._depth == this._blockStartDepth) {\n                        this._closeTranslatableSection(comment, this._blockChildren);\n                        this._inI18nBlock = false;\n                        var /** @type {?} */ message = /** @type {?} */ ((this._addMessage(this._blockChildren, this._blockMeaningAndDesc)));\n                        // merge attributes in sections\n                        var /** @type {?} */ nodes = this._translateMessage(comment, message);\n                        return html.visitAll(this, nodes);\n                    }\n                    else {\n                        this._reportError(comment, 'I18N blocks should not cross element boundaries');\n                        return;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) {\n        if (this._isInTranslatableSection) {\n            this._mayBeAddBlockChildren(text);\n        }\n        return text;\n    };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    function (el, context) {\n        var _this = this;\n        this._mayBeAddBlockChildren(el);\n        this._depth++;\n        var /** @type {?} */ wasInI18nNode = this._inI18nNode;\n        var /** @type {?} */ wasInImplicitNode = this._inImplicitNode;\n        var /** @type {?} */ childNodes = [];\n        var /** @type {?} */ translatedChildNodes = /** @type {?} */ ((undefined));\n        // Extract:\n        // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\n        // - ICU messages\n        var /** @type {?} */ i18nAttr = _getI18nAttr(el);\n        var /** @type {?} */ i18nMeta = i18nAttr ? i18nAttr.value : '';\n        var /** @type {?} */ isImplicit = this._implicitTags.some(function (tag) { return el.name === tag; }) && !this._inIcu &&\n            !this._isInTranslatableSection;\n        var /** @type {?} */ isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n        this._inImplicitNode = wasInImplicitNode || isImplicit;\n        if (!this._isInTranslatableSection && !this._inIcu) {\n            if (i18nAttr || isTopLevelImplicit) {\n                this._inI18nNode = true;\n                var /** @type {?} */ message = /** @type {?} */ ((this._addMessage(el.children, i18nMeta)));\n                translatedChildNodes = this._translateMessage(el, message);\n            }\n            if (this._mode == _VisitorMode.Extract) {\n                var /** @type {?} */ isTranslatable = i18nAttr || isTopLevelImplicit;\n                if (isTranslatable)\n                    this._openTranslatableSection(el);\n                html.visitAll(this, el.children);\n                if (isTranslatable)\n                    this._closeTranslatableSection(el, el.children);\n            }\n        }\n        else {\n            if (i18nAttr || isTopLevelImplicit) {\n                this._reportError(el, 'Could not mark an element as translatable inside a translatable section');\n            }\n            if (this._mode == _VisitorMode.Extract) {\n                // Descend into child nodes for extraction\n                html.visitAll(this, el.children);\n            }\n        }\n        if (this._mode === _VisitorMode.Merge) {\n            var /** @type {?} */ visitNodes = translatedChildNodes || el.children;\n            visitNodes.forEach(function (child) {\n                var /** @type {?} */ visited = child.visit(_this, context);\n                if (visited && !_this._isInTranslatableSection) {\n                    // Do not add the children from translatable sections (= i18n blocks here)\n                    // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\n                    childNodes = childNodes.concat(visited);\n                }\n            });\n        }\n        this._visitAttributesOf(el);\n        this._depth--;\n        this._inI18nNode = wasInI18nNode;\n        this._inImplicitNode = wasInImplicitNode;\n        if (this._mode === _VisitorMode.Merge) {\n            var /** @type {?} */ translatedAttrs = this._translateAttributes(el);\n            return new html.Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n        }\n        return null;\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) {\n        throw new Error('unreachable code');\n    };\n    /**\n     * @param {?} mode\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    _Visitor.prototype._init = /**\n     * @param {?} mode\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    function (mode, interpolationConfig) {\n        this._mode = mode;\n        this._inI18nBlock = false;\n        this._inI18nNode = false;\n        this._depth = 0;\n        this._inIcu = false;\n        this._msgCountAtSectionStart = undefined;\n        this._errors = [];\n        this._messages = [];\n        this._inImplicitNode = false;\n        this._createI18nMessage = createI18nMessageFactory(interpolationConfig);\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    _Visitor.prototype._visitAttributesOf = /**\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        var _this = this;\n        var /** @type {?} */ explicitAttrNameToValue = {};\n        var /** @type {?} */ implicitAttrNames = this._implicitAttrs[el.name] || [];\n        el.attrs.filter(function (attr) { return attr.name.startsWith(_I18N_ATTR_PREFIX); })\n            .forEach(function (attr) {\n            return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n                attr.value;\n        });\n        el.attrs.forEach(function (attr) {\n            if (attr.name in explicitAttrNameToValue) {\n                _this._addMessage([attr], explicitAttrNameToValue[attr.name]);\n            }\n            else if (implicitAttrNames.some(function (name) { return attr.name === name; })) {\n                _this._addMessage([attr]);\n            }\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?=} msgMeta\n     * @return {?}\n     */\n    _Visitor.prototype._addMessage = /**\n     * @param {?} ast\n     * @param {?=} msgMeta\n     * @return {?}\n     */\n    function (ast, msgMeta) {\n        if (ast.length == 0 ||\n            ast.length == 1 && ast[0] instanceof html.Attribute && !(/** @type {?} */ (ast[0])).value) {\n            // Do not create empty messages\n            return null;\n        }\n        var _a = _parseMessageMeta(msgMeta), meaning = _a.meaning, description = _a.description, id = _a.id;\n        var /** @type {?} */ message = this._createI18nMessage(ast, meaning, description, id);\n        this._messages.push(message);\n        return message;\n    };\n    /**\n     * @param {?} el\n     * @param {?} message\n     * @return {?}\n     */\n    _Visitor.prototype._translateMessage = /**\n     * @param {?} el\n     * @param {?} message\n     * @return {?}\n     */\n    function (el, message) {\n        if (message && this._mode === _VisitorMode.Merge) {\n            var /** @type {?} */ nodes = this._translations.get(message);\n            if (nodes) {\n                return nodes;\n            }\n            this._reportError(el, \"Translation unavailable for message id=\\\"\" + this._translations.digest(message) + \"\\\"\");\n        }\n        return [];\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    _Visitor.prototype._translateAttributes = /**\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        var _this = this;\n        var /** @type {?} */ attributes = el.attrs;\n        var /** @type {?} */ i18nParsedMessageMeta = {};\n        attributes.forEach(function (attr) {\n            if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n                i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n                    _parseMessageMeta(attr.value);\n            }\n        });\n        var /** @type {?} */ translatedAttributes = [];\n        attributes.forEach(function (attr) {\n            if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n                // strip i18n specific attributes\n                return;\n            }\n            if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {\n                var _a = i18nParsedMessageMeta[attr.name], meaning = _a.meaning, description = _a.description, id = _a.id;\n                var /** @type {?} */ message = _this._createI18nMessage([attr], meaning, description, id);\n                var /** @type {?} */ nodes = _this._translations.get(message);\n                if (nodes) {\n                    if (nodes.length == 0) {\n                        translatedAttributes.push(new html.Attribute(attr.name, '', attr.sourceSpan));\n                    }\n                    else if (nodes[0] instanceof html.Text) {\n                        var /** @type {?} */ value = (/** @type {?} */ (nodes[0])).value;\n                        translatedAttributes.push(new html.Attribute(attr.name, value, attr.sourceSpan));\n                    }\n                    else {\n                        _this._reportError(el, \"Unexpected translation for attribute \\\"\" + attr.name + \"\\\" (id=\\\"\" + (id || _this._translations.digest(message)) + \"\\\")\");\n                    }\n                }\n                else {\n                    _this._reportError(el, \"Translation unavailable for attribute \\\"\" + attr.name + \"\\\" (id=\\\"\" + (id || _this._translations.digest(message)) + \"\\\")\");\n                }\n            }\n            else {\n                translatedAttributes.push(attr);\n            }\n        });\n        return translatedAttributes;\n    };\n    /**\n     * Add the node as a child of the block when:\n     * - we are in a block,\n     * - we are not inside a ICU message (those are handled separately),\n     * - the node is a \"direct child\" of the block\n     * @param {?} node\n     * @return {?}\n     */\n    _Visitor.prototype._mayBeAddBlockChildren = /**\n     * Add the node as a child of the block when:\n     * - we are in a block,\n     * - we are not inside a ICU message (those are handled separately),\n     * - the node is a \"direct child\" of the block\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {\n            this._blockChildren.push(node);\n        }\n    };\n    /**\n     * Marks the start of a section, see `_closeTranslatableSection`\n     * @param {?} node\n     * @return {?}\n     */\n    _Visitor.prototype._openTranslatableSection = /**\n     * Marks the start of a section, see `_closeTranslatableSection`\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        if (this._isInTranslatableSection) {\n            this._reportError(node, 'Unexpected section start');\n        }\n        else {\n            this._msgCountAtSectionStart = this._messages.length;\n        }\n    };\n    Object.defineProperty(_Visitor.prototype, \"_isInTranslatableSection\", {\n        get: /**\n         * A translatable section could be:\n         * - the content of translatable element,\n         * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\n         * @return {?}\n         */\n        function () {\n            return this._msgCountAtSectionStart !== void 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Terminates a section.\n     *\n     * If a section has only one significant children (comments not significant) then we should not\n     * keep the message from this children:\n     *\n     * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n     * - one for the <p> content with meaning and description,\n     * - another one for the ICU message.\n     *\n     * In this case the last message is discarded as it contains less information (the AST is\n     * otherwise identical).\n     *\n     * Note that we should still keep messages extracted from attributes inside the section (ie in the\n     * ICU message here)\n     * @param {?} node\n     * @param {?} directChildren\n     * @return {?}\n     */\n    _Visitor.prototype._closeTranslatableSection = /**\n     * Terminates a section.\n     *\n     * If a section has only one significant children (comments not significant) then we should not\n     * keep the message from this children:\n     *\n     * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n     * - one for the <p> content with meaning and description,\n     * - another one for the ICU message.\n     *\n     * In this case the last message is discarded as it contains less information (the AST is\n     * otherwise identical).\n     *\n     * Note that we should still keep messages extracted from attributes inside the section (ie in the\n     * ICU message here)\n     * @param {?} node\n     * @param {?} directChildren\n     * @return {?}\n     */\n    function (node, directChildren) {\n        if (!this._isInTranslatableSection) {\n            this._reportError(node, 'Unexpected section end');\n            return;\n        }\n        var /** @type {?} */ startIndex = this._msgCountAtSectionStart;\n        var /** @type {?} */ significantChildren = directChildren.reduce(function (count, node) { return count + (node instanceof html.Comment ? 0 : 1); }, 0);\n        if (significantChildren == 1) {\n            for (var /** @type {?} */ i = this._messages.length - 1; i >= /** @type {?} */ ((startIndex)); i--) {\n                var /** @type {?} */ ast = this._messages[i].nodes;\n                if (!(ast.length == 1 && ast[0] instanceof i18n.Text)) {\n                    this._messages.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        this._msgCountAtSectionStart = undefined;\n    };\n    /**\n     * @param {?} node\n     * @param {?} msg\n     * @return {?}\n     */\n    _Visitor.prototype._reportError = /**\n     * @param {?} node\n     * @param {?} msg\n     * @return {?}\n     */\n    function (node, msg) {\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), msg));\n    };\n    return _Visitor;\n}());\nfunction _Visitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _Visitor.prototype._depth;\n    /** @type {?} */\n    _Visitor.prototype._inI18nNode;\n    /** @type {?} */\n    _Visitor.prototype._inImplicitNode;\n    /** @type {?} */\n    _Visitor.prototype._inI18nBlock;\n    /** @type {?} */\n    _Visitor.prototype._blockMeaningAndDesc;\n    /** @type {?} */\n    _Visitor.prototype._blockChildren;\n    /** @type {?} */\n    _Visitor.prototype._blockStartDepth;\n    /** @type {?} */\n    _Visitor.prototype._inIcu;\n    /** @type {?} */\n    _Visitor.prototype._msgCountAtSectionStart;\n    /** @type {?} */\n    _Visitor.prototype._errors;\n    /** @type {?} */\n    _Visitor.prototype._mode;\n    /** @type {?} */\n    _Visitor.prototype._messages;\n    /** @type {?} */\n    _Visitor.prototype._translations;\n    /** @type {?} */\n    _Visitor.prototype._createI18nMessage;\n    /** @type {?} */\n    _Visitor.prototype._implicitTags;\n    /** @type {?} */\n    _Visitor.prototype._implicitAttrs;\n}\n/**\n * @param {?} n\n * @return {?}\n */\nfunction _isOpeningComment(n) {\n    return !!(n instanceof html.Comment && n.value && n.value.startsWith('i18n'));\n}\n/**\n * @param {?} n\n * @return {?}\n */\nfunction _isClosingComment(n) {\n    return !!(n instanceof html.Comment && n.value && n.value === '/i18n');\n}\n/**\n * @param {?} p\n * @return {?}\n */\nfunction _getI18nAttr(p) {\n    return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR; }) || null;\n}\n/**\n * @param {?=} i18n\n * @return {?}\n */\nfunction _parseMessageMeta(i18n) {\n    if (!i18n)\n        return { meaning: '', description: '', id: '' };\n    var /** @type {?} */ idIndex = i18n.indexOf(ID_SEPARATOR);\n    var /** @type {?} */ descIndex = i18n.indexOf(MEANING_SEPARATOR);\n    var _a = (idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''], meaningAndDesc = _a[0], id = _a[1];\n    var _b = (descIndex > -1) ?\n        [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :\n        ['', meaningAndDesc], meaning = _b[0], description = _b[1];\n    return { meaning: meaning, description: description, id: id };\n}\n//# sourceMappingURL=extractor_merger.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TagContentType } from './tags';\nvar XmlTagDefinition = /** @class */ (function () {\n    function XmlTagDefinition() {\n        this.closedByParent = false;\n        this.contentType = TagContentType.PARSABLE_DATA;\n        this.isVoid = false;\n        this.ignoreFirstLf = false;\n        this.canSelfClose = true;\n    }\n    /**\n     * @param {?} currentParent\n     * @return {?}\n     */\n    XmlTagDefinition.prototype.requireExtraParent = /**\n     * @param {?} currentParent\n     * @return {?}\n     */\n    function (currentParent) { return false; };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    XmlTagDefinition.prototype.isClosedByChild = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return false; };\n    return XmlTagDefinition;\n}());\nexport { XmlTagDefinition };\nfunction XmlTagDefinition_tsickle_Closure_declarations() {\n    /** @type {?} */\n    XmlTagDefinition.prototype.closedByParent;\n    /** @type {?} */\n    XmlTagDefinition.prototype.requiredParents;\n    /** @type {?} */\n    XmlTagDefinition.prototype.parentToAdd;\n    /** @type {?} */\n    XmlTagDefinition.prototype.implicitNamespacePrefix;\n    /** @type {?} */\n    XmlTagDefinition.prototype.contentType;\n    /** @type {?} */\n    XmlTagDefinition.prototype.isVoid;\n    /** @type {?} */\n    XmlTagDefinition.prototype.ignoreFirstLf;\n    /** @type {?} */\n    XmlTagDefinition.prototype.canSelfClose;\n}\nvar /** @type {?} */ _TAG_DEFINITION = new XmlTagDefinition();\n/**\n * @param {?} tagName\n * @return {?}\n */\nexport function getXmlTagDefinition(tagName) {\n    return _TAG_DEFINITION;\n}\n//# sourceMappingURL=xml_tags.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Parser } from './parser';\nimport { getXmlTagDefinition } from './xml_tags';\nexport { ParseTreeResult, TreeError } from './parser';\nvar XmlParser = /** @class */ (function (_super) {\n    tslib_1.__extends(XmlParser, _super);\n    function XmlParser() {\n        return _super.call(this, getXmlTagDefinition) || this;\n    }\n    /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @return {?}\n     */\n    XmlParser.prototype.parse = /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @return {?}\n     */\n    function (source, url, parseExpansionForms) {\n        if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n        return _super.prototype.parse.call(this, source, url, parseExpansionForms);\n    };\n    return XmlParser;\n}(Parser));\nexport { XmlParser };\n//# sourceMappingURL=xml_parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as i18n from '../i18n_ast';\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nSerializer = /** @class */ (function () {\n    function Serializer() {\n    }\n    // Creates a name mapper, see `PlaceholderMapper`\n    // Returning `null` means that no name mapping is used.\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Serializer.prototype.createNameMapper = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) { return null; };\n    return Serializer;\n}());\n/**\n * @abstract\n */\nexport { Serializer };\nfunction Serializer_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    Serializer.prototype.write = function (messages, locale) { };\n    /**\n     * @abstract\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    Serializer.prototype.load = function (content, url) { };\n    /**\n     * @abstract\n     * @param {?} message\n     * @return {?}\n     */\n    Serializer.prototype.digest = function (message) { };\n}\n/**\n * A `PlaceholderMapper` converts placeholder names from internal to serialized representation and\n * back.\n *\n * It should be used for serialization format that put constraints on the placeholder names.\n * @record\n */\nexport function PlaceholderMapper() { }\nfunction PlaceholderMapper_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PlaceholderMapper.prototype.toPublicName;\n    /** @type {?} */\n    PlaceholderMapper.prototype.toInternalName;\n}\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nvar /**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nSimplePlaceholderMapper = /** @class */ (function (_super) {\n    tslib_1.__extends(SimplePlaceholderMapper, _super);\n    // create a mapping from the message\n    function SimplePlaceholderMapper(message, mapName) {\n        var _this = _super.call(this) || this;\n        _this.mapName = mapName;\n        _this.internalToPublic = {};\n        _this.publicToNextId = {};\n        _this.publicToInternal = {};\n        message.nodes.forEach(function (node) { return node.visit(_this); });\n        return _this;\n    }\n    /**\n     * @param {?} internalName\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.toPublicName = /**\n     * @param {?} internalName\n     * @return {?}\n     */\n    function (internalName) {\n        return this.internalToPublic.hasOwnProperty(internalName) ?\n            this.internalToPublic[internalName] :\n            null;\n    };\n    /**\n     * @param {?} publicName\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.toInternalName = /**\n     * @param {?} publicName\n     * @return {?}\n     */\n    function (publicName) {\n        return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :\n            null;\n    };\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    function (text, context) { return null; };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        this.visitPlaceholderName(ph.startName);\n        _super.prototype.visitTagPlaceholder.call(this, ph, context);\n        this.visitPlaceholderName(ph.closeName);\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) { this.visitPlaceholderName(ph.name); };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        this.visitPlaceholderName(ph.name);\n    };\n    /**\n     * @param {?} internalName\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitPlaceholderName = /**\n     * @param {?} internalName\n     * @return {?}\n     */\n    function (internalName) {\n        if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n            return;\n        }\n        var /** @type {?} */ publicName = this.mapName(internalName);\n        if (this.publicToInternal.hasOwnProperty(publicName)) {\n            // Create a new XMB when it has already been used\n            var /** @type {?} */ nextId = this.publicToNextId[publicName];\n            this.publicToNextId[publicName] = nextId + 1;\n            publicName = publicName + \"_\" + nextId;\n        }\n        else {\n            this.publicToNextId[publicName] = 1;\n        }\n        this.internalToPublic[internalName] = publicName;\n        this.publicToInternal[publicName] = internalName;\n    };\n    return SimplePlaceholderMapper;\n}(i18n.RecurseVisitor));\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nexport { SimplePlaceholderMapper };\nfunction SimplePlaceholderMapper_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SimplePlaceholderMapper.prototype.internalToPublic;\n    /** @type {?} */\n    SimplePlaceholderMapper.prototype.publicToNextId;\n    /** @type {?} */\n    SimplePlaceholderMapper.prototype.publicToInternal;\n    /** @type {?} */\n    SimplePlaceholderMapper.prototype.mapName;\n}\n//# sourceMappingURL=serializer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * @record\n */\nexport function IVisitor() { }\nfunction IVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    IVisitor.prototype.visitTag;\n    /** @type {?} */\n    IVisitor.prototype.visitText;\n    /** @type {?} */\n    IVisitor.prototype.visitDeclaration;\n    /** @type {?} */\n    IVisitor.prototype.visitDoctype;\n}\nvar _Visitor = /** @class */ (function () {\n    function _Visitor() {\n    }\n    /**\n     * @param {?} tag\n     * @return {?}\n     */\n    _Visitor.prototype.visitTag = /**\n     * @param {?} tag\n     * @return {?}\n     */\n    function (tag) {\n        var _this = this;\n        var /** @type {?} */ strAttrs = this._serializeAttributes(tag.attrs);\n        if (tag.children.length == 0) {\n            return \"<\" + tag.name + strAttrs + \"/>\";\n        }\n        var /** @type {?} */ strChildren = tag.children.map(function (node) { return node.visit(_this); });\n        return \"<\" + tag.name + strAttrs + \">\" + strChildren.join('') + \"</\" + tag.name + \">\";\n    };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    _Visitor.prototype.visitText = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) { return text.value; };\n    /**\n     * @param {?} decl\n     * @return {?}\n     */\n    _Visitor.prototype.visitDeclaration = /**\n     * @param {?} decl\n     * @return {?}\n     */\n    function (decl) {\n        return \"<?xml\" + this._serializeAttributes(decl.attrs) + \" ?>\";\n    };\n    /**\n     * @param {?} attrs\n     * @return {?}\n     */\n    _Visitor.prototype._serializeAttributes = /**\n     * @param {?} attrs\n     * @return {?}\n     */\n    function (attrs) {\n        var /** @type {?} */ strAttrs = Object.keys(attrs).map(function (name) { return name + \"=\\\"\" + attrs[name] + \"\\\"\"; }).join(' ');\n        return strAttrs.length > 0 ? ' ' + strAttrs : '';\n    };\n    /**\n     * @param {?} doctype\n     * @return {?}\n     */\n    _Visitor.prototype.visitDoctype = /**\n     * @param {?} doctype\n     * @return {?}\n     */\n    function (doctype) {\n        return \"<!DOCTYPE \" + doctype.rootTag + \" [\\n\" + doctype.dtd + \"\\n]>\";\n    };\n    return _Visitor;\n}());\nvar /** @type {?} */ _visitor = new _Visitor();\n/**\n * @param {?} nodes\n * @return {?}\n */\nexport function serialize(nodes) {\n    return nodes.map(function (node) { return node.visit(_visitor); }).join('');\n}\n/**\n * @record\n */\nexport function Node() { }\nfunction Node_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Node.prototype.visit;\n}\nvar Declaration = /** @class */ (function () {\n    function Declaration(unescapedAttrs) {\n        var _this = this;\n        this.attrs = {};\n        Object.keys(unescapedAttrs).forEach(function (k) {\n            _this.attrs[k] = escapeXml(unescapedAttrs[k]);\n        });\n    }\n    /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    Declaration.prototype.visit = /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitDeclaration(this); };\n    return Declaration;\n}());\nexport { Declaration };\nfunction Declaration_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Declaration.prototype.attrs;\n}\nvar Doctype = /** @class */ (function () {\n    function Doctype(rootTag, dtd) {\n        this.rootTag = rootTag;\n        this.dtd = dtd;\n    }\n    /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    Doctype.prototype.visit = /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitDoctype(this); };\n    return Doctype;\n}());\nexport { Doctype };\nfunction Doctype_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Doctype.prototype.rootTag;\n    /** @type {?} */\n    Doctype.prototype.dtd;\n}\nvar Tag = /** @class */ (function () {\n    function Tag(name, unescapedAttrs, children) {\n        if (unescapedAttrs === void 0) { unescapedAttrs = {}; }\n        if (children === void 0) { children = []; }\n        var _this = this;\n        this.name = name;\n        this.children = children;\n        this.attrs = {};\n        Object.keys(unescapedAttrs).forEach(function (k) {\n            _this.attrs[k] = escapeXml(unescapedAttrs[k]);\n        });\n    }\n    /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    Tag.prototype.visit = /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitTag(this); };\n    return Tag;\n}());\nexport { Tag };\nfunction Tag_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Tag.prototype.attrs;\n    /** @type {?} */\n    Tag.prototype.name;\n    /** @type {?} */\n    Tag.prototype.children;\n}\nvar Text = /** @class */ (function () {\n    function Text(unescapedValue) {\n        this.value = escapeXml(unescapedValue);\n    }\n    /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    Text.prototype.visit = /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitText(this); };\n    return Text;\n}());\nexport { Text };\nfunction Text_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Text.prototype.value;\n}\nvar CR = /** @class */ (function (_super) {\n    tslib_1.__extends(CR, _super);\n    function CR(ws) {\n        if (ws === void 0) { ws = 0; }\n        return _super.call(this, \"\\n\" + new Array(ws + 1).join(' ')) || this;\n    }\n    return CR;\n}(Text));\nexport { CR };\nvar /** @type {?} */ _ESCAPED_CHARS = [\n    [/&/g, '&amp;'],\n    [/\"/g, '&quot;'],\n    [/'/g, '&apos;'],\n    [/</g, '&lt;'],\n    [/>/g, '&gt;'],\n];\n/**\n * @param {?} text\n * @return {?}\n */\nexport function escapeXml(text) {\n    return _ESCAPED_CHARS.reduce(function (text, entry) { return text.replace(entry[0], entry[1]); }, text);\n}\n//# sourceMappingURL=xml_helper.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as ml from '../../ml_parser/ast';\nimport { XmlParser } from '../../ml_parser/xml_parser';\nimport { digest } from '../digest';\nimport * as i18n from '../i18n_ast';\nimport { I18nError } from '../parse_util';\nimport { Serializer } from './serializer';\nimport * as xml from './xml_helper';\nvar /** @type {?} */ _VERSION = '1.2';\nvar /** @type {?} */ _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';\n// TODO(vicb): make this a param (s/_/-/)\nvar /** @type {?} */ _DEFAULT_SOURCE_LANG = 'en';\nvar /** @type {?} */ _PLACEHOLDER_TAG = 'x';\nvar /** @type {?} */ _MARKER_TAG = 'mrk';\nvar /** @type {?} */ _FILE_TAG = 'file';\nvar /** @type {?} */ _SOURCE_TAG = 'source';\nvar /** @type {?} */ _SEGMENT_SOURCE_TAG = 'seg-source';\nvar /** @type {?} */ _TARGET_TAG = 'target';\nvar /** @type {?} */ _UNIT_TAG = 'trans-unit';\nvar /** @type {?} */ _CONTEXT_GROUP_TAG = 'context-group';\nvar /** @type {?} */ _CONTEXT_TAG = 'context';\nvar Xliff = /** @class */ (function (_super) {\n    tslib_1.__extends(Xliff, _super);\n    function Xliff() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    Xliff.prototype.write = /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    function (messages, locale) {\n        var /** @type {?} */ visitor = new _WriteVisitor();\n        var /** @type {?} */ transUnits = [];\n        messages.forEach(function (message) {\n            var /** @type {?} */ contextTags = [];\n            message.sources.forEach(function (source) {\n                var /** @type {?} */ contextGroupTag = new xml.Tag(_CONTEXT_GROUP_TAG, { purpose: 'location' });\n                contextGroupTag.children.push(new xml.CR(10), new xml.Tag(_CONTEXT_TAG, { 'context-type': 'sourcefile' }, [new xml.Text(source.filePath)]), new xml.CR(10), new xml.Tag(_CONTEXT_TAG, { 'context-type': 'linenumber' }, [new xml.Text(\"\" + source.startLine)]), new xml.CR(8));\n                contextTags.push(new xml.CR(8), contextGroupTag);\n            });\n            var /** @type {?} */ transUnit = new xml.Tag(_UNIT_TAG, { id: message.id, datatype: 'html' });\n            (_a = transUnit.children).push.apply(_a, [new xml.CR(8), new xml.Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes))].concat(contextTags));\n            if (message.description) {\n                transUnit.children.push(new xml.CR(8), new xml.Tag('note', { priority: '1', from: 'description' }, [new xml.Text(message.description)]));\n            }\n            if (message.meaning) {\n                transUnit.children.push(new xml.CR(8), new xml.Tag('note', { priority: '1', from: 'meaning' }, [new xml.Text(message.meaning)]));\n            }\n            transUnit.children.push(new xml.CR(6));\n            transUnits.push(new xml.CR(6), transUnit);\n            var _a;\n        });\n        var /** @type {?} */ body = new xml.Tag('body', {}, transUnits.concat([new xml.CR(4)]));\n        var /** @type {?} */ file = new xml.Tag('file', {\n            'source-language': locale || _DEFAULT_SOURCE_LANG,\n            datatype: 'plaintext',\n            original: 'ng2.template',\n        }, [new xml.CR(4), body, new xml.CR(2)]);\n        var /** @type {?} */ xliff = new xml.Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [new xml.CR(2), file, new xml.CR()]);\n        return xml.serialize([\n            new xml.Declaration({ version: '1.0', encoding: 'UTF-8' }), new xml.CR(), xliff, new xml.CR()\n        ]);\n    };\n    /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    Xliff.prototype.load = /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    function (content, url) {\n        // xliff to xml nodes\n        var /** @type {?} */ xliffParser = new XliffParser();\n        var _a = xliffParser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;\n        // xml nodes to i18n nodes\n        var /** @type {?} */ i18nNodesByMsgId = {};\n        var /** @type {?} */ converter = new XmlToI18n();\n        Object.keys(msgIdToHtml).forEach(function (msgId) {\n            var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, e = _a.errors;\n            errors.push.apply(errors, e);\n            i18nNodesByMsgId[msgId] = i18nNodes;\n        });\n        if (errors.length) {\n            throw new Error(\"xliff parse errors:\\n\" + errors.join('\\n'));\n        }\n        return { locale: /** @type {?} */ ((locale)), i18nNodesByMsgId: i18nNodesByMsgId };\n    };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Xliff.prototype.digest = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) { return digest(message); };\n    return Xliff;\n}(Serializer));\nexport { Xliff };\nvar _WriteVisitor = /** @class */ (function () {\n    function _WriteVisitor() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    function (text, context) { return [new xml.Text(text.value)]; };\n    /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    function (container, context) {\n        var _this = this;\n        var /** @type {?} */ nodes = [];\n        container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });\n        return nodes;\n    };\n    /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        var /** @type {?} */ nodes = [new xml.Text(\"{\" + icu.expressionPlaceholder + \", \" + icu.type + \", \")];\n        Object.keys(icu.cases).forEach(function (c) {\n            nodes.push.apply(nodes, [new xml.Text(c + \" {\")].concat(icu.cases[c].visit(_this), [new xml.Text(\"} \")]));\n        });\n        nodes.push(new xml.Text(\"}\"));\n        return nodes;\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ ctype = getCtypeForTag(ph.tag);\n        if (ph.isVoid) {\n            // void tags have no children nor closing tags\n            return [new xml.Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ctype, 'equiv-text': \"<\" + ph.tag + \"/>\" })];\n        }\n        var /** @type {?} */ startTagPh = new xml.Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ctype, 'equiv-text': \"<\" + ph.tag + \">\" });\n        var /** @type {?} */ closeTagPh = new xml.Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype: ctype, 'equiv-text': \"</\" + ph.tag + \">\" });\n        return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        return [new xml.Tag(_PLACEHOLDER_TAG, { id: ph.name, 'equiv-text': \"{{\" + ph.value + \"}}\" })];\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ equivText = \"{\" + ph.value.expression + \", \" + ph.value.type + \", \" + Object.keys(ph.value.cases).map(function (value) { return value + ' {...}'; }).join(' ') + \"}\";\n        return [new xml.Tag(_PLACEHOLDER_TAG, { id: ph.name, 'equiv-text': equivText })];\n    };\n    /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    _WriteVisitor.prototype.serialize = /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    function (nodes) {\n        var _this = this;\n        return [].concat.apply([], nodes.map(function (node) { return node.visit(_this); }));\n    };\n    return _WriteVisitor;\n}());\nvar XliffParser = /** @class */ (function () {\n    function XliffParser() {\n        this._locale = null;\n    }\n    /**\n     * @param {?} xliff\n     * @param {?} url\n     * @return {?}\n     */\n    XliffParser.prototype.parse = /**\n     * @param {?} xliff\n     * @param {?} url\n     * @return {?}\n     */\n    function (xliff, url) {\n        this._unitMlString = null;\n        this._msgIdToHtml = {};\n        var /** @type {?} */ xml = new XmlParser().parse(xliff, url, false);\n        this._errors = xml.errors;\n        ml.visitAll(this, xml.rootNodes, null);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    };\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    function (element, context) {\n        switch (element.name) {\n            case _UNIT_TAG:\n                this._unitMlString = /** @type {?} */ ((null));\n                var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });\n                if (!idAttr) {\n                    this._addError(element, \"<\" + _UNIT_TAG + \"> misses the \\\"id\\\" attribute\");\n                }\n                else {\n                    var /** @type {?} */ id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, \"Duplicated translations for msg \" + id);\n                    }\n                    else {\n                        ml.visitAll(this, element.children, null);\n                        if (typeof this._unitMlString === 'string') {\n                            this._msgIdToHtml[id] = this._unitMlString;\n                        }\n                        else {\n                            this._addError(element, \"Message \" + id + \" misses a translation\");\n                        }\n                    }\n                }\n                break;\n            // ignore those tags\n            case _SOURCE_TAG:\n            case _SEGMENT_SOURCE_TAG:\n                break;\n            case _TARGET_TAG:\n                var /** @type {?} */ innerTextStart = /** @type {?} */ ((element.startSourceSpan)).end.offset;\n                var /** @type {?} */ innerTextEnd = /** @type {?} */ ((element.endSourceSpan)).start.offset;\n                var /** @type {?} */ content = /** @type {?} */ ((element.startSourceSpan)).start.file.content;\n                var /** @type {?} */ innerText = content.slice(innerTextStart, innerTextEnd);\n                this._unitMlString = innerText;\n                break;\n            case _FILE_TAG:\n                var /** @type {?} */ localeAttr = element.attrs.find(function (attr) { return attr.name === 'target-language'; });\n                if (localeAttr) {\n                    this._locale = localeAttr.value;\n                }\n                ml.visitAll(this, element.children, null);\n                break;\n            default:\n                // TODO(vicb): assert file structure, xliff version\n                // For now only recurse on unhandled nodes\n                ml.visitAll(this, element.children, null);\n        }\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) { };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { };\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansion, context) { };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansionCase, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XliffParser.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    function (node, message) {\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\n    };\n    return XliffParser;\n}());\nfunction XliffParser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    XliffParser.prototype._unitMlString;\n    /** @type {?} */\n    XliffParser.prototype._errors;\n    /** @type {?} */\n    XliffParser.prototype._msgIdToHtml;\n    /** @type {?} */\n    XliffParser.prototype._locale;\n}\nvar XmlToI18n = /** @class */ (function () {\n    function XmlToI18n() {\n    }\n    /**\n     * @param {?} message\n     * @param {?} url\n     * @return {?}\n     */\n    XmlToI18n.prototype.convert = /**\n     * @param {?} message\n     * @param {?} url\n     * @return {?}\n     */\n    function (message, url) {\n        var /** @type {?} */ xmlIcu = new XmlParser().parse(message, url, true);\n        this._errors = xmlIcu.errors;\n        var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] : [].concat.apply([], ml.visitAll(this, xmlIcu.rootNodes));\n        return {\n            i18nNodes: i18nNodes,\n            errors: this._errors,\n        };\n    };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { return new i18n.Text(text.value, /** @type {?} */ ((text.sourceSpan))); };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    function (el, context) {\n        if (el.name === _PLACEHOLDER_TAG) {\n            var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'id'; });\n            if (nameAttr) {\n                return new i18n.Placeholder('', nameAttr.value, /** @type {?} */ ((el.sourceSpan)));\n            }\n            this._addError(el, \"<\" + _PLACEHOLDER_TAG + \"> misses the \\\"id\\\" attribute\");\n            return null;\n        }\n        if (el.name === _MARKER_TAG) {\n            return [].concat.apply([], ml.visitAll(this, el.children));\n        }\n        this._addError(el, \"Unexpected tag\");\n        return null;\n    };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var /** @type {?} */ caseMap = {};\n        ml.visitAll(this, icu.cases).forEach(function (c) {\n            caseMap[c.value] = new i18n.Container(c.nodes, icu.sourceSpan);\n        });\n        return new i18n.Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: ml.visitAll(this, icuCase.expression),\n        };\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XmlToI18n.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    function (node, message) {\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\n    };\n    return XmlToI18n;\n}());\nfunction XmlToI18n_tsickle_Closure_declarations() {\n    /** @type {?} */\n    XmlToI18n.prototype._errors;\n}\n/**\n * @param {?} tag\n * @return {?}\n */\nfunction getCtypeForTag(tag) {\n    switch (tag.toLowerCase()) {\n        case 'br':\n            return 'lb';\n        case 'img':\n            return 'image';\n        default:\n            return \"x-\" + tag;\n    }\n}\n//# sourceMappingURL=xliff.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as ml from '../../ml_parser/ast';\nimport { XmlParser } from '../../ml_parser/xml_parser';\nimport { decimalDigest } from '../digest';\nimport * as i18n from '../i18n_ast';\nimport { I18nError } from '../parse_util';\nimport { Serializer } from './serializer';\nimport * as xml from './xml_helper';\nvar /** @type {?} */ _VERSION = '2.0';\nvar /** @type {?} */ _XMLNS = 'urn:oasis:names:tc:xliff:document:2.0';\n// TODO(vicb): make this a param (s/_/-/)\nvar /** @type {?} */ _DEFAULT_SOURCE_LANG = 'en';\nvar /** @type {?} */ _PLACEHOLDER_TAG = 'ph';\nvar /** @type {?} */ _PLACEHOLDER_SPANNING_TAG = 'pc';\nvar /** @type {?} */ _MARKER_TAG = 'mrk';\nvar /** @type {?} */ _XLIFF_TAG = 'xliff';\nvar /** @type {?} */ _SOURCE_TAG = 'source';\nvar /** @type {?} */ _TARGET_TAG = 'target';\nvar /** @type {?} */ _UNIT_TAG = 'unit';\nvar Xliff2 = /** @class */ (function (_super) {\n    tslib_1.__extends(Xliff2, _super);\n    function Xliff2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    Xliff2.prototype.write = /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    function (messages, locale) {\n        var /** @type {?} */ visitor = new _WriteVisitor();\n        var /** @type {?} */ units = [];\n        messages.forEach(function (message) {\n            var /** @type {?} */ unit = new xml.Tag(_UNIT_TAG, { id: message.id });\n            var /** @type {?} */ notes = new xml.Tag('notes');\n            if (message.description || message.meaning) {\n                if (message.description) {\n                    notes.children.push(new xml.CR(8), new xml.Tag('note', { category: 'description' }, [new xml.Text(message.description)]));\n                }\n                if (message.meaning) {\n                    notes.children.push(new xml.CR(8), new xml.Tag('note', { category: 'meaning' }, [new xml.Text(message.meaning)]));\n                }\n            }\n            message.sources.forEach(function (source) {\n                notes.children.push(new xml.CR(8), new xml.Tag('note', { category: 'location' }, [\n                    new xml.Text(source.filePath + \":\" + source.startLine + (source.endLine !== source.startLine ? ',' + source.endLine : ''))\n                ]));\n            });\n            notes.children.push(new xml.CR(6));\n            unit.children.push(new xml.CR(6), notes);\n            var /** @type {?} */ segment = new xml.Tag('segment');\n            segment.children.push(new xml.CR(8), new xml.Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new xml.CR(6));\n            unit.children.push(new xml.CR(6), segment, new xml.CR(4));\n            units.push(new xml.CR(4), unit);\n        });\n        var /** @type {?} */ file = new xml.Tag('file', { 'original': 'ng.template', id: 'ngi18n' }, units.concat([new xml.CR(2)]));\n        var /** @type {?} */ xliff = new xml.Tag(_XLIFF_TAG, { version: _VERSION, xmlns: _XMLNS, srcLang: locale || _DEFAULT_SOURCE_LANG }, [new xml.CR(2), file, new xml.CR()]);\n        return xml.serialize([\n            new xml.Declaration({ version: '1.0', encoding: 'UTF-8' }), new xml.CR(), xliff, new xml.CR()\n        ]);\n    };\n    /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    Xliff2.prototype.load = /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    function (content, url) {\n        // xliff to xml nodes\n        var /** @type {?} */ xliff2Parser = new Xliff2Parser();\n        var _a = xliff2Parser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;\n        // xml nodes to i18n nodes\n        var /** @type {?} */ i18nNodesByMsgId = {};\n        var /** @type {?} */ converter = new XmlToI18n();\n        Object.keys(msgIdToHtml).forEach(function (msgId) {\n            var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, e = _a.errors;\n            errors.push.apply(errors, e);\n            i18nNodesByMsgId[msgId] = i18nNodes;\n        });\n        if (errors.length) {\n            throw new Error(\"xliff2 parse errors:\\n\" + errors.join('\\n'));\n        }\n        return { locale: /** @type {?} */ ((locale)), i18nNodesByMsgId: i18nNodesByMsgId };\n    };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Xliff2.prototype.digest = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) { return decimalDigest(message); };\n    return Xliff2;\n}(Serializer));\nexport { Xliff2 };\nvar _WriteVisitor = /** @class */ (function () {\n    function _WriteVisitor() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    function (text, context) { return [new xml.Text(text.value)]; };\n    /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    function (container, context) {\n        var _this = this;\n        var /** @type {?} */ nodes = [];\n        container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });\n        return nodes;\n    };\n    /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        var /** @type {?} */ nodes = [new xml.Text(\"{\" + icu.expressionPlaceholder + \", \" + icu.type + \", \")];\n        Object.keys(icu.cases).forEach(function (c) {\n            nodes.push.apply(nodes, [new xml.Text(c + \" {\")].concat(icu.cases[c].visit(_this), [new xml.Text(\"} \")]));\n        });\n        nodes.push(new xml.Text(\"}\"));\n        return nodes;\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var _this = this;\n        var /** @type {?} */ type = getTypeForTag(ph.tag);\n        if (ph.isVoid) {\n            var /** @type {?} */ tagPh = new xml.Tag(_PLACEHOLDER_TAG, {\n                id: (this._nextPlaceholderId++).toString(),\n                equiv: ph.startName,\n                type: type,\n                disp: \"<\" + ph.tag + \"/>\",\n            });\n            return [tagPh];\n        }\n        var /** @type {?} */ tagPc = new xml.Tag(_PLACEHOLDER_SPANNING_TAG, {\n            id: (this._nextPlaceholderId++).toString(),\n            equivStart: ph.startName,\n            equivEnd: ph.closeName,\n            type: type,\n            dispStart: \"<\" + ph.tag + \">\",\n            dispEnd: \"</\" + ph.tag + \">\",\n        });\n        var /** @type {?} */ nodes = [].concat.apply([], ph.children.map(function (node) { return node.visit(_this); }));\n        if (nodes.length) {\n            nodes.forEach(function (node) { return tagPc.children.push(node); });\n        }\n        else {\n            tagPc.children.push(new xml.Text(''));\n        }\n        return [tagPc];\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ idStr = (this._nextPlaceholderId++).toString();\n        return [new xml.Tag(_PLACEHOLDER_TAG, {\n                id: idStr,\n                equiv: ph.name,\n                disp: \"{{\" + ph.value + \"}}\",\n            })];\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ cases = Object.keys(ph.value.cases).map(function (value) { return value + ' {...}'; }).join(' ');\n        var /** @type {?} */ idStr = (this._nextPlaceholderId++).toString();\n        return [new xml.Tag(_PLACEHOLDER_TAG, { id: idStr, equiv: ph.name, disp: \"{\" + ph.value.expression + \", \" + ph.value.type + \", \" + cases + \"}\" })];\n    };\n    /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    _WriteVisitor.prototype.serialize = /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    function (nodes) {\n        var _this = this;\n        this._nextPlaceholderId = 0;\n        return [].concat.apply([], nodes.map(function (node) { return node.visit(_this); }));\n    };\n    return _WriteVisitor;\n}());\nfunction _WriteVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _WriteVisitor.prototype._nextPlaceholderId;\n}\nvar Xliff2Parser = /** @class */ (function () {\n    function Xliff2Parser() {\n        this._locale = null;\n    }\n    /**\n     * @param {?} xliff\n     * @param {?} url\n     * @return {?}\n     */\n    Xliff2Parser.prototype.parse = /**\n     * @param {?} xliff\n     * @param {?} url\n     * @return {?}\n     */\n    function (xliff, url) {\n        this._unitMlString = null;\n        this._msgIdToHtml = {};\n        var /** @type {?} */ xml = new XmlParser().parse(xliff, url, false);\n        this._errors = xml.errors;\n        ml.visitAll(this, xml.rootNodes, null);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    };\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    function (element, context) {\n        switch (element.name) {\n            case _UNIT_TAG:\n                this._unitMlString = null;\n                var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });\n                if (!idAttr) {\n                    this._addError(element, \"<\" + _UNIT_TAG + \"> misses the \\\"id\\\" attribute\");\n                }\n                else {\n                    var /** @type {?} */ id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, \"Duplicated translations for msg \" + id);\n                    }\n                    else {\n                        ml.visitAll(this, element.children, null);\n                        if (typeof this._unitMlString === 'string') {\n                            this._msgIdToHtml[id] = this._unitMlString;\n                        }\n                        else {\n                            this._addError(element, \"Message \" + id + \" misses a translation\");\n                        }\n                    }\n                }\n                break;\n            case _SOURCE_TAG:\n                // ignore source message\n                break;\n            case _TARGET_TAG:\n                var /** @type {?} */ innerTextStart = /** @type {?} */ ((element.startSourceSpan)).end.offset;\n                var /** @type {?} */ innerTextEnd = /** @type {?} */ ((element.endSourceSpan)).start.offset;\n                var /** @type {?} */ content = /** @type {?} */ ((element.startSourceSpan)).start.file.content;\n                var /** @type {?} */ innerText = content.slice(innerTextStart, innerTextEnd);\n                this._unitMlString = innerText;\n                break;\n            case _XLIFF_TAG:\n                var /** @type {?} */ localeAttr = element.attrs.find(function (attr) { return attr.name === 'trgLang'; });\n                if (localeAttr) {\n                    this._locale = localeAttr.value;\n                }\n                var /** @type {?} */ versionAttr = element.attrs.find(function (attr) { return attr.name === 'version'; });\n                if (versionAttr) {\n                    var /** @type {?} */ version = versionAttr.value;\n                    if (version !== '2.0') {\n                        this._addError(element, \"The XLIFF file version \" + version + \" is not compatible with XLIFF 2.0 serializer\");\n                    }\n                    else {\n                        ml.visitAll(this, element.children, null);\n                    }\n                }\n                break;\n            default:\n                ml.visitAll(this, element.children, null);\n        }\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) { };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { };\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansion, context) { };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansionCase, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    Xliff2Parser.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    function (node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    };\n    return Xliff2Parser;\n}());\nfunction Xliff2Parser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Xliff2Parser.prototype._unitMlString;\n    /** @type {?} */\n    Xliff2Parser.prototype._errors;\n    /** @type {?} */\n    Xliff2Parser.prototype._msgIdToHtml;\n    /** @type {?} */\n    Xliff2Parser.prototype._locale;\n}\nvar XmlToI18n = /** @class */ (function () {\n    function XmlToI18n() {\n    }\n    /**\n     * @param {?} message\n     * @param {?} url\n     * @return {?}\n     */\n    XmlToI18n.prototype.convert = /**\n     * @param {?} message\n     * @param {?} url\n     * @return {?}\n     */\n    function (message, url) {\n        var /** @type {?} */ xmlIcu = new XmlParser().parse(message, url, true);\n        this._errors = xmlIcu.errors;\n        var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] : [].concat.apply([], ml.visitAll(this, xmlIcu.rootNodes));\n        return {\n            i18nNodes: i18nNodes,\n            errors: this._errors,\n        };\n    };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { return new i18n.Text(text.value, text.sourceSpan); };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    function (el, context) {\n        var _this = this;\n        switch (el.name) {\n            case _PLACEHOLDER_TAG:\n                var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'equiv'; });\n                if (nameAttr) {\n                    return [new i18n.Placeholder('', nameAttr.value, el.sourceSpan)];\n                }\n                this._addError(el, \"<\" + _PLACEHOLDER_TAG + \"> misses the \\\"equiv\\\" attribute\");\n                break;\n            case _PLACEHOLDER_SPANNING_TAG:\n                var /** @type {?} */ startAttr = el.attrs.find(function (attr) { return attr.name === 'equivStart'; });\n                var /** @type {?} */ endAttr = el.attrs.find(function (attr) { return attr.name === 'equivEnd'; });\n                if (!startAttr) {\n                    this._addError(el, \"<\" + _PLACEHOLDER_TAG + \"> misses the \\\"equivStart\\\" attribute\");\n                }\n                else if (!endAttr) {\n                    this._addError(el, \"<\" + _PLACEHOLDER_TAG + \"> misses the \\\"equivEnd\\\" attribute\");\n                }\n                else {\n                    var /** @type {?} */ startId = startAttr.value;\n                    var /** @type {?} */ endId = endAttr.value;\n                    var /** @type {?} */ nodes = [];\n                    return nodes.concat.apply(nodes, [new i18n.Placeholder('', startId, el.sourceSpan)].concat(el.children.map(function (node) { return node.visit(_this, null); }), [new i18n.Placeholder('', endId, el.sourceSpan)]));\n                }\n                break;\n            case _MARKER_TAG:\n                return [].concat.apply([], ml.visitAll(this, el.children));\n            default:\n                this._addError(el, \"Unexpected tag\");\n        }\n        return null;\n    };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var /** @type {?} */ caseMap = {};\n        ml.visitAll(this, icu.cases).forEach(function (c) {\n            caseMap[c.value] = new i18n.Container(c.nodes, icu.sourceSpan);\n        });\n        return new i18n.Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: [].concat.apply([], ml.visitAll(this, icuCase.expression)),\n        };\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XmlToI18n.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    function (node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    };\n    return XmlToI18n;\n}());\nfunction XmlToI18n_tsickle_Closure_declarations() {\n    /** @type {?} */\n    XmlToI18n.prototype._errors;\n}\n/**\n * @param {?} tag\n * @return {?}\n */\nfunction getTypeForTag(tag) {\n    switch (tag.toLowerCase()) {\n        case 'br':\n        case 'b':\n        case 'i':\n        case 'u':\n            return 'fmt';\n        case 'img':\n            return 'image';\n        case 'a':\n            return 'link';\n        default:\n            return 'other';\n    }\n}\n//# sourceMappingURL=xliff2.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { decimalDigest } from '../digest';\nimport { Serializer, SimplePlaceholderMapper } from './serializer';\nimport * as xml from './xml_helper';\nvar /** @type {?} */ _MESSAGES_TAG = 'messagebundle';\nvar /** @type {?} */ _MESSAGE_TAG = 'msg';\nvar /** @type {?} */ _PLACEHOLDER_TAG = 'ph';\nvar /** @type {?} */ _EXEMPLE_TAG = 'ex';\nvar /** @type {?} */ _SOURCE_TAG = 'source';\nvar /** @type {?} */ _DOCTYPE = \"<!ELEMENT messagebundle (msg)*>\\n<!ATTLIST messagebundle class CDATA #IMPLIED>\\n\\n<!ELEMENT msg (#PCDATA|ph|source)*>\\n<!ATTLIST msg id CDATA #IMPLIED>\\n<!ATTLIST msg seq CDATA #IMPLIED>\\n<!ATTLIST msg name CDATA #IMPLIED>\\n<!ATTLIST msg desc CDATA #IMPLIED>\\n<!ATTLIST msg meaning CDATA #IMPLIED>\\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\\n<!ATTLIST msg xml:space (default|preserve) \\\"default\\\">\\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\\n\\n<!ELEMENT source (#PCDATA)>\\n\\n<!ELEMENT ph (#PCDATA|ex)*>\\n<!ATTLIST ph name CDATA #REQUIRED>\\n\\n<!ELEMENT ex (#PCDATA)>\";\nvar Xmb = /** @class */ (function (_super) {\n    tslib_1.__extends(Xmb, _super);\n    function Xmb() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    Xmb.prototype.write = /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    function (messages, locale) {\n        var /** @type {?} */ exampleVisitor = new ExampleVisitor();\n        var /** @type {?} */ visitor = new _Visitor();\n        var /** @type {?} */ rootNode = new xml.Tag(_MESSAGES_TAG);\n        messages.forEach(function (message) {\n            var /** @type {?} */ attrs = { id: message.id };\n            if (message.description) {\n                attrs['desc'] = message.description;\n            }\n            if (message.meaning) {\n                attrs['meaning'] = message.meaning;\n            }\n            var /** @type {?} */ sourceTags = [];\n            message.sources.forEach(function (source) {\n                sourceTags.push(new xml.Tag(_SOURCE_TAG, {}, [\n                    new xml.Text(source.filePath + \":\" + source.startLine + (source.endLine !== source.startLine ? ',' + source.endLine : ''))\n                ]));\n            });\n            rootNode.children.push(new xml.CR(2), new xml.Tag(_MESSAGE_TAG, attrs, sourceTags.concat(visitor.serialize(message.nodes))));\n        });\n        rootNode.children.push(new xml.CR());\n        return xml.serialize([\n            new xml.Declaration({ version: '1.0', encoding: 'UTF-8' }),\n            new xml.CR(),\n            new xml.Doctype(_MESSAGES_TAG, _DOCTYPE),\n            new xml.CR(),\n            exampleVisitor.addDefaultExamples(rootNode),\n            new xml.CR(),\n        ]);\n    };\n    /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    Xmb.prototype.load = /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    function (content, url) {\n        throw new Error('Unsupported');\n    };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Xmb.prototype.digest = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) { return digest(message); };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Xmb.prototype.createNameMapper = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        return new SimplePlaceholderMapper(message, toPublicName);\n    };\n    return Xmb;\n}(Serializer));\nexport { Xmb };\nvar _Visitor = /** @class */ (function () {\n    function _Visitor() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    function (text, context) { return [new xml.Text(text.value)]; };\n    /**\n     * @param {?} container\n     * @param {?} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?} context\n     * @return {?}\n     */\n    function (container, context) {\n        var _this = this;\n        var /** @type {?} */ nodes = [];\n        container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });\n        return nodes;\n    };\n    /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        var /** @type {?} */ nodes = [new xml.Text(\"{\" + icu.expressionPlaceholder + \", \" + icu.type + \", \")];\n        Object.keys(icu.cases).forEach(function (c) {\n            nodes.push.apply(nodes, [new xml.Text(c + \" {\")].concat(icu.cases[c].visit(_this), [new xml.Text(\"} \")]));\n        });\n        nodes.push(new xml.Text(\"}\"));\n        return nodes;\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ startEx = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text(\"<\" + ph.tag + \">\")]);\n        var /** @type {?} */ startTagPh = new xml.Tag(_PLACEHOLDER_TAG, { name: ph.startName }, [startEx]);\n        if (ph.isVoid) {\n            // void tags have no children nor closing tags\n            return [startTagPh];\n        }\n        var /** @type {?} */ closeEx = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text(\"</\" + ph.tag + \">\")]);\n        var /** @type {?} */ closeTagPh = new xml.Tag(_PLACEHOLDER_TAG, { name: ph.closeName }, [closeEx]);\n        return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ exTag = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text(\"{{\" + ph.value + \"}}\")]);\n        return [new xml.Tag(_PLACEHOLDER_TAG, { name: ph.name }, [exTag])];\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ exTag = new xml.Tag(_EXEMPLE_TAG, {}, [\n            new xml.Text(\"{\" + ph.value.expression + \", \" + ph.value.type + \", \" + Object.keys(ph.value.cases).map(function (value) { return value + ' {...}'; }).join(' ') + \"}\")\n        ]);\n        return [new xml.Tag(_PLACEHOLDER_TAG, { name: ph.name }, [exTag])];\n    };\n    /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    _Visitor.prototype.serialize = /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    function (nodes) {\n        var _this = this;\n        return [].concat.apply([], nodes.map(function (node) { return node.visit(_this); }));\n    };\n    return _Visitor;\n}());\n/**\n * @param {?} message\n * @return {?}\n */\nexport function digest(message) {\n    return decimalDigest(message);\n}\nvar ExampleVisitor = /** @class */ (function () {\n    function ExampleVisitor() {\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    ExampleVisitor.prototype.addDefaultExamples = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        node.visit(this);\n        return node;\n    };\n    /**\n     * @param {?} tag\n     * @return {?}\n     */\n    ExampleVisitor.prototype.visitTag = /**\n     * @param {?} tag\n     * @return {?}\n     */\n    function (tag) {\n        var _this = this;\n        if (tag.name === _PLACEHOLDER_TAG) {\n            if (!tag.children || tag.children.length == 0) {\n                var /** @type {?} */ exText = new xml.Text(tag.attrs['name'] || '...');\n                tag.children = [new xml.Tag(_EXEMPLE_TAG, {}, [exText])];\n            }\n        }\n        else if (tag.children) {\n            tag.children.forEach(function (node) { return node.visit(_this); });\n        }\n    };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    ExampleVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) { };\n    /**\n     * @param {?} decl\n     * @return {?}\n     */\n    ExampleVisitor.prototype.visitDeclaration = /**\n     * @param {?} decl\n     * @return {?}\n     */\n    function (decl) { };\n    /**\n     * @param {?} doctype\n     * @return {?}\n     */\n    ExampleVisitor.prototype.visitDoctype = /**\n     * @param {?} doctype\n     * @return {?}\n     */\n    function (doctype) { };\n    return ExampleVisitor;\n}());\n/**\n * @param {?} internalName\n * @return {?}\n */\nexport function toPublicName(internalName) {\n    return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');\n}\n//# sourceMappingURL=xmb.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as ml from '../../ml_parser/ast';\nimport { XmlParser } from '../../ml_parser/xml_parser';\nimport * as i18n from '../i18n_ast';\nimport { I18nError } from '../parse_util';\nimport { Serializer, SimplePlaceholderMapper } from './serializer';\nimport { digest, toPublicName } from './xmb';\nvar /** @type {?} */ _TRANSLATIONS_TAG = 'translationbundle';\nvar /** @type {?} */ _TRANSLATION_TAG = 'translation';\nvar /** @type {?} */ _PLACEHOLDER_TAG = 'ph';\nvar Xtb = /** @class */ (function (_super) {\n    tslib_1.__extends(Xtb, _super);\n    function Xtb() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    Xtb.prototype.write = /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    function (messages, locale) { throw new Error('Unsupported'); };\n    /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    Xtb.prototype.load = /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    function (content, url) {\n        // xtb to xml nodes\n        var /** @type {?} */ xtbParser = new XtbParser();\n        var _a = xtbParser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;\n        // xml nodes to i18n nodes\n        var /** @type {?} */ i18nNodesByMsgId = {};\n        var /** @type {?} */ converter = new XmlToI18n();\n        // Because we should be able to load xtb files that rely on features not supported by angular,\n        // we need to delay the conversion of html to i18n nodes so that non angular messages are not\n        // converted\n        Object.keys(msgIdToHtml).forEach(function (msgId) {\n            var /** @type {?} */ valueFn = function () {\n                var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, errors = _a.errors;\n                if (errors.length) {\n                    throw new Error(\"xtb parse errors:\\n\" + errors.join('\\n'));\n                }\n                return i18nNodes;\n            };\n            createLazyProperty(i18nNodesByMsgId, msgId, valueFn);\n        });\n        if (errors.length) {\n            throw new Error(\"xtb parse errors:\\n\" + errors.join('\\n'));\n        }\n        return { locale: /** @type {?} */ ((locale)), i18nNodesByMsgId: i18nNodesByMsgId };\n    };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Xtb.prototype.digest = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) { return digest(message); };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Xtb.prototype.createNameMapper = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        return new SimplePlaceholderMapper(message, toPublicName);\n    };\n    return Xtb;\n}(Serializer));\nexport { Xtb };\n/**\n * @param {?} messages\n * @param {?} id\n * @param {?} valueFn\n * @return {?}\n */\nfunction createLazyProperty(messages, id, valueFn) {\n    Object.defineProperty(messages, id, {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n            var /** @type {?} */ value = valueFn();\n            Object.defineProperty(messages, id, { enumerable: true, value: value });\n            return value;\n        },\n        set: function (_) { throw new Error('Could not overwrite an XTB translation'); },\n    });\n}\nvar XtbParser = /** @class */ (function () {\n    function XtbParser() {\n        this._locale = null;\n    }\n    /**\n     * @param {?} xtb\n     * @param {?} url\n     * @return {?}\n     */\n    XtbParser.prototype.parse = /**\n     * @param {?} xtb\n     * @param {?} url\n     * @return {?}\n     */\n    function (xtb, url) {\n        this._bundleDepth = 0;\n        this._msgIdToHtml = {};\n        // We can not parse the ICU messages at this point as some messages might not originate\n        // from Angular that could not be lex'd.\n        var /** @type {?} */ xml = new XmlParser().parse(xtb, url, false);\n        this._errors = xml.errors;\n        ml.visitAll(this, xml.rootNodes);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    };\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    function (element, context) {\n        switch (element.name) {\n            case _TRANSLATIONS_TAG:\n                this._bundleDepth++;\n                if (this._bundleDepth > 1) {\n                    this._addError(element, \"<\" + _TRANSLATIONS_TAG + \"> elements can not be nested\");\n                }\n                var /** @type {?} */ langAttr = element.attrs.find(function (attr) { return attr.name === 'lang'; });\n                if (langAttr) {\n                    this._locale = langAttr.value;\n                }\n                ml.visitAll(this, element.children, null);\n                this._bundleDepth--;\n                break;\n            case _TRANSLATION_TAG:\n                var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });\n                if (!idAttr) {\n                    this._addError(element, \"<\" + _TRANSLATION_TAG + \"> misses the \\\"id\\\" attribute\");\n                }\n                else {\n                    var /** @type {?} */ id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, \"Duplicated translations for msg \" + id);\n                    }\n                    else {\n                        var /** @type {?} */ innerTextStart = /** @type {?} */ ((element.startSourceSpan)).end.offset;\n                        var /** @type {?} */ innerTextEnd = /** @type {?} */ ((element.endSourceSpan)).start.offset;\n                        var /** @type {?} */ content = /** @type {?} */ ((element.startSourceSpan)).start.file.content;\n                        var /** @type {?} */ innerText = content.slice(/** @type {?} */ ((innerTextStart)), /** @type {?} */ ((innerTextEnd)));\n                        this._msgIdToHtml[id] = innerText;\n                    }\n                }\n                break;\n            default:\n                this._addError(element, 'Unexpected tag');\n        }\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) { };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { };\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansion, context) { };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansionCase, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XtbParser.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    function (node, message) {\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\n    };\n    return XtbParser;\n}());\nfunction XtbParser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    XtbParser.prototype._bundleDepth;\n    /** @type {?} */\n    XtbParser.prototype._errors;\n    /** @type {?} */\n    XtbParser.prototype._msgIdToHtml;\n    /** @type {?} */\n    XtbParser.prototype._locale;\n}\nvar XmlToI18n = /** @class */ (function () {\n    function XmlToI18n() {\n    }\n    /**\n     * @param {?} message\n     * @param {?} url\n     * @return {?}\n     */\n    XmlToI18n.prototype.convert = /**\n     * @param {?} message\n     * @param {?} url\n     * @return {?}\n     */\n    function (message, url) {\n        var /** @type {?} */ xmlIcu = new XmlParser().parse(message, url, true);\n        this._errors = xmlIcu.errors;\n        var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] :\n            ml.visitAll(this, xmlIcu.rootNodes);\n        return {\n            i18nNodes: i18nNodes,\n            errors: this._errors,\n        };\n    };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { return new i18n.Text(text.value, /** @type {?} */ ((text.sourceSpan))); };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var /** @type {?} */ caseMap = {};\n        ml.visitAll(this, icu.cases).forEach(function (c) {\n            caseMap[c.value] = new i18n.Container(c.nodes, icu.sourceSpan);\n        });\n        return new i18n.Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: ml.visitAll(this, icuCase.expression),\n        };\n    };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    function (el, context) {\n        if (el.name === _PLACEHOLDER_TAG) {\n            var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'name'; });\n            if (nameAttr) {\n                return new i18n.Placeholder('', nameAttr.value, /** @type {?} */ ((el.sourceSpan)));\n            }\n            this._addError(el, \"<\" + _PLACEHOLDER_TAG + \"> misses the \\\"name\\\" attribute\");\n        }\n        else {\n            this._addError(el, \"Unexpected tag\");\n        }\n        return null;\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XmlToI18n.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    function (node, message) {\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\n    };\n    return XmlToI18n;\n}());\nfunction XmlToI18n_tsickle_Closure_declarations() {\n    /** @type {?} */\n    XmlToI18n.prototype._errors;\n}\n//# sourceMappingURL=xtb.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { getHtmlTagDefinition } from './html_tags';\nimport { DEFAULT_INTERPOLATION_CONFIG } from './interpolation_config';\nimport { Parser } from './parser';\nexport { ParseTreeResult, TreeError } from './parser';\nvar HtmlParser = /** @class */ (function (_super) {\n    tslib_1.__extends(HtmlParser, _super);\n    function HtmlParser() {\n        return _super.call(this, getHtmlTagDefinition) || this;\n    }\n    /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    HtmlParser.prototype.parse = /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (source, url, parseExpansionForms, interpolationConfig) {\n        if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);\n    };\n    return HtmlParser;\n}(Parser));\nexport { HtmlParser };\n//# sourceMappingURL=html_parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MissingTranslationStrategy } from '../core';\nimport { HtmlParser } from '../ml_parser/html_parser';\nimport { I18nError } from './parse_util';\nimport { escapeXml } from './serializers/xml_helper';\n/**\n * A container for translated messages\n */\nvar /**\n * A container for translated messages\n */\nTranslationBundle = /** @class */ (function () {\n    function TranslationBundle(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console) {\n        if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }\n        if (missingTranslationStrategy === void 0) { missingTranslationStrategy = MissingTranslationStrategy.Warning; }\n        this._i18nNodesByMsgId = _i18nNodesByMsgId;\n        this.digest = digest;\n        this.mapperFactory = mapperFactory;\n        this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, /** @type {?} */ ((mapperFactory)), missingTranslationStrategy, console);\n    }\n    // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.\n    /**\n     * @param {?} content\n     * @param {?} url\n     * @param {?} serializer\n     * @param {?} missingTranslationStrategy\n     * @param {?=} console\n     * @return {?}\n     */\n    TranslationBundle.load = /**\n     * @param {?} content\n     * @param {?} url\n     * @param {?} serializer\n     * @param {?} missingTranslationStrategy\n     * @param {?=} console\n     * @return {?}\n     */\n    function (content, url, serializer, missingTranslationStrategy, console) {\n        var _a = serializer.load(content, url), locale = _a.locale, i18nNodesByMsgId = _a.i18nNodesByMsgId;\n        var /** @type {?} */ digestFn = function (m) { return serializer.digest(m); };\n        var /** @type {?} */ mapperFactory = function (m) { return ((serializer.createNameMapper(m))); };\n        return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);\n    };\n    // Returns the translation as HTML nodes from the given source message.\n    /**\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    TranslationBundle.prototype.get = /**\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    function (srcMsg) {\n        var /** @type {?} */ html = this._i18nToHtml.convert(srcMsg);\n        if (html.errors.length) {\n            throw new Error(html.errors.join('\\n'));\n        }\n        return html.nodes;\n    };\n    /**\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    TranslationBundle.prototype.has = /**\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    function (srcMsg) { return this.digest(srcMsg) in this._i18nNodesByMsgId; };\n    return TranslationBundle;\n}());\n/**\n * A container for translated messages\n */\nexport { TranslationBundle };\nfunction TranslationBundle_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TranslationBundle.prototype._i18nToHtml;\n    /** @type {?} */\n    TranslationBundle.prototype._i18nNodesByMsgId;\n    /** @type {?} */\n    TranslationBundle.prototype.digest;\n    /** @type {?} */\n    TranslationBundle.prototype.mapperFactory;\n}\nvar I18nToHtmlVisitor = /** @class */ (function () {\n    function I18nToHtmlVisitor(_i18nNodesByMsgId, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {\n        if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }\n        this._i18nNodesByMsgId = _i18nNodesByMsgId;\n        this._locale = _locale;\n        this._digest = _digest;\n        this._mapperFactory = _mapperFactory;\n        this._missingTranslationStrategy = _missingTranslationStrategy;\n        this._console = _console;\n        this._contextStack = [];\n        this._errors = [];\n    }\n    /**\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.convert = /**\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    function (srcMsg) {\n        this._contextStack.length = 0;\n        this._errors.length = 0;\n        // i18n to text\n        var /** @type {?} */ text = this._convertToText(srcMsg);\n        // text to html\n        var /** @type {?} */ url = srcMsg.nodes[0].sourceSpan.start.file.url;\n        var /** @type {?} */ html = new HtmlParser().parse(text, url, true);\n        return {\n            nodes: html.rootNodes,\n            errors: this._errors.concat(html.errors),\n        };\n    };\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    function (text, context) {\n        // `convert()` uses an `HtmlParser` to return `html.Node`s\n        // we should then make sure that any special characters are escaped\n        return escapeXml(text.value);\n    };\n    /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    function (container, context) {\n        var _this = this;\n        return container.children.map(function (n) { return n.visit(_this); }).join('');\n    };\n    /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        var /** @type {?} */ cases = Object.keys(icu.cases).map(function (k) { return k + \" {\" + icu.cases[k].visit(_this) + \"}\"; });\n        // TODO(vicb): Once all format switch to using expression placeholders\n        // we should throw when the placeholder is not in the source message\n        var /** @type {?} */ exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?\n            this._srcMsg.placeholders[icu.expression] :\n            icu.expression;\n        return \"{\" + exp + \", \" + icu.type + \", \" + cases.join(' ') + \"}\";\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ phName = this._mapper(ph.name);\n        if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n            return this._srcMsg.placeholders[phName];\n        }\n        if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n            return this._convertToText(this._srcMsg.placeholderToMessage[phName]);\n        }\n        this._addError(ph, \"Unknown placeholder \\\"\" + ph.name + \"\\\"\");\n        return '';\n    };\n    // Loaded message contains only placeholders (vs tag and icu placeholders).\n    // However when a translation can not be found, we need to serialize the source message\n    // which can contain tag placeholders\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var _this = this;\n        var /** @type {?} */ tag = \"\" + ph.tag;\n        var /** @type {?} */ attrs = Object.keys(ph.attrs).map(function (name) { return name + \"=\\\"\" + ph.attrs[name] + \"\\\"\"; }).join(' ');\n        if (ph.isVoid) {\n            return \"<\" + tag + \" \" + attrs + \"/>\";\n        }\n        var /** @type {?} */ children = ph.children.map(function (c) { return c.visit(_this); }).join('');\n        return \"<\" + tag + \" \" + attrs + \">\" + children + \"</\" + tag + \">\";\n    };\n    // Loaded message contains only placeholders (vs tag and icu placeholders).\n    // However when a translation can not be found, we need to serialize the source message\n    // which can contain tag placeholders\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        // An ICU placeholder references the source message to be serialized\n        return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);\n    };\n    /**\n     * Convert a source message to a translated text string:\n     * - text nodes are replaced with their translation,\n     * - placeholders are replaced with their content,\n     * - ICU nodes are converted to ICU expressions.\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype._convertToText = /**\n     * Convert a source message to a translated text string:\n     * - text nodes are replaced with their translation,\n     * - placeholders are replaced with their content,\n     * - ICU nodes are converted to ICU expressions.\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    function (srcMsg) {\n        var _this = this;\n        var /** @type {?} */ id = this._digest(srcMsg);\n        var /** @type {?} */ mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\n        var /** @type {?} */ nodes;\n        this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });\n        this._srcMsg = srcMsg;\n        if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\n            // When there is a translation use its nodes as the source\n            // And create a mapper to convert serialized placeholder names to internal names\n            nodes = this._i18nNodesByMsgId[id];\n            this._mapper = function (name) { return mapper ? /** @type {?} */ ((mapper.toInternalName(name))) : name; };\n        }\n        else {\n            // When no translation has been found\n            // - report an error / a warning / nothing,\n            // - use the nodes from the original message\n            // - placeholders are already internal and need no mapper\n            if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {\n                var /** @type {?} */ ctx = this._locale ? \" for locale \\\"\" + this._locale + \"\\\"\" : '';\n                this._addError(srcMsg.nodes[0], \"Missing translation for message \\\"\" + id + \"\\\"\" + ctx);\n            }\n            else if (this._console &&\n                this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {\n                var /** @type {?} */ ctx = this._locale ? \" for locale \\\"\" + this._locale + \"\\\"\" : '';\n                this._console.warn(\"Missing translation for message \\\"\" + id + \"\\\"\" + ctx);\n            }\n            nodes = srcMsg.nodes;\n            this._mapper = function (name) { return name; };\n        }\n        var /** @type {?} */ text = nodes.map(function (node) { return node.visit(_this); }).join('');\n        var /** @type {?} */ context = /** @type {?} */ ((this._contextStack.pop()));\n        this._srcMsg = context.msg;\n        this._mapper = context.mapper;\n        return text;\n    };\n    /**\n     * @param {?} el\n     * @param {?} msg\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype._addError = /**\n     * @param {?} el\n     * @param {?} msg\n     * @return {?}\n     */\n    function (el, msg) {\n        this._errors.push(new I18nError(el.sourceSpan, msg));\n    };\n    return I18nToHtmlVisitor;\n}());\nfunction I18nToHtmlVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._srcMsg;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._contextStack;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._errors;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._mapper;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._i18nNodesByMsgId;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._locale;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._digest;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._mapperFactory;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._missingTranslationStrategy;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._console;\n}\n//# sourceMappingURL=translation_bundle.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MissingTranslationStrategy } from '../core';\nimport { DEFAULT_INTERPOLATION_CONFIG } from '../ml_parser/interpolation_config';\nimport { ParseTreeResult } from '../ml_parser/parser';\nimport { digest } from './digest';\nimport { mergeTranslations } from './extractor_merger';\nimport { Xliff } from './serializers/xliff';\nimport { Xliff2 } from './serializers/xliff2';\nimport { Xmb } from './serializers/xmb';\nimport { Xtb } from './serializers/xtb';\nimport { TranslationBundle } from './translation_bundle';\nvar I18NHtmlParser = /** @class */ (function () {\n    function I18NHtmlParser(_htmlParser, translations, translationsFormat, missingTranslation, console) {\n        if (missingTranslation === void 0) { missingTranslation = MissingTranslationStrategy.Warning; }\n        this._htmlParser = _htmlParser;\n        if (translations) {\n            var /** @type {?} */ serializer = createSerializer(translationsFormat);\n            this._translationBundle =\n                TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);\n        }\n        else {\n            this._translationBundle =\n                new TranslationBundle({}, null, digest, undefined, missingTranslation, console);\n        }\n    }\n    /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    I18NHtmlParser.prototype.parse = /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (source, url, parseExpansionForms, interpolationConfig) {\n        if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        var /** @type {?} */ parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);\n        if (parseResult.errors.length) {\n            return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);\n        }\n        return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});\n    };\n    return I18NHtmlParser;\n}());\nexport { I18NHtmlParser };\nfunction I18NHtmlParser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    I18NHtmlParser.prototype.getTagDefinition;\n    /** @type {?} */\n    I18NHtmlParser.prototype._translationBundle;\n    /** @type {?} */\n    I18NHtmlParser.prototype._htmlParser;\n}\n/**\n * @param {?=} format\n * @return {?}\n */\nfunction createSerializer(format) {\n    format = (format || 'xlf').toLowerCase();\n    switch (format) {\n        case 'xmb':\n            return new Xmb();\n        case 'xtb':\n            return new Xtb();\n        case 'xliff2':\n        case 'xlf2':\n            return new Xliff2();\n        case 'xliff':\n        case 'xlf':\n        default:\n            return new Xliff();\n    }\n}\n//# sourceMappingURL=i18n_html_parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ CORE = '@angular/core';\nvar Identifiers = /** @class */ (function () {\n    function Identifiers() {\n    }\n    Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {\n        name: 'ANALYZE_FOR_ENTRY_COMPONENTS',\n        moduleName: CORE,\n    };\n    Identifiers.ElementRef = { name: 'ElementRef', moduleName: CORE };\n    Identifiers.NgModuleRef = { name: 'NgModuleRef', moduleName: CORE };\n    Identifiers.ViewContainerRef = { name: 'ViewContainerRef', moduleName: CORE };\n    Identifiers.ChangeDetectorRef = {\n        name: 'ChangeDetectorRef',\n        moduleName: CORE,\n    };\n    Identifiers.QueryList = { name: 'QueryList', moduleName: CORE };\n    Identifiers.TemplateRef = { name: 'TemplateRef', moduleName: CORE };\n    Identifiers.CodegenComponentFactoryResolver = {\n        name: 'ɵCodegenComponentFactoryResolver',\n        moduleName: CORE,\n    };\n    Identifiers.ComponentFactoryResolver = {\n        name: 'ComponentFactoryResolver',\n        moduleName: CORE,\n    };\n    Identifiers.ComponentFactory = { name: 'ComponentFactory', moduleName: CORE };\n    Identifiers.ComponentRef = { name: 'ComponentRef', moduleName: CORE };\n    Identifiers.NgModuleFactory = { name: 'NgModuleFactory', moduleName: CORE };\n    Identifiers.createModuleFactory = {\n        name: 'ɵcmf',\n        moduleName: CORE,\n    };\n    Identifiers.moduleDef = {\n        name: 'ɵmod',\n        moduleName: CORE,\n    };\n    Identifiers.moduleProviderDef = {\n        name: 'ɵmpd',\n        moduleName: CORE,\n    };\n    Identifiers.RegisterModuleFactoryFn = {\n        name: 'ɵregisterModuleFactory',\n        moduleName: CORE,\n    };\n    Identifiers.inject = { name: 'inject', moduleName: CORE };\n    Identifiers.INJECTOR = { name: 'INJECTOR', moduleName: CORE };\n    Identifiers.Injector = { name: 'Injector', moduleName: CORE };\n    Identifiers.defineInjectable = { name: 'defineInjectable', moduleName: CORE };\n    Identifiers.ViewEncapsulation = {\n        name: 'ViewEncapsulation',\n        moduleName: CORE,\n    };\n    Identifiers.ChangeDetectionStrategy = {\n        name: 'ChangeDetectionStrategy',\n        moduleName: CORE,\n    };\n    Identifiers.SecurityContext = {\n        name: 'SecurityContext',\n        moduleName: CORE,\n    };\n    Identifiers.LOCALE_ID = { name: 'LOCALE_ID', moduleName: CORE };\n    Identifiers.TRANSLATIONS_FORMAT = {\n        name: 'TRANSLATIONS_FORMAT',\n        moduleName: CORE,\n    };\n    Identifiers.inlineInterpolate = {\n        name: 'ɵinlineInterpolate',\n        moduleName: CORE,\n    };\n    Identifiers.interpolate = { name: 'ɵinterpolate', moduleName: CORE };\n    Identifiers.EMPTY_ARRAY = { name: 'ɵEMPTY_ARRAY', moduleName: CORE };\n    Identifiers.EMPTY_MAP = { name: 'ɵEMPTY_MAP', moduleName: CORE };\n    Identifiers.Renderer = { name: 'Renderer', moduleName: CORE };\n    Identifiers.viewDef = { name: 'ɵvid', moduleName: CORE };\n    Identifiers.elementDef = { name: 'ɵeld', moduleName: CORE };\n    Identifiers.anchorDef = { name: 'ɵand', moduleName: CORE };\n    Identifiers.textDef = { name: 'ɵted', moduleName: CORE };\n    Identifiers.directiveDef = { name: 'ɵdid', moduleName: CORE };\n    Identifiers.providerDef = { name: 'ɵprd', moduleName: CORE };\n    Identifiers.queryDef = { name: 'ɵqud', moduleName: CORE };\n    Identifiers.pureArrayDef = { name: 'ɵpad', moduleName: CORE };\n    Identifiers.pureObjectDef = { name: 'ɵpod', moduleName: CORE };\n    Identifiers.purePipeDef = { name: 'ɵppd', moduleName: CORE };\n    Identifiers.pipeDef = { name: 'ɵpid', moduleName: CORE };\n    Identifiers.nodeValue = { name: 'ɵnov', moduleName: CORE };\n    Identifiers.ngContentDef = { name: 'ɵncd', moduleName: CORE };\n    Identifiers.unwrapValue = { name: 'ɵunv', moduleName: CORE };\n    Identifiers.createRendererType2 = { name: 'ɵcrt', moduleName: CORE };\n    // type only\n    Identifiers.RendererType2 = {\n        name: 'RendererType2',\n        moduleName: CORE,\n    };\n    // type only\n    Identifiers.ViewDefinition = {\n        name: 'ɵViewDefinition',\n        moduleName: CORE,\n    };\n    Identifiers.createComponentFactory = { name: 'ɵccf', moduleName: CORE };\n    return Identifiers;\n}());\nexport { Identifiers };\nfunction Identifiers_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS;\n    /** @type {?} */\n    Identifiers.ElementRef;\n    /** @type {?} */\n    Identifiers.NgModuleRef;\n    /** @type {?} */\n    Identifiers.ViewContainerRef;\n    /** @type {?} */\n    Identifiers.ChangeDetectorRef;\n    /** @type {?} */\n    Identifiers.QueryList;\n    /** @type {?} */\n    Identifiers.TemplateRef;\n    /** @type {?} */\n    Identifiers.CodegenComponentFactoryResolver;\n    /** @type {?} */\n    Identifiers.ComponentFactoryResolver;\n    /** @type {?} */\n    Identifiers.ComponentFactory;\n    /** @type {?} */\n    Identifiers.ComponentRef;\n    /** @type {?} */\n    Identifiers.NgModuleFactory;\n    /** @type {?} */\n    Identifiers.createModuleFactory;\n    /** @type {?} */\n    Identifiers.moduleDef;\n    /** @type {?} */\n    Identifiers.moduleProviderDef;\n    /** @type {?} */\n    Identifiers.RegisterModuleFactoryFn;\n    /** @type {?} */\n    Identifiers.inject;\n    /** @type {?} */\n    Identifiers.INJECTOR;\n    /** @type {?} */\n    Identifiers.Injector;\n    /** @type {?} */\n    Identifiers.defineInjectable;\n    /** @type {?} */\n    Identifiers.ViewEncapsulation;\n    /** @type {?} */\n    Identifiers.ChangeDetectionStrategy;\n    /** @type {?} */\n    Identifiers.SecurityContext;\n    /** @type {?} */\n    Identifiers.LOCALE_ID;\n    /** @type {?} */\n    Identifiers.TRANSLATIONS_FORMAT;\n    /** @type {?} */\n    Identifiers.inlineInterpolate;\n    /** @type {?} */\n    Identifiers.interpolate;\n    /** @type {?} */\n    Identifiers.EMPTY_ARRAY;\n    /** @type {?} */\n    Identifiers.EMPTY_MAP;\n    /** @type {?} */\n    Identifiers.Renderer;\n    /** @type {?} */\n    Identifiers.viewDef;\n    /** @type {?} */\n    Identifiers.elementDef;\n    /** @type {?} */\n    Identifiers.anchorDef;\n    /** @type {?} */\n    Identifiers.textDef;\n    /** @type {?} */\n    Identifiers.directiveDef;\n    /** @type {?} */\n    Identifiers.providerDef;\n    /** @type {?} */\n    Identifiers.queryDef;\n    /** @type {?} */\n    Identifiers.pureArrayDef;\n    /** @type {?} */\n    Identifiers.pureObjectDef;\n    /** @type {?} */\n    Identifiers.purePipeDef;\n    /** @type {?} */\n    Identifiers.pipeDef;\n    /** @type {?} */\n    Identifiers.nodeValue;\n    /** @type {?} */\n    Identifiers.ngContentDef;\n    /** @type {?} */\n    Identifiers.unwrapValue;\n    /** @type {?} */\n    Identifiers.createRendererType2;\n    /** @type {?} */\n    Identifiers.RendererType2;\n    /** @type {?} */\n    Identifiers.ViewDefinition;\n    /** @type {?} */\n    Identifiers.createComponentFactory;\n}\n/**\n * @param {?} reference\n * @return {?}\n */\nexport function createTokenForReference(reference) {\n    return { identifier: { reference: reference } };\n}\n/**\n * @param {?} reflector\n * @param {?} reference\n * @return {?}\n */\nexport function createTokenForExternalReference(reflector, reference) {\n    return createTokenForReference(reflector.resolveExternalReference(reference));\n}\n//# sourceMappingURL=identifiers.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\n/** @enum {number} */\nvar TypeModifier = {\n    Const: 0,\n};\nexport { TypeModifier };\nTypeModifier[TypeModifier.Const] = \"Const\";\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nType = /** @class */ (function () {\n    function Type(modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        this.modifiers = modifiers;\n        if (!modifiers) {\n            this.modifiers = [];\n        }\n    }\n    /**\n     * @param {?} modifier\n     * @return {?}\n     */\n    Type.prototype.hasModifier = /**\n     * @param {?} modifier\n     * @return {?}\n     */\n    function (modifier) { return /** @type {?} */ ((this.modifiers)).indexOf(modifier) !== -1; };\n    return Type;\n}());\n/**\n * @abstract\n */\nexport { Type };\nfunction Type_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Type.prototype.modifiers;\n    /**\n     * @abstract\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Type.prototype.visitType = function (visitor, context) { };\n}\n/** @enum {number} */\nvar BuiltinTypeName = {\n    Dynamic: 0,\n    Bool: 1,\n    String: 2,\n    Int: 3,\n    Number: 4,\n    Function: 5,\n    Inferred: 6,\n};\nexport { BuiltinTypeName };\nBuiltinTypeName[BuiltinTypeName.Dynamic] = \"Dynamic\";\nBuiltinTypeName[BuiltinTypeName.Bool] = \"Bool\";\nBuiltinTypeName[BuiltinTypeName.String] = \"String\";\nBuiltinTypeName[BuiltinTypeName.Int] = \"Int\";\nBuiltinTypeName[BuiltinTypeName.Number] = \"Number\";\nBuiltinTypeName[BuiltinTypeName.Function] = \"Function\";\nBuiltinTypeName[BuiltinTypeName.Inferred] = \"Inferred\";\nvar BuiltinType = /** @class */ (function (_super) {\n    tslib_1.__extends(BuiltinType, _super);\n    function BuiltinType(name, modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, modifiers) || this;\n        _this.name = name;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    BuiltinType.prototype.visitType = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitBuiltinType(this, context);\n    };\n    return BuiltinType;\n}(Type));\nexport { BuiltinType };\nfunction BuiltinType_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BuiltinType.prototype.name;\n}\nvar ExpressionType = /** @class */ (function (_super) {\n    tslib_1.__extends(ExpressionType, _super);\n    function ExpressionType(value, modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, modifiers) || this;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ExpressionType.prototype.visitType = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitExpressionType(this, context);\n    };\n    return ExpressionType;\n}(Type));\nexport { ExpressionType };\nfunction ExpressionType_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExpressionType.prototype.value;\n}\nvar ArrayType = /** @class */ (function (_super) {\n    tslib_1.__extends(ArrayType, _super);\n    function ArrayType(of, modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, modifiers) || this;\n        _this.of = of;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ArrayType.prototype.visitType = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitArrayType(this, context);\n    };\n    return ArrayType;\n}(Type));\nexport { ArrayType };\nfunction ArrayType_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ArrayType.prototype.of;\n}\nvar MapType = /** @class */ (function (_super) {\n    tslib_1.__extends(MapType, _super);\n    function MapType(valueType, modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, modifiers) || this;\n        _this.valueType = valueType || null;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    MapType.prototype.visitType = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitMapType(this, context); };\n    return MapType;\n}(Type));\nexport { MapType };\nfunction MapType_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MapType.prototype.valueType;\n}\nexport var /** @type {?} */ DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);\nexport var /** @type {?} */ INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);\nexport var /** @type {?} */ BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);\nexport var /** @type {?} */ INT_TYPE = new BuiltinType(BuiltinTypeName.Int);\nexport var /** @type {?} */ NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);\nexport var /** @type {?} */ STRING_TYPE = new BuiltinType(BuiltinTypeName.String);\nexport var /** @type {?} */ FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);\n/**\n * @record\n */\nexport function TypeVisitor() { }\nfunction TypeVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TypeVisitor.prototype.visitBuiltinType;\n    /** @type {?} */\n    TypeVisitor.prototype.visitExpressionType;\n    /** @type {?} */\n    TypeVisitor.prototype.visitArrayType;\n    /** @type {?} */\n    TypeVisitor.prototype.visitMapType;\n}\n/** @enum {number} */\nvar BinaryOperator = {\n    Equals: 0,\n    NotEquals: 1,\n    Identical: 2,\n    NotIdentical: 3,\n    Minus: 4,\n    Plus: 5,\n    Divide: 6,\n    Multiply: 7,\n    Modulo: 8,\n    And: 9,\n    Or: 10,\n    BitwiseAnd: 11,\n    Lower: 12,\n    LowerEquals: 13,\n    Bigger: 14,\n    BiggerEquals: 15,\n};\nexport { BinaryOperator };\nBinaryOperator[BinaryOperator.Equals] = \"Equals\";\nBinaryOperator[BinaryOperator.NotEquals] = \"NotEquals\";\nBinaryOperator[BinaryOperator.Identical] = \"Identical\";\nBinaryOperator[BinaryOperator.NotIdentical] = \"NotIdentical\";\nBinaryOperator[BinaryOperator.Minus] = \"Minus\";\nBinaryOperator[BinaryOperator.Plus] = \"Plus\";\nBinaryOperator[BinaryOperator.Divide] = \"Divide\";\nBinaryOperator[BinaryOperator.Multiply] = \"Multiply\";\nBinaryOperator[BinaryOperator.Modulo] = \"Modulo\";\nBinaryOperator[BinaryOperator.And] = \"And\";\nBinaryOperator[BinaryOperator.Or] = \"Or\";\nBinaryOperator[BinaryOperator.BitwiseAnd] = \"BitwiseAnd\";\nBinaryOperator[BinaryOperator.Lower] = \"Lower\";\nBinaryOperator[BinaryOperator.LowerEquals] = \"LowerEquals\";\nBinaryOperator[BinaryOperator.Bigger] = \"Bigger\";\nBinaryOperator[BinaryOperator.BiggerEquals] = \"BiggerEquals\";\n/**\n * @template T\n * @param {?} base\n * @param {?} other\n * @return {?}\n */\nexport function nullSafeIsEquivalent(base, other) {\n    if (base == null || other == null) {\n        return base == other;\n    }\n    return base.isEquivalent(other);\n}\n/**\n * @template T\n * @param {?} base\n * @param {?} other\n * @return {?}\n */\nexport function areAllEquivalent(base, other) {\n    var /** @type {?} */ len = base.length;\n    if (len !== other.length) {\n        return false;\n    }\n    for (var /** @type {?} */ i = 0; i < len; i++) {\n        if (!base[i].isEquivalent(other[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nExpression = /** @class */ (function () {\n    function Expression(type, sourceSpan) {\n        this.type = type || null;\n        this.sourceSpan = sourceSpan || null;\n    }\n    /**\n     * @param {?} name\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.prop = /**\n     * @param {?} name\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (name, sourceSpan) {\n        return new ReadPropExpr(this, name, null, sourceSpan);\n    };\n    /**\n     * @param {?} index\n     * @param {?=} type\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.key = /**\n     * @param {?} index\n     * @param {?=} type\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (index, type, sourceSpan) {\n        return new ReadKeyExpr(this, index, type, sourceSpan);\n    };\n    /**\n     * @param {?} name\n     * @param {?} params\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.callMethod = /**\n     * @param {?} name\n     * @param {?} params\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (name, params, sourceSpan) {\n        return new InvokeMethodExpr(this, name, params, null, sourceSpan);\n    };\n    /**\n     * @param {?} params\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.callFn = /**\n     * @param {?} params\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (params, sourceSpan) {\n        return new InvokeFunctionExpr(this, params, null, sourceSpan);\n    };\n    /**\n     * @param {?} params\n     * @param {?=} type\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.instantiate = /**\n     * @param {?} params\n     * @param {?=} type\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (params, type, sourceSpan) {\n        return new InstantiateExpr(this, params, type, sourceSpan);\n    };\n    /**\n     * @param {?} trueCase\n     * @param {?=} falseCase\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.conditional = /**\n     * @param {?} trueCase\n     * @param {?=} falseCase\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (trueCase, falseCase, sourceSpan) {\n        if (falseCase === void 0) { falseCase = null; }\n        return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.equals = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.notEquals = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.identical = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.notIdentical = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.minus = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.plus = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.divide = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.multiply = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.modulo = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.and = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @param {?=} parens\n     * @return {?}\n     */\n    Expression.prototype.bitwiseAnd = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @param {?=} parens\n     * @return {?}\n     */\n    function (rhs, sourceSpan, parens) {\n        if (parens === void 0) { parens = true; }\n        return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.or = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.lower = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.lowerEquals = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.bigger = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.biggerEquals = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.isBlank = /**\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (sourceSpan) {\n        // Note: We use equals by purpose here to compare to null and undefined in JS.\n        // We use the typed null to allow strictNullChecks to narrow types.\n        return this.equals(TYPED_NULL_EXPR, sourceSpan);\n    };\n    /**\n     * @param {?} type\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.cast = /**\n     * @param {?} type\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (type, sourceSpan) {\n        return new CastExpr(this, type, sourceSpan);\n    };\n    /**\n     * @return {?}\n     */\n    Expression.prototype.toStmt = /**\n     * @return {?}\n     */\n    function () { return new ExpressionStatement(this, null); };\n    return Expression;\n}());\n/**\n * @abstract\n */\nexport { Expression };\nfunction Expression_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Expression.prototype.type;\n    /** @type {?} */\n    Expression.prototype.sourceSpan;\n    /**\n     * @abstract\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Expression.prototype.visitExpression = function (visitor, context) { };\n    /**\n     * Calculates whether this expression produces the same value as the given expression.\n     * Note: We don't check Types nor ParseSourceSpans nor function arguments.\n     * @abstract\n     * @param {?} e\n     * @return {?}\n     */\n    Expression.prototype.isEquivalent = function (e) { };\n    /**\n     * Return true if the expression is constant.\n     * @abstract\n     * @return {?}\n     */\n    Expression.prototype.isConstant = function () { };\n}\n/** @enum {number} */\nvar BuiltinVar = {\n    This: 0,\n    Super: 1,\n    CatchError: 2,\n    CatchStack: 3,\n};\nexport { BuiltinVar };\nBuiltinVar[BuiltinVar.This] = \"This\";\nBuiltinVar[BuiltinVar.Super] = \"Super\";\nBuiltinVar[BuiltinVar.CatchError] = \"CatchError\";\nBuiltinVar[BuiltinVar.CatchStack] = \"CatchStack\";\nvar ReadVarExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(ReadVarExpr, _super);\n    function ReadVarExpr(name, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        if (typeof name === 'string') {\n            _this.name = name;\n            _this.builtin = null;\n        }\n        else {\n            _this.name = null;\n            _this.builtin = name;\n        }\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    ReadVarExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof ReadVarExpr && this.name === e.name && this.builtin === e.builtin;\n    };\n    /**\n     * @return {?}\n     */\n    ReadVarExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ReadVarExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitReadVarExpr(this, context);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ReadVarExpr.prototype.set = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (!this.name) {\n            throw new Error(\"Built in variable \" + this.builtin + \" can not be assigned to.\");\n        }\n        return new WriteVarExpr(this.name, value, null, this.sourceSpan);\n    };\n    return ReadVarExpr;\n}(Expression));\nexport { ReadVarExpr };\nfunction ReadVarExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReadVarExpr.prototype.name;\n    /** @type {?} */\n    ReadVarExpr.prototype.builtin;\n}\nvar WriteVarExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(WriteVarExpr, _super);\n    function WriteVarExpr(name, value, type, sourceSpan) {\n        var _this = _super.call(this, type || value.type, sourceSpan) || this;\n        _this.name = name;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    WriteVarExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);\n    };\n    /**\n     * @return {?}\n     */\n    WriteVarExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    WriteVarExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitWriteVarExpr(this, context);\n    };\n    /**\n     * @param {?=} type\n     * @param {?=} modifiers\n     * @return {?}\n     */\n    WriteVarExpr.prototype.toDeclStmt = /**\n     * @param {?=} type\n     * @param {?=} modifiers\n     * @return {?}\n     */\n    function (type, modifiers) {\n        return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);\n    };\n    return WriteVarExpr;\n}(Expression));\nexport { WriteVarExpr };\nfunction WriteVarExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    WriteVarExpr.prototype.value;\n    /** @type {?} */\n    WriteVarExpr.prototype.name;\n}\nvar WriteKeyExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(WriteKeyExpr, _super);\n    function WriteKeyExpr(receiver, index, value, type, sourceSpan) {\n        var _this = _super.call(this, type || value.type, sourceSpan) || this;\n        _this.receiver = receiver;\n        _this.index = index;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    WriteKeyExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof WriteKeyExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.index.isEquivalent(e.index) && this.value.isEquivalent(e.value);\n    };\n    /**\n     * @return {?}\n     */\n    WriteKeyExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    WriteKeyExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitWriteKeyExpr(this, context);\n    };\n    return WriteKeyExpr;\n}(Expression));\nexport { WriteKeyExpr };\nfunction WriteKeyExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    WriteKeyExpr.prototype.value;\n    /** @type {?} */\n    WriteKeyExpr.prototype.receiver;\n    /** @type {?} */\n    WriteKeyExpr.prototype.index;\n}\nvar WritePropExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(WritePropExpr, _super);\n    function WritePropExpr(receiver, name, value, type, sourceSpan) {\n        var _this = _super.call(this, type || value.type, sourceSpan) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    WritePropExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof WritePropExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.name === e.name && this.value.isEquivalent(e.value);\n    };\n    /**\n     * @return {?}\n     */\n    WritePropExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    WritePropExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitWritePropExpr(this, context);\n    };\n    return WritePropExpr;\n}(Expression));\nexport { WritePropExpr };\nfunction WritePropExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    WritePropExpr.prototype.value;\n    /** @type {?} */\n    WritePropExpr.prototype.receiver;\n    /** @type {?} */\n    WritePropExpr.prototype.name;\n}\n/** @enum {number} */\nvar BuiltinMethod = {\n    ConcatArray: 0,\n    SubscribeObservable: 1,\n    Bind: 2,\n};\nexport { BuiltinMethod };\nBuiltinMethod[BuiltinMethod.ConcatArray] = \"ConcatArray\";\nBuiltinMethod[BuiltinMethod.SubscribeObservable] = \"SubscribeObservable\";\nBuiltinMethod[BuiltinMethod.Bind] = \"Bind\";\nvar InvokeMethodExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(InvokeMethodExpr, _super);\n    function InvokeMethodExpr(receiver, method, args, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.receiver = receiver;\n        _this.args = args;\n        if (typeof method === 'string') {\n            _this.name = method;\n            _this.builtin = null;\n        }\n        else {\n            _this.name = null;\n            _this.builtin = /** @type {?} */ (method);\n        }\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    InvokeMethodExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof InvokeMethodExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.name === e.name && this.builtin === e.builtin && areAllEquivalent(this.args, e.args);\n    };\n    /**\n     * @return {?}\n     */\n    InvokeMethodExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    InvokeMethodExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitInvokeMethodExpr(this, context);\n    };\n    return InvokeMethodExpr;\n}(Expression));\nexport { InvokeMethodExpr };\nfunction InvokeMethodExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InvokeMethodExpr.prototype.name;\n    /** @type {?} */\n    InvokeMethodExpr.prototype.builtin;\n    /** @type {?} */\n    InvokeMethodExpr.prototype.receiver;\n    /** @type {?} */\n    InvokeMethodExpr.prototype.args;\n}\nvar InvokeFunctionExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(InvokeFunctionExpr, _super);\n    function InvokeFunctionExpr(fn, args, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.fn = fn;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    InvokeFunctionExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof InvokeFunctionExpr && this.fn.isEquivalent(e.fn) &&\n            areAllEquivalent(this.args, e.args);\n    };\n    /**\n     * @return {?}\n     */\n    InvokeFunctionExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    InvokeFunctionExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitInvokeFunctionExpr(this, context);\n    };\n    return InvokeFunctionExpr;\n}(Expression));\nexport { InvokeFunctionExpr };\nfunction InvokeFunctionExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InvokeFunctionExpr.prototype.fn;\n    /** @type {?} */\n    InvokeFunctionExpr.prototype.args;\n}\nvar InstantiateExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(InstantiateExpr, _super);\n    function InstantiateExpr(classExpr, args, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.classExpr = classExpr;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    InstantiateExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) &&\n            areAllEquivalent(this.args, e.args);\n    };\n    /**\n     * @return {?}\n     */\n    InstantiateExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    InstantiateExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitInstantiateExpr(this, context);\n    };\n    return InstantiateExpr;\n}(Expression));\nexport { InstantiateExpr };\nfunction InstantiateExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InstantiateExpr.prototype.classExpr;\n    /** @type {?} */\n    InstantiateExpr.prototype.args;\n}\nvar LiteralExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(LiteralExpr, _super);\n    function LiteralExpr(value, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    LiteralExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof LiteralExpr && this.value === e.value;\n    };\n    /**\n     * @return {?}\n     */\n    LiteralExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return true; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    LiteralExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitLiteralExpr(this, context);\n    };\n    return LiteralExpr;\n}(Expression));\nexport { LiteralExpr };\nfunction LiteralExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LiteralExpr.prototype.value;\n}\nvar ExternalExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(ExternalExpr, _super);\n    function ExternalExpr(value, type, typeParams, sourceSpan) {\n        if (typeParams === void 0) { typeParams = null; }\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.value = value;\n        _this.typeParams = typeParams;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    ExternalExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof ExternalExpr && this.value.name === e.value.name &&\n            this.value.moduleName === e.value.moduleName && this.value.runtime === e.value.runtime;\n    };\n    /**\n     * @return {?}\n     */\n    ExternalExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ExternalExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitExternalExpr(this, context);\n    };\n    return ExternalExpr;\n}(Expression));\nexport { ExternalExpr };\nfunction ExternalExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExternalExpr.prototype.value;\n    /** @type {?} */\n    ExternalExpr.prototype.typeParams;\n}\nvar ExternalReference = /** @class */ (function () {\n    function ExternalReference(moduleName, name, runtime) {\n        this.moduleName = moduleName;\n        this.name = name;\n        this.runtime = runtime;\n    }\n    return ExternalReference;\n}());\nexport { ExternalReference };\nfunction ExternalReference_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExternalReference.prototype.moduleName;\n    /** @type {?} */\n    ExternalReference.prototype.name;\n    /** @type {?} */\n    ExternalReference.prototype.runtime;\n}\nvar ConditionalExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(ConditionalExpr, _super);\n    function ConditionalExpr(condition, trueCase, falseCase, type, sourceSpan) {\n        if (falseCase === void 0) { falseCase = null; }\n        var _this = _super.call(this, type || trueCase.type, sourceSpan) || this;\n        _this.condition = condition;\n        _this.falseCase = falseCase;\n        _this.trueCase = trueCase;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    ConditionalExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof ConditionalExpr && this.condition.isEquivalent(e.condition) &&\n            this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);\n    };\n    /**\n     * @return {?}\n     */\n    ConditionalExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ConditionalExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitConditionalExpr(this, context);\n    };\n    return ConditionalExpr;\n}(Expression));\nexport { ConditionalExpr };\nfunction ConditionalExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ConditionalExpr.prototype.trueCase;\n    /** @type {?} */\n    ConditionalExpr.prototype.condition;\n    /** @type {?} */\n    ConditionalExpr.prototype.falseCase;\n}\nvar NotExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(NotExpr, _super);\n    function NotExpr(condition, sourceSpan) {\n        var _this = _super.call(this, BOOL_TYPE, sourceSpan) || this;\n        _this.condition = condition;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NotExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof NotExpr && this.condition.isEquivalent(e.condition);\n    };\n    /**\n     * @return {?}\n     */\n    NotExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    NotExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitNotExpr(this, context);\n    };\n    return NotExpr;\n}(Expression));\nexport { NotExpr };\nfunction NotExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NotExpr.prototype.condition;\n}\nvar AssertNotNull = /** @class */ (function (_super) {\n    tslib_1.__extends(AssertNotNull, _super);\n    function AssertNotNull(condition, sourceSpan) {\n        var _this = _super.call(this, condition.type, sourceSpan) || this;\n        _this.condition = condition;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    AssertNotNull.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof AssertNotNull && this.condition.isEquivalent(e.condition);\n    };\n    /**\n     * @return {?}\n     */\n    AssertNotNull.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    AssertNotNull.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitAssertNotNullExpr(this, context);\n    };\n    return AssertNotNull;\n}(Expression));\nexport { AssertNotNull };\nfunction AssertNotNull_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AssertNotNull.prototype.condition;\n}\nvar CastExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(CastExpr, _super);\n    function CastExpr(value, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    CastExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof CastExpr && this.value.isEquivalent(e.value);\n    };\n    /**\n     * @return {?}\n     */\n    CastExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    CastExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitCastExpr(this, context);\n    };\n    return CastExpr;\n}(Expression));\nexport { CastExpr };\nfunction CastExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CastExpr.prototype.value;\n}\nvar FnParam = /** @class */ (function () {\n    function FnParam(name, type) {\n        if (type === void 0) { type = null; }\n        this.name = name;\n        this.type = type;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    FnParam.prototype.isEquivalent = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { return this.name === param.name; };\n    return FnParam;\n}());\nexport { FnParam };\nfunction FnParam_tsickle_Closure_declarations() {\n    /** @type {?} */\n    FnParam.prototype.name;\n    /** @type {?} */\n    FnParam.prototype.type;\n}\nvar FunctionExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(FunctionExpr, _super);\n    function FunctionExpr(params, statements, type, sourceSpan, name) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.params = params;\n        _this.statements = statements;\n        _this.name = name;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    FunctionExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof FunctionExpr && areAllEquivalent(this.params, e.params) &&\n            areAllEquivalent(this.statements, e.statements);\n    };\n    /**\n     * @return {?}\n     */\n    FunctionExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    FunctionExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitFunctionExpr(this, context);\n    };\n    /**\n     * @param {?} name\n     * @param {?=} modifiers\n     * @return {?}\n     */\n    FunctionExpr.prototype.toDeclStmt = /**\n     * @param {?} name\n     * @param {?=} modifiers\n     * @return {?}\n     */\n    function (name, modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);\n    };\n    return FunctionExpr;\n}(Expression));\nexport { FunctionExpr };\nfunction FunctionExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    FunctionExpr.prototype.params;\n    /** @type {?} */\n    FunctionExpr.prototype.statements;\n    /** @type {?} */\n    FunctionExpr.prototype.name;\n}\nvar BinaryOperatorExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(BinaryOperatorExpr, _super);\n    function BinaryOperatorExpr(operator, lhs, rhs, type, sourceSpan, parens) {\n        if (parens === void 0) { parens = true; }\n        var _this = _super.call(this, type || lhs.type, sourceSpan) || this;\n        _this.operator = operator;\n        _this.rhs = rhs;\n        _this.parens = parens;\n        _this.lhs = lhs;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    BinaryOperatorExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof BinaryOperatorExpr && this.operator === e.operator &&\n            this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);\n    };\n    /**\n     * @return {?}\n     */\n    BinaryOperatorExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    BinaryOperatorExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitBinaryOperatorExpr(this, context);\n    };\n    return BinaryOperatorExpr;\n}(Expression));\nexport { BinaryOperatorExpr };\nfunction BinaryOperatorExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BinaryOperatorExpr.prototype.lhs;\n    /** @type {?} */\n    BinaryOperatorExpr.prototype.operator;\n    /** @type {?} */\n    BinaryOperatorExpr.prototype.rhs;\n    /** @type {?} */\n    BinaryOperatorExpr.prototype.parens;\n}\nvar ReadPropExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(ReadPropExpr, _super);\n    function ReadPropExpr(receiver, name, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    ReadPropExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof ReadPropExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.name === e.name;\n    };\n    /**\n     * @return {?}\n     */\n    ReadPropExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ReadPropExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitReadPropExpr(this, context);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ReadPropExpr.prototype.set = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);\n    };\n    return ReadPropExpr;\n}(Expression));\nexport { ReadPropExpr };\nfunction ReadPropExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReadPropExpr.prototype.receiver;\n    /** @type {?} */\n    ReadPropExpr.prototype.name;\n}\nvar ReadKeyExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(ReadKeyExpr, _super);\n    function ReadKeyExpr(receiver, index, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.receiver = receiver;\n        _this.index = index;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    ReadKeyExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof ReadKeyExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.index.isEquivalent(e.index);\n    };\n    /**\n     * @return {?}\n     */\n    ReadKeyExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ReadKeyExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitReadKeyExpr(this, context);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ReadKeyExpr.prototype.set = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);\n    };\n    return ReadKeyExpr;\n}(Expression));\nexport { ReadKeyExpr };\nfunction ReadKeyExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReadKeyExpr.prototype.receiver;\n    /** @type {?} */\n    ReadKeyExpr.prototype.index;\n}\nvar LiteralArrayExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(LiteralArrayExpr, _super);\n    function LiteralArrayExpr(entries, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.entries = entries;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    LiteralArrayExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return this.entries.every(function (e) { return e.isConstant(); }); };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    LiteralArrayExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    LiteralArrayExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitLiteralArrayExpr(this, context);\n    };\n    return LiteralArrayExpr;\n}(Expression));\nexport { LiteralArrayExpr };\nfunction LiteralArrayExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LiteralArrayExpr.prototype.entries;\n}\nvar LiteralMapEntry = /** @class */ (function () {\n    function LiteralMapEntry(key, value, quoted) {\n        this.key = key;\n        this.value = value;\n        this.quoted = quoted;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    LiteralMapEntry.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return this.key === e.key && this.value.isEquivalent(e.value);\n    };\n    return LiteralMapEntry;\n}());\nexport { LiteralMapEntry };\nfunction LiteralMapEntry_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LiteralMapEntry.prototype.key;\n    /** @type {?} */\n    LiteralMapEntry.prototype.value;\n    /** @type {?} */\n    LiteralMapEntry.prototype.quoted;\n}\nvar LiteralMapExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(LiteralMapExpr, _super);\n    function LiteralMapExpr(entries, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.entries = entries;\n        _this.valueType = null;\n        if (type) {\n            _this.valueType = type.valueType;\n        }\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    LiteralMapExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof LiteralMapExpr && areAllEquivalent(this.entries, e.entries);\n    };\n    /**\n     * @return {?}\n     */\n    LiteralMapExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return this.entries.every(function (e) { return e.value.isConstant(); }); };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    LiteralMapExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitLiteralMapExpr(this, context);\n    };\n    return LiteralMapExpr;\n}(Expression));\nexport { LiteralMapExpr };\nfunction LiteralMapExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LiteralMapExpr.prototype.valueType;\n    /** @type {?} */\n    LiteralMapExpr.prototype.entries;\n}\nvar CommaExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(CommaExpr, _super);\n    function CommaExpr(parts, sourceSpan) {\n        var _this = _super.call(this, parts[parts.length - 1].type, sourceSpan) || this;\n        _this.parts = parts;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    CommaExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof CommaExpr && areAllEquivalent(this.parts, e.parts);\n    };\n    /**\n     * @return {?}\n     */\n    CommaExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    CommaExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitCommaExpr(this, context);\n    };\n    return CommaExpr;\n}(Expression));\nexport { CommaExpr };\nfunction CommaExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CommaExpr.prototype.parts;\n}\n/**\n * @record\n */\nexport function ExpressionVisitor() { }\nfunction ExpressionVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitReadVarExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitWriteVarExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitWriteKeyExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitWritePropExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitInvokeMethodExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitInvokeFunctionExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitInstantiateExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitLiteralExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitExternalExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitConditionalExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitNotExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitAssertNotNullExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitCastExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitFunctionExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitBinaryOperatorExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitReadPropExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitReadKeyExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitLiteralArrayExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitLiteralMapExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitCommaExpr;\n}\nexport var /** @type {?} */ THIS_EXPR = new ReadVarExpr(BuiltinVar.This, null, null);\nexport var /** @type {?} */ SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super, null, null);\nexport var /** @type {?} */ CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError, null, null);\nexport var /** @type {?} */ CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack, null, null);\nexport var /** @type {?} */ NULL_EXPR = new LiteralExpr(null, null, null);\nexport var /** @type {?} */ TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);\n/** @enum {number} */\nvar StmtModifier = {\n    Final: 0,\n    Private: 1,\n    Exported: 2,\n    Static: 3,\n};\nexport { StmtModifier };\nStmtModifier[StmtModifier.Final] = \"Final\";\nStmtModifier[StmtModifier.Private] = \"Private\";\nStmtModifier[StmtModifier.Exported] = \"Exported\";\nStmtModifier[StmtModifier.Static] = \"Static\";\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nStatement = /** @class */ (function () {\n    function Statement(modifiers, sourceSpan) {\n        this.modifiers = modifiers || [];\n        this.sourceSpan = sourceSpan || null;\n    }\n    /**\n     * @param {?} modifier\n     * @return {?}\n     */\n    Statement.prototype.hasModifier = /**\n     * @param {?} modifier\n     * @return {?}\n     */\n    function (modifier) { return /** @type {?} */ ((this.modifiers)).indexOf(modifier) !== -1; };\n    return Statement;\n}());\n/**\n * @abstract\n */\nexport { Statement };\nfunction Statement_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Statement.prototype.modifiers;\n    /** @type {?} */\n    Statement.prototype.sourceSpan;\n    /**\n     * Calculates whether this statement produces the same value as the given statement.\n     * Note: We don't check Types nor ParseSourceSpans nor function arguments.\n     * @abstract\n     * @param {?} stmt\n     * @return {?}\n     */\n    Statement.prototype.isEquivalent = function (stmt) { };\n    /**\n     * @abstract\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Statement.prototype.visitStatement = function (visitor, context) { };\n}\nvar DeclareVarStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(DeclareVarStmt, _super);\n    function DeclareVarStmt(name, value, type, modifiers, sourceSpan) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, modifiers, sourceSpan) || this;\n        _this.name = name;\n        _this.value = value;\n        _this.type = type || (value && value.type) || null;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    DeclareVarStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof DeclareVarStmt && this.name === stmt.name &&\n            (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    DeclareVarStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitDeclareVarStmt(this, context);\n    };\n    return DeclareVarStmt;\n}(Statement));\nexport { DeclareVarStmt };\nfunction DeclareVarStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DeclareVarStmt.prototype.type;\n    /** @type {?} */\n    DeclareVarStmt.prototype.name;\n    /** @type {?} */\n    DeclareVarStmt.prototype.value;\n}\nvar DeclareFunctionStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(DeclareFunctionStmt, _super);\n    function DeclareFunctionStmt(name, params, statements, type, modifiers, sourceSpan) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, modifiers, sourceSpan) || this;\n        _this.name = name;\n        _this.params = params;\n        _this.statements = statements;\n        _this.type = type || null;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    DeclareFunctionStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) &&\n            areAllEquivalent(this.statements, stmt.statements);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    DeclareFunctionStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitDeclareFunctionStmt(this, context);\n    };\n    return DeclareFunctionStmt;\n}(Statement));\nexport { DeclareFunctionStmt };\nfunction DeclareFunctionStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DeclareFunctionStmt.prototype.type;\n    /** @type {?} */\n    DeclareFunctionStmt.prototype.name;\n    /** @type {?} */\n    DeclareFunctionStmt.prototype.params;\n    /** @type {?} */\n    DeclareFunctionStmt.prototype.statements;\n}\nvar ExpressionStatement = /** @class */ (function (_super) {\n    tslib_1.__extends(ExpressionStatement, _super);\n    function ExpressionStatement(expr, sourceSpan) {\n        var _this = _super.call(this, null, sourceSpan) || this;\n        _this.expr = expr;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    ExpressionStatement.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof ExpressionStatement && this.expr.isEquivalent(stmt.expr);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ExpressionStatement.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitExpressionStmt(this, context);\n    };\n    return ExpressionStatement;\n}(Statement));\nexport { ExpressionStatement };\nfunction ExpressionStatement_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExpressionStatement.prototype.expr;\n}\nvar ReturnStatement = /** @class */ (function (_super) {\n    tslib_1.__extends(ReturnStatement, _super);\n    function ReturnStatement(value, sourceSpan) {\n        var _this = _super.call(this, null, sourceSpan) || this;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    ReturnStatement.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof ReturnStatement && this.value.isEquivalent(stmt.value);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ReturnStatement.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitReturnStmt(this, context);\n    };\n    return ReturnStatement;\n}(Statement));\nexport { ReturnStatement };\nfunction ReturnStatement_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReturnStatement.prototype.value;\n}\nvar AbstractClassPart = /** @class */ (function () {\n    function AbstractClassPart(type, modifiers) {\n        this.modifiers = modifiers;\n        if (!modifiers) {\n            this.modifiers = [];\n        }\n        this.type = type || null;\n    }\n    /**\n     * @param {?} modifier\n     * @return {?}\n     */\n    AbstractClassPart.prototype.hasModifier = /**\n     * @param {?} modifier\n     * @return {?}\n     */\n    function (modifier) { return /** @type {?} */ ((this.modifiers)).indexOf(modifier) !== -1; };\n    return AbstractClassPart;\n}());\nexport { AbstractClassPart };\nfunction AbstractClassPart_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AbstractClassPart.prototype.type;\n    /** @type {?} */\n    AbstractClassPart.prototype.modifiers;\n}\nvar ClassField = /** @class */ (function (_super) {\n    tslib_1.__extends(ClassField, _super);\n    function ClassField(name, type, modifiers, initializer) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, type, modifiers) || this;\n        _this.name = name;\n        _this.initializer = initializer;\n        return _this;\n    }\n    /**\n     * @param {?} f\n     * @return {?}\n     */\n    ClassField.prototype.isEquivalent = /**\n     * @param {?} f\n     * @return {?}\n     */\n    function (f) { return this.name === f.name; };\n    return ClassField;\n}(AbstractClassPart));\nexport { ClassField };\nfunction ClassField_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ClassField.prototype.name;\n    /** @type {?} */\n    ClassField.prototype.initializer;\n}\nvar ClassMethod = /** @class */ (function (_super) {\n    tslib_1.__extends(ClassMethod, _super);\n    function ClassMethod(name, params, body, type, modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, type, modifiers) || this;\n        _this.name = name;\n        _this.params = params;\n        _this.body = body;\n        return _this;\n    }\n    /**\n     * @param {?} m\n     * @return {?}\n     */\n    ClassMethod.prototype.isEquivalent = /**\n     * @param {?} m\n     * @return {?}\n     */\n    function (m) {\n        return this.name === m.name && areAllEquivalent(this.body, m.body);\n    };\n    return ClassMethod;\n}(AbstractClassPart));\nexport { ClassMethod };\nfunction ClassMethod_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ClassMethod.prototype.name;\n    /** @type {?} */\n    ClassMethod.prototype.params;\n    /** @type {?} */\n    ClassMethod.prototype.body;\n}\nvar ClassGetter = /** @class */ (function (_super) {\n    tslib_1.__extends(ClassGetter, _super);\n    function ClassGetter(name, body, type, modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, type, modifiers) || this;\n        _this.name = name;\n        _this.body = body;\n        return _this;\n    }\n    /**\n     * @param {?} m\n     * @return {?}\n     */\n    ClassGetter.prototype.isEquivalent = /**\n     * @param {?} m\n     * @return {?}\n     */\n    function (m) {\n        return this.name === m.name && areAllEquivalent(this.body, m.body);\n    };\n    return ClassGetter;\n}(AbstractClassPart));\nexport { ClassGetter };\nfunction ClassGetter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ClassGetter.prototype.name;\n    /** @type {?} */\n    ClassGetter.prototype.body;\n}\nvar ClassStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(ClassStmt, _super);\n    function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers, sourceSpan) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, modifiers, sourceSpan) || this;\n        _this.name = name;\n        _this.parent = parent;\n        _this.fields = fields;\n        _this.getters = getters;\n        _this.constructorMethod = constructorMethod;\n        _this.methods = methods;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    ClassStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof ClassStmt && this.name === stmt.name &&\n            nullSafeIsEquivalent(this.parent, stmt.parent) &&\n            areAllEquivalent(this.fields, stmt.fields) &&\n            areAllEquivalent(this.getters, stmt.getters) &&\n            this.constructorMethod.isEquivalent(stmt.constructorMethod) &&\n            areAllEquivalent(this.methods, stmt.methods);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ClassStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitDeclareClassStmt(this, context);\n    };\n    return ClassStmt;\n}(Statement));\nexport { ClassStmt };\nfunction ClassStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ClassStmt.prototype.name;\n    /** @type {?} */\n    ClassStmt.prototype.parent;\n    /** @type {?} */\n    ClassStmt.prototype.fields;\n    /** @type {?} */\n    ClassStmt.prototype.getters;\n    /** @type {?} */\n    ClassStmt.prototype.constructorMethod;\n    /** @type {?} */\n    ClassStmt.prototype.methods;\n}\nvar IfStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(IfStmt, _super);\n    function IfStmt(condition, trueCase, falseCase, sourceSpan) {\n        if (falseCase === void 0) { falseCase = []; }\n        var _this = _super.call(this, null, sourceSpan) || this;\n        _this.condition = condition;\n        _this.trueCase = trueCase;\n        _this.falseCase = falseCase;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    IfStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof IfStmt && this.condition.isEquivalent(stmt.condition) &&\n            areAllEquivalent(this.trueCase, stmt.trueCase) &&\n            areAllEquivalent(this.falseCase, stmt.falseCase);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    IfStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitIfStmt(this, context);\n    };\n    return IfStmt;\n}(Statement));\nexport { IfStmt };\nfunction IfStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    IfStmt.prototype.condition;\n    /** @type {?} */\n    IfStmt.prototype.trueCase;\n    /** @type {?} */\n    IfStmt.prototype.falseCase;\n}\nvar CommentStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(CommentStmt, _super);\n    function CommentStmt(comment, multiline, sourceSpan) {\n        if (multiline === void 0) { multiline = false; }\n        var _this = _super.call(this, null, sourceSpan) || this;\n        _this.comment = comment;\n        _this.multiline = multiline;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    CommentStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) { return stmt instanceof CommentStmt; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    CommentStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitCommentStmt(this, context);\n    };\n    return CommentStmt;\n}(Statement));\nexport { CommentStmt };\nfunction CommentStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CommentStmt.prototype.comment;\n    /** @type {?} */\n    CommentStmt.prototype.multiline;\n}\nvar JSDocCommentStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(JSDocCommentStmt, _super);\n    function JSDocCommentStmt(tags, sourceSpan) {\n        if (tags === void 0) { tags = []; }\n        var _this = _super.call(this, null, sourceSpan) || this;\n        _this.tags = tags;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    JSDocCommentStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof JSDocCommentStmt && this.toString() === stmt.toString();\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    JSDocCommentStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitJSDocCommentStmt(this, context);\n    };\n    /**\n     * @return {?}\n     */\n    JSDocCommentStmt.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return serializeTags(this.tags); };\n    return JSDocCommentStmt;\n}(Statement));\nexport { JSDocCommentStmt };\nfunction JSDocCommentStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    JSDocCommentStmt.prototype.tags;\n}\nvar TryCatchStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(TryCatchStmt, _super);\n    function TryCatchStmt(bodyStmts, catchStmts, sourceSpan) {\n        var _this = _super.call(this, null, sourceSpan) || this;\n        _this.bodyStmts = bodyStmts;\n        _this.catchStmts = catchStmts;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    TryCatchStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof TryCatchStmt && areAllEquivalent(this.bodyStmts, stmt.bodyStmts) &&\n            areAllEquivalent(this.catchStmts, stmt.catchStmts);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    TryCatchStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitTryCatchStmt(this, context);\n    };\n    return TryCatchStmt;\n}(Statement));\nexport { TryCatchStmt };\nfunction TryCatchStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TryCatchStmt.prototype.bodyStmts;\n    /** @type {?} */\n    TryCatchStmt.prototype.catchStmts;\n}\nvar ThrowStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(ThrowStmt, _super);\n    function ThrowStmt(error, sourceSpan) {\n        var _this = _super.call(this, null, sourceSpan) || this;\n        _this.error = error;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    ThrowStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof TryCatchStmt && this.error.isEquivalent(stmt.error);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ThrowStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitThrowStmt(this, context);\n    };\n    return ThrowStmt;\n}(Statement));\nexport { ThrowStmt };\nfunction ThrowStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ThrowStmt.prototype.error;\n}\n/**\n * @record\n */\nexport function StatementVisitor() { }\nfunction StatementVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StatementVisitor.prototype.visitDeclareVarStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitDeclareFunctionStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitExpressionStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitReturnStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitDeclareClassStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitIfStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitTryCatchStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitThrowStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitCommentStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitJSDocCommentStmt;\n}\nvar AstTransformer = /** @class */ (function () {\n    function AstTransformer() {\n    }\n    /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.transformExpr = /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    function (expr, context) { return expr; };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.transformStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) { return stmt; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitReadVarExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return this.transformExpr(ast, context); };\n    /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitWriteVarExpr = /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    function (expr, context) {\n        return this.transformExpr(new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    };\n    /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitWriteKeyExpr = /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    function (expr, context) {\n        return this.transformExpr(new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    };\n    /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitWritePropExpr = /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    function (expr, context) {\n        return this.transformExpr(new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitInvokeMethodExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ method = ast.builtin || ast.name;\n        return this.transformExpr(new InvokeMethodExpr(ast.receiver.visitExpression(this, context), /** @type {?} */ ((method)), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitInvokeFunctionExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitInstantiateExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitLiteralExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return this.transformExpr(ast, context); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitExternalExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitConditionalExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), /** @type {?} */ ((ast.falseCase)).visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitNotExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitAssertNotNullExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new AssertNotNull(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitCastExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new CastExpr(ast.value.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitFunctionExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new FunctionExpr(ast.params, this.visitAllStatements(ast.statements, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitBinaryOperatorExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitReadPropExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitReadKeyExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitLiteralArrayExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitLiteralMapExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ entries = ast.entries.map(function (entry) {\n            return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this, context), entry.quoted);\n        });\n        var /** @type {?} */ mapType = new MapType(ast.valueType, null);\n        return this.transformExpr(new LiteralMapExpr(entries, mapType, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitCommaExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new CommaExpr(this.visitAllExpressions(ast.parts, context), ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} exprs\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitAllExpressions = /**\n     * @param {?} exprs\n     * @param {?} context\n     * @return {?}\n     */\n    function (exprs, context) {\n        var _this = this;\n        return exprs.map(function (expr) { return expr.visitExpression(_this, context); });\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitDeclareVarStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        var /** @type {?} */ value = stmt.value && stmt.value.visitExpression(this, context);\n        return this.transformStmt(new DeclareVarStmt(stmt.name, value, stmt.type, stmt.modifiers, stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitDeclareFunctionStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(new DeclareFunctionStmt(stmt.name, stmt.params, this.visitAllStatements(stmt.statements, context), stmt.type, stmt.modifiers, stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitExpressionStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitReturnStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitDeclareClassStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        var _this = this;\n        var /** @type {?} */ parent = /** @type {?} */ ((stmt.parent)).visitExpression(this, context);\n        var /** @type {?} */ getters = stmt.getters.map(function (getter) {\n            return new ClassGetter(getter.name, _this.visitAllStatements(getter.body, context), getter.type, getter.modifiers);\n        });\n        var /** @type {?} */ ctorMethod = stmt.constructorMethod &&\n            new ClassMethod(stmt.constructorMethod.name, stmt.constructorMethod.params, this.visitAllStatements(stmt.constructorMethod.body, context), stmt.constructorMethod.type, stmt.constructorMethod.modifiers);\n        var /** @type {?} */ methods = stmt.methods.map(function (method) {\n            return new ClassMethod(method.name, method.params, _this.visitAllStatements(method.body, context), method.type, method.modifiers);\n        });\n        return this.transformStmt(new ClassStmt(stmt.name, parent, stmt.fields, getters, ctorMethod, methods, stmt.modifiers, stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitIfStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitTryCatchStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitThrowStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitCommentStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(stmt, context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitJSDocCommentStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(stmt, context);\n    };\n    /**\n     * @param {?} stmts\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitAllStatements = /**\n     * @param {?} stmts\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmts, context) {\n        var _this = this;\n        return stmts.map(function (stmt) { return stmt.visitStatement(_this, context); });\n    };\n    return AstTransformer;\n}());\nexport { AstTransformer };\nvar RecursiveAstVisitor = /** @class */ (function () {\n    function RecursiveAstVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitType = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return ast; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitExpression = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        if (ast.type) {\n            ast.type.visitType(this, context);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitBuiltinType = /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    function (type, context) { return this.visitType(type, context); };\n    /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitExpressionType = /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    function (type, context) {\n        type.value.visitExpression(this, context);\n        return this.visitType(type, context);\n    };\n    /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitArrayType = /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    function (type, context) { return this.visitType(type, context); };\n    /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitMapType = /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    function (type, context) { return this.visitType(type, context); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitReadVarExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitWriteVarExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitWriteKeyExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.index.visitExpression(this, context);\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitWritePropExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitInvokeMethodExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visitExpression(this, context);\n        this.visitAllExpressions(ast.args, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitInvokeFunctionExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.fn.visitExpression(this, context);\n        this.visitAllExpressions(ast.args, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitInstantiateExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.classExpr.visitExpression(this, context);\n        this.visitAllExpressions(ast.args, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitLiteralExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitExternalExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        if (ast.typeParams) {\n            ast.typeParams.forEach(function (type) { return type.visitType(_this, context); });\n        }\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitConditionalExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.condition.visitExpression(this, context);\n        ast.trueCase.visitExpression(this, context); /** @type {?} */\n        ((ast.falseCase)).visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitNotExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.condition.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitAssertNotNullExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.condition.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitCastExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitFunctionExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        this.visitAllStatements(ast.statements, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitBinaryOperatorExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.lhs.visitExpression(this, context);\n        ast.rhs.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitReadPropExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitReadKeyExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.index.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitLiteralArrayExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        this.visitAllExpressions(ast.entries, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitLiteralMapExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        ast.entries.forEach(function (entry) { return entry.value.visitExpression(_this, context); });\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitCommaExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        this.visitAllExpressions(ast.parts, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} exprs\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitAllExpressions = /**\n     * @param {?} exprs\n     * @param {?} context\n     * @return {?}\n     */\n    function (exprs, context) {\n        var _this = this;\n        exprs.forEach(function (expr) { return expr.visitExpression(_this, context); });\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitDeclareVarStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        if (stmt.value) {\n            stmt.value.visitExpression(this, context);\n        }\n        if (stmt.type) {\n            stmt.type.visitType(this, context);\n        }\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitDeclareFunctionStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        this.visitAllStatements(stmt.statements, context);\n        if (stmt.type) {\n            stmt.type.visitType(this, context);\n        }\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitExpressionStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        stmt.expr.visitExpression(this, context);\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitReturnStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        stmt.value.visitExpression(this, context);\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitDeclareClassStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        var _this = this;\n        /** @type {?} */ ((stmt.parent)).visitExpression(this, context);\n        stmt.getters.forEach(function (getter) { return _this.visitAllStatements(getter.body, context); });\n        if (stmt.constructorMethod) {\n            this.visitAllStatements(stmt.constructorMethod.body, context);\n        }\n        stmt.methods.forEach(function (method) { return _this.visitAllStatements(method.body, context); });\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitIfStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        stmt.condition.visitExpression(this, context);\n        this.visitAllStatements(stmt.trueCase, context);\n        this.visitAllStatements(stmt.falseCase, context);\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitTryCatchStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        this.visitAllStatements(stmt.bodyStmts, context);\n        this.visitAllStatements(stmt.catchStmts, context);\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitThrowStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        stmt.error.visitExpression(this, context);\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitCommentStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) { return stmt; };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitJSDocCommentStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) { return stmt; };\n    /**\n     * @param {?} stmts\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitAllStatements = /**\n     * @param {?} stmts\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmts, context) {\n        var _this = this;\n        stmts.forEach(function (stmt) { return stmt.visitStatement(_this, context); });\n    };\n    return RecursiveAstVisitor;\n}());\nexport { RecursiveAstVisitor };\n/**\n * @param {?} stmts\n * @return {?}\n */\nexport function findReadVarNames(stmts) {\n    var /** @type {?} */ visitor = new _ReadVarVisitor();\n    visitor.visitAllStatements(stmts, null);\n    return visitor.varNames;\n}\nvar _ReadVarVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(_ReadVarVisitor, _super);\n    function _ReadVarVisitor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.varNames = new Set();\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    _ReadVarVisitor.prototype.visitDeclareFunctionStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        // Don't descend into nested functions\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    _ReadVarVisitor.prototype.visitDeclareClassStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        // Don't descend into nested classes\n        return stmt;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    _ReadVarVisitor.prototype.visitReadVarExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        if (ast.name) {\n            this.varNames.add(ast.name);\n        }\n        return null;\n    };\n    return _ReadVarVisitor;\n}(RecursiveAstVisitor));\nfunction _ReadVarVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _ReadVarVisitor.prototype.varNames;\n}\n/**\n * @param {?} stmts\n * @return {?}\n */\nexport function collectExternalReferences(stmts) {\n    var /** @type {?} */ visitor = new _FindExternalReferencesVisitor();\n    visitor.visitAllStatements(stmts, null);\n    return visitor.externalReferences;\n}\nvar _FindExternalReferencesVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(_FindExternalReferencesVisitor, _super);\n    function _FindExternalReferencesVisitor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.externalReferences = [];\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @param {?} context\n     * @return {?}\n     */\n    _FindExternalReferencesVisitor.prototype.visitExternalExpr = /**\n     * @param {?} e\n     * @param {?} context\n     * @return {?}\n     */\n    function (e, context) {\n        this.externalReferences.push(e.value);\n        return _super.prototype.visitExternalExpr.call(this, e, context);\n    };\n    return _FindExternalReferencesVisitor;\n}(RecursiveAstVisitor));\nfunction _FindExternalReferencesVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _FindExternalReferencesVisitor.prototype.externalReferences;\n}\n/**\n * @param {?} stmt\n * @param {?} sourceSpan\n * @return {?}\n */\nexport function applySourceSpanToStatementIfNeeded(stmt, sourceSpan) {\n    if (!sourceSpan) {\n        return stmt;\n    }\n    var /** @type {?} */ transformer = new _ApplySourceSpanTransformer(sourceSpan);\n    return stmt.visitStatement(transformer, null);\n}\n/**\n * @param {?} expr\n * @param {?} sourceSpan\n * @return {?}\n */\nexport function applySourceSpanToExpressionIfNeeded(expr, sourceSpan) {\n    if (!sourceSpan) {\n        return expr;\n    }\n    var /** @type {?} */ transformer = new _ApplySourceSpanTransformer(sourceSpan);\n    return expr.visitExpression(transformer, null);\n}\nvar _ApplySourceSpanTransformer = /** @class */ (function (_super) {\n    tslib_1.__extends(_ApplySourceSpanTransformer, _super);\n    function _ApplySourceSpanTransformer(sourceSpan) {\n        var _this = _super.call(this) || this;\n        _this.sourceSpan = sourceSpan;\n        return _this;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    _ApplySourceSpanTransformer.prototype._clone = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) {\n        var /** @type {?} */ clone = Object.create(obj.constructor.prototype);\n        for (var /** @type {?} */ prop in obj) {\n            clone[prop] = obj[prop];\n        }\n        return clone;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    _ApplySourceSpanTransformer.prototype.transformExpr = /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    function (expr, context) {\n        if (!expr.sourceSpan) {\n            expr = this._clone(expr);\n            expr.sourceSpan = this.sourceSpan;\n        }\n        return expr;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    _ApplySourceSpanTransformer.prototype.transformStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        if (!stmt.sourceSpan) {\n            stmt = this._clone(stmt);\n            stmt.sourceSpan = this.sourceSpan;\n        }\n        return stmt;\n    };\n    return _ApplySourceSpanTransformer;\n}(AstTransformer));\nfunction _ApplySourceSpanTransformer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _ApplySourceSpanTransformer.prototype.sourceSpan;\n}\n/**\n * @param {?} name\n * @param {?=} type\n * @param {?=} sourceSpan\n * @return {?}\n */\nexport function variable(name, type, sourceSpan) {\n    return new ReadVarExpr(name, type, sourceSpan);\n}\n/**\n * @param {?} id\n * @param {?=} typeParams\n * @param {?=} sourceSpan\n * @return {?}\n */\nexport function importExpr(id, typeParams, sourceSpan) {\n    if (typeParams === void 0) { typeParams = null; }\n    return new ExternalExpr(id, null, typeParams, sourceSpan);\n}\n/**\n * @param {?} id\n * @param {?=} typeParams\n * @param {?=} typeModifiers\n * @return {?}\n */\nexport function importType(id, typeParams, typeModifiers) {\n    if (typeParams === void 0) { typeParams = null; }\n    if (typeModifiers === void 0) { typeModifiers = null; }\n    return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;\n}\n/**\n * @param {?} expr\n * @param {?=} typeModifiers\n * @return {?}\n */\nexport function expressionType(expr, typeModifiers) {\n    if (typeModifiers === void 0) { typeModifiers = null; }\n    return new ExpressionType(expr, typeModifiers);\n}\n/**\n * @param {?} values\n * @param {?=} type\n * @param {?=} sourceSpan\n * @return {?}\n */\nexport function literalArr(values, type, sourceSpan) {\n    return new LiteralArrayExpr(values, type, sourceSpan);\n}\n/**\n * @param {?} values\n * @param {?=} type\n * @return {?}\n */\nexport function literalMap(values, type) {\n    if (type === void 0) { type = null; }\n    return new LiteralMapExpr(values.map(function (e) { return new LiteralMapEntry(e.key, e.value, e.quoted); }), type, null);\n}\n/**\n * @param {?} expr\n * @param {?=} sourceSpan\n * @return {?}\n */\nexport function not(expr, sourceSpan) {\n    return new NotExpr(expr, sourceSpan);\n}\n/**\n * @param {?} expr\n * @param {?=} sourceSpan\n * @return {?}\n */\nexport function assertNotNull(expr, sourceSpan) {\n    return new AssertNotNull(expr, sourceSpan);\n}\n/**\n * @param {?} params\n * @param {?} body\n * @param {?=} type\n * @param {?=} sourceSpan\n * @param {?=} name\n * @return {?}\n */\nexport function fn(params, body, type, sourceSpan, name) {\n    return new FunctionExpr(params, body, type, sourceSpan, name);\n}\n/**\n * @param {?} condition\n * @param {?} thenClause\n * @param {?=} elseClause\n * @return {?}\n */\nexport function ifStmt(condition, thenClause, elseClause) {\n    return new IfStmt(condition, thenClause, elseClause);\n}\n/**\n * @param {?} value\n * @param {?=} type\n * @param {?=} sourceSpan\n * @return {?}\n */\nexport function literal(value, type, sourceSpan) {\n    return new LiteralExpr(value, type, sourceSpan);\n}\n/**\n * @param {?} exp\n * @return {?}\n */\nexport function isNull(exp) {\n    return exp instanceof LiteralExpr && exp.value === null;\n}\n/** @enum {string} */\nvar JSDocTagName = {\n    Desc: 'desc',\n    Id: 'id',\n    Meaning: 'meaning',\n};\nexport { JSDocTagName };\n/**\n * @param {?} tag\n * @return {?}\n */\nfunction tagToString(tag) {\n    var /** @type {?} */ out = '';\n    if (tag.tagName) {\n        out += \" @\" + tag.tagName;\n    }\n    if (tag.text) {\n        if (tag.text.match(/\\/\\*|\\*\\//)) {\n            throw new Error('JSDoc text cannot contain \"/*\" and \"*/\"');\n        }\n        out += ' ' + tag.text.replace(/@/g, '\\\\@');\n    }\n    return out;\n}\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction serializeTags(tags) {\n    if (tags.length === 0)\n        return '';\n    var /** @type {?} */ out = '*\\n';\n    for (var _i = 0, tags_1 = tags; _i < tags_1.length; _i++) {\n        var tag = tags_1[_i];\n        out += ' *';\n        // If the tagToString is multi-line, insert \" * \" prefixes on subsequent lines.\n        out += tagToString(tag).replace(/\\n/g, '\\n * ');\n        out += '\\n';\n    }\n    out += ' ';\n    return out;\n}\n//# sourceMappingURL=output_ast.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { visitValue } from '../util';\nimport * as o from './output_ast';\nexport var /** @type {?} */ QUOTED_KEYS = '$quoted$';\n/**\n * @param {?} ctx\n * @param {?} value\n * @param {?=} type\n * @return {?}\n */\nexport function convertValueToOutputAst(ctx, value, type) {\n    if (type === void 0) { type = null; }\n    return visitValue(value, new _ValueOutputAstTransformer(ctx), type);\n}\nvar _ValueOutputAstTransformer = /** @class */ (function () {\n    function _ValueOutputAstTransformer(ctx) {\n        this.ctx = ctx;\n    }\n    /**\n     * @param {?} arr\n     * @param {?} type\n     * @return {?}\n     */\n    _ValueOutputAstTransformer.prototype.visitArray = /**\n     * @param {?} arr\n     * @param {?} type\n     * @return {?}\n     */\n    function (arr, type) {\n        var _this = this;\n        return o.literalArr(arr.map(function (value) { return visitValue(value, _this, null); }), type);\n    };\n    /**\n     * @param {?} map\n     * @param {?} type\n     * @return {?}\n     */\n    _ValueOutputAstTransformer.prototype.visitStringMap = /**\n     * @param {?} map\n     * @param {?} type\n     * @return {?}\n     */\n    function (map, type) {\n        var _this = this;\n        var /** @type {?} */ entries = [];\n        var /** @type {?} */ quotedSet = new Set(map && map[QUOTED_KEYS]);\n        Object.keys(map).forEach(function (key) {\n            entries.push(new o.LiteralMapEntry(key, visitValue(map[key], _this, null), quotedSet.has(key)));\n        });\n        return new o.LiteralMapExpr(entries, type);\n    };\n    /**\n     * @param {?} value\n     * @param {?} type\n     * @return {?}\n     */\n    _ValueOutputAstTransformer.prototype.visitPrimitive = /**\n     * @param {?} value\n     * @param {?} type\n     * @return {?}\n     */\n    function (value, type) { return o.literal(value, type); };\n    /**\n     * @param {?} value\n     * @param {?} type\n     * @return {?}\n     */\n    _ValueOutputAstTransformer.prototype.visitOther = /**\n     * @param {?} value\n     * @param {?} type\n     * @return {?}\n     */\n    function (value, type) {\n        if (value instanceof o.Expression) {\n            return value;\n        }\n        else {\n            return this.ctx.importExpr(value);\n        }\n    };\n    return _ValueOutputAstTransformer;\n}());\nfunction _ValueOutputAstTransformer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _ValueOutputAstTransformer.prototype.ctx;\n}\n//# sourceMappingURL=value_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { identifierName } from './compile_metadata';\nimport { Identifiers } from './identifiers';\nimport * as o from './output/output_ast';\nimport { convertValueToOutputAst } from './output/value_util';\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction mapEntry(key, value) {\n    return { key: key, value: value, quoted: false };\n}\nvar InjectableCompiler = /** @class */ (function () {\n    function InjectableCompiler(reflector, alwaysGenerateDef) {\n        this.reflector = reflector;\n        this.alwaysGenerateDef = alwaysGenerateDef;\n        this.tokenInjector = reflector.resolveExternalReference(Identifiers.Injector);\n    }\n    /**\n     * @param {?} deps\n     * @param {?} ctx\n     * @return {?}\n     */\n    InjectableCompiler.prototype.depsArray = /**\n     * @param {?} deps\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (deps, ctx) {\n        var _this = this;\n        return deps.map(function (dep) {\n            var /** @type {?} */ token = dep;\n            var /** @type {?} */ defaultValue = undefined;\n            var /** @type {?} */ args = [token];\n            var /** @type {?} */ flags = 0 /* Default */;\n            if (Array.isArray(dep)) {\n                for (var /** @type {?} */ i = 0; i < dep.length; i++) {\n                    var /** @type {?} */ v = dep[i];\n                    if (v) {\n                        if (v.ngMetadataName === 'Optional') {\n                            defaultValue = null;\n                        }\n                        else if (v.ngMetadataName === 'SkipSelf') {\n                            flags |= 1 /* SkipSelf */;\n                        }\n                        else if (v.ngMetadataName === 'Self') {\n                            flags |= 2 /* Self */;\n                        }\n                        else if (v.ngMetadataName === 'Inject') {\n                            token = v.token;\n                        }\n                        else {\n                            token = v;\n                        }\n                    }\n                }\n            }\n            var /** @type {?} */ tokenExpr;\n            if (typeof token === 'string') {\n                tokenExpr = o.literal(token);\n            }\n            else if (token === _this.tokenInjector) {\n                tokenExpr = o.importExpr(Identifiers.INJECTOR);\n            }\n            else {\n                tokenExpr = ctx.importExpr(token);\n            }\n            if (flags !== 0 /* Default */ || defaultValue !== undefined) {\n                args = [tokenExpr, o.literal(defaultValue), o.literal(flags)];\n            }\n            else {\n                args = [tokenExpr];\n            }\n            return o.importExpr(Identifiers.inject).callFn(args);\n        });\n    };\n    /**\n     * @param {?} injectable\n     * @param {?} ctx\n     * @return {?}\n     */\n    InjectableCompiler.prototype.factoryFor = /**\n     * @param {?} injectable\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (injectable, ctx) {\n        var /** @type {?} */ retValue;\n        if (injectable.useExisting) {\n            retValue = o.importExpr(Identifiers.inject).callFn([ctx.importExpr(injectable.useExisting)]);\n        }\n        else if (injectable.useFactory) {\n            var /** @type {?} */ deps = injectable.deps || [];\n            if (deps.length > 0) {\n                retValue = ctx.importExpr(injectable.useFactory).callFn(this.depsArray(deps, ctx));\n            }\n            else {\n                return ctx.importExpr(injectable.useFactory);\n            }\n        }\n        else if (injectable.useValue) {\n            retValue = convertValueToOutputAst(ctx, injectable.useValue);\n        }\n        else {\n            var /** @type {?} */ clazz = injectable.useClass || injectable.symbol;\n            var /** @type {?} */ depArgs = this.depsArray(this.reflector.parameters(clazz), ctx);\n            retValue = new o.InstantiateExpr(ctx.importExpr(clazz), depArgs);\n        }\n        return o.fn([], [new o.ReturnStatement(retValue)], undefined, undefined, injectable.symbol.name + '_Factory');\n    };\n    /**\n     * @param {?} injectable\n     * @param {?} ctx\n     * @return {?}\n     */\n    InjectableCompiler.prototype.injectableDef = /**\n     * @param {?} injectable\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (injectable, ctx) {\n        var /** @type {?} */ providedIn = o.NULL_EXPR;\n        if (injectable.providedIn !== undefined) {\n            if (injectable.providedIn === null) {\n                providedIn = o.NULL_EXPR;\n            }\n            else if (typeof injectable.providedIn === 'string') {\n                providedIn = o.literal(injectable.providedIn);\n            }\n            else {\n                providedIn = ctx.importExpr(injectable.providedIn);\n            }\n        }\n        var /** @type {?} */ def = [\n            mapEntry('factory', this.factoryFor(injectable, ctx)),\n            mapEntry('token', ctx.importExpr(injectable.type.reference)),\n            mapEntry('providedIn', providedIn),\n        ];\n        return o.importExpr(Identifiers.defineInjectable).callFn([o.literalMap(def)]);\n    };\n    /**\n     * @param {?} injectable\n     * @param {?} ctx\n     * @return {?}\n     */\n    InjectableCompiler.prototype.compile = /**\n     * @param {?} injectable\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (injectable, ctx) {\n        if (this.alwaysGenerateDef || injectable.providedIn !== undefined) {\n            var /** @type {?} */ className = /** @type {?} */ ((identifierName(injectable.type)));\n            var /** @type {?} */ clazz = new o.ClassStmt(className, null, [\n                new o.ClassField('ngInjectableDef', o.INFERRED_TYPE, [o.StmtModifier.Static], this.injectableDef(injectable, ctx)),\n            ], [], new o.ClassMethod(null, [], []), []);\n            ctx.statements.push(clazz);\n        }\n    };\n    return InjectableCompiler;\n}());\nexport { InjectableCompiler };\nfunction InjectableCompiler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InjectableCompiler.prototype.tokenInjector;\n    /** @type {?} */\n    InjectableCompiler.prototype.reflector;\n    /** @type {?} */\n    InjectableCompiler.prototype.alwaysGenerateDef;\n}\n//# sourceMappingURL=injectable_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ STRIP_SRC_FILE_SUFFIXES = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\nvar /** @type {?} */ GENERATED_FILE = /\\.ngfactory\\.|\\.ngsummary\\./;\nvar /** @type {?} */ JIT_SUMMARY_FILE = /\\.ngsummary\\./;\nvar /** @type {?} */ JIT_SUMMARY_NAME = /NgSummary$/;\n/**\n * @param {?} filePath\n * @param {?=} forceSourceFile\n * @return {?}\n */\nexport function ngfactoryFilePath(filePath, forceSourceFile) {\n    if (forceSourceFile === void 0) { forceSourceFile = false; }\n    var /** @type {?} */ urlWithSuffix = splitTypescriptSuffix(filePath, forceSourceFile);\n    return urlWithSuffix[0] + \".ngfactory\" + normalizeGenFileSuffix(urlWithSuffix[1]);\n}\n/**\n * @param {?} filePath\n * @return {?}\n */\nexport function stripGeneratedFileSuffix(filePath) {\n    return filePath.replace(GENERATED_FILE, '.');\n}\n/**\n * @param {?} filePath\n * @return {?}\n */\nexport function isGeneratedFile(filePath) {\n    return GENERATED_FILE.test(filePath);\n}\n/**\n * @param {?} path\n * @param {?=} forceSourceFile\n * @return {?}\n */\nexport function splitTypescriptSuffix(path, forceSourceFile) {\n    if (forceSourceFile === void 0) { forceSourceFile = false; }\n    if (path.endsWith('.d.ts')) {\n        return [path.slice(0, -5), forceSourceFile ? '.ts' : '.d.ts'];\n    }\n    var /** @type {?} */ lastDot = path.lastIndexOf('.');\n    if (lastDot !== -1) {\n        return [path.substring(0, lastDot), path.substring(lastDot)];\n    }\n    return [path, ''];\n}\n/**\n * @param {?} srcFileSuffix\n * @return {?}\n */\nexport function normalizeGenFileSuffix(srcFileSuffix) {\n    return srcFileSuffix === '.tsx' ? '.ts' : srcFileSuffix;\n}\n/**\n * @param {?} fileName\n * @return {?}\n */\nexport function summaryFileName(fileName) {\n    var /** @type {?} */ fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');\n    return fileNameWithoutSuffix + \".ngsummary.json\";\n}\n/**\n * @param {?} fileName\n * @param {?=} forceSourceFile\n * @return {?}\n */\nexport function summaryForJitFileName(fileName, forceSourceFile) {\n    if (forceSourceFile === void 0) { forceSourceFile = false; }\n    var /** @type {?} */ urlWithSuffix = splitTypescriptSuffix(stripGeneratedFileSuffix(fileName), forceSourceFile);\n    return urlWithSuffix[0] + \".ngsummary\" + urlWithSuffix[1];\n}\n/**\n * @param {?} filePath\n * @return {?}\n */\nexport function stripSummaryForJitFileSuffix(filePath) {\n    return filePath.replace(JIT_SUMMARY_FILE, '.');\n}\n/**\n * @param {?} symbolName\n * @return {?}\n */\nexport function summaryForJitName(symbolName) {\n    return symbolName + \"NgSummary\";\n}\n/**\n * @param {?} symbolName\n * @return {?}\n */\nexport function stripSummaryForJitNameSuffix(symbolName) {\n    return symbolName.replace(JIT_SUMMARY_NAME, '');\n}\nvar /** @type {?} */ LOWERED_SYMBOL = /\\u0275\\d+/;\n/**\n * @param {?} name\n * @return {?}\n */\nexport function isLoweredSymbol(name) {\n    return LOWERED_SYMBOL.test(name);\n}\n/**\n * @param {?} id\n * @return {?}\n */\nexport function createLoweredSymbol(id) {\n    return \"\\u0275\" + id;\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar LifecycleHooks = {\n    OnInit: 0,\n    OnDestroy: 1,\n    DoCheck: 2,\n    OnChanges: 3,\n    AfterContentInit: 4,\n    AfterContentChecked: 5,\n    AfterViewInit: 6,\n    AfterViewChecked: 7,\n};\nexport { LifecycleHooks };\nLifecycleHooks[LifecycleHooks.OnInit] = \"OnInit\";\nLifecycleHooks[LifecycleHooks.OnDestroy] = \"OnDestroy\";\nLifecycleHooks[LifecycleHooks.DoCheck] = \"DoCheck\";\nLifecycleHooks[LifecycleHooks.OnChanges] = \"OnChanges\";\nLifecycleHooks[LifecycleHooks.AfterContentInit] = \"AfterContentInit\";\nLifecycleHooks[LifecycleHooks.AfterContentChecked] = \"AfterContentChecked\";\nLifecycleHooks[LifecycleHooks.AfterViewInit] = \"AfterViewInit\";\nLifecycleHooks[LifecycleHooks.AfterViewChecked] = \"AfterViewChecked\";\nexport var /** @type {?} */ LIFECYCLE_HOOKS_VALUES = [\n    LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,\n    LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,\n    LifecycleHooks.AfterViewChecked\n];\n/**\n * @param {?} reflector\n * @param {?} hook\n * @param {?} token\n * @return {?}\n */\nexport function hasLifecycleHook(reflector, hook, token) {\n    return reflector.hasLifecycleHook(token, getHookName(hook));\n}\n/**\n * @param {?} reflector\n * @param {?} token\n * @return {?}\n */\nexport function getAllLifecycleHooks(reflector, token) {\n    return LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return hasLifecycleHook(reflector, hook, token); });\n}\n/**\n * @param {?} hook\n * @return {?}\n */\nfunction getHookName(hook) {\n    switch (hook) {\n        case LifecycleHooks.OnInit:\n            return 'ngOnInit';\n        case LifecycleHooks.OnDestroy:\n            return 'ngOnDestroy';\n        case LifecycleHooks.DoCheck:\n            return 'ngDoCheck';\n        case LifecycleHooks.OnChanges:\n            return 'ngOnChanges';\n        case LifecycleHooks.AfterContentInit:\n            return 'ngAfterContentInit';\n        case LifecycleHooks.AfterContentChecked:\n            return 'ngAfterContentChecked';\n        case LifecycleHooks.AfterViewInit:\n            return 'ngAfterViewInit';\n        case LifecycleHooks.AfterViewChecked:\n            return 'ngAfterViewChecked';\n    }\n}\n//# sourceMappingURL=lifecycle_reflector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getHtmlTagDefinition } from './ml_parser/html_tags';\nvar /** @type {?} */ _SELECTOR_REGEXP = new RegExp('(\\\\:not\\\\()|' + //\":not(\"\n    '([-\\\\w]+)|' + // \"tag\"\n    '(?:\\\\.([-\\\\w]+))|' + // \".class\"\n    '(?:\\\\[([-.\\\\w*]+)(?:=([\\\"\\']?)([^\\\\]\\\"\\']*)\\\\5)?\\\\])|' + // \"[name]\", \"[name=value]\",\n    '(\\\\))|' + // \")\"\n    '(\\\\s*,\\\\s*)', // \",\"\n'g');\n/**\n * A css selector contains an element name,\n * css classes and attribute/value pairs with the purpose\n * of selecting subsets out of them.\n */\nvar /**\n * A css selector contains an element name,\n * css classes and attribute/value pairs with the purpose\n * of selecting subsets out of them.\n */\nCssSelector = /** @class */ (function () {\n    function CssSelector() {\n        this.element = null;\n        this.classNames = [];\n        /**\n         * The selectors are encoded in pairs where:\n         * - even locations are attribute names\n         * - odd locations are attribute values.\n         *\n         * Example:\n         * Selector: `[key1=value1][key2]` would parse to:\n         * ```\n         * ['key1', 'value1', 'key2', '']\n         * ```\n         */\n        this.attrs = [];\n        this.notSelectors = [];\n    }\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    CssSelector.parse = /**\n     * @param {?} selector\n     * @return {?}\n     */\n    function (selector) {\n        var /** @type {?} */ results = [];\n        var /** @type {?} */ _addResult = function (res, cssSel) {\n            if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&\n                cssSel.attrs.length == 0) {\n                cssSel.element = '*';\n            }\n            res.push(cssSel);\n        };\n        var /** @type {?} */ cssSelector = new CssSelector();\n        var /** @type {?} */ match;\n        var /** @type {?} */ current = cssSelector;\n        var /** @type {?} */ inNot = false;\n        _SELECTOR_REGEXP.lastIndex = 0;\n        while (match = _SELECTOR_REGEXP.exec(selector)) {\n            if (match[1]) {\n                if (inNot) {\n                    throw new Error('Nesting :not is not allowed in a selector');\n                }\n                inNot = true;\n                current = new CssSelector();\n                cssSelector.notSelectors.push(current);\n            }\n            if (match[2]) {\n                current.setElement(match[2]);\n            }\n            if (match[3]) {\n                current.addClassName(match[3]);\n            }\n            if (match[4]) {\n                current.addAttribute(match[4], match[6]);\n            }\n            if (match[7]) {\n                inNot = false;\n                current = cssSelector;\n            }\n            if (match[8]) {\n                if (inNot) {\n                    throw new Error('Multiple selectors in :not are not supported');\n                }\n                _addResult(results, cssSelector);\n                cssSelector = current = new CssSelector();\n            }\n        }\n        _addResult(results, cssSelector);\n        return results;\n    };\n    /**\n     * @return {?}\n     */\n    CssSelector.prototype.isElementSelector = /**\n     * @return {?}\n     */\n    function () {\n        return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&\n            this.notSelectors.length === 0;\n    };\n    /**\n     * @return {?}\n     */\n    CssSelector.prototype.hasElementSelector = /**\n     * @return {?}\n     */\n    function () { return !!this.element; };\n    /**\n     * @param {?=} element\n     * @return {?}\n     */\n    CssSelector.prototype.setElement = /**\n     * @param {?=} element\n     * @return {?}\n     */\n    function (element) {\n        if (element === void 0) { element = null; }\n        this.element = element;\n    };\n    /** Gets a template string for an element that matches the selector. */\n    /**\n     * Gets a template string for an element that matches the selector.\n     * @return {?}\n     */\n    CssSelector.prototype.getMatchingElementTemplate = /**\n     * Gets a template string for an element that matches the selector.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ tagName = this.element || 'div';\n        var /** @type {?} */ classAttr = this.classNames.length > 0 ? \" class=\\\"\" + this.classNames.join(' ') + \"\\\"\" : '';\n        var /** @type {?} */ attrs = '';\n        for (var /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {\n            var /** @type {?} */ attrName = this.attrs[i];\n            var /** @type {?} */ attrValue = this.attrs[i + 1] !== '' ? \"=\\\"\" + this.attrs[i + 1] + \"\\\"\" : '';\n            attrs += \" \" + attrName + attrValue;\n        }\n        return getHtmlTagDefinition(tagName).isVoid ? \"<\" + tagName + classAttr + attrs + \"/>\" :\n            \"<\" + tagName + classAttr + attrs + \"></\" + tagName + \">\";\n    };\n    /**\n     * @return {?}\n     */\n    CssSelector.prototype.getAttrs = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ result = [];\n        if (this.classNames.length > 0) {\n            result.push('class', this.classNames.join(' '));\n        }\n        return result.concat(this.attrs);\n    };\n    /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    CssSelector.prototype.addAttribute = /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    function (name, value) {\n        if (value === void 0) { value = ''; }\n        this.attrs.push(name, value && value.toLowerCase() || '');\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    CssSelector.prototype.addClassName = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { this.classNames.push(name.toLowerCase()); };\n    /**\n     * @return {?}\n     */\n    CssSelector.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ res = this.element || '';\n        if (this.classNames) {\n            this.classNames.forEach(function (klass) { return res += \".\" + klass; });\n        }\n        if (this.attrs) {\n            for (var /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {\n                var /** @type {?} */ name_1 = this.attrs[i];\n                var /** @type {?} */ value = this.attrs[i + 1];\n                res += \"[\" + name_1 + (value ? '=' + value : '') + \"]\";\n            }\n        }\n        this.notSelectors.forEach(function (notSelector) { return res += \":not(\" + notSelector + \")\"; });\n        return res;\n    };\n    return CssSelector;\n}());\n/**\n * A css selector contains an element name,\n * css classes and attribute/value pairs with the purpose\n * of selecting subsets out of them.\n */\nexport { CssSelector };\nfunction CssSelector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CssSelector.prototype.element;\n    /** @type {?} */\n    CssSelector.prototype.classNames;\n    /**\n     * The selectors are encoded in pairs where:\n     * - even locations are attribute names\n     * - odd locations are attribute values.\n     *\n     * Example:\n     * Selector: `[key1=value1][key2]` would parse to:\n     * ```\n     * ['key1', 'value1', 'key2', '']\n     * ```\n     * @type {?}\n     */\n    CssSelector.prototype.attrs;\n    /** @type {?} */\n    CssSelector.prototype.notSelectors;\n}\n/**\n * Reads a list of CssSelectors and allows to calculate which ones\n * are contained in a given CssSelector.\n */\nvar /**\n * Reads a list of CssSelectors and allows to calculate which ones\n * are contained in a given CssSelector.\n */\nSelectorMatcher = /** @class */ (function () {\n    function SelectorMatcher() {\n        this._elementMap = new Map();\n        this._elementPartialMap = new Map();\n        this._classMap = new Map();\n        this._classPartialMap = new Map();\n        this._attrValueMap = new Map();\n        this._attrValuePartialMap = new Map();\n        this._listContexts = [];\n    }\n    /**\n     * @param {?} notSelectors\n     * @return {?}\n     */\n    SelectorMatcher.createNotMatcher = /**\n     * @param {?} notSelectors\n     * @return {?}\n     */\n    function (notSelectors) {\n        var /** @type {?} */ notMatcher = new SelectorMatcher();\n        notMatcher.addSelectables(notSelectors, null);\n        return notMatcher;\n    };\n    /**\n     * @param {?} cssSelectors\n     * @param {?=} callbackCtxt\n     * @return {?}\n     */\n    SelectorMatcher.prototype.addSelectables = /**\n     * @param {?} cssSelectors\n     * @param {?=} callbackCtxt\n     * @return {?}\n     */\n    function (cssSelectors, callbackCtxt) {\n        var /** @type {?} */ listContext = /** @type {?} */ ((null));\n        if (cssSelectors.length > 1) {\n            listContext = new SelectorListContext(cssSelectors);\n            this._listContexts.push(listContext);\n        }\n        for (var /** @type {?} */ i = 0; i < cssSelectors.length; i++) {\n            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);\n        }\n    };\n    /**\n     * Add an object that can be found later on by calling `match`.\n     * @param {?} cssSelector A css selector\n     * @param {?} callbackCtxt An opaque object that will be given to the callback of the `match` function\n     * @param {?} listContext\n     * @return {?}\n     */\n    SelectorMatcher.prototype._addSelectable = /**\n     * Add an object that can be found later on by calling `match`.\n     * @param {?} cssSelector A css selector\n     * @param {?} callbackCtxt An opaque object that will be given to the callback of the `match` function\n     * @param {?} listContext\n     * @return {?}\n     */\n    function (cssSelector, callbackCtxt, listContext) {\n        var /** @type {?} */ matcher = this;\n        var /** @type {?} */ element = cssSelector.element;\n        var /** @type {?} */ classNames = cssSelector.classNames;\n        var /** @type {?} */ attrs = cssSelector.attrs;\n        var /** @type {?} */ selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);\n        if (element) {\n            var /** @type {?} */ isTerminal = attrs.length === 0 && classNames.length === 0;\n            if (isTerminal) {\n                this._addTerminal(matcher._elementMap, element, selectable);\n            }\n            else {\n                matcher = this._addPartial(matcher._elementPartialMap, element);\n            }\n        }\n        if (classNames) {\n            for (var /** @type {?} */ i = 0; i < classNames.length; i++) {\n                var /** @type {?} */ isTerminal = attrs.length === 0 && i === classNames.length - 1;\n                var /** @type {?} */ className = classNames[i];\n                if (isTerminal) {\n                    this._addTerminal(matcher._classMap, className, selectable);\n                }\n                else {\n                    matcher = this._addPartial(matcher._classPartialMap, className);\n                }\n            }\n        }\n        if (attrs) {\n            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n                var /** @type {?} */ isTerminal = i === attrs.length - 2;\n                var /** @type {?} */ name_2 = attrs[i];\n                var /** @type {?} */ value = attrs[i + 1];\n                if (isTerminal) {\n                    var /** @type {?} */ terminalMap = matcher._attrValueMap;\n                    var /** @type {?} */ terminalValuesMap = terminalMap.get(name_2);\n                    if (!terminalValuesMap) {\n                        terminalValuesMap = new Map();\n                        terminalMap.set(name_2, terminalValuesMap);\n                    }\n                    this._addTerminal(terminalValuesMap, value, selectable);\n                }\n                else {\n                    var /** @type {?} */ partialMap = matcher._attrValuePartialMap;\n                    var /** @type {?} */ partialValuesMap = partialMap.get(name_2);\n                    if (!partialValuesMap) {\n                        partialValuesMap = new Map();\n                        partialMap.set(name_2, partialValuesMap);\n                    }\n                    matcher = this._addPartial(partialValuesMap, value);\n                }\n            }\n        }\n    };\n    /**\n     * @param {?} map\n     * @param {?} name\n     * @param {?} selectable\n     * @return {?}\n     */\n    SelectorMatcher.prototype._addTerminal = /**\n     * @param {?} map\n     * @param {?} name\n     * @param {?} selectable\n     * @return {?}\n     */\n    function (map, name, selectable) {\n        var /** @type {?} */ terminalList = map.get(name);\n        if (!terminalList) {\n            terminalList = [];\n            map.set(name, terminalList);\n        }\n        terminalList.push(selectable);\n    };\n    /**\n     * @param {?} map\n     * @param {?} name\n     * @return {?}\n     */\n    SelectorMatcher.prototype._addPartial = /**\n     * @param {?} map\n     * @param {?} name\n     * @return {?}\n     */\n    function (map, name) {\n        var /** @type {?} */ matcher = map.get(name);\n        if (!matcher) {\n            matcher = new SelectorMatcher();\n            map.set(name, matcher);\n        }\n        return matcher;\n    };\n    /**\n     * Find the objects that have been added via `addSelectable`\n     * whose css selector is contained in the given css selector.\n     * @param cssSelector A css selector\n     * @param matchedCallback This callback will be called with the object handed into `addSelectable`\n     * @return boolean true if a match was found\n    */\n    /**\n     * Find the objects that have been added via `addSelectable`\n     * whose css selector is contained in the given css selector.\n     * @param {?} cssSelector A css selector\n     * @param {?} matchedCallback This callback will be called with the object handed into `addSelectable`\n     * @return {?} boolean true if a match was found\n     */\n    SelectorMatcher.prototype.match = /**\n     * Find the objects that have been added via `addSelectable`\n     * whose css selector is contained in the given css selector.\n     * @param {?} cssSelector A css selector\n     * @param {?} matchedCallback This callback will be called with the object handed into `addSelectable`\n     * @return {?} boolean true if a match was found\n     */\n    function (cssSelector, matchedCallback) {\n        var /** @type {?} */ result = false;\n        var /** @type {?} */ element = /** @type {?} */ ((cssSelector.element));\n        var /** @type {?} */ classNames = cssSelector.classNames;\n        var /** @type {?} */ attrs = cssSelector.attrs;\n        for (var /** @type {?} */ i = 0; i < this._listContexts.length; i++) {\n            this._listContexts[i].alreadyMatched = false;\n        }\n        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;\n        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||\n            result;\n        if (classNames) {\n            for (var /** @type {?} */ i = 0; i < classNames.length; i++) {\n                var /** @type {?} */ className = classNames[i];\n                result =\n                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;\n                result =\n                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||\n                        result;\n            }\n        }\n        if (attrs) {\n            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n                var /** @type {?} */ name_3 = attrs[i];\n                var /** @type {?} */ value = attrs[i + 1];\n                var /** @type {?} */ terminalValuesMap = /** @type {?} */ ((this._attrValueMap.get(name_3)));\n                if (value) {\n                    result =\n                        this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;\n                }\n                result =\n                    this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;\n                var /** @type {?} */ partialValuesMap = /** @type {?} */ ((this._attrValuePartialMap.get(name_3)));\n                if (value) {\n                    result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;\n                }\n                result =\n                    this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;\n            }\n        }\n        return result;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} map\n     * @param {?} name\n     * @param {?} cssSelector\n     * @param {?} matchedCallback\n     * @return {?}\n     */\n    SelectorMatcher.prototype._matchTerminal = /**\n     * \\@internal\n     * @param {?} map\n     * @param {?} name\n     * @param {?} cssSelector\n     * @param {?} matchedCallback\n     * @return {?}\n     */\n    function (map, name, cssSelector, matchedCallback) {\n        if (!map || typeof name !== 'string') {\n            return false;\n        }\n        var /** @type {?} */ selectables = map.get(name) || [];\n        var /** @type {?} */ starSelectables = /** @type {?} */ ((map.get('*')));\n        if (starSelectables) {\n            selectables = selectables.concat(starSelectables);\n        }\n        if (selectables.length === 0) {\n            return false;\n        }\n        var /** @type {?} */ selectable;\n        var /** @type {?} */ result = false;\n        for (var /** @type {?} */ i = 0; i < selectables.length; i++) {\n            selectable = selectables[i];\n            result = selectable.finalize(cssSelector, matchedCallback) || result;\n        }\n        return result;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} map\n     * @param {?} name\n     * @param {?} cssSelector\n     * @param {?} matchedCallback\n     * @return {?}\n     */\n    SelectorMatcher.prototype._matchPartial = /**\n     * \\@internal\n     * @param {?} map\n     * @param {?} name\n     * @param {?} cssSelector\n     * @param {?} matchedCallback\n     * @return {?}\n     */\n    function (map, name, cssSelector, matchedCallback) {\n        if (!map || typeof name !== 'string') {\n            return false;\n        }\n        var /** @type {?} */ nestedSelector = map.get(name);\n        if (!nestedSelector) {\n            return false;\n        }\n        // TODO(perf): get rid of recursion and measure again\n        // TODO(perf): don't pass the whole selector into the recursion,\n        // but only the not processed parts\n        return nestedSelector.match(cssSelector, matchedCallback);\n    };\n    return SelectorMatcher;\n}());\n/**\n * Reads a list of CssSelectors and allows to calculate which ones\n * are contained in a given CssSelector.\n */\nexport { SelectorMatcher };\nfunction SelectorMatcher_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SelectorMatcher.prototype._elementMap;\n    /** @type {?} */\n    SelectorMatcher.prototype._elementPartialMap;\n    /** @type {?} */\n    SelectorMatcher.prototype._classMap;\n    /** @type {?} */\n    SelectorMatcher.prototype._classPartialMap;\n    /** @type {?} */\n    SelectorMatcher.prototype._attrValueMap;\n    /** @type {?} */\n    SelectorMatcher.prototype._attrValuePartialMap;\n    /** @type {?} */\n    SelectorMatcher.prototype._listContexts;\n}\nvar SelectorListContext = /** @class */ (function () {\n    function SelectorListContext(selectors) {\n        this.selectors = selectors;\n        this.alreadyMatched = false;\n    }\n    return SelectorListContext;\n}());\nexport { SelectorListContext };\nfunction SelectorListContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SelectorListContext.prototype.alreadyMatched;\n    /** @type {?} */\n    SelectorListContext.prototype.selectors;\n}\nvar SelectorContext = /** @class */ (function () {\n    function SelectorContext(selector, cbContext, listContext) {\n        this.selector = selector;\n        this.cbContext = cbContext;\n        this.listContext = listContext;\n        this.notSelectors = selector.notSelectors;\n    }\n    /**\n     * @param {?} cssSelector\n     * @param {?} callback\n     * @return {?}\n     */\n    SelectorContext.prototype.finalize = /**\n     * @param {?} cssSelector\n     * @param {?} callback\n     * @return {?}\n     */\n    function (cssSelector, callback) {\n        var /** @type {?} */ result = true;\n        if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {\n            var /** @type {?} */ notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);\n            result = !notMatcher.match(cssSelector, null);\n        }\n        if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {\n            if (this.listContext) {\n                this.listContext.alreadyMatched = true;\n            }\n            callback(this.selector, this.cbContext);\n        }\n        return result;\n    };\n    return SelectorContext;\n}());\nexport { SelectorContext };\nfunction SelectorContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SelectorContext.prototype.notSelectors;\n    /** @type {?} */\n    SelectorContext.prototype.selector;\n    /** @type {?} */\n    SelectorContext.prototype.cbContext;\n    /** @type {?} */\n    SelectorContext.prototype.listContext;\n}\n//# sourceMappingURL=selector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { StaticSymbol } from './aot/static_symbol';\nimport { ngfactoryFilePath } from './aot/util';\nimport { assertArrayOfStrings, assertInterpolationSymbols } from './assertions';\nimport * as cpl from './compile_metadata';\nimport { ChangeDetectionStrategy, Type, ViewEncapsulation, createAttribute, createComponent, createHost, createInject, createInjectable, createInjectionToken, createNgModule, createOptional, createSelf, createSkipSelf } from './core';\nimport { findLast } from './directive_resolver';\nimport { Identifiers } from './identifiers';\nimport { getAllLifecycleHooks } from './lifecycle_reflector';\nimport { CssSelector } from './selector';\nimport { SyncAsync, ValueTransformer, isPromise, noUndefined, resolveForwardRef, stringify, syntaxError, visitValue } from './util';\nexport var /** @type {?} */ ERROR_COMPONENT_TYPE = 'ngComponentType';\nvar CompileMetadataResolver = /** @class */ (function () {\n    function CompileMetadataResolver(_config, _htmlParser, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _console, _staticSymbolCache, _reflector, _errorCollector) {\n        this._config = _config;\n        this._htmlParser = _htmlParser;\n        this._ngModuleResolver = _ngModuleResolver;\n        this._directiveResolver = _directiveResolver;\n        this._pipeResolver = _pipeResolver;\n        this._summaryResolver = _summaryResolver;\n        this._schemaRegistry = _schemaRegistry;\n        this._directiveNormalizer = _directiveNormalizer;\n        this._console = _console;\n        this._staticSymbolCache = _staticSymbolCache;\n        this._reflector = _reflector;\n        this._errorCollector = _errorCollector;\n        this._nonNormalizedDirectiveCache = new Map();\n        this._directiveCache = new Map();\n        this._summaryCache = new Map();\n        this._pipeCache = new Map();\n        this._ngModuleCache = new Map();\n        this._ngModuleOfTypes = new Map();\n        this._shallowModuleCache = new Map();\n    }\n    /**\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getReflector = /**\n     * @return {?}\n     */\n    function () { return this._reflector; };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.clearCacheFor = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ dirMeta = this._directiveCache.get(type);\n        this._directiveCache.delete(type);\n        this._nonNormalizedDirectiveCache.delete(type);\n        this._summaryCache.delete(type);\n        this._pipeCache.delete(type);\n        this._ngModuleOfTypes.delete(type);\n        // Clear all of the NgModule as they contain transitive information!\n        this._ngModuleCache.clear();\n        if (dirMeta) {\n            this._directiveNormalizer.clearCacheFor(dirMeta);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.clearCache = /**\n     * @return {?}\n     */\n    function () {\n        this._directiveCache.clear();\n        this._nonNormalizedDirectiveCache.clear();\n        this._summaryCache.clear();\n        this._pipeCache.clear();\n        this._ngModuleCache.clear();\n        this._ngModuleOfTypes.clear();\n        this._directiveNormalizer.clearCache();\n    };\n    /**\n     * @param {?} baseType\n     * @param {?} name\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._createProxyClass = /**\n     * @param {?} baseType\n     * @param {?} name\n     * @return {?}\n     */\n    function (baseType, name) {\n        var /** @type {?} */ delegate = null;\n        var /** @type {?} */ proxyClass = /** @type {?} */ (function () {\n            if (!delegate) {\n                throw new Error(\"Illegal state: Class \" + name + \" for type \" + stringify(baseType) + \" is not compiled yet!\");\n            }\n            return delegate.apply(this, arguments);\n        });\n        proxyClass.setDelegate = function (d) {\n            delegate = d;\n            (/** @type {?} */ (proxyClass)).prototype = d.prototype;\n        };\n        // Make stringify work correctly\n        (/** @type {?} */ (proxyClass)).overriddenName = name;\n        return proxyClass;\n    };\n    /**\n     * @param {?} dirType\n     * @param {?} name\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getGeneratedClass = /**\n     * @param {?} dirType\n     * @param {?} name\n     * @return {?}\n     */\n    function (dirType, name) {\n        if (dirType instanceof StaticSymbol) {\n            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);\n        }\n        else {\n            return this._createProxyClass(dirType, name);\n        }\n    };\n    /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getComponentViewClass = /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    function (dirType) {\n        return this.getGeneratedClass(dirType, cpl.viewClassName(dirType, 0));\n    };\n    /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getHostComponentViewClass = /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    function (dirType) {\n        return this.getGeneratedClass(dirType, cpl.hostViewClassName(dirType));\n    };\n    /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getHostComponentType = /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    function (dirType) {\n        var /** @type {?} */ name = cpl.identifierName({ reference: dirType }) + \"_Host\";\n        if (dirType instanceof StaticSymbol) {\n            return this._staticSymbolCache.get(dirType.filePath, name);\n        }\n        else {\n            var /** @type {?} */ HostClass = /** @type {?} */ (function HostClass() { });\n            HostClass.overriddenName = name;\n            return HostClass;\n        }\n    };\n    /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getRendererType = /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    function (dirType) {\n        if (dirType instanceof StaticSymbol) {\n            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), cpl.rendererTypeName(dirType));\n        }\n        else {\n            // returning an object as proxy,\n            // that we fill later during runtime compilation.\n            return /** @type {?} */ ({});\n        }\n    };\n    /**\n     * @param {?} selector\n     * @param {?} dirType\n     * @param {?} inputs\n     * @param {?} outputs\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getComponentFactory = /**\n     * @param {?} selector\n     * @param {?} dirType\n     * @param {?} inputs\n     * @param {?} outputs\n     * @return {?}\n     */\n    function (selector, dirType, inputs, outputs) {\n        if (dirType instanceof StaticSymbol) {\n            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), cpl.componentFactoryName(dirType));\n        }\n        else {\n            var /** @type {?} */ hostView = this.getHostComponentViewClass(dirType);\n            // Note: ngContentSelectors will be filled later once the template is\n            // loaded.\n            var /** @type {?} */ createComponentFactory = this._reflector.resolveExternalReference(Identifiers.createComponentFactory);\n            return createComponentFactory(selector, dirType, /** @type {?} */ (hostView), inputs, outputs, []);\n        }\n    };\n    /**\n     * @param {?} factory\n     * @param {?} ngContentSelectors\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.initComponentFactory = /**\n     * @param {?} factory\n     * @param {?} ngContentSelectors\n     * @return {?}\n     */\n    function (factory, ngContentSelectors) {\n        if (!(factory instanceof StaticSymbol)) {\n            (_a = (/** @type {?} */ (factory)).ngContentSelectors).push.apply(_a, ngContentSelectors);\n        }\n        var _a;\n    };\n    /**\n     * @param {?} type\n     * @param {?} kind\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._loadSummary = /**\n     * @param {?} type\n     * @param {?} kind\n     * @return {?}\n     */\n    function (type, kind) {\n        var /** @type {?} */ typeSummary = this._summaryCache.get(type);\n        if (!typeSummary) {\n            var /** @type {?} */ summary = this._summaryResolver.resolveSummary(type);\n            typeSummary = summary ? summary.type : null;\n            this._summaryCache.set(type, typeSummary || null);\n        }\n        return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;\n    };\n    /**\n     * @param {?} compMeta\n     * @param {?=} hostViewType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getHostComponentMetadata = /**\n     * @param {?} compMeta\n     * @param {?=} hostViewType\n     * @return {?}\n     */\n    function (compMeta, hostViewType) {\n        var /** @type {?} */ hostType = this.getHostComponentType(compMeta.type.reference);\n        if (!hostViewType) {\n            hostViewType = this.getHostComponentViewClass(hostType);\n        }\n        // Note: ! is ok here as this method should only be called with normalized directive\n        // metadata, which always fills in the selector.\n        var /** @type {?} */ template = CssSelector.parse(/** @type {?} */ ((compMeta.selector)))[0].getMatchingElementTemplate();\n        var /** @type {?} */ templateUrl = '';\n        var /** @type {?} */ htmlAst = this._htmlParser.parse(template, templateUrl);\n        return cpl.CompileDirectiveMetadata.create({\n            isHost: true,\n            type: { reference: hostType, diDeps: [], lifecycleHooks: [] },\n            template: new cpl.CompileTemplateMetadata({\n                encapsulation: ViewEncapsulation.None,\n                template: template,\n                templateUrl: templateUrl,\n                htmlAst: htmlAst,\n                styles: [],\n                styleUrls: [],\n                ngContentSelectors: [],\n                animations: [],\n                isInline: true,\n                externalStylesheets: [],\n                interpolation: null,\n                preserveWhitespaces: false,\n            }),\n            exportAs: null,\n            changeDetection: ChangeDetectionStrategy.Default,\n            inputs: [],\n            outputs: [],\n            host: {},\n            isComponent: true,\n            selector: '*',\n            providers: [],\n            viewProviders: [],\n            queries: [],\n            guards: {},\n            viewQueries: [],\n            componentViewType: hostViewType,\n            rendererType: /** @type {?} */ ({ id: '__Host__', encapsulation: ViewEncapsulation.None, styles: [], data: {} }),\n            entryComponents: [],\n            componentFactory: null\n        });\n    };\n    /**\n     * @param {?} ngModuleType\n     * @param {?} directiveType\n     * @param {?} isSync\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.loadDirectiveMetadata = /**\n     * @param {?} ngModuleType\n     * @param {?} directiveType\n     * @param {?} isSync\n     * @return {?}\n     */\n    function (ngModuleType, directiveType, isSync) {\n        var _this = this;\n        if (this._directiveCache.has(directiveType)) {\n            return null;\n        }\n        directiveType = resolveForwardRef(directiveType);\n        var _a = /** @type {?} */ ((this.getNonNormalizedDirectiveMetadata(directiveType))), annotation = _a.annotation, metadata = _a.metadata;\n        var /** @type {?} */ createDirectiveMetadata = function (templateMetadata) {\n            var /** @type {?} */ normalizedDirMeta = new cpl.CompileDirectiveMetadata({\n                isHost: false,\n                type: metadata.type,\n                isComponent: metadata.isComponent,\n                selector: metadata.selector,\n                exportAs: metadata.exportAs,\n                changeDetection: metadata.changeDetection,\n                inputs: metadata.inputs,\n                outputs: metadata.outputs,\n                hostListeners: metadata.hostListeners,\n                hostProperties: metadata.hostProperties,\n                hostAttributes: metadata.hostAttributes,\n                providers: metadata.providers,\n                viewProviders: metadata.viewProviders,\n                queries: metadata.queries,\n                guards: metadata.guards,\n                viewQueries: metadata.viewQueries,\n                entryComponents: metadata.entryComponents,\n                componentViewType: metadata.componentViewType,\n                rendererType: metadata.rendererType,\n                componentFactory: metadata.componentFactory,\n                template: templateMetadata\n            });\n            if (templateMetadata) {\n                _this.initComponentFactory(/** @type {?} */ ((metadata.componentFactory)), templateMetadata.ngContentSelectors);\n            }\n            _this._directiveCache.set(directiveType, normalizedDirMeta);\n            _this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());\n            return null;\n        };\n        if (metadata.isComponent) {\n            var /** @type {?} */ template = /** @type {?} */ ((metadata.template));\n            var /** @type {?} */ templateMeta = this._directiveNormalizer.normalizeTemplate({\n                ngModuleType: ngModuleType,\n                componentType: directiveType,\n                moduleUrl: this._reflector.componentModuleUrl(directiveType, annotation),\n                encapsulation: template.encapsulation,\n                template: template.template,\n                templateUrl: template.templateUrl,\n                styles: template.styles,\n                styleUrls: template.styleUrls,\n                animations: template.animations,\n                interpolation: template.interpolation,\n                preserveWhitespaces: template.preserveWhitespaces\n            });\n            if (isPromise(templateMeta) && isSync) {\n                this._reportError(componentStillLoadingError(directiveType), directiveType);\n                return null;\n            }\n            return SyncAsync.then(templateMeta, createDirectiveMetadata);\n        }\n        else {\n            // directive\n            createDirectiveMetadata(null);\n            return null;\n        }\n    };\n    /**\n     * @param {?} directiveType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = /**\n     * @param {?} directiveType\n     * @return {?}\n     */\n    function (directiveType) {\n        var _this = this;\n        directiveType = resolveForwardRef(directiveType);\n        if (!directiveType) {\n            return null;\n        }\n        var /** @type {?} */ cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);\n        if (cacheEntry) {\n            return cacheEntry;\n        }\n        var /** @type {?} */ dirMeta = this._directiveResolver.resolve(directiveType, false);\n        if (!dirMeta) {\n            return null;\n        }\n        var /** @type {?} */ nonNormalizedTemplateMetadata = /** @type {?} */ ((undefined));\n        if (createComponent.isTypeOf(dirMeta)) {\n            // component\n            var /** @type {?} */ compMeta = /** @type {?} */ (dirMeta);\n            assertArrayOfStrings('styles', compMeta.styles);\n            assertArrayOfStrings('styleUrls', compMeta.styleUrls);\n            assertInterpolationSymbols('interpolation', compMeta.interpolation);\n            var /** @type {?} */ animations = compMeta.animations;\n            nonNormalizedTemplateMetadata = new cpl.CompileTemplateMetadata({\n                encapsulation: noUndefined(compMeta.encapsulation),\n                template: noUndefined(compMeta.template),\n                templateUrl: noUndefined(compMeta.templateUrl),\n                htmlAst: null,\n                styles: compMeta.styles || [],\n                styleUrls: compMeta.styleUrls || [],\n                animations: animations || [],\n                interpolation: noUndefined(compMeta.interpolation),\n                isInline: !!compMeta.template,\n                externalStylesheets: [],\n                ngContentSelectors: [],\n                preserveWhitespaces: noUndefined(dirMeta.preserveWhitespaces),\n            });\n        }\n        var /** @type {?} */ changeDetectionStrategy = /** @type {?} */ ((null));\n        var /** @type {?} */ viewProviders = [];\n        var /** @type {?} */ entryComponentMetadata = [];\n        var /** @type {?} */ selector = dirMeta.selector;\n        if (createComponent.isTypeOf(dirMeta)) {\n            // Component\n            var /** @type {?} */ compMeta = /** @type {?} */ (dirMeta);\n            changeDetectionStrategy = /** @type {?} */ ((compMeta.changeDetection));\n            if (compMeta.viewProviders) {\n                viewProviders = this._getProvidersMetadata(compMeta.viewProviders, entryComponentMetadata, \"viewProviders for \\\"\" + stringifyType(directiveType) + \"\\\"\", [], directiveType);\n            }\n            if (compMeta.entryComponents) {\n                entryComponentMetadata = flattenAndDedupeArray(compMeta.entryComponents)\n                    .map(function (type) { return ((_this._getEntryComponentMetadata(type))); })\n                    .concat(entryComponentMetadata);\n            }\n            if (!selector) {\n                selector = this._schemaRegistry.getDefaultComponentElementName();\n            }\n        }\n        else {\n            // Directive\n            if (!selector) {\n                this._reportError(syntaxError(\"Directive \" + stringifyType(directiveType) + \" has no selector, please add it!\"), directiveType);\n                selector = 'error';\n            }\n        }\n        var /** @type {?} */ providers = [];\n        if (dirMeta.providers != null) {\n            providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, \"providers for \\\"\" + stringifyType(directiveType) + \"\\\"\", [], directiveType);\n        }\n        var /** @type {?} */ queries = [];\n        var /** @type {?} */ viewQueries = [];\n        if (dirMeta.queries != null) {\n            queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);\n            viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);\n        }\n        var /** @type {?} */ metadata = cpl.CompileDirectiveMetadata.create({\n            isHost: false,\n            selector: selector,\n            exportAs: noUndefined(dirMeta.exportAs),\n            isComponent: !!nonNormalizedTemplateMetadata,\n            type: this._getTypeMetadata(directiveType),\n            template: nonNormalizedTemplateMetadata,\n            changeDetection: changeDetectionStrategy,\n            inputs: dirMeta.inputs || [],\n            outputs: dirMeta.outputs || [],\n            host: dirMeta.host || {},\n            providers: providers || [],\n            viewProviders: viewProviders || [],\n            queries: queries || [],\n            guards: dirMeta.guards || {},\n            viewQueries: viewQueries || [],\n            entryComponents: entryComponentMetadata,\n            componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) :\n                null,\n            rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : null,\n            componentFactory: null\n        });\n        if (nonNormalizedTemplateMetadata) {\n            metadata.componentFactory =\n                this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs);\n        }\n        cacheEntry = { metadata: metadata, annotation: dirMeta };\n        this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);\n        return cacheEntry;\n    };\n    /**\n     * Gets the metadata for the given directive.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     */\n    /**\n     * Gets the metadata for the given directive.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     * @param {?} directiveType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getDirectiveMetadata = /**\n     * Gets the metadata for the given directive.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     * @param {?} directiveType\n     * @return {?}\n     */\n    function (directiveType) {\n        var /** @type {?} */ dirMeta = /** @type {?} */ ((this._directiveCache.get(directiveType)));\n        if (!dirMeta) {\n            this._reportError(syntaxError(\"Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive \" + stringifyType(directiveType) + \".\"), directiveType);\n        }\n        return dirMeta;\n    };\n    /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getDirectiveSummary = /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    function (dirType) {\n        var /** @type {?} */ dirSummary = /** @type {?} */ (this._loadSummary(dirType, cpl.CompileSummaryKind.Directive));\n        if (!dirSummary) {\n            this._reportError(syntaxError(\"Illegal state: Could not load the summary for directive \" + stringifyType(dirType) + \".\"), dirType);\n        }\n        return dirSummary;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.isDirective = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        return !!this._loadSummary(type, cpl.CompileSummaryKind.Directive) ||\n            this._directiveResolver.isDirective(type);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.isPipe = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        return !!this._loadSummary(type, cpl.CompileSummaryKind.Pipe) ||\n            this._pipeResolver.isPipe(type);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.isNgModule = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        return !!this._loadSummary(type, cpl.CompileSummaryKind.NgModule) ||\n            this._ngModuleResolver.isNgModule(type);\n    };\n    /**\n     * @param {?} moduleType\n     * @param {?=} alreadyCollecting\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getNgModuleSummary = /**\n     * @param {?} moduleType\n     * @param {?=} alreadyCollecting\n     * @return {?}\n     */\n    function (moduleType, alreadyCollecting) {\n        if (alreadyCollecting === void 0) { alreadyCollecting = null; }\n        var /** @type {?} */ moduleSummary = /** @type {?} */ (this._loadSummary(moduleType, cpl.CompileSummaryKind.NgModule));\n        if (!moduleSummary) {\n            var /** @type {?} */ moduleMeta = this.getNgModuleMetadata(moduleType, false, alreadyCollecting);\n            moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;\n            if (moduleSummary) {\n                this._summaryCache.set(moduleType, moduleSummary);\n            }\n        }\n        return moduleSummary;\n    };\n    /**\n     * Loads the declared directives and pipes of an NgModule.\n     */\n    /**\n     * Loads the declared directives and pipes of an NgModule.\n     * @param {?} moduleType\n     * @param {?} isSync\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = /**\n     * Loads the declared directives and pipes of an NgModule.\n     * @param {?} moduleType\n     * @param {?} isSync\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    function (moduleType, isSync, throwIfNotFound) {\n        var _this = this;\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var /** @type {?} */ ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);\n        var /** @type {?} */ loading = [];\n        if (ngModule) {\n            ngModule.declaredDirectives.forEach(function (id) {\n                var /** @type {?} */ promise = _this.loadDirectiveMetadata(moduleType, id.reference, isSync);\n                if (promise) {\n                    loading.push(promise);\n                }\n            });\n            ngModule.declaredPipes.forEach(function (id) { return _this._loadPipeMetadata(id.reference); });\n        }\n        return Promise.all(loading);\n    };\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getShallowModuleMetadata = /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        var /** @type {?} */ compileMeta = this._shallowModuleCache.get(moduleType);\n        if (compileMeta) {\n            return compileMeta;\n        }\n        var /** @type {?} */ ngModuleMeta = findLast(this._reflector.shallowAnnotations(moduleType), createNgModule.isTypeOf);\n        compileMeta = {\n            type: this._getTypeMetadata(moduleType),\n            rawExports: ngModuleMeta.exports,\n            rawImports: ngModuleMeta.imports,\n            rawProviders: ngModuleMeta.providers,\n        };\n        this._shallowModuleCache.set(moduleType, compileMeta);\n        return compileMeta;\n    };\n    /**\n     * @param {?} moduleType\n     * @param {?=} throwIfNotFound\n     * @param {?=} alreadyCollecting\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getNgModuleMetadata = /**\n     * @param {?} moduleType\n     * @param {?=} throwIfNotFound\n     * @param {?=} alreadyCollecting\n     * @return {?}\n     */\n    function (moduleType, throwIfNotFound, alreadyCollecting) {\n        var _this = this;\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        if (alreadyCollecting === void 0) { alreadyCollecting = null; }\n        moduleType = resolveForwardRef(moduleType);\n        var /** @type {?} */ compileMeta = this._ngModuleCache.get(moduleType);\n        if (compileMeta) {\n            return compileMeta;\n        }\n        var /** @type {?} */ meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);\n        if (!meta) {\n            return null;\n        }\n        var /** @type {?} */ declaredDirectives = [];\n        var /** @type {?} */ exportedNonModuleIdentifiers = [];\n        var /** @type {?} */ declaredPipes = [];\n        var /** @type {?} */ importedModules = [];\n        var /** @type {?} */ exportedModules = [];\n        var /** @type {?} */ providers = [];\n        var /** @type {?} */ entryComponents = [];\n        var /** @type {?} */ bootstrapComponents = [];\n        var /** @type {?} */ schemas = [];\n        if (meta.imports) {\n            flattenAndDedupeArray(meta.imports).forEach(function (importedType) {\n                var /** @type {?} */ importedModuleType = /** @type {?} */ ((undefined));\n                if (isValidType(importedType)) {\n                    importedModuleType = importedType;\n                }\n                else if (importedType && importedType.ngModule) {\n                    var /** @type {?} */ moduleWithProviders = importedType;\n                    importedModuleType = moduleWithProviders.ngModule;\n                    if (moduleWithProviders.providers) {\n                        providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, \"provider for the NgModule '\" + stringifyType(importedModuleType) + \"'\", [], importedType));\n                    }\n                }\n                if (importedModuleType) {\n                    if (_this._checkSelfImport(moduleType, importedModuleType))\n                        return;\n                    if (!alreadyCollecting)\n                        alreadyCollecting = new Set();\n                    if (alreadyCollecting.has(importedModuleType)) {\n                        _this._reportError(syntaxError(_this._getTypeDescriptor(importedModuleType) + \" '\" + stringifyType(importedType) + \"' is imported recursively by the module '\" + stringifyType(moduleType) + \"'.\"), moduleType);\n                        return;\n                    }\n                    alreadyCollecting.add(importedModuleType);\n                    var /** @type {?} */ importedModuleSummary = _this.getNgModuleSummary(importedModuleType, alreadyCollecting);\n                    alreadyCollecting.delete(importedModuleType);\n                    if (!importedModuleSummary) {\n                        _this._reportError(syntaxError(\"Unexpected \" + _this._getTypeDescriptor(importedType) + \" '\" + stringifyType(importedType) + \"' imported by the module '\" + stringifyType(moduleType) + \"'. Please add a @NgModule annotation.\"), moduleType);\n                        return;\n                    }\n                    importedModules.push(importedModuleSummary);\n                }\n                else {\n                    _this._reportError(syntaxError(\"Unexpected value '\" + stringifyType(importedType) + \"' imported by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                    return;\n                }\n            });\n        }\n        if (meta.exports) {\n            flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {\n                if (!isValidType(exportedType)) {\n                    _this._reportError(syntaxError(\"Unexpected value '\" + stringifyType(exportedType) + \"' exported by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                    return;\n                }\n                if (!alreadyCollecting)\n                    alreadyCollecting = new Set();\n                if (alreadyCollecting.has(exportedType)) {\n                    _this._reportError(syntaxError(_this._getTypeDescriptor(exportedType) + \" '\" + stringify(exportedType) + \"' is exported recursively by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                    return;\n                }\n                alreadyCollecting.add(exportedType);\n                var /** @type {?} */ exportedModuleSummary = _this.getNgModuleSummary(exportedType, alreadyCollecting);\n                alreadyCollecting.delete(exportedType);\n                if (exportedModuleSummary) {\n                    exportedModules.push(exportedModuleSummary);\n                }\n                else {\n                    exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType));\n                }\n            });\n        }\n        // Note: This will be modified later, so we rely on\n        // getting a new instance every time!\n        var /** @type {?} */ transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);\n        if (meta.declarations) {\n            flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {\n                if (!isValidType(declaredType)) {\n                    _this._reportError(syntaxError(\"Unexpected value '\" + stringifyType(declaredType) + \"' declared by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                    return;\n                }\n                var /** @type {?} */ declaredIdentifier = _this._getIdentifierMetadata(declaredType);\n                if (_this.isDirective(declaredType)) {\n                    transitiveModule.addDirective(declaredIdentifier);\n                    declaredDirectives.push(declaredIdentifier);\n                    _this._addTypeToModule(declaredType, moduleType);\n                }\n                else if (_this.isPipe(declaredType)) {\n                    transitiveModule.addPipe(declaredIdentifier);\n                    transitiveModule.pipes.push(declaredIdentifier);\n                    declaredPipes.push(declaredIdentifier);\n                    _this._addTypeToModule(declaredType, moduleType);\n                }\n                else {\n                    _this._reportError(syntaxError(\"Unexpected \" + _this._getTypeDescriptor(declaredType) + \" '\" + stringifyType(declaredType) + \"' declared by the module '\" + stringifyType(moduleType) + \"'. Please add a @Pipe/@Directive/@Component annotation.\"), moduleType);\n                    return;\n                }\n            });\n        }\n        var /** @type {?} */ exportedDirectives = [];\n        var /** @type {?} */ exportedPipes = [];\n        exportedNonModuleIdentifiers.forEach(function (exportedId) {\n            if (transitiveModule.directivesSet.has(exportedId.reference)) {\n                exportedDirectives.push(exportedId);\n                transitiveModule.addExportedDirective(exportedId);\n            }\n            else if (transitiveModule.pipesSet.has(exportedId.reference)) {\n                exportedPipes.push(exportedId);\n                transitiveModule.addExportedPipe(exportedId);\n            }\n            else {\n                _this._reportError(syntaxError(\"Can't export \" + _this._getTypeDescriptor(exportedId.reference) + \" \" + stringifyType(exportedId.reference) + \" from \" + stringifyType(moduleType) + \" as it was neither declared nor imported!\"), moduleType);\n                return;\n            }\n        });\n        // The providers of the module have to go last\n        // so that they overwrite any other provider we already added.\n        if (meta.providers) {\n            providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, \"provider for the NgModule '\" + stringifyType(moduleType) + \"'\", [], moduleType));\n        }\n        if (meta.entryComponents) {\n            entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents)\n                .map(function (type) { return ((_this._getEntryComponentMetadata(type))); }));\n        }\n        if (meta.bootstrap) {\n            flattenAndDedupeArray(meta.bootstrap).forEach(function (type) {\n                if (!isValidType(type)) {\n                    _this._reportError(syntaxError(\"Unexpected value '\" + stringifyType(type) + \"' used in the bootstrap property of module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                    return;\n                }\n                bootstrapComponents.push(_this._getIdentifierMetadata(type));\n            });\n        }\n        entryComponents.push.apply(entryComponents, bootstrapComponents.map(function (type) { return ((_this._getEntryComponentMetadata(type.reference))); }));\n        if (meta.schemas) {\n            schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas));\n        }\n        compileMeta = new cpl.CompileNgModuleMetadata({\n            type: this._getTypeMetadata(moduleType),\n            providers: providers,\n            entryComponents: entryComponents,\n            bootstrapComponents: bootstrapComponents,\n            schemas: schemas,\n            declaredDirectives: declaredDirectives,\n            exportedDirectives: exportedDirectives,\n            declaredPipes: declaredPipes,\n            exportedPipes: exportedPipes,\n            importedModules: importedModules,\n            exportedModules: exportedModules,\n            transitiveModule: transitiveModule,\n            id: meta.id || null,\n        });\n        entryComponents.forEach(function (id) { return transitiveModule.addEntryComponent(id); });\n        providers.forEach(function (provider) { return transitiveModule.addProvider(provider, /** @type {?} */ ((compileMeta)).type); });\n        transitiveModule.addModule(compileMeta.type);\n        this._ngModuleCache.set(moduleType, compileMeta);\n        return compileMeta;\n    };\n    /**\n     * @param {?} moduleType\n     * @param {?} importedModuleType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._checkSelfImport = /**\n     * @param {?} moduleType\n     * @param {?} importedModuleType\n     * @return {?}\n     */\n    function (moduleType, importedModuleType) {\n        if (moduleType === importedModuleType) {\n            this._reportError(syntaxError(\"'\" + stringifyType(moduleType) + \"' module can't import itself\"), moduleType);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getTypeDescriptor = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        if (isValidType(type)) {\n            if (this.isDirective(type)) {\n                return 'directive';\n            }\n            if (this.isPipe(type)) {\n                return 'pipe';\n            }\n            if (this.isNgModule(type)) {\n                return 'module';\n            }\n        }\n        if ((/** @type {?} */ (type)).provide) {\n            return 'provider';\n        }\n        return 'value';\n    };\n    /**\n     * @param {?} type\n     * @param {?} moduleType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._addTypeToModule = /**\n     * @param {?} type\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (type, moduleType) {\n        var /** @type {?} */ oldModule = this._ngModuleOfTypes.get(type);\n        if (oldModule && oldModule !== moduleType) {\n            this._reportError(syntaxError(\"Type \" + stringifyType(type) + \" is part of the declarations of 2 modules: \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \"! \" +\n                (\"Please consider moving \" + stringifyType(type) + \" to a higher module that imports \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \". \") +\n                (\"You can also create a new NgModule that exports and includes \" + stringifyType(type) + \" then import that NgModule in \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \".\")), moduleType);\n            return;\n        }\n        this._ngModuleOfTypes.set(type, moduleType);\n    };\n    /**\n     * @param {?} importedModules\n     * @param {?} exportedModules\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = /**\n     * @param {?} importedModules\n     * @param {?} exportedModules\n     * @return {?}\n     */\n    function (importedModules, exportedModules) {\n        // collect `providers` / `entryComponents` from all imported and all exported modules\n        var /** @type {?} */ result = new cpl.TransitiveCompileNgModuleMetadata();\n        var /** @type {?} */ modulesByToken = new Map();\n        importedModules.concat(exportedModules).forEach(function (modSummary) {\n            modSummary.modules.forEach(function (mod) { return result.addModule(mod); });\n            modSummary.entryComponents.forEach(function (comp) { return result.addEntryComponent(comp); });\n            var /** @type {?} */ addedTokens = new Set();\n            modSummary.providers.forEach(function (entry) {\n                var /** @type {?} */ tokenRef = cpl.tokenReference(entry.provider.token);\n                var /** @type {?} */ prevModules = modulesByToken.get(tokenRef);\n                if (!prevModules) {\n                    prevModules = new Set();\n                    modulesByToken.set(tokenRef, prevModules);\n                }\n                var /** @type {?} */ moduleRef = entry.module.reference;\n                // Note: the providers of one module may still contain multiple providers\n                // per token (e.g. for multi providers), and we need to preserve these.\n                if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {\n                    prevModules.add(moduleRef);\n                    addedTokens.add(tokenRef);\n                    result.addProvider(entry.provider, entry.module);\n                }\n            });\n        });\n        exportedModules.forEach(function (modSummary) {\n            modSummary.exportedDirectives.forEach(function (id) { return result.addExportedDirective(id); });\n            modSummary.exportedPipes.forEach(function (id) { return result.addExportedPipe(id); });\n        });\n        importedModules.forEach(function (modSummary) {\n            modSummary.exportedDirectives.forEach(function (id) { return result.addDirective(id); });\n            modSummary.exportedPipes.forEach(function (id) { return result.addPipe(id); });\n        });\n        return result;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getIdentifierMetadata = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        type = resolveForwardRef(type);\n        return { reference: type };\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.isInjectable = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ annotations = this._reflector.tryAnnotations(type);\n        return annotations.some(function (ann) { return createInjectable.isTypeOf(ann); });\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getInjectableSummary = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        return {\n            summaryKind: cpl.CompileSummaryKind.Injectable,\n            type: this._getTypeMetadata(type, null, false)\n        };\n    };\n    /**\n     * @param {?} type\n     * @param {?=} dependencies\n     * @param {?=} throwOnUnknownDeps\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getInjectableMetadata = /**\n     * @param {?} type\n     * @param {?=} dependencies\n     * @param {?=} throwOnUnknownDeps\n     * @return {?}\n     */\n    function (type, dependencies, throwOnUnknownDeps) {\n        if (dependencies === void 0) { dependencies = null; }\n        if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }\n        var /** @type {?} */ typeSummary = this._loadSummary(type, cpl.CompileSummaryKind.Injectable);\n        var /** @type {?} */ typeMetadata = typeSummary ?\n            typeSummary.type :\n            this._getTypeMetadata(type, dependencies, throwOnUnknownDeps);\n        var /** @type {?} */ annotations = this._reflector.annotations(type).filter(function (ann) { return createInjectable.isTypeOf(ann); });\n        if (annotations.length === 0) {\n            return null;\n        }\n        var /** @type {?} */ meta = annotations[annotations.length - 1];\n        return {\n            symbol: type,\n            type: typeMetadata,\n            providedIn: meta.providedIn,\n            useValue: meta.useValue,\n            useClass: meta.useClass,\n            useExisting: meta.useExisting,\n            useFactory: meta.useFactory,\n            deps: meta.deps,\n        };\n    };\n    /**\n     * @param {?} type\n     * @param {?=} dependencies\n     * @param {?=} throwOnUnknownDeps\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getTypeMetadata = /**\n     * @param {?} type\n     * @param {?=} dependencies\n     * @param {?=} throwOnUnknownDeps\n     * @return {?}\n     */\n    function (type, dependencies, throwOnUnknownDeps) {\n        if (dependencies === void 0) { dependencies = null; }\n        if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }\n        var /** @type {?} */ identifier = this._getIdentifierMetadata(type);\n        return {\n            reference: identifier.reference,\n            diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps),\n            lifecycleHooks: getAllLifecycleHooks(this._reflector, identifier.reference),\n        };\n    };\n    /**\n     * @param {?} factory\n     * @param {?=} dependencies\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getFactoryMetadata = /**\n     * @param {?} factory\n     * @param {?=} dependencies\n     * @return {?}\n     */\n    function (factory, dependencies) {\n        if (dependencies === void 0) { dependencies = null; }\n        factory = resolveForwardRef(factory);\n        return { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };\n    };\n    /**\n     * Gets the metadata for the given pipe.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     */\n    /**\n     * Gets the metadata for the given pipe.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     * @param {?} pipeType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getPipeMetadata = /**\n     * Gets the metadata for the given pipe.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     * @param {?} pipeType\n     * @return {?}\n     */\n    function (pipeType) {\n        var /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);\n        if (!pipeMeta) {\n            this._reportError(syntaxError(\"Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe \" + stringifyType(pipeType) + \".\"), pipeType);\n        }\n        return pipeMeta || null;\n    };\n    /**\n     * @param {?} pipeType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getPipeSummary = /**\n     * @param {?} pipeType\n     * @return {?}\n     */\n    function (pipeType) {\n        var /** @type {?} */ pipeSummary = /** @type {?} */ (this._loadSummary(pipeType, cpl.CompileSummaryKind.Pipe));\n        if (!pipeSummary) {\n            this._reportError(syntaxError(\"Illegal state: Could not load the summary for pipe \" + stringifyType(pipeType) + \".\"), pipeType);\n        }\n        return pipeSummary;\n    };\n    /**\n     * @param {?} pipeType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getOrLoadPipeMetadata = /**\n     * @param {?} pipeType\n     * @return {?}\n     */\n    function (pipeType) {\n        var /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);\n        if (!pipeMeta) {\n            pipeMeta = this._loadPipeMetadata(pipeType);\n        }\n        return pipeMeta;\n    };\n    /**\n     * @param {?} pipeType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._loadPipeMetadata = /**\n     * @param {?} pipeType\n     * @return {?}\n     */\n    function (pipeType) {\n        pipeType = resolveForwardRef(pipeType);\n        var /** @type {?} */ pipeAnnotation = /** @type {?} */ ((this._pipeResolver.resolve(pipeType)));\n        var /** @type {?} */ pipeMeta = new cpl.CompilePipeMetadata({\n            type: this._getTypeMetadata(pipeType),\n            name: pipeAnnotation.name,\n            pure: !!pipeAnnotation.pure\n        });\n        this._pipeCache.set(pipeType, pipeMeta);\n        this._summaryCache.set(pipeType, pipeMeta.toSummary());\n        return pipeMeta;\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} dependencies\n     * @param {?=} throwOnUnknownDeps\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getDependenciesMetadata = /**\n     * @param {?} typeOrFunc\n     * @param {?} dependencies\n     * @param {?=} throwOnUnknownDeps\n     * @return {?}\n     */\n    function (typeOrFunc, dependencies, throwOnUnknownDeps) {\n        var _this = this;\n        if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }\n        var /** @type {?} */ hasUnknownDeps = false;\n        var /** @type {?} */ params = dependencies || this._reflector.parameters(typeOrFunc) || [];\n        var /** @type {?} */ dependenciesMetadata = params.map(function (param) {\n            var /** @type {?} */ isAttribute = false;\n            var /** @type {?} */ isHost = false;\n            var /** @type {?} */ isSelf = false;\n            var /** @type {?} */ isSkipSelf = false;\n            var /** @type {?} */ isOptional = false;\n            var /** @type {?} */ token = null;\n            if (Array.isArray(param)) {\n                param.forEach(function (paramEntry) {\n                    if (createHost.isTypeOf(paramEntry)) {\n                        isHost = true;\n                    }\n                    else if (createSelf.isTypeOf(paramEntry)) {\n                        isSelf = true;\n                    }\n                    else if (createSkipSelf.isTypeOf(paramEntry)) {\n                        isSkipSelf = true;\n                    }\n                    else if (createOptional.isTypeOf(paramEntry)) {\n                        isOptional = true;\n                    }\n                    else if (createAttribute.isTypeOf(paramEntry)) {\n                        isAttribute = true;\n                        token = paramEntry.attributeName;\n                    }\n                    else if (createInject.isTypeOf(paramEntry)) {\n                        token = paramEntry.token;\n                    }\n                    else if (createInjectionToken.isTypeOf(paramEntry) || paramEntry instanceof StaticSymbol) {\n                        token = paramEntry;\n                    }\n                    else if (isValidType(paramEntry) && token == null) {\n                        token = paramEntry;\n                    }\n                });\n            }\n            else {\n                token = param;\n            }\n            if (token == null) {\n                hasUnknownDeps = true;\n                return /** @type {?} */ ((null));\n            }\n            return {\n                isAttribute: isAttribute,\n                isHost: isHost,\n                isSelf: isSelf,\n                isSkipSelf: isSkipSelf,\n                isOptional: isOptional,\n                token: _this._getTokenMetadata(token)\n            };\n        });\n        if (hasUnknownDeps) {\n            var /** @type {?} */ depsTokens = dependenciesMetadata.map(function (dep) { return dep ? stringifyType(dep.token) : '?'; }).join(', ');\n            var /** @type {?} */ message = \"Can't resolve all parameters for \" + stringifyType(typeOrFunc) + \": (\" + depsTokens + \").\";\n            if (throwOnUnknownDeps || this._config.strictInjectionParameters) {\n                this._reportError(syntaxError(message), typeOrFunc);\n            }\n            else {\n                this._console.warn(\"Warning: \" + message + \" This will become an error in Angular v6.x\");\n            }\n        }\n        return dependenciesMetadata;\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getTokenMetadata = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        token = resolveForwardRef(token);\n        var /** @type {?} */ compileToken;\n        if (typeof token === 'string') {\n            compileToken = { value: token };\n        }\n        else {\n            compileToken = { identifier: { reference: token } };\n        }\n        return compileToken;\n    };\n    /**\n     * @param {?} providers\n     * @param {?} targetEntryComponents\n     * @param {?=} debugInfo\n     * @param {?=} compileProviders\n     * @param {?=} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getProvidersMetadata = /**\n     * @param {?} providers\n     * @param {?} targetEntryComponents\n     * @param {?=} debugInfo\n     * @param {?=} compileProviders\n     * @param {?=} type\n     * @return {?}\n     */\n    function (providers, targetEntryComponents, debugInfo, compileProviders, type) {\n        var _this = this;\n        if (compileProviders === void 0) { compileProviders = []; }\n        providers.forEach(function (provider, providerIdx) {\n            if (Array.isArray(provider)) {\n                _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);\n            }\n            else {\n                provider = resolveForwardRef(provider);\n                var /** @type {?} */ providerMeta = /** @type {?} */ ((undefined));\n                if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {\n                    _this._validateProvider(provider);\n                    providerMeta = new cpl.ProviderMeta(provider.provide, provider);\n                }\n                else if (isValidType(provider)) {\n                    providerMeta = new cpl.ProviderMeta(provider, { useClass: provider });\n                }\n                else if (provider === void 0) {\n                    _this._reportError(syntaxError(\"Encountered undefined provider! Usually this means you have a circular dependencies (might be caused by using 'barrel' index.ts files.\"));\n                    return;\n                }\n                else {\n                    var /** @type {?} */ providersInfo = (/** @type {?} */ (providers.reduce(function (soFar, seenProvider, seenProviderIdx) {\n                        if (seenProviderIdx < providerIdx) {\n                            soFar.push(\"\" + stringifyType(seenProvider));\n                        }\n                        else if (seenProviderIdx == providerIdx) {\n                            soFar.push(\"?\" + stringifyType(seenProvider) + \"?\");\n                        }\n                        else if (seenProviderIdx == providerIdx + 1) {\n                            soFar.push('...');\n                        }\n                        return soFar;\n                    }, [])))\n                        .join(', ');\n                    _this._reportError(syntaxError(\"Invalid \" + (debugInfo ? debugInfo : 'provider') + \" - only instances of Provider and Type are allowed, got: [\" + providersInfo + \"]\"), type);\n                    return;\n                }\n                if (providerMeta.token ===\n                    _this._reflector.resolveExternalReference(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {\n                    targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(providerMeta, type));\n                }\n                else {\n                    compileProviders.push(_this.getProviderMetadata(providerMeta));\n                }\n            }\n        });\n        return compileProviders;\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._validateProvider = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        if (provider.hasOwnProperty('useClass') && provider.useClass == null) {\n            this._reportError(syntaxError(\"Invalid provider for \" + stringifyType(provider.provide) + \". useClass cannot be \" + provider.useClass + \".\\n           Usually it happens when:\\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\\n           2. Class was used before it was declared. Use forwardRef in this case.\"));\n        }\n    };\n    /**\n     * @param {?} provider\n     * @param {?=} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getEntryComponentsFromProvider = /**\n     * @param {?} provider\n     * @param {?=} type\n     * @return {?}\n     */\n    function (provider, type) {\n        var _this = this;\n        var /** @type {?} */ components = [];\n        var /** @type {?} */ collectedIdentifiers = [];\n        if (provider.useFactory || provider.useExisting || provider.useClass) {\n            this._reportError(syntaxError(\"The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!\"), type);\n            return [];\n        }\n        if (!provider.multi) {\n            this._reportError(syntaxError(\"The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!\"), type);\n            return [];\n        }\n        extractIdentifiers(provider.useValue, collectedIdentifiers);\n        collectedIdentifiers.forEach(function (identifier) {\n            var /** @type {?} */ entry = _this._getEntryComponentMetadata(identifier.reference, false);\n            if (entry) {\n                components.push(entry);\n            }\n        });\n        return components;\n    };\n    /**\n     * @param {?} dirType\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getEntryComponentMetadata = /**\n     * @param {?} dirType\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    function (dirType, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var /** @type {?} */ dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);\n        if (dirMeta && dirMeta.metadata.isComponent) {\n            return { componentType: dirType, componentFactory: /** @type {?} */ ((dirMeta.metadata.componentFactory)) };\n        }\n        var /** @type {?} */ dirSummary = /** @type {?} */ (this._loadSummary(dirType, cpl.CompileSummaryKind.Directive));\n        if (dirSummary && dirSummary.isComponent) {\n            return { componentType: dirType, componentFactory: /** @type {?} */ ((dirSummary.componentFactory)) };\n        }\n        if (throwIfNotFound) {\n            throw syntaxError(dirType.name + \" cannot be used as an entry component.\");\n        }\n        return null;\n    };\n    /**\n     * @param {?} type\n     * @param {?=} dependencies\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getInjectableTypeMetadata = /**\n     * @param {?} type\n     * @param {?=} dependencies\n     * @return {?}\n     */\n    function (type, dependencies) {\n        if (dependencies === void 0) { dependencies = null; }\n        var /** @type {?} */ typeSummary = this._loadSummary(type, cpl.CompileSummaryKind.Injectable);\n        if (typeSummary) {\n            return typeSummary.type;\n        }\n        return this._getTypeMetadata(type, dependencies);\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getProviderMetadata = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        var /** @type {?} */ compileDeps = /** @type {?} */ ((undefined));\n        var /** @type {?} */ compileTypeMetadata = /** @type {?} */ ((null));\n        var /** @type {?} */ compileFactoryMetadata = /** @type {?} */ ((null));\n        var /** @type {?} */ token = this._getTokenMetadata(provider.token);\n        if (provider.useClass) {\n            compileTypeMetadata =\n                this._getInjectableTypeMetadata(provider.useClass, provider.dependencies);\n            compileDeps = compileTypeMetadata.diDeps;\n            if (provider.token === provider.useClass) {\n                // use the compileTypeMetadata as it contains information about lifecycleHooks...\n                token = { identifier: compileTypeMetadata };\n            }\n        }\n        else if (provider.useFactory) {\n            compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);\n            compileDeps = compileFactoryMetadata.diDeps;\n        }\n        return {\n            token: token,\n            useClass: compileTypeMetadata,\n            useValue: provider.useValue,\n            useFactory: compileFactoryMetadata,\n            useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : undefined,\n            deps: compileDeps,\n            multi: provider.multi\n        };\n    };\n    /**\n     * @param {?} queries\n     * @param {?} isViewQuery\n     * @param {?} directiveType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getQueriesMetadata = /**\n     * @param {?} queries\n     * @param {?} isViewQuery\n     * @param {?} directiveType\n     * @return {?}\n     */\n    function (queries, isViewQuery, directiveType) {\n        var _this = this;\n        var /** @type {?} */ res = [];\n        Object.keys(queries).forEach(function (propertyName) {\n            var /** @type {?} */ query = queries[propertyName];\n            if (query.isViewQuery === isViewQuery) {\n                res.push(_this._getQueryMetadata(query, propertyName, directiveType));\n            }\n        });\n        return res;\n    };\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._queryVarBindings = /**\n     * @param {?} selector\n     * @return {?}\n     */\n    function (selector) { return selector.split(/\\s*,\\s*/); };\n    /**\n     * @param {?} q\n     * @param {?} propertyName\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getQueryMetadata = /**\n     * @param {?} q\n     * @param {?} propertyName\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (q, propertyName, typeOrFunc) {\n        var _this = this;\n        var /** @type {?} */ selectors;\n        if (typeof q.selector === 'string') {\n            selectors =\n                this._queryVarBindings(q.selector).map(function (varName) { return _this._getTokenMetadata(varName); });\n        }\n        else {\n            if (!q.selector) {\n                this._reportError(syntaxError(\"Can't construct a query for the property \\\"\" + propertyName + \"\\\" of \\\"\" + stringifyType(typeOrFunc) + \"\\\" since the query selector wasn't defined.\"), typeOrFunc);\n                selectors = [];\n            }\n            else {\n                selectors = [this._getTokenMetadata(q.selector)];\n            }\n        }\n        return {\n            selectors: selectors,\n            first: q.first,\n            descendants: q.descendants, propertyName: propertyName,\n            read: q.read ? this._getTokenMetadata(q.read) : /** @type {?} */ ((null))\n        };\n    };\n    /**\n     * @param {?} error\n     * @param {?=} type\n     * @param {?=} otherType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._reportError = /**\n     * @param {?} error\n     * @param {?=} type\n     * @param {?=} otherType\n     * @return {?}\n     */\n    function (error, type, otherType) {\n        if (this._errorCollector) {\n            this._errorCollector(error, type);\n            if (otherType) {\n                this._errorCollector(error, otherType);\n            }\n        }\n        else {\n            throw error;\n        }\n    };\n    return CompileMetadataResolver;\n}());\nexport { CompileMetadataResolver };\nfunction CompileMetadataResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileMetadataResolver.prototype._nonNormalizedDirectiveCache;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._directiveCache;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._summaryCache;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._pipeCache;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._ngModuleCache;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._ngModuleOfTypes;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._shallowModuleCache;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._config;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._htmlParser;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._ngModuleResolver;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._directiveResolver;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._pipeResolver;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._summaryResolver;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._schemaRegistry;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._directiveNormalizer;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._console;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._staticSymbolCache;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._reflector;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._errorCollector;\n}\n/**\n * @param {?} tree\n * @param {?=} out\n * @return {?}\n */\nfunction flattenArray(tree, out) {\n    if (out === void 0) { out = []; }\n    if (tree) {\n        for (var /** @type {?} */ i = 0; i < tree.length; i++) {\n            var /** @type {?} */ item = resolveForwardRef(tree[i]);\n            if (Array.isArray(item)) {\n                flattenArray(item, out);\n            }\n            else {\n                out.push(item);\n            }\n        }\n    }\n    return out;\n}\n/**\n * @param {?} array\n * @return {?}\n */\nfunction dedupeArray(array) {\n    if (array) {\n        return Array.from(new Set(array));\n    }\n    return [];\n}\n/**\n * @param {?} tree\n * @return {?}\n */\nfunction flattenAndDedupeArray(tree) {\n    return dedupeArray(flattenArray(tree));\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isValidType(value) {\n    return (value instanceof StaticSymbol) || (value instanceof Type);\n}\n/**\n * @param {?} value\n * @param {?} targetIdentifiers\n * @return {?}\n */\nfunction extractIdentifiers(value, targetIdentifiers) {\n    visitValue(value, new _CompileValueConverter(), targetIdentifiers);\n}\nvar _CompileValueConverter = /** @class */ (function (_super) {\n    tslib_1.__extends(_CompileValueConverter, _super);\n    function _CompileValueConverter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} value\n     * @param {?} targetIdentifiers\n     * @return {?}\n     */\n    _CompileValueConverter.prototype.visitOther = /**\n     * @param {?} value\n     * @param {?} targetIdentifiers\n     * @return {?}\n     */\n    function (value, targetIdentifiers) {\n        targetIdentifiers.push({ reference: value });\n    };\n    return _CompileValueConverter;\n}(ValueTransformer));\n/**\n * @param {?} type\n * @return {?}\n */\nfunction stringifyType(type) {\n    if (type instanceof StaticSymbol) {\n        return type.name + \" in \" + type.filePath;\n    }\n    else {\n        return stringify(type);\n    }\n}\n/**\n * Indicates that a component is still being loaded in a synchronous compile.\n * @param {?} compType\n * @return {?}\n */\nfunction componentStillLoadingError(compType) {\n    var /** @type {?} */ error = Error(\"Can't compile synchronously as \" + stringify(compType) + \" is still being loaded!\");\n    (/** @type {?} */ (error))[ERROR_COMPONENT_TYPE] = compType;\n    return error;\n}\n//# sourceMappingURL=metadata_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { tokenName, tokenReference } from './compile_metadata';\nimport { Identifiers, createTokenForExternalReference } from './identifiers';\nimport { ParseError } from './parse_util';\nimport { ProviderAst, ProviderAstType } from './template_parser/template_ast';\nvar ProviderError = /** @class */ (function (_super) {\n    tslib_1.__extends(ProviderError, _super);\n    function ProviderError(message, span) {\n        return _super.call(this, span, message) || this;\n    }\n    return ProviderError;\n}(ParseError));\nexport { ProviderError };\n/**\n * @record\n */\nexport function QueryWithId() { }\nfunction QueryWithId_tsickle_Closure_declarations() {\n    /** @type {?} */\n    QueryWithId.prototype.meta;\n    /** @type {?} */\n    QueryWithId.prototype.queryId;\n}\nvar ProviderViewContext = /** @class */ (function () {\n    function ProviderViewContext(reflector, component) {\n        var _this = this;\n        this.reflector = reflector;\n        this.component = component;\n        this.errors = [];\n        this.viewQueries = _getViewQueries(component);\n        this.viewProviders = new Map();\n        component.viewProviders.forEach(function (provider) {\n            if (_this.viewProviders.get(tokenReference(provider.token)) == null) {\n                _this.viewProviders.set(tokenReference(provider.token), true);\n            }\n        });\n    }\n    return ProviderViewContext;\n}());\nexport { ProviderViewContext };\nfunction ProviderViewContext_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ProviderViewContext.prototype.viewQueries;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ProviderViewContext.prototype.viewProviders;\n    /** @type {?} */\n    ProviderViewContext.prototype.errors;\n    /** @type {?} */\n    ProviderViewContext.prototype.reflector;\n    /** @type {?} */\n    ProviderViewContext.prototype.component;\n}\nvar ProviderElementContext = /** @class */ (function () {\n    function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, isTemplate, contentQueryStartId, _sourceSpan) {\n        var _this = this;\n        this.viewContext = viewContext;\n        this._parent = _parent;\n        this._isViewRoot = _isViewRoot;\n        this._directiveAsts = _directiveAsts;\n        this._sourceSpan = _sourceSpan;\n        this._transformedProviders = new Map();\n        this._seenProviders = new Map();\n        this._queriedTokens = new Map();\n        this.transformedHasViewContainer = false;\n        this._attrs = {};\n        attrs.forEach(function (attrAst) { return _this._attrs[attrAst.name] = attrAst.value; });\n        var /** @type {?} */ directivesMeta = _directiveAsts.map(function (directiveAst) { return directiveAst.directive; });\n        this._allProviders =\n            _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);\n        this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);\n        Array.from(this._allProviders.values()).forEach(function (provider) {\n            _this._addQueryReadsTo(provider.token, provider.token, _this._queriedTokens);\n        });\n        if (isTemplate) {\n            var /** @type {?} */ templateRefId = createTokenForExternalReference(this.viewContext.reflector, Identifiers.TemplateRef);\n            this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);\n        }\n        refs.forEach(function (refAst) {\n            var /** @type {?} */ defaultQueryValue = refAst.value ||\n                createTokenForExternalReference(_this.viewContext.reflector, Identifiers.ElementRef);\n            _this._addQueryReadsTo({ value: refAst.name }, defaultQueryValue, _this._queriedTokens);\n        });\n        if (this._queriedTokens.get(this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef))) {\n            this.transformedHasViewContainer = true;\n        }\n        // create the providers that we know are eager first\n        Array.from(this._allProviders.values()).forEach(function (provider) {\n            var /** @type {?} */ eager = provider.eager || _this._queriedTokens.get(tokenReference(provider.token));\n            if (eager) {\n                _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ProviderElementContext.prototype.afterElement = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // collect lazy providers\n        Array.from(this._allProviders.values()).forEach(function (provider) {\n            _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);\n        });\n    };\n    Object.defineProperty(ProviderElementContext.prototype, \"transformProviders\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // Note: Maps keep their insertion order.\n            var /** @type {?} */ lazyProviders = [];\n            var /** @type {?} */ eagerProviders = [];\n            this._transformedProviders.forEach(function (provider) {\n                if (provider.eager) {\n                    eagerProviders.push(provider);\n                }\n                else {\n                    lazyProviders.push(provider);\n                }\n            });\n            return lazyProviders.concat(eagerProviders);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ProviderElementContext.prototype, \"transformedDirectiveAsts\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ sortedProviderTypes = this.transformProviders.map(function (provider) { return provider.token.identifier; });\n            var /** @type {?} */ sortedDirectives = this._directiveAsts.slice();\n            sortedDirectives.sort(function (dir1, dir2) {\n                return sortedProviderTypes.indexOf(dir1.directive.type) -\n                    sortedProviderTypes.indexOf(dir2.directive.type);\n            });\n            return sortedDirectives;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ProviderElementContext.prototype, \"queryMatches\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ allMatches = [];\n            this._queriedTokens.forEach(function (matches) { allMatches.push.apply(allMatches, matches); });\n            return allMatches;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} token\n     * @param {?} defaultValue\n     * @param {?} queryReadTokens\n     * @return {?}\n     */\n    ProviderElementContext.prototype._addQueryReadsTo = /**\n     * @param {?} token\n     * @param {?} defaultValue\n     * @param {?} queryReadTokens\n     * @return {?}\n     */\n    function (token, defaultValue, queryReadTokens) {\n        this._getQueriesFor(token).forEach(function (query) {\n            var /** @type {?} */ queryValue = query.meta.read || defaultValue;\n            var /** @type {?} */ tokenRef = tokenReference(queryValue);\n            var /** @type {?} */ queryMatches = queryReadTokens.get(tokenRef);\n            if (!queryMatches) {\n                queryMatches = [];\n                queryReadTokens.set(tokenRef, queryMatches);\n            }\n            queryMatches.push({ queryId: query.queryId, value: queryValue });\n        });\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    ProviderElementContext.prototype._getQueriesFor = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        var /** @type {?} */ result = [];\n        var /** @type {?} */ currentEl = this;\n        var /** @type {?} */ distance = 0;\n        var /** @type {?} */ queries;\n        while (currentEl !== null) {\n            queries = currentEl._contentQueries.get(tokenReference(token));\n            if (queries) {\n                result.push.apply(result, queries.filter(function (query) { return query.meta.descendants || distance <= 1; }));\n            }\n            if (currentEl._directiveAsts.length > 0) {\n                distance++;\n            }\n            currentEl = currentEl._parent;\n        }\n        queries = this.viewContext.viewQueries.get(tokenReference(token));\n        if (queries) {\n            result.push.apply(result, queries);\n        }\n        return result;\n    };\n    /**\n     * @param {?} requestingProviderType\n     * @param {?} token\n     * @param {?} eager\n     * @return {?}\n     */\n    ProviderElementContext.prototype._getOrCreateLocalProvider = /**\n     * @param {?} requestingProviderType\n     * @param {?} token\n     * @param {?} eager\n     * @return {?}\n     */\n    function (requestingProviderType, token, eager) {\n        var _this = this;\n        var /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));\n        if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||\n            requestingProviderType === ProviderAstType.PublicService) &&\n            resolvedProvider.providerType === ProviderAstType.PrivateService) ||\n            ((requestingProviderType === ProviderAstType.PrivateService ||\n                requestingProviderType === ProviderAstType.PublicService) &&\n                resolvedProvider.providerType === ProviderAstType.Builtin)) {\n            return null;\n        }\n        var /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n        if (transformedProviderAst) {\n            return transformedProviderAst;\n        }\n        if (this._seenProviders.get(tokenReference(token)) != null) {\n            this.viewContext.errors.push(new ProviderError(\"Cannot instantiate cyclic dependency! \" + tokenName(token), this._sourceSpan));\n            return null;\n        }\n        this._seenProviders.set(tokenReference(token), true);\n        var /** @type {?} */ transformedProviders = resolvedProvider.providers.map(function (provider) {\n            var /** @type {?} */ transformedUseValue = provider.useValue;\n            var /** @type {?} */ transformedUseExisting = /** @type {?} */ ((provider.useExisting));\n            var /** @type {?} */ transformedDeps = /** @type {?} */ ((undefined));\n            if (provider.useExisting != null) {\n                var /** @type {?} */ existingDiDep = /** @type {?} */ ((_this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager)));\n                if (existingDiDep.token != null) {\n                    transformedUseExisting = existingDiDep.token;\n                }\n                else {\n                    transformedUseExisting = /** @type {?} */ ((null));\n                    transformedUseValue = existingDiDep.value;\n                }\n            }\n            else if (provider.useFactory) {\n                var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;\n                transformedDeps =\n                    deps.map(function (dep) { return ((_this._getDependency(resolvedProvider.providerType, dep, eager))); });\n            }\n            else if (provider.useClass) {\n                var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;\n                transformedDeps =\n                    deps.map(function (dep) { return ((_this._getDependency(resolvedProvider.providerType, dep, eager))); });\n            }\n            return _transformProvider(provider, {\n                useExisting: transformedUseExisting,\n                useValue: transformedUseValue,\n                deps: transformedDeps\n            });\n        });\n        transformedProviderAst =\n            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });\n        this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n        return transformedProviderAst;\n    };\n    /**\n     * @param {?} requestingProviderType\n     * @param {?} dep\n     * @param {?=} eager\n     * @return {?}\n     */\n    ProviderElementContext.prototype._getLocalDependency = /**\n     * @param {?} requestingProviderType\n     * @param {?} dep\n     * @param {?=} eager\n     * @return {?}\n     */\n    function (requestingProviderType, dep, eager) {\n        if (eager === void 0) { eager = false; }\n        if (dep.isAttribute) {\n            var /** @type {?} */ attrValue = this._attrs[/** @type {?} */ ((dep.token)).value];\n            return { isValue: true, value: attrValue == null ? null : attrValue };\n        }\n        if (dep.token != null) {\n            // access builtints\n            if ((requestingProviderType === ProviderAstType.Directive ||\n                requestingProviderType === ProviderAstType.Component)) {\n                if (tokenReference(dep.token) ===\n                    this.viewContext.reflector.resolveExternalReference(Identifiers.Renderer) ||\n                    tokenReference(dep.token) ===\n                        this.viewContext.reflector.resolveExternalReference(Identifiers.ElementRef) ||\n                    tokenReference(dep.token) ===\n                        this.viewContext.reflector.resolveExternalReference(Identifiers.ChangeDetectorRef) ||\n                    tokenReference(dep.token) ===\n                        this.viewContext.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n                    return dep;\n                }\n                if (tokenReference(dep.token) ===\n                    this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {\n                    (/** @type {?} */ (this)).transformedHasViewContainer = true;\n                }\n            }\n            // access the injector\n            if (tokenReference(dep.token) ===\n                this.viewContext.reflector.resolveExternalReference(Identifiers.Injector)) {\n                return dep;\n            }\n            // access providers\n            if (this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager) != null) {\n                return dep;\n            }\n        }\n        return null;\n    };\n    /**\n     * @param {?} requestingProviderType\n     * @param {?} dep\n     * @param {?=} eager\n     * @return {?}\n     */\n    ProviderElementContext.prototype._getDependency = /**\n     * @param {?} requestingProviderType\n     * @param {?} dep\n     * @param {?=} eager\n     * @return {?}\n     */\n    function (requestingProviderType, dep, eager) {\n        if (eager === void 0) { eager = false; }\n        var /** @type {?} */ currElement = this;\n        var /** @type {?} */ currEager = eager;\n        var /** @type {?} */ result = null;\n        if (!dep.isSkipSelf) {\n            result = this._getLocalDependency(requestingProviderType, dep, eager);\n        }\n        if (dep.isSelf) {\n            if (!result && dep.isOptional) {\n                result = { isValue: true, value: null };\n            }\n        }\n        else {\n            // check parent elements\n            while (!result && currElement._parent) {\n                var /** @type {?} */ prevElement = currElement;\n                currElement = currElement._parent;\n                if (prevElement._isViewRoot) {\n                    currEager = false;\n                }\n                result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);\n            }\n            // check @Host restriction\n            if (!result) {\n                if (!dep.isHost || this.viewContext.component.isHost ||\n                    this.viewContext.component.type.reference === tokenReference(/** @type {?} */ ((dep.token))) ||\n                    this.viewContext.viewProviders.get(tokenReference(/** @type {?} */ ((dep.token)))) != null) {\n                    result = dep;\n                }\n                else {\n                    result = dep.isOptional ? { isValue: true, value: null } : null;\n                }\n            }\n        }\n        if (!result) {\n            this.viewContext.errors.push(new ProviderError(\"No provider for \" + tokenName((/** @type {?} */ ((dep.token)))), this._sourceSpan));\n        }\n        return result;\n    };\n    return ProviderElementContext;\n}());\nexport { ProviderElementContext };\nfunction ProviderElementContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProviderElementContext.prototype._contentQueries;\n    /** @type {?} */\n    ProviderElementContext.prototype._transformedProviders;\n    /** @type {?} */\n    ProviderElementContext.prototype._seenProviders;\n    /** @type {?} */\n    ProviderElementContext.prototype._allProviders;\n    /** @type {?} */\n    ProviderElementContext.prototype._attrs;\n    /** @type {?} */\n    ProviderElementContext.prototype._queriedTokens;\n    /** @type {?} */\n    ProviderElementContext.prototype.transformedHasViewContainer;\n    /** @type {?} */\n    ProviderElementContext.prototype.viewContext;\n    /** @type {?} */\n    ProviderElementContext.prototype._parent;\n    /** @type {?} */\n    ProviderElementContext.prototype._isViewRoot;\n    /** @type {?} */\n    ProviderElementContext.prototype._directiveAsts;\n    /** @type {?} */\n    ProviderElementContext.prototype._sourceSpan;\n}\nvar NgModuleProviderAnalyzer = /** @class */ (function () {\n    function NgModuleProviderAnalyzer(reflector, ngModule, extraProviders, sourceSpan) {\n        var _this = this;\n        this.reflector = reflector;\n        this._transformedProviders = new Map();\n        this._seenProviders = new Map();\n        this._errors = [];\n        this._allProviders = new Map();\n        ngModule.transitiveModule.modules.forEach(function (ngModuleType) {\n            var /** @type {?} */ ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType };\n            _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders, /* isModule */ /* isModule */ true);\n        });\n        _resolveProviders(ngModule.transitiveModule.providers.map(function (entry) { return entry.provider; }).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders, /* isModule */ false);\n    }\n    /**\n     * @return {?}\n     */\n    NgModuleProviderAnalyzer.prototype.parse = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        Array.from(this._allProviders.values()).forEach(function (provider) {\n            _this._getOrCreateLocalProvider(provider.token, provider.eager);\n        });\n        if (this._errors.length > 0) {\n            var /** @type {?} */ errorString = this._errors.join('\\n');\n            throw new Error(\"Provider parse errors:\\n\" + errorString);\n        }\n        // Note: Maps keep their insertion order.\n        var /** @type {?} */ lazyProviders = [];\n        var /** @type {?} */ eagerProviders = [];\n        this._transformedProviders.forEach(function (provider) {\n            if (provider.eager) {\n                eagerProviders.push(provider);\n            }\n            else {\n                lazyProviders.push(provider);\n            }\n        });\n        return lazyProviders.concat(eagerProviders);\n    };\n    /**\n     * @param {?} token\n     * @param {?} eager\n     * @return {?}\n     */\n    NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = /**\n     * @param {?} token\n     * @param {?} eager\n     * @return {?}\n     */\n    function (token, eager) {\n        var _this = this;\n        var /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));\n        if (!resolvedProvider) {\n            return null;\n        }\n        var /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n        if (transformedProviderAst) {\n            return transformedProviderAst;\n        }\n        if (this._seenProviders.get(tokenReference(token)) != null) {\n            this._errors.push(new ProviderError(\"Cannot instantiate cyclic dependency! \" + tokenName(token), resolvedProvider.sourceSpan));\n            return null;\n        }\n        this._seenProviders.set(tokenReference(token), true);\n        var /** @type {?} */ transformedProviders = resolvedProvider.providers.map(function (provider) {\n            var /** @type {?} */ transformedUseValue = provider.useValue;\n            var /** @type {?} */ transformedUseExisting = /** @type {?} */ ((provider.useExisting));\n            var /** @type {?} */ transformedDeps = /** @type {?} */ ((undefined));\n            if (provider.useExisting != null) {\n                var /** @type {?} */ existingDiDep = _this._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan);\n                if (existingDiDep.token != null) {\n                    transformedUseExisting = existingDiDep.token;\n                }\n                else {\n                    transformedUseExisting = /** @type {?} */ ((null));\n                    transformedUseValue = existingDiDep.value;\n                }\n            }\n            else if (provider.useFactory) {\n                var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;\n                transformedDeps =\n                    deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });\n            }\n            else if (provider.useClass) {\n                var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;\n                transformedDeps =\n                    deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });\n            }\n            return _transformProvider(provider, {\n                useExisting: transformedUseExisting,\n                useValue: transformedUseValue,\n                deps: transformedDeps\n            });\n        });\n        transformedProviderAst =\n            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });\n        this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n        return transformedProviderAst;\n    };\n    /**\n     * @param {?} dep\n     * @param {?=} eager\n     * @param {?=} requestorSourceSpan\n     * @return {?}\n     */\n    NgModuleProviderAnalyzer.prototype._getDependency = /**\n     * @param {?} dep\n     * @param {?=} eager\n     * @param {?=} requestorSourceSpan\n     * @return {?}\n     */\n    function (dep, eager, requestorSourceSpan) {\n        if (eager === void 0) { eager = false; }\n        var /** @type {?} */ foundLocal = false;\n        if (!dep.isSkipSelf && dep.token != null) {\n            // access the injector\n            if (tokenReference(dep.token) ===\n                this.reflector.resolveExternalReference(Identifiers.Injector) ||\n                tokenReference(dep.token) ===\n                    this.reflector.resolveExternalReference(Identifiers.ComponentFactoryResolver)) {\n                foundLocal = true;\n                // access providers\n            }\n            else if (this._getOrCreateLocalProvider(dep.token, eager) != null) {\n                foundLocal = true;\n            }\n        }\n        return dep;\n    };\n    return NgModuleProviderAnalyzer;\n}());\nexport { NgModuleProviderAnalyzer };\nfunction NgModuleProviderAnalyzer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleProviderAnalyzer.prototype._transformedProviders;\n    /** @type {?} */\n    NgModuleProviderAnalyzer.prototype._seenProviders;\n    /** @type {?} */\n    NgModuleProviderAnalyzer.prototype._allProviders;\n    /** @type {?} */\n    NgModuleProviderAnalyzer.prototype._errors;\n    /** @type {?} */\n    NgModuleProviderAnalyzer.prototype.reflector;\n}\n/**\n * @param {?} provider\n * @param {?} __1\n * @return {?}\n */\nfunction _transformProvider(provider, _a) {\n    var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;\n    return {\n        token: provider.token,\n        useClass: provider.useClass,\n        useExisting: useExisting,\n        useFactory: provider.useFactory,\n        useValue: useValue,\n        deps: deps,\n        multi: provider.multi\n    };\n}\n/**\n * @param {?} provider\n * @param {?} __1\n * @return {?}\n */\nfunction _transformProviderAst(provider, _a) {\n    var eager = _a.eager, providers = _a.providers;\n    return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan, provider.isModule);\n}\n/**\n * @param {?} directives\n * @param {?} sourceSpan\n * @param {?} targetErrors\n * @return {?}\n */\nfunction _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {\n    var /** @type {?} */ providersByToken = new Map();\n    directives.forEach(function (directive) {\n        var /** @type {?} */ dirProvider = { token: { identifier: directive.type }, useClass: directive.type };\n        _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken, /* isModule */ /* isModule */ false);\n    });\n    // Note: directives need to be able to overwrite providers of a component!\n    var /** @type {?} */ directivesWithComponentFirst = directives.filter(function (dir) { return dir.isComponent; }).concat(directives.filter(function (dir) { return !dir.isComponent; }));\n    directivesWithComponentFirst.forEach(function (directive) {\n        _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken, /* isModule */ /* isModule */ false);\n        _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken, /* isModule */ /* isModule */ false);\n    });\n    return providersByToken;\n}\n/**\n * @param {?} providers\n * @param {?} providerType\n * @param {?} eager\n * @param {?} sourceSpan\n * @param {?} targetErrors\n * @param {?} targetProvidersByToken\n * @param {?} isModule\n * @return {?}\n */\nfunction _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken, isModule) {\n    providers.forEach(function (provider) {\n        var /** @type {?} */ resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));\n        if (resolvedProvider != null && !!resolvedProvider.multiProvider !== !!provider.multi) {\n            targetErrors.push(new ProviderError(\"Mixing multi and non multi provider is not possible for token \" + tokenName(resolvedProvider.token), sourceSpan));\n        }\n        if (!resolvedProvider) {\n            var /** @type {?} */ lifecycleHooks = provider.token.identifier &&\n                (/** @type {?} */ (provider.token.identifier)).lifecycleHooks ?\n                (/** @type {?} */ (provider.token.identifier)).lifecycleHooks :\n                [];\n            var /** @type {?} */ isUseValue = !(provider.useClass || provider.useExisting || provider.useFactory);\n            resolvedProvider = new ProviderAst(provider.token, !!provider.multi, eager || isUseValue, [provider], providerType, lifecycleHooks, sourceSpan, isModule);\n            targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);\n        }\n        else {\n            if (!provider.multi) {\n                resolvedProvider.providers.length = 0;\n            }\n            resolvedProvider.providers.push(provider);\n        }\n    });\n}\n/**\n * @param {?} component\n * @return {?}\n */\nfunction _getViewQueries(component) {\n    // Note: queries start with id 1 so we can use the number in a Bloom filter!\n    var /** @type {?} */ viewQueryId = 1;\n    var /** @type {?} */ viewQueries = new Map();\n    if (component.viewQueries) {\n        component.viewQueries.forEach(function (query) { return _addQueryToTokenMap(viewQueries, { meta: query, queryId: viewQueryId++ }); });\n    }\n    return viewQueries;\n}\n/**\n * @param {?} contentQueryStartId\n * @param {?} directives\n * @return {?}\n */\nfunction _getContentQueries(contentQueryStartId, directives) {\n    var /** @type {?} */ contentQueryId = contentQueryStartId;\n    var /** @type {?} */ contentQueries = new Map();\n    directives.forEach(function (directive, directiveIndex) {\n        if (directive.queries) {\n            directive.queries.forEach(function (query) { return _addQueryToTokenMap(contentQueries, { meta: query, queryId: contentQueryId++ }); });\n        }\n    });\n    return contentQueries;\n}\n/**\n * @param {?} map\n * @param {?} query\n * @return {?}\n */\nfunction _addQueryToTokenMap(map, query) {\n    query.meta.selectors.forEach(function (token) {\n        var /** @type {?} */ entry = map.get(tokenReference(token));\n        if (!entry) {\n            entry = [];\n            map.set(tokenReference(token), entry);\n        }\n        entry.push(query);\n    });\n}\n//# sourceMappingURL=provider_analyzer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Identifiers, createTokenForExternalReference } from '../identifiers';\nimport { LifecycleHooks } from '../lifecycle_reflector';\nimport * as o from '../output/output_ast';\nimport { convertValueToOutputAst } from '../output/value_util';\nimport { ProviderAstType } from '../template_parser/template_ast';\n/**\n * @param {?} ctx\n * @param {?} providerAst\n * @return {?}\n */\nexport function providerDef(ctx, providerAst) {\n    var /** @type {?} */ flags = 0 /* None */;\n    if (!providerAst.eager) {\n        flags |= 4096 /* LazyProvider */;\n    }\n    if (providerAst.providerType === ProviderAstType.PrivateService) {\n        flags |= 8192 /* PrivateProvider */;\n    }\n    if (providerAst.isModule) {\n        flags |= 1073741824 /* TypeModuleProvider */;\n    }\n    providerAst.lifecycleHooks.forEach(function (lifecycleHook) {\n        // for regular providers, we only support ngOnDestroy\n        if (lifecycleHook === LifecycleHooks.OnDestroy ||\n            providerAst.providerType === ProviderAstType.Directive ||\n            providerAst.providerType === ProviderAstType.Component) {\n            flags |= lifecycleHookToNodeFlag(lifecycleHook);\n        }\n    });\n    var _a = providerAst.multiProvider ?\n        multiProviderDef(ctx, flags, providerAst.providers) :\n        singleProviderDef(ctx, flags, providerAst.providerType, providerAst.providers[0]), providerExpr = _a.providerExpr, providerFlags = _a.flags, depsExpr = _a.depsExpr;\n    return {\n        providerExpr: providerExpr,\n        flags: providerFlags, depsExpr: depsExpr,\n        tokenExpr: tokenExpr(ctx, providerAst.token),\n    };\n}\n/**\n * @param {?} ctx\n * @param {?} flags\n * @param {?} providers\n * @return {?}\n */\nfunction multiProviderDef(ctx, flags, providers) {\n    var /** @type {?} */ allDepDefs = [];\n    var /** @type {?} */ allParams = [];\n    var /** @type {?} */ exprs = providers.map(function (provider, providerIndex) {\n        var /** @type {?} */ expr;\n        if (provider.useClass) {\n            var /** @type {?} */ depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);\n            expr = ctx.importExpr(provider.useClass.reference).instantiate(depExprs);\n        }\n        else if (provider.useFactory) {\n            var /** @type {?} */ depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);\n            expr = ctx.importExpr(provider.useFactory.reference).callFn(depExprs);\n        }\n        else if (provider.useExisting) {\n            var /** @type {?} */ depExprs = convertDeps(providerIndex, [{ token: provider.useExisting }]);\n            expr = depExprs[0];\n        }\n        else {\n            expr = convertValueToOutputAst(ctx, provider.useValue);\n        }\n        return expr;\n    });\n    var /** @type {?} */ providerExpr = o.fn(allParams, [new o.ReturnStatement(o.literalArr(exprs))], o.INFERRED_TYPE);\n    return {\n        providerExpr: providerExpr,\n        flags: flags | 1024 /* TypeFactoryProvider */,\n        depsExpr: o.literalArr(allDepDefs)\n    };\n    /**\n     * @param {?} providerIndex\n     * @param {?} deps\n     * @return {?}\n     */\n    function convertDeps(providerIndex, deps) {\n        return deps.map(function (dep, depIndex) {\n            var /** @type {?} */ paramName = \"p\" + providerIndex + \"_\" + depIndex;\n            allParams.push(new o.FnParam(paramName, o.DYNAMIC_TYPE));\n            allDepDefs.push(depDef(ctx, dep));\n            return o.variable(paramName);\n        });\n    }\n}\n/**\n * @param {?} ctx\n * @param {?} flags\n * @param {?} providerType\n * @param {?} providerMeta\n * @return {?}\n */\nfunction singleProviderDef(ctx, flags, providerType, providerMeta) {\n    var /** @type {?} */ providerExpr;\n    var /** @type {?} */ deps;\n    if (providerType === ProviderAstType.Directive || providerType === ProviderAstType.Component) {\n        providerExpr = ctx.importExpr(/** @type {?} */ ((providerMeta.useClass)).reference);\n        flags |= 16384 /* TypeDirective */;\n        deps = providerMeta.deps || /** @type {?} */ ((providerMeta.useClass)).diDeps;\n    }\n    else {\n        if (providerMeta.useClass) {\n            providerExpr = ctx.importExpr(providerMeta.useClass.reference);\n            flags |= 512 /* TypeClassProvider */;\n            deps = providerMeta.deps || providerMeta.useClass.diDeps;\n        }\n        else if (providerMeta.useFactory) {\n            providerExpr = ctx.importExpr(providerMeta.useFactory.reference);\n            flags |= 1024 /* TypeFactoryProvider */;\n            deps = providerMeta.deps || providerMeta.useFactory.diDeps;\n        }\n        else if (providerMeta.useExisting) {\n            providerExpr = o.NULL_EXPR;\n            flags |= 2048 /* TypeUseExistingProvider */;\n            deps = [{ token: providerMeta.useExisting }];\n        }\n        else {\n            providerExpr = convertValueToOutputAst(ctx, providerMeta.useValue);\n            flags |= 256 /* TypeValueProvider */;\n            deps = [];\n        }\n    }\n    var /** @type {?} */ depsExpr = o.literalArr(deps.map(function (dep) { return depDef(ctx, dep); }));\n    return { providerExpr: providerExpr, flags: flags, depsExpr: depsExpr };\n}\n/**\n * @param {?} ctx\n * @param {?} tokenMeta\n * @return {?}\n */\nfunction tokenExpr(ctx, tokenMeta) {\n    return tokenMeta.identifier ? ctx.importExpr(tokenMeta.identifier.reference) :\n        o.literal(tokenMeta.value);\n}\n/**\n * @param {?} ctx\n * @param {?} dep\n * @return {?}\n */\nexport function depDef(ctx, dep) {\n    // Note: the following fields have already been normalized out by provider_analyzer:\n    // - isAttribute, isHost\n    var /** @type {?} */ expr = dep.isValue ? convertValueToOutputAst(ctx, dep.value) : tokenExpr(ctx, /** @type {?} */ ((dep.token)));\n    var /** @type {?} */ flags = 0 /* None */;\n    if (dep.isSkipSelf) {\n        flags |= 1 /* SkipSelf */;\n    }\n    if (dep.isOptional) {\n        flags |= 2 /* Optional */;\n    }\n    if (dep.isSelf) {\n        flags |= 4 /* Self */;\n    }\n    if (dep.isValue) {\n        flags |= 8 /* Value */;\n    }\n    return flags === 0 /* None */ ? expr : o.literalArr([o.literal(flags), expr]);\n}\n/**\n * @param {?} lifecycleHook\n * @return {?}\n */\nexport function lifecycleHookToNodeFlag(lifecycleHook) {\n    var /** @type {?} */ nodeFlag = 0 /* None */;\n    switch (lifecycleHook) {\n        case LifecycleHooks.AfterContentChecked:\n            nodeFlag = 2097152 /* AfterContentChecked */;\n            break;\n        case LifecycleHooks.AfterContentInit:\n            nodeFlag = 1048576 /* AfterContentInit */;\n            break;\n        case LifecycleHooks.AfterViewChecked:\n            nodeFlag = 8388608 /* AfterViewChecked */;\n            break;\n        case LifecycleHooks.AfterViewInit:\n            nodeFlag = 4194304 /* AfterViewInit */;\n            break;\n        case LifecycleHooks.DoCheck:\n            nodeFlag = 262144 /* DoCheck */;\n            break;\n        case LifecycleHooks.OnChanges:\n            nodeFlag = 524288 /* OnChanges */;\n            break;\n        case LifecycleHooks.OnDestroy:\n            nodeFlag = 131072 /* OnDestroy */;\n            break;\n        case LifecycleHooks.OnInit:\n            nodeFlag = 65536 /* OnInit */;\n            break;\n    }\n    return nodeFlag;\n}\n/**\n * @param {?} reflector\n * @param {?} ctx\n * @param {?} flags\n * @param {?} entryComponents\n * @return {?}\n */\nexport function componentFactoryResolverProviderDef(reflector, ctx, flags, entryComponents) {\n    var /** @type {?} */ entryComponentFactories = entryComponents.map(function (entryComponent) { return ctx.importExpr(entryComponent.componentFactory); });\n    var /** @type {?} */ token = createTokenForExternalReference(reflector, Identifiers.ComponentFactoryResolver);\n    var /** @type {?} */ classMeta = {\n        diDeps: [\n            { isValue: true, value: o.literalArr(entryComponentFactories) },\n            { token: token, isSkipSelf: true, isOptional: true },\n            { token: createTokenForExternalReference(reflector, Identifiers.NgModuleRef) },\n        ],\n        lifecycleHooks: [],\n        reference: reflector.resolveExternalReference(Identifiers.CodegenComponentFactoryResolver)\n    };\n    var _a = singleProviderDef(ctx, flags, ProviderAstType.PrivateService, {\n        token: token,\n        multi: false,\n        useClass: classMeta,\n    }), providerExpr = _a.providerExpr, providerFlags = _a.flags, depsExpr = _a.depsExpr;\n    return { providerExpr: providerExpr, flags: providerFlags, depsExpr: depsExpr, tokenExpr: tokenExpr(ctx, token) };\n}\n//# sourceMappingURL=provider_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { identifierName } from './compile_metadata';\nimport { Identifiers } from './identifiers';\nimport * as o from './output/output_ast';\nimport { typeSourceSpan } from './parse_util';\nimport { NgModuleProviderAnalyzer } from './provider_analyzer';\nimport { componentFactoryResolverProviderDef, providerDef } from './view_compiler/provider_compiler';\nvar NgModuleCompileResult = /** @class */ (function () {\n    function NgModuleCompileResult(ngModuleFactoryVar) {\n        this.ngModuleFactoryVar = ngModuleFactoryVar;\n    }\n    return NgModuleCompileResult;\n}());\nexport { NgModuleCompileResult };\nfunction NgModuleCompileResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleCompileResult.prototype.ngModuleFactoryVar;\n}\nvar /** @type {?} */ LOG_VAR = o.variable('_l');\nvar NgModuleCompiler = /** @class */ (function () {\n    function NgModuleCompiler(reflector) {\n        this.reflector = reflector;\n    }\n    /**\n     * @param {?} ctx\n     * @param {?} ngModuleMeta\n     * @param {?} extraProviders\n     * @return {?}\n     */\n    NgModuleCompiler.prototype.compile = /**\n     * @param {?} ctx\n     * @param {?} ngModuleMeta\n     * @param {?} extraProviders\n     * @return {?}\n     */\n    function (ctx, ngModuleMeta, extraProviders) {\n        var /** @type {?} */ sourceSpan = typeSourceSpan('NgModule', ngModuleMeta.type);\n        var /** @type {?} */ entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents;\n        var /** @type {?} */ bootstrapComponents = ngModuleMeta.bootstrapComponents;\n        var /** @type {?} */ providerParser = new NgModuleProviderAnalyzer(this.reflector, ngModuleMeta, extraProviders, sourceSpan);\n        var /** @type {?} */ providerDefs = [componentFactoryResolverProviderDef(this.reflector, ctx, 0 /* None */, entryComponentFactories)]\n            .concat(providerParser.parse().map(function (provider) { return providerDef(ctx, provider); }))\n            .map(function (_a) {\n            var providerExpr = _a.providerExpr, depsExpr = _a.depsExpr, flags = _a.flags, tokenExpr = _a.tokenExpr;\n            return o.importExpr(Identifiers.moduleProviderDef).callFn([\n                o.literal(flags), tokenExpr, providerExpr, depsExpr\n            ]);\n        });\n        var /** @type {?} */ ngModuleDef = o.importExpr(Identifiers.moduleDef).callFn([o.literalArr(providerDefs)]);\n        var /** @type {?} */ ngModuleDefFactory = o.fn([new o.FnParam(/** @type {?} */ ((LOG_VAR.name)))], [new o.ReturnStatement(ngModuleDef)], o.INFERRED_TYPE);\n        var /** @type {?} */ ngModuleFactoryVar = identifierName(ngModuleMeta.type) + \"NgFactory\";\n        this._createNgModuleFactory(ctx, ngModuleMeta.type.reference, o.importExpr(Identifiers.createModuleFactory).callFn([\n            ctx.importExpr(ngModuleMeta.type.reference),\n            o.literalArr(bootstrapComponents.map(function (id) { return ctx.importExpr(id.reference); })),\n            ngModuleDefFactory\n        ]));\n        if (ngModuleMeta.id) {\n            var /** @type {?} */ id = typeof ngModuleMeta.id === 'string' ? o.literal(ngModuleMeta.id) :\n                ctx.importExpr(ngModuleMeta.id);\n            var /** @type {?} */ registerFactoryStmt = o.importExpr(Identifiers.RegisterModuleFactoryFn)\n                .callFn([id, o.variable(ngModuleFactoryVar)])\n                .toStmt();\n            ctx.statements.push(registerFactoryStmt);\n        }\n        return new NgModuleCompileResult(ngModuleFactoryVar);\n    };\n    /**\n     * @param {?} ctx\n     * @param {?} ngModuleReference\n     * @return {?}\n     */\n    NgModuleCompiler.prototype.createStub = /**\n     * @param {?} ctx\n     * @param {?} ngModuleReference\n     * @return {?}\n     */\n    function (ctx, ngModuleReference) {\n        this._createNgModuleFactory(ctx, ngModuleReference, o.NULL_EXPR);\n    };\n    /**\n     * @param {?} ctx\n     * @param {?} reference\n     * @param {?} value\n     * @return {?}\n     */\n    NgModuleCompiler.prototype._createNgModuleFactory = /**\n     * @param {?} ctx\n     * @param {?} reference\n     * @param {?} value\n     * @return {?}\n     */\n    function (ctx, reference, value) {\n        var /** @type {?} */ ngModuleFactoryVar = identifierName({ reference: reference }) + \"NgFactory\";\n        var /** @type {?} */ ngModuleFactoryStmt = o.variable(ngModuleFactoryVar)\n            .set(value)\n            .toDeclStmt(o.importType(Identifiers.NgModuleFactory, [/** @type {?} */ ((o.expressionType(ctx.importExpr(reference))))], [o.TypeModifier.Const]), [o.StmtModifier.Final, o.StmtModifier.Exported]);\n        ctx.statements.push(ngModuleFactoryStmt);\n    };\n    return NgModuleCompiler;\n}());\nexport { NgModuleCompiler };\nfunction NgModuleCompiler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleCompiler.prototype.reflector;\n}\n//# sourceMappingURL=ng_module_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { createNgModule } from './core';\nimport { findLast } from './directive_resolver';\nimport { stringify } from './util';\n/**\n * Resolves types to {\\@link NgModule}.\n */\nvar /**\n * Resolves types to {\\@link NgModule}.\n */\nNgModuleResolver = /** @class */ (function () {\n    function NgModuleResolver(_reflector) {\n        this._reflector = _reflector;\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    NgModuleResolver.prototype.isNgModule = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this._reflector.annotations(type).some(createNgModule.isTypeOf); };\n    /**\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    NgModuleResolver.prototype.resolve = /**\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var /** @type {?} */ ngModuleMeta = findLast(this._reflector.annotations(type), createNgModule.isTypeOf);\n        if (ngModuleMeta) {\n            return ngModuleMeta;\n        }\n        else {\n            if (throwIfNotFound) {\n                throw new Error(\"No NgModule metadata found for '\" + stringify(type) + \"'.\");\n            }\n            return null;\n        }\n    };\n    return NgModuleResolver;\n}());\n/**\n * Resolves types to {\\@link NgModule}.\n */\nexport { NgModuleResolver };\nfunction NgModuleResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleResolver.prototype._reflector;\n}\n//# sourceMappingURL=ng_module_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { utf8Encode } from '../util';\n// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\nvar /** @type {?} */ VERSION = 3;\nvar /** @type {?} */ JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';\nvar SourceMapGenerator = /** @class */ (function () {\n    function SourceMapGenerator(file) {\n        if (file === void 0) { file = null; }\n        this.file = file;\n        this.sourcesContent = new Map();\n        this.lines = [];\n        this.lastCol0 = 0;\n        this.hasMappings = false;\n    }\n    // The content is `null` when the content is expected to be loaded using the URL\n    /**\n     * @param {?} url\n     * @param {?=} content\n     * @return {?}\n     */\n    SourceMapGenerator.prototype.addSource = /**\n     * @param {?} url\n     * @param {?=} content\n     * @return {?}\n     */\n    function (url, content) {\n        if (content === void 0) { content = null; }\n        if (!this.sourcesContent.has(url)) {\n            this.sourcesContent.set(url, content);\n        }\n        return this;\n    };\n    /**\n     * @return {?}\n     */\n    SourceMapGenerator.prototype.addLine = /**\n     * @return {?}\n     */\n    function () {\n        this.lines.push([]);\n        this.lastCol0 = 0;\n        return this;\n    };\n    /**\n     * @param {?} col0\n     * @param {?=} sourceUrl\n     * @param {?=} sourceLine0\n     * @param {?=} sourceCol0\n     * @return {?}\n     */\n    SourceMapGenerator.prototype.addMapping = /**\n     * @param {?} col0\n     * @param {?=} sourceUrl\n     * @param {?=} sourceLine0\n     * @param {?=} sourceCol0\n     * @return {?}\n     */\n    function (col0, sourceUrl, sourceLine0, sourceCol0) {\n        if (!this.currentLine) {\n            throw new Error(\"A line must be added before mappings can be added\");\n        }\n        if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {\n            throw new Error(\"Unknown source file \\\"\" + sourceUrl + \"\\\"\");\n        }\n        if (col0 == null) {\n            throw new Error(\"The column in the generated code must be provided\");\n        }\n        if (col0 < this.lastCol0) {\n            throw new Error(\"Mapping should be added in output order\");\n        }\n        if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {\n            throw new Error(\"The source location must be provided when a source url is provided\");\n        }\n        this.hasMappings = true;\n        this.lastCol0 = col0;\n        this.currentLine.push({ col0: col0, sourceUrl: sourceUrl, sourceLine0: sourceLine0, sourceCol0: sourceCol0 });\n        return this;\n    };\n    Object.defineProperty(SourceMapGenerator.prototype, \"currentLine\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.lines.slice(-1)[0]; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    SourceMapGenerator.prototype.toJSON = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.hasMappings) {\n            return null;\n        }\n        var /** @type {?} */ sourcesIndex = new Map();\n        var /** @type {?} */ sources = [];\n        var /** @type {?} */ sourcesContent = [];\n        Array.from(this.sourcesContent.keys()).forEach(function (url, i) {\n            sourcesIndex.set(url, i);\n            sources.push(url);\n            sourcesContent.push(_this.sourcesContent.get(url) || null);\n        });\n        var /** @type {?} */ mappings = '';\n        var /** @type {?} */ lastCol0 = 0;\n        var /** @type {?} */ lastSourceIndex = 0;\n        var /** @type {?} */ lastSourceLine0 = 0;\n        var /** @type {?} */ lastSourceCol0 = 0;\n        this.lines.forEach(function (segments) {\n            lastCol0 = 0;\n            mappings += segments\n                .map(function (segment) {\n                // zero-based starting column of the line in the generated code\n                var /** @type {?} */ segAsStr = toBase64VLQ(segment.col0 - lastCol0);\n                lastCol0 = segment.col0;\n                if (segment.sourceUrl != null) {\n                    // zero-based index into the “sources” list\n                    segAsStr +=\n                        toBase64VLQ(/** @type {?} */ ((sourcesIndex.get(segment.sourceUrl))) - lastSourceIndex);\n                    lastSourceIndex = /** @type {?} */ ((sourcesIndex.get(segment.sourceUrl)));\n                    // the zero-based starting line in the original source\n                    segAsStr += toBase64VLQ(/** @type {?} */ ((segment.sourceLine0)) - lastSourceLine0);\n                    lastSourceLine0 = /** @type {?} */ ((segment.sourceLine0));\n                    // the zero-based starting column in the original source\n                    segAsStr += toBase64VLQ(/** @type {?} */ ((segment.sourceCol0)) - lastSourceCol0);\n                    lastSourceCol0 = /** @type {?} */ ((segment.sourceCol0));\n                }\n                return segAsStr;\n            })\n                .join(',');\n            mappings += ';';\n        });\n        mappings = mappings.slice(0, -1);\n        return {\n            'file': this.file || '',\n            'version': VERSION,\n            'sourceRoot': '',\n            'sources': sources,\n            'sourcesContent': sourcesContent,\n            'mappings': mappings,\n        };\n    };\n    /**\n     * @return {?}\n     */\n    SourceMapGenerator.prototype.toJsComment = /**\n     * @return {?}\n     */\n    function () {\n        return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) :\n            '';\n    };\n    return SourceMapGenerator;\n}());\nexport { SourceMapGenerator };\nfunction SourceMapGenerator_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SourceMapGenerator.prototype.sourcesContent;\n    /** @type {?} */\n    SourceMapGenerator.prototype.lines;\n    /** @type {?} */\n    SourceMapGenerator.prototype.lastCol0;\n    /** @type {?} */\n    SourceMapGenerator.prototype.hasMappings;\n    /** @type {?} */\n    SourceMapGenerator.prototype.file;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function toBase64String(value) {\n    var /** @type {?} */ b64 = '';\n    value = utf8Encode(value);\n    for (var /** @type {?} */ i = 0; i < value.length;) {\n        var /** @type {?} */ i1 = value.charCodeAt(i++);\n        var /** @type {?} */ i2 = value.charCodeAt(i++);\n        var /** @type {?} */ i3 = value.charCodeAt(i++);\n        b64 += toBase64Digit(i1 >> 2);\n        b64 += toBase64Digit(((i1 & 3) << 4) | (isNaN(i2) ? 0 : i2 >> 4));\n        b64 += isNaN(i2) ? '=' : toBase64Digit(((i2 & 15) << 2) | (i3 >> 6));\n        b64 += isNaN(i2) || isNaN(i3) ? '=' : toBase64Digit(i3 & 63);\n    }\n    return b64;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction toBase64VLQ(value) {\n    value = value < 0 ? ((-value) << 1) + 1 : value << 1;\n    var /** @type {?} */ out = '';\n    do {\n        var /** @type {?} */ digit = value & 31;\n        value = value >> 5;\n        if (value > 0) {\n            digit = digit | 32;\n        }\n        out += toBase64Digit(digit);\n    } while (value > 0);\n    return out;\n}\nvar /** @type {?} */ B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n/**\n * @param {?} value\n * @return {?}\n */\nfunction toBase64Digit(value) {\n    if (value < 0 || value >= 64) {\n        throw new Error(\"Can only encode value in the range [0, 63]\");\n    }\n    return B64_DIGITS[value];\n}\n//# sourceMappingURL=source_map.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as o from './output_ast';\nimport { SourceMapGenerator } from './source_map';\nvar /** @type {?} */ _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\nvar /** @type {?} */ _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\nvar /** @type {?} */ _INDENT_WITH = '  ';\nexport var /** @type {?} */ CATCH_ERROR_VAR = o.variable('error', null, null);\nexport var /** @type {?} */ CATCH_STACK_VAR = o.variable('stack', null, null);\n/**\n * @record\n */\nexport function OutputEmitter() { }\nfunction OutputEmitter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    OutputEmitter.prototype.emitStatements;\n}\nvar _EmittedLine = /** @class */ (function () {\n    function _EmittedLine(indent) {\n        this.indent = indent;\n        this.partsLength = 0;\n        this.parts = [];\n        this.srcSpans = [];\n    }\n    return _EmittedLine;\n}());\nfunction _EmittedLine_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _EmittedLine.prototype.partsLength;\n    /** @type {?} */\n    _EmittedLine.prototype.parts;\n    /** @type {?} */\n    _EmittedLine.prototype.srcSpans;\n    /** @type {?} */\n    _EmittedLine.prototype.indent;\n}\nvar EmitterVisitorContext = /** @class */ (function () {\n    function EmitterVisitorContext(_indent) {\n        this._indent = _indent;\n        this._classes = [];\n        this._preambleLineCount = 0;\n        this._lines = [new _EmittedLine(_indent)];\n    }\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.createRoot = /**\n     * @return {?}\n     */\n    function () { return new EmitterVisitorContext(0); };\n    Object.defineProperty(EmitterVisitorContext.prototype, \"_currentLine\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._lines[this._lines.length - 1]; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?=} from\n     * @param {?=} lastPart\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.println = /**\n     * @param {?=} from\n     * @param {?=} lastPart\n     * @return {?}\n     */\n    function (from, lastPart) {\n        if (lastPart === void 0) { lastPart = ''; }\n        this.print(from || null, lastPart, true);\n    };\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.lineIsEmpty = /**\n     * @return {?}\n     */\n    function () { return this._currentLine.parts.length === 0; };\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.lineLength = /**\n     * @return {?}\n     */\n    function () {\n        return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;\n    };\n    /**\n     * @param {?} from\n     * @param {?} part\n     * @param {?=} newLine\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.print = /**\n     * @param {?} from\n     * @param {?} part\n     * @param {?=} newLine\n     * @return {?}\n     */\n    function (from, part, newLine) {\n        if (newLine === void 0) { newLine = false; }\n        if (part.length > 0) {\n            this._currentLine.parts.push(part);\n            this._currentLine.partsLength += part.length;\n            this._currentLine.srcSpans.push(from && from.sourceSpan || null);\n        }\n        if (newLine) {\n            this._lines.push(new _EmittedLine(this._indent));\n        }\n    };\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.removeEmptyLastLine = /**\n     * @return {?}\n     */\n    function () {\n        if (this.lineIsEmpty()) {\n            this._lines.pop();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.incIndent = /**\n     * @return {?}\n     */\n    function () {\n        this._indent++;\n        if (this.lineIsEmpty()) {\n            this._currentLine.indent = this._indent;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.decIndent = /**\n     * @return {?}\n     */\n    function () {\n        this._indent--;\n        if (this.lineIsEmpty()) {\n            this._currentLine.indent = this._indent;\n        }\n    };\n    /**\n     * @param {?} clazz\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.pushClass = /**\n     * @param {?} clazz\n     * @return {?}\n     */\n    function (clazz) { this._classes.push(clazz); };\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.popClass = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((this._classes.pop())); };\n    Object.defineProperty(EmitterVisitorContext.prototype, \"currentClass\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.toSource = /**\n     * @return {?}\n     */\n    function () {\n        return this.sourceLines\n            .map(function (l) { return l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : ''; })\n            .join('\\n');\n    };\n    /**\n     * @param {?} genFilePath\n     * @param {?=} startsAtLine\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.toSourceMapGenerator = /**\n     * @param {?} genFilePath\n     * @param {?=} startsAtLine\n     * @return {?}\n     */\n    function (genFilePath, startsAtLine) {\n        if (startsAtLine === void 0) { startsAtLine = 0; }\n        var /** @type {?} */ map = new SourceMapGenerator(genFilePath);\n        var /** @type {?} */ firstOffsetMapped = false;\n        var /** @type {?} */ mapFirstOffsetIfNeeded = function () {\n            if (!firstOffsetMapped) {\n                // Add a single space so that tools won't try to load the file from disk.\n                // Note: We are using virtual urls like `ng:///`, so we have to\n                // provide a content here.\n                map.addSource(genFilePath, ' ').addMapping(0, genFilePath, 0, 0);\n                firstOffsetMapped = true;\n            }\n        };\n        for (var /** @type {?} */ i = 0; i < startsAtLine; i++) {\n            map.addLine();\n            mapFirstOffsetIfNeeded();\n        }\n        this.sourceLines.forEach(function (line, lineIdx) {\n            map.addLine();\n            var /** @type {?} */ spans = line.srcSpans;\n            var /** @type {?} */ parts = line.parts;\n            var /** @type {?} */ col0 = line.indent * _INDENT_WITH.length;\n            var /** @type {?} */ spanIdx = 0;\n            // skip leading parts without source spans\n            while (spanIdx < spans.length && !spans[spanIdx]) {\n                col0 += parts[spanIdx].length;\n                spanIdx++;\n            }\n            if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {\n                firstOffsetMapped = true;\n            }\n            else {\n                mapFirstOffsetIfNeeded();\n            }\n            while (spanIdx < spans.length) {\n                var /** @type {?} */ span = /** @type {?} */ ((spans[spanIdx]));\n                var /** @type {?} */ source = span.start.file;\n                var /** @type {?} */ sourceLine = span.start.line;\n                var /** @type {?} */ sourceCol = span.start.col;\n                map.addSource(source.url, source.content)\n                    .addMapping(col0, source.url, sourceLine, sourceCol);\n                col0 += parts[spanIdx].length;\n                spanIdx++;\n                // assign parts without span or the same span to the previous segment\n                while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {\n                    col0 += parts[spanIdx].length;\n                    spanIdx++;\n                }\n            }\n        });\n        return map;\n    };\n    /**\n     * @param {?} count\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.setPreambleLineCount = /**\n     * @param {?} count\n     * @return {?}\n     */\n    function (count) { return this._preambleLineCount = count; };\n    /**\n     * @param {?} line\n     * @param {?} column\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.spanOf = /**\n     * @param {?} line\n     * @param {?} column\n     * @return {?}\n     */\n    function (line, column) {\n        var /** @type {?} */ emittedLine = this._lines[line - this._preambleLineCount];\n        if (emittedLine) {\n            var /** @type {?} */ columnsLeft = column - _createIndent(emittedLine.indent).length;\n            for (var /** @type {?} */ partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {\n                var /** @type {?} */ part = emittedLine.parts[partIndex];\n                if (part.length > columnsLeft) {\n                    return emittedLine.srcSpans[partIndex];\n                }\n                columnsLeft -= part.length;\n            }\n        }\n        return null;\n    };\n    Object.defineProperty(EmitterVisitorContext.prototype, \"sourceLines\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {\n                return this._lines.slice(0, -1);\n            }\n            return this._lines;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return EmitterVisitorContext;\n}());\nexport { EmitterVisitorContext };\nfunction EmitterVisitorContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    EmitterVisitorContext.prototype._lines;\n    /** @type {?} */\n    EmitterVisitorContext.prototype._classes;\n    /** @type {?} */\n    EmitterVisitorContext.prototype._preambleLineCount;\n    /** @type {?} */\n    EmitterVisitorContext.prototype._indent;\n}\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nAbstractEmitterVisitor = /** @class */ (function () {\n    function AbstractEmitterVisitor(_escapeDollarInStrings) {\n        this._escapeDollarInStrings = _escapeDollarInStrings;\n    }\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitExpressionStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        stmt.expr.visitExpression(this, ctx);\n        ctx.println(stmt, ';');\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitReturnStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.print(stmt, \"return \");\n        stmt.value.visitExpression(this, ctx);\n        ctx.println(stmt, ';');\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitIfStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.print(stmt, \"if (\");\n        stmt.condition.visitExpression(this, ctx);\n        ctx.print(stmt, \") {\");\n        var /** @type {?} */ hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;\n        if (stmt.trueCase.length <= 1 && !hasElseCase) {\n            ctx.print(stmt, \" \");\n            this.visitAllStatements(stmt.trueCase, ctx);\n            ctx.removeEmptyLastLine();\n            ctx.print(stmt, \" \");\n        }\n        else {\n            ctx.println();\n            ctx.incIndent();\n            this.visitAllStatements(stmt.trueCase, ctx);\n            ctx.decIndent();\n            if (hasElseCase) {\n                ctx.println(stmt, \"} else {\");\n                ctx.incIndent();\n                this.visitAllStatements(stmt.falseCase, ctx);\n                ctx.decIndent();\n            }\n        }\n        ctx.println(stmt, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitThrowStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.print(stmt, \"throw \");\n        stmt.error.visitExpression(this, ctx);\n        ctx.println(stmt, \";\");\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitCommentStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        if (stmt.multiline) {\n            ctx.println(stmt, \"/* \" + stmt.comment + \" */\");\n        }\n        else {\n            stmt.comment.split('\\n').forEach(function (line) { ctx.println(stmt, \"// \" + line); });\n        }\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitJSDocCommentStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.println(stmt, \"/*\" + stmt.toString() + \"*/\");\n        return null;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitWriteVarExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        ctx.print(expr, expr.name + \" = \");\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitWriteKeyExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        expr.receiver.visitExpression(this, ctx);\n        ctx.print(expr, \"[\");\n        expr.index.visitExpression(this, ctx);\n        ctx.print(expr, \"] = \");\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitWritePropExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        expr.receiver.visitExpression(this, ctx);\n        ctx.print(expr, \".\" + expr.name + \" = \");\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        expr.receiver.visitExpression(this, ctx);\n        var /** @type {?} */ name = expr.name;\n        if (expr.builtin != null) {\n            name = this.getBuiltinMethodName(expr.builtin);\n            if (name == null) {\n                // some builtins just mean to skip the call.\n                return null;\n            }\n        }\n        ctx.print(expr, \".\" + name + \"(\");\n        this.visitAllExpressions(expr.args, ctx, \",\");\n        ctx.print(expr, \")\");\n        return null;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        expr.fn.visitExpression(this, ctx);\n        ctx.print(expr, \"(\");\n        this.visitAllExpressions(expr.args, ctx, ',');\n        ctx.print(expr, \")\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitReadVarExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ varName = /** @type {?} */ ((ast.name));\n        if (ast.builtin != null) {\n            switch (ast.builtin) {\n                case o.BuiltinVar.Super:\n                    varName = 'super';\n                    break;\n                case o.BuiltinVar.This:\n                    varName = 'this';\n                    break;\n                case o.BuiltinVar.CatchError:\n                    varName = /** @type {?} */ ((CATCH_ERROR_VAR.name));\n                    break;\n                case o.BuiltinVar.CatchStack:\n                    varName = /** @type {?} */ ((CATCH_STACK_VAR.name));\n                    break;\n                default:\n                    throw new Error(\"Unknown builtin variable \" + ast.builtin);\n            }\n        }\n        ctx.print(ast, varName);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitInstantiateExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, \"new \");\n        ast.classExpr.visitExpression(this, ctx);\n        ctx.print(ast, \"(\");\n        this.visitAllExpressions(ast.args, ctx, ',');\n        ctx.print(ast, \")\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitLiteralExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ value = ast.value;\n        if (typeof value === 'string') {\n            ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));\n        }\n        else {\n            ctx.print(ast, \"\" + value);\n        }\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitConditionalExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, \"(\");\n        ast.condition.visitExpression(this, ctx);\n        ctx.print(ast, '? ');\n        ast.trueCase.visitExpression(this, ctx);\n        ctx.print(ast, ': '); /** @type {?} */\n        ((ast.falseCase)).visitExpression(this, ctx);\n        ctx.print(ast, \")\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitNotExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, '!');\n        ast.condition.visitExpression(this, ctx);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitAssertNotNullExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ast.condition.visitExpression(this, ctx);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ opStr;\n        switch (ast.operator) {\n            case o.BinaryOperator.Equals:\n                opStr = '==';\n                break;\n            case o.BinaryOperator.Identical:\n                opStr = '===';\n                break;\n            case o.BinaryOperator.NotEquals:\n                opStr = '!=';\n                break;\n            case o.BinaryOperator.NotIdentical:\n                opStr = '!==';\n                break;\n            case o.BinaryOperator.And:\n                opStr = '&&';\n                break;\n            case o.BinaryOperator.BitwiseAnd:\n                opStr = '&';\n                break;\n            case o.BinaryOperator.Or:\n                opStr = '||';\n                break;\n            case o.BinaryOperator.Plus:\n                opStr = '+';\n                break;\n            case o.BinaryOperator.Minus:\n                opStr = '-';\n                break;\n            case o.BinaryOperator.Divide:\n                opStr = '/';\n                break;\n            case o.BinaryOperator.Multiply:\n                opStr = '*';\n                break;\n            case o.BinaryOperator.Modulo:\n                opStr = '%';\n                break;\n            case o.BinaryOperator.Lower:\n                opStr = '<';\n                break;\n            case o.BinaryOperator.LowerEquals:\n                opStr = '<=';\n                break;\n            case o.BinaryOperator.Bigger:\n                opStr = '>';\n                break;\n            case o.BinaryOperator.BiggerEquals:\n                opStr = '>=';\n                break;\n            default:\n                throw new Error(\"Unknown operator \" + ast.operator);\n        }\n        if (ast.parens)\n            ctx.print(ast, \"(\");\n        ast.lhs.visitExpression(this, ctx);\n        ctx.print(ast, \" \" + opStr + \" \");\n        ast.rhs.visitExpression(this, ctx);\n        if (ast.parens)\n            ctx.print(ast, \")\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitReadPropExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ast.receiver.visitExpression(this, ctx);\n        ctx.print(ast, \".\");\n        ctx.print(ast, ast.name);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitReadKeyExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ast.receiver.visitExpression(this, ctx);\n        ctx.print(ast, \"[\");\n        ast.index.visitExpression(this, ctx);\n        ctx.print(ast, \"]\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, \"[\");\n        this.visitAllExpressions(ast.entries, ctx, ',');\n        ctx.print(ast, \"]\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitLiteralMapExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var _this = this;\n        ctx.print(ast, \"{\");\n        this.visitAllObjects(function (entry) {\n            ctx.print(ast, escapeIdentifier(entry.key, _this._escapeDollarInStrings, entry.quoted) + \":\");\n            entry.value.visitExpression(_this, ctx);\n        }, ast.entries, ctx, ',');\n        ctx.print(ast, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitCommaExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, '(');\n        this.visitAllExpressions(ast.parts, ctx, ',');\n        ctx.print(ast, ')');\n        return null;\n    };\n    /**\n     * @param {?} expressions\n     * @param {?} ctx\n     * @param {?} separator\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitAllExpressions = /**\n     * @param {?} expressions\n     * @param {?} ctx\n     * @param {?} separator\n     * @return {?}\n     */\n    function (expressions, ctx, separator) {\n        var _this = this;\n        this.visitAllObjects(function (expr) { return expr.visitExpression(_this, ctx); }, expressions, ctx, separator);\n    };\n    /**\n     * @template T\n     * @param {?} handler\n     * @param {?} expressions\n     * @param {?} ctx\n     * @param {?} separator\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitAllObjects = /**\n     * @template T\n     * @param {?} handler\n     * @param {?} expressions\n     * @param {?} ctx\n     * @param {?} separator\n     * @return {?}\n     */\n    function (handler, expressions, ctx, separator) {\n        var /** @type {?} */ incrementedIndent = false;\n        for (var /** @type {?} */ i = 0; i < expressions.length; i++) {\n            if (i > 0) {\n                if (ctx.lineLength() > 80) {\n                    ctx.print(null, separator, true);\n                    if (!incrementedIndent) {\n                        // continuation are marked with double indent.\n                        ctx.incIndent();\n                        ctx.incIndent();\n                        incrementedIndent = true;\n                    }\n                }\n                else {\n                    ctx.print(null, separator, false);\n                }\n            }\n            handler(expressions[i]);\n        }\n        if (incrementedIndent) {\n            // continuation are marked with double indent.\n            ctx.decIndent();\n            ctx.decIndent();\n        }\n    };\n    /**\n     * @param {?} statements\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitAllStatements = /**\n     * @param {?} statements\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (statements, ctx) {\n        var _this = this;\n        statements.forEach(function (stmt) { return stmt.visitStatement(_this, ctx); });\n    };\n    return AbstractEmitterVisitor;\n}());\n/**\n * @abstract\n */\nexport { AbstractEmitterVisitor };\nfunction AbstractEmitterVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AbstractEmitterVisitor.prototype._escapeDollarInStrings;\n    /**\n     * @abstract\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitCastExpr = function (ast, context) { };\n    /**\n     * @abstract\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) { };\n    /**\n     * @abstract\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) { };\n    /**\n     * @abstract\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) { };\n    /**\n     * @abstract\n     * @param {?} method\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.getBuiltinMethodName = function (method) { };\n    /**\n     * @abstract\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) { };\n    /**\n     * @abstract\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) { };\n    /**\n     * @abstract\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) { };\n}\n/**\n * @param {?} input\n * @param {?} escapeDollar\n * @param {?=} alwaysQuote\n * @return {?}\n */\nexport function escapeIdentifier(input, escapeDollar, alwaysQuote) {\n    if (alwaysQuote === void 0) { alwaysQuote = true; }\n    if (input == null) {\n        return null;\n    }\n    var /** @type {?} */ body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {\n        var match = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            match[_i] = arguments[_i];\n        }\n        if (match[0] == '$') {\n            return escapeDollar ? '\\\\$' : '$';\n        }\n        else if (match[0] == '\\n') {\n            return '\\\\n';\n        }\n        else if (match[0] == '\\r') {\n            return '\\\\r';\n        }\n        else {\n            return \"\\\\\" + match[0];\n        }\n    });\n    var /** @type {?} */ requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\n    return requiresQuotes ? \"'\" + body + \"'\" : body;\n}\n/**\n * @param {?} count\n * @return {?}\n */\nfunction _createIndent(count) {\n    var /** @type {?} */ res = '';\n    for (var /** @type {?} */ i = 0; i < count; i++) {\n        res += _INDENT_WITH;\n    }\n    return res;\n}\n//# sourceMappingURL=abstract_emitter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { AbstractEmitterVisitor, CATCH_ERROR_VAR, CATCH_STACK_VAR, EmitterVisitorContext } from './abstract_emitter';\nimport * as o from './output_ast';\nvar /** @type {?} */ _debugFilePath = '/debug/lib';\n/**\n * @param {?} ast\n * @return {?}\n */\nexport function debugOutputAstAsTypeScript(ast) {\n    var /** @type {?} */ converter = new _TsEmitterVisitor();\n    var /** @type {?} */ ctx = EmitterVisitorContext.createRoot();\n    var /** @type {?} */ asts = Array.isArray(ast) ? ast : [ast];\n    asts.forEach(function (ast) {\n        if (ast instanceof o.Statement) {\n            ast.visitStatement(converter, ctx);\n        }\n        else if (ast instanceof o.Expression) {\n            ast.visitExpression(converter, ctx);\n        }\n        else if (ast instanceof o.Type) {\n            ast.visitType(converter, ctx);\n        }\n        else {\n            throw new Error(\"Don't know how to print debug info for \" + ast);\n        }\n    });\n    return ctx.toSource();\n}\nvar TypeScriptEmitter = /** @class */ (function () {\n    function TypeScriptEmitter() {\n    }\n    /**\n     * @param {?} genFilePath\n     * @param {?} stmts\n     * @param {?=} preamble\n     * @param {?=} emitSourceMaps\n     * @param {?=} referenceFilter\n     * @param {?=} importFilter\n     * @return {?}\n     */\n    TypeScriptEmitter.prototype.emitStatementsAndContext = /**\n     * @param {?} genFilePath\n     * @param {?} stmts\n     * @param {?=} preamble\n     * @param {?=} emitSourceMaps\n     * @param {?=} referenceFilter\n     * @param {?=} importFilter\n     * @return {?}\n     */\n    function (genFilePath, stmts, preamble, emitSourceMaps, referenceFilter, importFilter) {\n        if (preamble === void 0) { preamble = ''; }\n        if (emitSourceMaps === void 0) { emitSourceMaps = true; }\n        var /** @type {?} */ converter = new _TsEmitterVisitor(referenceFilter, importFilter);\n        var /** @type {?} */ ctx = EmitterVisitorContext.createRoot();\n        converter.visitAllStatements(stmts, ctx);\n        var /** @type {?} */ preambleLines = preamble ? preamble.split('\\n') : [];\n        converter.reexports.forEach(function (reexports, exportedModuleName) {\n            var /** @type {?} */ reexportsCode = reexports.map(function (reexport) { return reexport.name + \" as \" + reexport.as; }).join(',');\n            preambleLines.push(\"export {\" + reexportsCode + \"} from '\" + exportedModuleName + \"';\");\n        });\n        converter.importsWithPrefixes.forEach(function (prefix, importedModuleName) {\n            // Note: can't write the real word for import as it screws up system.js auto detection...\n            preambleLines.push(\"imp\" +\n                (\"ort * as \" + prefix + \" from '\" + importedModuleName + \"';\"));\n        });\n        var /** @type {?} */ sm = emitSourceMaps ?\n            ctx.toSourceMapGenerator(genFilePath, preambleLines.length).toJsComment() :\n            '';\n        var /** @type {?} */ lines = preambleLines.concat([ctx.toSource(), sm]);\n        if (sm) {\n            // always add a newline at the end, as some tools have bugs without it.\n            lines.push('');\n        }\n        ctx.setPreambleLineCount(preambleLines.length);\n        return { sourceText: lines.join('\\n'), context: ctx };\n    };\n    /**\n     * @param {?} genFilePath\n     * @param {?} stmts\n     * @param {?=} preamble\n     * @return {?}\n     */\n    TypeScriptEmitter.prototype.emitStatements = /**\n     * @param {?} genFilePath\n     * @param {?} stmts\n     * @param {?=} preamble\n     * @return {?}\n     */\n    function (genFilePath, stmts, preamble) {\n        if (preamble === void 0) { preamble = ''; }\n        return this.emitStatementsAndContext(genFilePath, stmts, preamble).sourceText;\n    };\n    return TypeScriptEmitter;\n}());\nexport { TypeScriptEmitter };\nvar _TsEmitterVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(_TsEmitterVisitor, _super);\n    function _TsEmitterVisitor(referenceFilter, importFilter) {\n        var _this = _super.call(this, false) || this;\n        _this.referenceFilter = referenceFilter;\n        _this.importFilter = importFilter;\n        _this.typeExpression = 0;\n        _this.importsWithPrefixes = new Map();\n        _this.reexports = new Map();\n        return _this;\n    }\n    /**\n     * @param {?} t\n     * @param {?} ctx\n     * @param {?=} defaultType\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitType = /**\n     * @param {?} t\n     * @param {?} ctx\n     * @param {?=} defaultType\n     * @return {?}\n     */\n    function (t, ctx, defaultType) {\n        if (defaultType === void 0) { defaultType = 'any'; }\n        if (t) {\n            this.typeExpression++;\n            t.visitType(this, ctx);\n            this.typeExpression--;\n        }\n        else {\n            ctx.print(null, defaultType);\n        }\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitLiteralExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ value = ast.value;\n        if (value == null && ast.type != o.INFERRED_TYPE) {\n            ctx.print(ast, \"(\" + value + \" as any)\");\n            return null;\n        }\n        return _super.prototype.visitLiteralExpr.call(this, ast, ctx);\n    };\n    // Temporary workaround to support strictNullCheck enabled consumers of ngc emit.\n    // In SNC mode, [] have the type never[], so we cast here to any[].\n    // TODO: narrow the cast to a more explicit type, or use a pattern that does not\n    // start with [].concat. see https://github.com/angular/angular/pull/11846\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitLiteralArrayExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        if (ast.entries.length === 0) {\n            ctx.print(ast, '(');\n        }\n        var /** @type {?} */ result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);\n        if (ast.entries.length === 0) {\n            ctx.print(ast, ' as any[])');\n        }\n        return result;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitExternalExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        this._visitIdentifier(ast.value, ast.typeParams, ctx);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitAssertNotNullExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ result = _super.prototype.visitAssertNotNullExpr.call(this, ast, ctx);\n        ctx.print(ast, '!');\n        return result;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitDeclareVarStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        if (stmt.hasModifier(o.StmtModifier.Exported) && stmt.value instanceof o.ExternalExpr &&\n            !stmt.type) {\n            // check for a reexport\n            var _a = stmt.value.value, name_1 = _a.name, moduleName = _a.moduleName;\n            if (moduleName) {\n                var /** @type {?} */ reexports = this.reexports.get(moduleName);\n                if (!reexports) {\n                    reexports = [];\n                    this.reexports.set(moduleName, reexports);\n                }\n                reexports.push({ name: /** @type {?} */ ((name_1)), as: stmt.name });\n                return null;\n            }\n        }\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            ctx.print(stmt, \"export \");\n        }\n        if (stmt.hasModifier(o.StmtModifier.Final)) {\n            ctx.print(stmt, \"const\");\n        }\n        else {\n            ctx.print(stmt, \"var\");\n        }\n        ctx.print(stmt, \" \" + stmt.name);\n        this._printColonType(stmt.type, ctx);\n        if (stmt.value) {\n            ctx.print(stmt, \" = \");\n            stmt.value.visitExpression(this, ctx);\n        }\n        ctx.println(stmt, \";\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitCastExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, \"(<\"); /** @type {?} */\n        ((ast.type)).visitType(this, ctx);\n        ctx.print(ast, \">\");\n        ast.value.visitExpression(this, ctx);\n        ctx.print(ast, \")\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitInstantiateExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, \"new \");\n        this.typeExpression++;\n        ast.classExpr.visitExpression(this, ctx);\n        this.typeExpression--;\n        ctx.print(ast, \"(\");\n        this.visitAllExpressions(ast.args, ctx, ',');\n        ctx.print(ast, \")\");\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitDeclareClassStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        var _this = this;\n        ctx.pushClass(stmt);\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            ctx.print(stmt, \"export \");\n        }\n        ctx.print(stmt, \"class \" + stmt.name);\n        if (stmt.parent != null) {\n            ctx.print(stmt, \" extends \");\n            this.typeExpression++;\n            stmt.parent.visitExpression(this, ctx);\n            this.typeExpression--;\n        }\n        ctx.println(stmt, \" {\");\n        ctx.incIndent();\n        stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx); });\n        if (stmt.constructorMethod != null) {\n            this._visitClassConstructor(stmt, ctx);\n        }\n        stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx); });\n        stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx); });\n        ctx.decIndent();\n        ctx.println(stmt, \"}\");\n        ctx.popClass();\n        return null;\n    };\n    /**\n     * @param {?} field\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype._visitClassField = /**\n     * @param {?} field\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (field, ctx) {\n        if (field.hasModifier(o.StmtModifier.Private)) {\n            // comment out as a workaround for #10967\n            ctx.print(null, \"/*private*/ \");\n        }\n        if (field.hasModifier(o.StmtModifier.Static)) {\n            ctx.print(null, 'static ');\n        }\n        ctx.print(null, field.name);\n        this._printColonType(field.type, ctx);\n        if (field.initializer) {\n            ctx.print(null, ' = ');\n            field.initializer.visitExpression(this, ctx);\n        }\n        ctx.println(null, \";\");\n    };\n    /**\n     * @param {?} getter\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype._visitClassGetter = /**\n     * @param {?} getter\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (getter, ctx) {\n        if (getter.hasModifier(o.StmtModifier.Private)) {\n            ctx.print(null, \"private \");\n        }\n        ctx.print(null, \"get \" + getter.name + \"()\");\n        this._printColonType(getter.type, ctx);\n        ctx.println(null, \" {\");\n        ctx.incIndent();\n        this.visitAllStatements(getter.body, ctx);\n        ctx.decIndent();\n        ctx.println(null, \"}\");\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype._visitClassConstructor = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.print(stmt, \"constructor(\");\n        this._visitParams(stmt.constructorMethod.params, ctx);\n        ctx.println(stmt, \") {\");\n        ctx.incIndent();\n        this.visitAllStatements(stmt.constructorMethod.body, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, \"}\");\n    };\n    /**\n     * @param {?} method\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype._visitClassMethod = /**\n     * @param {?} method\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (method, ctx) {\n        if (method.hasModifier(o.StmtModifier.Private)) {\n            ctx.print(null, \"private \");\n        }\n        ctx.print(null, method.name + \"(\");\n        this._visitParams(method.params, ctx);\n        ctx.print(null, \")\");\n        this._printColonType(method.type, ctx, 'void');\n        ctx.println(null, \" {\");\n        ctx.incIndent();\n        this.visitAllStatements(method.body, ctx);\n        ctx.decIndent();\n        ctx.println(null, \"}\");\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitFunctionExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        if (ast.name) {\n            ctx.print(ast, 'function ');\n            ctx.print(ast, ast.name);\n        }\n        ctx.print(ast, \"(\");\n        this._visitParams(ast.params, ctx);\n        ctx.print(ast, \")\");\n        this._printColonType(ast.type, ctx, 'void');\n        if (!ast.name) {\n            ctx.print(ast, \" => \");\n        }\n        ctx.println(ast, '{');\n        ctx.incIndent();\n        this.visitAllStatements(ast.statements, ctx);\n        ctx.decIndent();\n        ctx.print(ast, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            ctx.print(stmt, \"export \");\n        }\n        ctx.print(stmt, \"function \" + stmt.name + \"(\");\n        this._visitParams(stmt.params, ctx);\n        ctx.print(stmt, \")\");\n        this._printColonType(stmt.type, ctx, 'void');\n        ctx.println(stmt, \" {\");\n        ctx.incIndent();\n        this.visitAllStatements(stmt.statements, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitTryCatchStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.println(stmt, \"try {\");\n        ctx.incIndent();\n        this.visitAllStatements(stmt.bodyStmts, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, \"} catch (\" + CATCH_ERROR_VAR.name + \") {\");\n        ctx.incIndent();\n        var /** @type {?} */ catchStmts = [/** @type {?} */ (CATCH_STACK_VAR.set(CATCH_ERROR_VAR.prop('stack', null)).toDeclStmt(null, [\n                o.StmtModifier.Final\n            ]))].concat(stmt.catchStmts);\n        this.visitAllStatements(catchStmts, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} type\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitBuiltinType = /**\n     * @param {?} type\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (type, ctx) {\n        var /** @type {?} */ typeStr;\n        switch (type.name) {\n            case o.BuiltinTypeName.Bool:\n                typeStr = 'boolean';\n                break;\n            case o.BuiltinTypeName.Dynamic:\n                typeStr = 'any';\n                break;\n            case o.BuiltinTypeName.Function:\n                typeStr = 'Function';\n                break;\n            case o.BuiltinTypeName.Number:\n                typeStr = 'number';\n                break;\n            case o.BuiltinTypeName.Int:\n                typeStr = 'number';\n                break;\n            case o.BuiltinTypeName.String:\n                typeStr = 'string';\n                break;\n            default:\n                throw new Error(\"Unsupported builtin type \" + type.name);\n        }\n        ctx.print(null, typeStr);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitExpressionType = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ast.value.visitExpression(this, ctx);\n        return null;\n    };\n    /**\n     * @param {?} type\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitArrayType = /**\n     * @param {?} type\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (type, ctx) {\n        this.visitType(type.of, ctx);\n        ctx.print(null, \"[]\");\n        return null;\n    };\n    /**\n     * @param {?} type\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitMapType = /**\n     * @param {?} type\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (type, ctx) {\n        ctx.print(null, \"{[key: string]:\");\n        this.visitType(type.valueType, ctx);\n        ctx.print(null, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} method\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.getBuiltinMethodName = /**\n     * @param {?} method\n     * @return {?}\n     */\n    function (method) {\n        var /** @type {?} */ name;\n        switch (method) {\n            case o.BuiltinMethod.ConcatArray:\n                name = 'concat';\n                break;\n            case o.BuiltinMethod.SubscribeObservable:\n                name = 'subscribe';\n                break;\n            case o.BuiltinMethod.Bind:\n                name = 'bind';\n                break;\n            default:\n                throw new Error(\"Unknown builtin method: \" + method);\n        }\n        return name;\n    };\n    /**\n     * @param {?} params\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype._visitParams = /**\n     * @param {?} params\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (params, ctx) {\n        var _this = this;\n        this.visitAllObjects(function (param) {\n            ctx.print(null, param.name);\n            _this._printColonType(param.type, ctx);\n        }, params, ctx, ',');\n    };\n    /**\n     * @param {?} value\n     * @param {?} typeParams\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype._visitIdentifier = /**\n     * @param {?} value\n     * @param {?} typeParams\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (value, typeParams, ctx) {\n        var _this = this;\n        var name = value.name, moduleName = value.moduleName;\n        if (this.referenceFilter && this.referenceFilter(value)) {\n            ctx.print(null, '(null as any)');\n            return;\n        }\n        if (moduleName && (!this.importFilter || !this.importFilter(value))) {\n            var /** @type {?} */ prefix = this.importsWithPrefixes.get(moduleName);\n            if (prefix == null) {\n                prefix = \"i\" + this.importsWithPrefixes.size;\n                this.importsWithPrefixes.set(moduleName, prefix);\n            }\n            ctx.print(null, prefix + \".\");\n        }\n        ctx.print(null, /** @type {?} */ ((name)));\n        if (this.typeExpression > 0) {\n            // If we are in a type expression that refers to a generic type then supply\n            // the required type parameters. If there were not enough type parameters\n            // supplied, supply any as the type. Outside a type expression the reference\n            // should not supply type parameters and be treated as a simple value reference\n            // to the constructor function itself.\n            var /** @type {?} */ suppliedParameters = typeParams || [];\n            if (suppliedParameters.length > 0) {\n                ctx.print(null, \"<\");\n                this.visitAllObjects(function (type) { return type.visitType(_this, ctx); }, /** @type {?} */ ((typeParams)), ctx, ',');\n                ctx.print(null, \">\");\n            }\n        }\n    };\n    /**\n     * @param {?} type\n     * @param {?} ctx\n     * @param {?=} defaultType\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype._printColonType = /**\n     * @param {?} type\n     * @param {?} ctx\n     * @param {?=} defaultType\n     * @return {?}\n     */\n    function (type, ctx, defaultType) {\n        if (type !== o.INFERRED_TYPE) {\n            ctx.print(null, ':');\n            this.visitType(type, ctx, defaultType);\n        }\n    };\n    return _TsEmitterVisitor;\n}(AbstractEmitterVisitor));\nfunction _TsEmitterVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _TsEmitterVisitor.prototype.typeExpression;\n    /** @type {?} */\n    _TsEmitterVisitor.prototype.importsWithPrefixes;\n    /** @type {?} */\n    _TsEmitterVisitor.prototype.reexports;\n    /** @type {?} */\n    _TsEmitterVisitor.prototype.referenceFilter;\n    /** @type {?} */\n    _TsEmitterVisitor.prototype.importFilter;\n}\n//# sourceMappingURL=ts_emitter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { createPipe } from './core';\nimport { findLast } from './directive_resolver';\nimport { resolveForwardRef, stringify } from './util';\n/**\n * Resolve a `Type` for {\\@link Pipe}.\n *\n * This interface can be overridden by the application developer to create custom behavior.\n *\n * See {\\@link Compiler}\n */\nvar /**\n * Resolve a `Type` for {\\@link Pipe}.\n *\n * This interface can be overridden by the application developer to create custom behavior.\n *\n * See {\\@link Compiler}\n */\nPipeResolver = /** @class */ (function () {\n    function PipeResolver(_reflector) {\n        this._reflector = _reflector;\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    PipeResolver.prototype.isPipe = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n        return typeMetadata && typeMetadata.some(createPipe.isTypeOf);\n    };\n    /**\n     * Return {@link Pipe} for a given `Type`.\n     */\n    /**\n     * Return {\\@link Pipe} for a given `Type`.\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    PipeResolver.prototype.resolve = /**\n     * Return {\\@link Pipe} for a given `Type`.\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var /** @type {?} */ metas = this._reflector.annotations(resolveForwardRef(type));\n        if (metas) {\n            var /** @type {?} */ annotation = findLast(metas, createPipe.isTypeOf);\n            if (annotation) {\n                return annotation;\n            }\n        }\n        if (throwIfNotFound) {\n            throw new Error(\"No Pipe decorator found on \" + stringify(type));\n        }\n        return null;\n    };\n    return PipeResolver;\n}());\n/**\n * Resolve a `Type` for {\\@link Pipe}.\n *\n * This interface can be overridden by the application developer to create custom behavior.\n *\n * See {\\@link Compiler}\n */\nexport { PipeResolver };\nfunction PipeResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PipeResolver.prototype._reflector;\n}\n//# sourceMappingURL=pipe_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SecurityContext } from '../core';\n/**\n * Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'.\n */\nexport var /** @type {?} */ SECURITY_SCHEMA = {};\n/**\n * @param {?} ctx\n * @param {?} specs\n * @return {?}\n */\nfunction registerContext(ctx, specs) {\n    for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {\n        var spec = specs_1[_i];\n        SECURITY_SCHEMA[spec.toLowerCase()] = ctx;\n    }\n}\n// Case is insignificant below, all element and attribute names are lower-cased for lookup.\nregisterContext(SecurityContext.HTML, [\n    'iframe|srcdoc',\n    '*|innerHTML',\n    '*|outerHTML',\n]);\nregisterContext(SecurityContext.STYLE, ['*|style']);\n// NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.\nregisterContext(SecurityContext.URL, [\n    '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',\n    'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',\n    'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',\n    'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',\n]);\nregisterContext(SecurityContext.RESOURCE_URL, [\n    'applet|code',\n    'applet|codebase',\n    'base|href',\n    'embed|src',\n    'frame|src',\n    'head|profile',\n    'html|manifest',\n    'iframe|src',\n    'link|href',\n    'media|src',\n    'object|codebase',\n    'object|data',\n    'script|src',\n]);\n//# sourceMappingURL=dom_security_schema.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, SecurityContext } from '../core';\nimport { isNgContainer, isNgContent } from '../ml_parser/tags';\nimport { dashCaseToCamelCase } from '../util';\nimport { SECURITY_SCHEMA } from './dom_security_schema';\nimport { ElementSchemaRegistry } from './element_schema_registry';\nvar /** @type {?} */ BOOLEAN = 'boolean';\nvar /** @type {?} */ NUMBER = 'number';\nvar /** @type {?} */ STRING = 'string';\nvar /** @type {?} */ OBJECT = 'object';\n/**\n * This array represents the DOM schema. It encodes inheritance, properties, and events.\n *\n * ## Overview\n *\n * Each line represents one kind of element. The `element_inheritance` and properties are joined\n * using `element_inheritance|properties` syntax.\n *\n * ## Element Inheritance\n *\n * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.\n * Here the individual elements are separated by `,` (commas). Every element in the list\n * has identical properties.\n *\n * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is\n * specified then `\"\"` (blank) element is assumed.\n *\n * NOTE: The blank element inherits from root `[Element]` element, the super element of all\n * elements.\n *\n * NOTE an element prefix such as `:svg:` has no special meaning to the schema.\n *\n * ## Properties\n *\n * Each element has a set of properties separated by `,` (commas). Each property can be prefixed\n * by a special character designating its type:\n *\n * - (no prefix): property is a string.\n * - `*`: property represents an event.\n * - `!`: property is a boolean.\n * - `#`: property is a number.\n * - `%`: property is an object.\n *\n * ## Query\n *\n * The class creates an internal squas representation which allows to easily answer the query of\n * if a given property exist on a given element.\n *\n * NOTE: We don't yet support querying for types or events.\n * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,\n *       see dom_element_schema_registry_spec.ts\n */\nvar /** @type {?} */ SCHEMA = [\n    '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop,slot' +\n        ',*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored',\n    '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n    'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n    'media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,src,%srcObject,#volume',\n    ':svg:^[HTMLElement]|*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',\n    ':svg:graphics^:svg:|',\n    ':svg:animation^:svg:|*begin,*end,*repeat',\n    ':svg:geometry^:svg:|',\n    ':svg:componentTransferFunction^:svg:|',\n    ':svg:gradient^:svg:|',\n    ':svg:textContent^:svg:graphics|',\n    ':svg:textPositioning^:svg:textContent|',\n    'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',\n    'area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,search,shape,target,username',\n    'audio^media|',\n    'br^[HTMLElement]|clear',\n    'base^[HTMLElement]|href,target',\n    'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',\n    'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',\n    'canvas^[HTMLElement]|#height,#width',\n    'content^[HTMLElement]|select',\n    'dl^[HTMLElement]|!compact',\n    'datalist^[HTMLElement]|',\n    'details^[HTMLElement]|!open',\n    'dialog^[HTMLElement]|!open,returnValue',\n    'dir^[HTMLElement]|!compact',\n    'div^[HTMLElement]|align',\n    'embed^[HTMLElement]|align,height,name,src,type,width',\n    'fieldset^[HTMLElement]|!disabled,name',\n    'font^[HTMLElement]|color,face,size',\n    'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',\n    'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',\n    'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',\n    'hr^[HTMLElement]|align,color,!noShade,size,width',\n    'head^[HTMLElement]|',\n    'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',\n    'html^[HTMLElement]|version',\n    'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',\n    'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',\n    'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',\n    'li^[HTMLElement]|type,#value',\n    'label^[HTMLElement]|htmlFor',\n    'legend^[HTMLElement]|align',\n    'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type',\n    'map^[HTMLElement]|name',\n    'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',\n    'menu^[HTMLElement]|!compact',\n    'meta^[HTMLElement]|content,httpEquiv,name,scheme',\n    'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',\n    'ins,del^[HTMLElement]|cite,dateTime',\n    'ol^[HTMLElement]|!compact,!reversed,#start,type',\n    'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',\n    'optgroup^[HTMLElement]|!disabled,label',\n    'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',\n    'output^[HTMLElement]|defaultValue,%htmlFor,name,value',\n    'p^[HTMLElement]|align',\n    'param^[HTMLElement]|name,type,value,valueType',\n    'picture^[HTMLElement]|',\n    'pre^[HTMLElement]|#width',\n    'progress^[HTMLElement]|#max,#value',\n    'q,blockquote,cite^[HTMLElement]|',\n    'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',\n    'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',\n    'shadow^[HTMLElement]|',\n    'slot^[HTMLElement]|name',\n    'source^[HTMLElement]|media,sizes,src,srcset,type',\n    'span^[HTMLElement]|',\n    'style^[HTMLElement]|!disabled,media,type',\n    'caption^[HTMLElement]|align',\n    'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',\n    'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',\n    'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',\n    'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',\n    'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',\n    'template^[HTMLElement]|',\n    'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',\n    'title^[HTMLElement]|text',\n    'track^[HTMLElement]|!default,kind,label,src,srclang',\n    'ul^[HTMLElement]|!compact,type',\n    'unknown^[HTMLElement]|',\n    'video^media|#height,poster,#width',\n    ':svg:a^:svg:graphics|',\n    ':svg:animate^:svg:animation|',\n    ':svg:animateMotion^:svg:animation|',\n    ':svg:animateTransform^:svg:animation|',\n    ':svg:circle^:svg:geometry|',\n    ':svg:clipPath^:svg:graphics|',\n    ':svg:defs^:svg:graphics|',\n    ':svg:desc^:svg:|',\n    ':svg:discard^:svg:|',\n    ':svg:ellipse^:svg:geometry|',\n    ':svg:feBlend^:svg:|',\n    ':svg:feColorMatrix^:svg:|',\n    ':svg:feComponentTransfer^:svg:|',\n    ':svg:feComposite^:svg:|',\n    ':svg:feConvolveMatrix^:svg:|',\n    ':svg:feDiffuseLighting^:svg:|',\n    ':svg:feDisplacementMap^:svg:|',\n    ':svg:feDistantLight^:svg:|',\n    ':svg:feDropShadow^:svg:|',\n    ':svg:feFlood^:svg:|',\n    ':svg:feFuncA^:svg:componentTransferFunction|',\n    ':svg:feFuncB^:svg:componentTransferFunction|',\n    ':svg:feFuncG^:svg:componentTransferFunction|',\n    ':svg:feFuncR^:svg:componentTransferFunction|',\n    ':svg:feGaussianBlur^:svg:|',\n    ':svg:feImage^:svg:|',\n    ':svg:feMerge^:svg:|',\n    ':svg:feMergeNode^:svg:|',\n    ':svg:feMorphology^:svg:|',\n    ':svg:feOffset^:svg:|',\n    ':svg:fePointLight^:svg:|',\n    ':svg:feSpecularLighting^:svg:|',\n    ':svg:feSpotLight^:svg:|',\n    ':svg:feTile^:svg:|',\n    ':svg:feTurbulence^:svg:|',\n    ':svg:filter^:svg:|',\n    ':svg:foreignObject^:svg:graphics|',\n    ':svg:g^:svg:graphics|',\n    ':svg:image^:svg:graphics|',\n    ':svg:line^:svg:geometry|',\n    ':svg:linearGradient^:svg:gradient|',\n    ':svg:mpath^:svg:|',\n    ':svg:marker^:svg:|',\n    ':svg:mask^:svg:|',\n    ':svg:metadata^:svg:|',\n    ':svg:path^:svg:geometry|',\n    ':svg:pattern^:svg:|',\n    ':svg:polygon^:svg:geometry|',\n    ':svg:polyline^:svg:geometry|',\n    ':svg:radialGradient^:svg:gradient|',\n    ':svg:rect^:svg:geometry|',\n    ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',\n    ':svg:script^:svg:|type',\n    ':svg:set^:svg:animation|',\n    ':svg:stop^:svg:|',\n    ':svg:style^:svg:|!disabled,media,title,type',\n    ':svg:switch^:svg:graphics|',\n    ':svg:symbol^:svg:|',\n    ':svg:tspan^:svg:textPositioning|',\n    ':svg:text^:svg:textPositioning|',\n    ':svg:textPath^:svg:textContent|',\n    ':svg:title^:svg:|',\n    ':svg:use^:svg:graphics|',\n    ':svg:view^:svg:|#zoomAndPan',\n    'data^[HTMLElement]|value',\n    'keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name',\n    'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',\n    'summary^[HTMLElement]|',\n    'time^[HTMLElement]|dateTime',\n    ':svg:cursor^:svg:|',\n];\nvar /** @type {?} */ _ATTR_TO_PROP = {\n    'class': 'className',\n    'for': 'htmlFor',\n    'formaction': 'formAction',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\nvar DomElementSchemaRegistry = /** @class */ (function (_super) {\n    tslib_1.__extends(DomElementSchemaRegistry, _super);\n    function DomElementSchemaRegistry() {\n        var _this = _super.call(this) || this;\n        _this._schema = {};\n        SCHEMA.forEach(function (encodedType) {\n            var /** @type {?} */ type = {};\n            var _a = encodedType.split('|'), strType = _a[0], strProperties = _a[1];\n            var /** @type {?} */ properties = strProperties.split(',');\n            var _b = strType.split('^'), typeNames = _b[0], superName = _b[1];\n            typeNames.split(',').forEach(function (tag) { return _this._schema[tag.toLowerCase()] = type; });\n            var /** @type {?} */ superType = superName && _this._schema[superName.toLowerCase()];\n            if (superType) {\n                Object.keys(superType).forEach(function (prop) { type[prop] = superType[prop]; });\n            }\n            properties.forEach(function (property) {\n                if (property.length > 0) {\n                    switch (property[0]) {\n                        case '*':\n                            // We don't yet support events.\n                            // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events\n                            // will\n                            // almost certainly introduce bad XSS vulnerabilities.\n                            // type[property.substring(1)] = EVENT;\n                            break;\n                        case '!':\n                            type[property.substring(1)] = BOOLEAN;\n                            break;\n                        case '#':\n                            type[property.substring(1)] = NUMBER;\n                            break;\n                        case '%':\n                            type[property.substring(1)] = OBJECT;\n                            break;\n                        default:\n                            type[property] = STRING;\n                    }\n                }\n            });\n        });\n        return _this;\n    }\n    /**\n     * @param {?} tagName\n     * @param {?} propName\n     * @param {?} schemaMetas\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.hasProperty = /**\n     * @param {?} tagName\n     * @param {?} propName\n     * @param {?} schemaMetas\n     * @return {?}\n     */\n    function (tagName, propName, schemaMetas) {\n        if (schemaMetas.some(function (schema) { return schema.name === NO_ERRORS_SCHEMA.name; })) {\n            return true;\n        }\n        if (tagName.indexOf('-') > -1) {\n            if (isNgContainer(tagName) || isNgContent(tagName)) {\n                return false;\n            }\n            if (schemaMetas.some(function (schema) { return schema.name === CUSTOM_ELEMENTS_SCHEMA.name; })) {\n                // Can't tell now as we don't know which properties a custom element will get\n                // once it is instantiated\n                return true;\n            }\n        }\n        var /** @type {?} */ elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];\n        return !!elementProperties[propName];\n    };\n    /**\n     * @param {?} tagName\n     * @param {?} schemaMetas\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.hasElement = /**\n     * @param {?} tagName\n     * @param {?} schemaMetas\n     * @return {?}\n     */\n    function (tagName, schemaMetas) {\n        if (schemaMetas.some(function (schema) { return schema.name === NO_ERRORS_SCHEMA.name; })) {\n            return true;\n        }\n        if (tagName.indexOf('-') > -1) {\n            if (isNgContainer(tagName) || isNgContent(tagName)) {\n                return true;\n            }\n            if (schemaMetas.some(function (schema) { return schema.name === CUSTOM_ELEMENTS_SCHEMA.name; })) {\n                // Allow any custom elements\n                return true;\n            }\n        }\n        return !!this._schema[tagName.toLowerCase()];\n    };\n    /**\n     * securityContext returns the security context for the given property on the given DOM tag.\n     *\n     * Tag and property name are statically known and cannot change at runtime, i.e. it is not\n     * possible to bind a value into a changing attribute or tag name.\n     *\n     * The filtering is white list based. All attributes in the schema above are assumed to have the\n     * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known\n     * attack vectors are assigned their appropriate context.\n     */\n    /**\n     * securityContext returns the security context for the given property on the given DOM tag.\n     *\n     * Tag and property name are statically known and cannot change at runtime, i.e. it is not\n     * possible to bind a value into a changing attribute or tag name.\n     *\n     * The filtering is white list based. All attributes in the schema above are assumed to have the\n     * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known\n     * attack vectors are assigned their appropriate context.\n     * @param {?} tagName\n     * @param {?} propName\n     * @param {?} isAttribute\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.securityContext = /**\n     * securityContext returns the security context for the given property on the given DOM tag.\n     *\n     * Tag and property name are statically known and cannot change at runtime, i.e. it is not\n     * possible to bind a value into a changing attribute or tag name.\n     *\n     * The filtering is white list based. All attributes in the schema above are assumed to have the\n     * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known\n     * attack vectors are assigned their appropriate context.\n     * @param {?} tagName\n     * @param {?} propName\n     * @param {?} isAttribute\n     * @return {?}\n     */\n    function (tagName, propName, isAttribute) {\n        if (isAttribute) {\n            // NB: For security purposes, use the mapped property name, not the attribute name.\n            propName = this.getMappedPropName(propName);\n        }\n        // Make sure comparisons are case insensitive, so that case differences between attribute and\n        // property names do not have a security impact.\n        tagName = tagName.toLowerCase();\n        propName = propName.toLowerCase();\n        var /** @type {?} */ ctx = SECURITY_SCHEMA[tagName + '|' + propName];\n        if (ctx) {\n            return ctx;\n        }\n        ctx = SECURITY_SCHEMA['*|' + propName];\n        return ctx ? ctx : SecurityContext.NONE;\n    };\n    /**\n     * @param {?} propName\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.getMappedPropName = /**\n     * @param {?} propName\n     * @return {?}\n     */\n    function (propName) { return _ATTR_TO_PROP[propName] || propName; };\n    /**\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.getDefaultComponentElementName = /**\n     * @return {?}\n     */\n    function () { return 'ng-component'; };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.validateProperty = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (name.toLowerCase().startsWith('on')) {\n            var /** @type {?} */ msg = \"Binding to event property '\" + name + \"' is disallowed for security reasons, \" +\n                (\"please use (\" + name.slice(2) + \")=...\") +\n                (\"\\nIf '\" + name + \"' is a directive input, make sure the directive is imported by the\") +\n                \" current module.\";\n            return { error: true, msg: msg };\n        }\n        else {\n            return { error: false };\n        }\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.validateAttribute = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (name.toLowerCase().startsWith('on')) {\n            var /** @type {?} */ msg = \"Binding to event attribute '\" + name + \"' is disallowed for security reasons, \" +\n                (\"please use (\" + name.slice(2) + \")=...\");\n            return { error: true, msg: msg };\n        }\n        else {\n            return { error: false };\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.allKnownElementNames = /**\n     * @return {?}\n     */\n    function () { return Object.keys(this._schema); };\n    /**\n     * @param {?} propName\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = /**\n     * @param {?} propName\n     * @return {?}\n     */\n    function (propName) {\n        return dashCaseToCamelCase(propName);\n    };\n    /**\n     * @param {?} camelCaseProp\n     * @param {?} userProvidedProp\n     * @param {?} val\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = /**\n     * @param {?} camelCaseProp\n     * @param {?} userProvidedProp\n     * @param {?} val\n     * @return {?}\n     */\n    function (camelCaseProp, userProvidedProp, val) {\n        var /** @type {?} */ unit = '';\n        var /** @type {?} */ strVal = val.toString().trim();\n        var /** @type {?} */ errorMsg = /** @type {?} */ ((null));\n        if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {\n            if (typeof val === 'number') {\n                unit = 'px';\n            }\n            else {\n                var /** @type {?} */ valAndSuffixMatch = val.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n                    errorMsg = \"Please provide a CSS unit value for \" + userProvidedProp + \":\" + val;\n                }\n            }\n        }\n        return { error: errorMsg, value: strVal + unit };\n    };\n    return DomElementSchemaRegistry;\n}(ElementSchemaRegistry));\nexport { DomElementSchemaRegistry };\nfunction DomElementSchemaRegistry_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DomElementSchemaRegistry.prototype._schema;\n}\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction _isPixelDimensionStyle(prop) {\n    switch (prop) {\n        case 'width':\n        case 'height':\n        case 'minWidth':\n        case 'minHeight':\n        case 'maxWidth':\n        case 'maxHeight':\n        case 'left':\n        case 'top':\n        case 'bottom':\n        case 'right':\n        case 'fontSize':\n        case 'outlineWidth':\n        case 'outlineOffset':\n        case 'paddingTop':\n        case 'paddingLeft':\n        case 'paddingBottom':\n        case 'paddingRight':\n        case 'marginTop':\n        case 'marginLeft':\n        case 'marginBottom':\n        case 'marginRight':\n        case 'borderRadius':\n        case 'borderWidth':\n        case 'borderTopWidth':\n        case 'borderLeftWidth':\n        case 'borderRightWidth':\n        case 'borderBottomWidth':\n        case 'textIndent':\n            return true;\n        default:\n            return false;\n    }\n}\n//# sourceMappingURL=dom_element_schema_registry.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n *\n * Please make sure to keep to edits in sync with the source file.\n *\n * Source:\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n *\n * The original file level comment is reproduced below\n */\n/*\n  This is a limited shim for ShadowDOM css styling.\n  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n\n  The intention here is to support only the styling features which can be\n  relatively simply implemented. The goal is to allow users to avoid the\n  most obvious pitfalls and do so without compromising performance significantly.\n  For ShadowDOM styling that's not covered here, a set of best practices\n  can be provided that should allow users to accomplish more complex styling.\n\n  The following is a list of specific ShadowDOM styling features and a brief\n  discussion of the approach used to shim.\n\n  Shimmed features:\n\n  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n  element using the :host rule. To shim this feature, the :host styles are\n  reformatted and prefixed with a given scope name and promoted to a\n  document level stylesheet.\n  For example, given a scope name of .foo, a rule like this:\n\n    :host {\n        background: red;\n      }\n    }\n\n  becomes:\n\n    .foo {\n      background: red;\n    }\n\n  * encapsulation: Styles defined within ShadowDOM, apply only to\n  dom inside the ShadowDOM. Polymer uses one of two techniques to implement\n  this feature.\n\n  By default, rules are prefixed with the host element tag name\n  as a descendant selector. This ensures styling does not leak out of the 'top'\n  of the element's ShadowDOM. For example,\n\n  div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n  x-foo div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n\n  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\n  selectors are scoped by adding an attribute selector suffix to each\n  simple selector that contains the host element tag name. Each element\n  in the element's ShadowDOM template is also given the scope attribute.\n  Thus, these rules match only elements that have the scope attribute.\n  For example, given a scope name of x-foo, a rule like this:\n\n    div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n    div[x-foo] {\n      font-weight: bold;\n    }\n\n  Note that elements that are dynamically added to a scope must have the scope\n  selector added to them manually.\n\n  * upper/lower bound encapsulation: Styles which are defined outside a\n  shadowRoot should not cross the ShadowDOM boundary and should not apply\n  inside a shadowRoot.\n\n  This styling behavior is not emulated. Some possible ways to do this that\n  were rejected due to complexity and/or performance concerns include: (1) reset\n  every possible property for every possible selector for a given scope name;\n  (2) re-implement css in javascript.\n\n  As an alternative, users should make sure to use selectors\n  specific to the scope in which they are working.\n\n  * ::distributed: This behavior is not emulated. It's often not necessary\n  to style the contents of a specific insertion point and instead, descendants\n  of the host element can be styled selectively. Users can also create an\n  extra node around an insertion point and style that node's contents\n  via descendent selectors. For example, with a shadowRoot like this:\n\n    <style>\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <content></content>\n\n  could become:\n\n    <style>\n      / *@polyfill .content-container div * /\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <div class=\"content-container\">\n      <content></content>\n    </div>\n\n  Note the use of @polyfill in the comment above a ShadowDOM specific style\n  declaration. This is a directive to the styling shim to use the selector\n  in comments in lieu of the next selector when running under polyfill.\n*/\nvar /**\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n *\n * Please make sure to keep to edits in sync with the source file.\n *\n * Source:\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n *\n * The original file level comment is reproduced below\n */\n/*\n  This is a limited shim for ShadowDOM css styling.\n  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n\n  The intention here is to support only the styling features which can be\n  relatively simply implemented. The goal is to allow users to avoid the\n  most obvious pitfalls and do so without compromising performance significantly.\n  For ShadowDOM styling that's not covered here, a set of best practices\n  can be provided that should allow users to accomplish more complex styling.\n\n  The following is a list of specific ShadowDOM styling features and a brief\n  discussion of the approach used to shim.\n\n  Shimmed features:\n\n  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n  element using the :host rule. To shim this feature, the :host styles are\n  reformatted and prefixed with a given scope name and promoted to a\n  document level stylesheet.\n  For example, given a scope name of .foo, a rule like this:\n\n    :host {\n        background: red;\n      }\n    }\n\n  becomes:\n\n    .foo {\n      background: red;\n    }\n\n  * encapsulation: Styles defined within ShadowDOM, apply only to\n  dom inside the ShadowDOM. Polymer uses one of two techniques to implement\n  this feature.\n\n  By default, rules are prefixed with the host element tag name\n  as a descendant selector. This ensures styling does not leak out of the 'top'\n  of the element's ShadowDOM. For example,\n\n  div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n  x-foo div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n\n  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\n  selectors are scoped by adding an attribute selector suffix to each\n  simple selector that contains the host element tag name. Each element\n  in the element's ShadowDOM template is also given the scope attribute.\n  Thus, these rules match only elements that have the scope attribute.\n  For example, given a scope name of x-foo, a rule like this:\n\n    div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n    div[x-foo] {\n      font-weight: bold;\n    }\n\n  Note that elements that are dynamically added to a scope must have the scope\n  selector added to them manually.\n\n  * upper/lower bound encapsulation: Styles which are defined outside a\n  shadowRoot should not cross the ShadowDOM boundary and should not apply\n  inside a shadowRoot.\n\n  This styling behavior is not emulated. Some possible ways to do this that\n  were rejected due to complexity and/or performance concerns include: (1) reset\n  every possible property for every possible selector for a given scope name;\n  (2) re-implement css in javascript.\n\n  As an alternative, users should make sure to use selectors\n  specific to the scope in which they are working.\n\n  * ::distributed: This behavior is not emulated. It's often not necessary\n  to style the contents of a specific insertion point and instead, descendants\n  of the host element can be styled selectively. Users can also create an\n  extra node around an insertion point and style that node's contents\n  via descendent selectors. For example, with a shadowRoot like this:\n\n    <style>\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <content></content>\n\n  could become:\n\n    <style>\n      / *@polyfill .content-container div * /\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <div class=\"content-container\">\n      <content></content>\n    </div>\n\n  Note the use of @polyfill in the comment above a ShadowDOM specific style\n  declaration. This is a directive to the styling shim to use the selector\n  in comments in lieu of the next selector when running under polyfill.\n*/\nShadowCss = /** @class */ (function () {\n    function ShadowCss() {\n        this.strictStyling = true;\n    }\n    /*\n    * Shim some cssText with the given selector. Returns cssText that can\n    * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).\n    *\n    * When strictStyling is true:\n    * - selector is the attribute added to all elements inside the host,\n    * - hostSelector is the attribute added to the host itself.\n    */\n    /**\n     * @param {?} cssText\n     * @param {?} selector\n     * @param {?=} hostSelector\n     * @return {?}\n     */\n    ShadowCss.prototype.shimCssText = /**\n     * @param {?} cssText\n     * @param {?} selector\n     * @param {?=} hostSelector\n     * @return {?}\n     */\n    function (cssText, selector, hostSelector) {\n        if (hostSelector === void 0) { hostSelector = ''; }\n        var /** @type {?} */ commentsWithHash = extractCommentsWithHash(cssText);\n        cssText = stripComments(cssText);\n        cssText = this._insertDirectives(cssText);\n        var /** @type {?} */ scopedCssText = this._scopeCssText(cssText, selector, hostSelector);\n        return [scopedCssText].concat(commentsWithHash).join('\\n');\n    };\n    /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    ShadowCss.prototype._insertDirectives = /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    function (cssText) {\n        cssText = this._insertPolyfillDirectivesInCssText(cssText);\n        return this._insertPolyfillRulesInCssText(cssText);\n    };\n    /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    ShadowCss.prototype._insertPolyfillDirectivesInCssText = /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    function (cssText) {\n        // Difference with webcomponents.js: does not handle comments\n        return cssText.replace(_cssContentNextSelectorRe, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i] = arguments[_i];\n            }\n            return m[2] + '{';\n        });\n    };\n    /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    ShadowCss.prototype._insertPolyfillRulesInCssText = /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    function (cssText) {\n        // Difference with webcomponents.js: does not handle comments\n        return cssText.replace(_cssContentRuleRe, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i] = arguments[_i];\n            }\n            var /** @type {?} */ rule = m[0].replace(m[1], '').replace(m[2], '');\n            return m[4] + rule;\n        });\n    };\n    /**\n     * @param {?} cssText\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    ShadowCss.prototype._scopeCssText = /**\n     * @param {?} cssText\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    function (cssText, scopeSelector, hostSelector) {\n        var /** @type {?} */ unscopedRules = this._extractUnscopedRulesFromCssText(cssText);\n        // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n        cssText = this._insertPolyfillHostInCssText(cssText);\n        cssText = this._convertColonHost(cssText);\n        cssText = this._convertColonHostContext(cssText);\n        cssText = this._convertShadowDOMSelectors(cssText);\n        if (scopeSelector) {\n            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);\n        }\n        cssText = cssText + '\\n' + unscopedRules;\n        return cssText.trim();\n    };\n    /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    ShadowCss.prototype._extractUnscopedRulesFromCssText = /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    function (cssText) {\n        // Difference with webcomponents.js: does not handle comments\n        var /** @type {?} */ r = '';\n        var /** @type {?} */ m;\n        _cssContentUnscopedRuleRe.lastIndex = 0;\n        while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {\n            var /** @type {?} */ rule = m[0].replace(m[2], '').replace(m[1], m[4]);\n            r += rule + '\\n\\n';\n        }\n        return r;\n    };\n    /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    ShadowCss.prototype._convertColonHost = /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    function (cssText) {\n        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);\n    };\n    /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    ShadowCss.prototype._convertColonHostContext = /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    function (cssText) {\n        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);\n    };\n    /**\n     * @param {?} cssText\n     * @param {?} regExp\n     * @param {?} partReplacer\n     * @return {?}\n     */\n    ShadowCss.prototype._convertColonRule = /**\n     * @param {?} cssText\n     * @param {?} regExp\n     * @param {?} partReplacer\n     * @return {?}\n     */\n    function (cssText, regExp, partReplacer) {\n        // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n        return cssText.replace(regExp, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i] = arguments[_i];\n            }\n            if (m[2]) {\n                var /** @type {?} */ parts = m[2].split(',');\n                var /** @type {?} */ r = [];\n                for (var /** @type {?} */ i = 0; i < parts.length; i++) {\n                    var /** @type {?} */ p = parts[i].trim();\n                    if (!p)\n                        break;\n                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n                }\n                return r.join(',');\n            }\n            else {\n                return _polyfillHostNoCombinator + m[3];\n            }\n        });\n    };\n    /**\n     * @param {?} host\n     * @param {?} part\n     * @param {?} suffix\n     * @return {?}\n     */\n    ShadowCss.prototype._colonHostContextPartReplacer = /**\n     * @param {?} host\n     * @param {?} part\n     * @param {?} suffix\n     * @return {?}\n     */\n    function (host, part, suffix) {\n        if (part.indexOf(_polyfillHost) > -1) {\n            return this._colonHostPartReplacer(host, part, suffix);\n        }\n        else {\n            return host + part + suffix + ', ' + part + ' ' + host + suffix;\n        }\n    };\n    /**\n     * @param {?} host\n     * @param {?} part\n     * @param {?} suffix\n     * @return {?}\n     */\n    ShadowCss.prototype._colonHostPartReplacer = /**\n     * @param {?} host\n     * @param {?} part\n     * @param {?} suffix\n     * @return {?}\n     */\n    function (host, part, suffix) {\n        return host + part.replace(_polyfillHost, '') + suffix;\n    };\n    /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    ShadowCss.prototype._convertShadowDOMSelectors = /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    function (cssText) {\n        return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);\n    };\n    /**\n     * @param {?} cssText\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    ShadowCss.prototype._scopeSelectors = /**\n     * @param {?} cssText\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    function (cssText, scopeSelector, hostSelector) {\n        var _this = this;\n        return processRules(cssText, function (rule) {\n            var /** @type {?} */ selector = rule.selector;\n            var /** @type {?} */ content = rule.content;\n            if (rule.selector[0] != '@') {\n                selector =\n                    _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);\n            }\n            return new CssRule(selector, content);\n        });\n    };\n    /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @param {?} strict\n     * @return {?}\n     */\n    ShadowCss.prototype._scopeSelector = /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @param {?} strict\n     * @return {?}\n     */\n    function (selector, scopeSelector, hostSelector, strict) {\n        var _this = this;\n        return selector.split(',')\n            .map(function (part) { return part.trim().split(_shadowDeepSelectors); })\n            .map(function (deepParts) {\n            var shallowPart = deepParts[0], otherParts = deepParts.slice(1);\n            var /** @type {?} */ applyScope = function (shallowPart) {\n                if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n                    return strict ?\n                        _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :\n                        _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);\n                }\n                else {\n                    return shallowPart;\n                }\n            };\n            return [applyScope(shallowPart)].concat(otherParts).join(' ');\n        })\n            .join(', ');\n    };\n    /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @return {?}\n     */\n    ShadowCss.prototype._selectorNeedsScoping = /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @return {?}\n     */\n    function (selector, scopeSelector) {\n        var /** @type {?} */ re = this._makeScopeMatcher(scopeSelector);\n        return !re.test(selector);\n    };\n    /**\n     * @param {?} scopeSelector\n     * @return {?}\n     */\n    ShadowCss.prototype._makeScopeMatcher = /**\n     * @param {?} scopeSelector\n     * @return {?}\n     */\n    function (scopeSelector) {\n        var /** @type {?} */ lre = /\\[/g;\n        var /** @type {?} */ rre = /\\]/g;\n        scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n    };\n    /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    ShadowCss.prototype._applySelectorScope = /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    function (selector, scopeSelector, hostSelector) {\n        // Difference from webcomponents.js: scopeSelector could not be an array\n        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n    };\n    /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    ShadowCss.prototype._applySimpleSelectorScope = /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    function (selector, scopeSelector, hostSelector) {\n        // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n        _polyfillHostRe.lastIndex = 0;\n        if (_polyfillHostRe.test(selector)) {\n            var /** @type {?} */ replaceBy_1 = this.strictStyling ? \"[\" + hostSelector + \"]\" : scopeSelector;\n            return selector\n                .replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {\n                return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n                    return before + replaceBy_1 + colon + after;\n                });\n            })\n                .replace(_polyfillHostRe, replaceBy_1 + ' ');\n        }\n        return scopeSelector + ' ' + selector;\n    };\n    /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    ShadowCss.prototype._applyStrictSelectorScope = /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    function (selector, scopeSelector, hostSelector) {\n        var _this = this;\n        var /** @type {?} */ isRe = /\\[is=([^\\]]*)\\]/g;\n        scopeSelector = scopeSelector.replace(isRe, function (_) {\n            var parts = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                parts[_i - 1] = arguments[_i];\n            }\n            return parts[0];\n        });\n        var /** @type {?} */ attrName = '[' + scopeSelector + ']';\n        var /** @type {?} */ _scopeSelectorPart = function (p) {\n            var /** @type {?} */ scopedP = p.trim();\n            if (!scopedP) {\n                return '';\n            }\n            if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n                scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n            }\n            else {\n                // remove :host since it should be unnecessary\n                var /** @type {?} */ t = p.replace(_polyfillHostRe, '');\n                if (t.length > 0) {\n                    var /** @type {?} */ matches = t.match(/([^:]*)(:*)(.*)/);\n                    if (matches) {\n                        scopedP = matches[1] + attrName + matches[2] + matches[3];\n                    }\n                }\n            }\n            return scopedP;\n        };\n        var /** @type {?} */ safeContent = new SafeSelector(selector);\n        selector = safeContent.content();\n        var /** @type {?} */ scopedSelector = '';\n        var /** @type {?} */ startIndex = 0;\n        var /** @type {?} */ res;\n        var /** @type {?} */ sep = /( |>|\\+|~(?!=))\\s*/g;\n        // If a selector appears before :host it should not be shimmed as it\n        // matches on ancestor elements and not on elements in the host's shadow\n        // `:host-context(div)` is transformed to\n        // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n        // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n        // Historically `component-tag:host` was matching the component so we also want to preserve\n        // this behavior to avoid breaking legacy apps (it should not match).\n        // The behavior should be:\n        // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n        // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n        //   `:host-context(tag)`)\n        var /** @type {?} */ hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n        // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n        var /** @type {?} */ shouldScope = !hasHost;\n        while ((res = sep.exec(selector)) !== null) {\n            var /** @type {?} */ separator = res[1];\n            var /** @type {?} */ part_1 = selector.slice(startIndex, res.index).trim();\n            shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\n            var /** @type {?} */ scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\n            scopedSelector += scopedPart + \" \" + separator + \" \";\n            startIndex = sep.lastIndex;\n        }\n        var /** @type {?} */ part = selector.substring(startIndex);\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n        // replace the placeholders with their original values\n        return safeContent.restore(scopedSelector);\n    };\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    ShadowCss.prototype._insertPolyfillHostInCssText = /**\n     * @param {?} selector\n     * @return {?}\n     */\n    function (selector) {\n        return selector.replace(_colonHostContextRe, _polyfillHostContext)\n            .replace(_colonHostRe, _polyfillHost);\n    };\n    return ShadowCss;\n}());\n/**\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n *\n * Please make sure to keep to edits in sync with the source file.\n *\n * Source:\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n *\n * The original file level comment is reproduced below\n */\n/*\n  This is a limited shim for ShadowDOM css styling.\n  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n\n  The intention here is to support only the styling features which can be\n  relatively simply implemented. The goal is to allow users to avoid the\n  most obvious pitfalls and do so without compromising performance significantly.\n  For ShadowDOM styling that's not covered here, a set of best practices\n  can be provided that should allow users to accomplish more complex styling.\n\n  The following is a list of specific ShadowDOM styling features and a brief\n  discussion of the approach used to shim.\n\n  Shimmed features:\n\n  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n  element using the :host rule. To shim this feature, the :host styles are\n  reformatted and prefixed with a given scope name and promoted to a\n  document level stylesheet.\n  For example, given a scope name of .foo, a rule like this:\n\n    :host {\n        background: red;\n      }\n    }\n\n  becomes:\n\n    .foo {\n      background: red;\n    }\n\n  * encapsulation: Styles defined within ShadowDOM, apply only to\n  dom inside the ShadowDOM. Polymer uses one of two techniques to implement\n  this feature.\n\n  By default, rules are prefixed with the host element tag name\n  as a descendant selector. This ensures styling does not leak out of the 'top'\n  of the element's ShadowDOM. For example,\n\n  div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n  x-foo div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n\n  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\n  selectors are scoped by adding an attribute selector suffix to each\n  simple selector that contains the host element tag name. Each element\n  in the element's ShadowDOM template is also given the scope attribute.\n  Thus, these rules match only elements that have the scope attribute.\n  For example, given a scope name of x-foo, a rule like this:\n\n    div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n    div[x-foo] {\n      font-weight: bold;\n    }\n\n  Note that elements that are dynamically added to a scope must have the scope\n  selector added to them manually.\n\n  * upper/lower bound encapsulation: Styles which are defined outside a\n  shadowRoot should not cross the ShadowDOM boundary and should not apply\n  inside a shadowRoot.\n\n  This styling behavior is not emulated. Some possible ways to do this that\n  were rejected due to complexity and/or performance concerns include: (1) reset\n  every possible property for every possible selector for a given scope name;\n  (2) re-implement css in javascript.\n\n  As an alternative, users should make sure to use selectors\n  specific to the scope in which they are working.\n\n  * ::distributed: This behavior is not emulated. It's often not necessary\n  to style the contents of a specific insertion point and instead, descendants\n  of the host element can be styled selectively. Users can also create an\n  extra node around an insertion point and style that node's contents\n  via descendent selectors. For example, with a shadowRoot like this:\n\n    <style>\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <content></content>\n\n  could become:\n\n    <style>\n      / *@polyfill .content-container div * /\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <div class=\"content-container\">\n      <content></content>\n    </div>\n\n  Note the use of @polyfill in the comment above a ShadowDOM specific style\n  declaration. This is a directive to the styling shim to use the selector\n  in comments in lieu of the next selector when running under polyfill.\n*/\nexport { ShadowCss };\nfunction ShadowCss_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ShadowCss.prototype.strictStyling;\n}\nvar SafeSelector = /** @class */ (function () {\n    function SafeSelector(selector) {\n        var _this = this;\n        this.placeholders = [];\n        this.index = 0;\n        // Replaces attribute selectors with placeholders.\n        // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n        selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n            var /** @type {?} */ replaceBy = \"__ph-\" + _this.index + \"__\";\n            _this.placeholders.push(keep);\n            _this.index++;\n            return replaceBy;\n        });\n        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n        // WS and \"+\" would otherwise be interpreted as selector separators.\n        this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n            var /** @type {?} */ replaceBy = \"__ph-\" + _this.index + \"__\";\n            _this.placeholders.push(exp);\n            _this.index++;\n            return pseudo + replaceBy;\n        });\n    }\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    SafeSelector.prototype.restore = /**\n     * @param {?} content\n     * @return {?}\n     */\n    function (content) {\n        var _this = this;\n        return content.replace(/__ph-(\\d+)__/g, function (ph, index) { return _this.placeholders[+index]; });\n    };\n    /**\n     * @return {?}\n     */\n    SafeSelector.prototype.content = /**\n     * @return {?}\n     */\n    function () { return this._content; };\n    return SafeSelector;\n}());\nfunction SafeSelector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SafeSelector.prototype.placeholders;\n    /** @type {?} */\n    SafeSelector.prototype.index;\n    /** @type {?} */\n    SafeSelector.prototype._content;\n}\nvar /** @type {?} */ _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\\s]*?(['\"])(.*?)\\1[;\\s]*}([^{]*?){/gim;\nvar /** @type {?} */ _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nvar /** @type {?} */ _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nvar /** @type {?} */ _polyfillHost = '-shadowcsshost';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nvar /** @type {?} */ _polyfillHostContext = '-shadowcsscontext';\nvar /** @type {?} */ _parenSuffix = ')(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nvar /** @type {?} */ _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nvar /** @type {?} */ _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nvar /** @type {?} */ _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nvar /** @type {?} */ _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar /** @type {?} */ _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g,\n    /\\/shadow-deep\\//g,\n    /\\/shadow\\//g,\n];\n// The deep combinator is deprecated in the CSS spec\n// Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.\n// see https://github.com/angular/angular/pull/17677\nvar /** @type {?} */ _shadowDeepSelectors = /(?:>>>)|(?:\\/deep\\/)|(?:::ng-deep)/g;\nvar /** @type {?} */ _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nvar /** @type {?} */ _polyfillHostRe = /-shadowcsshost/gim;\nvar /** @type {?} */ _colonHostRe = /:host/gim;\nvar /** @type {?} */ _colonHostContextRe = /:host-context/gim;\nvar /** @type {?} */ _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stripComments(input) {\n    return input.replace(_commentRe, '');\n}\nvar /** @type {?} */ _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction extractCommentsWithHash(input) {\n    return input.match(_commentWithHashRe) || [];\n}\nvar /** @type {?} */ _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar /** @type {?} */ _curlyRe = /([{}])/g;\nvar /** @type {?} */ OPEN_CURLY = '{';\nvar /** @type {?} */ CLOSE_CURLY = '}';\nvar /** @type {?} */ BLOCK_PLACEHOLDER = '%BLOCK%';\nvar CssRule = /** @class */ (function () {\n    function CssRule(selector, content) {\n        this.selector = selector;\n        this.content = content;\n    }\n    return CssRule;\n}());\nexport { CssRule };\nfunction CssRule_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CssRule.prototype.selector;\n    /** @type {?} */\n    CssRule.prototype.content;\n}\n/**\n * @param {?} input\n * @param {?} ruleCallback\n * @return {?}\n */\nexport function processRules(input, ruleCallback) {\n    var /** @type {?} */ inputWithEscapedBlocks = escapeBlocks(input);\n    var /** @type {?} */ nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        var /** @type {?} */ selector = m[2];\n        var /** @type {?} */ content = '';\n        var /** @type {?} */ suffix = m[4];\n        var /** @type {?} */ contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        var /** @type {?} */ rule = ruleCallback(new CssRule(selector, content));\n        return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n    });\n}\nvar StringWithEscapedBlocks = /** @class */ (function () {\n    function StringWithEscapedBlocks(escapedString, blocks) {\n        this.escapedString = escapedString;\n        this.blocks = blocks;\n    }\n    return StringWithEscapedBlocks;\n}());\nfunction StringWithEscapedBlocks_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StringWithEscapedBlocks.prototype.escapedString;\n    /** @type {?} */\n    StringWithEscapedBlocks.prototype.blocks;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction escapeBlocks(input) {\n    var /** @type {?} */ inputParts = input.split(_curlyRe);\n    var /** @type {?} */ resultParts = [];\n    var /** @type {?} */ escapedBlocks = [];\n    var /** @type {?} */ bracketCount = 0;\n    var /** @type {?} */ currentBlockParts = [];\n    for (var /** @type {?} */ partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        var /** @type {?} */ part = inputParts[partIndex];\n        if (part == CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part == OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n}\n//# sourceMappingURL=shadow_css.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileStylesheetMetadata, identifierModuleUrl, identifierName } from './compile_metadata';\nimport { ViewEncapsulation } from './core';\nimport * as o from './output/output_ast';\nimport { ShadowCss } from './shadow_css';\nvar /** @type {?} */ COMPONENT_VARIABLE = '%COMP%';\nvar /** @type {?} */ HOST_ATTR = \"_nghost-\" + COMPONENT_VARIABLE;\nvar /** @type {?} */ CONTENT_ATTR = \"_ngcontent-\" + COMPONENT_VARIABLE;\nvar StylesCompileDependency = /** @class */ (function () {\n    function StylesCompileDependency(name, moduleUrl, setValue) {\n        this.name = name;\n        this.moduleUrl = moduleUrl;\n        this.setValue = setValue;\n    }\n    return StylesCompileDependency;\n}());\nexport { StylesCompileDependency };\nfunction StylesCompileDependency_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StylesCompileDependency.prototype.name;\n    /** @type {?} */\n    StylesCompileDependency.prototype.moduleUrl;\n    /** @type {?} */\n    StylesCompileDependency.prototype.setValue;\n}\nvar CompiledStylesheet = /** @class */ (function () {\n    function CompiledStylesheet(outputCtx, stylesVar, dependencies, isShimmed, meta) {\n        this.outputCtx = outputCtx;\n        this.stylesVar = stylesVar;\n        this.dependencies = dependencies;\n        this.isShimmed = isShimmed;\n        this.meta = meta;\n    }\n    return CompiledStylesheet;\n}());\nexport { CompiledStylesheet };\nfunction CompiledStylesheet_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompiledStylesheet.prototype.outputCtx;\n    /** @type {?} */\n    CompiledStylesheet.prototype.stylesVar;\n    /** @type {?} */\n    CompiledStylesheet.prototype.dependencies;\n    /** @type {?} */\n    CompiledStylesheet.prototype.isShimmed;\n    /** @type {?} */\n    CompiledStylesheet.prototype.meta;\n}\nvar StyleCompiler = /** @class */ (function () {\n    function StyleCompiler(_urlResolver) {\n        this._urlResolver = _urlResolver;\n        this._shadowCss = new ShadowCss();\n    }\n    /**\n     * @param {?} outputCtx\n     * @param {?} comp\n     * @return {?}\n     */\n    StyleCompiler.prototype.compileComponent = /**\n     * @param {?} outputCtx\n     * @param {?} comp\n     * @return {?}\n     */\n    function (outputCtx, comp) {\n        var /** @type {?} */ template = /** @type {?} */ ((comp.template));\n        return this._compileStyles(outputCtx, comp, new CompileStylesheetMetadata({\n            styles: template.styles,\n            styleUrls: template.styleUrls,\n            moduleUrl: identifierModuleUrl(comp.type)\n        }), this.needsStyleShim(comp), true);\n    };\n    /**\n     * @param {?} outputCtx\n     * @param {?} comp\n     * @param {?} stylesheet\n     * @param {?=} shim\n     * @return {?}\n     */\n    StyleCompiler.prototype.compileStyles = /**\n     * @param {?} outputCtx\n     * @param {?} comp\n     * @param {?} stylesheet\n     * @param {?=} shim\n     * @return {?}\n     */\n    function (outputCtx, comp, stylesheet, shim) {\n        if (shim === void 0) { shim = this.needsStyleShim(comp); }\n        return this._compileStyles(outputCtx, comp, stylesheet, shim, false);\n    };\n    /**\n     * @param {?} comp\n     * @return {?}\n     */\n    StyleCompiler.prototype.needsStyleShim = /**\n     * @param {?} comp\n     * @return {?}\n     */\n    function (comp) {\n        return /** @type {?} */ ((comp.template)).encapsulation === ViewEncapsulation.Emulated;\n    };\n    /**\n     * @param {?} outputCtx\n     * @param {?} comp\n     * @param {?} stylesheet\n     * @param {?} shim\n     * @param {?} isComponentStylesheet\n     * @return {?}\n     */\n    StyleCompiler.prototype._compileStyles = /**\n     * @param {?} outputCtx\n     * @param {?} comp\n     * @param {?} stylesheet\n     * @param {?} shim\n     * @param {?} isComponentStylesheet\n     * @return {?}\n     */\n    function (outputCtx, comp, stylesheet, shim, isComponentStylesheet) {\n        var _this = this;\n        var /** @type {?} */ styleExpressions = stylesheet.styles.map(function (plainStyle) { return o.literal(_this._shimIfNeeded(plainStyle, shim)); });\n        var /** @type {?} */ dependencies = [];\n        stylesheet.styleUrls.forEach(function (styleUrl) {\n            var /** @type {?} */ exprIndex = styleExpressions.length;\n            // Note: This placeholder will be filled later.\n            styleExpressions.push(/** @type {?} */ ((null)));\n            dependencies.push(new StylesCompileDependency(getStylesVarName(null), styleUrl, function (value) { return styleExpressions[exprIndex] = outputCtx.importExpr(value); }));\n        });\n        // styles variable contains plain strings and arrays of other styles arrays (recursive),\n        // so we set its type to dynamic.\n        var /** @type {?} */ stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);\n        var /** @type {?} */ stmt = o.variable(stylesVar)\n            .set(o.literalArr(styleExpressions, new o.ArrayType(o.DYNAMIC_TYPE, [o.TypeModifier.Const])))\n            .toDeclStmt(null, isComponentStylesheet ? [o.StmtModifier.Final] : [\n            o.StmtModifier.Final, o.StmtModifier.Exported\n        ]);\n        outputCtx.statements.push(stmt);\n        return new CompiledStylesheet(outputCtx, stylesVar, dependencies, shim, stylesheet);\n    };\n    /**\n     * @param {?} style\n     * @param {?} shim\n     * @return {?}\n     */\n    StyleCompiler.prototype._shimIfNeeded = /**\n     * @param {?} style\n     * @param {?} shim\n     * @return {?}\n     */\n    function (style, shim) {\n        return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;\n    };\n    return StyleCompiler;\n}());\nexport { StyleCompiler };\nfunction StyleCompiler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StyleCompiler.prototype._shadowCss;\n    /** @type {?} */\n    StyleCompiler.prototype._urlResolver;\n}\n/**\n * @param {?} component\n * @return {?}\n */\nfunction getStylesVarName(component) {\n    var /** @type {?} */ result = \"styles\";\n    if (component) {\n        result += \"_\" + identifierName(component.type);\n    }\n    return result;\n}\n//# sourceMappingURL=style_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as html from './ast';\nimport { ParseTreeResult } from './parser';\nimport { NGSP_UNICODE } from './tags';\nexport var /** @type {?} */ PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';\nvar /** @type {?} */ SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']);\n// Equivalent to \\s with \\u00a0 (non-breaking space) excluded.\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\nvar /** @type {?} */ WS_CHARS = ' \\f\\n\\r\\t\\v\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff';\nvar /** @type {?} */ NO_WS_REGEXP = new RegExp(\"[^\" + WS_CHARS + \"]\");\nvar /** @type {?} */ WS_REPLACE_REGEXP = new RegExp(\"[\" + WS_CHARS + \"]{2,}\", 'g');\n/**\n * @param {?} attrs\n * @return {?}\n */\nfunction hasPreserveWhitespacesAttr(attrs) {\n    return attrs.some(function (attr) { return attr.name === PRESERVE_WS_ATTR_NAME; });\n}\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here.\n * @param {?} value\n * @return {?}\n */\nexport function replaceNgsp(value) {\n    // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE\n    return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');\n}\n/**\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\n * - consider spaces, tabs and new lines as whitespace characters;\n * - drop text nodes consisting of whitespace characters only;\n * - for all other text nodes replace consecutive whitespace characters with one space;\n * - convert &ngsp; pseudo-entity to a single space;\n *\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\n * and might be changed to \"on\" by default.\n */\nvar /**\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\n * - consider spaces, tabs and new lines as whitespace characters;\n * - drop text nodes consisting of whitespace characters only;\n * - for all other text nodes replace consecutive whitespace characters with one space;\n * - convert &ngsp; pseudo-entity to a single space;\n *\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\n * and might be changed to \"on\" by default.\n */\nWhitespaceVisitor = /** @class */ (function () {\n    function WhitespaceVisitor() {\n    }\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    WhitespaceVisitor.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    function (element, context) {\n        if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {\n            // don't descent into elements where we need to preserve whitespaces\n            // but still visit all attributes to eliminate one used as a market to preserve WS\n            return new html.Element(element.name, html.visitAll(this, element.attrs), element.children, element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n        }\n        return new html.Element(element.name, element.attrs, html.visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    WhitespaceVisitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) {\n        return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;\n    };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    WhitespaceVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) {\n        var /** @type {?} */ isNotBlank = text.value.match(NO_WS_REGEXP);\n        if (isNotBlank) {\n            return new html.Text(replaceNgsp(text.value).replace(WS_REPLACE_REGEXP, ' '), text.sourceSpan);\n        }\n        return null;\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    WhitespaceVisitor.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { return comment; };\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    WhitespaceVisitor.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansion, context) { return expansion; };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    WhitespaceVisitor.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansionCase, context) { return expansionCase; };\n    return WhitespaceVisitor;\n}());\n/**\n * @param {?} htmlAstWithErrors\n * @return {?}\n */\nexport function removeWhitespaces(htmlAstWithErrors) {\n    return new ParseTreeResult(html.visitAll(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes), htmlAstWithErrors.errors);\n}\n//# sourceMappingURL=html_whitespaces.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ParseError } from '../parse_util';\nimport * as html from './ast';\n// http://cldr.unicode.org/index/cldr-spec/plural-rules\nvar /** @type {?} */ PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];\n/**\n * Expands special forms into elements.\n *\n * For example,\n *\n * ```\n * { messages.length, plural,\n *   =0 {zero}\n *   =1 {one}\n *   other {more than one}\n * }\n * ```\n *\n * will be expanded into\n *\n * ```\n * <ng-container [ngPlural]=\"messages.length\">\n *   <ng-template ngPluralCase=\"=0\">zero</ng-template>\n *   <ng-template ngPluralCase=\"=1\">one</ng-template>\n *   <ng-template ngPluralCase=\"other\">more than one</ng-template>\n * </ng-container>\n * ```\n * @param {?} nodes\n * @return {?}\n */\nexport function expandNodes(nodes) {\n    var /** @type {?} */ expander = new _Expander();\n    return new ExpansionResult(html.visitAll(expander, nodes), expander.isExpanded, expander.errors);\n}\nvar ExpansionResult = /** @class */ (function () {\n    function ExpansionResult(nodes, expanded, errors) {\n        this.nodes = nodes;\n        this.expanded = expanded;\n        this.errors = errors;\n    }\n    return ExpansionResult;\n}());\nexport { ExpansionResult };\nfunction ExpansionResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExpansionResult.prototype.nodes;\n    /** @type {?} */\n    ExpansionResult.prototype.expanded;\n    /** @type {?} */\n    ExpansionResult.prototype.errors;\n}\nvar ExpansionError = /** @class */ (function (_super) {\n    tslib_1.__extends(ExpansionError, _super);\n    function ExpansionError(span, errorMsg) {\n        return _super.call(this, span, errorMsg) || this;\n    }\n    return ExpansionError;\n}(ParseError));\nexport { ExpansionError };\n/**\n * Expand expansion forms (plural, select) to directives\n *\n * \\@internal\n */\nvar /**\n * Expand expansion forms (plural, select) to directives\n *\n * \\@internal\n */\n_Expander = /** @class */ (function () {\n    function _Expander() {\n        this.isExpanded = false;\n        this.errors = [];\n    }\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    _Expander.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    function (element, context) {\n        return new html.Element(element.name, element.attrs, html.visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    _Expander.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) { return attribute; };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    _Expander.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { return text; };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    _Expander.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { return comment; };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    _Expander.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        this.isExpanded = true;\n        return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :\n            _expandDefaultForm(icu, this.errors);\n    };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    _Expander.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (icuCase, context) {\n        throw new Error('Should not be reached');\n    };\n    return _Expander;\n}());\nfunction _Expander_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _Expander.prototype.isExpanded;\n    /** @type {?} */\n    _Expander.prototype.errors;\n}\n/**\n * @param {?} ast\n * @param {?} errors\n * @return {?}\n */\nfunction _expandPluralForm(ast, errors) {\n    var /** @type {?} */ children = ast.cases.map(function (c) {\n        if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\\d+$/)) {\n            errors.push(new ExpansionError(c.valueSourceSpan, \"Plural cases should be \\\"=<number>\\\" or one of \" + PLURAL_CASES.join(\", \")));\n        }\n        var /** @type {?} */ expansionResult = expandNodes(c.expression);\n        errors.push.apply(errors, expansionResult.errors);\n        return new html.Element(\"ng-template\", [new html.Attribute('ngPluralCase', \"\" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n    });\n    var /** @type {?} */ switchAttr = new html.Attribute('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);\n    return new html.Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n}\n/**\n * @param {?} ast\n * @param {?} errors\n * @return {?}\n */\nfunction _expandDefaultForm(ast, errors) {\n    var /** @type {?} */ children = ast.cases.map(function (c) {\n        var /** @type {?} */ expansionResult = expandNodes(c.expression);\n        errors.push.apply(errors, expansionResult.errors);\n        if (c.value === 'other') {\n            // other is the default case when no values match\n            return new html.Element(\"ng-template\", [new html.Attribute('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n        }\n        return new html.Element(\"ng-template\", [new html.Attribute('ngSwitchCase', \"\" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n    });\n    var /** @type {?} */ switchAttr = new html.Attribute('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);\n    return new html.Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n}\n//# sourceMappingURL=icu_ast_expander.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { SecurityContext } from '../core';\nimport { EmptyExpr, RecursiveAstVisitor } from '../expression_parser/ast';\nimport { mergeNsAndName } from '../ml_parser/tags';\nimport { ParseError, ParseErrorLevel, ParseSourceSpan } from '../parse_util';\nimport { CssSelector } from '../selector';\nimport { splitAtColon, splitAtPeriod } from '../util';\nimport { BoundElementPropertyAst, BoundEventAst, PropertyBindingType, VariableAst } from './template_ast';\nvar /** @type {?} */ PROPERTY_PARTS_SEPARATOR = '.';\nvar /** @type {?} */ ATTRIBUTE_PREFIX = 'attr';\nvar /** @type {?} */ CLASS_PREFIX = 'class';\nvar /** @type {?} */ STYLE_PREFIX = 'style';\nvar /** @type {?} */ ANIMATE_PROP_PREFIX = 'animate-';\n/** @enum {number} */\nvar BoundPropertyType = {\n    DEFAULT: 0,\n    LITERAL_ATTR: 1,\n    ANIMATION: 2,\n};\nexport { BoundPropertyType };\nBoundPropertyType[BoundPropertyType.DEFAULT] = \"DEFAULT\";\nBoundPropertyType[BoundPropertyType.LITERAL_ATTR] = \"LITERAL_ATTR\";\nBoundPropertyType[BoundPropertyType.ANIMATION] = \"ANIMATION\";\n/**\n * Represents a parsed property.\n */\nvar /**\n * Represents a parsed property.\n */\nBoundProperty = /** @class */ (function () {\n    function BoundProperty(name, expression, type, sourceSpan) {\n        this.name = name;\n        this.expression = expression;\n        this.type = type;\n        this.sourceSpan = sourceSpan;\n        this.isLiteral = this.type === BoundPropertyType.LITERAL_ATTR;\n        this.isAnimation = this.type === BoundPropertyType.ANIMATION;\n    }\n    return BoundProperty;\n}());\n/**\n * Represents a parsed property.\n */\nexport { BoundProperty };\nfunction BoundProperty_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BoundProperty.prototype.isLiteral;\n    /** @type {?} */\n    BoundProperty.prototype.isAnimation;\n    /** @type {?} */\n    BoundProperty.prototype.name;\n    /** @type {?} */\n    BoundProperty.prototype.expression;\n    /** @type {?} */\n    BoundProperty.prototype.type;\n    /** @type {?} */\n    BoundProperty.prototype.sourceSpan;\n}\n/**\n * Parses bindings in templates and in the directive host area.\n */\nvar /**\n * Parses bindings in templates and in the directive host area.\n */\nBindingParser = /** @class */ (function () {\n    function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {\n        var _this = this;\n        this._exprParser = _exprParser;\n        this._interpolationConfig = _interpolationConfig;\n        this._schemaRegistry = _schemaRegistry;\n        this._targetErrors = _targetErrors;\n        this.pipesByName = new Map();\n        this._usedPipes = new Map();\n        pipes.forEach(function (pipe) { return _this.pipesByName.set(pipe.name, pipe); });\n    }\n    /**\n     * @return {?}\n     */\n    BindingParser.prototype.getUsedPipes = /**\n     * @return {?}\n     */\n    function () { return Array.from(this._usedPipes.values()); };\n    /**\n     * @param {?} dirMeta\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype.createBoundHostProperties = /**\n     * @param {?} dirMeta\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (dirMeta, sourceSpan) {\n        var _this = this;\n        if (dirMeta.hostProperties) {\n            var /** @type {?} */ boundProps_1 = [];\n            Object.keys(dirMeta.hostProperties).forEach(function (propName) {\n                var /** @type {?} */ expression = dirMeta.hostProperties[propName];\n                if (typeof expression === 'string') {\n                    _this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);\n                }\n                else {\n                    _this._reportError(\"Value of the host property binding \\\"\" + propName + \"\\\" needs to be a string representing an expression but got \\\"\" + expression + \"\\\" (\" + typeof expression + \")\", sourceSpan);\n                }\n            });\n            return boundProps_1;\n        }\n        return null;\n    };\n    /**\n     * @param {?} dirMeta\n     * @param {?} elementSelector\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype.createDirectiveHostPropertyAsts = /**\n     * @param {?} dirMeta\n     * @param {?} elementSelector\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (dirMeta, elementSelector, sourceSpan) {\n        var _this = this;\n        var /** @type {?} */ boundProps = this.createBoundHostProperties(dirMeta, sourceSpan);\n        return boundProps &&\n            boundProps.map(function (prop) { return _this.createElementPropertyAst(elementSelector, prop); });\n    };\n    /**\n     * @param {?} dirMeta\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype.createDirectiveHostEventAsts = /**\n     * @param {?} dirMeta\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (dirMeta, sourceSpan) {\n        var _this = this;\n        if (dirMeta.hostListeners) {\n            var /** @type {?} */ targetEventAsts_1 = [];\n            Object.keys(dirMeta.hostListeners).forEach(function (propName) {\n                var /** @type {?} */ expression = dirMeta.hostListeners[propName];\n                if (typeof expression === 'string') {\n                    _this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1);\n                }\n                else {\n                    _this._reportError(\"Value of the host listener \\\"\" + propName + \"\\\" needs to be a string representing an expression but got \\\"\" + expression + \"\\\" (\" + typeof expression + \")\", sourceSpan);\n                }\n            });\n            return targetEventAsts_1;\n        }\n        return null;\n    };\n    /**\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype.parseInterpolation = /**\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (value, sourceSpan) {\n        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n        try {\n            var /** @type {?} */ ast = /** @type {?} */ ((this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig)));\n            if (ast)\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            this._checkPipes(ast, sourceSpan);\n            return ast;\n        }\n        catch (/** @type {?} */ e) {\n            this._reportError(\"\" + e, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n        }\n    };\n    /**\n     * @param {?} prefixToken\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @param {?} targetVars\n     * @return {?}\n     */\n    BindingParser.prototype.parseInlineTemplateBinding = /**\n     * @param {?} prefixToken\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @param {?} targetVars\n     * @return {?}\n     */\n    function (prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {\n        var /** @type {?} */ bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);\n        for (var /** @type {?} */ i = 0; i < bindings.length; i++) {\n            var /** @type {?} */ binding = bindings[i];\n            if (binding.keyIsVar) {\n                targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));\n            }\n            else if (binding.expression) {\n                this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);\n            }\n            else {\n                targetMatchableAttrs.push([binding.key, '']);\n                this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);\n            }\n        }\n    };\n    /**\n     * @param {?} prefixToken\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype._parseTemplateBindings = /**\n     * @param {?} prefixToken\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (prefixToken, value, sourceSpan) {\n        var _this = this;\n        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n        try {\n            var /** @type {?} */ bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);\n            this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);\n            bindingsResult.templateBindings.forEach(function (binding) {\n                if (binding.expression) {\n                    _this._checkPipes(binding.expression, sourceSpan);\n                }\n            });\n            bindingsResult.warnings.forEach(function (warning) { _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });\n            return bindingsResult.templateBindings;\n        }\n        catch (/** @type {?} */ e) {\n            this._reportError(\"\" + e, sourceSpan);\n            return [];\n        }\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    BindingParser.prototype.parseLiteralAttr = /**\n     * @param {?} name\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {\n        if (_isAnimationLabel(name)) {\n            name = name.substring(1);\n            if (value) {\n                this._reportError(\"Assigning animation triggers via @prop=\\\"exp\\\" attributes with an expression is invalid.\" +\n                    \" Use property bindings (e.g. [@prop]=\\\"exp\\\") or use an attribute without a value (e.g. @prop) instead.\", sourceSpan, ParseErrorLevel.ERROR);\n            }\n            this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);\n        }\n        else {\n            targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));\n        }\n    };\n    /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} isHost\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    BindingParser.prototype.parsePropertyBinding = /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} isHost\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    function (name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {\n        var /** @type {?} */ isAnimationProp = false;\n        if (name.startsWith(ANIMATE_PROP_PREFIX)) {\n            isAnimationProp = true;\n            name = name.substring(ANIMATE_PROP_PREFIX.length);\n        }\n        else if (_isAnimationLabel(name)) {\n            isAnimationProp = true;\n            name = name.substring(1);\n        }\n        if (isAnimationProp) {\n            this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);\n        }\n        else {\n            this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);\n        }\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    BindingParser.prototype.parsePropertyInterpolation = /**\n     * @param {?} name\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {\n        var /** @type {?} */ expr = this.parseInterpolation(value, sourceSpan);\n        if (expr) {\n            this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @param {?} name\n     * @param {?} ast\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    BindingParser.prototype._parsePropertyAst = /**\n     * @param {?} name\n     * @param {?} ast\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {\n        targetMatchableAttrs.push([name, /** @type {?} */ ((ast.source))]);\n        targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));\n    };\n    /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    BindingParser.prototype._parseAnimation = /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) {\n        // This will occur when a @trigger is not paired with an expression.\n        // For animations it is valid to not have an expression since */void\n        // states will be applied by angular when the element is attached/detached\n        var /** @type {?} */ ast = this._parseBinding(expression || 'undefined', false, sourceSpan);\n        targetMatchableAttrs.push([name, /** @type {?} */ ((ast.source))]);\n        targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));\n    };\n    /**\n     * @param {?} value\n     * @param {?} isHostBinding\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype._parseBinding = /**\n     * @param {?} value\n     * @param {?} isHostBinding\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (value, isHostBinding, sourceSpan) {\n        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n        try {\n            var /** @type {?} */ ast = isHostBinding ?\n                this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :\n                this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);\n            if (ast)\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            this._checkPipes(ast, sourceSpan);\n            return ast;\n        }\n        catch (/** @type {?} */ e) {\n            this._reportError(\"\" + e, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n        }\n    };\n    /**\n     * @param {?} elementSelector\n     * @param {?} boundProp\n     * @return {?}\n     */\n    BindingParser.prototype.createElementPropertyAst = /**\n     * @param {?} elementSelector\n     * @param {?} boundProp\n     * @return {?}\n     */\n    function (elementSelector, boundProp) {\n        if (boundProp.isAnimation) {\n            return new BoundElementPropertyAst(boundProp.name, PropertyBindingType.Animation, SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan);\n        }\n        var /** @type {?} */ unit = null;\n        var /** @type {?} */ bindingType = /** @type {?} */ ((undefined));\n        var /** @type {?} */ boundPropertyName = null;\n        var /** @type {?} */ parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);\n        var /** @type {?} */ securityContexts = /** @type {?} */ ((undefined));\n        // Check check for special cases (prefix style, attr, class)\n        if (parts.length > 1) {\n            if (parts[0] == ATTRIBUTE_PREFIX) {\n                boundPropertyName = parts[1];\n                this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);\n                securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);\n                var /** @type {?} */ nsSeparatorIdx = boundPropertyName.indexOf(':');\n                if (nsSeparatorIdx > -1) {\n                    var /** @type {?} */ ns = boundPropertyName.substring(0, nsSeparatorIdx);\n                    var /** @type {?} */ name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);\n                    boundPropertyName = mergeNsAndName(ns, name_1);\n                }\n                bindingType = PropertyBindingType.Attribute;\n            }\n            else if (parts[0] == CLASS_PREFIX) {\n                boundPropertyName = parts[1];\n                bindingType = PropertyBindingType.Class;\n                securityContexts = [SecurityContext.NONE];\n            }\n            else if (parts[0] == STYLE_PREFIX) {\n                unit = parts.length > 2 ? parts[2] : null;\n                boundPropertyName = parts[1];\n                bindingType = PropertyBindingType.Style;\n                securityContexts = [SecurityContext.STYLE];\n            }\n        }\n        // If not a special case, use the full property name\n        if (boundPropertyName === null) {\n            boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);\n            securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);\n            bindingType = PropertyBindingType.Property;\n            this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);\n        }\n        return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan);\n    };\n    /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    BindingParser.prototype.parseEvent = /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {\n        if (_isAnimationLabel(name)) {\n            name = name.substr(1);\n            this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);\n        }\n        else {\n            this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);\n        }\n    };\n    /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    BindingParser.prototype._parseAnimationEvent = /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    function (name, expression, sourceSpan, targetEvents) {\n        var /** @type {?} */ matches = splitAtPeriod(name, [name, '']);\n        var /** @type {?} */ eventName = matches[0];\n        var /** @type {?} */ phase = matches[1].toLowerCase();\n        if (phase) {\n            switch (phase) {\n                case 'start':\n                case 'done':\n                    var /** @type {?} */ ast = this._parseAction(expression, sourceSpan);\n                    targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));\n                    break;\n                default:\n                    this._reportError(\"The provided animation output phase value \\\"\" + phase + \"\\\" for \\\"@\" + eventName + \"\\\" is not supported (use start or done)\", sourceSpan);\n                    break;\n            }\n        }\n        else {\n            this._reportError(\"The animation trigger output event (@\" + eventName + \") is missing its phase value name (start or done are currently supported)\", sourceSpan);\n        }\n    };\n    /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    BindingParser.prototype._parseEvent = /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {\n        // long format: 'target: eventName'\n        var _a = splitAtColon(name, [/** @type {?} */ ((null)), name]), target = _a[0], eventName = _a[1];\n        var /** @type {?} */ ast = this._parseAction(expression, sourceSpan);\n        targetMatchableAttrs.push([/** @type {?} */ ((name)), /** @type {?} */ ((ast.source))]);\n        targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));\n        // Don't detect directives for event names for now,\n        // so don't add the event name to the matchableAttrs\n    };\n    /**\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype._parseAction = /**\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (value, sourceSpan) {\n        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n        try {\n            var /** @type {?} */ ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);\n            if (ast) {\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            }\n            if (!ast || ast.ast instanceof EmptyExpr) {\n                this._reportError(\"Empty expressions are not allowed\", sourceSpan);\n                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n            }\n            this._checkPipes(ast, sourceSpan);\n            return ast;\n        }\n        catch (/** @type {?} */ e) {\n            this._reportError(\"\" + e, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n        }\n    };\n    /**\n     * @param {?} message\n     * @param {?} sourceSpan\n     * @param {?=} level\n     * @return {?}\n     */\n    BindingParser.prototype._reportError = /**\n     * @param {?} message\n     * @param {?} sourceSpan\n     * @param {?=} level\n     * @return {?}\n     */\n    function (message, sourceSpan, level) {\n        if (level === void 0) { level = ParseErrorLevel.ERROR; }\n        this._targetErrors.push(new ParseError(sourceSpan, message, level));\n    };\n    /**\n     * @param {?} errors\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype._reportExpressionParserErrors = /**\n     * @param {?} errors\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (errors, sourceSpan) {\n        for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {\n            var error = errors_1[_i];\n            this._reportError(error.message, sourceSpan);\n        }\n    };\n    /**\n     * @param {?} ast\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype._checkPipes = /**\n     * @param {?} ast\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (ast, sourceSpan) {\n        var _this = this;\n        if (ast) {\n            var /** @type {?} */ collector = new PipeCollector();\n            ast.visit(collector);\n            collector.pipes.forEach(function (ast, pipeName) {\n                var /** @type {?} */ pipeMeta = _this.pipesByName.get(pipeName);\n                if (!pipeMeta) {\n                    _this._reportError(\"The pipe '\" + pipeName + \"' could not be found\", new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));\n                }\n                else {\n                    _this._usedPipes.set(pipeName, pipeMeta);\n                }\n            });\n        }\n    };\n    /**\n     * @param {?} propName the name of the property / attribute\n     * @param {?} sourceSpan\n     * @param {?} isAttr true when binding to an attribute\n     * @return {?}\n     */\n    BindingParser.prototype._validatePropertyOrAttributeName = /**\n     * @param {?} propName the name of the property / attribute\n     * @param {?} sourceSpan\n     * @param {?} isAttr true when binding to an attribute\n     * @return {?}\n     */\n    function (propName, sourceSpan, isAttr) {\n        var /** @type {?} */ report = isAttr ? this._schemaRegistry.validateAttribute(propName) :\n            this._schemaRegistry.validateProperty(propName);\n        if (report.error) {\n            this._reportError(/** @type {?} */ ((report.msg)), sourceSpan, ParseErrorLevel.ERROR);\n        }\n    };\n    return BindingParser;\n}());\n/**\n * Parses bindings in templates and in the directive host area.\n */\nexport { BindingParser };\nfunction BindingParser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BindingParser.prototype.pipesByName;\n    /** @type {?} */\n    BindingParser.prototype._usedPipes;\n    /** @type {?} */\n    BindingParser.prototype._exprParser;\n    /** @type {?} */\n    BindingParser.prototype._interpolationConfig;\n    /** @type {?} */\n    BindingParser.prototype._schemaRegistry;\n    /** @type {?} */\n    BindingParser.prototype._targetErrors;\n}\nvar PipeCollector = /** @class */ (function (_super) {\n    tslib_1.__extends(PipeCollector, _super);\n    function PipeCollector() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.pipes = new Map();\n        return _this;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    PipeCollector.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        this.pipes.set(ast.name, ast);\n        ast.exp.visit(this);\n        this.visitAll(ast.args, context);\n        return null;\n    };\n    return PipeCollector;\n}(RecursiveAstVisitor));\nexport { PipeCollector };\nfunction PipeCollector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PipeCollector.prototype.pipes;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction _isAnimationLabel(name) {\n    return name[0] == '@';\n}\n/**\n * @param {?} registry\n * @param {?} selector\n * @param {?} propName\n * @param {?} isAttribute\n * @return {?}\n */\nexport function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {\n    var /** @type {?} */ ctxs = [];\n    CssSelector.parse(selector).forEach(function (selector) {\n        var /** @type {?} */ elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();\n        var /** @type {?} */ notElementNames = new Set(selector.notSelectors.filter(function (selector) { return selector.isElementSelector(); })\n            .map(function (selector) { return selector.element; }));\n        var /** @type {?} */ possibleElementNames = elementNames.filter(function (elementName) { return !notElementNames.has(elementName); });\n        ctxs.push.apply(ctxs, possibleElementNames.map(function (elementName) { return registry.securityContext(elementName, propName, isAttribute); }));\n    });\n    return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();\n}\n//# sourceMappingURL=binding_parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { identifierName } from '../compile_metadata';\nimport { ASTWithSource, EmptyExpr } from '../expression_parser/ast';\nimport { Identifiers, createTokenForExternalReference, createTokenForReference } from '../identifiers';\nimport * as html from '../ml_parser/ast';\nimport { ParseTreeResult } from '../ml_parser/html_parser';\nimport { removeWhitespaces, replaceNgsp } from '../ml_parser/html_whitespaces';\nimport { expandNodes } from '../ml_parser/icu_ast_expander';\nimport { InterpolationConfig } from '../ml_parser/interpolation_config';\nimport { isNgTemplate, splitNsName } from '../ml_parser/tags';\nimport { ParseError, ParseErrorLevel, ParseSourceSpan } from '../parse_util';\nimport { ProviderElementContext, ProviderViewContext } from '../provider_analyzer';\nimport { CssSelector, SelectorMatcher } from '../selector';\nimport { isStyleUrlResolvable } from '../style_url_resolver';\nimport { syntaxError } from '../util';\nimport { BindingParser } from './binding_parser';\nimport { AttrAst, BoundDirectivePropertyAst, BoundTextAst, DirectiveAst, ElementAst, EmbeddedTemplateAst, NgContentAst, PropertyBindingType, ReferenceAst, TextAst, VariableAst, templateVisitAll } from './template_ast';\nimport { PreparsedElementType, preparseElement } from './template_preparser';\nvar /** @type {?} */ BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$/;\n// Group 1 = \"bind-\"\nvar /** @type {?} */ KW_BIND_IDX = 1;\n// Group 2 = \"let-\"\nvar /** @type {?} */ KW_LET_IDX = 2;\n// Group 3 = \"ref-/#\"\nvar /** @type {?} */ KW_REF_IDX = 3;\n// Group 4 = \"on-\"\nvar /** @type {?} */ KW_ON_IDX = 4;\n// Group 5 = \"bindon-\"\nvar /** @type {?} */ KW_BINDON_IDX = 5;\n// Group 6 = \"@\"\nvar /** @type {?} */ KW_AT_IDX = 6;\n// Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\nvar /** @type {?} */ IDENT_KW_IDX = 7;\n// Group 8 = identifier inside [()]\nvar /** @type {?} */ IDENT_BANANA_BOX_IDX = 8;\n// Group 9 = identifier inside []\nvar /** @type {?} */ IDENT_PROPERTY_IDX = 9;\n// Group 10 = identifier inside ()\nvar /** @type {?} */ IDENT_EVENT_IDX = 10;\nvar /** @type {?} */ TEMPLATE_ATTR_PREFIX = '*';\nvar /** @type {?} */ CLASS_ATTR = 'class';\nvar /** @type {?} */ TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];\nvar /** @type {?} */ warningCounts = {};\n/**\n * @param {?} warnings\n * @return {?}\n */\nfunction warnOnlyOnce(warnings) {\n    return function (error) {\n        if (warnings.indexOf(error.msg) !== -1) {\n            warningCounts[error.msg] = (warningCounts[error.msg] || 0) + 1;\n            return warningCounts[error.msg] <= 1;\n        }\n        return true;\n    };\n}\nvar TemplateParseError = /** @class */ (function (_super) {\n    tslib_1.__extends(TemplateParseError, _super);\n    function TemplateParseError(message, span, level) {\n        return _super.call(this, span, message, level) || this;\n    }\n    return TemplateParseError;\n}(ParseError));\nexport { TemplateParseError };\nvar TemplateParseResult = /** @class */ (function () {\n    function TemplateParseResult(templateAst, usedPipes, errors) {\n        this.templateAst = templateAst;\n        this.usedPipes = usedPipes;\n        this.errors = errors;\n    }\n    return TemplateParseResult;\n}());\nexport { TemplateParseResult };\nfunction TemplateParseResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateParseResult.prototype.templateAst;\n    /** @type {?} */\n    TemplateParseResult.prototype.usedPipes;\n    /** @type {?} */\n    TemplateParseResult.prototype.errors;\n}\nvar TemplateParser = /** @class */ (function () {\n    function TemplateParser(_config, _reflector, _exprParser, _schemaRegistry, _htmlParser, _console, transforms) {\n        this._config = _config;\n        this._reflector = _reflector;\n        this._exprParser = _exprParser;\n        this._schemaRegistry = _schemaRegistry;\n        this._htmlParser = _htmlParser;\n        this._console = _console;\n        this.transforms = transforms;\n    }\n    Object.defineProperty(TemplateParser.prototype, \"expressionParser\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._exprParser; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} component\n     * @param {?} template\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} schemas\n     * @param {?} templateUrl\n     * @param {?} preserveWhitespaces\n     * @return {?}\n     */\n    TemplateParser.prototype.parse = /**\n     * @param {?} component\n     * @param {?} template\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} schemas\n     * @param {?} templateUrl\n     * @param {?} preserveWhitespaces\n     * @return {?}\n     */\n    function (component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces) {\n        var /** @type {?} */ result = this.tryParse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces);\n        var /** @type {?} */ warnings = /** @type {?} */ ((result.errors)).filter(function (error) { return error.level === ParseErrorLevel.WARNING; });\n        var /** @type {?} */ errors = /** @type {?} */ ((result.errors)).filter(function (error) { return error.level === ParseErrorLevel.ERROR; });\n        if (warnings.length > 0) {\n            this._console.warn(\"Template parse warnings:\\n\" + warnings.join('\\n'));\n        }\n        if (errors.length > 0) {\n            var /** @type {?} */ errorString = errors.join('\\n');\n            throw syntaxError(\"Template parse errors:\\n\" + errorString, errors);\n        }\n        return { template: /** @type {?} */ ((result.templateAst)), pipes: /** @type {?} */ ((result.usedPipes)) };\n    };\n    /**\n     * @param {?} component\n     * @param {?} template\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} schemas\n     * @param {?} templateUrl\n     * @param {?} preserveWhitespaces\n     * @return {?}\n     */\n    TemplateParser.prototype.tryParse = /**\n     * @param {?} component\n     * @param {?} template\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} schemas\n     * @param {?} templateUrl\n     * @param {?} preserveWhitespaces\n     * @return {?}\n     */\n    function (component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces) {\n        var /** @type {?} */ htmlParseResult = typeof template === 'string' ? /** @type {?} */ ((this._htmlParser)).parse(template, templateUrl, true, this.getInterpolationConfig(component)) :\n            template;\n        if (!preserveWhitespaces) {\n            htmlParseResult = removeWhitespaces(htmlParseResult);\n        }\n        return this.tryParseHtml(this.expandHtml(htmlParseResult), component, directives, pipes, schemas);\n    };\n    /**\n     * @param {?} htmlAstWithErrors\n     * @param {?} component\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} schemas\n     * @return {?}\n     */\n    TemplateParser.prototype.tryParseHtml = /**\n     * @param {?} htmlAstWithErrors\n     * @param {?} component\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} schemas\n     * @return {?}\n     */\n    function (htmlAstWithErrors, component, directives, pipes, schemas) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ errors = htmlAstWithErrors.errors;\n        var /** @type {?} */ usedPipes = [];\n        if (htmlAstWithErrors.rootNodes.length > 0) {\n            var /** @type {?} */ uniqDirectives = removeSummaryDuplicates(directives);\n            var /** @type {?} */ uniqPipes = removeSummaryDuplicates(pipes);\n            var /** @type {?} */ providerViewContext = new ProviderViewContext(this._reflector, component);\n            var /** @type {?} */ interpolationConfig = /** @type {?} */ ((undefined));\n            if (component.template && component.template.interpolation) {\n                interpolationConfig = {\n                    start: component.template.interpolation[0],\n                    end: component.template.interpolation[1]\n                };\n            }\n            var /** @type {?} */ bindingParser = new BindingParser(this._exprParser, /** @type {?} */ ((interpolationConfig)), this._schemaRegistry, uniqPipes, errors);\n            var /** @type {?} */ parseVisitor = new TemplateParseVisitor(this._reflector, this._config, providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);\n            result = html.visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);\n            errors.push.apply(errors, providerViewContext.errors);\n            usedPipes.push.apply(usedPipes, bindingParser.getUsedPipes());\n        }\n        else {\n            result = [];\n        }\n        this._assertNoReferenceDuplicationOnTemplate(result, errors);\n        if (errors.length > 0) {\n            return new TemplateParseResult(result, usedPipes, errors);\n        }\n        if (this.transforms) {\n            this.transforms.forEach(function (transform) { result = templateVisitAll(transform, result); });\n        }\n        return new TemplateParseResult(result, usedPipes, errors);\n    };\n    /**\n     * @param {?} htmlAstWithErrors\n     * @param {?=} forced\n     * @return {?}\n     */\n    TemplateParser.prototype.expandHtml = /**\n     * @param {?} htmlAstWithErrors\n     * @param {?=} forced\n     * @return {?}\n     */\n    function (htmlAstWithErrors, forced) {\n        if (forced === void 0) { forced = false; }\n        var /** @type {?} */ errors = htmlAstWithErrors.errors;\n        if (errors.length == 0 || forced) {\n            // Transform ICU messages to angular directives\n            var /** @type {?} */ expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);\n            errors.push.apply(errors, expandedHtmlAst.errors);\n            htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);\n        }\n        return htmlAstWithErrors;\n    };\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    TemplateParser.prototype.getInterpolationConfig = /**\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        if (component.template) {\n            return InterpolationConfig.fromArray(component.template.interpolation);\n        }\n        return undefined;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} result\n     * @param {?} errors\n     * @return {?}\n     */\n    TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = /**\n     * \\@internal\n     * @param {?} result\n     * @param {?} errors\n     * @return {?}\n     */\n    function (result, errors) {\n        var /** @type {?} */ existingReferences = [];\n        result.filter(function (element) { return !!(/** @type {?} */ (element)).references; })\n            .forEach(function (element) {\n            return (/** @type {?} */ (element)).references.forEach(function (reference) {\n                var /** @type {?} */ name = reference.name;\n                if (existingReferences.indexOf(name) < 0) {\n                    existingReferences.push(name);\n                }\n                else {\n                    var /** @type {?} */ error = new TemplateParseError(\"Reference \\\"#\" + name + \"\\\" is defined several times\", reference.sourceSpan, ParseErrorLevel.ERROR);\n                    errors.push(error);\n                }\n            });\n        });\n    };\n    return TemplateParser;\n}());\nexport { TemplateParser };\nfunction TemplateParser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateParser.prototype._config;\n    /** @type {?} */\n    TemplateParser.prototype._reflector;\n    /** @type {?} */\n    TemplateParser.prototype._exprParser;\n    /** @type {?} */\n    TemplateParser.prototype._schemaRegistry;\n    /** @type {?} */\n    TemplateParser.prototype._htmlParser;\n    /** @type {?} */\n    TemplateParser.prototype._console;\n    /** @type {?} */\n    TemplateParser.prototype.transforms;\n}\nvar TemplateParseVisitor = /** @class */ (function () {\n    function TemplateParseVisitor(reflector, config, providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {\n        var _this = this;\n        this.reflector = reflector;\n        this.config = config;\n        this.providerViewContext = providerViewContext;\n        this._bindingParser = _bindingParser;\n        this._schemaRegistry = _schemaRegistry;\n        this._schemas = _schemas;\n        this._targetErrors = _targetErrors;\n        this.selectorMatcher = new SelectorMatcher();\n        this.directivesIndex = new Map();\n        this.ngContentCount = 0;\n        // Note: queries start with id 1 so we can use the number in a Bloom filter!\n        this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;\n        directives.forEach(function (directive, index) {\n            var /** @type {?} */ selector = CssSelector.parse(/** @type {?} */ ((directive.selector)));\n            _this.selectorMatcher.addSelectables(selector, directive);\n            _this.directivesIndex.set(directive, index);\n        });\n    }\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansion, context) { return null; };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansionCase, context) { return null; };\n    /**\n     * @param {?} text\n     * @param {?} parent\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} parent\n     * @return {?}\n     */\n    function (text, parent) {\n        var /** @type {?} */ ngContentIndex = /** @type {?} */ ((parent.findNgContentIndex(TEXT_CSS_SELECTOR)));\n        var /** @type {?} */ valueNoNgsp = replaceNgsp(text.value);\n        var /** @type {?} */ expr = this._bindingParser.parseInterpolation(valueNoNgsp, /** @type {?} */ ((text.sourceSpan)));\n        return expr ? new BoundTextAst(expr, ngContentIndex, /** @type {?} */ ((text.sourceSpan))) :\n            new TextAst(valueNoNgsp, ngContentIndex, /** @type {?} */ ((text.sourceSpan)));\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) {\n        return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { return null; };\n    /**\n     * @param {?} element\n     * @param {?} parent\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} parent\n     * @return {?}\n     */\n    function (element, parent) {\n        var _this = this;\n        var /** @type {?} */ queryStartIndex = this.contentQueryStartId;\n        var /** @type {?} */ nodeName = element.name;\n        var /** @type {?} */ preparsedElement = preparseElement(element);\n        if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n            preparsedElement.type === PreparsedElementType.STYLE) {\n            // Skipping <script> for security reasons\n            // Skipping <style> as we already processed them\n            // in the StyleCompiler\n            return null;\n        }\n        if (preparsedElement.type === PreparsedElementType.STYLESHEET &&\n            isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n            // Skipping stylesheets with either relative urls or package scheme as we already processed\n            // them in the StyleCompiler\n            return null;\n        }\n        var /** @type {?} */ matchableAttrs = [];\n        var /** @type {?} */ elementOrDirectiveProps = [];\n        var /** @type {?} */ elementOrDirectiveRefs = [];\n        var /** @type {?} */ elementVars = [];\n        var /** @type {?} */ events = [];\n        var /** @type {?} */ templateElementOrDirectiveProps = [];\n        var /** @type {?} */ templateMatchableAttrs = [];\n        var /** @type {?} */ templateElementVars = [];\n        var /** @type {?} */ hasInlineTemplates = false;\n        var /** @type {?} */ attrs = [];\n        var /** @type {?} */ isTemplateElement = isNgTemplate(element.name);\n        element.attrs.forEach(function (attr) {\n            var /** @type {?} */ hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);\n            var /** @type {?} */ templateBindingsSource;\n            var /** @type {?} */ prefixToken;\n            var /** @type {?} */ normalizedName = _this._normalizeAttributeName(attr.name);\n            if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {\n                templateBindingsSource = attr.value;\n                prefixToken = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length) + ':';\n            }\n            var /** @type {?} */ hasTemplateBinding = templateBindingsSource != null;\n            if (hasTemplateBinding) {\n                if (hasInlineTemplates) {\n                    _this._reportError(\"Can't have multiple template bindings on one element. Use only one attribute prefixed with *\", attr.sourceSpan);\n                }\n                hasInlineTemplates = true;\n                _this._bindingParser.parseInlineTemplateBinding(/** @type {?} */ ((prefixToken)), /** @type {?} */ ((templateBindingsSource)), attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);\n            }\n            if (!hasBinding && !hasTemplateBinding) {\n                // don't include the bindings as attributes as well in the AST\n                attrs.push(_this.visitAttribute(attr, null));\n                matchableAttrs.push([attr.name, attr.value]);\n            }\n        });\n        var /** @type {?} */ elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);\n        var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement;\n        var /** @type {?} */ references = [];\n        var /** @type {?} */ boundDirectivePropNames = new Set();\n        var /** @type {?} */ directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, /** @type {?} */ ((element.sourceSpan)), references, boundDirectivePropNames);\n        var /** @type {?} */ elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, boundDirectivePropNames);\n        var /** @type {?} */ isViewRoot = parent.isTemplateElement || hasInlineTemplates;\n        var /** @type {?} */ providerContext = new ProviderElementContext(this.providerViewContext, /** @type {?} */ ((parent.providerContext)), isViewRoot, directiveAsts, attrs, references, isTemplateElement, queryStartIndex, /** @type {?} */ ((element.sourceSpan)));\n        var /** @type {?} */ children = html.visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? /** @type {?} */ ((parent.providerContext)) : providerContext));\n        providerContext.afterElement();\n        // Override the actual selector when the `ngProjectAs` attribute is provided\n        var /** @type {?} */ projectionSelector = preparsedElement.projectAs != null ?\n            CssSelector.parse(preparsedElement.projectAs)[0] :\n            elementCssSelector;\n        var /** @type {?} */ ngContentIndex = /** @type {?} */ ((parent.findNgContentIndex(projectionSelector)));\n        var /** @type {?} */ parsedElement;\n        if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n            if (element.children && !element.children.every(_isEmptyTextNode)) {\n                this._reportError(\"<ng-content> element cannot have content.\", /** @type {?} */ ((element.sourceSpan)));\n            }\n            parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? /** @type {?} */ ((null)) : ngContentIndex, /** @type {?} */ ((element.sourceSpan)));\n        }\n        else if (isTemplateElement) {\n            this._assertAllEventsPublishedByDirectives(directiveAsts, events);\n            this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, /** @type {?} */ ((element.sourceSpan)));\n            parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? /** @type {?} */ ((null)) : ngContentIndex, /** @type {?} */ ((element.sourceSpan)));\n        }\n        else {\n            this._assertElementExists(matchElement, element);\n            this._assertOnlyOneComponent(directiveAsts, /** @type {?} */ ((element.sourceSpan)));\n            var /** @type {?} */ ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);\n            parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan || null);\n        }\n        if (hasInlineTemplates) {\n            var /** @type {?} */ templateQueryStartIndex = this.contentQueryStartId;\n            var /** @type {?} */ templateSelector = createElementCssSelector('ng-template', templateMatchableAttrs);\n            var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateSelector).directives;\n            var /** @type {?} */ templateBoundDirectivePropNames = new Set();\n            var /** @type {?} */ templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], /** @type {?} */ ((element.sourceSpan)), [], templateBoundDirectivePropNames);\n            var /** @type {?} */ templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateBoundDirectivePropNames);\n            this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, /** @type {?} */ ((element.sourceSpan)));\n            var /** @type {?} */ templateProviderContext = new ProviderElementContext(this.providerViewContext, /** @type {?} */ ((parent.providerContext)), parent.isTemplateElement, templateDirectiveAsts, [], [], true, templateQueryStartIndex, /** @type {?} */ ((element.sourceSpan)));\n            templateProviderContext.afterElement();\n            parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches, [parsedElement], ngContentIndex, /** @type {?} */ ((element.sourceSpan)));\n        }\n        return parsedElement;\n    };\n    /**\n     * @param {?} isTemplateElement\n     * @param {?} attr\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @param {?} targetEvents\n     * @param {?} targetRefs\n     * @param {?} targetVars\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._parseAttr = /**\n     * @param {?} isTemplateElement\n     * @param {?} attr\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @param {?} targetEvents\n     * @param {?} targetRefs\n     * @param {?} targetVars\n     * @return {?}\n     */\n    function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {\n        var /** @type {?} */ name = this._normalizeAttributeName(attr.name);\n        var /** @type {?} */ value = attr.value;\n        var /** @type {?} */ srcSpan = attr.sourceSpan;\n        var /** @type {?} */ bindParts = name.match(BIND_NAME_REGEXP);\n        var /** @type {?} */ hasBinding = false;\n        var /** @type {?} */ boundEvents = [];\n        if (bindParts !== null) {\n            hasBinding = true;\n            if (bindParts[KW_BIND_IDX] != null) {\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n            }\n            else if (bindParts[KW_LET_IDX]) {\n                if (isTemplateElement) {\n                    var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];\n                    this._parseVariable(identifier, value, srcSpan, targetVars);\n                }\n                else {\n                    this._reportError(\"\\\"let-\\\" is only supported on ng-template elements.\", srcSpan);\n                }\n            }\n            else if (bindParts[KW_REF_IDX]) {\n                var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];\n                this._parseReference(identifier, value, srcSpan, targetRefs);\n            }\n            else if (bindParts[KW_ON_IDX]) {\n                this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n            }\n            else if (bindParts[KW_BINDON_IDX]) {\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n                this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n            }\n            else if (bindParts[KW_AT_IDX]) {\n                this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);\n            }\n            else if (bindParts[IDENT_BANANA_BOX_IDX]) {\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n                this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n            }\n            else if (bindParts[IDENT_PROPERTY_IDX]) {\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n            }\n            else if (bindParts[IDENT_EVENT_IDX]) {\n                this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n            }\n        }\n        else {\n            hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);\n        }\n        if (!hasBinding) {\n            this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);\n        }\n        return hasBinding;\n    };\n    /**\n     * @param {?} attrName\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._normalizeAttributeName = /**\n     * @param {?} attrName\n     * @return {?}\n     */\n    function (attrName) {\n        return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n    };\n    /**\n     * @param {?} identifier\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetVars\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._parseVariable = /**\n     * @param {?} identifier\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetVars\n     * @return {?}\n     */\n    function (identifier, value, sourceSpan, targetVars) {\n        if (identifier.indexOf('-') > -1) {\n            this._reportError(\"\\\"-\\\" is not allowed in variable names\", sourceSpan);\n        }\n        targetVars.push(new VariableAst(identifier, value, sourceSpan));\n    };\n    /**\n     * @param {?} identifier\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetRefs\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._parseReference = /**\n     * @param {?} identifier\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetRefs\n     * @return {?}\n     */\n    function (identifier, value, sourceSpan, targetRefs) {\n        if (identifier.indexOf('-') > -1) {\n            this._reportError(\"\\\"-\\\" is not allowed in reference names\", sourceSpan);\n        }\n        targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));\n    };\n    /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._parseAssignmentEvent = /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {\n        this._bindingParser.parseEvent(name + \"Change\", expression + \"=$event\", sourceSpan, targetMatchableAttrs, targetEvents);\n    };\n    /**\n     * @param {?} selectorMatcher\n     * @param {?} elementCssSelector\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._parseDirectives = /**\n     * @param {?} selectorMatcher\n     * @param {?} elementCssSelector\n     * @return {?}\n     */\n    function (selectorMatcher, elementCssSelector) {\n        var _this = this;\n        // Need to sort the directives so that we get consistent results throughout,\n        // as selectorMatcher uses Maps inside.\n        // Also deduplicate directives as they might match more than one time!\n        var /** @type {?} */ directives = new Array(this.directivesIndex.size);\n        // Whether any directive selector matches on the element name\n        var /** @type {?} */ matchElement = false;\n        selectorMatcher.match(elementCssSelector, function (selector, directive) {\n            directives[/** @type {?} */ ((_this.directivesIndex.get(directive)))] = directive;\n            matchElement = matchElement || selector.hasElementSelector();\n        });\n        return {\n            directives: directives.filter(function (dir) { return !!dir; }),\n            matchElement: matchElement,\n        };\n    };\n    /**\n     * @param {?} isTemplateElement\n     * @param {?} elementName\n     * @param {?} directives\n     * @param {?} props\n     * @param {?} elementOrDirectiveRefs\n     * @param {?} elementSourceSpan\n     * @param {?} targetReferences\n     * @param {?} targetBoundDirectivePropNames\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._createDirectiveAsts = /**\n     * @param {?} isTemplateElement\n     * @param {?} elementName\n     * @param {?} directives\n     * @param {?} props\n     * @param {?} elementOrDirectiveRefs\n     * @param {?} elementSourceSpan\n     * @param {?} targetReferences\n     * @param {?} targetBoundDirectivePropNames\n     * @return {?}\n     */\n    function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences, targetBoundDirectivePropNames) {\n        var _this = this;\n        var /** @type {?} */ matchedReferences = new Set();\n        var /** @type {?} */ component = /** @type {?} */ ((null));\n        var /** @type {?} */ directiveAsts = directives.map(function (directive) {\n            var /** @type {?} */ sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, \"Directive \" + identifierName(directive.type));\n            if (directive.isComponent) {\n                component = directive;\n            }\n            var /** @type {?} */ directiveProperties = [];\n            var /** @type {?} */ hostProperties = /** @type {?} */ ((_this._bindingParser.createDirectiveHostPropertyAsts(directive, elementName, sourceSpan)));\n            // Note: We need to check the host properties here as well,\n            // as we don't know the element name in the DirectiveWrapperCompiler yet.\n            hostProperties = _this._checkPropertiesInSchema(elementName, hostProperties);\n            var /** @type {?} */ hostEvents = /** @type {?} */ ((_this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan)));\n            _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);\n            elementOrDirectiveRefs.forEach(function (elOrDirRef) {\n                if ((elOrDirRef.value.length === 0 && directive.isComponent) ||\n                    (elOrDirRef.isReferenceToDirective(directive))) {\n                    targetReferences.push(new ReferenceAst(elOrDirRef.name, createTokenForReference(directive.type.reference), elOrDirRef.value, elOrDirRef.sourceSpan));\n                    matchedReferences.add(elOrDirRef.name);\n                }\n            });\n            var /** @type {?} */ contentQueryStartId = _this.contentQueryStartId;\n            _this.contentQueryStartId += directive.queries.length;\n            return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId, sourceSpan);\n        });\n        elementOrDirectiveRefs.forEach(function (elOrDirRef) {\n            if (elOrDirRef.value.length > 0) {\n                if (!matchedReferences.has(elOrDirRef.name)) {\n                    _this._reportError(\"There is no directive with \\\"exportAs\\\" set to \\\"\" + elOrDirRef.value + \"\\\"\", elOrDirRef.sourceSpan);\n                }\n            }\n            else if (!component) {\n                var /** @type {?} */ refToken = /** @type {?} */ ((null));\n                if (isTemplateElement) {\n                    refToken = createTokenForExternalReference(_this.reflector, Identifiers.TemplateRef);\n                }\n                targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.value, elOrDirRef.sourceSpan));\n            }\n        });\n        return directiveAsts;\n    };\n    /**\n     * @param {?} directiveProperties\n     * @param {?} boundProps\n     * @param {?} targetBoundDirectiveProps\n     * @param {?} targetBoundDirectivePropNames\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._createDirectivePropertyAsts = /**\n     * @param {?} directiveProperties\n     * @param {?} boundProps\n     * @param {?} targetBoundDirectiveProps\n     * @param {?} targetBoundDirectivePropNames\n     * @return {?}\n     */\n    function (directiveProperties, boundProps, targetBoundDirectiveProps, targetBoundDirectivePropNames) {\n        if (directiveProperties) {\n            var /** @type {?} */ boundPropsByName_1 = new Map();\n            boundProps.forEach(function (boundProp) {\n                var /** @type {?} */ prevValue = boundPropsByName_1.get(boundProp.name);\n                if (!prevValue || prevValue.isLiteral) {\n                    // give [a]=\"b\" a higher precedence than a=\"b\" on the same element\n                    // give [a]=\"b\" a higher precedence than a=\"b\" on the same element\n                    boundPropsByName_1.set(boundProp.name, boundProp);\n                }\n            });\n            Object.keys(directiveProperties).forEach(function (dirProp) {\n                var /** @type {?} */ elProp = directiveProperties[dirProp];\n                var /** @type {?} */ boundProp = boundPropsByName_1.get(elProp);\n                // Bindings are optional, so this binding only needs to be set up if an expression is given.\n                if (boundProp) {\n                    targetBoundDirectivePropNames.add(boundProp.name);\n                    if (!isEmptyExpression(boundProp.expression)) {\n                        targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));\n                    }\n                }\n            });\n        }\n    };\n    /**\n     * @param {?} elementName\n     * @param {?} props\n     * @param {?} boundDirectivePropNames\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._createElementPropertyAsts = /**\n     * @param {?} elementName\n     * @param {?} props\n     * @param {?} boundDirectivePropNames\n     * @return {?}\n     */\n    function (elementName, props, boundDirectivePropNames) {\n        var _this = this;\n        var /** @type {?} */ boundElementProps = [];\n        props.forEach(function (prop) {\n            if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {\n                boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));\n            }\n        });\n        return this._checkPropertiesInSchema(elementName, boundElementProps);\n    };\n    /**\n     * @param {?} directives\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._findComponentDirectives = /**\n     * @param {?} directives\n     * @return {?}\n     */\n    function (directives) {\n        return directives.filter(function (directive) { return directive.directive.isComponent; });\n    };\n    /**\n     * @param {?} directives\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._findComponentDirectiveNames = /**\n     * @param {?} directives\n     * @return {?}\n     */\n    function (directives) {\n        return this._findComponentDirectives(directives)\n            .map(function (directive) { return ((identifierName(directive.directive.type))); });\n    };\n    /**\n     * @param {?} directives\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._assertOnlyOneComponent = /**\n     * @param {?} directives\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (directives, sourceSpan) {\n        var /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);\n        if (componentTypeNames.length > 1) {\n            this._reportError(\"More than one component matched on this element.\\n\" +\n                \"Make sure that only one component's selector can match a given element.\\n\" +\n                (\"Conflicting components: \" + componentTypeNames.join(',')), sourceSpan);\n        }\n    };\n    /**\n     * Make sure that non-angular tags conform to the schemas.\n     *\n     * Note: An element is considered an angular tag when at least one directive selector matches the\n     * tag name.\n     *\n     * @param {?} matchElement Whether any directive has matched on the tag name\n     * @param {?} element the html element\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._assertElementExists = /**\n     * Make sure that non-angular tags conform to the schemas.\n     *\n     * Note: An element is considered an angular tag when at least one directive selector matches the\n     * tag name.\n     *\n     * @param {?} matchElement Whether any directive has matched on the tag name\n     * @param {?} element the html element\n     * @return {?}\n     */\n    function (matchElement, element) {\n        var /** @type {?} */ elName = element.name.replace(/^:xhtml:/, '');\n        if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {\n            var /** @type {?} */ errorMsg = \"'\" + elName + \"' is not a known element:\\n\";\n            errorMsg +=\n                \"1. If '\" + elName + \"' is an Angular component, then verify that it is part of this module.\\n\";\n            if (elName.indexOf('-') > -1) {\n                errorMsg +=\n                    \"2. If '\" + elName + \"' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.\";\n            }\n            else {\n                errorMsg +=\n                    \"2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.\";\n            }\n            this._reportError(errorMsg, /** @type {?} */ ((element.sourceSpan)));\n        }\n    };\n    /**\n     * @param {?} directives\n     * @param {?} elementProps\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = /**\n     * @param {?} directives\n     * @param {?} elementProps\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (directives, elementProps, sourceSpan) {\n        var _this = this;\n        var /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);\n        if (componentTypeNames.length > 0) {\n            this._reportError(\"Components on an embedded template: \" + componentTypeNames.join(','), sourceSpan);\n        }\n        elementProps.forEach(function (prop) {\n            _this._reportError(\"Property binding \" + prop.name + \" not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \\\"@NgModule.declarations\\\".\", sourceSpan);\n        });\n    };\n    /**\n     * @param {?} directives\n     * @param {?} events\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = /**\n     * @param {?} directives\n     * @param {?} events\n     * @return {?}\n     */\n    function (directives, events) {\n        var _this = this;\n        var /** @type {?} */ allDirectiveEvents = new Set();\n        directives.forEach(function (directive) {\n            Object.keys(directive.directive.outputs).forEach(function (k) {\n                var /** @type {?} */ eventName = directive.directive.outputs[k];\n                allDirectiveEvents.add(eventName);\n            });\n        });\n        events.forEach(function (event) {\n            if (event.target != null || !allDirectiveEvents.has(event.name)) {\n                _this._reportError(\"Event binding \" + event.fullName + \" not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \\\"@NgModule.declarations\\\".\", event.sourceSpan);\n            }\n        });\n    };\n    /**\n     * @param {?} elementName\n     * @param {?} boundProps\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._checkPropertiesInSchema = /**\n     * @param {?} elementName\n     * @param {?} boundProps\n     * @return {?}\n     */\n    function (elementName, boundProps) {\n        var _this = this;\n        // Note: We can't filter out empty expressions before this method,\n        // as we still want to validate them!\n        return boundProps.filter(function (boundProp) {\n            if (boundProp.type === PropertyBindingType.Property &&\n                !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {\n                var /** @type {?} */ errorMsg = \"Can't bind to '\" + boundProp.name + \"' since it isn't a known property of '\" + elementName + \"'.\";\n                if (elementName.startsWith('ng-')) {\n                    errorMsg +=\n                        \"\\n1. If '\" + boundProp.name + \"' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component.\" +\n                            \"\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.\";\n                }\n                else if (elementName.indexOf('-') > -1) {\n                    errorMsg +=\n                        \"\\n1. If '\" + elementName + \"' is an Angular component and it has '\" + boundProp.name + \"' input, then verify that it is part of this module.\" +\n                            (\"\\n2. If '\" + elementName + \"' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.\") +\n                            \"\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.\";\n                }\n                _this._reportError(errorMsg, boundProp.sourceSpan);\n            }\n            return !isEmptyExpression(boundProp.value);\n        });\n    };\n    /**\n     * @param {?} message\n     * @param {?} sourceSpan\n     * @param {?=} level\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._reportError = /**\n     * @param {?} message\n     * @param {?} sourceSpan\n     * @param {?=} level\n     * @return {?}\n     */\n    function (message, sourceSpan, level) {\n        if (level === void 0) { level = ParseErrorLevel.ERROR; }\n        this._targetErrors.push(new ParseError(sourceSpan, message, level));\n    };\n    return TemplateParseVisitor;\n}());\nfunction TemplateParseVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateParseVisitor.prototype.selectorMatcher;\n    /** @type {?} */\n    TemplateParseVisitor.prototype.directivesIndex;\n    /** @type {?} */\n    TemplateParseVisitor.prototype.ngContentCount;\n    /** @type {?} */\n    TemplateParseVisitor.prototype.contentQueryStartId;\n    /** @type {?} */\n    TemplateParseVisitor.prototype.reflector;\n    /** @type {?} */\n    TemplateParseVisitor.prototype.config;\n    /** @type {?} */\n    TemplateParseVisitor.prototype.providerViewContext;\n    /** @type {?} */\n    TemplateParseVisitor.prototype._bindingParser;\n    /** @type {?} */\n    TemplateParseVisitor.prototype._schemaRegistry;\n    /** @type {?} */\n    TemplateParseVisitor.prototype._schemas;\n    /** @type {?} */\n    TemplateParseVisitor.prototype._targetErrors;\n}\nvar NonBindableVisitor = /** @class */ (function () {\n    function NonBindableVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} parent\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitElement = /**\n     * @param {?} ast\n     * @param {?} parent\n     * @return {?}\n     */\n    function (ast, parent) {\n        var /** @type {?} */ preparsedElement = preparseElement(ast);\n        if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n            preparsedElement.type === PreparsedElementType.STYLE ||\n            preparsedElement.type === PreparsedElementType.STYLESHEET) {\n            // Skipping <script> for security reasons\n            // Skipping <style> and stylesheets as we already processed them\n            // in the StyleCompiler\n            return null;\n        }\n        var /** @type {?} */ attrNameAndValues = ast.attrs.map(function (attr) { return [attr.name, attr.value]; });\n        var /** @type {?} */ selector = createElementCssSelector(ast.name, attrNameAndValues);\n        var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(selector);\n        var /** @type {?} */ children = html.visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);\n        return new ElementAst(ast.name, html.visitAll(this, ast.attrs), [], [], [], [], [], false, [], children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { return null; };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) {\n        return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n    };\n    /**\n     * @param {?} text\n     * @param {?} parent\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} parent\n     * @return {?}\n     */\n    function (text, parent) {\n        var /** @type {?} */ ngContentIndex = /** @type {?} */ ((parent.findNgContentIndex(TEXT_CSS_SELECTOR)));\n        return new TextAst(text.value, ngContentIndex, /** @type {?} */ ((text.sourceSpan)));\n    };\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansion, context) { return expansion; };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansionCase, context) { return expansionCase; };\n    return NonBindableVisitor;\n}());\n/**\n * A reference to an element or directive in a template. E.g., the reference in this template:\n *\n * <div #myMenu=\"coolMenu\">\n *\n * would be {name: 'myMenu', value: 'coolMenu', sourceSpan: ...}\n */\nvar /**\n * A reference to an element or directive in a template. E.g., the reference in this template:\n *\n * <div #myMenu=\"coolMenu\">\n *\n * would be {name: 'myMenu', value: 'coolMenu', sourceSpan: ...}\n */\nElementOrDirectiveRef = /** @class */ (function () {\n    function ElementOrDirectiveRef(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /** Gets whether this is a reference to the given directive. */\n    /**\n     * Gets whether this is a reference to the given directive.\n     * @param {?} directive\n     * @return {?}\n     */\n    ElementOrDirectiveRef.prototype.isReferenceToDirective = /**\n     * Gets whether this is a reference to the given directive.\n     * @param {?} directive\n     * @return {?}\n     */\n    function (directive) {\n        return splitExportAs(directive.exportAs).indexOf(this.value) !== -1;\n    };\n    return ElementOrDirectiveRef;\n}());\nfunction ElementOrDirectiveRef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElementOrDirectiveRef.prototype.name;\n    /** @type {?} */\n    ElementOrDirectiveRef.prototype.value;\n    /** @type {?} */\n    ElementOrDirectiveRef.prototype.sourceSpan;\n}\n/**\n * Splits a raw, potentially comma-delimited `exportAs` value into an array of names.\n * @param {?} exportAs\n * @return {?}\n */\nfunction splitExportAs(exportAs) {\n    return exportAs ? exportAs.split(',').map(function (e) { return e.trim(); }) : [];\n}\n/**\n * @param {?} classAttrValue\n * @return {?}\n */\nexport function splitClasses(classAttrValue) {\n    return classAttrValue.trim().split(/\\s+/g);\n}\nvar ElementContext = /** @class */ (function () {\n    function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {\n        this.isTemplateElement = isTemplateElement;\n        this._ngContentIndexMatcher = _ngContentIndexMatcher;\n        this._wildcardNgContentIndex = _wildcardNgContentIndex;\n        this.providerContext = providerContext;\n    }\n    /**\n     * @param {?} isTemplateElement\n     * @param {?} directives\n     * @param {?} providerContext\n     * @return {?}\n     */\n    ElementContext.create = /**\n     * @param {?} isTemplateElement\n     * @param {?} directives\n     * @param {?} providerContext\n     * @return {?}\n     */\n    function (isTemplateElement, directives, providerContext) {\n        var /** @type {?} */ matcher = new SelectorMatcher();\n        var /** @type {?} */ wildcardNgContentIndex = /** @type {?} */ ((null));\n        var /** @type {?} */ component = directives.find(function (directive) { return directive.directive.isComponent; });\n        if (component) {\n            var /** @type {?} */ ngContentSelectors = /** @type {?} */ ((component.directive.template)).ngContentSelectors;\n            for (var /** @type {?} */ i = 0; i < ngContentSelectors.length; i++) {\n                var /** @type {?} */ selector = ngContentSelectors[i];\n                if (selector === '*') {\n                    wildcardNgContentIndex = i;\n                }\n                else {\n                    matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);\n                }\n            }\n        }\n        return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);\n    };\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    ElementContext.prototype.findNgContentIndex = /**\n     * @param {?} selector\n     * @return {?}\n     */\n    function (selector) {\n        var /** @type {?} */ ngContentIndices = [];\n        this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });\n        ngContentIndices.sort();\n        if (this._wildcardNgContentIndex != null) {\n            ngContentIndices.push(this._wildcardNgContentIndex);\n        }\n        return ngContentIndices.length > 0 ? ngContentIndices[0] : null;\n    };\n    return ElementContext;\n}());\nfunction ElementContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElementContext.prototype.isTemplateElement;\n    /** @type {?} */\n    ElementContext.prototype._ngContentIndexMatcher;\n    /** @type {?} */\n    ElementContext.prototype._wildcardNgContentIndex;\n    /** @type {?} */\n    ElementContext.prototype.providerContext;\n}\n/**\n * @param {?} elementName\n * @param {?} attributes\n * @return {?}\n */\nexport function createElementCssSelector(elementName, attributes) {\n    var /** @type {?} */ cssSelector = new CssSelector();\n    var /** @type {?} */ elNameNoNs = splitNsName(elementName)[1];\n    cssSelector.setElement(elNameNoNs);\n    for (var /** @type {?} */ i = 0; i < attributes.length; i++) {\n        var /** @type {?} */ attrName = attributes[i][0];\n        var /** @type {?} */ attrNameNoNs = splitNsName(attrName)[1];\n        var /** @type {?} */ attrValue = attributes[i][1];\n        cssSelector.addAttribute(attrNameNoNs, attrValue);\n        if (attrName.toLowerCase() == CLASS_ATTR) {\n            var /** @type {?} */ classes = splitClasses(attrValue);\n            classes.forEach(function (className) { return cssSelector.addClassName(className); });\n        }\n    }\n    return cssSelector;\n}\nvar /** @type {?} */ EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);\nvar /** @type {?} */ NON_BINDABLE_VISITOR = new NonBindableVisitor();\n/**\n * @param {?} node\n * @return {?}\n */\nfunction _isEmptyTextNode(node) {\n    return node instanceof html.Text && node.value.trim().length == 0;\n}\n/**\n * @template T\n * @param {?} items\n * @return {?}\n */\nexport function removeSummaryDuplicates(items) {\n    var /** @type {?} */ map = new Map();\n    items.forEach(function (item) {\n        if (!map.get(item.type.reference)) {\n            map.set(item.type.reference, item);\n        }\n    });\n    return Array.from(map.values());\n}\n/**\n * @param {?} ast\n * @return {?}\n */\nfunction isEmptyExpression(ast) {\n    if (ast instanceof ASTWithSource) {\n        ast = ast.ast;\n    }\n    return ast instanceof EmptyExpr;\n}\n//# sourceMappingURL=template_parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as cdAst from '../expression_parser/ast';\nimport { Identifiers } from '../identifiers';\nimport * as o from '../output/output_ast';\nvar EventHandlerVars = /** @class */ (function () {\n    function EventHandlerVars() {\n    }\n    EventHandlerVars.event = o.variable('$event');\n    return EventHandlerVars;\n}());\nexport { EventHandlerVars };\nfunction EventHandlerVars_tsickle_Closure_declarations() {\n    /** @type {?} */\n    EventHandlerVars.event;\n}\n/**\n * @record\n */\nexport function LocalResolver() { }\nfunction LocalResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LocalResolver.prototype.getLocal;\n}\nvar ConvertActionBindingResult = /** @class */ (function () {\n    function ConvertActionBindingResult(stmts, allowDefault) {\n        this.stmts = stmts;\n        this.allowDefault = allowDefault;\n        /**\n             * This is bit of a hack. It converts statements which render2 expects to statements which are\n             * expected by render3.\n             *\n             * Example: `<div click=\"doSomething($event)\">` will generate:\n             *\n             * Render3:\n             * ```\n             * const pd_b:any = ((<any>ctx.doSomething($event)) !== false);\n             * return pd_b;\n             * ```\n             *\n             * but render2 expects:\n             * ```\n             * return ctx.doSomething($event);\n             * ```\n             */\n        // TODO(misko): remove this hack once we no longer support ViewEngine.\n        this.render3Stmts = stmts.map(function (statement) {\n            if (statement instanceof o.DeclareVarStmt && statement.name == allowDefault.name &&\n                statement.value instanceof o.BinaryOperatorExpr) {\n                var /** @type {?} */ lhs = /** @type {?} */ (statement.value.lhs);\n                return new o.ReturnStatement(lhs.value);\n            }\n            return statement;\n        });\n    }\n    return ConvertActionBindingResult;\n}());\nexport { ConvertActionBindingResult };\nfunction ConvertActionBindingResult_tsickle_Closure_declarations() {\n    /**\n     * Store statements which are render3 compatible.\n     * @type {?}\n     */\n    ConvertActionBindingResult.prototype.render3Stmts;\n    /**\n     * Render2 compatible statements,\n     * @type {?}\n     */\n    ConvertActionBindingResult.prototype.stmts;\n    /**\n     * Variable name used with render2 compatible statements.\n     * @type {?}\n     */\n    ConvertActionBindingResult.prototype.allowDefault;\n}\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression is\n * used in an action binding (e.g. an event handler).\n * @param {?} localResolver\n * @param {?} implicitReceiver\n * @param {?} action\n * @param {?} bindingId\n * @param {?=} interpolationFunction\n * @return {?}\n */\nexport function convertActionBinding(localResolver, implicitReceiver, action, bindingId, interpolationFunction) {\n    if (!localResolver) {\n        localResolver = new DefaultLocalResolver();\n    }\n    var /** @type {?} */ actionWithoutBuiltins = convertPropertyBindingBuiltins({\n        createLiteralArrayConverter: function (argCount) {\n            // Note: no caching for literal arrays in actions.\n            return function (args) { return o.literalArr(args); };\n        },\n        createLiteralMapConverter: function (keys) {\n            // Note: no caching for literal maps in actions.\n            return function (values) {\n                var /** @type {?} */ entries = keys.map(function (k, i) {\n                    return ({\n                        key: k.key,\n                        value: values[i],\n                        quoted: k.quoted,\n                    });\n                });\n                return o.literalMap(entries);\n            };\n        },\n        createPipeConverter: function (name) {\n            throw new Error(\"Illegal State: Actions are not allowed to contain pipes. Pipe: \" + name);\n        }\n    }, action);\n    var /** @type {?} */ visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction);\n    var /** @type {?} */ actionStmts = [];\n    flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);\n    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);\n    var /** @type {?} */ lastIndex = actionStmts.length - 1;\n    var /** @type {?} */ preventDefaultVar = /** @type {?} */ ((null));\n    if (lastIndex >= 0) {\n        var /** @type {?} */ lastStatement = actionStmts[lastIndex];\n        var /** @type {?} */ returnExpr = convertStmtIntoExpression(lastStatement);\n        if (returnExpr) {\n            // Note: We need to cast the result of the method call to dynamic,\n            // as it might be a void method!\n            preventDefaultVar = createPreventDefaultVar(bindingId);\n            actionStmts[lastIndex] =\n                preventDefaultVar.set(returnExpr.cast(o.DYNAMIC_TYPE).notIdentical(o.literal(false)))\n                    .toDeclStmt(null, [o.StmtModifier.Final]);\n        }\n    }\n    return new ConvertActionBindingResult(actionStmts, preventDefaultVar);\n}\n/**\n * @record\n */\nexport function BuiltinConverter() { }\nfunction BuiltinConverter_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (args: o.Expression[]): o.Expression;\n    */\n}\n/**\n * @record\n */\nexport function BuiltinConverterFactory() { }\nfunction BuiltinConverterFactory_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BuiltinConverterFactory.prototype.createLiteralArrayConverter;\n    /** @type {?} */\n    BuiltinConverterFactory.prototype.createLiteralMapConverter;\n    /** @type {?} */\n    BuiltinConverterFactory.prototype.createPipeConverter;\n}\n/**\n * @param {?} converterFactory\n * @param {?} ast\n * @return {?}\n */\nexport function convertPropertyBindingBuiltins(converterFactory, ast) {\n    return convertBuiltins(converterFactory, ast);\n}\nvar ConvertPropertyBindingResult = /** @class */ (function () {\n    function ConvertPropertyBindingResult(stmts, currValExpr) {\n        this.stmts = stmts;\n        this.currValExpr = currValExpr;\n    }\n    return ConvertPropertyBindingResult;\n}());\nexport { ConvertPropertyBindingResult };\nfunction ConvertPropertyBindingResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ConvertPropertyBindingResult.prototype.stmts;\n    /** @type {?} */\n    ConvertPropertyBindingResult.prototype.currValExpr;\n}\n/** @enum {number} */\nvar BindingForm = {\n    // The general form of binding expression, supports all expressions.\n    General: 0,\n    // Try to generate a simple binding (no temporaries or statements)\n    // otherwise generate a general binding\n    TrySimple: 1,\n};\nexport { BindingForm };\nBindingForm[BindingForm.General] = \"General\";\nBindingForm[BindingForm.TrySimple] = \"TrySimple\";\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression\n * is used in property binding. The expression has to be preprocessed via\n * `convertPropertyBindingBuiltins`.\n * @param {?} localResolver\n * @param {?} implicitReceiver\n * @param {?} expressionWithoutBuiltins\n * @param {?} bindingId\n * @param {?} form\n * @param {?=} interpolationFunction\n * @return {?}\n */\nexport function convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId, form, interpolationFunction) {\n    if (!localResolver) {\n        localResolver = new DefaultLocalResolver();\n    }\n    var /** @type {?} */ currValExpr = createCurrValueExpr(bindingId);\n    var /** @type {?} */ stmts = [];\n    var /** @type {?} */ visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction);\n    var /** @type {?} */ outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);\n    if (visitor.temporaryCount) {\n        for (var /** @type {?} */ i = 0; i < visitor.temporaryCount; i++) {\n            stmts.push(temporaryDeclaration(bindingId, i));\n        }\n    }\n    else if (form == BindingForm.TrySimple) {\n        return new ConvertPropertyBindingResult([], outputExpr);\n    }\n    stmts.push(currValExpr.set(outputExpr).toDeclStmt(o.DYNAMIC_TYPE, [o.StmtModifier.Final]));\n    return new ConvertPropertyBindingResult(stmts, currValExpr);\n}\n/**\n * @param {?} converterFactory\n * @param {?} ast\n * @return {?}\n */\nfunction convertBuiltins(converterFactory, ast) {\n    var /** @type {?} */ visitor = new _BuiltinAstConverter(converterFactory);\n    return ast.visit(visitor);\n}\n/**\n * @param {?} bindingId\n * @param {?} temporaryNumber\n * @return {?}\n */\nfunction temporaryName(bindingId, temporaryNumber) {\n    return \"tmp_\" + bindingId + \"_\" + temporaryNumber;\n}\n/**\n * @param {?} bindingId\n * @param {?} temporaryNumber\n * @return {?}\n */\nexport function temporaryDeclaration(bindingId, temporaryNumber) {\n    return new o.DeclareVarStmt(temporaryName(bindingId, temporaryNumber), o.NULL_EXPR);\n}\n/**\n * @param {?} temporaryCount\n * @param {?} bindingId\n * @param {?} statements\n * @return {?}\n */\nfunction prependTemporaryDecls(temporaryCount, bindingId, statements) {\n    for (var /** @type {?} */ i = temporaryCount - 1; i >= 0; i--) {\n        statements.unshift(temporaryDeclaration(bindingId, i));\n    }\n}\n/** @enum {number} */\nvar _Mode = {\n    Statement: 0,\n    Expression: 1,\n};\n_Mode[_Mode.Statement] = \"Statement\";\n_Mode[_Mode.Expression] = \"Expression\";\n/**\n * @param {?} mode\n * @param {?} ast\n * @return {?}\n */\nfunction ensureStatementMode(mode, ast) {\n    if (mode !== _Mode.Statement) {\n        throw new Error(\"Expected a statement, but saw \" + ast);\n    }\n}\n/**\n * @param {?} mode\n * @param {?} ast\n * @return {?}\n */\nfunction ensureExpressionMode(mode, ast) {\n    if (mode !== _Mode.Expression) {\n        throw new Error(\"Expected an expression, but saw \" + ast);\n    }\n}\n/**\n * @param {?} mode\n * @param {?} expr\n * @return {?}\n */\nfunction convertToStatementIfNeeded(mode, expr) {\n    if (mode === _Mode.Statement) {\n        return expr.toStmt();\n    }\n    else {\n        return expr;\n    }\n}\nvar _BuiltinAstConverter = /** @class */ (function (_super) {\n    tslib_1.__extends(_BuiltinAstConverter, _super);\n    function _BuiltinAstConverter(_converterFactory) {\n        var _this = _super.call(this) || this;\n        _this._converterFactory = _converterFactory;\n        return _this;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    _BuiltinAstConverter.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ args = [ast.exp].concat(ast.args).map(function (ast) { return ast.visit(_this, context); });\n        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createPipeConverter(ast.name, args.length));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    _BuiltinAstConverter.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ args = ast.expressions.map(function (ast) { return ast.visit(_this, context); });\n        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    _BuiltinAstConverter.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ args = ast.values.map(function (ast) { return ast.visit(_this, context); });\n        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralMapConverter(ast.keys));\n    };\n    return _BuiltinAstConverter;\n}(cdAst.AstTransformer));\nfunction _BuiltinAstConverter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _BuiltinAstConverter.prototype._converterFactory;\n}\nvar _AstToIrVisitor = /** @class */ (function () {\n    function _AstToIrVisitor(_localResolver, _implicitReceiver, bindingId, interpolationFunction) {\n        this._localResolver = _localResolver;\n        this._implicitReceiver = _implicitReceiver;\n        this.bindingId = bindingId;\n        this.interpolationFunction = interpolationFunction;\n        this._nodeMap = new Map();\n        this._resultMap = new Map();\n        this._currentTemporary = 0;\n        this.temporaryCount = 0;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitBinary = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ op;\n        switch (ast.operation) {\n            case '+':\n                op = o.BinaryOperator.Plus;\n                break;\n            case '-':\n                op = o.BinaryOperator.Minus;\n                break;\n            case '*':\n                op = o.BinaryOperator.Multiply;\n                break;\n            case '/':\n                op = o.BinaryOperator.Divide;\n                break;\n            case '%':\n                op = o.BinaryOperator.Modulo;\n                break;\n            case '&&':\n                op = o.BinaryOperator.And;\n                break;\n            case '||':\n                op = o.BinaryOperator.Or;\n                break;\n            case '==':\n                op = o.BinaryOperator.Equals;\n                break;\n            case '!=':\n                op = o.BinaryOperator.NotEquals;\n                break;\n            case '===':\n                op = o.BinaryOperator.Identical;\n                break;\n            case '!==':\n                op = o.BinaryOperator.NotIdentical;\n                break;\n            case '<':\n                op = o.BinaryOperator.Lower;\n                break;\n            case '>':\n                op = o.BinaryOperator.Bigger;\n                break;\n            case '<=':\n                op = o.BinaryOperator.LowerEquals;\n                break;\n            case '>=':\n                op = o.BinaryOperator.BiggerEquals;\n                break;\n            default:\n                throw new Error(\"Unsupported operation \" + ast.operation);\n        }\n        return convertToStatementIfNeeded(mode, new o.BinaryOperatorExpr(op, this._visit(ast.left, _Mode.Expression), this._visit(ast.right, _Mode.Expression)));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitChain = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        ensureStatementMode(mode, ast);\n        return this.visitAll(ast.expressions, mode);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitConditional = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ value = this._visit(ast.condition, _Mode.Expression);\n        return convertToStatementIfNeeded(mode, value.conditional(this._visit(ast.trueExp, _Mode.Expression), this._visit(ast.falseExp, _Mode.Expression)));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        throw new Error(\"Illegal state: Pipes should have been converted into functions. Pipe: \" + ast.name);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitFunctionCall = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ convertedArgs = this.visitAll(ast.args, _Mode.Expression);\n        var /** @type {?} */ fnResult;\n        if (ast instanceof BuiltinFunctionCall) {\n            fnResult = ast.converter(convertedArgs);\n        }\n        else {\n            fnResult = this._visit(/** @type {?} */ ((ast.target)), _Mode.Expression).callFn(convertedArgs);\n        }\n        return convertToStatementIfNeeded(mode, fnResult);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitImplicitReceiver = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        ensureExpressionMode(mode, ast);\n        return this._implicitReceiver;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitInterpolation = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        ensureExpressionMode(mode, ast);\n        var /** @type {?} */ args = [o.literal(ast.expressions.length)];\n        for (var /** @type {?} */ i = 0; i < ast.strings.length - 1; i++) {\n            args.push(o.literal(ast.strings[i]));\n            args.push(this._visit(ast.expressions[i], _Mode.Expression));\n        }\n        args.push(o.literal(ast.strings[ast.strings.length - 1]));\n        if (this.interpolationFunction) {\n            return this.interpolationFunction(args);\n        }\n        return ast.expressions.length <= 9 ?\n            o.importExpr(Identifiers.inlineInterpolate).callFn(args) :\n            o.importExpr(Identifiers.interpolate).callFn([args[0], o.literalArr(args.slice(1))]);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitKeyedRead = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        else {\n            return convertToStatementIfNeeded(mode, this._visit(ast.obj, _Mode.Expression).key(this._visit(ast.key, _Mode.Expression)));\n        }\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitKeyedWrite = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ obj = this._visit(ast.obj, _Mode.Expression);\n        var /** @type {?} */ key = this._visit(ast.key, _Mode.Expression);\n        var /** @type {?} */ value = this._visit(ast.value, _Mode.Expression);\n        return convertToStatementIfNeeded(mode, obj.key(key).set(value));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        throw new Error(\"Illegal State: literal arrays should have been converted into functions\");\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        throw new Error(\"Illegal State: literal maps should have been converted into functions\");\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitLiteralPrimitive = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        // For literal values of null, undefined, true, or false allow type interference\n        // to infer the type.\n        var /** @type {?} */ type = ast.value === null || ast.value === undefined || ast.value === true || ast.value === true ?\n            o.INFERRED_TYPE :\n            undefined;\n        return convertToStatementIfNeeded(mode, o.literal(ast.value, type));\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype._getLocal = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this._localResolver.getLocal(name); };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitMethodCall = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        if (ast.receiver instanceof cdAst.ImplicitReceiver && ast.name == '$any') {\n            var /** @type {?} */ args = /** @type {?} */ (this.visitAll(ast.args, _Mode.Expression));\n            if (args.length != 1) {\n                throw new Error(\"Invalid call to $any, expected 1 argument but received \" + (args.length || 'none'));\n            }\n            return (/** @type {?} */ (args[0])).cast(o.DYNAMIC_TYPE);\n        }\n        var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        else {\n            var /** @type {?} */ args = this.visitAll(ast.args, _Mode.Expression);\n            var /** @type {?} */ result = null;\n            var /** @type {?} */ receiver = this._visit(ast.receiver, _Mode.Expression);\n            if (receiver === this._implicitReceiver) {\n                var /** @type {?} */ varExpr = this._getLocal(ast.name);\n                if (varExpr) {\n                    result = varExpr.callFn(args);\n                }\n            }\n            if (result == null) {\n                result = receiver.callMethod(ast.name, args);\n            }\n            return convertToStatementIfNeeded(mode, result);\n        }\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitPrefixNot = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        return convertToStatementIfNeeded(mode, o.not(this._visit(ast.expression, _Mode.Expression)));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitNonNullAssert = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        return convertToStatementIfNeeded(mode, o.assertNotNull(this._visit(ast.expression, _Mode.Expression)));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitPropertyRead = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        else {\n            var /** @type {?} */ result = null;\n            var /** @type {?} */ receiver = this._visit(ast.receiver, _Mode.Expression);\n            if (receiver === this._implicitReceiver) {\n                result = this._getLocal(ast.name);\n            }\n            if (result == null) {\n                result = receiver.prop(ast.name);\n            }\n            return convertToStatementIfNeeded(mode, result);\n        }\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitPropertyWrite = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ receiver = this._visit(ast.receiver, _Mode.Expression);\n        if (receiver === this._implicitReceiver) {\n            var /** @type {?} */ varExpr = this._getLocal(ast.name);\n            if (varExpr) {\n                throw new Error('Cannot assign to a reference or variable!');\n            }\n        }\n        return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this._visit(ast.value, _Mode.Expression)));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitSafePropertyRead = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitSafeMethodCall = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n    };\n    /**\n     * @param {?} asts\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitAll = /**\n     * @param {?} asts\n     * @param {?} mode\n     * @return {?}\n     */\n    function (asts, mode) {\n        var _this = this;\n        return asts.map(function (ast) { return _this._visit(ast, mode); });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitQuote = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        throw new Error(\"Quotes are not supported for evaluation!\\n        Statement: \" + ast.uninterpretedExpression + \" located at \" + ast.location);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype._visit = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ result = this._resultMap.get(ast);\n        if (result)\n            return result;\n        return (this._nodeMap.get(ast) || ast).visit(this, mode);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} leftMostSafe\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.convertSafeAccess = /**\n     * @param {?} ast\n     * @param {?} leftMostSafe\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, leftMostSafe, mode) {\n        // If the expression contains a safe access node on the left it needs to be converted to\n        // an expression that guards the access to the member by checking the receiver for blank. As\n        // execution proceeds from left to right, the left most part of the expression must be guarded\n        // first but, because member access is left associative, the right side of the expression is at\n        // the top of the AST. The desired result requires lifting a copy of the the left part of the\n        // expression up to test it for blank before generating the unguarded version.\n        // Consider, for example the following expression: a?.b.c?.d.e\n        // This results in the ast:\n        //         .\n        //        / \\\n        //       ?.   e\n        //      /  \\\n        //     .    d\n        //    / \\\n        //   ?.  c\n        //  /  \\\n        // a    b\n        // The following tree should be generated:\n        //\n        //        /---- ? ----\\\n        //       /      |      \\\n        //     a   /--- ? ---\\  null\n        //        /     |     \\\n        //       .      .     null\n        //      / \\    / \\\n        //     .  c   .   e\n        //    / \\    / \\\n        //   a   b  ,   d\n        //         / \\\n        //        .   c\n        //       / \\\n        //      a   b\n        //\n        // Notice that the first guard condition is the left hand of the left most safe access node\n        // which comes in as leftMostSafe to this routine.\n        var /** @type {?} */ guardedExpression = this._visit(leftMostSafe.receiver, _Mode.Expression);\n        var /** @type {?} */ temporary = /** @type {?} */ ((undefined));\n        if (this.needsTemporary(leftMostSafe.receiver)) {\n            // If the expression has method calls or pipes then we need to save the result into a\n            // temporary variable to avoid calling stateful or impure code more than once.\n            temporary = this.allocateTemporary();\n            // Preserve the result in the temporary variable\n            guardedExpression = temporary.set(guardedExpression);\n            // Ensure all further references to the guarded expression refer to the temporary instead.\n            this._resultMap.set(leftMostSafe.receiver, temporary);\n        }\n        var /** @type {?} */ condition = guardedExpression.isBlank();\n        // Convert the ast to an unguarded access to the receiver's member. The map will substitute\n        // leftMostNode with its unguarded version in the call to `this.visit()`.\n        if (leftMostSafe instanceof cdAst.SafeMethodCall) {\n            this._nodeMap.set(leftMostSafe, new cdAst.MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));\n        }\n        else {\n            this._nodeMap.set(leftMostSafe, new cdAst.PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));\n        }\n        // Recursively convert the node now without the guarded member access.\n        var /** @type {?} */ access = this._visit(ast, _Mode.Expression);\n        // Remove the mapping. This is not strictly required as the converter only traverses each node\n        // once but is safer if the conversion is changed to traverse the nodes more than once.\n        this._nodeMap.delete(leftMostSafe);\n        // If we allocated a temporary, release it.\n        if (temporary) {\n            this.releaseTemporary(temporary);\n        }\n        // Produce the conditional\n        return convertToStatementIfNeeded(mode, condition.conditional(o.literal(null), access));\n    };\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.leftMostSafeNode = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var _this = this;\n        var /** @type {?} */ visit = function (visitor, ast) {\n            return (_this._nodeMap.get(ast) || ast).visit(visitor);\n        };\n        return ast.visit({\n            visitBinary: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitChain: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitConditional: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitFunctionCall: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitImplicitReceiver: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitInterpolation: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitKeyedRead: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visit(this, ast.obj); },\n            visitKeyedWrite: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitLiteralArray: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitLiteralMap: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitLiteralPrimitive: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitMethodCall: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visit(this, ast.receiver); },\n            visitPipe: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitPrefixNot: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitNonNullAssert: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitPropertyRead: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visit(this, ast.receiver); },\n            visitPropertyWrite: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitQuote: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitSafeMethodCall: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visit(this, ast.receiver) || ast; },\n            visitSafePropertyRead: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) {\n                return visit(this, ast.receiver) || ast;\n            }\n        });\n    };\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.needsTemporary = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var _this = this;\n        var /** @type {?} */ visit = function (visitor, ast) {\n            return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);\n        };\n        var /** @type {?} */ visitSome = function (visitor, ast) {\n            return ast.some(function (ast) { return visit(visitor, ast); });\n        };\n        return ast.visit({\n            visitBinary: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visit(this, ast.left) || visit(this, ast.right); },\n            visitChain: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitConditional: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) {\n                return visit(this, ast.condition) || visit(this, ast.trueExp) ||\n                    visit(this, ast.falseExp);\n            },\n            visitFunctionCall: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return true; },\n            visitImplicitReceiver: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitInterpolation: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visitSome(this, ast.expressions); },\n            visitKeyedRead: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitKeyedWrite: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitLiteralArray: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return true; },\n            visitLiteralMap: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return true; },\n            visitLiteralPrimitive: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitMethodCall: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return true; },\n            visitPipe: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return true; },\n            visitPrefixNot: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visit(this, ast.expression); },\n            visitNonNullAssert: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visit(this, ast.expression); },\n            visitPropertyRead: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitPropertyWrite: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitQuote: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitSafeMethodCall: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return true; },\n            visitSafePropertyRead: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.allocateTemporary = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ tempNumber = this._currentTemporary++;\n        this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);\n        return new o.ReadVarExpr(temporaryName(this.bindingId, tempNumber));\n    };\n    /**\n     * @param {?} temporary\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.releaseTemporary = /**\n     * @param {?} temporary\n     * @return {?}\n     */\n    function (temporary) {\n        this._currentTemporary--;\n        if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {\n            throw new Error(\"Temporary \" + temporary.name + \" released out of order\");\n        }\n    };\n    return _AstToIrVisitor;\n}());\nfunction _AstToIrVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _AstToIrVisitor.prototype._nodeMap;\n    /** @type {?} */\n    _AstToIrVisitor.prototype._resultMap;\n    /** @type {?} */\n    _AstToIrVisitor.prototype._currentTemporary;\n    /** @type {?} */\n    _AstToIrVisitor.prototype.temporaryCount;\n    /** @type {?} */\n    _AstToIrVisitor.prototype._localResolver;\n    /** @type {?} */\n    _AstToIrVisitor.prototype._implicitReceiver;\n    /** @type {?} */\n    _AstToIrVisitor.prototype.bindingId;\n    /** @type {?} */\n    _AstToIrVisitor.prototype.interpolationFunction;\n}\n/**\n * @param {?} arg\n * @param {?} output\n * @return {?}\n */\nfunction flattenStatements(arg, output) {\n    if (Array.isArray(arg)) {\n        (/** @type {?} */ (arg)).forEach(function (entry) { return flattenStatements(entry, output); });\n    }\n    else {\n        output.push(arg);\n    }\n}\nvar DefaultLocalResolver = /** @class */ (function () {\n    function DefaultLocalResolver() {\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    DefaultLocalResolver.prototype.getLocal = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (name === EventHandlerVars.event.name) {\n            return EventHandlerVars.event;\n        }\n        return null;\n    };\n    return DefaultLocalResolver;\n}());\n/**\n * @param {?} bindingId\n * @return {?}\n */\nfunction createCurrValueExpr(bindingId) {\n    return o.variable(\"currVal_\" + bindingId); // fix syntax highlighting: `\n}\n/**\n * @param {?} bindingId\n * @return {?}\n */\nfunction createPreventDefaultVar(bindingId) {\n    return o.variable(\"pd_\" + bindingId);\n}\n/**\n * @param {?} stmt\n * @return {?}\n */\nfunction convertStmtIntoExpression(stmt) {\n    if (stmt instanceof o.ExpressionStatement) {\n        return stmt.expr;\n    }\n    else if (stmt instanceof o.ReturnStatement) {\n        return stmt.value;\n    }\n    return null;\n}\nvar BuiltinFunctionCall = /** @class */ (function (_super) {\n    tslib_1.__extends(BuiltinFunctionCall, _super);\n    function BuiltinFunctionCall(span, args, converter) {\n        var _this = _super.call(this, span, null, args) || this;\n        _this.args = args;\n        _this.converter = converter;\n        return _this;\n    }\n    return BuiltinFunctionCall;\n}(cdAst.FunctionCall));\nexport { BuiltinFunctionCall };\nfunction BuiltinFunctionCall_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BuiltinFunctionCall.prototype.args;\n    /** @type {?} */\n    BuiltinFunctionCall.prototype.converter;\n}\n//# sourceMappingURL=expression_converter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticSymbol } from '../aot/static_symbol';\nimport { BindingForm, EventHandlerVars, convertActionBinding, convertPropertyBinding, convertPropertyBindingBuiltins } from '../compiler_util/expression_converter';\nimport * as o from '../output/output_ast';\nimport { templateVisitAll } from '../template_parser/template_ast';\n/**\n * Generates code that is used to type check templates.\n */\nvar /**\n * Generates code that is used to type check templates.\n */\nTypeCheckCompiler = /** @class */ (function () {\n    function TypeCheckCompiler(options, reflector) {\n        this.options = options;\n        this.reflector = reflector;\n    }\n    /**\n     * Important notes:\n     * - This must not produce new `import` statements, but only refer to types outside\n     *   of the file via the variables provided via externalReferenceVars.\n     *   This allows Typescript to reuse the old program's structure as no imports have changed.\n     * - This must not produce any exports, as this would pollute the .d.ts file\n     *   and also violate the point above.\n     */\n    /**\n     * Important notes:\n     * - This must not produce new `import` statements, but only refer to types outside\n     *   of the file via the variables provided via externalReferenceVars.\n     *   This allows Typescript to reuse the old program's structure as no imports have changed.\n     * - This must not produce any exports, as this would pollute the .d.ts file\n     *   and also violate the point above.\n     * @param {?} componentId\n     * @param {?} component\n     * @param {?} template\n     * @param {?} usedPipes\n     * @param {?} externalReferenceVars\n     * @param {?} ctx\n     * @return {?}\n     */\n    TypeCheckCompiler.prototype.compileComponent = /**\n     * Important notes:\n     * - This must not produce new `import` statements, but only refer to types outside\n     *   of the file via the variables provided via externalReferenceVars.\n     *   This allows Typescript to reuse the old program's structure as no imports have changed.\n     * - This must not produce any exports, as this would pollute the .d.ts file\n     *   and also violate the point above.\n     * @param {?} componentId\n     * @param {?} component\n     * @param {?} template\n     * @param {?} usedPipes\n     * @param {?} externalReferenceVars\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (componentId, component, template, usedPipes, externalReferenceVars, ctx) {\n        var _this = this;\n        var /** @type {?} */ pipes = new Map();\n        usedPipes.forEach(function (p) { return pipes.set(p.name, p.type.reference); });\n        var /** @type {?} */ embeddedViewCount = 0;\n        var /** @type {?} */ viewBuilderFactory = function (parent, guards) {\n            var /** @type {?} */ embeddedViewIndex = embeddedViewCount++;\n            return new ViewBuilder(_this.options, _this.reflector, externalReferenceVars, parent, component.type.reference, component.isHost, embeddedViewIndex, pipes, guards, ctx, viewBuilderFactory);\n        };\n        var /** @type {?} */ visitor = viewBuilderFactory(null, []);\n        visitor.visitAll([], template);\n        return visitor.build(componentId);\n    };\n    return TypeCheckCompiler;\n}());\n/**\n * Generates code that is used to type check templates.\n */\nexport { TypeCheckCompiler };\nfunction TypeCheckCompiler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TypeCheckCompiler.prototype.options;\n    /** @type {?} */\n    TypeCheckCompiler.prototype.reflector;\n}\n/**\n * @record\n */\nfunction GuardExpression() { }\nfunction GuardExpression_tsickle_Closure_declarations() {\n    /** @type {?} */\n    GuardExpression.prototype.guard;\n    /** @type {?} */\n    GuardExpression.prototype.useIf;\n    /** @type {?} */\n    GuardExpression.prototype.expression;\n}\n/**\n * @record\n */\nfunction ViewBuilderFactory() { }\nfunction ViewBuilderFactory_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (parent: ViewBuilder, guards: GuardExpression[]): ViewBuilder;\n    */\n}\n/**\n * @record\n */\nfunction Expression() { }\nfunction Expression_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Expression.prototype.context;\n    /** @type {?} */\n    Expression.prototype.sourceSpan;\n    /** @type {?} */\n    Expression.prototype.value;\n}\nvar /** @type {?} */ DYNAMIC_VAR_NAME = '_any';\nvar TypeCheckLocalResolver = /** @class */ (function () {\n    function TypeCheckLocalResolver() {\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    TypeCheckLocalResolver.prototype.getLocal = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (name === EventHandlerVars.event.name) {\n            // References to the event should not be type-checked.\n            // TODO(chuckj): determine a better type for the event.\n            return o.variable(DYNAMIC_VAR_NAME);\n        }\n        return null;\n    };\n    return TypeCheckLocalResolver;\n}());\nvar /** @type {?} */ defaultResolver = new TypeCheckLocalResolver();\nvar ViewBuilder = /** @class */ (function () {\n    function ViewBuilder(options, reflector, externalReferenceVars, parent, component, isHostComponent, embeddedViewIndex, pipes, guards, ctx, viewBuilderFactory) {\n        this.options = options;\n        this.reflector = reflector;\n        this.externalReferenceVars = externalReferenceVars;\n        this.parent = parent;\n        this.component = component;\n        this.isHostComponent = isHostComponent;\n        this.embeddedViewIndex = embeddedViewIndex;\n        this.pipes = pipes;\n        this.guards = guards;\n        this.ctx = ctx;\n        this.viewBuilderFactory = viewBuilderFactory;\n        this.refOutputVars = new Map();\n        this.variables = [];\n        this.children = [];\n        this.updates = [];\n        this.actions = [];\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ViewBuilder.prototype.getOutputVar = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ varName;\n        if (type === this.component && this.isHostComponent) {\n            varName = DYNAMIC_VAR_NAME;\n        }\n        else if (type instanceof StaticSymbol) {\n            varName = this.externalReferenceVars.get(type);\n        }\n        else {\n            varName = DYNAMIC_VAR_NAME;\n        }\n        if (!varName) {\n            throw new Error(\"Illegal State: referring to a type without a variable \" + JSON.stringify(type));\n        }\n        return varName;\n    };\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    ViewBuilder.prototype.getTypeGuardExpressions = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var /** @type {?} */ result = this.guards.slice();\n        for (var _i = 0, _a = ast.directives; _i < _a.length; _i++) {\n            var directive = _a[_i];\n            for (var _b = 0, _c = directive.inputs; _b < _c.length; _b++) {\n                var input = _c[_b];\n                var /** @type {?} */ guard = directive.directive.guards[input.directiveName];\n                if (guard) {\n                    var /** @type {?} */ useIf = guard === 'UseIf';\n                    result.push({\n                        guard: guard,\n                        useIf: useIf,\n                        expression: /** @type {?} */ ({ context: this.component, value: input.value })\n                    });\n                }\n            }\n        }\n        return result;\n    };\n    /**\n     * @param {?} variables\n     * @param {?} astNodes\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitAll = /**\n     * @param {?} variables\n     * @param {?} astNodes\n     * @return {?}\n     */\n    function (variables, astNodes) {\n        this.variables = variables;\n        templateVisitAll(this, astNodes);\n    };\n    /**\n     * @param {?} componentId\n     * @param {?=} targetStatements\n     * @return {?}\n     */\n    ViewBuilder.prototype.build = /**\n     * @param {?} componentId\n     * @param {?=} targetStatements\n     * @return {?}\n     */\n    function (componentId, targetStatements) {\n        var _this = this;\n        if (targetStatements === void 0) { targetStatements = []; }\n        this.children.forEach(function (child) { return child.build(componentId, targetStatements); });\n        var /** @type {?} */ viewStmts = [o.variable(DYNAMIC_VAR_NAME).set(o.NULL_EXPR).toDeclStmt(o.DYNAMIC_TYPE)];\n        var /** @type {?} */ bindingCount = 0;\n        this.updates.forEach(function (expression) {\n            var _a = _this.preprocessUpdateExpression(expression), sourceSpan = _a.sourceSpan, context = _a.context, value = _a.value;\n            var /** @type {?} */ bindingId = \"\" + bindingCount++;\n            var /** @type {?} */ nameResolver = context === _this.component ? _this : defaultResolver;\n            var _b = convertPropertyBinding(nameResolver, o.variable(_this.getOutputVar(context)), value, bindingId, BindingForm.General), stmts = _b.stmts, currValExpr = _b.currValExpr;\n            stmts.push(new o.ExpressionStatement(currValExpr));\n            viewStmts.push.apply(viewStmts, stmts.map(function (stmt) { return o.applySourceSpanToStatementIfNeeded(stmt, sourceSpan); }));\n        });\n        this.actions.forEach(function (_a) {\n            var sourceSpan = _a.sourceSpan, context = _a.context, value = _a.value;\n            var /** @type {?} */ bindingId = \"\" + bindingCount++;\n            var /** @type {?} */ nameResolver = context === _this.component ? _this : defaultResolver;\n            var stmts = convertActionBinding(nameResolver, o.variable(_this.getOutputVar(context)), value, bindingId).stmts;\n            viewStmts.push.apply(viewStmts, stmts.map(function (stmt) { return o.applySourceSpanToStatementIfNeeded(stmt, sourceSpan); }));\n        });\n        if (this.guards.length) {\n            var /** @type {?} */ guardExpression = undefined;\n            for (var _i = 0, _a = this.guards; _i < _a.length; _i++) {\n                var guard = _a[_i];\n                var _b = this.preprocessUpdateExpression(guard.expression), context = _b.context, value = _b.value;\n                var /** @type {?} */ bindingId = \"\" + bindingCount++;\n                var /** @type {?} */ nameResolver = context === this.component ? this : defaultResolver;\n                // We only support support simple expressions and ignore others as they\n                // are unlikely to affect type narrowing.\n                var _c = convertPropertyBinding(nameResolver, o.variable(this.getOutputVar(context)), value, bindingId, BindingForm.TrySimple), stmts = _c.stmts, currValExpr = _c.currValExpr;\n                if (stmts.length == 0) {\n                    var /** @type {?} */ guardClause = guard.useIf ? currValExpr : this.ctx.importExpr(guard.guard).callFn([currValExpr]);\n                    guardExpression = guardExpression ? guardExpression.and(guardClause) : guardClause;\n                }\n            }\n            if (guardExpression) {\n                viewStmts = [new o.IfStmt(guardExpression, viewStmts)];\n            }\n        }\n        var /** @type {?} */ viewName = \"_View_\" + componentId + \"_\" + this.embeddedViewIndex;\n        var /** @type {?} */ viewFactory = new o.DeclareFunctionStmt(viewName, [], viewStmts);\n        targetStatements.push(viewFactory);\n        return targetStatements;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitBoundText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ astWithSource = /** @type {?} */ (ast.value);\n        var /** @type {?} */ inter = /** @type {?} */ (astWithSource.ast);\n        inter.expressions.forEach(function (expr) {\n            return _this.updates.push({ context: _this.component, value: expr, sourceSpan: ast.sourceSpan });\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitEmbeddedTemplate = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        this.visitElementOrTemplate(ast);\n        // Note: The old view compiler used to use an `any` type\n        // for the context in any embedded view.\n        // We keep this behaivor behind a flag for now.\n        if (this.options.fullTemplateTypeCheck) {\n            // Find any applicable type guards. For example, NgIf has a type guard on ngIf\n            // (see NgIf.ngIfTypeGuard) that can be used to indicate that a template is only\n            // stamped out if ngIf is truthy so any bindings in the template can assume that,\n            // if a nullable type is used for ngIf, that expression is not null or undefined.\n            var /** @type {?} */ guards = this.getTypeGuardExpressions(ast);\n            var /** @type {?} */ childVisitor = this.viewBuilderFactory(this, guards);\n            this.children.push(childVisitor);\n            childVisitor.visitAll(ast.variables, ast.children);\n        }\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitElement = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        this.visitElementOrTemplate(ast);\n        var /** @type {?} */ inputDefs = [];\n        var /** @type {?} */ updateRendererExpressions = [];\n        var /** @type {?} */ outputDefs = [];\n        ast.inputs.forEach(function (inputAst) {\n            _this.updates.push({ context: _this.component, value: inputAst.value, sourceSpan: inputAst.sourceSpan });\n        });\n        templateVisitAll(this, ast.children);\n    };\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitElementOrTemplate = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var _this = this;\n        ast.directives.forEach(function (dirAst) { _this.visitDirective(dirAst); });\n        ast.references.forEach(function (ref) {\n            var /** @type {?} */ outputVarType = /** @type {?} */ ((null));\n            // Note: The old view compiler used to use an `any` type\n            // for directives exposed via `exportAs`.\n            // We keep this behaivor behind a flag for now.\n            if (ref.value && ref.value.identifier && _this.options.fullTemplateTypeCheck) {\n                outputVarType = ref.value.identifier.reference;\n            }\n            else {\n                outputVarType = o.BuiltinTypeName.Dynamic;\n            }\n            _this.refOutputVars.set(ref.name, outputVarType);\n        });\n        ast.outputs.forEach(function (outputAst) {\n            _this.actions.push({ context: _this.component, value: outputAst.handler, sourceSpan: outputAst.sourceSpan });\n        });\n    };\n    /**\n     * @param {?} dirAst\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitDirective = /**\n     * @param {?} dirAst\n     * @return {?}\n     */\n    function (dirAst) {\n        var _this = this;\n        var /** @type {?} */ dirType = dirAst.directive.type.reference;\n        dirAst.inputs.forEach(function (input) {\n            return _this.updates.push({ context: _this.component, value: input.value, sourceSpan: input.sourceSpan });\n        });\n        // Note: The old view compiler used to use an `any` type\n        // for expressions in host properties / events.\n        // We keep this behaivor behind a flag for now.\n        if (this.options.fullTemplateTypeCheck) {\n            dirAst.hostProperties.forEach(function (inputAst) {\n                return _this.updates.push({ context: dirType, value: inputAst.value, sourceSpan: inputAst.sourceSpan });\n            });\n            dirAst.hostEvents.forEach(function (hostEventAst) {\n                return _this.actions.push({\n                    context: dirType,\n                    value: hostEventAst.handler,\n                    sourceSpan: hostEventAst.sourceSpan\n                });\n            });\n        }\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ViewBuilder.prototype.getLocal = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (name == EventHandlerVars.event.name) {\n            return o.variable(this.getOutputVar(o.BuiltinTypeName.Dynamic));\n        }\n        for (var /** @type {?} */ currBuilder = this; currBuilder; currBuilder = currBuilder.parent) {\n            var /** @type {?} */ outputVarType = void 0;\n            // check references\n            outputVarType = currBuilder.refOutputVars.get(name);\n            if (outputVarType == null) {\n                // check variables\n                var /** @type {?} */ varAst = currBuilder.variables.find(function (varAst) { return varAst.name === name; });\n                if (varAst) {\n                    outputVarType = o.BuiltinTypeName.Dynamic;\n                }\n            }\n            if (outputVarType != null) {\n                return o.variable(this.getOutputVar(outputVarType));\n            }\n        }\n        return null;\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ViewBuilder.prototype.pipeOutputVar = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ pipe = this.pipes.get(name);\n        if (!pipe) {\n            throw new Error(\"Illegal State: Could not find pipe \" + name + \" in template of \" + this.component);\n        }\n        return this.getOutputVar(pipe);\n    };\n    /**\n     * @param {?} expression\n     * @return {?}\n     */\n    ViewBuilder.prototype.preprocessUpdateExpression = /**\n     * @param {?} expression\n     * @return {?}\n     */\n    function (expression) {\n        var _this = this;\n        return {\n            sourceSpan: expression.sourceSpan,\n            context: expression.context,\n            value: convertPropertyBindingBuiltins({\n                createLiteralArrayConverter: function (argCount) {\n                    return function (args) {\n                        var /** @type {?} */ arr = o.literalArr(args);\n                        // Note: The old view compiler used to use an `any` type\n                        // for arrays.\n                        return _this.options.fullTemplateTypeCheck ? arr : arr.cast(o.DYNAMIC_TYPE);\n                    };\n                },\n                createLiteralMapConverter: function (keys) {\n                    return function (values) {\n                        var /** @type {?} */ entries = keys.map(function (k, i) {\n                            return ({\n                                key: k.key,\n                                value: values[i],\n                                quoted: k.quoted,\n                            });\n                        });\n                        var /** @type {?} */ map = o.literalMap(entries);\n                        // Note: The old view compiler used to use an `any` type\n                        // for maps.\n                        return _this.options.fullTemplateTypeCheck ? map : map.cast(o.DYNAMIC_TYPE);\n                    };\n                },\n                createPipeConverter: function (name, argCount) {\n                    return function (args) {\n                        // Note: The old view compiler used to use an `any` type\n                        // for pipes.\n                        var /** @type {?} */ pipeExpr = _this.options.fullTemplateTypeCheck ?\n                            o.variable(_this.pipeOutputVar(name)) :\n                            o.variable(_this.getOutputVar(o.BuiltinTypeName.Dynamic));\n                        return pipeExpr.callMethod('transform', args);\n                    };\n                },\n            }, expression.value)\n        };\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitNgContent = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitDirectiveProperty = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitReference = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitVariable = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitEvent = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitElementProperty = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitAttr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    return ViewBuilder;\n}());\nfunction ViewBuilder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewBuilder.prototype.refOutputVars;\n    /** @type {?} */\n    ViewBuilder.prototype.variables;\n    /** @type {?} */\n    ViewBuilder.prototype.children;\n    /** @type {?} */\n    ViewBuilder.prototype.updates;\n    /** @type {?} */\n    ViewBuilder.prototype.actions;\n    /** @type {?} */\n    ViewBuilder.prototype.options;\n    /** @type {?} */\n    ViewBuilder.prototype.reflector;\n    /** @type {?} */\n    ViewBuilder.prototype.externalReferenceVars;\n    /** @type {?} */\n    ViewBuilder.prototype.parent;\n    /** @type {?} */\n    ViewBuilder.prototype.component;\n    /** @type {?} */\n    ViewBuilder.prototype.isHostComponent;\n    /** @type {?} */\n    ViewBuilder.prototype.embeddedViewIndex;\n    /** @type {?} */\n    ViewBuilder.prototype.pipes;\n    /** @type {?} */\n    ViewBuilder.prototype.guards;\n    /** @type {?} */\n    ViewBuilder.prototype.ctx;\n    /** @type {?} */\n    ViewBuilder.prototype.viewBuilderFactory;\n}\n//# sourceMappingURL=type_check_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { rendererTypeName, tokenReference, viewClassName } from '../compile_metadata';\nimport { BindingForm, EventHandlerVars, convertActionBinding, convertPropertyBinding, convertPropertyBindingBuiltins } from '../compiler_util/expression_converter';\nimport { ChangeDetectionStrategy } from '../core';\nimport { Identifiers } from '../identifiers';\nimport { LifecycleHooks } from '../lifecycle_reflector';\nimport { isNgContainer } from '../ml_parser/tags';\nimport * as o from '../output/output_ast';\nimport { convertValueToOutputAst } from '../output/value_util';\nimport { ElementAst, EmbeddedTemplateAst, NgContentAst, PropertyBindingType, templateVisitAll } from '../template_parser/template_ast';\nimport { componentFactoryResolverProviderDef, depDef, lifecycleHookToNodeFlag, providerDef } from './provider_compiler';\nvar /** @type {?} */ CLASS_ATTR = 'class';\nvar /** @type {?} */ STYLE_ATTR = 'style';\nvar /** @type {?} */ IMPLICIT_TEMPLATE_VAR = '\\$implicit';\nvar ViewCompileResult = /** @class */ (function () {\n    function ViewCompileResult(viewClassVar, rendererTypeVar) {\n        this.viewClassVar = viewClassVar;\n        this.rendererTypeVar = rendererTypeVar;\n    }\n    return ViewCompileResult;\n}());\nexport { ViewCompileResult };\nfunction ViewCompileResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewCompileResult.prototype.viewClassVar;\n    /** @type {?} */\n    ViewCompileResult.prototype.rendererTypeVar;\n}\nvar ViewCompiler = /** @class */ (function () {\n    function ViewCompiler(_reflector) {\n        this._reflector = _reflector;\n    }\n    /**\n     * @param {?} outputCtx\n     * @param {?} component\n     * @param {?} template\n     * @param {?} styles\n     * @param {?} usedPipes\n     * @return {?}\n     */\n    ViewCompiler.prototype.compileComponent = /**\n     * @param {?} outputCtx\n     * @param {?} component\n     * @param {?} template\n     * @param {?} styles\n     * @param {?} usedPipes\n     * @return {?}\n     */\n    function (outputCtx, component, template, styles, usedPipes) {\n        var _this = this;\n        var /** @type {?} */ embeddedViewCount = 0;\n        var /** @type {?} */ staticQueryIds = findStaticQueryIds(template);\n        var /** @type {?} */ renderComponentVarName = /** @type {?} */ ((undefined));\n        if (!component.isHost) {\n            var /** @type {?} */ template_1 = /** @type {?} */ ((component.template));\n            var /** @type {?} */ customRenderData = [];\n            if (template_1.animations && template_1.animations.length) {\n                customRenderData.push(new o.LiteralMapEntry('animation', convertValueToOutputAst(outputCtx, template_1.animations), true));\n            }\n            var /** @type {?} */ renderComponentVar = o.variable(rendererTypeName(component.type.reference));\n            renderComponentVarName = /** @type {?} */ ((renderComponentVar.name));\n            outputCtx.statements.push(renderComponentVar\n                .set(o.importExpr(Identifiers.createRendererType2).callFn([new o.LiteralMapExpr([\n                    new o.LiteralMapEntry('encapsulation', o.literal(template_1.encapsulation), false),\n                    new o.LiteralMapEntry('styles', styles, false),\n                    new o.LiteralMapEntry('data', new o.LiteralMapExpr(customRenderData), false)\n                ])]))\n                .toDeclStmt(o.importType(Identifiers.RendererType2), [o.StmtModifier.Final, o.StmtModifier.Exported]));\n        }\n        var /** @type {?} */ viewBuilderFactory = function (parent) {\n            var /** @type {?} */ embeddedViewIndex = embeddedViewCount++;\n            return new ViewBuilder(_this._reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory);\n        };\n        var /** @type {?} */ visitor = viewBuilderFactory(null);\n        visitor.visitAll([], template);\n        (_a = outputCtx.statements).push.apply(_a, visitor.build());\n        return new ViewCompileResult(visitor.viewName, renderComponentVarName);\n        var _a;\n    };\n    return ViewCompiler;\n}());\nexport { ViewCompiler };\nfunction ViewCompiler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewCompiler.prototype._reflector;\n}\n/**\n * @record\n */\nfunction ViewBuilderFactory() { }\nfunction ViewBuilderFactory_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (parent: ViewBuilder): ViewBuilder;\n    */\n}\n/**\n * @record\n */\nfunction UpdateExpression() { }\nfunction UpdateExpression_tsickle_Closure_declarations() {\n    /** @type {?} */\n    UpdateExpression.prototype.context;\n    /** @type {?} */\n    UpdateExpression.prototype.nodeIndex;\n    /** @type {?} */\n    UpdateExpression.prototype.bindingIndex;\n    /** @type {?} */\n    UpdateExpression.prototype.sourceSpan;\n    /** @type {?} */\n    UpdateExpression.prototype.value;\n}\nvar /** @type {?} */ LOG_VAR = o.variable('_l');\nvar /** @type {?} */ VIEW_VAR = o.variable('_v');\nvar /** @type {?} */ CHECK_VAR = o.variable('_ck');\nvar /** @type {?} */ COMP_VAR = o.variable('_co');\nvar /** @type {?} */ EVENT_NAME_VAR = o.variable('en');\nvar /** @type {?} */ ALLOW_DEFAULT_VAR = o.variable(\"ad\");\nvar ViewBuilder = /** @class */ (function () {\n    function ViewBuilder(reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory) {\n        this.reflector = reflector;\n        this.outputCtx = outputCtx;\n        this.parent = parent;\n        this.component = component;\n        this.embeddedViewIndex = embeddedViewIndex;\n        this.usedPipes = usedPipes;\n        this.staticQueryIds = staticQueryIds;\n        this.viewBuilderFactory = viewBuilderFactory;\n        this.nodes = [];\n        this.purePipeNodeIndices = Object.create(null);\n        this.refNodeIndices = Object.create(null);\n        this.variables = [];\n        this.children = [];\n        // TODO(tbosch): The old view compiler used to use an `any` type\n        // for the context in any embedded view. We keep this behaivor for now\n        // to be able to introduce the new view compiler without too many errors.\n        this.compType = this.embeddedViewIndex > 0 ?\n            o.DYNAMIC_TYPE : /** @type {?} */\n            ((o.expressionType(outputCtx.importExpr(this.component.type.reference))));\n        this.viewName = viewClassName(this.component.type.reference, this.embeddedViewIndex);\n    }\n    /**\n     * @param {?} variables\n     * @param {?} astNodes\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitAll = /**\n     * @param {?} variables\n     * @param {?} astNodes\n     * @return {?}\n     */\n    function (variables, astNodes) {\n        var _this = this;\n        this.variables = variables;\n        // create the pipes for the pure pipes immediately, so that we know their indices.\n        if (!this.parent) {\n            this.usedPipes.forEach(function (pipe) {\n                if (pipe.pure) {\n                    _this.purePipeNodeIndices[pipe.name] = _this._createPipe(null, pipe);\n                }\n            });\n        }\n        if (!this.parent) {\n            var /** @type {?} */ queryIds_1 = staticViewQueryIds(this.staticQueryIds);\n            this.component.viewQueries.forEach(function (query, queryIndex) {\n                // Note: queries start with id 1 so we can use the number in a Bloom filter!\n                var /** @type {?} */ queryId = queryIndex + 1;\n                var /** @type {?} */ bindingType = query.first ? 0 /* First */ : 1 /* All */;\n                var /** @type {?} */ flags = 134217728 /* TypeViewQuery */ | calcStaticDynamicQueryFlags(queryIds_1, queryId, query.first);\n                _this.nodes.push(function () {\n                    return ({\n                        sourceSpan: null,\n                        nodeFlags: flags,\n                        nodeDef: o.importExpr(Identifiers.queryDef).callFn([\n                            o.literal(flags), o.literal(queryId),\n                            new o.LiteralMapExpr([new o.LiteralMapEntry(query.propertyName, o.literal(bindingType), false)])\n                        ])\n                    });\n                });\n            });\n        }\n        templateVisitAll(this, astNodes);\n        if (this.parent && (astNodes.length === 0 || needsAdditionalRootNode(astNodes))) {\n            // if the view is an embedded view, then we need to add an additional root node in some cases\n            this.nodes.push(function () {\n                return ({\n                    sourceSpan: null,\n                    nodeFlags: 1 /* TypeElement */,\n                    nodeDef: o.importExpr(Identifiers.anchorDef).callFn([\n                        o.literal(0 /* None */), o.NULL_EXPR, o.NULL_EXPR, o.literal(0)\n                    ])\n                });\n            });\n        }\n    };\n    /**\n     * @param {?=} targetStatements\n     * @return {?}\n     */\n    ViewBuilder.prototype.build = /**\n     * @param {?=} targetStatements\n     * @return {?}\n     */\n    function (targetStatements) {\n        if (targetStatements === void 0) { targetStatements = []; }\n        this.children.forEach(function (child) { return child.build(targetStatements); });\n        var _a = this._createNodeExpressions(), updateRendererStmts = _a.updateRendererStmts, updateDirectivesStmts = _a.updateDirectivesStmts, nodeDefExprs = _a.nodeDefExprs;\n        var /** @type {?} */ updateRendererFn = this._createUpdateFn(updateRendererStmts);\n        var /** @type {?} */ updateDirectivesFn = this._createUpdateFn(updateDirectivesStmts);\n        var /** @type {?} */ viewFlags = 0 /* None */;\n        if (!this.parent && this.component.changeDetection === ChangeDetectionStrategy.OnPush) {\n            viewFlags |= 2 /* OnPush */;\n        }\n        var /** @type {?} */ viewFactory = new o.DeclareFunctionStmt(this.viewName, [new o.FnParam(/** @type {?} */ ((LOG_VAR.name)))], [new o.ReturnStatement(o.importExpr(Identifiers.viewDef).callFn([\n                o.literal(viewFlags),\n                o.literalArr(nodeDefExprs),\n                updateDirectivesFn,\n                updateRendererFn,\n            ]))], o.importType(Identifiers.ViewDefinition), this.embeddedViewIndex === 0 ? [o.StmtModifier.Exported] : []);\n        targetStatements.push(viewFactory);\n        return targetStatements;\n    };\n    /**\n     * @param {?} updateStmts\n     * @return {?}\n     */\n    ViewBuilder.prototype._createUpdateFn = /**\n     * @param {?} updateStmts\n     * @return {?}\n     */\n    function (updateStmts) {\n        var /** @type {?} */ updateFn;\n        if (updateStmts.length > 0) {\n            var /** @type {?} */ preStmts = [];\n            if (!this.component.isHost && o.findReadVarNames(updateStmts).has(/** @type {?} */ ((COMP_VAR.name)))) {\n                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));\n            }\n            updateFn = o.fn([\n                new o.FnParam(/** @type {?} */ ((CHECK_VAR.name)), o.INFERRED_TYPE),\n                new o.FnParam(/** @type {?} */ ((VIEW_VAR.name)), o.INFERRED_TYPE)\n            ], preStmts.concat(updateStmts), o.INFERRED_TYPE);\n        }\n        else {\n            updateFn = o.NULL_EXPR;\n        }\n        return updateFn;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitNgContent = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        // ngContentDef(ngContentIndex: number, index: number): NodeDef;\n        this.nodes.push(function () {\n            return ({\n                sourceSpan: ast.sourceSpan,\n                nodeFlags: 8 /* TypeNgContent */,\n                nodeDef: o.importExpr(Identifiers.ngContentDef).callFn([\n                    o.literal(ast.ngContentIndex), o.literal(ast.index)\n                ])\n            });\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        // Static text nodes have no check function\n        var /** @type {?} */ checkIndex = -1;\n        this.nodes.push(function () {\n            return ({\n                sourceSpan: ast.sourceSpan,\n                nodeFlags: 2 /* TypeText */,\n                nodeDef: o.importExpr(Identifiers.textDef).callFn([\n                    o.literal(checkIndex),\n                    o.literal(ast.ngContentIndex),\n                    o.literalArr([o.literal(ast.value)]),\n                ])\n            });\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitBoundText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ nodeIndex = this.nodes.length;\n        // reserve the space in the nodeDefs array\n        this.nodes.push(/** @type {?} */ ((null)));\n        var /** @type {?} */ astWithSource = /** @type {?} */ (ast.value);\n        var /** @type {?} */ inter = /** @type {?} */ (astWithSource.ast);\n        var /** @type {?} */ updateRendererExpressions = inter.expressions.map(function (expr, bindingIndex) {\n            return _this._preprocessUpdateExpression({ nodeIndex: nodeIndex, bindingIndex: bindingIndex, sourceSpan: ast.sourceSpan, context: COMP_VAR, value: expr });\n        });\n        // Check index is the same as the node index during compilation\n        // They might only differ at runtime\n        var /** @type {?} */ checkIndex = nodeIndex;\n        this.nodes[nodeIndex] = function () {\n            return ({\n                sourceSpan: ast.sourceSpan,\n                nodeFlags: 2 /* TypeText */,\n                nodeDef: o.importExpr(Identifiers.textDef).callFn([\n                    o.literal(checkIndex),\n                    o.literal(ast.ngContentIndex),\n                    o.literalArr(inter.strings.map(function (s) { return o.literal(s); })),\n                ]),\n                updateRenderer: updateRendererExpressions\n            });\n        };\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitEmbeddedTemplate = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ nodeIndex = this.nodes.length;\n        // reserve the space in the nodeDefs array\n        this.nodes.push(/** @type {?} */ ((null)));\n        var _a = this._visitElementOrTemplate(nodeIndex, ast), flags = _a.flags, queryMatchesExpr = _a.queryMatchesExpr, hostEvents = _a.hostEvents;\n        var /** @type {?} */ childVisitor = this.viewBuilderFactory(this);\n        this.children.push(childVisitor);\n        childVisitor.visitAll(ast.variables, ast.children);\n        var /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;\n        // anchorDef(\n        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,\n        //   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:\n        //   ViewDefinitionFactory): NodeDef;\n        this.nodes[nodeIndex] = function () {\n            return ({\n                sourceSpan: ast.sourceSpan,\n                nodeFlags: 1 /* TypeElement */ | flags,\n                nodeDef: o.importExpr(Identifiers.anchorDef).callFn([\n                    o.literal(flags),\n                    queryMatchesExpr,\n                    o.literal(ast.ngContentIndex),\n                    o.literal(childCount),\n                    _this._createElementHandleEventFn(nodeIndex, hostEvents),\n                    o.variable(childVisitor.viewName),\n                ])\n            });\n        };\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitElement = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ nodeIndex = this.nodes.length;\n        // reserve the space in the nodeDefs array so we can add children\n        this.nodes.push(/** @type {?} */ ((null)));\n        // Using a null element name creates an anchor.\n        var /** @type {?} */ elName = isNgContainer(ast.name) ? null : ast.name;\n        var _a = this._visitElementOrTemplate(nodeIndex, ast), flags = _a.flags, usedEvents = _a.usedEvents, queryMatchesExpr = _a.queryMatchesExpr, dirHostBindings = _a.hostBindings, hostEvents = _a.hostEvents;\n        var /** @type {?} */ inputDefs = [];\n        var /** @type {?} */ updateRendererExpressions = [];\n        var /** @type {?} */ outputDefs = [];\n        if (elName) {\n            var /** @type {?} */ hostBindings = ast.inputs\n                .map(function (inputAst) {\n                return ({\n                    context: /** @type {?} */ (COMP_VAR),\n                    inputAst: inputAst,\n                    dirAst: /** @type {?} */ (null),\n                });\n            })\n                .concat(dirHostBindings);\n            if (hostBindings.length) {\n                updateRendererExpressions =\n                    hostBindings.map(function (hostBinding, bindingIndex) {\n                        return _this._preprocessUpdateExpression({\n                            context: hostBinding.context,\n                            nodeIndex: nodeIndex,\n                            bindingIndex: bindingIndex,\n                            sourceSpan: hostBinding.inputAst.sourceSpan,\n                            value: hostBinding.inputAst.value\n                        });\n                    });\n                inputDefs = hostBindings.map(function (hostBinding) { return elementBindingDef(hostBinding.inputAst, hostBinding.dirAst); });\n            }\n            outputDefs = usedEvents.map(function (_a) {\n                var target = _a[0], eventName = _a[1];\n                return o.literalArr([o.literal(target), o.literal(eventName)]);\n            });\n        }\n        templateVisitAll(this, ast.children);\n        var /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;\n        var /** @type {?} */ compAst = ast.directives.find(function (dirAst) { return dirAst.directive.isComponent; });\n        var /** @type {?} */ compRendererType = /** @type {?} */ (o.NULL_EXPR);\n        var /** @type {?} */ compView = /** @type {?} */ (o.NULL_EXPR);\n        if (compAst) {\n            compView = this.outputCtx.importExpr(compAst.directive.componentViewType);\n            compRendererType = this.outputCtx.importExpr(compAst.directive.rendererType);\n        }\n        // Check index is the same as the node index during compilation\n        // They might only differ at runtime\n        var /** @type {?} */ checkIndex = nodeIndex;\n        this.nodes[nodeIndex] = function () {\n            return ({\n                sourceSpan: ast.sourceSpan,\n                nodeFlags: 1 /* TypeElement */ | flags,\n                nodeDef: o.importExpr(Identifiers.elementDef).callFn([\n                    o.literal(checkIndex),\n                    o.literal(flags),\n                    queryMatchesExpr,\n                    o.literal(ast.ngContentIndex),\n                    o.literal(childCount),\n                    o.literal(elName),\n                    elName ? fixedAttrsDef(ast) : o.NULL_EXPR,\n                    inputDefs.length ? o.literalArr(inputDefs) : o.NULL_EXPR,\n                    outputDefs.length ? o.literalArr(outputDefs) : o.NULL_EXPR,\n                    _this._createElementHandleEventFn(nodeIndex, hostEvents),\n                    compView,\n                    compRendererType,\n                ]),\n                updateRenderer: updateRendererExpressions\n            });\n        };\n    };\n    /**\n     * @param {?} nodeIndex\n     * @param {?} ast\n     * @return {?}\n     */\n    ViewBuilder.prototype._visitElementOrTemplate = /**\n     * @param {?} nodeIndex\n     * @param {?} ast\n     * @return {?}\n     */\n    function (nodeIndex, ast) {\n        var _this = this;\n        var /** @type {?} */ flags = 0 /* None */;\n        if (ast.hasViewContainer) {\n            flags |= 16777216 /* EmbeddedViews */;\n        }\n        var /** @type {?} */ usedEvents = new Map();\n        ast.outputs.forEach(function (event) {\n            var _a = elementEventNameAndTarget(event, null), name = _a.name, target = _a.target;\n            usedEvents.set(elementEventFullName(target, name), [target, name]);\n        });\n        ast.directives.forEach(function (dirAst) {\n            dirAst.hostEvents.forEach(function (event) {\n                var _a = elementEventNameAndTarget(event, dirAst), name = _a.name, target = _a.target;\n                usedEvents.set(elementEventFullName(target, name), [target, name]);\n            });\n        });\n        var /** @type {?} */ hostBindings = [];\n        var /** @type {?} */ hostEvents = [];\n        this._visitComponentFactoryResolverProvider(ast.directives);\n        ast.providers.forEach(function (providerAst, providerIndex) {\n            var /** @type {?} */ dirAst = /** @type {?} */ ((undefined));\n            var /** @type {?} */ dirIndex = /** @type {?} */ ((undefined));\n            ast.directives.forEach(function (localDirAst, i) {\n                if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {\n                    dirAst = localDirAst;\n                    dirIndex = i;\n                }\n            });\n            if (dirAst) {\n                var _a = _this._visitDirective(providerAst, dirAst, dirIndex, nodeIndex, ast.references, ast.queryMatches, usedEvents, /** @type {?} */ ((_this.staticQueryIds.get(/** @type {?} */ (ast))))), dirHostBindings = _a.hostBindings, dirHostEvents = _a.hostEvents;\n                hostBindings.push.apply(hostBindings, dirHostBindings);\n                hostEvents.push.apply(hostEvents, dirHostEvents);\n            }\n            else {\n                _this._visitProvider(providerAst, ast.queryMatches);\n            }\n        });\n        var /** @type {?} */ queryMatchExprs = [];\n        ast.queryMatches.forEach(function (match) {\n            var /** @type {?} */ valueType = /** @type {?} */ ((undefined));\n            if (tokenReference(match.value) ===\n                _this.reflector.resolveExternalReference(Identifiers.ElementRef)) {\n                valueType = 0 /* ElementRef */;\n            }\n            else if (tokenReference(match.value) ===\n                _this.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {\n                valueType = 3 /* ViewContainerRef */;\n            }\n            else if (tokenReference(match.value) ===\n                _this.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n                valueType = 2 /* TemplateRef */;\n            }\n            if (valueType != null) {\n                queryMatchExprs.push(o.literalArr([o.literal(match.queryId), o.literal(valueType)]));\n            }\n        });\n        ast.references.forEach(function (ref) {\n            var /** @type {?} */ valueType = /** @type {?} */ ((undefined));\n            if (!ref.value) {\n                valueType = 1 /* RenderElement */;\n            }\n            else if (tokenReference(ref.value) ===\n                _this.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n                valueType = 2 /* TemplateRef */;\n            }\n            if (valueType != null) {\n                _this.refNodeIndices[ref.name] = nodeIndex;\n                queryMatchExprs.push(o.literalArr([o.literal(ref.name), o.literal(valueType)]));\n            }\n        });\n        ast.outputs.forEach(function (outputAst) {\n            hostEvents.push({ context: COMP_VAR, eventAst: outputAst, dirAst: /** @type {?} */ ((null)) });\n        });\n        return {\n            flags: flags,\n            usedEvents: Array.from(usedEvents.values()),\n            queryMatchesExpr: queryMatchExprs.length ? o.literalArr(queryMatchExprs) : o.NULL_EXPR,\n            hostBindings: hostBindings,\n            hostEvents: hostEvents\n        };\n    };\n    /**\n     * @param {?} providerAst\n     * @param {?} dirAst\n     * @param {?} directiveIndex\n     * @param {?} elementNodeIndex\n     * @param {?} refs\n     * @param {?} queryMatches\n     * @param {?} usedEvents\n     * @param {?} queryIds\n     * @return {?}\n     */\n    ViewBuilder.prototype._visitDirective = /**\n     * @param {?} providerAst\n     * @param {?} dirAst\n     * @param {?} directiveIndex\n     * @param {?} elementNodeIndex\n     * @param {?} refs\n     * @param {?} queryMatches\n     * @param {?} usedEvents\n     * @param {?} queryIds\n     * @return {?}\n     */\n    function (providerAst, dirAst, directiveIndex, elementNodeIndex, refs, queryMatches, usedEvents, queryIds) {\n        var _this = this;\n        var /** @type {?} */ nodeIndex = this.nodes.length;\n        // reserve the space in the nodeDefs array so we can add children\n        this.nodes.push(/** @type {?} */ ((null)));\n        dirAst.directive.queries.forEach(function (query, queryIndex) {\n            var /** @type {?} */ queryId = dirAst.contentQueryStartId + queryIndex;\n            var /** @type {?} */ flags = 67108864 /* TypeContentQuery */ | calcStaticDynamicQueryFlags(queryIds, queryId, query.first);\n            var /** @type {?} */ bindingType = query.first ? 0 /* First */ : 1 /* All */;\n            _this.nodes.push(function () {\n                return ({\n                    sourceSpan: dirAst.sourceSpan,\n                    nodeFlags: flags,\n                    nodeDef: o.importExpr(Identifiers.queryDef).callFn([\n                        o.literal(flags), o.literal(queryId),\n                        new o.LiteralMapExpr([new o.LiteralMapEntry(query.propertyName, o.literal(bindingType), false)])\n                    ]),\n                });\n            });\n        });\n        // Note: the operation below might also create new nodeDefs,\n        // but we don't want them to be a child of a directive,\n        // as they might be a provider/pipe on their own.\n        // I.e. we only allow queries as children of directives nodes.\n        var /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;\n        var _a = this._visitProviderOrDirective(providerAst, queryMatches), flags = _a.flags, queryMatchExprs = _a.queryMatchExprs, providerExpr = _a.providerExpr, depsExpr = _a.depsExpr;\n        refs.forEach(function (ref) {\n            if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {\n                _this.refNodeIndices[ref.name] = nodeIndex;\n                queryMatchExprs.push(o.literalArr([o.literal(ref.name), o.literal(4 /* Provider */)]));\n            }\n        });\n        if (dirAst.directive.isComponent) {\n            flags |= 32768 /* Component */;\n        }\n        var /** @type {?} */ inputDefs = dirAst.inputs.map(function (inputAst, inputIndex) {\n            var /** @type {?} */ mapValue = o.literalArr([o.literal(inputIndex), o.literal(inputAst.directiveName)]);\n            // Note: it's important to not quote the key so that we can capture renames by minifiers!\n            return new o.LiteralMapEntry(inputAst.directiveName, mapValue, false);\n        });\n        var /** @type {?} */ outputDefs = [];\n        var /** @type {?} */ dirMeta = dirAst.directive;\n        Object.keys(dirMeta.outputs).forEach(function (propName) {\n            var /** @type {?} */ eventName = dirMeta.outputs[propName];\n            if (usedEvents.has(eventName)) {\n                // Note: it's important to not quote the key so that we can capture renames by minifiers!\n                outputDefs.push(new o.LiteralMapEntry(propName, o.literal(eventName), false));\n            }\n        });\n        var /** @type {?} */ updateDirectiveExpressions = [];\n        if (dirAst.inputs.length || (flags & (262144 /* DoCheck */ | 65536 /* OnInit */)) > 0) {\n            updateDirectiveExpressions =\n                dirAst.inputs.map(function (input, bindingIndex) {\n                    return _this._preprocessUpdateExpression({\n                        nodeIndex: nodeIndex,\n                        bindingIndex: bindingIndex,\n                        sourceSpan: input.sourceSpan,\n                        context: COMP_VAR,\n                        value: input.value\n                    });\n                });\n        }\n        var /** @type {?} */ dirContextExpr = o.importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, o.literal(nodeIndex)]);\n        var /** @type {?} */ hostBindings = dirAst.hostProperties.map(function (inputAst) {\n            return ({\n                context: dirContextExpr,\n                dirAst: dirAst,\n                inputAst: inputAst,\n            });\n        });\n        var /** @type {?} */ hostEvents = dirAst.hostEvents.map(function (hostEventAst) {\n            return ({\n                context: dirContextExpr,\n                eventAst: hostEventAst, dirAst: dirAst,\n            });\n        });\n        // Check index is the same as the node index during compilation\n        // They might only differ at runtime\n        var /** @type {?} */ checkIndex = nodeIndex;\n        this.nodes[nodeIndex] = function () {\n            return ({\n                sourceSpan: dirAst.sourceSpan,\n                nodeFlags: 16384 /* TypeDirective */ | flags,\n                nodeDef: o.importExpr(Identifiers.directiveDef).callFn([\n                    o.literal(checkIndex),\n                    o.literal(flags),\n                    queryMatchExprs.length ? o.literalArr(queryMatchExprs) : o.NULL_EXPR,\n                    o.literal(childCount),\n                    providerExpr,\n                    depsExpr,\n                    inputDefs.length ? new o.LiteralMapExpr(inputDefs) : o.NULL_EXPR,\n                    outputDefs.length ? new o.LiteralMapExpr(outputDefs) : o.NULL_EXPR,\n                ]),\n                updateDirectives: updateDirectiveExpressions,\n                directive: dirAst.directive.type,\n            });\n        };\n        return { hostBindings: hostBindings, hostEvents: hostEvents };\n    };\n    /**\n     * @param {?} providerAst\n     * @param {?} queryMatches\n     * @return {?}\n     */\n    ViewBuilder.prototype._visitProvider = /**\n     * @param {?} providerAst\n     * @param {?} queryMatches\n     * @return {?}\n     */\n    function (providerAst, queryMatches) {\n        this._addProviderNode(this._visitProviderOrDirective(providerAst, queryMatches));\n    };\n    /**\n     * @param {?} directives\n     * @return {?}\n     */\n    ViewBuilder.prototype._visitComponentFactoryResolverProvider = /**\n     * @param {?} directives\n     * @return {?}\n     */\n    function (directives) {\n        var /** @type {?} */ componentDirMeta = directives.find(function (dirAst) { return dirAst.directive.isComponent; });\n        if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {\n            var _a = componentFactoryResolverProviderDef(this.reflector, this.outputCtx, 8192 /* PrivateProvider */, componentDirMeta.directive.entryComponents), providerExpr = _a.providerExpr, depsExpr = _a.depsExpr, flags = _a.flags, tokenExpr = _a.tokenExpr;\n            this._addProviderNode({\n                providerExpr: providerExpr,\n                depsExpr: depsExpr,\n                flags: flags,\n                tokenExpr: tokenExpr,\n                queryMatchExprs: [],\n                sourceSpan: componentDirMeta.sourceSpan\n            });\n        }\n    };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    ViewBuilder.prototype._addProviderNode = /**\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        var /** @type {?} */ nodeIndex = this.nodes.length;\n        // providerDef(\n        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], token:any,\n        //   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;\n        this.nodes.push(function () {\n            return ({\n                sourceSpan: data.sourceSpan,\n                nodeFlags: data.flags,\n                nodeDef: o.importExpr(Identifiers.providerDef).callFn([\n                    o.literal(data.flags),\n                    data.queryMatchExprs.length ? o.literalArr(data.queryMatchExprs) : o.NULL_EXPR,\n                    data.tokenExpr, data.providerExpr, data.depsExpr\n                ])\n            });\n        });\n    };\n    /**\n     * @param {?} providerAst\n     * @param {?} queryMatches\n     * @return {?}\n     */\n    ViewBuilder.prototype._visitProviderOrDirective = /**\n     * @param {?} providerAst\n     * @param {?} queryMatches\n     * @return {?}\n     */\n    function (providerAst, queryMatches) {\n        var /** @type {?} */ flags = 0 /* None */;\n        var /** @type {?} */ queryMatchExprs = [];\n        queryMatches.forEach(function (match) {\n            if (tokenReference(match.value) === tokenReference(providerAst.token)) {\n                queryMatchExprs.push(o.literalArr([o.literal(match.queryId), o.literal(4 /* Provider */)]));\n            }\n        });\n        var _a = providerDef(this.outputCtx, providerAst), providerExpr = _a.providerExpr, depsExpr = _a.depsExpr, providerFlags = _a.flags, tokenExpr = _a.tokenExpr;\n        return {\n            flags: flags | providerFlags,\n            queryMatchExprs: queryMatchExprs,\n            providerExpr: providerExpr,\n            depsExpr: depsExpr,\n            tokenExpr: tokenExpr,\n            sourceSpan: providerAst.sourceSpan\n        };\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ViewBuilder.prototype.getLocal = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (name == EventHandlerVars.event.name) {\n            return EventHandlerVars.event;\n        }\n        var /** @type {?} */ currViewExpr = VIEW_VAR;\n        for (var /** @type {?} */ currBuilder = this; currBuilder; currBuilder = currBuilder.parent,\n            currViewExpr = currViewExpr.prop('parent').cast(o.DYNAMIC_TYPE)) {\n            // check references\n            var /** @type {?} */ refNodeIndex = currBuilder.refNodeIndices[name];\n            if (refNodeIndex != null) {\n                return o.importExpr(Identifiers.nodeValue).callFn([currViewExpr, o.literal(refNodeIndex)]);\n            }\n            // check variables\n            var /** @type {?} */ varAst = currBuilder.variables.find(function (varAst) { return varAst.name === name; });\n            if (varAst) {\n                var /** @type {?} */ varValue = varAst.value || IMPLICIT_TEMPLATE_VAR;\n                return currViewExpr.prop('context').prop(varValue);\n            }\n        }\n        return null;\n    };\n    /**\n     * @param {?} sourceSpan\n     * @param {?} argCount\n     * @return {?}\n     */\n    ViewBuilder.prototype._createLiteralArrayConverter = /**\n     * @param {?} sourceSpan\n     * @param {?} argCount\n     * @return {?}\n     */\n    function (sourceSpan, argCount) {\n        if (argCount === 0) {\n            var /** @type {?} */ valueExpr_1 = o.importExpr(Identifiers.EMPTY_ARRAY);\n            return function () { return valueExpr_1; };\n        }\n        var /** @type {?} */ checkIndex = this.nodes.length;\n        this.nodes.push(function () {\n            return ({\n                sourceSpan: sourceSpan,\n                nodeFlags: 32 /* TypePureArray */,\n                nodeDef: o.importExpr(Identifiers.pureArrayDef).callFn([\n                    o.literal(checkIndex),\n                    o.literal(argCount),\n                ])\n            });\n        });\n        return function (args) { return callCheckStmt(checkIndex, args); };\n    };\n    /**\n     * @param {?} sourceSpan\n     * @param {?} keys\n     * @return {?}\n     */\n    ViewBuilder.prototype._createLiteralMapConverter = /**\n     * @param {?} sourceSpan\n     * @param {?} keys\n     * @return {?}\n     */\n    function (sourceSpan, keys) {\n        if (keys.length === 0) {\n            var /** @type {?} */ valueExpr_2 = o.importExpr(Identifiers.EMPTY_MAP);\n            return function () { return valueExpr_2; };\n        }\n        var /** @type {?} */ map = o.literalMap(keys.map(function (e, i) { return (tslib_1.__assign({}, e, { value: o.literal(i) })); }));\n        var /** @type {?} */ checkIndex = this.nodes.length;\n        this.nodes.push(function () {\n            return ({\n                sourceSpan: sourceSpan,\n                nodeFlags: 64 /* TypePureObject */,\n                nodeDef: o.importExpr(Identifiers.pureObjectDef).callFn([\n                    o.literal(checkIndex),\n                    map,\n                ])\n            });\n        });\n        return function (args) { return callCheckStmt(checkIndex, args); };\n    };\n    /**\n     * @param {?} expression\n     * @param {?} name\n     * @param {?} argCount\n     * @return {?}\n     */\n    ViewBuilder.prototype._createPipeConverter = /**\n     * @param {?} expression\n     * @param {?} name\n     * @param {?} argCount\n     * @return {?}\n     */\n    function (expression, name, argCount) {\n        var /** @type {?} */ pipe = /** @type {?} */ ((this.usedPipes.find(function (pipeSummary) { return pipeSummary.name === name; })));\n        if (pipe.pure) {\n            var /** @type {?} */ checkIndex_1 = this.nodes.length;\n            this.nodes.push(function () {\n                return ({\n                    sourceSpan: expression.sourceSpan,\n                    nodeFlags: 128 /* TypePurePipe */,\n                    nodeDef: o.importExpr(Identifiers.purePipeDef).callFn([\n                        o.literal(checkIndex_1),\n                        o.literal(argCount),\n                    ])\n                });\n            });\n            // find underlying pipe in the component view\n            var /** @type {?} */ compViewExpr = VIEW_VAR;\n            var /** @type {?} */ compBuilder = this;\n            while (compBuilder.parent) {\n                compBuilder = compBuilder.parent;\n                compViewExpr = compViewExpr.prop('parent').cast(o.DYNAMIC_TYPE);\n            }\n            var /** @type {?} */ pipeNodeIndex = compBuilder.purePipeNodeIndices[name];\n            var /** @type {?} */ pipeValueExpr_1 = o.importExpr(Identifiers.nodeValue).callFn([compViewExpr, o.literal(pipeNodeIndex)]);\n            return function (args) {\n                return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, callCheckStmt(checkIndex_1, [pipeValueExpr_1].concat(args)));\n            };\n        }\n        else {\n            var /** @type {?} */ nodeIndex = this._createPipe(expression.sourceSpan, pipe);\n            var /** @type {?} */ nodeValueExpr_1 = o.importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, o.literal(nodeIndex)]);\n            return function (args) {\n                return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, nodeValueExpr_1.callMethod('transform', args));\n            };\n        }\n    };\n    /**\n     * @param {?} sourceSpan\n     * @param {?} pipe\n     * @return {?}\n     */\n    ViewBuilder.prototype._createPipe = /**\n     * @param {?} sourceSpan\n     * @param {?} pipe\n     * @return {?}\n     */\n    function (sourceSpan, pipe) {\n        var _this = this;\n        var /** @type {?} */ nodeIndex = this.nodes.length;\n        var /** @type {?} */ flags = 0 /* None */;\n        pipe.type.lifecycleHooks.forEach(function (lifecycleHook) {\n            // for pipes, we only support ngOnDestroy\n            if (lifecycleHook === LifecycleHooks.OnDestroy) {\n                flags |= lifecycleHookToNodeFlag(lifecycleHook);\n            }\n        });\n        var /** @type {?} */ depExprs = pipe.type.diDeps.map(function (diDep) { return depDef(_this.outputCtx, diDep); });\n        // function pipeDef(\n        //   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef\n        this.nodes.push(function () {\n            return ({\n                sourceSpan: sourceSpan,\n                nodeFlags: 16 /* TypePipe */,\n                nodeDef: o.importExpr(Identifiers.pipeDef).callFn([\n                    o.literal(flags), _this.outputCtx.importExpr(pipe.type.reference), o.literalArr(depExprs)\n                ])\n            });\n        });\n        return nodeIndex;\n    };\n    /**\n     * For the AST in `UpdateExpression.value`:\n     * - create nodes for pipes, literal arrays and, literal maps,\n     * - update the AST to replace pipes, literal arrays and, literal maps with calls to check fn.\n     *\n     * WARNING: This might create new nodeDefs (for pipes and literal arrays and literal maps)!\n     * @param {?} expression\n     * @return {?}\n     */\n    ViewBuilder.prototype._preprocessUpdateExpression = /**\n     * For the AST in `UpdateExpression.value`:\n     * - create nodes for pipes, literal arrays and, literal maps,\n     * - update the AST to replace pipes, literal arrays and, literal maps with calls to check fn.\n     *\n     * WARNING: This might create new nodeDefs (for pipes and literal arrays and literal maps)!\n     * @param {?} expression\n     * @return {?}\n     */\n    function (expression) {\n        var _this = this;\n        return {\n            nodeIndex: expression.nodeIndex,\n            bindingIndex: expression.bindingIndex,\n            sourceSpan: expression.sourceSpan,\n            context: expression.context,\n            value: convertPropertyBindingBuiltins({\n                createLiteralArrayConverter: function (argCount) {\n                    return _this._createLiteralArrayConverter(expression.sourceSpan, argCount);\n                },\n                createLiteralMapConverter: function (keys) {\n                    return _this._createLiteralMapConverter(expression.sourceSpan, keys);\n                },\n                createPipeConverter: function (name, argCount) {\n                    return _this._createPipeConverter(expression, name, argCount);\n                }\n            }, expression.value)\n        };\n    };\n    /**\n     * @return {?}\n     */\n    ViewBuilder.prototype._createNodeExpressions = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ self = this;\n        var /** @type {?} */ updateBindingCount = 0;\n        var /** @type {?} */ updateRendererStmts = [];\n        var /** @type {?} */ updateDirectivesStmts = [];\n        var /** @type {?} */ nodeDefExprs = this.nodes.map(function (factory, nodeIndex) {\n            var _a = factory(), nodeDef = _a.nodeDef, nodeFlags = _a.nodeFlags, updateDirectives = _a.updateDirectives, updateRenderer = _a.updateRenderer, sourceSpan = _a.sourceSpan;\n            if (updateRenderer) {\n                updateRendererStmts.push.apply(updateRendererStmts, createUpdateStatements(nodeIndex, sourceSpan, updateRenderer, false));\n            }\n            if (updateDirectives) {\n                updateDirectivesStmts.push.apply(updateDirectivesStmts, createUpdateStatements(nodeIndex, sourceSpan, updateDirectives, (nodeFlags & (262144 /* DoCheck */ | 65536 /* OnInit */)) > 0));\n            }\n            // We use a comma expression to call the log function before\n            // the nodeDef function, but still use the result of the nodeDef function\n            // as the value.\n            // Note: We only add the logger to elements / text nodes,\n            // so we don't generate too much code.\n            var /** @type {?} */ logWithNodeDef = nodeFlags & 3 /* CatRenderNode */ ?\n                new o.CommaExpr([LOG_VAR.callFn([]).callFn([]), nodeDef]) :\n                nodeDef;\n            return o.applySourceSpanToExpressionIfNeeded(logWithNodeDef, sourceSpan);\n        });\n        return { updateRendererStmts: updateRendererStmts, updateDirectivesStmts: updateDirectivesStmts, nodeDefExprs: nodeDefExprs };\n        /**\n         * @param {?} nodeIndex\n         * @param {?} sourceSpan\n         * @param {?} expressions\n         * @param {?} allowEmptyExprs\n         * @return {?}\n         */\n        function createUpdateStatements(nodeIndex, sourceSpan, expressions, allowEmptyExprs) {\n            var /** @type {?} */ updateStmts = [];\n            var /** @type {?} */ exprs = expressions.map(function (_a) {\n                var sourceSpan = _a.sourceSpan, context = _a.context, value = _a.value;\n                var /** @type {?} */ bindingId = \"\" + updateBindingCount++;\n                var /** @type {?} */ nameResolver = context === COMP_VAR ? self : null;\n                var _b = convertPropertyBinding(nameResolver, context, value, bindingId, BindingForm.General), stmts = _b.stmts, currValExpr = _b.currValExpr;\n                updateStmts.push.apply(updateStmts, stmts.map(function (stmt) { return o.applySourceSpanToStatementIfNeeded(stmt, sourceSpan); }));\n                return o.applySourceSpanToExpressionIfNeeded(currValExpr, sourceSpan);\n            });\n            if (expressions.length || allowEmptyExprs) {\n                updateStmts.push(o.applySourceSpanToStatementIfNeeded(callCheckStmt(nodeIndex, exprs).toStmt(), sourceSpan));\n            }\n            return updateStmts;\n        }\n    };\n    /**\n     * @param {?} nodeIndex\n     * @param {?} handlers\n     * @return {?}\n     */\n    ViewBuilder.prototype._createElementHandleEventFn = /**\n     * @param {?} nodeIndex\n     * @param {?} handlers\n     * @return {?}\n     */\n    function (nodeIndex, handlers) {\n        var _this = this;\n        var /** @type {?} */ handleEventStmts = [];\n        var /** @type {?} */ handleEventBindingCount = 0;\n        handlers.forEach(function (_a) {\n            var context = _a.context, eventAst = _a.eventAst, dirAst = _a.dirAst;\n            var /** @type {?} */ bindingId = \"\" + handleEventBindingCount++;\n            var /** @type {?} */ nameResolver = context === COMP_VAR ? _this : null;\n            var _b = convertActionBinding(nameResolver, context, eventAst.handler, bindingId), stmts = _b.stmts, allowDefault = _b.allowDefault;\n            var /** @type {?} */ trueStmts = stmts;\n            if (allowDefault) {\n                trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());\n            }\n            var _c = elementEventNameAndTarget(eventAst, dirAst), eventTarget = _c.target, eventName = _c.name;\n            var /** @type {?} */ fullEventName = elementEventFullName(eventTarget, eventName);\n            handleEventStmts.push(o.applySourceSpanToStatementIfNeeded(new o.IfStmt(o.literal(fullEventName).identical(EVENT_NAME_VAR), trueStmts), eventAst.sourceSpan));\n        });\n        var /** @type {?} */ handleEventFn;\n        if (handleEventStmts.length > 0) {\n            var /** @type {?} */ preStmts = [ALLOW_DEFAULT_VAR.set(o.literal(true)).toDeclStmt(o.BOOL_TYPE)];\n            if (!this.component.isHost && o.findReadVarNames(handleEventStmts).has(/** @type {?} */ ((COMP_VAR.name)))) {\n                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));\n            }\n            handleEventFn = o.fn([\n                new o.FnParam(/** @type {?} */ ((VIEW_VAR.name)), o.INFERRED_TYPE),\n                new o.FnParam(/** @type {?} */ ((EVENT_NAME_VAR.name)), o.INFERRED_TYPE),\n                new o.FnParam(/** @type {?} */ ((EventHandlerVars.event.name)), o.INFERRED_TYPE)\n            ], preStmts.concat(handleEventStmts, [new o.ReturnStatement(ALLOW_DEFAULT_VAR)]), o.INFERRED_TYPE);\n        }\n        else {\n            handleEventFn = o.NULL_EXPR;\n        }\n        return handleEventFn;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitDirective = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitDirectiveProperty = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitReference = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitVariable = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitEvent = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitElementProperty = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitAttr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    return ViewBuilder;\n}());\nfunction ViewBuilder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewBuilder.prototype.compType;\n    /** @type {?} */\n    ViewBuilder.prototype.nodes;\n    /** @type {?} */\n    ViewBuilder.prototype.purePipeNodeIndices;\n    /** @type {?} */\n    ViewBuilder.prototype.refNodeIndices;\n    /** @type {?} */\n    ViewBuilder.prototype.variables;\n    /** @type {?} */\n    ViewBuilder.prototype.children;\n    /** @type {?} */\n    ViewBuilder.prototype.viewName;\n    /** @type {?} */\n    ViewBuilder.prototype.reflector;\n    /** @type {?} */\n    ViewBuilder.prototype.outputCtx;\n    /** @type {?} */\n    ViewBuilder.prototype.parent;\n    /** @type {?} */\n    ViewBuilder.prototype.component;\n    /** @type {?} */\n    ViewBuilder.prototype.embeddedViewIndex;\n    /** @type {?} */\n    ViewBuilder.prototype.usedPipes;\n    /** @type {?} */\n    ViewBuilder.prototype.staticQueryIds;\n    /** @type {?} */\n    ViewBuilder.prototype.viewBuilderFactory;\n}\n/**\n * @param {?} astNodes\n * @return {?}\n */\nfunction needsAdditionalRootNode(astNodes) {\n    var /** @type {?} */ lastAstNode = astNodes[astNodes.length - 1];\n    if (lastAstNode instanceof EmbeddedTemplateAst) {\n        return lastAstNode.hasViewContainer;\n    }\n    if (lastAstNode instanceof ElementAst) {\n        if (isNgContainer(lastAstNode.name) && lastAstNode.children.length) {\n            return needsAdditionalRootNode(lastAstNode.children);\n        }\n        return lastAstNode.hasViewContainer;\n    }\n    return lastAstNode instanceof NgContentAst;\n}\n/**\n * @param {?} inputAst\n * @param {?} dirAst\n * @return {?}\n */\nfunction elementBindingDef(inputAst, dirAst) {\n    switch (inputAst.type) {\n        case PropertyBindingType.Attribute:\n            return o.literalArr([\n                o.literal(1 /* TypeElementAttribute */), o.literal(inputAst.name),\n                o.literal(inputAst.securityContext)\n            ]);\n        case PropertyBindingType.Property:\n            return o.literalArr([\n                o.literal(8 /* TypeProperty */), o.literal(inputAst.name),\n                o.literal(inputAst.securityContext)\n            ]);\n        case PropertyBindingType.Animation:\n            var /** @type {?} */ bindingType = 8 /* TypeProperty */ |\n                (dirAst && dirAst.directive.isComponent ? 32 /* SyntheticHostProperty */ :\n                    16 /* SyntheticProperty */);\n            return o.literalArr([\n                o.literal(bindingType), o.literal('@' + inputAst.name), o.literal(inputAst.securityContext)\n            ]);\n        case PropertyBindingType.Class:\n            return o.literalArr([o.literal(2 /* TypeElementClass */), o.literal(inputAst.name), o.NULL_EXPR]);\n        case PropertyBindingType.Style:\n            return o.literalArr([\n                o.literal(4 /* TypeElementStyle */), o.literal(inputAst.name), o.literal(inputAst.unit)\n            ]);\n    }\n}\n/**\n * @param {?} elementAst\n * @return {?}\n */\nfunction fixedAttrsDef(elementAst) {\n    var /** @type {?} */ mapResult = Object.create(null);\n    elementAst.attrs.forEach(function (attrAst) { mapResult[attrAst.name] = attrAst.value; });\n    elementAst.directives.forEach(function (dirAst) {\n        Object.keys(dirAst.directive.hostAttributes).forEach(function (name) {\n            var /** @type {?} */ value = dirAst.directive.hostAttributes[name];\n            var /** @type {?} */ prevValue = mapResult[name];\n            mapResult[name] = prevValue != null ? mergeAttributeValue(name, prevValue, value) : value;\n        });\n    });\n    // Note: We need to sort to get a defined output order\n    // for tests and for caching generated artifacts...\n    return o.literalArr(Object.keys(mapResult).sort().map(function (attrName) { return o.literalArr([o.literal(attrName), o.literal(mapResult[attrName])]); }));\n}\n/**\n * @param {?} attrName\n * @param {?} attrValue1\n * @param {?} attrValue2\n * @return {?}\n */\nfunction mergeAttributeValue(attrName, attrValue1, attrValue2) {\n    if (attrName == CLASS_ATTR || attrName == STYLE_ATTR) {\n        return attrValue1 + \" \" + attrValue2;\n    }\n    else {\n        return attrValue2;\n    }\n}\n/**\n * @param {?} nodeIndex\n * @param {?} exprs\n * @return {?}\n */\nfunction callCheckStmt(nodeIndex, exprs) {\n    if (exprs.length > 10) {\n        return CHECK_VAR.callFn([VIEW_VAR, o.literal(nodeIndex), o.literal(1 /* Dynamic */), o.literalArr(exprs)]);\n    }\n    else {\n        return CHECK_VAR.callFn([VIEW_VAR, o.literal(nodeIndex), o.literal(0 /* Inline */)].concat(exprs));\n    }\n}\n/**\n * @param {?} nodeIndex\n * @param {?} bindingIdx\n * @param {?} expr\n * @return {?}\n */\nfunction callUnwrapValue(nodeIndex, bindingIdx, expr) {\n    return o.importExpr(Identifiers.unwrapValue).callFn([\n        VIEW_VAR, o.literal(nodeIndex), o.literal(bindingIdx), expr\n    ]);\n}\n/**\n * @record\n */\nfunction StaticAndDynamicQueryIds() { }\nfunction StaticAndDynamicQueryIds_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StaticAndDynamicQueryIds.prototype.staticQueryIds;\n    /** @type {?} */\n    StaticAndDynamicQueryIds.prototype.dynamicQueryIds;\n}\n/**\n * @param {?} nodes\n * @param {?=} result\n * @return {?}\n */\nfunction findStaticQueryIds(nodes, result) {\n    if (result === void 0) { result = new Map(); }\n    nodes.forEach(function (node) {\n        var /** @type {?} */ staticQueryIds = new Set();\n        var /** @type {?} */ dynamicQueryIds = new Set();\n        var /** @type {?} */ queryMatches = /** @type {?} */ ((undefined));\n        if (node instanceof ElementAst) {\n            findStaticQueryIds(node.children, result);\n            node.children.forEach(function (child) {\n                var /** @type {?} */ childData = /** @type {?} */ ((result.get(child)));\n                childData.staticQueryIds.forEach(function (queryId) { return staticQueryIds.add(queryId); });\n                childData.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });\n            });\n            queryMatches = node.queryMatches;\n        }\n        else if (node instanceof EmbeddedTemplateAst) {\n            findStaticQueryIds(node.children, result);\n            node.children.forEach(function (child) {\n                var /** @type {?} */ childData = /** @type {?} */ ((result.get(child)));\n                childData.staticQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });\n                childData.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });\n            });\n            queryMatches = node.queryMatches;\n        }\n        if (queryMatches) {\n            queryMatches.forEach(function (match) { return staticQueryIds.add(match.queryId); });\n        }\n        dynamicQueryIds.forEach(function (queryId) { return staticQueryIds.delete(queryId); });\n        result.set(node, { staticQueryIds: staticQueryIds, dynamicQueryIds: dynamicQueryIds });\n    });\n    return result;\n}\n/**\n * @param {?} nodeStaticQueryIds\n * @return {?}\n */\nfunction staticViewQueryIds(nodeStaticQueryIds) {\n    var /** @type {?} */ staticQueryIds = new Set();\n    var /** @type {?} */ dynamicQueryIds = new Set();\n    Array.from(nodeStaticQueryIds.values()).forEach(function (entry) {\n        entry.staticQueryIds.forEach(function (queryId) { return staticQueryIds.add(queryId); });\n        entry.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });\n    });\n    dynamicQueryIds.forEach(function (queryId) { return staticQueryIds.delete(queryId); });\n    return { staticQueryIds: staticQueryIds, dynamicQueryIds: dynamicQueryIds };\n}\n/**\n * @param {?} eventAst\n * @param {?} dirAst\n * @return {?}\n */\nfunction elementEventNameAndTarget(eventAst, dirAst) {\n    if (eventAst.isAnimation) {\n        return {\n            name: \"@\" + eventAst.name + \".\" + eventAst.phase,\n            target: dirAst && dirAst.directive.isComponent ? 'component' : null\n        };\n    }\n    else {\n        return eventAst;\n    }\n}\n/**\n * @param {?} queryIds\n * @param {?} queryId\n * @param {?} isFirst\n * @return {?}\n */\nfunction calcStaticDynamicQueryFlags(queryIds, queryId, isFirst) {\n    var /** @type {?} */ flags = 0 /* None */;\n    // Note: We only make queries static that query for a single item.\n    // This is because of backwards compatibility with the old view compiler...\n    if (isFirst && (queryIds.staticQueryIds.has(queryId) || !queryIds.dynamicQueryIds.has(queryId))) {\n        flags |= 268435456 /* StaticQuery */;\n    }\n    else {\n        flags |= 536870912 /* DynamicQuery */;\n    }\n    return flags;\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nexport function elementEventFullName(target, name) {\n    return target ? target + \":\" + name : name;\n}\n//# sourceMappingURL=view_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as o from './output/output_ast';\nimport { error } from './util';\nvar /** @type {?} */ CONSTANT_PREFIX = '_c';\n// Closure variables holding messages must be named `MSG_[A-Z0-9]+`\nvar /** @type {?} */ TRANSLATION_PREFIX = 'MSG_';\n/** @enum {number} */\nvar DefinitionKind = { Injector: 0, Directive: 1, Component: 2, Pipe: 3, };\nexport { DefinitionKind };\n/**\n * Closure uses `goog.getMsg(message)` to lookup translations\n */\nvar /** @type {?} */ GOOG_GET_MSG = 'goog.getMsg';\n/**\n * Context to use when producing a key.\n *\n * This ensures we see the constant not the reference variable when producing\n * a key.\n */\nvar /** @type {?} */ KEY_CONTEXT = {};\n/**\n * A node that is a place-holder that allows the node to be replaced when the actual\n * node is known.\n *\n * This allows the constant pool to change an expression from a direct reference to\n * a constant to a shared constant. It returns a fix-up node that is later allowed to\n * change the referenced expression.\n */\nvar /**\n * A node that is a place-holder that allows the node to be replaced when the actual\n * node is known.\n *\n * This allows the constant pool to change an expression from a direct reference to\n * a constant to a shared constant. It returns a fix-up node that is later allowed to\n * change the referenced expression.\n */\nFixupExpression = /** @class */ (function (_super) {\n    tslib_1.__extends(FixupExpression, _super);\n    function FixupExpression(resolved) {\n        var _this = _super.call(this, resolved.type) || this;\n        _this.resolved = resolved;\n        _this.original = resolved;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    FixupExpression.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === KEY_CONTEXT) {\n            // When producing a key we want to traverse the constant not the\n            // variable used to refer to it.\n            return this.original.visitExpression(visitor, context);\n        }\n        else {\n            return this.resolved.visitExpression(visitor, context);\n        }\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    FixupExpression.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof FixupExpression && this.resolved.isEquivalent(e.resolved);\n    };\n    /**\n     * @return {?}\n     */\n    FixupExpression.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return true; };\n    /**\n     * @param {?} expression\n     * @return {?}\n     */\n    FixupExpression.prototype.fixup = /**\n     * @param {?} expression\n     * @return {?}\n     */\n    function (expression) {\n        this.resolved = expression;\n        this.shared = true;\n    };\n    return FixupExpression;\n}(o.Expression));\nfunction FixupExpression_tsickle_Closure_declarations() {\n    /** @type {?} */\n    FixupExpression.prototype.original;\n    /** @type {?} */\n    FixupExpression.prototype.shared;\n    /** @type {?} */\n    FixupExpression.prototype.resolved;\n}\n/**\n * A constant pool allows a code emitter to share constant in an output context.\n *\n * The constant pool also supports sharing access to ivy definitions references.\n */\nvar /**\n * A constant pool allows a code emitter to share constant in an output context.\n *\n * The constant pool also supports sharing access to ivy definitions references.\n */\nConstantPool = /** @class */ (function () {\n    function ConstantPool() {\n        this.statements = [];\n        this.translations = new Map();\n        this.literals = new Map();\n        this.literalFactories = new Map();\n        this.injectorDefinitions = new Map();\n        this.directiveDefinitions = new Map();\n        this.componentDefinitions = new Map();\n        this.pipeDefinitions = new Map();\n        this.nextNameIndex = 0;\n    }\n    /**\n     * @param {?} literal\n     * @param {?=} forceShared\n     * @return {?}\n     */\n    ConstantPool.prototype.getConstLiteral = /**\n     * @param {?} literal\n     * @param {?=} forceShared\n     * @return {?}\n     */\n    function (literal, forceShared) {\n        if (literal instanceof o.LiteralExpr || literal instanceof FixupExpression) {\n            // Do no put simple literals into the constant pool or try to produce a constant for a\n            // reference to a constant.\n            return literal;\n        }\n        var /** @type {?} */ key = this.keyOf(literal);\n        var /** @type {?} */ fixup = this.literals.get(key);\n        var /** @type {?} */ newValue = false;\n        if (!fixup) {\n            fixup = new FixupExpression(literal);\n            this.literals.set(key, fixup);\n            newValue = true;\n        }\n        if ((!newValue && !fixup.shared) || (newValue && forceShared)) {\n            // Replace the expression with a variable\n            var /** @type {?} */ name_1 = this.freshName();\n            this.statements.push(o.variable(name_1).set(literal).toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]));\n            fixup.fixup(o.variable(name_1));\n        }\n        return fixup;\n    };\n    // Generates closure specific code for translation.\n    //\n    // ```\n    // /**\n    //  * @desc description?\n    //  * @meaning meaning?\n    //  */\n    // const MSG_XYZ = goog.getMsg('message');\n    // ```\n    /**\n     * @param {?} message\n     * @param {?} meta\n     * @return {?}\n     */\n    ConstantPool.prototype.getTranslation = /**\n     * @param {?} message\n     * @param {?} meta\n     * @return {?}\n     */\n    function (message, meta) {\n        // The identity of an i18n message depends on the message and its meaning\n        var /** @type {?} */ key = meta.meaning ? message + \"\\0\\0\" + meta.meaning : message;\n        var /** @type {?} */ exp = this.translations.get(key);\n        if (exp) {\n            return exp;\n        }\n        var /** @type {?} */ docStmt = i18nMetaToDocStmt(meta);\n        if (docStmt) {\n            this.statements.push(docStmt);\n        }\n        // Call closure to get the translation\n        var /** @type {?} */ variable = o.variable(this.freshTranslationName());\n        var /** @type {?} */ fnCall = o.variable(GOOG_GET_MSG).callFn([o.literal(message)]);\n        var /** @type {?} */ msgStmt = variable.set(fnCall).toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]);\n        this.statements.push(msgStmt);\n        this.translations.set(key, variable);\n        return variable;\n    };\n    /**\n     * @param {?} type\n     * @param {?} kind\n     * @param {?} ctx\n     * @param {?=} forceShared\n     * @return {?}\n     */\n    ConstantPool.prototype.getDefinition = /**\n     * @param {?} type\n     * @param {?} kind\n     * @param {?} ctx\n     * @param {?=} forceShared\n     * @return {?}\n     */\n    function (type, kind, ctx, forceShared) {\n        if (forceShared === void 0) { forceShared = false; }\n        var /** @type {?} */ definitions = this.definitionsOf(kind);\n        var /** @type {?} */ fixup = definitions.get(type);\n        var /** @type {?} */ newValue = false;\n        if (!fixup) {\n            var /** @type {?} */ property = this.propertyNameOf(kind);\n            fixup = new FixupExpression(ctx.importExpr(type).prop(property));\n            definitions.set(type, fixup);\n            newValue = true;\n        }\n        if ((!newValue && !fixup.shared) || (newValue && forceShared)) {\n            var /** @type {?} */ name_2 = this.freshName();\n            this.statements.push(o.variable(name_2).set(fixup.resolved).toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]));\n            fixup.fixup(o.variable(name_2));\n        }\n        return fixup;\n    };\n    /**\n     * @param {?} literal\n     * @return {?}\n     */\n    ConstantPool.prototype.getLiteralFactory = /**\n     * @param {?} literal\n     * @return {?}\n     */\n    function (literal) {\n        // Create a pure function that builds an array of a mix of constant  and variable expressions\n        if (literal instanceof o.LiteralArrayExpr) {\n            var /** @type {?} */ argumentsForKey = literal.entries.map(function (e) { return e.isConstant() ? e : o.literal(null); });\n            var /** @type {?} */ key = this.keyOf(o.literalArr(argumentsForKey));\n            return this._getLiteralFactory(key, literal.entries, function (entries) { return o.literalArr(entries); });\n        }\n        else {\n            var /** @type {?} */ expressionForKey = o.literalMap(literal.entries.map(function (e) {\n                return ({\n                    key: e.key,\n                    value: e.value.isConstant() ? e.value : o.literal(null),\n                    quoted: e.quoted\n                });\n            }));\n            var /** @type {?} */ key = this.keyOf(expressionForKey);\n            return this._getLiteralFactory(key, literal.entries.map(function (e) { return e.value; }), function (entries) {\n                return o.literalMap(entries.map(function (value, index) {\n                    return ({\n                        key: literal.entries[index].key,\n                        value: value,\n                        quoted: literal.entries[index].quoted\n                    });\n                }));\n            });\n        }\n    };\n    /**\n     * @param {?} key\n     * @param {?} values\n     * @param {?} resultMap\n     * @return {?}\n     */\n    ConstantPool.prototype._getLiteralFactory = /**\n     * @param {?} key\n     * @param {?} values\n     * @param {?} resultMap\n     * @return {?}\n     */\n    function (key, values, resultMap) {\n        var _this = this;\n        var /** @type {?} */ literalFactory = this.literalFactories.get(key);\n        var /** @type {?} */ literalFactoryArguments = values.filter((function (e) { return !e.isConstant(); }));\n        if (!literalFactory) {\n            var /** @type {?} */ resultExpressions = values.map(function (e, index) { return e.isConstant() ? _this.getConstLiteral(e, true) : o.variable(\"a\" + index); });\n            var /** @type {?} */ parameters = resultExpressions.filter(isVariable).map(function (e) { return new o.FnParam(/** @type {?} */ ((e.name)), o.DYNAMIC_TYPE); });\n            var /** @type {?} */ pureFunctionDeclaration = o.fn(parameters, [new o.ReturnStatement(resultMap(resultExpressions))], o.INFERRED_TYPE);\n            var /** @type {?} */ name_3 = this.freshName();\n            this.statements.push(o.variable(name_3).set(pureFunctionDeclaration).toDeclStmt(o.INFERRED_TYPE, [\n                o.StmtModifier.Final\n            ]));\n            literalFactory = o.variable(name_3);\n            this.literalFactories.set(key, literalFactory);\n        }\n        return { literalFactory: literalFactory, literalFactoryArguments: literalFactoryArguments };\n    };\n    /**\n     * Produce a unique name.\n     *\n     * The name might be unique among different prefixes if any of the prefixes end in\n     * a digit so the prefix should be a constant string (not based on user input) and\n     * must not end in a digit.\n     */\n    /**\n     * Produce a unique name.\n     *\n     * The name might be unique among different prefixes if any of the prefixes end in\n     * a digit so the prefix should be a constant string (not based on user input) and\n     * must not end in a digit.\n     * @param {?} prefix\n     * @return {?}\n     */\n    ConstantPool.prototype.uniqueName = /**\n     * Produce a unique name.\n     *\n     * The name might be unique among different prefixes if any of the prefixes end in\n     * a digit so the prefix should be a constant string (not based on user input) and\n     * must not end in a digit.\n     * @param {?} prefix\n     * @return {?}\n     */\n    function (prefix) { return \"\" + prefix + this.nextNameIndex++; };\n    /**\n     * @param {?} kind\n     * @return {?}\n     */\n    ConstantPool.prototype.definitionsOf = /**\n     * @param {?} kind\n     * @return {?}\n     */\n    function (kind) {\n        switch (kind) {\n            case 2 /* Component */:\n                return this.componentDefinitions;\n            case 1 /* Directive */:\n                return this.directiveDefinitions;\n            case 0 /* Injector */:\n                return this.injectorDefinitions;\n            case 3 /* Pipe */:\n                return this.pipeDefinitions;\n        }\n        error(\"Unknown definition kind \" + kind);\n        return this.componentDefinitions;\n    };\n    /**\n     * @param {?} kind\n     * @return {?}\n     */\n    ConstantPool.prototype.propertyNameOf = /**\n     * @param {?} kind\n     * @return {?}\n     */\n    function (kind) {\n        switch (kind) {\n            case 2 /* Component */:\n                return 'ngComponentDef';\n            case 1 /* Directive */:\n                return 'ngDirectiveDef';\n            case 0 /* Injector */:\n                return 'ngInjectorDef';\n            case 3 /* Pipe */:\n                return 'ngPipeDef';\n        }\n        error(\"Unknown definition kind \" + kind);\n        return '<unknown>';\n    };\n    /**\n     * @return {?}\n     */\n    ConstantPool.prototype.freshName = /**\n     * @return {?}\n     */\n    function () { return this.uniqueName(CONSTANT_PREFIX); };\n    /**\n     * @return {?}\n     */\n    ConstantPool.prototype.freshTranslationName = /**\n     * @return {?}\n     */\n    function () {\n        return this.uniqueName(TRANSLATION_PREFIX).toUpperCase();\n    };\n    /**\n     * @param {?} expression\n     * @return {?}\n     */\n    ConstantPool.prototype.keyOf = /**\n     * @param {?} expression\n     * @return {?}\n     */\n    function (expression) {\n        return expression.visitExpression(new KeyVisitor(), KEY_CONTEXT);\n    };\n    return ConstantPool;\n}());\n/**\n * A constant pool allows a code emitter to share constant in an output context.\n *\n * The constant pool also supports sharing access to ivy definitions references.\n */\nexport { ConstantPool };\nfunction ConstantPool_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ConstantPool.prototype.statements;\n    /** @type {?} */\n    ConstantPool.prototype.translations;\n    /** @type {?} */\n    ConstantPool.prototype.literals;\n    /** @type {?} */\n    ConstantPool.prototype.literalFactories;\n    /** @type {?} */\n    ConstantPool.prototype.injectorDefinitions;\n    /** @type {?} */\n    ConstantPool.prototype.directiveDefinitions;\n    /** @type {?} */\n    ConstantPool.prototype.componentDefinitions;\n    /** @type {?} */\n    ConstantPool.prototype.pipeDefinitions;\n    /** @type {?} */\n    ConstantPool.prototype.nextNameIndex;\n}\n/**\n * Visitor used to determine if 2 expressions are equivalent and can be shared in the\n * `ConstantPool`.\n *\n * When the id (string) generated by the visitor is equal, expressions are considered equivalent.\n */\nvar /**\n * Visitor used to determine if 2 expressions are equivalent and can be shared in the\n * `ConstantPool`.\n *\n * When the id (string) generated by the visitor is equal, expressions are considered equivalent.\n */\nKeyVisitor = /** @class */ (function () {\n    function KeyVisitor() {\n        this.visitReadVarExpr = invalid;\n        this.visitWriteVarExpr = invalid;\n        this.visitWriteKeyExpr = invalid;\n        this.visitWritePropExpr = invalid;\n        this.visitInvokeMethodExpr = invalid;\n        this.visitInvokeFunctionExpr = invalid;\n        this.visitInstantiateExpr = invalid;\n        this.visitConditionalExpr = invalid;\n        this.visitNotExpr = invalid;\n        this.visitAssertNotNullExpr = invalid;\n        this.visitCastExpr = invalid;\n        this.visitFunctionExpr = invalid;\n        this.visitBinaryOperatorExpr = invalid;\n        this.visitReadPropExpr = invalid;\n        this.visitReadKeyExpr = invalid;\n        this.visitCommaExpr = invalid;\n    }\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    KeyVisitor.prototype.visitLiteralExpr = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        return \"\" + (typeof ast.value === 'string' ? '\"' + ast.value + '\"' : ast.value);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    KeyVisitor.prototype.visitLiteralArrayExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        return \"[\" + ast.entries.map(function (entry) { return entry.visitExpression(_this, context); }).join(',') + \"]\";\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    KeyVisitor.prototype.visitLiteralMapExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ mapKey = function (entry) {\n            var /** @type {?} */ quote = entry.quoted ? '\"' : '';\n            return \"\" + quote + entry.key + quote;\n        };\n        var /** @type {?} */ mapEntry = function (entry) {\n            return mapKey(entry) + \":\" + entry.value.visitExpression(_this, context);\n        };\n        return \"{\" + ast.entries.map(mapEntry).join(',');\n    };\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    KeyVisitor.prototype.visitExternalExpr = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        return ast.value.moduleName ? \"EX:\" + ast.value.moduleName + \":\" + ast.value.name :\n            \"EX:\" + ast.value.runtime.name;\n    };\n    return KeyVisitor;\n}());\nfunction KeyVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    KeyVisitor.prototype.visitReadVarExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitWriteVarExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitWriteKeyExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitWritePropExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitInvokeMethodExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitInvokeFunctionExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitInstantiateExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitConditionalExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitNotExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitAssertNotNullExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitCastExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitFunctionExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitBinaryOperatorExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitReadPropExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitReadKeyExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitCommaExpr;\n}\n/**\n * @template T\n * @param {?} arg\n * @return {?}\n */\nfunction invalid(arg) {\n    throw new Error(\"Invalid state: Visitor \" + this.constructor.name + \" doesn't handle \" + arg.constructor.name);\n}\n/**\n * @param {?} e\n * @return {?}\n */\nfunction isVariable(e) {\n    return e instanceof o.ReadVarExpr;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction i18nMetaToDocStmt(meta) {\n    var /** @type {?} */ tags = [];\n    if (meta.description) {\n        tags.push({ tagName: \"desc\" /* Desc */, text: meta.description });\n    }\n    if (meta.meaning) {\n        tags.push({ tagName: \"meaning\" /* Meaning */, text: meta.meaning });\n    }\n    return tags.length == 0 ? null : new o.JSDocCommentStmt(tags);\n}\n//# sourceMappingURL=constant_pool.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { extractMessages } from './extractor_merger';\nimport * as i18n from './i18n_ast';\n/**\n * A container for message extracted from the templates.\n */\nvar /**\n * A container for message extracted from the templates.\n */\nMessageBundle = /** @class */ (function () {\n    function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs, _locale) {\n        if (_locale === void 0) { _locale = null; }\n        this._htmlParser = _htmlParser;\n        this._implicitTags = _implicitTags;\n        this._implicitAttrs = _implicitAttrs;\n        this._locale = _locale;\n        this._messages = [];\n    }\n    /**\n     * @param {?} html\n     * @param {?} url\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    MessageBundle.prototype.updateFromTemplate = /**\n     * @param {?} html\n     * @param {?} url\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    function (html, url, interpolationConfig) {\n        var /** @type {?} */ htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);\n        if (htmlParserResult.errors.length) {\n            return htmlParserResult.errors;\n        }\n        var /** @type {?} */ i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n        if (i18nParserResult.errors.length) {\n            return i18nParserResult.errors;\n        }\n        (_a = this._messages).push.apply(_a, i18nParserResult.messages);\n        return [];\n        var _a;\n    };\n    // Return the message in the internal format\n    // The public (serialized) format might be different, see the `write` method.\n    /**\n     * @return {?}\n     */\n    MessageBundle.prototype.getMessages = /**\n     * @return {?}\n     */\n    function () { return this._messages; };\n    /**\n     * @param {?} serializer\n     * @param {?=} filterSources\n     * @return {?}\n     */\n    MessageBundle.prototype.write = /**\n     * @param {?} serializer\n     * @param {?=} filterSources\n     * @return {?}\n     */\n    function (serializer, filterSources) {\n        var /** @type {?} */ messages = {};\n        var /** @type {?} */ mapperVisitor = new MapPlaceholderNames();\n        // Deduplicate messages based on their ID\n        this._messages.forEach(function (message) {\n            var /** @type {?} */ id = serializer.digest(message);\n            if (!messages.hasOwnProperty(id)) {\n                messages[id] = message;\n            }\n            else {\n                (_a = messages[id].sources).push.apply(_a, message.sources);\n            }\n            var _a;\n        });\n        // Transform placeholder names using the serializer mapping\n        var /** @type {?} */ msgList = Object.keys(messages).map(function (id) {\n            var /** @type {?} */ mapper = serializer.createNameMapper(messages[id]);\n            var /** @type {?} */ src = messages[id];\n            var /** @type {?} */ nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\n            var /** @type {?} */ transformedMessage = new i18n.Message(nodes, {}, {}, src.meaning, src.description, id);\n            transformedMessage.sources = src.sources;\n            if (filterSources) {\n                transformedMessage.sources.forEach(function (source) { return source.filePath = filterSources(source.filePath); });\n            }\n            return transformedMessage;\n        });\n        return serializer.write(msgList, this._locale);\n    };\n    return MessageBundle;\n}());\n/**\n * A container for message extracted from the templates.\n */\nexport { MessageBundle };\nfunction MessageBundle_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MessageBundle.prototype._messages;\n    /** @type {?} */\n    MessageBundle.prototype._htmlParser;\n    /** @type {?} */\n    MessageBundle.prototype._implicitTags;\n    /** @type {?} */\n    MessageBundle.prototype._implicitAttrs;\n    /** @type {?} */\n    MessageBundle.prototype._locale;\n}\nvar MapPlaceholderNames = /** @class */ (function (_super) {\n    tslib_1.__extends(MapPlaceholderNames, _super);\n    function MapPlaceholderNames() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} nodes\n     * @param {?} mapper\n     * @return {?}\n     */\n    MapPlaceholderNames.prototype.convert = /**\n     * @param {?} nodes\n     * @param {?} mapper\n     * @return {?}\n     */\n    function (nodes, mapper) {\n        var _this = this;\n        return mapper ? nodes.map(function (n) { return n.visit(_this, mapper); }) : nodes;\n    };\n    /**\n     * @param {?} ph\n     * @param {?} mapper\n     * @return {?}\n     */\n    MapPlaceholderNames.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?} mapper\n     * @return {?}\n     */\n    function (ph, mapper) {\n        var _this = this;\n        var /** @type {?} */ startName = /** @type {?} */ ((mapper.toPublicName(ph.startName)));\n        var /** @type {?} */ closeName = ph.closeName ? /** @type {?} */ ((mapper.toPublicName(ph.closeName))) : ph.closeName;\n        var /** @type {?} */ children = ph.children.map(function (n) { return n.visit(_this, mapper); });\n        return new i18n.TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);\n    };\n    /**\n     * @param {?} ph\n     * @param {?} mapper\n     * @return {?}\n     */\n    MapPlaceholderNames.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?} mapper\n     * @return {?}\n     */\n    function (ph, mapper) {\n        return new i18n.Placeholder(ph.value, /** @type {?} */ ((mapper.toPublicName(ph.name))), ph.sourceSpan);\n    };\n    /**\n     * @param {?} ph\n     * @param {?} mapper\n     * @return {?}\n     */\n    MapPlaceholderNames.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?} mapper\n     * @return {?}\n     */\n    function (ph, mapper) {\n        return new i18n.IcuPlaceholder(ph.value, /** @type {?} */ ((mapper.toPublicName(ph.name))), ph.sourceSpan);\n    };\n    return MapPlaceholderNames;\n}(i18n.CloneVisitor));\n//# sourceMappingURL=message_bundle.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ CORE = '@angular/core';\nvar Identifiers = /** @class */ (function () {\n    function Identifiers() {\n    }\n    /* Methods */\n    Identifiers.NEW_METHOD = 'factory';\n    Identifiers.TRANSFORM_METHOD = 'transform';\n    Identifiers.PATCH_DEPS = 'patchedDeps';\n    /* Instructions */\n    Identifiers.createElement = { name: 'ɵE', moduleName: CORE };\n    Identifiers.elementEnd = { name: 'ɵe', moduleName: CORE };\n    Identifiers.elementProperty = { name: 'ɵp', moduleName: CORE };\n    Identifiers.elementAttribute = { name: 'ɵa', moduleName: CORE };\n    Identifiers.elementClassNamed = { name: 'ɵkn', moduleName: CORE };\n    Identifiers.elementStyleNamed = { name: 'ɵsn', moduleName: CORE };\n    Identifiers.containerCreate = { name: 'ɵC', moduleName: CORE };\n    Identifiers.containerEnd = { name: 'ɵc', moduleName: CORE };\n    Identifiers.directiveCreate = { name: 'ɵD', moduleName: CORE };\n    Identifiers.text = { name: 'ɵT', moduleName: CORE };\n    Identifiers.directiveInput = { name: 'ɵi', moduleName: CORE };\n    Identifiers.textCreateBound = { name: 'ɵt', moduleName: CORE };\n    Identifiers.bind = { name: 'ɵb', moduleName: CORE };\n    Identifiers.interpolation1 = { name: 'ɵi1', moduleName: CORE };\n    Identifiers.interpolation2 = { name: 'ɵi2', moduleName: CORE };\n    Identifiers.interpolation3 = { name: 'ɵi3', moduleName: CORE };\n    Identifiers.interpolation4 = { name: 'ɵi4', moduleName: CORE };\n    Identifiers.interpolation5 = { name: 'ɵi5', moduleName: CORE };\n    Identifiers.interpolation6 = { name: 'ɵi6', moduleName: CORE };\n    Identifiers.interpolation7 = { name: 'ɵi7', moduleName: CORE };\n    Identifiers.interpolation8 = { name: 'ɵi8', moduleName: CORE };\n    Identifiers.interpolationV = { name: 'ɵiV', moduleName: CORE };\n    Identifiers.pureFunction0 = { name: 'ɵf0', moduleName: CORE };\n    Identifiers.pureFunction1 = { name: 'ɵf1', moduleName: CORE };\n    Identifiers.pureFunction2 = { name: 'ɵf2', moduleName: CORE };\n    Identifiers.pureFunction3 = { name: 'ɵf3', moduleName: CORE };\n    Identifiers.pureFunction4 = { name: 'ɵf4', moduleName: CORE };\n    Identifiers.pureFunction5 = { name: 'ɵf5', moduleName: CORE };\n    Identifiers.pureFunction6 = { name: 'ɵf6', moduleName: CORE };\n    Identifiers.pureFunction7 = { name: 'ɵf7', moduleName: CORE };\n    Identifiers.pureFunction8 = { name: 'ɵf8', moduleName: CORE };\n    Identifiers.pureFunctionV = { name: 'ɵfV', moduleName: CORE };\n    Identifiers.pipeBind1 = { name: 'ɵpb1', moduleName: CORE };\n    Identifiers.pipeBind2 = { name: 'ɵpb2', moduleName: CORE };\n    Identifiers.pipeBind3 = { name: 'ɵpb3', moduleName: CORE };\n    Identifiers.pipeBind4 = { name: 'ɵpb4', moduleName: CORE };\n    Identifiers.pipeBindV = { name: 'ɵpbV', moduleName: CORE };\n    Identifiers.load = { name: 'ɵld', moduleName: CORE };\n    Identifiers.pipe = { name: 'ɵPp', moduleName: CORE };\n    Identifiers.projection = { name: 'ɵP', moduleName: CORE };\n    Identifiers.projectionDef = { name: 'ɵpD', moduleName: CORE };\n    Identifiers.refreshComponent = { name: 'ɵr', moduleName: CORE };\n    Identifiers.directiveLifeCycle = { name: 'ɵl', moduleName: CORE };\n    Identifiers.injectElementRef = { name: 'ɵinjectElementRef', moduleName: CORE };\n    Identifiers.injectTemplateRef = { name: 'ɵinjectTemplateRef', moduleName: CORE };\n    Identifiers.injectViewContainerRef = { name: 'ɵinjectViewContainerRef', moduleName: CORE };\n    Identifiers.inject = { name: 'ɵinject', moduleName: CORE };\n    Identifiers.defineComponent = { name: 'ɵdefineComponent', moduleName: CORE };\n    Identifiers.defineDirective = {\n        name: 'ɵdefineDirective',\n        moduleName: CORE,\n    };\n    Identifiers.defineInjector = {\n        name: 'defineInjector',\n        moduleName: CORE,\n    };\n    Identifiers.definePipe = { name: 'ɵdefinePipe', moduleName: CORE };\n    Identifiers.query = { name: 'ɵQ', moduleName: CORE };\n    Identifiers.queryRefresh = { name: 'ɵqR', moduleName: CORE };\n    Identifiers.NgOnChangesFeature = { name: 'ɵNgOnChangesFeature', moduleName: CORE };\n    Identifiers.listener = { name: 'ɵL', moduleName: CORE };\n    return Identifiers;\n}());\nexport { Identifiers };\nfunction Identifiers_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Identifiers.NEW_METHOD;\n    /** @type {?} */\n    Identifiers.TRANSFORM_METHOD;\n    /** @type {?} */\n    Identifiers.PATCH_DEPS;\n    /** @type {?} */\n    Identifiers.createElement;\n    /** @type {?} */\n    Identifiers.elementEnd;\n    /** @type {?} */\n    Identifiers.elementProperty;\n    /** @type {?} */\n    Identifiers.elementAttribute;\n    /** @type {?} */\n    Identifiers.elementClassNamed;\n    /** @type {?} */\n    Identifiers.elementStyleNamed;\n    /** @type {?} */\n    Identifiers.containerCreate;\n    /** @type {?} */\n    Identifiers.containerEnd;\n    /** @type {?} */\n    Identifiers.directiveCreate;\n    /** @type {?} */\n    Identifiers.text;\n    /** @type {?} */\n    Identifiers.directiveInput;\n    /** @type {?} */\n    Identifiers.textCreateBound;\n    /** @type {?} */\n    Identifiers.bind;\n    /** @type {?} */\n    Identifiers.interpolation1;\n    /** @type {?} */\n    Identifiers.interpolation2;\n    /** @type {?} */\n    Identifiers.interpolation3;\n    /** @type {?} */\n    Identifiers.interpolation4;\n    /** @type {?} */\n    Identifiers.interpolation5;\n    /** @type {?} */\n    Identifiers.interpolation6;\n    /** @type {?} */\n    Identifiers.interpolation7;\n    /** @type {?} */\n    Identifiers.interpolation8;\n    /** @type {?} */\n    Identifiers.interpolationV;\n    /** @type {?} */\n    Identifiers.pureFunction0;\n    /** @type {?} */\n    Identifiers.pureFunction1;\n    /** @type {?} */\n    Identifiers.pureFunction2;\n    /** @type {?} */\n    Identifiers.pureFunction3;\n    /** @type {?} */\n    Identifiers.pureFunction4;\n    /** @type {?} */\n    Identifiers.pureFunction5;\n    /** @type {?} */\n    Identifiers.pureFunction6;\n    /** @type {?} */\n    Identifiers.pureFunction7;\n    /** @type {?} */\n    Identifiers.pureFunction8;\n    /** @type {?} */\n    Identifiers.pureFunctionV;\n    /** @type {?} */\n    Identifiers.pipeBind1;\n    /** @type {?} */\n    Identifiers.pipeBind2;\n    /** @type {?} */\n    Identifiers.pipeBind3;\n    /** @type {?} */\n    Identifiers.pipeBind4;\n    /** @type {?} */\n    Identifiers.pipeBindV;\n    /** @type {?} */\n    Identifiers.load;\n    /** @type {?} */\n    Identifiers.pipe;\n    /** @type {?} */\n    Identifiers.projection;\n    /** @type {?} */\n    Identifiers.projectionDef;\n    /** @type {?} */\n    Identifiers.refreshComponent;\n    /** @type {?} */\n    Identifiers.directiveLifeCycle;\n    /** @type {?} */\n    Identifiers.injectElementRef;\n    /** @type {?} */\n    Identifiers.injectTemplateRef;\n    /** @type {?} */\n    Identifiers.injectViewContainerRef;\n    /** @type {?} */\n    Identifiers.inject;\n    /** @type {?} */\n    Identifiers.defineComponent;\n    /** @type {?} */\n    Identifiers.defineDirective;\n    /** @type {?} */\n    Identifiers.defineInjector;\n    /** @type {?} */\n    Identifiers.definePipe;\n    /** @type {?} */\n    Identifiers.query;\n    /** @type {?} */\n    Identifiers.queryRefresh;\n    /** @type {?} */\n    Identifiers.NgOnChangesFeature;\n    /** @type {?} */\n    Identifiers.listener;\n}\n//# sourceMappingURL=r3_identifiers.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticSymbol } from '../aot/static_symbol';\nimport { identifierName } from '../compile_metadata';\nimport { mapLiteral } from '../output/map_util';\nimport * as o from '../output/output_ast';\nimport { Identifiers as R3 } from './r3_identifiers';\nvar /** @type {?} */ EMPTY_ARRAY = o.literalArr([]);\n/**\n * @param {?} meta\n * @param {?} ctx\n * @return {?}\n */\nfunction convertMetaToOutput(meta, ctx) {\n    if (Array.isArray(meta)) {\n        return o.literalArr(meta.map(function (entry) { return convertMetaToOutput(entry, ctx); }));\n    }\n    else if (meta instanceof StaticSymbol) {\n        return ctx.importExpr(meta);\n    }\n    else if (meta == null) {\n        return o.literal(meta);\n    }\n    else {\n        throw new Error(\"Internal error: Unsupported or unknown metadata: \" + meta);\n    }\n}\n/**\n * @param {?} ctx\n * @param {?} ngModule\n * @param {?} injectableCompiler\n * @return {?}\n */\nexport function compileNgModule(ctx, ngModule, injectableCompiler) {\n    var /** @type {?} */ className = /** @type {?} */ ((identifierName(ngModule.type)));\n    var /** @type {?} */ rawImports = ngModule.rawImports ? [ngModule.rawImports] : [];\n    var /** @type {?} */ rawExports = ngModule.rawExports ? [ngModule.rawExports] : [];\n    var /** @type {?} */ injectorDefArg = mapLiteral({\n        'factory': injectableCompiler.factoryFor({ type: ngModule.type, symbol: ngModule.type.reference }, ctx),\n        'providers': convertMetaToOutput(ngModule.rawProviders, ctx),\n        'imports': convertMetaToOutput(rawImports.concat(rawExports), ctx),\n    });\n    var /** @type {?} */ injectorDef = o.importExpr(R3.defineInjector).callFn([injectorDefArg]);\n    ctx.statements.push(new o.ClassStmt(className, null, /* fields */ [new o.ClassField('ngInjectorDef', /* type */ o.INFERRED_TYPE, /* modifiers */ [o.StmtModifier.Static], injectorDef)], /* getters */ [], /* constructorMethod */ new o.ClassMethod(null, [], []), /* methods */ []));\n}\n//# sourceMappingURL=r3_module_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as o from './output_ast';\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nexport function mapEntry(key, value) {\n    return { key: key, value: value, quoted: false };\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function mapLiteral(obj) {\n    return o.literalMap(Object.keys(obj).map(function (key) {\n        return ({\n            key: key,\n            quoted: false,\n            value: obj[key],\n        });\n    }));\n}\n//# sourceMappingURL=map_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { flatten, identifierName, sanitizeIdentifier, tokenReference } from '../compile_metadata';\nimport { BindingForm, BuiltinFunctionCall, convertActionBinding, convertPropertyBinding } from '../compiler_util/expression_converter';\nimport { AstMemoryEfficientTransformer, FunctionCall, ImplicitReceiver, LiteralPrimitive, PropertyRead } from '../expression_parser/ast';\nimport { Identifiers } from '../identifiers';\nimport { LifecycleHooks } from '../lifecycle_reflector';\nimport * as o from '../output/output_ast';\nimport { typeSourceSpan } from '../parse_util';\nimport { CssSelector } from '../selector';\nimport { PropertyBindingType, RecursiveTemplateAstVisitor, TextAst, templateVisitAll } from '../template_parser/template_ast';\nimport { error } from '../util';\nimport { Identifiers as R3 } from './r3_identifiers';\nimport { BUILD_OPTIMIZER_COLOCATE } from './r3_types';\n/**\n * Name of the context parameter passed into a template function\n */\nvar /** @type {?} */ CONTEXT_NAME = 'ctx';\n/**\n * Name of the RenderFlag passed into a template function\n */\nvar /** @type {?} */ RENDER_FLAGS = 'rf';\n/**\n * Name of the temporary to use during data binding\n */\nvar /** @type {?} */ TEMPORARY_NAME = '_t';\n/**\n * The prefix reference variables\n */\nvar /** @type {?} */ REFERENCE_PREFIX = '_r';\n/**\n * The name of the implicit context reference\n */\nvar /** @type {?} */ IMPLICIT_REFERENCE = '$implicit';\n/**\n * Name of the i18n attributes *\n */\nvar /** @type {?} */ I18N_ATTR = 'i18n';\nvar /** @type {?} */ I18N_ATTR_PREFIX = 'i18n-';\n/**\n * I18n separators for metadata *\n */\nvar /** @type {?} */ MEANING_SEPARATOR = '|';\nvar /** @type {?} */ ID_SEPARATOR = '@@';\n/**\n * @param {?} outputCtx\n * @param {?} directive\n * @param {?} reflector\n * @param {?} bindingParser\n * @param {?} mode\n * @return {?}\n */\nexport function compileDirective(outputCtx, directive, reflector, bindingParser, mode) {\n    var /** @type {?} */ definitionMapValues = [];\n    var /** @type {?} */ field = function (key, value) {\n        if (value) {\n            definitionMapValues.push({ key: key, value: value, quoted: false });\n        }\n    };\n    // e.g. 'type: MyDirective`\n    field('type', outputCtx.importExpr(directive.type.reference));\n    // e.g. `selectors: [['', 'someDir', '']]`\n    field('selectors', createDirectiveSelector(/** @type {?} */ ((directive.selector))));\n    // e.g. `factory: () => new MyApp(injectElementRef())`\n    field('factory', createFactory(directive.type, outputCtx, reflector, directive.queries));\n    // e.g. `hostBindings: (dirIndex, elIndex) => { ... }\n    field('hostBindings', createHostBindingsFunction(directive, outputCtx, bindingParser));\n    // e.g. `attributes: ['role', 'listbox']`\n    field('attributes', createHostAttributesArray(directive, outputCtx));\n    // e.g 'inputs: {a: 'a'}`\n    field('inputs', conditionallyCreateMapObjectLiteral(directive.inputs, outputCtx));\n    // e.g 'outputs: {a: 'a'}`\n    field('outputs', conditionallyCreateMapObjectLiteral(directive.outputs, outputCtx));\n    var /** @type {?} */ className = /** @type {?} */ ((identifierName(directive.type)));\n    className || error(\"Cannot resolver the name of \" + directive.type);\n    var /** @type {?} */ definitionField = outputCtx.constantPool.propertyNameOf(1 /* Directive */);\n    var /** @type {?} */ definitionFunction = o.importExpr(R3.defineDirective).callFn([o.literalMap(definitionMapValues)]);\n    if (mode === 0 /* PartialClass */) {\n        // Create the partial class to be merged with the actual class.\n        outputCtx.statements.push(new o.ClassStmt(className, null, /* fields */ [new o.ClassField(definitionField, /* type */ o.INFERRED_TYPE, /* modifiers */ [o.StmtModifier.Static], definitionFunction)], /* getters */ [], /* constructorMethod */ new o.ClassMethod(null, [], []), /* methods */ []));\n    }\n    else {\n        // Create back-patch definition.\n        var /** @type {?} */ classReference = outputCtx.importExpr(directive.type.reference);\n        // Create the back-patch statement\n        outputCtx.statements.push(new o.CommentStmt(BUILD_OPTIMIZER_COLOCATE));\n        outputCtx.statements.push(classReference.prop(definitionField).set(definitionFunction).toStmt());\n    }\n}\n/**\n * @param {?} outputCtx\n * @param {?} component\n * @param {?} pipes\n * @param {?} template\n * @param {?} reflector\n * @param {?} bindingParser\n * @param {?} mode\n * @return {?}\n */\nexport function compileComponent(outputCtx, component, pipes, template, reflector, bindingParser, mode) {\n    var /** @type {?} */ definitionMapValues = [];\n    // Set of pipe names for pipe exps that have already been stored in pipes[] (to avoid dupes)\n    var /** @type {?} */ pipeSet = new Set();\n    // Pipe expressions for pipes[] field in component def\n    var /** @type {?} */ pipeExps = [];\n    /**\n     * @param {?} summary\n     * @return {?}\n     */\n    function addPipeDependency(summary) {\n        addDependencyToComponent(outputCtx, summary, pipeSet, pipeExps);\n    }\n    var /** @type {?} */ directiveExps = [];\n    var /** @type {?} */ directiveMap = new Set();\n    /**\n     * This function gets called every time a directive dependency needs to be added to the template.\n     * Its job is to remove duplicates from the list. (Only have single dependency no matter how many\n     * times the dependency is used.)\n     * @param {?} ast\n     * @return {?}\n     */\n    function addDirectiveDependency(ast) {\n        var /** @type {?} */ importExpr = /** @type {?} */ (outputCtx.importExpr(ast.directive.type.reference));\n        var /** @type {?} */ uniqueKey = importExpr.value.moduleName + ':' + importExpr.value.name;\n        if (!directiveMap.has(uniqueKey)) {\n            directiveMap.add(uniqueKey);\n            directiveExps.push(importExpr);\n        }\n    }\n    var /** @type {?} */ field = function (key, value) {\n        if (value) {\n            definitionMapValues.push({ key: key, value: value, quoted: false });\n        }\n    };\n    // e.g. `type: MyApp`\n    field('type', outputCtx.importExpr(component.type.reference));\n    // e.g. `selectors: [['my-app']]`\n    field('selectors', createDirectiveSelector(/** @type {?} */ ((component.selector))));\n    var /** @type {?} */ selector = component.selector && CssSelector.parse(component.selector);\n    var /** @type {?} */ firstSelector = selector && selector[0];\n    // e.g. `attr: [\"class\", \".my.app\"]\n    // This is optional an only included if the first selector of a component specifies attributes.\n    if (firstSelector) {\n        var /** @type {?} */ selectorAttributes = firstSelector.getAttrs();\n        if (selectorAttributes.length) {\n            field('attrs', outputCtx.constantPool.getConstLiteral(o.literalArr(selectorAttributes.map(function (value) { return value != null ? o.literal(value) : o.literal(undefined); })), /* forceShared */ true));\n        }\n    }\n    // e.g. `factory: function MyApp_Factory() { return new MyApp(injectElementRef()); }`\n    field('factory', createFactory(component.type, outputCtx, reflector, component.queries));\n    // e.g `hostBindings: function MyApp_HostBindings { ... }\n    field('hostBindings', createHostBindingsFunction(component, outputCtx, bindingParser));\n    // e.g. `template: function MyComponent_Template(_ctx, _cm) {...}`\n    var /** @type {?} */ templateTypeName = component.type.reference.name;\n    var /** @type {?} */ templateName = templateTypeName ? templateTypeName + \"_Template\" : null;\n    var /** @type {?} */ pipeMap = new Map(pipes.map(function (pipe) { return [pipe.name, pipe]; }));\n    var /** @type {?} */ templateFunctionExpression = new TemplateDefinitionBuilder(outputCtx, outputCtx.constantPool, reflector, CONTEXT_NAME, BindingScope.ROOT_SCOPE, 0, /** @type {?} */ ((component.template)).ngContentSelectors, templateTypeName, templateName, pipeMap, component.viewQueries, addDirectiveDependency, addPipeDependency)\n        .buildTemplateFunction(template, []);\n    field('template', templateFunctionExpression);\n    if (directiveExps.length) {\n        field('directives', o.literalArr(directiveExps));\n    }\n    // e.g. `pipes: [MyPipe]`\n    if (pipeExps.length) {\n        field('pipes', o.literalArr(pipeExps));\n    }\n    // e.g `inputs: {a: 'a'}`\n    field('inputs', conditionallyCreateMapObjectLiteral(component.inputs, outputCtx));\n    // e.g 'outputs: {a: 'a'}`\n    field('outputs', conditionallyCreateMapObjectLiteral(component.outputs, outputCtx));\n    // e.g. `features: [NgOnChangesFeature(MyComponent)]`\n    var /** @type {?} */ features = [];\n    if (component.type.lifecycleHooks.some(function (lifecycle) { return lifecycle == LifecycleHooks.OnChanges; })) {\n        features.push(o.importExpr(R3.NgOnChangesFeature, null, null).callFn([outputCtx.importExpr(component.type.reference)]));\n    }\n    if (features.length) {\n        field('features', o.literalArr(features));\n    }\n    var /** @type {?} */ definitionField = outputCtx.constantPool.propertyNameOf(2 /* Component */);\n    var /** @type {?} */ definitionFunction = o.importExpr(R3.defineComponent).callFn([o.literalMap(definitionMapValues)]);\n    if (mode === 0 /* PartialClass */) {\n        var /** @type {?} */ className = /** @type {?} */ ((identifierName(component.type)));\n        className || error(\"Cannot resolver the name of \" + component.type);\n        // Create the partial class to be merged with the actual class.\n        outputCtx.statements.push(new o.ClassStmt(className, null, /* fields */ [new o.ClassField(definitionField, /* type */ o.INFERRED_TYPE, /* modifiers */ [o.StmtModifier.Static], definitionFunction)], /* getters */ [], /* constructorMethod */ new o.ClassMethod(null, [], []), /* methods */ []));\n    }\n    else {\n        var /** @type {?} */ classReference = outputCtx.importExpr(component.type.reference);\n        // Create the back-patch statement\n        outputCtx.statements.push(new o.CommentStmt(BUILD_OPTIMIZER_COLOCATE), classReference.prop(definitionField).set(definitionFunction).toStmt());\n    }\n}\n/**\n * @param {?} outputCtx\n * @param {?} summary\n * @param {?} set\n * @param {?} exps\n * @return {?}\n */\nfunction addDependencyToComponent(outputCtx, summary, set, exps) {\n    var /** @type {?} */ importExpr = /** @type {?} */ (outputCtx.importExpr(summary.type.reference));\n    var /** @type {?} */ uniqueKey = importExpr.value.moduleName + ':' + importExpr.value.name;\n    if (!set.has(uniqueKey)) {\n        set.add(uniqueKey);\n        exps.push(importExpr);\n    }\n}\n/**\n * @template T\n * @param {?} arg\n * @return {?}\n */\nfunction unknown(arg) {\n    throw new Error(\"Builder \" + this.constructor.name + \" is unable to handle \" + arg.constructor.name + \" yet\");\n}\n/**\n * @param {?} feature\n * @return {?}\n */\nfunction unsupported(feature) {\n    if (this) {\n        throw new Error(\"Builder \" + this.constructor.name + \" doesn't support \" + feature + \" yet\");\n    }\n    throw new Error(\"Feature \" + feature + \" is not supported yet\");\n}\nvar /** @type {?} */ BINDING_INSTRUCTION_MAP = (_a = {},\n    _a[PropertyBindingType.Property] = R3.elementProperty,\n    _a[PropertyBindingType.Attribute] = R3.elementAttribute,\n    _a[PropertyBindingType.Class] = R3.elementClassNamed,\n    _a[PropertyBindingType.Style] = R3.elementStyleNamed,\n    _a);\n/**\n * @param {?} args\n * @return {?}\n */\nfunction interpolate(args) {\n    args = args.slice(1); // Ignore the length prefix added for render2\n    switch (args.length) {\n        case 3:\n            return o.importExpr(R3.interpolation1).callFn(args);\n        case 5:\n            return o.importExpr(R3.interpolation2).callFn(args);\n        case 7:\n            return o.importExpr(R3.interpolation3).callFn(args);\n        case 9:\n            return o.importExpr(R3.interpolation4).callFn(args);\n        case 11:\n            return o.importExpr(R3.interpolation5).callFn(args);\n        case 13:\n            return o.importExpr(R3.interpolation6).callFn(args);\n        case 15:\n            return o.importExpr(R3.interpolation7).callFn(args);\n        case 17:\n            return o.importExpr(R3.interpolation8).callFn(args);\n    }\n    (args.length >= 19 && args.length % 2 == 1) ||\n        error(\"Invalid interpolation argument length \" + args.length);\n    return o.importExpr(R3.interpolationV).callFn([o.literalArr(args)]);\n}\n/**\n * @param {?} args\n * @return {?}\n */\nfunction pipeBinding(args) {\n    switch (args.length) {\n        case 0:\n            // The first parameter to pipeBind is always the value to be transformed followed\n            // by arg.length arguments so the total number of arguments to pipeBind are\n            // arg.length + 1.\n            return R3.pipeBind1;\n        case 1:\n            return R3.pipeBind2;\n        case 2:\n            return R3.pipeBind3;\n        default:\n            return R3.pipeBindV;\n    }\n}\nvar /** @type {?} */ pureFunctionIdentifiers = [\n    R3.pureFunction0, R3.pureFunction1, R3.pureFunction2, R3.pureFunction3, R3.pureFunction4,\n    R3.pureFunction5, R3.pureFunction6, R3.pureFunction7, R3.pureFunction8\n];\n/**\n * @param {?} outputContext\n * @param {?} literal\n * @return {?}\n */\nfunction getLiteralFactory(outputContext, literal) {\n    var _a = outputContext.constantPool.getLiteralFactory(literal), literalFactory = _a.literalFactory, literalFactoryArguments = _a.literalFactoryArguments;\n    literalFactoryArguments.length > 0 || error(\"Expected arguments to a literal factory function\");\n    var /** @type {?} */ pureFunctionIdent = pureFunctionIdentifiers[literalFactoryArguments.length] || R3.pureFunctionV;\n    // Literal factories are pure functions that only need to be re-invoked when the parameters\n    // change.\n    return o.importExpr(pureFunctionIdent).callFn([literalFactory].concat(literalFactoryArguments));\n}\n/**\n * @return {?}\n */\nfunction noop() { }\nvar BindingScope = /** @class */ (function () {\n    function BindingScope(parent, declareLocalVarCallback) {\n        if (parent === void 0) { parent = null; }\n        if (declareLocalVarCallback === void 0) { declareLocalVarCallback = noop; }\n        this.parent = parent;\n        this.declareLocalVarCallback = declareLocalVarCallback;\n        /**\n         * Keeps a map from local variables to their expressions.\n         *\n         * This is used when one refers to variable such as: 'let abc = a.b.c`.\n         * - key to the map is the string literal `\"abc\"`.\n         * - value `lhs` is the left hand side which is an AST representing `abc`.\n         * - value `rhs` is the right hand side which is an AST representing `a.b.c`.\n         * - value `declared` is true if the `declareLocalVarCallback` has been called for this scope\n         * already.\n         */\n        this.map = new Map();\n        this.referenceNameIndex = 0;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    BindingScope.prototype.get = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ current = this;\n        while (current) {\n            var /** @type {?} */ value = current.map.get(name);\n            if (value != null) {\n                if (current !== this) {\n                    // make a local copy and reset the `declared` state.\n                    value = { lhs: value.lhs, rhs: value.rhs, declared: false };\n                    // Cache the value locally.\n                    this.map.set(name, value);\n                }\n                if (value.rhs && !value.declared) {\n                    // if it is first time we are referencing the variable in the scope\n                    // than invoke the callback to insert variable declaration.\n                    this.declareLocalVarCallback(value.lhs, value.rhs);\n                    value.declared = true;\n                }\n                return value.lhs;\n            }\n            current = current.parent;\n        }\n        return null;\n    };\n    /**\n     * Create a local variable for later reference.\n     *\n     * @param name Name of the variable.\n     * @param lhs AST representing the left hand side of the `let lhs = rhs;`.\n     * @param rhs AST representing the right hand side of the `let lhs = rhs;`. The `rhs` can be\n     * `undefined` for variable that are ambient such as `$event` and which don't have `rhs`\n     * declaration.\n     */\n    /**\n     * Create a local variable for later reference.\n     *\n     * @param {?} name Name of the variable.\n     * @param {?} lhs AST representing the left hand side of the `let lhs = rhs;`.\n     * @param {?=} rhs AST representing the right hand side of the `let lhs = rhs;`. The `rhs` can be\n     * `undefined` for variable that are ambient such as `$event` and which don't have `rhs`\n     * declaration.\n     * @return {?}\n     */\n    BindingScope.prototype.set = /**\n     * Create a local variable for later reference.\n     *\n     * @param {?} name Name of the variable.\n     * @param {?} lhs AST representing the left hand side of the `let lhs = rhs;`.\n     * @param {?=} rhs AST representing the right hand side of the `let lhs = rhs;`. The `rhs` can be\n     * `undefined` for variable that are ambient such as `$event` and which don't have `rhs`\n     * declaration.\n     * @return {?}\n     */\n    function (name, lhs, rhs) {\n        !this.map.has(name) ||\n            error(\"The name \" + name + \" is already defined in scope to be \" + this.map.get(name));\n        this.map.set(name, { lhs: lhs, rhs: rhs, declared: false });\n        return this;\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    BindingScope.prototype.getLocal = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.get(name); };\n    /**\n     * @param {?} declareCallback\n     * @return {?}\n     */\n    BindingScope.prototype.nestedScope = /**\n     * @param {?} declareCallback\n     * @return {?}\n     */\n    function (declareCallback) {\n        return new BindingScope(this, declareCallback);\n    };\n    /**\n     * @return {?}\n     */\n    BindingScope.prototype.freshReferenceName = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ current = this;\n        // Find the top scope as it maintains the global reference count\n        while (current.parent)\n            current = current.parent;\n        var /** @type {?} */ ref = \"\" + REFERENCE_PREFIX + current.referenceNameIndex++;\n        return ref;\n    };\n    BindingScope.ROOT_SCOPE = new BindingScope().set('$event', o.variable('$event'));\n    return BindingScope;\n}());\nfunction BindingScope_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BindingScope.ROOT_SCOPE;\n    /**\n     * Keeps a map from local variables to their expressions.\n     *\n     * This is used when one refers to variable such as: 'let abc = a.b.c`.\n     * - key to the map is the string literal `\"abc\"`.\n     * - value `lhs` is the left hand side which is an AST representing `abc`.\n     * - value `rhs` is the right hand side which is an AST representing `a.b.c`.\n     * - value `declared` is true if the `declareLocalVarCallback` has been called for this scope\n     * already.\n     * @type {?}\n     */\n    BindingScope.prototype.map;\n    /** @type {?} */\n    BindingScope.prototype.referenceNameIndex;\n    /** @type {?} */\n    BindingScope.prototype.parent;\n    /** @type {?} */\n    BindingScope.prototype.declareLocalVarCallback;\n}\n/** @enum {number} */\nvar RenderFlags = {\n    /* Whether to run the creation block (e.g. create elements and directives) */\n    Create: 1,\n    /* Whether to run the update block (e.g. refresh bindings) */\n    Update: 2,\n};\nexport { RenderFlags };\nvar TemplateDefinitionBuilder = /** @class */ (function () {\n    function TemplateDefinitionBuilder(outputCtx, constantPool, reflector, contextParameter, parentBindingScope, level, ngContentSelectors, contextName, templateName, pipes, viewQueries, addDirectiveDependency, addPipeDependency) {\n        if (level === void 0) { level = 0; }\n        var _this = this;\n        this.outputCtx = outputCtx;\n        this.constantPool = constantPool;\n        this.reflector = reflector;\n        this.contextParameter = contextParameter;\n        this.level = level;\n        this.ngContentSelectors = ngContentSelectors;\n        this.contextName = contextName;\n        this.templateName = templateName;\n        this.pipes = pipes;\n        this.viewQueries = viewQueries;\n        this.addDirectiveDependency = addDirectiveDependency;\n        this.addPipeDependency = addPipeDependency;\n        this._dataIndex = 0;\n        this._bindingContext = 0;\n        this._temporaryAllocated = false;\n        this._prefix = [];\n        this._creationMode = [];\n        this._variableMode = [];\n        this._bindingMode = [];\n        this._postfix = [];\n        this._projectionDefinitionIndex = 0;\n        this.unsupported = unsupported;\n        this.invalid = invalid;\n        this._inI18nSection = false;\n        this._i18nSectionIndex = -1;\n        this._phToNodeIdxes = [{}];\n        // These should be handled in the template or element directly.\n        this.visitReference = invalid;\n        this.visitVariable = invalid;\n        this.visitEvent = invalid;\n        this.visitElementProperty = invalid;\n        this.visitAttr = invalid;\n        // These should be handled in the template or element directly\n        this.visitDirective = invalid;\n        this.visitDirectiveProperty = invalid;\n        this.bindingScope =\n            parentBindingScope.nestedScope(function (lhsVar, expression) {\n                _this._bindingMode.push(lhsVar.set(expression).toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]));\n            });\n        this._valueConverter = new ValueConverter(outputCtx, function () { return _this.allocateDataSlot(); }, function (name, localName, slot, value) {\n            _this.bindingScope.set(localName, value);\n            var /** @type {?} */ pipe = /** @type {?} */ ((pipes.get(name)));\n            pipe || error(\"Could not find pipe \" + name);\n            _this.addPipeDependency(pipe);\n            _this._creationMode.push(o.importExpr(R3.pipe).callFn([o.literal(slot), o.literal(name)]).toStmt());\n        });\n    }\n    /**\n     * @param {?} asts\n     * @param {?} variables\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.buildTemplateFunction = /**\n     * @param {?} asts\n     * @param {?} variables\n     * @return {?}\n     */\n    function (asts, variables) {\n        // Create variable bindings\n        for (var _i = 0, variables_1 = variables; _i < variables_1.length; _i++) {\n            var variable = variables_1[_i];\n            var /** @type {?} */ variableName = variable.name;\n            var /** @type {?} */ expression = o.variable(this.contextParameter).prop(variable.value || IMPLICIT_REFERENCE);\n            var /** @type {?} */ scopedName = this.bindingScope.freshReferenceName();\n            // Add the reference to the local scope.\n            this.bindingScope.set(variableName, o.variable(variableName + scopedName), expression);\n        }\n        // Collect content projections\n        if (this.ngContentSelectors && this.ngContentSelectors.length > 0) {\n            var /** @type {?} */ contentProjections = getContentProjection(asts, this.ngContentSelectors);\n            this._contentProjections = contentProjections;\n            if (contentProjections.size > 0) {\n                var /** @type {?} */ infos_1 = [];\n                Array.from(contentProjections.values()).forEach(function (info) {\n                    if (info.selector) {\n                        infos_1[info.index - 1] = info.selector;\n                    }\n                });\n                var /** @type {?} */ projectionIndex = this._projectionDefinitionIndex = this.allocateDataSlot();\n                var /** @type {?} */ parameters = [o.literal(projectionIndex)];\n                !infos_1.some(function (value) { return !value; }) || error(\"content project information skipped an index\");\n                if (infos_1.length > 1) {\n                    parameters.push(this.outputCtx.constantPool.getConstLiteral(asLiteral(infos_1), /* forceShared */ /* forceShared */ true));\n                }\n                this.instruction.apply(this, [this._creationMode, null, R3.projectionDef].concat(parameters));\n            }\n        }\n        // Define and update any view queries\n        for (var _a = 0, _b = this.viewQueries; _a < _b.length; _a++) {\n            var query = _b[_a];\n            // e.g. r3.Q(0, SomeDirective, true);\n            var /** @type {?} */ querySlot = this.allocateDataSlot();\n            var /** @type {?} */ predicate = getQueryPredicate(query, this.outputCtx);\n            var /** @type {?} */ args = [\n                /* memoryIndex */ o.literal(querySlot, o.INFERRED_TYPE),\n                predicate,\n                /* descend */ o.literal(query.descendants, o.INFERRED_TYPE)\n            ];\n            if (query.read) {\n                args.push(this.outputCtx.importExpr(/** @type {?} */ ((query.read.identifier)).reference));\n            }\n            this.instruction.apply(this, [this._creationMode, null, R3.query].concat(args));\n            // (r3.qR(tmp = r3.ɵld(0)) && (ctx.someDir = tmp));\n            var /** @type {?} */ temporary = this.temp();\n            var /** @type {?} */ getQueryList = o.importExpr(R3.load).callFn([o.literal(querySlot)]);\n            var /** @type {?} */ refresh = o.importExpr(R3.queryRefresh).callFn([temporary.set(getQueryList)]);\n            var /** @type {?} */ updateDirective = o.variable(CONTEXT_NAME)\n                .prop(query.propertyName)\n                .set(query.first ? temporary.prop('first') : temporary);\n            this._bindingMode.push(refresh.and(updateDirective).toStmt());\n        }\n        templateVisitAll(this, asts);\n        var /** @type {?} */ creationMode = this._creationMode.length > 0 ?\n            [o.ifStmt(o.variable(RENDER_FLAGS).bitwiseAnd(o.literal(1 /* Create */), null, false), this._creationMode)] :\n            [];\n        var /** @type {?} */ updateMode = this._bindingMode.length > 0 ?\n            [o.ifStmt(o.variable(RENDER_FLAGS).bitwiseAnd(o.literal(2 /* Update */), null, false), this._bindingMode)] :\n            [];\n        // Generate maps of placeholder name to node indexes\n        // TODO(vicb): This is a WIP, not fully supported yet\n        for (var _c = 0, _d = this._phToNodeIdxes; _c < _d.length; _c++) {\n            var phToNodeIdx = _d[_c];\n            if (Object.keys(phToNodeIdx).length > 0) {\n                var /** @type {?} */ scopedName = this.bindingScope.freshReferenceName();\n                var /** @type {?} */ phMap = o.variable(scopedName)\n                    .set(mapToExpression(phToNodeIdx, true))\n                    .toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]);\n                this._prefix.push(phMap);\n            }\n        }\n        return o.fn([new o.FnParam(RENDER_FLAGS, o.NUMBER_TYPE), new o.FnParam(this.contextParameter, null)], this._prefix.concat(creationMode, this._variableMode, updateMode, this._postfix), o.INFERRED_TYPE, null, this.templateName);\n    };\n    // LocalResolver\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.getLocal = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.bindingScope.get(name); };\n    // TemplateAstVisitor\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.visitNgContent = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var /** @type {?} */ info = /** @type {?} */ ((this._contentProjections.get(ast)));\n        info || error(\"Expected \" + ast.sourceSpan + \" to be included in content projection collection\");\n        var /** @type {?} */ slot = this.allocateDataSlot();\n        var /** @type {?} */ parameters = [o.literal(slot), o.literal(this._projectionDefinitionIndex)];\n        if (info.index !== 0) {\n            parameters.push(o.literal(info.index));\n        }\n        this.instruction.apply(this, [this._creationMode, ast.sourceSpan, R3.projection].concat(parameters));\n    };\n    // TemplateAstVisitor\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.visitElement = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        var _this = this;\n        var /** @type {?} */ elementIndex = this.allocateDataSlot();\n        var /** @type {?} */ referenceDataSlots = new Map();\n        var /** @type {?} */ wasInI18nSection = this._inI18nSection;\n        var /** @type {?} */ outputAttrs = {};\n        var /** @type {?} */ attrI18nMetas = {};\n        var /** @type {?} */ i18nMeta = '';\n        // Elements inside i18n sections are replaced with placeholders\n        // TODO(vicb): nested elements are a WIP in this phase\n        if (this._inI18nSection) {\n            var /** @type {?} */ phName = element.name.toLowerCase();\n            if (!this._phToNodeIdxes[this._i18nSectionIndex][phName]) {\n                this._phToNodeIdxes[this._i18nSectionIndex][phName] = [];\n            }\n            this._phToNodeIdxes[this._i18nSectionIndex][phName].push(elementIndex);\n        }\n        // Handle i18n attributes\n        for (var _i = 0, _a = element.attrs; _i < _a.length; _i++) {\n            var attr = _a[_i];\n            var /** @type {?} */ name_1 = attr.name;\n            var /** @type {?} */ value = attr.value;\n            if (name_1 === I18N_ATTR) {\n                if (this._inI18nSection) {\n                    throw new Error(\"Could not mark an element as translatable inside of a translatable section\");\n                }\n                this._inI18nSection = true;\n                this._i18nSectionIndex++;\n                this._phToNodeIdxes[this._i18nSectionIndex] = {};\n                i18nMeta = value;\n            }\n            else if (name_1.startsWith(I18N_ATTR_PREFIX)) {\n                attrI18nMetas[name_1.slice(I18N_ATTR_PREFIX.length)] = value;\n            }\n            else {\n                outputAttrs[name_1] = value;\n            }\n        }\n        // Element creation mode\n        var /** @type {?} */ component = findComponent(element.directives);\n        var /** @type {?} */ nullNode = o.literal(null, o.INFERRED_TYPE);\n        var /** @type {?} */ parameters = [o.literal(elementIndex)];\n        if (component) {\n            this.addDirectiveDependency(component);\n        }\n        element.directives.forEach(this.addDirectiveDependency);\n        parameters.push(o.literal(element.name));\n        // Add the attributes\n        var /** @type {?} */ i18nMessages = [];\n        var /** @type {?} */ attributes = [];\n        var /** @type {?} */ hasI18nAttr = false;\n        Object.getOwnPropertyNames(outputAttrs).forEach(function (name) {\n            var /** @type {?} */ value = outputAttrs[name];\n            attributes.push(o.literal(name));\n            if (attrI18nMetas.hasOwnProperty(name)) {\n                hasI18nAttr = true;\n                var /** @type {?} */ meta = parseI18nMeta(attrI18nMetas[name]);\n                var /** @type {?} */ variable = _this.constantPool.getTranslation(value, meta);\n                attributes.push(variable);\n            }\n            else {\n                attributes.push(o.literal(value));\n            }\n        });\n        var /** @type {?} */ attrArg = nullNode;\n        if (attributes.length > 0) {\n            attrArg = hasI18nAttr ? getLiteralFactory(this.outputCtx, o.literalArr(attributes)) :\n                this.constantPool.getConstLiteral(o.literalArr(attributes), true);\n        }\n        parameters.push(attrArg);\n        if (element.references && element.references.length > 0) {\n            var /** @type {?} */ references = flatten(element.references.map(function (reference) {\n                var /** @type {?} */ slot = _this.allocateDataSlot();\n                referenceDataSlots.set(reference.name, slot);\n                // Generate the update temporary.\n                var /** @type {?} */ variableName = _this.bindingScope.freshReferenceName();\n                _this._variableMode.push(o.variable(variableName, o.INFERRED_TYPE)\n                    .set(o.importExpr(R3.load).callFn([o.literal(slot)]))\n                    .toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]));\n                _this.bindingScope.set(reference.name, o.variable(variableName));\n                return [reference.name, reference.originalValue];\n            })).map(function (value) { return o.literal(value); });\n            parameters.push(this.constantPool.getConstLiteral(o.literalArr(references), /* forceShared */ /* forceShared */ true));\n        }\n        else {\n            parameters.push(nullNode);\n        }\n        // Generate the instruction create element instruction\n        if (i18nMessages.length > 0) {\n            (_b = this._creationMode).push.apply(_b, i18nMessages);\n        }\n        this.instruction.apply(this, [this._creationMode, element.sourceSpan, R3.createElement].concat(trimTrailingNulls(parameters)));\n        var /** @type {?} */ implicit = o.variable(CONTEXT_NAME);\n        // Generate Listeners (outputs)\n        element.outputs.forEach(function (outputAst) {\n            var /** @type {?} */ functionName = _this.templateName + \"_\" + element.name + \"_\" + outputAst.name + \"_listener\";\n            var /** @type {?} */ localVars = [];\n            var /** @type {?} */ bindingScope = _this.bindingScope.nestedScope(function (lhsVar, rhsExpression) {\n                localVars.push(lhsVar.set(rhsExpression).toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]));\n            });\n            var /** @type {?} */ bindingExpr = convertActionBinding(bindingScope, o.variable(CONTEXT_NAME), outputAst.handler, 'b', function () { return error('Unexpected interpolation'); });\n            var /** @type {?} */ handler = o.fn([new o.FnParam('$event', o.DYNAMIC_TYPE)], localVars.concat(bindingExpr.render3Stmts), o.INFERRED_TYPE, null, functionName);\n            _this.instruction(_this._creationMode, outputAst.sourceSpan, R3.listener, o.literal(outputAst.name), handler);\n        });\n        // Generate element input bindings\n        for (var _c = 0, _d = element.inputs; _c < _d.length; _c++) {\n            var input = _d[_c];\n            if (input.isAnimation) {\n                this.unsupported('animations');\n            }\n            var /** @type {?} */ convertedBinding = this.convertPropertyBinding(implicit, input.value);\n            var /** @type {?} */ instruction = BINDING_INSTRUCTION_MAP[input.type];\n            if (instruction) {\n                // TODO(chuckj): runtime: security context?\n                this.instruction(this._bindingMode, input.sourceSpan, instruction, o.literal(elementIndex), o.literal(input.name), convertedBinding);\n            }\n            else {\n                this.unsupported(\"binding \" + PropertyBindingType[input.type]);\n            }\n        }\n        // Generate directives input bindings\n        this._visitDirectives(element.directives, implicit, elementIndex);\n        // Traverse element child nodes\n        if (this._inI18nSection && element.children.length == 1 &&\n            element.children[0] instanceof TextAst) {\n            var /** @type {?} */ text = /** @type {?} */ (element.children[0]);\n            this.visitSingleI18nTextChild(text, i18nMeta);\n        }\n        else {\n            templateVisitAll(this, element.children);\n        }\n        // Finish element construction mode.\n        this.instruction(this._creationMode, element.endSourceSpan || element.sourceSpan, R3.elementEnd);\n        // Restore the state before exiting this node\n        this._inI18nSection = wasInI18nSection;\n        var _b;\n    };\n    /**\n     * @param {?} directives\n     * @param {?} implicit\n     * @param {?} nodeIndex\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype._visitDirectives = /**\n     * @param {?} directives\n     * @param {?} implicit\n     * @param {?} nodeIndex\n     * @return {?}\n     */\n    function (directives, implicit, nodeIndex) {\n        for (var _i = 0, directives_1 = directives; _i < directives_1.length; _i++) {\n            var directive = directives_1[_i];\n            // Creation mode\n            // e.g. D(0, TodoComponentDef.n(), TodoComponentDef);\n            var /** @type {?} */ directiveType = directive.directive.type.reference;\n            var /** @type {?} */ kind = directive.directive.isComponent ? 2 /* Component */ : 1 /* Directive */;\n            // Note: *do not cache* calls to this.directiveOf() as the constant pool needs to know if the\n            // node is referenced multiple times to know that it must generate the reference into a\n            // temporary.\n            // Bindings\n            for (var _a = 0, _b = directive.inputs; _a < _b.length; _a++) {\n                var input = _b[_a];\n                var /** @type {?} */ convertedBinding = this.convertPropertyBinding(implicit, input.value);\n                this.instruction(this._bindingMode, directive.sourceSpan, R3.elementProperty, o.literal(nodeIndex), o.literal(input.templateName), o.importExpr(R3.bind).callFn([convertedBinding]));\n            }\n        }\n    };\n    // TemplateAstVisitor\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.visitEmbeddedTemplate = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var _this = this;\n        var /** @type {?} */ templateIndex = this.allocateDataSlot();\n        var /** @type {?} */ templateRef = this.reflector.resolveExternalReference(Identifiers.TemplateRef);\n        var /** @type {?} */ templateDirective = ast.directives.find(function (directive) {\n            return directive.directive.type.diDeps.some(function (dependency) {\n                return dependency.token != null && (tokenReference(dependency.token) == templateRef);\n            });\n        });\n        var /** @type {?} */ contextName = this.contextName && templateDirective && templateDirective.directive.type.reference.name ?\n            this.contextName + \"_\" + templateDirective.directive.type.reference.name :\n            null;\n        var /** @type {?} */ templateName = contextName ? contextName + \"_Template_\" + templateIndex : \"Template_\" + templateIndex;\n        var /** @type {?} */ templateContext = \"ctx\" + this.level;\n        var /** @type {?} */ parameters = [o.variable(templateName), o.literal(null, o.INFERRED_TYPE)];\n        var /** @type {?} */ attributeNames = [];\n        ast.directives.forEach(function (directiveAst) {\n            _this.addDirectiveDependency(directiveAst);\n            CssSelector.parse(/** @type {?} */ ((directiveAst.directive.selector))).forEach(function (selector) {\n                selector.attrs.forEach(function (value) {\n                    // Convert '' (falsy) strings into `null`. This is needed because we want\n                    // to communicate to runtime that these attributes are present for\n                    // selector matching, but should not actually be added to the DOM.\n                    // attributeNames.push(o.literal(value ? value : null));\n                    // TODO(misko): make the above comment true, for now just write to DOM because\n                    // the runtime selectors have not been updated.\n                    attributeNames.push(o.literal(value));\n                });\n            });\n        });\n        if (attributeNames.length) {\n            parameters.push(this.constantPool.getConstLiteral(o.literalArr(attributeNames), /* forcedShared */ /* forcedShared */ true));\n        }\n        // e.g. C(1, C1Template)\n        this.instruction.apply(this, [this._creationMode, ast.sourceSpan, R3.containerCreate, o.literal(templateIndex)].concat(trimTrailingNulls(parameters)));\n        // Generate directives\n        this._visitDirectives(ast.directives, o.variable(CONTEXT_NAME), templateIndex);\n        // Create the template function\n        var /** @type {?} */ templateVisitor = new TemplateDefinitionBuilder(this.outputCtx, this.constantPool, this.reflector, templateContext, this.bindingScope, this.level + 1, this.ngContentSelectors, contextName, templateName, this.pipes, [], this.addDirectiveDependency, this.addPipeDependency);\n        var /** @type {?} */ templateFunctionExpr = templateVisitor.buildTemplateFunction(ast.children, ast.variables);\n        this._postfix.push(templateFunctionExpr.toDeclStmt(templateName, null));\n    };\n    // TemplateAstVisitor\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.visitBoundText = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var /** @type {?} */ nodeIndex = this.allocateDataSlot();\n        // Creation mode\n        this.instruction(this._creationMode, ast.sourceSpan, R3.text, o.literal(nodeIndex));\n        this.instruction(this._bindingMode, ast.sourceSpan, R3.textCreateBound, o.literal(nodeIndex), this.convertPropertyBinding(o.variable(CONTEXT_NAME), ast.value));\n    };\n    // TemplateAstVisitor\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.visitText = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        // Text is defined in creation mode only.\n        this.instruction(this._creationMode, ast.sourceSpan, R3.text, o.literal(this.allocateDataSlot()), o.literal(ast.value));\n    };\n    // When the content of the element is a single text node the translation can be inlined:\n    //\n    // `<p i18n=\"desc|mean\">some content</p>`\n    // compiles to\n    // ```\n    // /**\n    // * @desc desc\n    // * @meaning mean\n    // */\n    // const MSG_XYZ = goog.getMsg('some content');\n    // i0.ɵT(1, MSG_XYZ);\n    // ```\n    /**\n     * @param {?} text\n     * @param {?} i18nMeta\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.visitSingleI18nTextChild = /**\n     * @param {?} text\n     * @param {?} i18nMeta\n     * @return {?}\n     */\n    function (text, i18nMeta) {\n        var /** @type {?} */ meta = parseI18nMeta(i18nMeta);\n        var /** @type {?} */ variable = this.constantPool.getTranslation(text.value, meta);\n        this.instruction(this._creationMode, text.sourceSpan, R3.text, o.literal(this.allocateDataSlot()), variable);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.allocateDataSlot = /**\n     * @return {?}\n     */\n    function () { return this._dataIndex++; };\n    /**\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.bindingContext = /**\n     * @return {?}\n     */\n    function () { return \"\" + this._bindingContext++; };\n    /**\n     * @param {?} statements\n     * @param {?} span\n     * @param {?} reference\n     * @param {...?} params\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.instruction = /**\n     * @param {?} statements\n     * @param {?} span\n     * @param {?} reference\n     * @param {...?} params\n     * @return {?}\n     */\n    function (statements, span, reference) {\n        var params = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            params[_i - 3] = arguments[_i];\n        }\n        statements.push(o.importExpr(reference, null, span).callFn(params, span).toStmt());\n    };\n    /**\n     * @param {?} type\n     * @param {?} kind\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.definitionOf = /**\n     * @param {?} type\n     * @param {?} kind\n     * @return {?}\n     */\n    function (type, kind) {\n        return this.constantPool.getDefinition(type, kind, this.outputCtx);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.temp = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._temporaryAllocated) {\n            this._prefix.push(new o.DeclareVarStmt(TEMPORARY_NAME, undefined, o.DYNAMIC_TYPE));\n            this._temporaryAllocated = true;\n        }\n        return o.variable(TEMPORARY_NAME);\n    };\n    /**\n     * @param {?} implicit\n     * @param {?} value\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.convertPropertyBinding = /**\n     * @param {?} implicit\n     * @param {?} value\n     * @return {?}\n     */\n    function (implicit, value) {\n        var /** @type {?} */ pipesConvertedValue = value.visit(this._valueConverter);\n        var /** @type {?} */ convertedPropertyBinding = convertPropertyBinding(this, implicit, pipesConvertedValue, this.bindingContext(), BindingForm.TrySimple, interpolate);\n        (_a = this._bindingMode).push.apply(_a, convertedPropertyBinding.stmts);\n        return convertedPropertyBinding.currValExpr;\n        var _a;\n    };\n    return TemplateDefinitionBuilder;\n}());\nfunction TemplateDefinitionBuilder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._dataIndex;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._bindingContext;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._temporaryAllocated;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._prefix;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._creationMode;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._variableMode;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._bindingMode;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._postfix;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._contentProjections;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._projectionDefinitionIndex;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._valueConverter;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.unsupported;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.invalid;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.bindingScope;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._inI18nSection;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._i18nSectionIndex;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._phToNodeIdxes;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.visitReference;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.visitVariable;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.visitEvent;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.visitElementProperty;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.visitAttr;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.visitDirective;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.visitDirectiveProperty;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.outputCtx;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.constantPool;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.reflector;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.contextParameter;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.level;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.ngContentSelectors;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.contextName;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.templateName;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.pipes;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.viewQueries;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.addDirectiveDependency;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.addPipeDependency;\n}\n/**\n * @param {?} query\n * @param {?} outputCtx\n * @return {?}\n */\nfunction getQueryPredicate(query, outputCtx) {\n    var /** @type {?} */ predicate;\n    if (query.selectors.length > 1 || (query.selectors.length == 1 && query.selectors[0].value)) {\n        var /** @type {?} */ selectors = query.selectors.map(function (value) { return (value.value); });\n        selectors.some(function (value) { return !value; }) && error('Found a type among the string selectors expected');\n        predicate = outputCtx.constantPool.getConstLiteral(o.literalArr(selectors.map(function (value) { return o.literal(value); })));\n    }\n    else if (query.selectors.length == 1) {\n        var /** @type {?} */ first = query.selectors[0];\n        if (first.identifier) {\n            predicate = outputCtx.importExpr(first.identifier.reference);\n        }\n        else {\n            error('Unexpected query form');\n            predicate = o.literal(null);\n        }\n    }\n    else {\n        error('Unexpected query form');\n        predicate = o.literal(null);\n    }\n    return predicate;\n}\n/**\n * @param {?} type\n * @param {?} outputCtx\n * @param {?} reflector\n * @param {?} queries\n * @return {?}\n */\nexport function createFactory(type, outputCtx, reflector, queries) {\n    var /** @type {?} */ args = [];\n    var /** @type {?} */ elementRef = reflector.resolveExternalReference(Identifiers.ElementRef);\n    var /** @type {?} */ templateRef = reflector.resolveExternalReference(Identifiers.TemplateRef);\n    var /** @type {?} */ viewContainerRef = reflector.resolveExternalReference(Identifiers.ViewContainerRef);\n    for (var _i = 0, _a = type.diDeps; _i < _a.length; _i++) {\n        var dependency = _a[_i];\n        if (dependency.isValue) {\n            unsupported('value dependencies');\n        }\n        if (dependency.isHost) {\n            unsupported('host dependencies');\n        }\n        var /** @type {?} */ token = dependency.token;\n        if (token) {\n            var /** @type {?} */ tokenRef = tokenReference(token);\n            if (tokenRef === elementRef) {\n                args.push(o.importExpr(R3.injectElementRef).callFn([]));\n            }\n            else if (tokenRef === templateRef) {\n                args.push(o.importExpr(R3.injectTemplateRef).callFn([]));\n            }\n            else if (tokenRef === viewContainerRef) {\n                args.push(o.importExpr(R3.injectViewContainerRef).callFn([]));\n            }\n            else {\n                var /** @type {?} */ value = token.identifier != null ? outputCtx.importExpr(tokenRef) : o.literal(tokenRef);\n                args.push(o.importExpr(R3.inject).callFn([value]));\n            }\n        }\n        else {\n            unsupported('dependency without a token');\n        }\n    }\n    var /** @type {?} */ queryDefinitions = [];\n    for (var _b = 0, queries_1 = queries; _b < queries_1.length; _b++) {\n        var query = queries_1[_b];\n        var /** @type {?} */ predicate = getQueryPredicate(query, outputCtx);\n        // e.g. r3.Q(null, SomeDirective, false) or r3.Q(null, ['div'], false)\n        var /** @type {?} */ parameters = [\n            /* memoryIndex */ o.literal(null, o.INFERRED_TYPE),\n            predicate,\n            /* descend */ o.literal(query.descendants)\n        ];\n        if (query.read) {\n            parameters.push(outputCtx.importExpr(/** @type {?} */ ((query.read.identifier)).reference));\n        }\n        queryDefinitions.push(o.importExpr(R3.query).callFn(parameters));\n    }\n    var /** @type {?} */ createInstance = new o.InstantiateExpr(outputCtx.importExpr(type.reference), args);\n    var /** @type {?} */ result = queryDefinitions.length > 0 ? o.literalArr([createInstance].concat(queryDefinitions)) :\n        createInstance;\n    return o.fn([], [new o.ReturnStatement(result)], o.INFERRED_TYPE, null, type.reference.name ? type.reference.name + \"_Factory\" : null);\n}\n/**\n *  Remove trailing null nodes as they are implied.\n * @param {?} parameters\n * @return {?}\n */\nfunction trimTrailingNulls(parameters) {\n    while (o.isNull(parameters[parameters.length - 1])) {\n        parameters.pop();\n    }\n    return parameters;\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction createDirectiveSelector(selector) {\n    return asLiteral(parseSelectorsToR3Selector(CssSelector.parse(selector)));\n}\n/**\n * @param {?} directiveMetadata\n * @param {?} outputCtx\n * @return {?}\n */\nfunction createHostAttributesArray(directiveMetadata, outputCtx) {\n    var /** @type {?} */ values = [];\n    var /** @type {?} */ attributes = directiveMetadata.hostAttributes;\n    for (var _i = 0, _a = Object.getOwnPropertyNames(attributes); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var /** @type {?} */ value = attributes[key];\n        values.push(o.literal(key), o.literal(value));\n    }\n    if (values.length > 0) {\n        return outputCtx.constantPool.getConstLiteral(o.literalArr(values));\n    }\n    return null;\n}\n/**\n * @param {?} directiveMetadata\n * @param {?} outputCtx\n * @param {?} bindingParser\n * @return {?}\n */\nfunction createHostBindingsFunction(directiveMetadata, outputCtx, bindingParser) {\n    var /** @type {?} */ statements = [];\n    var /** @type {?} */ temporary = function () {\n        var /** @type {?} */ declared = false;\n        return function () {\n            if (!declared) {\n                statements.push(new o.DeclareVarStmt(TEMPORARY_NAME, undefined, o.DYNAMIC_TYPE));\n                declared = true;\n            }\n            return o.variable(TEMPORARY_NAME);\n        };\n    }();\n    var /** @type {?} */ hostBindingSourceSpan = typeSourceSpan(directiveMetadata.isComponent ? 'Component' : 'Directive', directiveMetadata.type);\n    // Calculate the queries\n    for (var /** @type {?} */ index = 0; index < directiveMetadata.queries.length; index++) {\n        var /** @type {?} */ query = directiveMetadata.queries[index];\n        // e.g. r3.qR(tmp = r3.ld(dirIndex)[1]) && (r3.ld(dirIndex)[0].someDir = tmp);\n        var /** @type {?} */ getDirectiveMemory = o.importExpr(R3.load).callFn([o.variable('dirIndex')]);\n        // The query list is at the query index + 1 because the directive itself is in slot 0.\n        var /** @type {?} */ getQueryList = getDirectiveMemory.key(o.literal(index + 1));\n        var /** @type {?} */ assignToTemporary = temporary().set(getQueryList);\n        var /** @type {?} */ callQueryRefresh = o.importExpr(R3.queryRefresh).callFn([assignToTemporary]);\n        var /** @type {?} */ updateDirective = getDirectiveMemory.key(o.literal(0, o.INFERRED_TYPE))\n            .prop(query.propertyName)\n            .set(query.first ? temporary().prop('first') : temporary());\n        var /** @type {?} */ andExpression = callQueryRefresh.and(updateDirective);\n        statements.push(andExpression.toStmt());\n    }\n    var /** @type {?} */ directiveSummary = directiveMetadata.toSummary();\n    // Calculate the host property bindings\n    var /** @type {?} */ bindings = bindingParser.createBoundHostProperties(directiveSummary, hostBindingSourceSpan);\n    var /** @type {?} */ bindingContext = o.importExpr(R3.load).callFn([o.variable('dirIndex')]);\n    if (bindings) {\n        for (var _i = 0, bindings_1 = bindings; _i < bindings_1.length; _i++) {\n            var binding = bindings_1[_i];\n            var /** @type {?} */ bindingExpr = convertPropertyBinding(null, bindingContext, binding.expression, 'b', BindingForm.TrySimple, function () { return error('Unexpected interpolation'); });\n            statements.push.apply(statements, bindingExpr.stmts);\n            statements.push(o.importExpr(R3.elementProperty)\n                .callFn([\n                o.variable('elIndex'), o.literal(binding.name),\n                o.importExpr(R3.bind).callFn([bindingExpr.currValExpr])\n            ])\n                .toStmt());\n        }\n    }\n    // Calculate host event bindings\n    var /** @type {?} */ eventBindings = bindingParser.createDirectiveHostEventAsts(directiveSummary, hostBindingSourceSpan);\n    if (eventBindings) {\n        for (var _a = 0, eventBindings_1 = eventBindings; _a < eventBindings_1.length; _a++) {\n            var binding = eventBindings_1[_a];\n            var /** @type {?} */ bindingExpr = convertActionBinding(null, bindingContext, binding.handler, 'b', function () { return error('Unexpected interpolation'); });\n            var /** @type {?} */ bindingName = binding.name && sanitizeIdentifier(binding.name);\n            var /** @type {?} */ typeName = identifierName(directiveMetadata.type);\n            var /** @type {?} */ functionName = typeName && bindingName ? typeName + \"_\" + bindingName + \"_HostBindingHandler\" : null;\n            var /** @type {?} */ handler = o.fn([new o.FnParam('$event', o.DYNAMIC_TYPE)], bindingExpr.stmts.concat([new o.ReturnStatement(bindingExpr.allowDefault)]), o.INFERRED_TYPE, null, functionName);\n            statements.push(o.importExpr(R3.listener).callFn([o.literal(binding.name), handler]).toStmt());\n        }\n    }\n    if (statements.length > 0) {\n        var /** @type {?} */ typeName = directiveMetadata.type.reference.name;\n        return o.fn([new o.FnParam('dirIndex', o.NUMBER_TYPE), new o.FnParam('elIndex', o.NUMBER_TYPE)], statements, o.INFERRED_TYPE, null, typeName ? typeName + \"_HostBindings\" : null);\n    }\n    return null;\n}\n/**\n * @param {?} keys\n * @param {?} outputCtx\n * @return {?}\n */\nfunction conditionallyCreateMapObjectLiteral(keys, outputCtx) {\n    if (Object.getOwnPropertyNames(keys).length > 0) {\n        return mapToExpression(keys);\n    }\n    return null;\n}\nvar ValueConverter = /** @class */ (function (_super) {\n    tslib_1.__extends(ValueConverter, _super);\n    function ValueConverter(outputCtx, allocateSlot, definePipe) {\n        var _this = _super.call(this) || this;\n        _this.outputCtx = outputCtx;\n        _this.allocateSlot = allocateSlot;\n        _this.definePipe = definePipe;\n        _this.pipeSlots = new Map();\n        return _this;\n    }\n    // AstMemoryEfficientTransformer\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ValueConverter.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        // Allocate a slot to create the pipe\n        var /** @type {?} */ slot = this.allocateSlot();\n        var /** @type {?} */ slotPseudoLocal = \"PIPE:\" + slot;\n        var /** @type {?} */ target = new PropertyRead(ast.span, new ImplicitReceiver(ast.span), slotPseudoLocal);\n        var /** @type {?} */ bindingId = pipeBinding(ast.args);\n        this.definePipe(ast.name, slotPseudoLocal, slot, o.importExpr(bindingId));\n        var /** @type {?} */ value = ast.exp.visit(this);\n        var /** @type {?} */ args = this.visitAll(ast.args);\n        return new FunctionCall(ast.span, target, [new LiteralPrimitive(ast.span, slot), value].concat(args));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ValueConverter.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        return new BuiltinFunctionCall(ast.span, this.visitAll(ast.expressions), function (values) {\n            // If the literal has calculated (non-literal) elements transform it into\n            // calls to literal factories that compose the literal and will cache intermediate\n            // values. Otherwise, just return an literal array that contains the values.\n            var /** @type {?} */ literal = o.literalArr(values);\n            return values.every(function (a) { return a.isConstant(); }) ?\n                _this.outputCtx.constantPool.getConstLiteral(literal, true) :\n                getLiteralFactory(_this.outputCtx, literal);\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ValueConverter.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        return new BuiltinFunctionCall(ast.span, this.visitAll(ast.values), function (values) {\n            // If the literal has calculated (non-literal) elements  transform it into\n            // calls to literal factories that compose the literal and will cache intermediate\n            // values. Otherwise, just return an literal array that contains the values.\n            var /** @type {?} */ literal = o.literalMap(values.map(function (value, index) { return ({ key: ast.keys[index].key, value: value, quoted: ast.keys[index].quoted }); }));\n            return values.every(function (a) { return a.isConstant(); }) ?\n                _this.outputCtx.constantPool.getConstLiteral(literal, true) :\n                getLiteralFactory(_this.outputCtx, literal);\n        });\n    };\n    return ValueConverter;\n}(AstMemoryEfficientTransformer));\nfunction ValueConverter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ValueConverter.prototype.pipeSlots;\n    /** @type {?} */\n    ValueConverter.prototype.outputCtx;\n    /** @type {?} */\n    ValueConverter.prototype.allocateSlot;\n    /** @type {?} */\n    ValueConverter.prototype.definePipe;\n}\n/**\n * @template T\n * @param {?} arg\n * @return {?}\n */\nfunction invalid(arg) {\n    throw new Error(\"Invalid state: Visitor \" + this.constructor.name + \" doesn't handle \" + o.constructor.name);\n}\n/**\n * @param {?} directives\n * @return {?}\n */\nfunction findComponent(directives) {\n    return directives.filter(function (directive) { return directive.directive.isComponent; })[0];\n}\n/**\n * @record\n */\nfunction NgContentInfo() { }\nfunction NgContentInfo_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgContentInfo.prototype.index;\n    /** @type {?|undefined} */\n    NgContentInfo.prototype.selector;\n}\nvar ContentProjectionVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(ContentProjectionVisitor, _super);\n    function ContentProjectionVisitor(projectionMap, ngContentSelectors) {\n        var _this = _super.call(this) || this;\n        _this.projectionMap = projectionMap;\n        _this.ngContentSelectors = ngContentSelectors;\n        _this.index = 1;\n        return _this;\n    }\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    ContentProjectionVisitor.prototype.visitNgContent = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var /** @type {?} */ selectorText = this.ngContentSelectors[ast.index];\n        selectorText != null || error(\"could not find selector for index \" + ast.index + \" in \" + ast);\n        if (!selectorText || selectorText === '*') {\n            this.projectionMap.set(ast, { index: 0 });\n        }\n        else {\n            var /** @type {?} */ cssSelectors = CssSelector.parse(selectorText);\n            this.projectionMap.set(ast, { index: this.index++, selector: parseSelectorsToR3Selector(cssSelectors) });\n        }\n    };\n    return ContentProjectionVisitor;\n}(RecursiveTemplateAstVisitor));\nfunction ContentProjectionVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ContentProjectionVisitor.prototype.index;\n    /** @type {?} */\n    ContentProjectionVisitor.prototype.projectionMap;\n    /** @type {?} */\n    ContentProjectionVisitor.prototype.ngContentSelectors;\n}\n/**\n * @param {?} asts\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction getContentProjection(asts, ngContentSelectors) {\n    var /** @type {?} */ projectIndexMap = new Map();\n    var /** @type {?} */ visitor = new ContentProjectionVisitor(projectIndexMap, ngContentSelectors);\n    templateVisitAll(visitor, asts);\n    return projectIndexMap;\n}\n/** @enum {number} */\nvar SelectorFlags = {\n    /** Indicates this is the beginning of a new negative selector */\n    NOT: 1,\n    /** Mode for matching attributes */\n    ATTRIBUTE: 2,\n    /** Mode for matching tag names */\n    ELEMENT: 4,\n    /** Mode for matching class names */\n    CLASS: 8,\n};\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction parserSelectorToSimpleSelector(selector) {\n    var /** @type {?} */ classes = selector.classNames && selector.classNames.length ? [8 /* CLASS */].concat(selector.classNames) :\n        [];\n    var /** @type {?} */ elementName = selector.element && selector.element !== '*' ? selector.element : '';\n    return [elementName].concat(selector.attrs, classes);\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction parserSelectorToNegativeSelector(selector) {\n    var /** @type {?} */ classes = selector.classNames && selector.classNames.length ? [8 /* CLASS */].concat(selector.classNames) :\n        [];\n    if (selector.element) {\n        return [\n            1 /* NOT */ | 4 /* ELEMENT */, selector.element\n        ].concat(selector.attrs, classes);\n    }\n    else if (selector.attrs.length) {\n        return [1 /* NOT */ | 2 /* ATTRIBUTE */].concat(selector.attrs, classes);\n    }\n    else {\n        return selector.classNames && selector.classNames.length ? [1 /* NOT */ | 8 /* CLASS */].concat(selector.classNames) :\n            [];\n    }\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction parserSelectorToR3Selector(selector) {\n    var /** @type {?} */ positive = parserSelectorToSimpleSelector(selector);\n    var /** @type {?} */ negative = selector.notSelectors && selector.notSelectors.length ?\n        selector.notSelectors.map(function (notSelector) { return parserSelectorToNegativeSelector(notSelector); }) :\n        [];\n    return positive.concat.apply(positive, negative);\n}\n/**\n * @param {?} selectors\n * @return {?}\n */\nfunction parseSelectorsToR3Selector(selectors) {\n    return selectors.map(parserSelectorToR3Selector);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction asLiteral(value) {\n    if (Array.isArray(value)) {\n        return o.literalArr(value.map(asLiteral));\n    }\n    return o.literal(value, o.INFERRED_TYPE);\n}\n/**\n * @param {?} map\n * @param {?=} quoted\n * @return {?}\n */\nfunction mapToExpression(map, quoted) {\n    if (quoted === void 0) { quoted = false; }\n    return o.literalMap(Object.getOwnPropertyNames(map).map(function (key) { return ({ key: key, quoted: quoted, value: asLiteral(map[key]) }); }));\n}\n/**\n * @param {?=} i18n\n * @return {?}\n */\nfunction parseI18nMeta(i18n) {\n    var /** @type {?} */ meaning;\n    var /** @type {?} */ description;\n    var /** @type {?} */ id;\n    if (i18n) {\n        // TODO(vicb): figure out how to force a message ID with closure ?\n        var /** @type {?} */ idIndex = i18n.indexOf(ID_SEPARATOR);\n        var /** @type {?} */ descIndex = i18n.indexOf(MEANING_SEPARATOR);\n        var /** @type {?} */ meaningAndDesc = void 0;\n        _a = (idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''], meaningAndDesc = _a[0], id = _a[1];\n        _b = (descIndex > -1) ?\n            [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :\n            ['', meaningAndDesc], meaning = _b[0], description = _b[1];\n    }\n    return { description: description, id: id, meaning: meaning };\n    var _a, _b;\n}\nvar _a;\n//# sourceMappingURL=r3_view_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { areAllEquivalent } from '../output/output_ast';\nimport { TypeScriptEmitter } from '../output/ts_emitter';\nvar GeneratedFile = /** @class */ (function () {\n    function GeneratedFile(srcFileUrl, genFileUrl, sourceOrStmts) {\n        this.srcFileUrl = srcFileUrl;\n        this.genFileUrl = genFileUrl;\n        if (typeof sourceOrStmts === 'string') {\n            this.source = sourceOrStmts;\n            this.stmts = null;\n        }\n        else {\n            this.source = null;\n            this.stmts = sourceOrStmts;\n        }\n    }\n    /**\n     * @param {?} other\n     * @return {?}\n     */\n    GeneratedFile.prototype.isEquivalent = /**\n     * @param {?} other\n     * @return {?}\n     */\n    function (other) {\n        if (this.genFileUrl !== other.genFileUrl) {\n            return false;\n        }\n        if (this.source) {\n            return this.source === other.source;\n        }\n        if (other.stmts == null) {\n            return false;\n        }\n        // Note: the constructor guarantees that if this.source is not filled,\n        // then this.stmts is.\n        return areAllEquivalent(/** @type {?} */ ((this.stmts)), /** @type {?} */ ((other.stmts)));\n    };\n    return GeneratedFile;\n}());\nexport { GeneratedFile };\nfunction GeneratedFile_tsickle_Closure_declarations() {\n    /** @type {?} */\n    GeneratedFile.prototype.source;\n    /** @type {?} */\n    GeneratedFile.prototype.stmts;\n    /** @type {?} */\n    GeneratedFile.prototype.srcFileUrl;\n    /** @type {?} */\n    GeneratedFile.prototype.genFileUrl;\n}\n/**\n * @param {?} file\n * @param {?=} preamble\n * @return {?}\n */\nexport function toTypeScript(file, preamble) {\n    if (preamble === void 0) { preamble = ''; }\n    if (!file.stmts) {\n        throw new Error(\"Illegal state: No stmts present on GeneratedFile \" + file.genFileUrl);\n    }\n    return new TypeScriptEmitter().emitStatements(file.genFileUrl, file.stmts, preamble);\n}\n//# sourceMappingURL=generated_file.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { tokenReference } from '../compile_metadata';\n/**\n * @record\n */\nexport function LazyRoute() { }\nfunction LazyRoute_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LazyRoute.prototype.module;\n    /** @type {?} */\n    LazyRoute.prototype.route;\n    /** @type {?} */\n    LazyRoute.prototype.referencedModule;\n}\n/**\n * @param {?} moduleMeta\n * @param {?} reflector\n * @return {?}\n */\nexport function listLazyRoutes(moduleMeta, reflector) {\n    var /** @type {?} */ allLazyRoutes = [];\n    for (var _i = 0, _a = moduleMeta.transitiveModule.providers; _i < _a.length; _i++) {\n        var _b = _a[_i], provider = _b.provider, module = _b.module;\n        if (tokenReference(provider.token) === reflector.ROUTES) {\n            var /** @type {?} */ loadChildren = _collectLoadChildren(provider.useValue);\n            for (var _c = 0, loadChildren_1 = loadChildren; _c < loadChildren_1.length; _c++) {\n                var route = loadChildren_1[_c];\n                allLazyRoutes.push(parseLazyRoute(route, reflector, module.reference));\n            }\n        }\n    }\n    return allLazyRoutes;\n}\n/**\n * @param {?} routes\n * @param {?=} target\n * @return {?}\n */\nfunction _collectLoadChildren(routes, target) {\n    if (target === void 0) { target = []; }\n    if (typeof routes === 'string') {\n        target.push(routes);\n    }\n    else if (Array.isArray(routes)) {\n        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n            var route = routes_1[_i];\n            _collectLoadChildren(route, target);\n        }\n    }\n    else if (routes.loadChildren) {\n        _collectLoadChildren(routes.loadChildren, target);\n    }\n    else if (routes.children) {\n        _collectLoadChildren(routes.children, target);\n    }\n    return target;\n}\n/**\n * @param {?} route\n * @param {?} reflector\n * @param {?=} module\n * @return {?}\n */\nexport function parseLazyRoute(route, reflector, module) {\n    var _a = route.split('#'), routePath = _a[0], routeName = _a[1];\n    var /** @type {?} */ referencedModule = reflector.resolveExternalReference({\n        moduleName: routePath,\n        name: routeName,\n    }, module ? module.filePath : undefined);\n    return { route: route, module: module || referencedModule, referencedModule: referencedModule };\n}\n//# sourceMappingURL=lazy_routes.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ValueTransformer, visitValue } from '../util';\nimport { StaticSymbol } from './static_symbol';\nimport { isGeneratedFile, stripSummaryForJitFileSuffix, stripSummaryForJitNameSuffix, summaryForJitFileName, summaryForJitName } from './util';\nvar /** @type {?} */ DTS = /\\.d\\.ts$/;\nvar /** @type {?} */ TS = /^(?!.*\\.d\\.ts$).*\\.ts$/;\nvar ResolvedStaticSymbol = /** @class */ (function () {\n    function ResolvedStaticSymbol(symbol, metadata) {\n        this.symbol = symbol;\n        this.metadata = metadata;\n    }\n    return ResolvedStaticSymbol;\n}());\nexport { ResolvedStaticSymbol };\nfunction ResolvedStaticSymbol_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ResolvedStaticSymbol.prototype.symbol;\n    /** @type {?} */\n    ResolvedStaticSymbol.prototype.metadata;\n}\n/**\n * The host of the SymbolResolverHost disconnects the implementation from TypeScript / other\n * language\n * services and from underlying file systems.\n * @record\n */\nexport function StaticSymbolResolverHost() { }\nfunction StaticSymbolResolverHost_tsickle_Closure_declarations() {\n    /**\n     * Return a ModuleMetadata for the given module.\n     * Angular CLI will produce this metadata for a module whenever a .d.ts files is\n     * produced and the module has exported variables or classes with decorators. Module metadata can\n     * also be produced directly from TypeScript sources by using MetadataCollector in tools/metadata.\n     *\n     * \\@param modulePath is a string identifier for a module as an absolute path.\n     * \\@return the metadata for the given module.\n     * @type {?}\n     */\n    StaticSymbolResolverHost.prototype.getMetadataFor;\n    /**\n     * Converts a module name that is used in an `import` to a file path.\n     * I.e.\n     * `path/to/containingFile.ts` containing `import {...} from 'module-name'`.\n     * @type {?}\n     */\n    StaticSymbolResolverHost.prototype.moduleNameToFileName;\n    /**\n     * Get a file suitable for display to the user that should be relative to the project directory\n     * or the current directory.\n     * @type {?}\n     */\n    StaticSymbolResolverHost.prototype.getOutputName;\n}\nvar /** @type {?} */ SUPPORTED_SCHEMA_VERSION = 4;\n/**\n * This class is responsible for loading metadata per symbol,\n * and normalizing references between symbols.\n *\n * Internally, it only uses symbols without members,\n * and deduces the values for symbols with members based\n * on these symbols.\n */\nvar /**\n * This class is responsible for loading metadata per symbol,\n * and normalizing references between symbols.\n *\n * Internally, it only uses symbols without members,\n * and deduces the values for symbols with members based\n * on these symbols.\n */\nStaticSymbolResolver = /** @class */ (function () {\n    function StaticSymbolResolver(host, staticSymbolCache, summaryResolver, errorRecorder) {\n        this.host = host;\n        this.staticSymbolCache = staticSymbolCache;\n        this.summaryResolver = summaryResolver;\n        this.errorRecorder = errorRecorder;\n        this.metadataCache = new Map();\n        this.resolvedSymbols = new Map();\n        this.resolvedFilePaths = new Set();\n        this.importAs = new Map();\n        this.symbolResourcePaths = new Map();\n        this.symbolFromFile = new Map();\n        this.knownFileNameToModuleNames = new Map();\n    }\n    /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.resolveSymbol = /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    function (staticSymbol) {\n        if (staticSymbol.members.length > 0) {\n            return /** @type {?} */ ((this._resolveSymbolMembers(staticSymbol)));\n        }\n        // Note: always ask for a summary first,\n        // as we might have read shallow metadata via a .d.ts file\n        // for the symbol.\n        var /** @type {?} */ resultFromSummary = /** @type {?} */ ((this._resolveSymbolFromSummary(staticSymbol)));\n        if (resultFromSummary) {\n            return resultFromSummary;\n        }\n        var /** @type {?} */ resultFromCache = this.resolvedSymbols.get(staticSymbol);\n        if (resultFromCache) {\n            return resultFromCache;\n        }\n        // Note: Some users use libraries that were not compiled with ngc, i.e. they don't\n        // have summaries, only .d.ts files. So we always need to check both, the summary\n        // and metadata.\n        this._createSymbolsOf(staticSymbol.filePath);\n        return /** @type {?} */ ((this.resolvedSymbols.get(staticSymbol)));\n    };\n    /**\n     * getImportAs produces a symbol that can be used to import the given symbol.\n     * The import might be different than the symbol if the symbol is exported from\n     * a library with a summary; in which case we want to import the symbol from the\n     * ngfactory re-export instead of directly to avoid introducing a direct dependency\n     * on an otherwise indirect dependency.\n     *\n     * @param staticSymbol the symbol for which to generate a import symbol\n     */\n    /**\n     * getImportAs produces a symbol that can be used to import the given symbol.\n     * The import might be different than the symbol if the symbol is exported from\n     * a library with a summary; in which case we want to import the symbol from the\n     * ngfactory re-export instead of directly to avoid introducing a direct dependency\n     * on an otherwise indirect dependency.\n     *\n     * @param {?} staticSymbol the symbol for which to generate a import symbol\n     * @param {?=} useSummaries\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getImportAs = /**\n     * getImportAs produces a symbol that can be used to import the given symbol.\n     * The import might be different than the symbol if the symbol is exported from\n     * a library with a summary; in which case we want to import the symbol from the\n     * ngfactory re-export instead of directly to avoid introducing a direct dependency\n     * on an otherwise indirect dependency.\n     *\n     * @param {?} staticSymbol the symbol for which to generate a import symbol\n     * @param {?=} useSummaries\n     * @return {?}\n     */\n    function (staticSymbol, useSummaries) {\n        if (useSummaries === void 0) { useSummaries = true; }\n        if (staticSymbol.members.length) {\n            var /** @type {?} */ baseSymbol = this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name);\n            var /** @type {?} */ baseImportAs = this.getImportAs(baseSymbol, useSummaries);\n            return baseImportAs ?\n                this.getStaticSymbol(baseImportAs.filePath, baseImportAs.name, staticSymbol.members) :\n                null;\n        }\n        var /** @type {?} */ summarizedFileName = stripSummaryForJitFileSuffix(staticSymbol.filePath);\n        if (summarizedFileName !== staticSymbol.filePath) {\n            var /** @type {?} */ summarizedName = stripSummaryForJitNameSuffix(staticSymbol.name);\n            var /** @type {?} */ baseSymbol = this.getStaticSymbol(summarizedFileName, summarizedName, staticSymbol.members);\n            var /** @type {?} */ baseImportAs = this.getImportAs(baseSymbol, useSummaries);\n            return baseImportAs ?\n                this.getStaticSymbol(summaryForJitFileName(baseImportAs.filePath), summaryForJitName(baseImportAs.name), baseSymbol.members) :\n                null;\n        }\n        var /** @type {?} */ result = (useSummaries && this.summaryResolver.getImportAs(staticSymbol)) || null;\n        if (!result) {\n            result = /** @type {?} */ ((this.importAs.get(staticSymbol)));\n        }\n        return result;\n    };\n    /**\n     * getResourcePath produces the path to the original location of the symbol and should\n     * be used to determine the relative location of resource references recorded in\n     * symbol metadata.\n     */\n    /**\n     * getResourcePath produces the path to the original location of the symbol and should\n     * be used to determine the relative location of resource references recorded in\n     * symbol metadata.\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getResourcePath = /**\n     * getResourcePath produces the path to the original location of the symbol and should\n     * be used to determine the relative location of resource references recorded in\n     * symbol metadata.\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    function (staticSymbol) {\n        return this.symbolResourcePaths.get(staticSymbol) || staticSymbol.filePath;\n    };\n    /**\n     * getTypeArity returns the number of generic type parameters the given symbol\n     * has. If the symbol is not a type the result is null.\n     */\n    /**\n     * getTypeArity returns the number of generic type parameters the given symbol\n     * has. If the symbol is not a type the result is null.\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getTypeArity = /**\n     * getTypeArity returns the number of generic type parameters the given symbol\n     * has. If the symbol is not a type the result is null.\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    function (staticSymbol) {\n        // If the file is a factory/ngsummary file, don't resolve the symbol as doing so would\n        // cause the metadata for an factory/ngsummary file to be loaded which doesn't exist.\n        // All references to generated classes must include the correct arity whenever\n        // generating code.\n        if (isGeneratedFile(staticSymbol.filePath)) {\n            return null;\n        }\n        var /** @type {?} */ resolvedSymbol = unwrapResolvedMetadata(this.resolveSymbol(staticSymbol));\n        while (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {\n            resolvedSymbol = unwrapResolvedMetadata(this.resolveSymbol(resolvedSymbol.metadata));\n        }\n        return (resolvedSymbol && resolvedSymbol.metadata && resolvedSymbol.metadata.arity) || null;\n    };\n    /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getKnownModuleName = /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    function (filePath) {\n        return this.knownFileNameToModuleNames.get(filePath) || null;\n    };\n    /**\n     * @param {?} sourceSymbol\n     * @param {?} targetSymbol\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.recordImportAs = /**\n     * @param {?} sourceSymbol\n     * @param {?} targetSymbol\n     * @return {?}\n     */\n    function (sourceSymbol, targetSymbol) {\n        sourceSymbol.assertNoMembers();\n        targetSymbol.assertNoMembers();\n        this.importAs.set(sourceSymbol, targetSymbol);\n    };\n    /**\n     * @param {?} fileName\n     * @param {?} moduleName\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.recordModuleNameForFileName = /**\n     * @param {?} fileName\n     * @param {?} moduleName\n     * @return {?}\n     */\n    function (fileName, moduleName) {\n        this.knownFileNameToModuleNames.set(fileName, moduleName);\n    };\n    /**\n     * Invalidate all information derived from the given file.\n     *\n     * @param fileName the file to invalidate\n     */\n    /**\n     * Invalidate all information derived from the given file.\n     *\n     * @param {?} fileName the file to invalidate\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.invalidateFile = /**\n     * Invalidate all information derived from the given file.\n     *\n     * @param {?} fileName the file to invalidate\n     * @return {?}\n     */\n    function (fileName) {\n        this.metadataCache.delete(fileName);\n        this.resolvedFilePaths.delete(fileName);\n        var /** @type {?} */ symbols = this.symbolFromFile.get(fileName);\n        if (symbols) {\n            this.symbolFromFile.delete(fileName);\n            for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {\n                var symbol = symbols_1[_i];\n                this.resolvedSymbols.delete(symbol);\n                this.importAs.delete(symbol);\n                this.symbolResourcePaths.delete(symbol);\n            }\n        }\n    };\n    /* @internal */\n    /**\n     * @template T\n     * @param {?} cb\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.ignoreErrorsFor = /**\n     * @template T\n     * @param {?} cb\n     * @return {?}\n     */\n    function (cb) {\n        var /** @type {?} */ recorder = this.errorRecorder;\n        this.errorRecorder = function () { };\n        try {\n            return cb();\n        }\n        finally {\n            this.errorRecorder = recorder;\n        }\n    };\n    /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype._resolveSymbolMembers = /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    function (staticSymbol) {\n        var /** @type {?} */ members = staticSymbol.members;\n        var /** @type {?} */ baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));\n        if (!baseResolvedSymbol) {\n            return null;\n        }\n        var /** @type {?} */ baseMetadata = unwrapResolvedMetadata(baseResolvedSymbol.metadata);\n        if (baseMetadata instanceof StaticSymbol) {\n            return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));\n        }\n        else if (baseMetadata && baseMetadata.__symbolic === 'class') {\n            if (baseMetadata.statics && members.length === 1) {\n                return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);\n            }\n        }\n        else {\n            var /** @type {?} */ value = baseMetadata;\n            for (var /** @type {?} */ i = 0; i < members.length && value; i++) {\n                value = value[members[i]];\n            }\n            return new ResolvedStaticSymbol(staticSymbol, value);\n        }\n        return null;\n    };\n    /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype._resolveSymbolFromSummary = /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    function (staticSymbol) {\n        var /** @type {?} */ summary = this.summaryResolver.resolveSummary(staticSymbol);\n        return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;\n    };\n    /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param declarationFile the absolute path of the file where the symbol is declared\n     * @param name the name of the type.\n     * @param members a symbol for a static member of the named type\n     */\n    /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param {?} declarationFile the absolute path of the file where the symbol is declared\n     * @param {?} name the name of the type.\n     * @param {?=} members a symbol for a static member of the named type\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getStaticSymbol = /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param {?} declarationFile the absolute path of the file where the symbol is declared\n     * @param {?} name the name of the type.\n     * @param {?=} members a symbol for a static member of the named type\n     * @return {?}\n     */\n    function (declarationFile, name, members) {\n        return this.staticSymbolCache.get(declarationFile, name, members);\n    };\n    /**\n     * hasDecorators checks a file's metadata for the presence of decorators without evaluating the\n     * metadata.\n     *\n     * @param filePath the absolute path to examine for decorators.\n     * @returns true if any class in the file has a decorator.\n     */\n    /**\n     * hasDecorators checks a file's metadata for the presence of decorators without evaluating the\n     * metadata.\n     *\n     * @param {?} filePath the absolute path to examine for decorators.\n     * @return {?} true if any class in the file has a decorator.\n     */\n    StaticSymbolResolver.prototype.hasDecorators = /**\n     * hasDecorators checks a file's metadata for the presence of decorators without evaluating the\n     * metadata.\n     *\n     * @param {?} filePath the absolute path to examine for decorators.\n     * @return {?} true if any class in the file has a decorator.\n     */\n    function (filePath) {\n        var /** @type {?} */ metadata = this.getModuleMetadata(filePath);\n        if (metadata['metadata']) {\n            return Object.keys(metadata['metadata']).some(function (metadataKey) {\n                var /** @type {?} */ entry = metadata['metadata'][metadataKey];\n                return entry && entry.__symbolic === 'class' && entry.decorators;\n            });\n        }\n        return false;\n    };\n    /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getSymbolsOf = /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    function (filePath) {\n        var /** @type {?} */ summarySymbols = this.summaryResolver.getSymbolsOf(filePath);\n        if (summarySymbols) {\n            return summarySymbols;\n        }\n        // Note: Some users use libraries that were not compiled with ngc, i.e. they don't\n        // have summaries, only .d.ts files, but `summaryResolver.isLibraryFile` returns true.\n        this._createSymbolsOf(filePath);\n        var /** @type {?} */ metadataSymbols = [];\n        this.resolvedSymbols.forEach(function (resolvedSymbol) {\n            if (resolvedSymbol.symbol.filePath === filePath) {\n                metadataSymbols.push(resolvedSymbol.symbol);\n            }\n        });\n        return metadataSymbols;\n    };\n    /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype._createSymbolsOf = /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    function (filePath) {\n        var _this = this;\n        if (this.resolvedFilePaths.has(filePath)) {\n            return;\n        }\n        this.resolvedFilePaths.add(filePath);\n        var /** @type {?} */ resolvedSymbols = [];\n        var /** @type {?} */ metadata = this.getModuleMetadata(filePath);\n        if (metadata['importAs']) {\n            // Index bundle indices should use the importAs module name defined\n            // in the bundle.\n            this.knownFileNameToModuleNames.set(filePath, metadata['importAs']);\n        }\n        // handle the symbols in one of the re-export location\n        if (metadata['exports']) {\n            var _loop_1 = function (moduleExport) {\n                // handle the symbols in the list of explicitly re-exported symbols.\n                if (moduleExport.export) {\n                    moduleExport.export.forEach(function (exportSymbol) {\n                        var /** @type {?} */ symbolName;\n                        if (typeof exportSymbol === 'string') {\n                            symbolName = exportSymbol;\n                        }\n                        else {\n                            symbolName = exportSymbol.as;\n                        }\n                        symbolName = unescapeIdentifier(symbolName);\n                        var /** @type {?} */ symName = symbolName;\n                        if (typeof exportSymbol !== 'string') {\n                            symName = unescapeIdentifier(exportSymbol.name);\n                        }\n                        var /** @type {?} */ resolvedModule = _this.resolveModule(moduleExport.from, filePath);\n                        if (resolvedModule) {\n                            var /** @type {?} */ targetSymbol = _this.getStaticSymbol(resolvedModule, symName);\n                            var /** @type {?} */ sourceSymbol = _this.getStaticSymbol(filePath, symbolName);\n                            resolvedSymbols.push(_this.createExport(sourceSymbol, targetSymbol));\n                        }\n                    });\n                }\n                else {\n                    // handle the symbols via export * directives.\n                    var /** @type {?} */ resolvedModule = this_1.resolveModule(moduleExport.from, filePath);\n                    if (resolvedModule) {\n                        var /** @type {?} */ nestedExports = this_1.getSymbolsOf(resolvedModule);\n                        nestedExports.forEach(function (targetSymbol) {\n                            var /** @type {?} */ sourceSymbol = _this.getStaticSymbol(filePath, targetSymbol.name);\n                            resolvedSymbols.push(_this.createExport(sourceSymbol, targetSymbol));\n                        });\n                    }\n                }\n            };\n            var this_1 = this;\n            for (var _i = 0, _a = metadata['exports']; _i < _a.length; _i++) {\n                var moduleExport = _a[_i];\n                _loop_1(moduleExport);\n            }\n        }\n        // handle the actual metadata. Has to be after the exports\n        // as there migth be collisions in the names, and we want the symbols\n        // of the current module to win ofter reexports.\n        if (metadata['metadata']) {\n            // handle direct declarations of the symbol\n            var /** @type {?} */ topLevelSymbolNames_1 = new Set(Object.keys(metadata['metadata']).map(unescapeIdentifier));\n            var /** @type {?} */ origins_1 = metadata['origins'] || {};\n            Object.keys(metadata['metadata']).forEach(function (metadataKey) {\n                var /** @type {?} */ symbolMeta = metadata['metadata'][metadataKey];\n                var /** @type {?} */ name = unescapeIdentifier(metadataKey);\n                var /** @type {?} */ symbol = _this.getStaticSymbol(filePath, name);\n                var /** @type {?} */ origin = origins_1.hasOwnProperty(metadataKey) && origins_1[metadataKey];\n                if (origin) {\n                    // If the symbol is from a bundled index, use the declaration location of the\n                    // symbol so relative references (such as './my.html') will be calculated\n                    // correctly.\n                    var /** @type {?} */ originFilePath = _this.resolveModule(origin, filePath);\n                    if (!originFilePath) {\n                        _this.reportError(new Error(\"Couldn't resolve original symbol for \" + origin + \" from \" + filePath));\n                    }\n                    else {\n                        _this.symbolResourcePaths.set(symbol, originFilePath);\n                    }\n                }\n                resolvedSymbols.push(_this.createResolvedSymbol(symbol, filePath, topLevelSymbolNames_1, symbolMeta));\n            });\n        }\n        resolvedSymbols.forEach(function (resolvedSymbol) { return _this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol); });\n        this.symbolFromFile.set(filePath, resolvedSymbols.map(function (resolvedSymbol) { return resolvedSymbol.symbol; }));\n    };\n    /**\n     * @param {?} sourceSymbol\n     * @param {?} topLevelPath\n     * @param {?} topLevelSymbolNames\n     * @param {?} metadata\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.createResolvedSymbol = /**\n     * @param {?} sourceSymbol\n     * @param {?} topLevelPath\n     * @param {?} topLevelSymbolNames\n     * @param {?} metadata\n     * @return {?}\n     */\n    function (sourceSymbol, topLevelPath, topLevelSymbolNames, metadata) {\n        var _this = this;\n        // For classes that don't have Angular summaries / metadata,\n        // we only keep their arity, but nothing else\n        // (e.g. their constructor parameters).\n        // We do this to prevent introducing deep imports\n        // as we didn't generate .ngfactory.ts files with proper reexports.\n        var /** @type {?} */ isTsFile = TS.test(sourceSymbol.filePath);\n        if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) && !isTsFile && metadata &&\n            metadata['__symbolic'] === 'class') {\n            var /** @type {?} */ transformedMeta_1 = { __symbolic: 'class', arity: metadata.arity };\n            return new ResolvedStaticSymbol(sourceSymbol, transformedMeta_1);\n        }\n        var /** @type {?} */ _originalFileMemo;\n        var /** @type {?} */ getOriginalName = function () {\n            if (!_originalFileMemo) {\n                // Guess what hte original file name is from the reference. If it has a `.d.ts` extension\n                // replace it with `.ts`. If it already has `.ts` just leave it in place. If it doesn't have\n                // .ts or .d.ts, append `.ts'. Also, if it is in `node_modules`, trim the `node_module`\n                // location as it is not important to finding the file.\n                _originalFileMemo =\n                    _this.host.getOutputName(topLevelPath.replace(/((\\.ts)|(\\.d\\.ts)|)$/, '.ts')\n                        .replace(/^.*node_modules[/\\\\]/, ''));\n            }\n            return _originalFileMemo;\n        };\n        var /** @type {?} */ self = this;\n        var ReferenceTransformer = /** @class */ (function (_super) {\n            tslib_1.__extends(ReferenceTransformer, _super);\n            function ReferenceTransformer() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /**\n             * @param {?} map\n             * @param {?} functionParams\n             * @return {?}\n             */\n            ReferenceTransformer.prototype.visitStringMap = /**\n             * @param {?} map\n             * @param {?} functionParams\n             * @return {?}\n             */\n            function (map, functionParams) {\n                var /** @type {?} */ symbolic = map['__symbolic'];\n                if (symbolic === 'function') {\n                    var /** @type {?} */ oldLen = functionParams.length;\n                    functionParams.push.apply(functionParams, (map['parameters'] || []));\n                    var /** @type {?} */ result = _super.prototype.visitStringMap.call(this, map, functionParams);\n                    functionParams.length = oldLen;\n                    return result;\n                }\n                else if (symbolic === 'reference') {\n                    var /** @type {?} */ module = map['module'];\n                    var /** @type {?} */ name_1 = map['name'] ? unescapeIdentifier(map['name']) : map['name'];\n                    if (!name_1) {\n                        return null;\n                    }\n                    var /** @type {?} */ filePath = void 0;\n                    if (module) {\n                        filePath = /** @type {?} */ ((self.resolveModule(module, sourceSymbol.filePath)));\n                        if (!filePath) {\n                            return {\n                                __symbolic: 'error',\n                                message: \"Could not resolve \" + module + \" relative to \" + sourceSymbol.filePath + \".\",\n                                line: map[\"line\"],\n                                character: map[\"character\"],\n                                fileName: getOriginalName()\n                            };\n                        }\n                        return {\n                            __symbolic: 'resolved',\n                            symbol: self.getStaticSymbol(filePath, name_1),\n                            line: map[\"line\"],\n                            character: map[\"character\"],\n                            fileName: getOriginalName()\n                        };\n                    }\n                    else if (functionParams.indexOf(name_1) >= 0) {\n                        // reference to a function parameter\n                        return { __symbolic: 'reference', name: name_1 };\n                    }\n                    else {\n                        if (topLevelSymbolNames.has(name_1)) {\n                            return self.getStaticSymbol(topLevelPath, name_1);\n                        }\n                        // ambient value\n                        null;\n                    }\n                }\n                else if (symbolic === 'error') {\n                    return tslib_1.__assign({}, map, { fileName: getOriginalName() });\n                }\n                else {\n                    return _super.prototype.visitStringMap.call(this, map, functionParams);\n                }\n            };\n            return ReferenceTransformer;\n        }(ValueTransformer));\n        var /** @type {?} */ transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);\n        var /** @type {?} */ unwrappedTransformedMeta = unwrapResolvedMetadata(transformedMeta);\n        if (unwrappedTransformedMeta instanceof StaticSymbol) {\n            return this.createExport(sourceSymbol, unwrappedTransformedMeta);\n        }\n        return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);\n    };\n    /**\n     * @param {?} sourceSymbol\n     * @param {?} targetSymbol\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.createExport = /**\n     * @param {?} sourceSymbol\n     * @param {?} targetSymbol\n     * @return {?}\n     */\n    function (sourceSymbol, targetSymbol) {\n        sourceSymbol.assertNoMembers();\n        targetSymbol.assertNoMembers();\n        if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) &&\n            this.summaryResolver.isLibraryFile(targetSymbol.filePath)) {\n            // This case is for an ng library importing symbols from a plain ts library\n            // transitively.\n            // Note: We rely on the fact that we discover symbols in the direction\n            // from source files to library files\n            this.importAs.set(targetSymbol, this.getImportAs(sourceSymbol) || sourceSymbol);\n        }\n        return new ResolvedStaticSymbol(sourceSymbol, targetSymbol);\n    };\n    /**\n     * @param {?} error\n     * @param {?=} context\n     * @param {?=} path\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.reportError = /**\n     * @param {?} error\n     * @param {?=} context\n     * @param {?=} path\n     * @return {?}\n     */\n    function (error, context, path) {\n        if (this.errorRecorder) {\n            this.errorRecorder(error, (context && context.filePath) || path);\n        }\n        else {\n            throw error;\n        }\n    };\n    /**\n     * @param {?} module an absolute path to a module file.\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getModuleMetadata = /**\n     * @param {?} module an absolute path to a module file.\n     * @return {?}\n     */\n    function (module) {\n        var /** @type {?} */ moduleMetadata = this.metadataCache.get(module);\n        if (!moduleMetadata) {\n            var /** @type {?} */ moduleMetadatas = this.host.getMetadataFor(module);\n            if (moduleMetadatas) {\n                var /** @type {?} */ maxVersion_1 = -1;\n                moduleMetadatas.forEach(function (md) {\n                    if (md && md['version'] > maxVersion_1) {\n                        maxVersion_1 = md['version'];\n                        moduleMetadata = md;\n                    }\n                });\n            }\n            if (!moduleMetadata) {\n                moduleMetadata =\n                    { __symbolic: 'module', version: SUPPORTED_SCHEMA_VERSION, module: module, metadata: {} };\n            }\n            if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {\n                var /** @type {?} */ errorMessage = moduleMetadata['version'] == 2 ?\n                    \"Unsupported metadata version \" + moduleMetadata['version'] + \" for module \" + module + \". This module should be compiled with a newer version of ngc\" :\n                    \"Metadata version mismatch for module \" + module + \", found version \" + moduleMetadata['version'] + \", expected \" + SUPPORTED_SCHEMA_VERSION;\n                this.reportError(new Error(errorMessage));\n            }\n            this.metadataCache.set(module, moduleMetadata);\n        }\n        return moduleMetadata;\n    };\n    /**\n     * @param {?} module\n     * @param {?} symbolName\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getSymbolByModule = /**\n     * @param {?} module\n     * @param {?} symbolName\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    function (module, symbolName, containingFile) {\n        var /** @type {?} */ filePath = this.resolveModule(module, containingFile);\n        if (!filePath) {\n            this.reportError(new Error(\"Could not resolve module \" + module + (containingFile ? ' relative to ' +\n                containingFile : '')));\n            return this.getStaticSymbol(\"ERROR:\" + module, symbolName);\n        }\n        return this.getStaticSymbol(filePath, symbolName);\n    };\n    /**\n     * @param {?} module\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.resolveModule = /**\n     * @param {?} module\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    function (module, containingFile) {\n        try {\n            return this.host.moduleNameToFileName(module, containingFile);\n        }\n        catch (/** @type {?} */ e) {\n            console.error(\"Could not resolve module '\" + module + \"' relative to file \" + containingFile);\n            this.reportError(e, undefined, containingFile);\n        }\n        return null;\n    };\n    return StaticSymbolResolver;\n}());\n/**\n * This class is responsible for loading metadata per symbol,\n * and normalizing references between symbols.\n *\n * Internally, it only uses symbols without members,\n * and deduces the values for symbols with members based\n * on these symbols.\n */\nexport { StaticSymbolResolver };\nfunction StaticSymbolResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StaticSymbolResolver.prototype.metadataCache;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.resolvedSymbols;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.resolvedFilePaths;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.importAs;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.symbolResourcePaths;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.symbolFromFile;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.knownFileNameToModuleNames;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.host;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.staticSymbolCache;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.summaryResolver;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.errorRecorder;\n}\n/**\n * @param {?} identifier\n * @return {?}\n */\nexport function unescapeIdentifier(identifier) {\n    return identifier.startsWith('___') ? identifier.substr(1) : identifier;\n}\n/**\n * @param {?} metadata\n * @return {?}\n */\nexport function unwrapResolvedMetadata(metadata) {\n    if (metadata && metadata.__symbolic === 'resolved') {\n        return metadata.symbol;\n    }\n    return metadata;\n}\n//# sourceMappingURL=static_symbol_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport * as tslib_1 from \"tslib\";\nimport { CompileNgModuleMetadata, CompileSummaryKind } from '../compile_metadata';\nimport * as o from '../output/output_ast';\nimport { ValueTransformer, visitValue } from '../util';\nimport { StaticSymbol } from './static_symbol';\nimport { unwrapResolvedMetadata } from './static_symbol_resolver';\nimport { isLoweredSymbol, ngfactoryFilePath, summaryForJitFileName, summaryForJitName } from './util';\n/**\n * @param {?} srcFileName\n * @param {?} forJitCtx\n * @param {?} summaryResolver\n * @param {?} symbolResolver\n * @param {?} symbols\n * @param {?} types\n * @return {?}\n */\nexport function serializeSummaries(srcFileName, forJitCtx, summaryResolver, symbolResolver, symbols, types) {\n    var /** @type {?} */ toJsonSerializer = new ToJsonSerializer(symbolResolver, summaryResolver, srcFileName);\n    // for symbols, we use everything except for the class metadata itself\n    // (we keep the statics though), as the class metadata is contained in the\n    // CompileTypeSummary.\n    symbols.forEach(function (resolvedSymbol) {\n        return toJsonSerializer.addSummary({ symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata });\n    });\n    // Add type summaries.\n    types.forEach(function (_a) {\n        var summary = _a.summary, metadata = _a.metadata;\n        toJsonSerializer.addSummary({ symbol: summary.type.reference, metadata: undefined, type: summary });\n    });\n    var _a = toJsonSerializer.serialize(), json = _a.json, exportAs = _a.exportAs;\n    if (forJitCtx) {\n        var /** @type {?} */ forJitSerializer_1 = new ForJitSerializer(forJitCtx, symbolResolver, summaryResolver);\n        types.forEach(function (_a) {\n            var summary = _a.summary, metadata = _a.metadata;\n            forJitSerializer_1.addSourceType(summary, metadata);\n        });\n        toJsonSerializer.unprocessedSymbolSummariesBySymbol.forEach(function (summary) {\n            if (summaryResolver.isLibraryFile(summary.symbol.filePath) && summary.type) {\n                forJitSerializer_1.addLibType(summary.type);\n            }\n        });\n        forJitSerializer_1.serialize(exportAs);\n    }\n    return { json: json, exportAs: exportAs };\n}\n/**\n * @param {?} symbolCache\n * @param {?} summaryResolver\n * @param {?} libraryFileName\n * @param {?} json\n * @return {?}\n */\nexport function deserializeSummaries(symbolCache, summaryResolver, libraryFileName, json) {\n    var /** @type {?} */ deserializer = new FromJsonDeserializer(symbolCache, summaryResolver);\n    return deserializer.deserialize(libraryFileName, json);\n}\n/**\n * @param {?} outputCtx\n * @param {?} reference\n * @return {?}\n */\nexport function createForJitStub(outputCtx, reference) {\n    return createSummaryForJitFunction(outputCtx, reference, o.NULL_EXPR);\n}\n/**\n * @param {?} outputCtx\n * @param {?} reference\n * @param {?} value\n * @return {?}\n */\nfunction createSummaryForJitFunction(outputCtx, reference, value) {\n    var /** @type {?} */ fnName = summaryForJitName(reference.name);\n    outputCtx.statements.push(o.fn([], [new o.ReturnStatement(value)], new o.ArrayType(o.DYNAMIC_TYPE)).toDeclStmt(fnName, [\n        o.StmtModifier.Final, o.StmtModifier.Exported\n    ]));\n}\n/** @enum {number} */\nvar SerializationFlags = {\n    None: 0,\n    ResolveValue: 1,\n};\nvar ToJsonSerializer = /** @class */ (function (_super) {\n    tslib_1.__extends(ToJsonSerializer, _super);\n    function ToJsonSerializer(symbolResolver, summaryResolver, srcFileName) {\n        var _this = _super.call(this) || this;\n        _this.symbolResolver = symbolResolver;\n        _this.summaryResolver = summaryResolver;\n        _this.srcFileName = srcFileName;\n        _this.symbols = [];\n        _this.indexBySymbol = new Map();\n        _this.reexportedBy = new Map();\n        _this.processedSummaryBySymbol = new Map();\n        _this.processedSummaries = [];\n        _this.unprocessedSymbolSummariesBySymbol = new Map();\n        _this.moduleName = symbolResolver.getKnownModuleName(srcFileName);\n        return _this;\n    }\n    /**\n     * @param {?} summary\n     * @return {?}\n     */\n    ToJsonSerializer.prototype.addSummary = /**\n     * @param {?} summary\n     * @return {?}\n     */\n    function (summary) {\n        var _this = this;\n        var /** @type {?} */ unprocessedSummary = this.unprocessedSymbolSummariesBySymbol.get(summary.symbol);\n        var /** @type {?} */ processedSummary = this.processedSummaryBySymbol.get(summary.symbol);\n        if (!unprocessedSummary) {\n            unprocessedSummary = { symbol: summary.symbol, metadata: undefined };\n            this.unprocessedSymbolSummariesBySymbol.set(summary.symbol, unprocessedSummary);\n            processedSummary = { symbol: this.processValue(summary.symbol, 0 /* None */) };\n            this.processedSummaries.push(processedSummary);\n            this.processedSummaryBySymbol.set(summary.symbol, processedSummary);\n        }\n        if (!unprocessedSummary.metadata && summary.metadata) {\n            var /** @type {?} */ metadata_1 = summary.metadata || {};\n            if (metadata_1.__symbolic === 'class') {\n                // For classes, we keep everything except their class decorators.\n                // We need to keep e.g. the ctor args, method names, method decorators\n                // so that the class can be extended in another compilation unit.\n                // We don't keep the class decorators as\n                // 1) they refer to data\n                //   that should not cause a rebuild of downstream compilation units\n                //   (e.g. inline templates of @Component, or @NgModule.declarations)\n                // 2) their data is already captured in TypeSummaries, e.g. DirectiveSummary.\n                var /** @type {?} */ clone_1 = {};\n                Object.keys(metadata_1).forEach(function (propName) {\n                    if (propName !== 'decorators') {\n                        clone_1[propName] = metadata_1[propName];\n                    }\n                });\n                metadata_1 = clone_1;\n            }\n            else if (isCall(metadata_1)) {\n                if (!isFunctionCall(metadata_1) && !isMethodCallOnVariable(metadata_1)) {\n                    // Don't store complex calls as we won't be able to simplify them anyways later on.\n                    // Don't store complex calls as we won't be able to simplify them anyways later on.\n                    metadata_1 = {\n                        __symbolic: 'error',\n                        message: 'Complex function calls are not supported.',\n                    };\n                }\n            }\n            // Note: We need to keep storing ctor calls for e.g.\n            // `export const x = new InjectionToken(...)`\n            unprocessedSummary.metadata = metadata_1;\n            processedSummary.metadata = this.processValue(metadata_1, 1 /* ResolveValue */);\n            if (metadata_1 instanceof StaticSymbol &&\n                this.summaryResolver.isLibraryFile(metadata_1.filePath)) {\n                var /** @type {?} */ declarationSymbol = this.symbols[/** @type {?} */ ((this.indexBySymbol.get(metadata_1)))];\n                if (!isLoweredSymbol(declarationSymbol.name)) {\n                    // Note: symbols that were introduced during codegen in the user file can have a reexport\n                    // if a user used `export *`. However, we can't rely on this as tsickle will change\n                    // `export *` into named exports, using only the information from the typechecker.\n                    // As we introduce the new symbols after typecheck, Tsickle does not know about them,\n                    // and omits them when expanding `export *`.\n                    // So we have to keep reexporting these symbols manually via .ngfactory files.\n                    this.reexportedBy.set(declarationSymbol, summary.symbol);\n                }\n            }\n        }\n        if (!unprocessedSummary.type && summary.type) {\n            unprocessedSummary.type = summary.type;\n            // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,\n            // as the type summaries already contain the transitive data that they require\n            // (in a minimal way).\n            processedSummary.type = this.processValue(summary.type, 0 /* None */);\n            // except for reexported directives / pipes, so we need to store\n            // their summaries explicitly.\n            if (summary.type.summaryKind === CompileSummaryKind.NgModule) {\n                var /** @type {?} */ ngModuleSummary = /** @type {?} */ (summary.type);\n                ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function (id) {\n                    var /** @type {?} */ symbol = id.reference;\n                    if (_this.summaryResolver.isLibraryFile(symbol.filePath) &&\n                        !_this.unprocessedSymbolSummariesBySymbol.has(symbol)) {\n                        var /** @type {?} */ summary_1 = _this.summaryResolver.resolveSummary(symbol);\n                        if (summary_1) {\n                            _this.addSummary(summary_1);\n                        }\n                    }\n                });\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ToJsonSerializer.prototype.serialize = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ exportAs = [];\n        var /** @type {?} */ json = JSON.stringify({\n            moduleName: this.moduleName,\n            summaries: this.processedSummaries,\n            symbols: this.symbols.map(function (symbol, index) {\n                symbol.assertNoMembers();\n                var /** @type {?} */ importAs = /** @type {?} */ ((undefined));\n                if (_this.summaryResolver.isLibraryFile(symbol.filePath)) {\n                    var /** @type {?} */ reexportSymbol = _this.reexportedBy.get(symbol);\n                    if (reexportSymbol) {\n                        importAs = /** @type {?} */ ((_this.indexBySymbol.get(reexportSymbol)));\n                    }\n                    else {\n                        var /** @type {?} */ summary = _this.unprocessedSymbolSummariesBySymbol.get(symbol);\n                        if (!summary || !summary.metadata || summary.metadata.__symbolic !== 'interface') {\n                            importAs = symbol.name + \"_\" + index;\n                            exportAs.push({ symbol: symbol, exportAs: importAs });\n                        }\n                    }\n                }\n                return {\n                    __symbol: index,\n                    name: symbol.name,\n                    filePath: _this.summaryResolver.toSummaryFileName(symbol.filePath, _this.srcFileName),\n                    importAs: importAs\n                };\n            })\n        });\n        return { json: json, exportAs: exportAs };\n    };\n    /**\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    ToJsonSerializer.prototype.processValue = /**\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    function (value, flags) {\n        return visitValue(value, this, flags);\n    };\n    /**\n     * @param {?} value\n     * @param {?} context\n     * @return {?}\n     */\n    ToJsonSerializer.prototype.visitOther = /**\n     * @param {?} value\n     * @param {?} context\n     * @return {?}\n     */\n    function (value, context) {\n        if (value instanceof StaticSymbol) {\n            var /** @type {?} */ baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);\n            var /** @type {?} */ index = this.visitStaticSymbol(baseSymbol, context);\n            return { __symbol: index, members: value.members };\n        }\n    };\n    /**\n     * Strip line and character numbers from ngsummaries.\n     * Emitting them causes white spaces changes to retrigger upstream\n     * recompilations in bazel.\n     * TODO: find out a way to have line and character numbers in errors without\n     * excessive recompilation in bazel.\n     */\n    /**\n     * Strip line and character numbers from ngsummaries.\n     * Emitting them causes white spaces changes to retrigger upstream\n     * recompilations in bazel.\n     * TODO: find out a way to have line and character numbers in errors without\n     * excessive recompilation in bazel.\n     * @param {?} map\n     * @param {?} context\n     * @return {?}\n     */\n    ToJsonSerializer.prototype.visitStringMap = /**\n     * Strip line and character numbers from ngsummaries.\n     * Emitting them causes white spaces changes to retrigger upstream\n     * recompilations in bazel.\n     * TODO: find out a way to have line and character numbers in errors without\n     * excessive recompilation in bazel.\n     * @param {?} map\n     * @param {?} context\n     * @return {?}\n     */\n    function (map, context) {\n        if (map['__symbolic'] === 'resolved') {\n            return visitValue(map[\"symbol\"], this, context);\n        }\n        if (map['__symbolic'] === 'error') {\n            delete map['line'];\n            delete map['character'];\n        }\n        return _super.prototype.visitStringMap.call(this, map, context);\n    };\n    /**\n     * Returns null if the options.resolveValue is true, and the summary for the symbol\n     * resolved to a type or could not be resolved.\n     * @param {?} baseSymbol\n     * @param {?} flags\n     * @return {?}\n     */\n    ToJsonSerializer.prototype.visitStaticSymbol = /**\n     * Returns null if the options.resolveValue is true, and the summary for the symbol\n     * resolved to a type or could not be resolved.\n     * @param {?} baseSymbol\n     * @param {?} flags\n     * @return {?}\n     */\n    function (baseSymbol, flags) {\n        var /** @type {?} */ index = this.indexBySymbol.get(baseSymbol);\n        var /** @type {?} */ summary = null;\n        if (flags & 1 /* ResolveValue */ &&\n            this.summaryResolver.isLibraryFile(baseSymbol.filePath)) {\n            if (this.unprocessedSymbolSummariesBySymbol.has(baseSymbol)) {\n                // the summary for this symbol was already added\n                // -> nothing to do.\n                return /** @type {?} */ ((index));\n            }\n            summary = this.loadSummary(baseSymbol);\n            if (summary && summary.metadata instanceof StaticSymbol) {\n                // The summary is a reexport\n                index = this.visitStaticSymbol(summary.metadata, flags);\n                // reset the summary as it is just a reexport, so we don't want to store it.\n                summary = null;\n            }\n        }\n        else if (index != null) {\n            // Note: == on purpose to compare with undefined!\n            // No summary and the symbol is already added -> nothing to do.\n            return index;\n        }\n        // Note: == on purpose to compare with undefined!\n        if (index == null) {\n            index = this.symbols.length;\n            this.symbols.push(baseSymbol);\n        }\n        this.indexBySymbol.set(baseSymbol, index);\n        if (summary) {\n            this.addSummary(summary);\n        }\n        return index;\n    };\n    /**\n     * @param {?} symbol\n     * @return {?}\n     */\n    ToJsonSerializer.prototype.loadSummary = /**\n     * @param {?} symbol\n     * @return {?}\n     */\n    function (symbol) {\n        var /** @type {?} */ summary = this.summaryResolver.resolveSummary(symbol);\n        if (!summary) {\n            // some symbols might originate from a plain typescript library\n            // that just exported .d.ts and .metadata.json files, i.e. where no summary\n            // files were created.\n            var /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\n            if (resolvedSymbol) {\n                summary = { symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata };\n            }\n        }\n        return summary;\n    };\n    return ToJsonSerializer;\n}(ValueTransformer));\nfunction ToJsonSerializer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ToJsonSerializer.prototype.symbols;\n    /** @type {?} */\n    ToJsonSerializer.prototype.indexBySymbol;\n    /** @type {?} */\n    ToJsonSerializer.prototype.reexportedBy;\n    /** @type {?} */\n    ToJsonSerializer.prototype.processedSummaryBySymbol;\n    /** @type {?} */\n    ToJsonSerializer.prototype.processedSummaries;\n    /** @type {?} */\n    ToJsonSerializer.prototype.moduleName;\n    /** @type {?} */\n    ToJsonSerializer.prototype.unprocessedSymbolSummariesBySymbol;\n    /** @type {?} */\n    ToJsonSerializer.prototype.symbolResolver;\n    /** @type {?} */\n    ToJsonSerializer.prototype.summaryResolver;\n    /** @type {?} */\n    ToJsonSerializer.prototype.srcFileName;\n}\nvar ForJitSerializer = /** @class */ (function () {\n    function ForJitSerializer(outputCtx, symbolResolver, summaryResolver) {\n        this.outputCtx = outputCtx;\n        this.symbolResolver = symbolResolver;\n        this.summaryResolver = summaryResolver;\n        this.data = [];\n    }\n    /**\n     * @param {?} summary\n     * @param {?} metadata\n     * @return {?}\n     */\n    ForJitSerializer.prototype.addSourceType = /**\n     * @param {?} summary\n     * @param {?} metadata\n     * @return {?}\n     */\n    function (summary, metadata) {\n        this.data.push({ summary: summary, metadata: metadata, isLibrary: false });\n    };\n    /**\n     * @param {?} summary\n     * @return {?}\n     */\n    ForJitSerializer.prototype.addLibType = /**\n     * @param {?} summary\n     * @return {?}\n     */\n    function (summary) {\n        this.data.push({ summary: summary, metadata: null, isLibrary: true });\n    };\n    /**\n     * @param {?} exportAsArr\n     * @return {?}\n     */\n    ForJitSerializer.prototype.serialize = /**\n     * @param {?} exportAsArr\n     * @return {?}\n     */\n    function (exportAsArr) {\n        var _this = this;\n        var /** @type {?} */ exportAsBySymbol = new Map();\n        for (var _i = 0, exportAsArr_1 = exportAsArr; _i < exportAsArr_1.length; _i++) {\n            var _a = exportAsArr_1[_i], symbol = _a.symbol, exportAs = _a.exportAs;\n            exportAsBySymbol.set(symbol, exportAs);\n        }\n        var /** @type {?} */ ngModuleSymbols = new Set();\n        for (var _b = 0, _c = this.data; _b < _c.length; _b++) {\n            var _d = _c[_b], summary = _d.summary, metadata = _d.metadata, isLibrary = _d.isLibrary;\n            if (summary.summaryKind === CompileSummaryKind.NgModule) {\n                // collect the symbols that refer to NgModule classes.\n                // Note: we can't just rely on `summary.type.summaryKind` to determine this as\n                // we don't add the summaries of all referenced symbols when we serialize type summaries.\n                // See serializeSummaries for details.\n                ngModuleSymbols.add(summary.type.reference);\n                var /** @type {?} */ modSummary = /** @type {?} */ (summary);\n                for (var _e = 0, _f = modSummary.modules; _e < _f.length; _e++) {\n                    var mod = _f[_e];\n                    ngModuleSymbols.add(mod.reference);\n                }\n            }\n            if (!isLibrary) {\n                var /** @type {?} */ fnName = summaryForJitName(summary.type.reference.name);\n                createSummaryForJitFunction(this.outputCtx, summary.type.reference, this.serializeSummaryWithDeps(summary, /** @type {?} */ ((metadata))));\n            }\n        }\n        ngModuleSymbols.forEach(function (ngModuleSymbol) {\n            if (_this.summaryResolver.isLibraryFile(ngModuleSymbol.filePath)) {\n                var /** @type {?} */ exportAs = exportAsBySymbol.get(ngModuleSymbol) || ngModuleSymbol.name;\n                var /** @type {?} */ jitExportAsName = summaryForJitName(exportAs);\n                _this.outputCtx.statements.push(o.variable(jitExportAsName)\n                    .set(_this.serializeSummaryRef(ngModuleSymbol))\n                    .toDeclStmt(null, [o.StmtModifier.Exported]));\n            }\n        });\n    };\n    /**\n     * @param {?} summary\n     * @param {?} metadata\n     * @return {?}\n     */\n    ForJitSerializer.prototype.serializeSummaryWithDeps = /**\n     * @param {?} summary\n     * @param {?} metadata\n     * @return {?}\n     */\n    function (summary, metadata) {\n        var _this = this;\n        var /** @type {?} */ expressions = [this.serializeSummary(summary)];\n        var /** @type {?} */ providers = [];\n        if (metadata instanceof CompileNgModuleMetadata) {\n            expressions.push.apply(expressions, \n            // For directives / pipes, we only add the declared ones,\n            // and rely on transitively importing NgModules to get the transitive\n            // summaries.\n            metadata.declaredDirectives.concat(metadata.declaredPipes)\n                .map(function (type) { return type.reference; })\n                .concat(metadata.transitiveModule.modules.map(function (type) { return type.reference; })\n                .filter(function (ref) { return ref !== metadata.type.reference; }))\n                .map(function (ref) { return _this.serializeSummaryRef(ref); }));\n            // Note: We don't use `NgModuleSummary.providers`, as that one is transitive,\n            // and we already have transitive modules.\n            providers = metadata.providers;\n        }\n        else if (summary.summaryKind === CompileSummaryKind.Directive) {\n            var /** @type {?} */ dirSummary = /** @type {?} */ (summary);\n            providers = dirSummary.providers.concat(dirSummary.viewProviders);\n        }\n        // Note: We can't just refer to the `ngsummary.ts` files for `useClass` providers (as we do for\n        // declaredDirectives / declaredPipes), as we allow\n        // providers without ctor arguments to skip the `@Injectable` decorator,\n        // i.e. we didn't generate .ngsummary.ts files for these.\n        expressions.push.apply(expressions, providers.filter(function (provider) { return !!provider.useClass; }).map(function (provider) {\n            return _this.serializeSummary(/** @type {?} */ ({\n                summaryKind: CompileSummaryKind.Injectable, type: provider.useClass\n            }));\n        }));\n        return o.literalArr(expressions);\n    };\n    /**\n     * @param {?} typeSymbol\n     * @return {?}\n     */\n    ForJitSerializer.prototype.serializeSummaryRef = /**\n     * @param {?} typeSymbol\n     * @return {?}\n     */\n    function (typeSymbol) {\n        var /** @type {?} */ jitImportedSymbol = this.symbolResolver.getStaticSymbol(summaryForJitFileName(typeSymbol.filePath), summaryForJitName(typeSymbol.name));\n        return this.outputCtx.importExpr(jitImportedSymbol);\n    };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    ForJitSerializer.prototype.serializeSummary = /**\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        var /** @type {?} */ outputCtx = this.outputCtx;\n        var Transformer = /** @class */ (function () {\n            function Transformer() {\n            }\n            /**\n             * @param {?} arr\n             * @param {?} context\n             * @return {?}\n             */\n            Transformer.prototype.visitArray = /**\n             * @param {?} arr\n             * @param {?} context\n             * @return {?}\n             */\n            function (arr, context) {\n                var _this = this;\n                return o.literalArr(arr.map(function (entry) { return visitValue(entry, _this, context); }));\n            };\n            /**\n             * @param {?} map\n             * @param {?} context\n             * @return {?}\n             */\n            Transformer.prototype.visitStringMap = /**\n             * @param {?} map\n             * @param {?} context\n             * @return {?}\n             */\n            function (map, context) {\n                var _this = this;\n                return new o.LiteralMapExpr(Object.keys(map).map(function (key) { return new o.LiteralMapEntry(key, visitValue(map[key], _this, context), false); }));\n            };\n            /**\n             * @param {?} value\n             * @param {?} context\n             * @return {?}\n             */\n            Transformer.prototype.visitPrimitive = /**\n             * @param {?} value\n             * @param {?} context\n             * @return {?}\n             */\n            function (value, context) { return o.literal(value); };\n            /**\n             * @param {?} value\n             * @param {?} context\n             * @return {?}\n             */\n            Transformer.prototype.visitOther = /**\n             * @param {?} value\n             * @param {?} context\n             * @return {?}\n             */\n            function (value, context) {\n                if (value instanceof StaticSymbol) {\n                    return outputCtx.importExpr(value);\n                }\n                else {\n                    throw new Error(\"Illegal State: Encountered value \" + value);\n                }\n            };\n            return Transformer;\n        }());\n        return visitValue(data, new Transformer(), null);\n    };\n    return ForJitSerializer;\n}());\nfunction ForJitSerializer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ForJitSerializer.prototype.data;\n    /** @type {?} */\n    ForJitSerializer.prototype.outputCtx;\n    /** @type {?} */\n    ForJitSerializer.prototype.symbolResolver;\n    /** @type {?} */\n    ForJitSerializer.prototype.summaryResolver;\n}\nvar FromJsonDeserializer = /** @class */ (function (_super) {\n    tslib_1.__extends(FromJsonDeserializer, _super);\n    function FromJsonDeserializer(symbolCache, summaryResolver) {\n        var _this = _super.call(this) || this;\n        _this.symbolCache = symbolCache;\n        _this.summaryResolver = summaryResolver;\n        return _this;\n    }\n    /**\n     * @param {?} libraryFileName\n     * @param {?} json\n     * @return {?}\n     */\n    FromJsonDeserializer.prototype.deserialize = /**\n     * @param {?} libraryFileName\n     * @param {?} json\n     * @return {?}\n     */\n    function (libraryFileName, json) {\n        var _this = this;\n        var /** @type {?} */ data = JSON.parse(json);\n        var /** @type {?} */ allImportAs = [];\n        this.symbols = data.symbols.map(function (serializedSymbol) {\n            return _this.symbolCache.get(_this.summaryResolver.fromSummaryFileName(serializedSymbol.filePath, libraryFileName), serializedSymbol.name);\n        });\n        data.symbols.forEach(function (serializedSymbol, index) {\n            var /** @type {?} */ symbol = _this.symbols[index];\n            var /** @type {?} */ importAs = serializedSymbol.importAs;\n            if (typeof importAs === 'number') {\n                allImportAs.push({ symbol: symbol, importAs: _this.symbols[importAs] });\n            }\n            else if (typeof importAs === 'string') {\n                allImportAs.push({ symbol: symbol, importAs: _this.symbolCache.get(ngfactoryFilePath(libraryFileName), importAs) });\n            }\n        });\n        var /** @type {?} */ summaries = /** @type {?} */ (visitValue(data.summaries, this, null));\n        return { moduleName: data.moduleName, summaries: summaries, importAs: allImportAs };\n    };\n    /**\n     * @param {?} map\n     * @param {?} context\n     * @return {?}\n     */\n    FromJsonDeserializer.prototype.visitStringMap = /**\n     * @param {?} map\n     * @param {?} context\n     * @return {?}\n     */\n    function (map, context) {\n        if ('__symbol' in map) {\n            var /** @type {?} */ baseSymbol = this.symbols[map['__symbol']];\n            var /** @type {?} */ members = map['members'];\n            return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) :\n                baseSymbol;\n        }\n        else {\n            return _super.prototype.visitStringMap.call(this, map, context);\n        }\n    };\n    return FromJsonDeserializer;\n}(ValueTransformer));\nfunction FromJsonDeserializer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    FromJsonDeserializer.prototype.symbols;\n    /** @type {?} */\n    FromJsonDeserializer.prototype.symbolCache;\n    /** @type {?} */\n    FromJsonDeserializer.prototype.summaryResolver;\n}\n/**\n * @param {?} metadata\n * @return {?}\n */\nfunction isCall(metadata) {\n    return metadata && metadata.__symbolic === 'call';\n}\n/**\n * @param {?} metadata\n * @return {?}\n */\nfunction isFunctionCall(metadata) {\n    return isCall(metadata) && unwrapResolvedMetadata(metadata.expression) instanceof StaticSymbol;\n}\n/**\n * @param {?} metadata\n * @return {?}\n */\nfunction isMethodCallOnVariable(metadata) {\n    return isCall(metadata) && metadata.expression && metadata.expression.__symbolic === 'select' &&\n        unwrapResolvedMetadata(metadata.expression.expression) instanceof StaticSymbol;\n}\n//# sourceMappingURL=summary_serializer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { componentFactoryName, flatten, identifierName, templateSourceUrl } from '../compile_metadata';\nimport { ConstantPool } from '../constant_pool';\nimport { ViewEncapsulation } from '../core';\nimport { MessageBundle } from '../i18n/message_bundle';\nimport { Identifiers, createTokenForExternalReference } from '../identifiers';\nimport { HtmlParser } from '../ml_parser/html_parser';\nimport { DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig } from '../ml_parser/interpolation_config';\nimport * as o from '../output/output_ast';\nimport { compileNgModule as compileIvyModule } from '../render3/r3_module_compiler';\nimport { compilePipe as compileIvyPipe } from '../render3/r3_pipe_compiler';\nimport { compileComponent as compileIvyComponent, compileDirective as compileIvyDirective } from '../render3/r3_view_compiler';\nimport { BindingParser } from '../template_parser/binding_parser';\nimport { error, syntaxError, visitValue } from '../util';\nimport { GeneratedFile } from './generated_file';\nimport { listLazyRoutes, parseLazyRoute } from './lazy_routes';\nimport { StaticSymbol } from './static_symbol';\nimport { createForJitStub, serializeSummaries } from './summary_serializer';\nimport { ngfactoryFilePath, normalizeGenFileSuffix, splitTypescriptSuffix, summaryFileName, summaryForJitFileName } from './util';\n/** @enum {number} */\nvar StubEmitFlags = {\n    Basic: 1,\n    TypeCheck: 2,\n    All: 3,\n};\nStubEmitFlags[StubEmitFlags.Basic] = \"Basic\";\nStubEmitFlags[StubEmitFlags.TypeCheck] = \"TypeCheck\";\nStubEmitFlags[StubEmitFlags.All] = \"All\";\nvar AotCompiler = /** @class */ (function () {\n    function AotCompiler(_config, _options, _host, reflector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _typeCheckCompiler, _ngModuleCompiler, _injectableCompiler, _outputEmitter, _summaryResolver, _symbolResolver) {\n        this._config = _config;\n        this._options = _options;\n        this._host = _host;\n        this.reflector = reflector;\n        this._metadataResolver = _metadataResolver;\n        this._templateParser = _templateParser;\n        this._styleCompiler = _styleCompiler;\n        this._viewCompiler = _viewCompiler;\n        this._typeCheckCompiler = _typeCheckCompiler;\n        this._ngModuleCompiler = _ngModuleCompiler;\n        this._injectableCompiler = _injectableCompiler;\n        this._outputEmitter = _outputEmitter;\n        this._summaryResolver = _summaryResolver;\n        this._symbolResolver = _symbolResolver;\n        this._templateAstCache = new Map();\n        this._analyzedFiles = new Map();\n        this._analyzedFilesForInjectables = new Map();\n    }\n    /**\n     * @return {?}\n     */\n    AotCompiler.prototype.clearCache = /**\n     * @return {?}\n     */\n    function () { this._metadataResolver.clearCache(); };\n    /**\n     * @param {?} rootFiles\n     * @return {?}\n     */\n    AotCompiler.prototype.analyzeModulesSync = /**\n     * @param {?} rootFiles\n     * @return {?}\n     */\n    function (rootFiles) {\n        var _this = this;\n        var /** @type {?} */ analyzeResult = analyzeAndValidateNgModules(rootFiles, this._host, this._symbolResolver, this._metadataResolver);\n        analyzeResult.ngModules.forEach(function (ngModule) {\n            return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, true);\n        });\n        return analyzeResult;\n    };\n    /**\n     * @param {?} rootFiles\n     * @return {?}\n     */\n    AotCompiler.prototype.analyzeModulesAsync = /**\n     * @param {?} rootFiles\n     * @return {?}\n     */\n    function (rootFiles) {\n        var _this = this;\n        var /** @type {?} */ analyzeResult = analyzeAndValidateNgModules(rootFiles, this._host, this._symbolResolver, this._metadataResolver);\n        return Promise\n            .all(analyzeResult.ngModules.map(function (ngModule) {\n            return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false);\n        }))\n            .then(function () { return analyzeResult; });\n    };\n    /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    AotCompiler.prototype._analyzeFile = /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    function (fileName) {\n        var /** @type {?} */ analyzedFile = this._analyzedFiles.get(fileName);\n        if (!analyzedFile) {\n            analyzedFile =\n                analyzeFile(this._host, this._symbolResolver, this._metadataResolver, fileName);\n            this._analyzedFiles.set(fileName, analyzedFile);\n        }\n        return analyzedFile;\n    };\n    /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    AotCompiler.prototype._analyzeFileForInjectables = /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    function (fileName) {\n        var /** @type {?} */ analyzedFile = this._analyzedFilesForInjectables.get(fileName);\n        if (!analyzedFile) {\n            analyzedFile = analyzeFileForInjectables(this._host, this._symbolResolver, this._metadataResolver, fileName);\n            this._analyzedFilesForInjectables.set(fileName, analyzedFile);\n        }\n        return analyzedFile;\n    };\n    /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    AotCompiler.prototype.findGeneratedFileNames = /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    function (fileName) {\n        var _this = this;\n        var /** @type {?} */ genFileNames = [];\n        var /** @type {?} */ file = this._analyzeFile(fileName);\n        // Make sure we create a .ngfactory if we have a injectable/directive/pipe/NgModule\n        // or a reference to a non source file.\n        // Note: This is overestimating the required .ngfactory files as the real calculation is harder.\n        // Only do this for StubEmitFlags.Basic, as adding a type check block\n        // does not change this file (as we generate type check blocks based on NgModules).\n        if (this._options.allowEmptyCodegenFiles || file.directives.length || file.pipes.length ||\n            file.injectables.length || file.ngModules.length || file.exportsNonSourceFiles) {\n            genFileNames.push(ngfactoryFilePath(file.fileName, true));\n            if (this._options.enableSummariesForJit) {\n                genFileNames.push(summaryForJitFileName(file.fileName, true));\n            }\n        }\n        var /** @type {?} */ fileSuffix = normalizeGenFileSuffix(splitTypescriptSuffix(file.fileName, true)[1]);\n        file.directives.forEach(function (dirSymbol) {\n            var /** @type {?} */ compMeta = /** @type {?} */ ((_this._metadataResolver.getNonNormalizedDirectiveMetadata(dirSymbol))).metadata;\n            if (!compMeta.isComponent) {\n                return;\n            } /** @type {?} */\n            ((\n            // Note: compMeta is a component and therefore template is non null.\n            compMeta.template)).styleUrls.forEach(function (styleUrl) {\n                var /** @type {?} */ normalizedUrl = _this._host.resourceNameToFileName(styleUrl, file.fileName);\n                if (!normalizedUrl) {\n                    throw syntaxError(\"Couldn't resolve resource \" + styleUrl + \" relative to \" + file.fileName);\n                }\n                var /** @type {?} */ needsShim = (/** @type {?} */ ((compMeta.template)).encapsulation || _this._config.defaultEncapsulation) === ViewEncapsulation.Emulated;\n                genFileNames.push(_stylesModuleUrl(normalizedUrl, needsShim, fileSuffix));\n                if (_this._options.allowEmptyCodegenFiles) {\n                    genFileNames.push(_stylesModuleUrl(normalizedUrl, !needsShim, fileSuffix));\n                }\n            });\n        });\n        return genFileNames;\n    };\n    /**\n     * @param {?} genFileName\n     * @param {?=} originalFileName\n     * @return {?}\n     */\n    AotCompiler.prototype.emitBasicStub = /**\n     * @param {?} genFileName\n     * @param {?=} originalFileName\n     * @return {?}\n     */\n    function (genFileName, originalFileName) {\n        var /** @type {?} */ outputCtx = this._createOutputContext(genFileName);\n        if (genFileName.endsWith('.ngfactory.ts')) {\n            if (!originalFileName) {\n                throw new Error(\"Assertion error: require the original file for .ngfactory.ts stubs. File: \" + genFileName);\n            }\n            var /** @type {?} */ originalFile = this._analyzeFile(originalFileName);\n            this._createNgFactoryStub(outputCtx, originalFile, StubEmitFlags.Basic);\n        }\n        else if (genFileName.endsWith('.ngsummary.ts')) {\n            if (this._options.enableSummariesForJit) {\n                if (!originalFileName) {\n                    throw new Error(\"Assertion error: require the original file for .ngsummary.ts stubs. File: \" + genFileName);\n                }\n                var /** @type {?} */ originalFile = this._analyzeFile(originalFileName);\n                _createEmptyStub(outputCtx);\n                originalFile.ngModules.forEach(function (ngModule) {\n                    // create exports that user code can reference\n                    createForJitStub(outputCtx, ngModule.type.reference);\n                });\n            }\n        }\n        else if (genFileName.endsWith('.ngstyle.ts')) {\n            _createEmptyStub(outputCtx);\n        }\n        // Note: for the stubs, we don't need a property srcFileUrl,\n        // as later on in emitAllImpls we will create the proper GeneratedFiles with the\n        // correct srcFileUrl.\n        // This is good as e.g. for .ngstyle.ts files we can't derive\n        // the url of components based on the genFileUrl.\n        return this._codegenSourceModule('unknown', outputCtx);\n    };\n    /**\n     * @param {?} genFileName\n     * @param {?} originalFileName\n     * @return {?}\n     */\n    AotCompiler.prototype.emitTypeCheckStub = /**\n     * @param {?} genFileName\n     * @param {?} originalFileName\n     * @return {?}\n     */\n    function (genFileName, originalFileName) {\n        var /** @type {?} */ originalFile = this._analyzeFile(originalFileName);\n        var /** @type {?} */ outputCtx = this._createOutputContext(genFileName);\n        if (genFileName.endsWith('.ngfactory.ts')) {\n            this._createNgFactoryStub(outputCtx, originalFile, StubEmitFlags.TypeCheck);\n        }\n        return outputCtx.statements.length > 0 ?\n            this._codegenSourceModule(originalFile.fileName, outputCtx) :\n            null;\n    };\n    /**\n     * @param {?} fileNames\n     * @param {?} tsFiles\n     * @return {?}\n     */\n    AotCompiler.prototype.loadFilesAsync = /**\n     * @param {?} fileNames\n     * @param {?} tsFiles\n     * @return {?}\n     */\n    function (fileNames, tsFiles) {\n        var _this = this;\n        var /** @type {?} */ files = fileNames.map(function (fileName) { return _this._analyzeFile(fileName); });\n        var /** @type {?} */ loadingPromises = [];\n        files.forEach(function (file) {\n            return file.ngModules.forEach(function (ngModule) {\n                return loadingPromises.push(_this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false));\n            });\n        });\n        var /** @type {?} */ analyzedInjectables = tsFiles.map(function (tsFile) { return _this._analyzeFileForInjectables(tsFile); });\n        return Promise.all(loadingPromises).then(function (_) {\n            return ({\n                analyzedModules: mergeAndValidateNgFiles(files),\n                analyzedInjectables: analyzedInjectables,\n            });\n        });\n    };\n    /**\n     * @param {?} fileNames\n     * @param {?} tsFiles\n     * @return {?}\n     */\n    AotCompiler.prototype.loadFilesSync = /**\n     * @param {?} fileNames\n     * @param {?} tsFiles\n     * @return {?}\n     */\n    function (fileNames, tsFiles) {\n        var _this = this;\n        var /** @type {?} */ files = fileNames.map(function (fileName) { return _this._analyzeFile(fileName); });\n        files.forEach(function (file) {\n            return file.ngModules.forEach(function (ngModule) {\n                return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, true);\n            });\n        });\n        var /** @type {?} */ analyzedInjectables = tsFiles.map(function (tsFile) { return _this._analyzeFileForInjectables(tsFile); });\n        return {\n            analyzedModules: mergeAndValidateNgFiles(files),\n            analyzedInjectables: analyzedInjectables,\n        };\n    };\n    /**\n     * @param {?} outputCtx\n     * @param {?} file\n     * @param {?} emitFlags\n     * @return {?}\n     */\n    AotCompiler.prototype._createNgFactoryStub = /**\n     * @param {?} outputCtx\n     * @param {?} file\n     * @param {?} emitFlags\n     * @return {?}\n     */\n    function (outputCtx, file, emitFlags) {\n        var _this = this;\n        var /** @type {?} */ componentId = 0;\n        file.ngModules.forEach(function (ngModuleMeta, ngModuleIndex) {\n            // Note: the code below needs to executed for StubEmitFlags.Basic and StubEmitFlags.TypeCheck,\n            // so we don't change the .ngfactory file too much when adding the type-check block.\n            // create exports that user code can reference\n            // Note: the code below needs to executed for StubEmitFlags.Basic and StubEmitFlags.TypeCheck,\n            // so we don't change the .ngfactory file too much when adding the type-check block.\n            // create exports that user code can reference\n            _this._ngModuleCompiler.createStub(outputCtx, ngModuleMeta.type.reference);\n            // add references to the symbols from the metadata.\n            // These can be used by the type check block for components,\n            // and they also cause TypeScript to include these files into the program too,\n            // which will make them part of the analyzedFiles.\n            var /** @type {?} */ externalReferences = ngModuleMeta.transitiveModule.directives.map(function (d) { return d.reference; }).concat(ngModuleMeta.transitiveModule.pipes.map(function (d) { return d.reference; }), ngModuleMeta.importedModules.map(function (m) { return m.type.reference; }), ngModuleMeta.exportedModules.map(function (m) { return m.type.reference; }), _this._externalIdentifierReferences([Identifiers.TemplateRef, Identifiers.ElementRef]));\n            var /** @type {?} */ externalReferenceVars = new Map();\n            externalReferences.forEach(function (ref, typeIndex) {\n                externalReferenceVars.set(ref, \"_decl\" + ngModuleIndex + \"_\" + typeIndex);\n            });\n            externalReferenceVars.forEach(function (varName, reference) {\n                outputCtx.statements.push(o.variable(varName)\n                    .set(o.NULL_EXPR.cast(o.DYNAMIC_TYPE))\n                    .toDeclStmt(o.expressionType(outputCtx.importExpr(reference, /* typeParams */ null, /* useSummaries */ /* useSummaries */ false))));\n            });\n            if (emitFlags & StubEmitFlags.TypeCheck) {\n                // add the type-check block for all components of the NgModule\n                ngModuleMeta.declaredDirectives.forEach(function (dirId) {\n                    var /** @type {?} */ compMeta = _this._metadataResolver.getDirectiveMetadata(dirId.reference);\n                    if (!compMeta.isComponent) {\n                        return;\n                    }\n                    componentId++;\n                    _this._createTypeCheckBlock(outputCtx, compMeta.type.reference.name + \"_Host_\" + componentId, ngModuleMeta, _this._metadataResolver.getHostComponentMetadata(compMeta), [compMeta.type], externalReferenceVars);\n                    _this._createTypeCheckBlock(outputCtx, compMeta.type.reference.name + \"_\" + componentId, ngModuleMeta, compMeta, ngModuleMeta.transitiveModule.directives, externalReferenceVars);\n                });\n            }\n        });\n        if (outputCtx.statements.length === 0) {\n            _createEmptyStub(outputCtx);\n        }\n    };\n    /**\n     * @param {?} references\n     * @return {?}\n     */\n    AotCompiler.prototype._externalIdentifierReferences = /**\n     * @param {?} references\n     * @return {?}\n     */\n    function (references) {\n        var /** @type {?} */ result = [];\n        for (var _i = 0, references_1 = references; _i < references_1.length; _i++) {\n            var reference = references_1[_i];\n            var /** @type {?} */ token = createTokenForExternalReference(this.reflector, reference);\n            if (token.identifier) {\n                result.push(token.identifier.reference);\n            }\n        }\n        return result;\n    };\n    /**\n     * @param {?} ctx\n     * @param {?} componentId\n     * @param {?} moduleMeta\n     * @param {?} compMeta\n     * @param {?} directives\n     * @param {?} externalReferenceVars\n     * @return {?}\n     */\n    AotCompiler.prototype._createTypeCheckBlock = /**\n     * @param {?} ctx\n     * @param {?} componentId\n     * @param {?} moduleMeta\n     * @param {?} compMeta\n     * @param {?} directives\n     * @param {?} externalReferenceVars\n     * @return {?}\n     */\n    function (ctx, componentId, moduleMeta, compMeta, directives, externalReferenceVars) {\n        var _a = this._parseTemplate(compMeta, moduleMeta, directives), parsedTemplate = _a.template, usedPipes = _a.pipes;\n        (_b = ctx.statements).push.apply(_b, this._typeCheckCompiler.compileComponent(componentId, compMeta, parsedTemplate, usedPipes, externalReferenceVars, ctx));\n        var _b;\n    };\n    /**\n     * @param {?} analyzeResult\n     * @param {?} locale\n     * @return {?}\n     */\n    AotCompiler.prototype.emitMessageBundle = /**\n     * @param {?} analyzeResult\n     * @param {?} locale\n     * @return {?}\n     */\n    function (analyzeResult, locale) {\n        var _this = this;\n        var /** @type {?} */ errors = [];\n        var /** @type {?} */ htmlParser = new HtmlParser();\n        // TODO(vicb): implicit tags & attributes\n        var /** @type {?} */ messageBundle = new MessageBundle(htmlParser, [], {}, locale);\n        analyzeResult.files.forEach(function (file) {\n            var /** @type {?} */ compMetas = [];\n            file.directives.forEach(function (directiveType) {\n                var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(directiveType);\n                if (dirMeta && dirMeta.isComponent) {\n                    compMetas.push(dirMeta);\n                }\n            });\n            compMetas.forEach(function (compMeta) {\n                var /** @type {?} */ html = /** @type {?} */ ((/** @type {?} */ ((compMeta.template)).template));\n                var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(/** @type {?} */ ((compMeta.template)).interpolation);\n                errors.push.apply(errors, /** @type {?} */ ((messageBundle.updateFromTemplate(html, file.fileName, interpolationConfig))));\n            });\n        });\n        if (errors.length) {\n            throw new Error(errors.map(function (e) { return e.toString(); }).join('\\n'));\n        }\n        return messageBundle;\n    };\n    /**\n     * @param {?} __0\n     * @param {?} r3Files\n     * @return {?}\n     */\n    AotCompiler.prototype.emitAllPartialModules = /**\n     * @param {?} __0\n     * @param {?} r3Files\n     * @return {?}\n     */\n    function (_a, r3Files) {\n        var _this = this;\n        var ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective, files = _a.files;\n        var /** @type {?} */ contextMap = new Map();\n        var /** @type {?} */ getContext = function (fileName) {\n            if (!contextMap.has(fileName)) {\n                contextMap.set(fileName, _this._createOutputContext(fileName));\n            }\n            return /** @type {?} */ ((contextMap.get(fileName)));\n        };\n        files.forEach(function (file) {\n            return _this._compilePartialModule(file.fileName, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables, getContext(file.fileName));\n        });\n        r3Files.forEach(function (file) {\n            return _this._compileShallowModules(file.fileName, file.shallowModules, getContext(file.fileName));\n        });\n        return Array.from(contextMap.values())\n            .map(function (context) {\n            return ({\n                fileName: context.genFilePath,\n                statements: context.constantPool.statements.concat(context.statements),\n            });\n        });\n    };\n    /**\n     * @param {?} fileName\n     * @param {?} shallowModules\n     * @param {?} context\n     * @return {?}\n     */\n    AotCompiler.prototype._compileShallowModules = /**\n     * @param {?} fileName\n     * @param {?} shallowModules\n     * @param {?} context\n     * @return {?}\n     */\n    function (fileName, shallowModules, context) {\n        var _this = this;\n        shallowModules.forEach(function (module) { return compileIvyModule(context, module, _this._injectableCompiler); });\n    };\n    /**\n     * @param {?} fileName\n     * @param {?} ngModuleByPipeOrDirective\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} ngModules\n     * @param {?} injectables\n     * @param {?} context\n     * @return {?}\n     */\n    AotCompiler.prototype._compilePartialModule = /**\n     * @param {?} fileName\n     * @param {?} ngModuleByPipeOrDirective\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} ngModules\n     * @param {?} injectables\n     * @param {?} context\n     * @return {?}\n     */\n    function (fileName, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables, context) {\n        var _this = this;\n        var /** @type {?} */ classes = [];\n        var /** @type {?} */ errors = [];\n        var /** @type {?} */ hostBindingParser = new BindingParser(this._templateParser.expressionParser, DEFAULT_INTERPOLATION_CONFIG, /** @type {?} */ ((null)), [], errors);\n        // Process all components and directives\n        directives.forEach(function (directiveType) {\n            var /** @type {?} */ directiveMetadata = _this._metadataResolver.getDirectiveMetadata(directiveType);\n            if (directiveMetadata.isComponent) {\n                var /** @type {?} */ module = /** @type {?} */ ((ngModuleByPipeOrDirective.get(directiveType)));\n                module ||\n                    error(\"Cannot determine the module for component '\" + identifierName(directiveMetadata.type) + \"'\");\n                var _a = _this._parseTemplate(directiveMetadata, module, module.transitiveModule.directives), parsedTemplate = _a.template, parsedPipes = _a.pipes;\n                compileIvyComponent(context, directiveMetadata, parsedPipes, parsedTemplate, _this.reflector, hostBindingParser, 0 /* PartialClass */);\n            }\n            else {\n                compileIvyDirective(context, directiveMetadata, _this.reflector, hostBindingParser, 0 /* PartialClass */);\n            }\n        });\n        pipes.forEach(function (pipeType) {\n            var /** @type {?} */ pipeMetadata = _this._metadataResolver.getPipeMetadata(pipeType);\n            if (pipeMetadata) {\n                compileIvyPipe(context, pipeMetadata, _this.reflector, 0 /* PartialClass */);\n            }\n        });\n        injectables.forEach(function (injectable) { return _this._injectableCompiler.compile(injectable, context); });\n    };\n    /**\n     * @param {?} files\n     * @return {?}\n     */\n    AotCompiler.prototype.emitAllPartialModules2 = /**\n     * @param {?} files\n     * @return {?}\n     */\n    function (files) {\n        var _this = this;\n        // Using reduce like this is a select many pattern (where map is a select pattern)\n        return files.reduce(function (r, file) {\n            r.push.apply(r, _this._emitPartialModule2(file.fileName, file.injectables));\n            return r;\n        }, []);\n    };\n    /**\n     * @param {?} fileName\n     * @param {?} injectables\n     * @return {?}\n     */\n    AotCompiler.prototype._emitPartialModule2 = /**\n     * @param {?} fileName\n     * @param {?} injectables\n     * @return {?}\n     */\n    function (fileName, injectables) {\n        var _this = this;\n        var /** @type {?} */ context = this._createOutputContext(fileName);\n        injectables.forEach(function (injectable) { return _this._injectableCompiler.compile(injectable, context); });\n        if (context.statements && context.statements.length > 0) {\n            return [{ fileName: fileName, statements: context.constantPool.statements.concat(context.statements) }];\n        }\n        return [];\n    };\n    /**\n     * @param {?} analyzeResult\n     * @return {?}\n     */\n    AotCompiler.prototype.emitAllImpls = /**\n     * @param {?} analyzeResult\n     * @return {?}\n     */\n    function (analyzeResult) {\n        var _this = this;\n        var ngModuleByPipeOrDirective = analyzeResult.ngModuleByPipeOrDirective, files = analyzeResult.files;\n        var /** @type {?} */ sourceModules = files.map(function (file) {\n            return _this._compileImplFile(file.fileName, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables);\n        });\n        return flatten(sourceModules);\n    };\n    /**\n     * @param {?} srcFileUrl\n     * @param {?} ngModuleByPipeOrDirective\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} ngModules\n     * @param {?} injectables\n     * @return {?}\n     */\n    AotCompiler.prototype._compileImplFile = /**\n     * @param {?} srcFileUrl\n     * @param {?} ngModuleByPipeOrDirective\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} ngModules\n     * @param {?} injectables\n     * @return {?}\n     */\n    function (srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {\n        var _this = this;\n        var /** @type {?} */ fileSuffix = normalizeGenFileSuffix(splitTypescriptSuffix(srcFileUrl, true)[1]);\n        var /** @type {?} */ generatedFiles = [];\n        var /** @type {?} */ outputCtx = this._createOutputContext(ngfactoryFilePath(srcFileUrl, true));\n        generatedFiles.push.apply(generatedFiles, this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, outputCtx));\n        // compile all ng modules\n        ngModules.forEach(function (ngModuleMeta) { return _this._compileModule(outputCtx, ngModuleMeta); });\n        // compile components\n        directives.forEach(function (dirType) {\n            var /** @type {?} */ compMeta = _this._metadataResolver.getDirectiveMetadata(/** @type {?} */ (dirType));\n            if (!compMeta.isComponent) {\n                return;\n            }\n            var /** @type {?} */ ngModule = ngModuleByPipeOrDirective.get(dirType);\n            if (!ngModule) {\n                throw new Error(\"Internal Error: cannot determine the module for component \" + identifierName(compMeta.type) + \"!\");\n            }\n            // compile styles\n            var /** @type {?} */ componentStylesheet = _this._styleCompiler.compileComponent(outputCtx, compMeta); /** @type {?} */\n            ((\n            // Note: compMeta is a component and therefore template is non null.\n            compMeta.template)).externalStylesheets.forEach(function (stylesheetMeta) {\n                // Note: fill non shim and shim style files as they might\n                // be shared by component with and without ViewEncapsulation.\n                var /** @type {?} */ shim = _this._styleCompiler.needsStyleShim(compMeta);\n                generatedFiles.push(_this._codegenStyles(srcFileUrl, compMeta, stylesheetMeta, shim, fileSuffix));\n                if (_this._options.allowEmptyCodegenFiles) {\n                    generatedFiles.push(_this._codegenStyles(srcFileUrl, compMeta, stylesheetMeta, !shim, fileSuffix));\n                }\n            });\n            // compile components\n            var /** @type {?} */ compViewVars = _this._compileComponent(outputCtx, compMeta, ngModule, ngModule.transitiveModule.directives, componentStylesheet, fileSuffix);\n            _this._compileComponentFactory(outputCtx, compMeta, ngModule, fileSuffix);\n        });\n        if (outputCtx.statements.length > 0 || this._options.allowEmptyCodegenFiles) {\n            var /** @type {?} */ srcModule = this._codegenSourceModule(srcFileUrl, outputCtx);\n            generatedFiles.unshift(srcModule);\n        }\n        return generatedFiles;\n    };\n    /**\n     * @param {?} srcFileName\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} ngModules\n     * @param {?} injectables\n     * @param {?} ngFactoryCtx\n     * @return {?}\n     */\n    AotCompiler.prototype._createSummary = /**\n     * @param {?} srcFileName\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} ngModules\n     * @param {?} injectables\n     * @param {?} ngFactoryCtx\n     * @return {?}\n     */\n    function (srcFileName, directives, pipes, ngModules, injectables, ngFactoryCtx) {\n        var _this = this;\n        var /** @type {?} */ symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileName)\n            .map(function (symbol) { return _this._symbolResolver.resolveSymbol(symbol); });\n        var /** @type {?} */ typeData = ngModules.map(function (meta) {\n            return ({\n                summary: /** @type {?} */ ((_this._metadataResolver.getNgModuleSummary(meta.type.reference))),\n                metadata: /** @type {?} */ ((_this._metadataResolver.getNgModuleMetadata(meta.type.reference)))\n            });\n        }).concat(directives.map(function (ref) {\n            return ({\n                summary: /** @type {?} */ ((_this._metadataResolver.getDirectiveSummary(ref))),\n                metadata: /** @type {?} */ ((_this._metadataResolver.getDirectiveMetadata(ref)))\n            });\n        }), pipes.map(function (ref) {\n            return ({\n                summary: /** @type {?} */ ((_this._metadataResolver.getPipeSummary(ref))),\n                metadata: /** @type {?} */ ((_this._metadataResolver.getPipeMetadata(ref)))\n            });\n        }), injectables.map(function (ref) {\n            return ({\n                summary: /** @type {?} */ ((_this._metadataResolver.getInjectableSummary(ref.symbol))),\n                metadata: /** @type {?} */ ((_this._metadataResolver.getInjectableSummary(ref.symbol))).type\n            });\n        }));\n        var /** @type {?} */ forJitOutputCtx = this._options.enableSummariesForJit ?\n            this._createOutputContext(summaryForJitFileName(srcFileName, true)) :\n            null;\n        var _a = serializeSummaries(srcFileName, forJitOutputCtx, this._summaryResolver, this._symbolResolver, symbolSummaries, typeData), json = _a.json, exportAs = _a.exportAs;\n        exportAs.forEach(function (entry) {\n            ngFactoryCtx.statements.push(o.variable(entry.exportAs).set(ngFactoryCtx.importExpr(entry.symbol)).toDeclStmt(null, [\n                o.StmtModifier.Exported\n            ]));\n        });\n        var /** @type {?} */ summaryJson = new GeneratedFile(srcFileName, summaryFileName(srcFileName), json);\n        var /** @type {?} */ result = [summaryJson];\n        if (forJitOutputCtx) {\n            result.push(this._codegenSourceModule(srcFileName, forJitOutputCtx));\n        }\n        return result;\n    };\n    /**\n     * @param {?} outputCtx\n     * @param {?} ngModule\n     * @return {?}\n     */\n    AotCompiler.prototype._compileModule = /**\n     * @param {?} outputCtx\n     * @param {?} ngModule\n     * @return {?}\n     */\n    function (outputCtx, ngModule) {\n        var /** @type {?} */ providers = [];\n        if (this._options.locale) {\n            var /** @type {?} */ normalizedLocale = this._options.locale.replace(/_/g, '-');\n            providers.push({\n                token: createTokenForExternalReference(this.reflector, Identifiers.LOCALE_ID),\n                useValue: normalizedLocale,\n            });\n        }\n        if (this._options.i18nFormat) {\n            providers.push({\n                token: createTokenForExternalReference(this.reflector, Identifiers.TRANSLATIONS_FORMAT),\n                useValue: this._options.i18nFormat\n            });\n        }\n        this._ngModuleCompiler.compile(outputCtx, ngModule, providers);\n    };\n    /**\n     * @param {?} outputCtx\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} fileSuffix\n     * @return {?}\n     */\n    AotCompiler.prototype._compileComponentFactory = /**\n     * @param {?} outputCtx\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} fileSuffix\n     * @return {?}\n     */\n    function (outputCtx, compMeta, ngModule, fileSuffix) {\n        var /** @type {?} */ hostMeta = this._metadataResolver.getHostComponentMetadata(compMeta);\n        var /** @type {?} */ hostViewFactoryVar = this._compileComponent(outputCtx, hostMeta, ngModule, [compMeta.type], null, fileSuffix)\n            .viewClassVar;\n        var /** @type {?} */ compFactoryVar = componentFactoryName(compMeta.type.reference);\n        var /** @type {?} */ inputsExprs = [];\n        for (var /** @type {?} */ propName in compMeta.inputs) {\n            var /** @type {?} */ templateName = compMeta.inputs[propName];\n            // Don't quote so that the key gets minified...\n            inputsExprs.push(new o.LiteralMapEntry(propName, o.literal(templateName), false));\n        }\n        var /** @type {?} */ outputsExprs = [];\n        for (var /** @type {?} */ propName in compMeta.outputs) {\n            var /** @type {?} */ templateName = compMeta.outputs[propName];\n            // Don't quote so that the key gets minified...\n            outputsExprs.push(new o.LiteralMapEntry(propName, o.literal(templateName), false));\n        }\n        outputCtx.statements.push(o.variable(compFactoryVar)\n            .set(o.importExpr(Identifiers.createComponentFactory).callFn([\n            o.literal(compMeta.selector), outputCtx.importExpr(compMeta.type.reference),\n            o.variable(hostViewFactoryVar), new o.LiteralMapExpr(inputsExprs),\n            new o.LiteralMapExpr(outputsExprs),\n            o.literalArr(/** @type {?} */ ((compMeta.template)).ngContentSelectors.map(function (selector) { return o.literal(selector); }))\n        ]))\n            .toDeclStmt(o.importType(Identifiers.ComponentFactory, [/** @type {?} */ ((o.expressionType(outputCtx.importExpr(compMeta.type.reference))))], [o.TypeModifier.Const]), [o.StmtModifier.Final, o.StmtModifier.Exported]));\n    };\n    /**\n     * @param {?} outputCtx\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} directiveIdentifiers\n     * @param {?} componentStyles\n     * @param {?} fileSuffix\n     * @return {?}\n     */\n    AotCompiler.prototype._compileComponent = /**\n     * @param {?} outputCtx\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} directiveIdentifiers\n     * @param {?} componentStyles\n     * @param {?} fileSuffix\n     * @return {?}\n     */\n    function (outputCtx, compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix) {\n        var _a = this._parseTemplate(compMeta, ngModule, directiveIdentifiers), parsedTemplate = _a.template, usedPipes = _a.pipes;\n        var /** @type {?} */ stylesExpr = componentStyles ? o.variable(componentStyles.stylesVar) : o.literalArr([]);\n        var /** @type {?} */ viewResult = this._viewCompiler.compileComponent(outputCtx, compMeta, parsedTemplate, stylesExpr, usedPipes);\n        if (componentStyles) {\n            _resolveStyleStatements(this._symbolResolver, componentStyles, this._styleCompiler.needsStyleShim(compMeta), fileSuffix);\n        }\n        return viewResult;\n    };\n    /**\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} directiveIdentifiers\n     * @return {?}\n     */\n    AotCompiler.prototype._parseTemplate = /**\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} directiveIdentifiers\n     * @return {?}\n     */\n    function (compMeta, ngModule, directiveIdentifiers) {\n        var _this = this;\n        if (this._templateAstCache.has(compMeta.type.reference)) {\n            return /** @type {?} */ ((this._templateAstCache.get(compMeta.type.reference)));\n        }\n        var /** @type {?} */ preserveWhitespaces = /** @type {?} */ ((/** @type {?} */ ((compMeta)).template)).preserveWhitespaces;\n        var /** @type {?} */ directives = directiveIdentifiers.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });\n        var /** @type {?} */ pipes = ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });\n        var /** @type {?} */ result = this._templateParser.parse(compMeta, /** @type {?} */ ((/** @type {?} */ ((compMeta.template)).htmlAst)), directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, /** @type {?} */ ((compMeta.template))), preserveWhitespaces);\n        this._templateAstCache.set(compMeta.type.reference, result);\n        return result;\n    };\n    /**\n     * @param {?} genFilePath\n     * @return {?}\n     */\n    AotCompiler.prototype._createOutputContext = /**\n     * @param {?} genFilePath\n     * @return {?}\n     */\n    function (genFilePath) {\n        var _this = this;\n        var /** @type {?} */ importExpr = function (symbol, typeParams, useSummaries) {\n            if (typeParams === void 0) { typeParams = null; }\n            if (useSummaries === void 0) { useSummaries = true; }\n            if (!(symbol instanceof StaticSymbol)) {\n                throw new Error(\"Internal error: unknown identifier \" + JSON.stringify(symbol));\n            }\n            var /** @type {?} */ arity = _this._symbolResolver.getTypeArity(symbol) || 0;\n            var _a = _this._symbolResolver.getImportAs(symbol, useSummaries) || symbol, filePath = _a.filePath, name = _a.name, members = _a.members;\n            var /** @type {?} */ importModule = _this._fileNameToModuleName(filePath, genFilePath);\n            // It should be good enough to compare filePath to genFilePath and if they are equal\n            // there is a self reference. However, ngfactory files generate to .ts but their\n            // symbols have .d.ts so a simple compare is insufficient. They should be canonical\n            // and is tracked by #17705.\n            var /** @type {?} */ selfReference = _this._fileNameToModuleName(genFilePath, genFilePath);\n            var /** @type {?} */ moduleName = importModule === selfReference ? null : importModule;\n            // If we are in a type expression that refers to a generic type then supply\n            // the required type parameters. If there were not enough type parameters\n            // supplied, supply any as the type. Outside a type expression the reference\n            // should not supply type parameters and be treated as a simple value reference\n            // to the constructor function itself.\n            var /** @type {?} */ suppliedTypeParams = typeParams || [];\n            var /** @type {?} */ missingTypeParamsCount = arity - suppliedTypeParams.length;\n            var /** @type {?} */ allTypeParams = suppliedTypeParams.concat(new Array(missingTypeParamsCount).fill(o.DYNAMIC_TYPE));\n            return members.reduce(function (expr, memberName) { return expr.prop(memberName); }, /** @type {?} */ (o.importExpr(new o.ExternalReference(moduleName, name, null), allTypeParams)));\n        };\n        return { statements: [], genFilePath: genFilePath, importExpr: importExpr, constantPool: new ConstantPool() };\n    };\n    /**\n     * @param {?} importedFilePath\n     * @param {?} containingFilePath\n     * @return {?}\n     */\n    AotCompiler.prototype._fileNameToModuleName = /**\n     * @param {?} importedFilePath\n     * @param {?} containingFilePath\n     * @return {?}\n     */\n    function (importedFilePath, containingFilePath) {\n        return this._summaryResolver.getKnownModuleName(importedFilePath) ||\n            this._symbolResolver.getKnownModuleName(importedFilePath) ||\n            this._host.fileNameToModuleName(importedFilePath, containingFilePath);\n    };\n    /**\n     * @param {?} srcFileUrl\n     * @param {?} compMeta\n     * @param {?} stylesheetMetadata\n     * @param {?} isShimmed\n     * @param {?} fileSuffix\n     * @return {?}\n     */\n    AotCompiler.prototype._codegenStyles = /**\n     * @param {?} srcFileUrl\n     * @param {?} compMeta\n     * @param {?} stylesheetMetadata\n     * @param {?} isShimmed\n     * @param {?} fileSuffix\n     * @return {?}\n     */\n    function (srcFileUrl, compMeta, stylesheetMetadata, isShimmed, fileSuffix) {\n        var /** @type {?} */ outputCtx = this._createOutputContext(_stylesModuleUrl(/** @type {?} */ ((stylesheetMetadata.moduleUrl)), isShimmed, fileSuffix));\n        var /** @type {?} */ compiledStylesheet = this._styleCompiler.compileStyles(outputCtx, compMeta, stylesheetMetadata, isShimmed);\n        _resolveStyleStatements(this._symbolResolver, compiledStylesheet, isShimmed, fileSuffix);\n        return this._codegenSourceModule(srcFileUrl, outputCtx);\n    };\n    /**\n     * @param {?} srcFileUrl\n     * @param {?} ctx\n     * @return {?}\n     */\n    AotCompiler.prototype._codegenSourceModule = /**\n     * @param {?} srcFileUrl\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (srcFileUrl, ctx) {\n        return new GeneratedFile(srcFileUrl, ctx.genFilePath, ctx.statements);\n    };\n    /**\n     * @param {?=} entryRoute\n     * @param {?=} analyzedModules\n     * @return {?}\n     */\n    AotCompiler.prototype.listLazyRoutes = /**\n     * @param {?=} entryRoute\n     * @param {?=} analyzedModules\n     * @return {?}\n     */\n    function (entryRoute, analyzedModules) {\n        var /** @type {?} */ self = this;\n        if (entryRoute) {\n            var /** @type {?} */ symbol = parseLazyRoute(entryRoute, this.reflector).referencedModule;\n            return visitLazyRoute(symbol);\n        }\n        else if (analyzedModules) {\n            var /** @type {?} */ allLazyRoutes = [];\n            for (var _i = 0, _a = analyzedModules.ngModules; _i < _a.length; _i++) {\n                var ngModule = _a[_i];\n                var /** @type {?} */ lazyRoutes = listLazyRoutes(ngModule, this.reflector);\n                for (var _b = 0, lazyRoutes_1 = lazyRoutes; _b < lazyRoutes_1.length; _b++) {\n                    var lazyRoute = lazyRoutes_1[_b];\n                    allLazyRoutes.push(lazyRoute);\n                }\n            }\n            return allLazyRoutes;\n        }\n        else {\n            throw new Error(\"Either route or analyzedModules has to be specified!\");\n        }\n        /**\n         * @param {?} symbol\n         * @param {?=} seenRoutes\n         * @param {?=} allLazyRoutes\n         * @return {?}\n         */\n        function visitLazyRoute(symbol, seenRoutes, allLazyRoutes) {\n            if (seenRoutes === void 0) { seenRoutes = new Set(); }\n            if (allLazyRoutes === void 0) { allLazyRoutes = []; }\n            // Support pointing to default exports, but stop recursing there,\n            // as the StaticReflector does not yet support default exports.\n            if (seenRoutes.has(symbol) || !symbol.name) {\n                return allLazyRoutes;\n            }\n            seenRoutes.add(symbol);\n            var /** @type {?} */ lazyRoutes = listLazyRoutes(/** @type {?} */ ((self._metadataResolver.getNgModuleMetadata(symbol, true))), self.reflector);\n            for (var _i = 0, lazyRoutes_2 = lazyRoutes; _i < lazyRoutes_2.length; _i++) {\n                var lazyRoute = lazyRoutes_2[_i];\n                allLazyRoutes.push(lazyRoute);\n                visitLazyRoute(lazyRoute.referencedModule, seenRoutes, allLazyRoutes);\n            }\n            return allLazyRoutes;\n        }\n    };\n    return AotCompiler;\n}());\nexport { AotCompiler };\nfunction AotCompiler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AotCompiler.prototype._templateAstCache;\n    /** @type {?} */\n    AotCompiler.prototype._analyzedFiles;\n    /** @type {?} */\n    AotCompiler.prototype._analyzedFilesForInjectables;\n    /** @type {?} */\n    AotCompiler.prototype._config;\n    /** @type {?} */\n    AotCompiler.prototype._options;\n    /** @type {?} */\n    AotCompiler.prototype._host;\n    /** @type {?} */\n    AotCompiler.prototype.reflector;\n    /** @type {?} */\n    AotCompiler.prototype._metadataResolver;\n    /** @type {?} */\n    AotCompiler.prototype._templateParser;\n    /** @type {?} */\n    AotCompiler.prototype._styleCompiler;\n    /** @type {?} */\n    AotCompiler.prototype._viewCompiler;\n    /** @type {?} */\n    AotCompiler.prototype._typeCheckCompiler;\n    /** @type {?} */\n    AotCompiler.prototype._ngModuleCompiler;\n    /** @type {?} */\n    AotCompiler.prototype._injectableCompiler;\n    /** @type {?} */\n    AotCompiler.prototype._outputEmitter;\n    /** @type {?} */\n    AotCompiler.prototype._summaryResolver;\n    /** @type {?} */\n    AotCompiler.prototype._symbolResolver;\n}\n/**\n * @param {?} outputCtx\n * @return {?}\n */\nfunction _createEmptyStub(outputCtx) {\n    // Note: We need to produce at least one import statement so that\n    // TypeScript knows that the file is an es6 module. Otherwise our generated\n    // exports / imports won't be emitted properly by TypeScript.\n    outputCtx.statements.push(o.importExpr(Identifiers.ComponentFactory).toStmt());\n}\n/**\n * @param {?} symbolResolver\n * @param {?} compileResult\n * @param {?} needsShim\n * @param {?} fileSuffix\n * @return {?}\n */\nfunction _resolveStyleStatements(symbolResolver, compileResult, needsShim, fileSuffix) {\n    compileResult.dependencies.forEach(function (dep) {\n        dep.setValue(symbolResolver.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, needsShim, fileSuffix), dep.name));\n    });\n}\n/**\n * @param {?} stylesheetUrl\n * @param {?} shim\n * @param {?} suffix\n * @return {?}\n */\nfunction _stylesModuleUrl(stylesheetUrl, shim, suffix) {\n    return \"\" + stylesheetUrl + (shim ? '.shim' : '') + \".ngstyle\" + suffix;\n}\n/**\n * @record\n */\nexport function NgAnalyzedModules() { }\nfunction NgAnalyzedModules_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgAnalyzedModules.prototype.ngModules;\n    /** @type {?} */\n    NgAnalyzedModules.prototype.ngModuleByPipeOrDirective;\n    /** @type {?} */\n    NgAnalyzedModules.prototype.files;\n    /** @type {?|undefined} */\n    NgAnalyzedModules.prototype.symbolsMissingModule;\n}\n/**\n * @record\n */\nexport function NgAnalyzedFileWithInjectables() { }\nfunction NgAnalyzedFileWithInjectables_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgAnalyzedFileWithInjectables.prototype.fileName;\n    /** @type {?} */\n    NgAnalyzedFileWithInjectables.prototype.injectables;\n    /** @type {?} */\n    NgAnalyzedFileWithInjectables.prototype.shallowModules;\n}\n/**\n * @record\n */\nexport function NgAnalyzedFile() { }\nfunction NgAnalyzedFile_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgAnalyzedFile.prototype.fileName;\n    /** @type {?} */\n    NgAnalyzedFile.prototype.directives;\n    /** @type {?} */\n    NgAnalyzedFile.prototype.pipes;\n    /** @type {?} */\n    NgAnalyzedFile.prototype.ngModules;\n    /** @type {?} */\n    NgAnalyzedFile.prototype.injectables;\n    /** @type {?} */\n    NgAnalyzedFile.prototype.exportsNonSourceFiles;\n}\n/**\n * @record\n */\nexport function NgAnalyzeModulesHost() { }\nfunction NgAnalyzeModulesHost_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgAnalyzeModulesHost.prototype.isSourceFile;\n}\n/**\n * @param {?} fileNames\n * @param {?} host\n * @param {?} staticSymbolResolver\n * @param {?} metadataResolver\n * @return {?}\n */\nexport function analyzeNgModules(fileNames, host, staticSymbolResolver, metadataResolver) {\n    var /** @type {?} */ files = _analyzeFilesIncludingNonProgramFiles(fileNames, host, staticSymbolResolver, metadataResolver);\n    return mergeAnalyzedFiles(files);\n}\n/**\n * @param {?} fileNames\n * @param {?} host\n * @param {?} staticSymbolResolver\n * @param {?} metadataResolver\n * @return {?}\n */\nexport function analyzeAndValidateNgModules(fileNames, host, staticSymbolResolver, metadataResolver) {\n    return validateAnalyzedModules(analyzeNgModules(fileNames, host, staticSymbolResolver, metadataResolver));\n}\n/**\n * @param {?} analyzedModules\n * @return {?}\n */\nfunction validateAnalyzedModules(analyzedModules) {\n    if (analyzedModules.symbolsMissingModule && analyzedModules.symbolsMissingModule.length) {\n        var /** @type {?} */ messages = analyzedModules.symbolsMissingModule.map(function (s) {\n            return \"Cannot determine the module for class \" + s.name + \" in \" + s.filePath + \"! Add \" + s.name + \" to the NgModule to fix it.\";\n        });\n        throw syntaxError(messages.join('\\n'));\n    }\n    return analyzedModules;\n}\n/**\n * @param {?} fileNames\n * @param {?} host\n * @param {?} staticSymbolResolver\n * @param {?} metadataResolver\n * @return {?}\n */\nfunction _analyzeFilesIncludingNonProgramFiles(fileNames, host, staticSymbolResolver, metadataResolver) {\n    var /** @type {?} */ seenFiles = new Set();\n    var /** @type {?} */ files = [];\n    var /** @type {?} */ visitFile = function (fileName) {\n        if (seenFiles.has(fileName) || !host.isSourceFile(fileName)) {\n            return false;\n        }\n        seenFiles.add(fileName);\n        var /** @type {?} */ analyzedFile = analyzeFile(host, staticSymbolResolver, metadataResolver, fileName);\n        files.push(analyzedFile);\n        analyzedFile.ngModules.forEach(function (ngModule) {\n            ngModule.transitiveModule.modules.forEach(function (modMeta) { return visitFile(modMeta.reference.filePath); });\n        });\n    };\n    fileNames.forEach(function (fileName) { return visitFile(fileName); });\n    return files;\n}\n/**\n * @param {?} host\n * @param {?} staticSymbolResolver\n * @param {?} metadataResolver\n * @param {?} fileName\n * @return {?}\n */\nexport function analyzeFile(host, staticSymbolResolver, metadataResolver, fileName) {\n    var /** @type {?} */ directives = [];\n    var /** @type {?} */ pipes = [];\n    var /** @type {?} */ injectables = [];\n    var /** @type {?} */ ngModules = [];\n    var /** @type {?} */ hasDecorators = staticSymbolResolver.hasDecorators(fileName);\n    var /** @type {?} */ exportsNonSourceFiles = false;\n    // Don't analyze .d.ts files that have no decorators as a shortcut\n    // to speed up the analysis. This prevents us from\n    // resolving the references in these files.\n    // Note: exportsNonSourceFiles is only needed when compiling with summaries,\n    // which is not the case when .d.ts files are treated as input files.\n    if (!fileName.endsWith('.d.ts') || hasDecorators) {\n        staticSymbolResolver.getSymbolsOf(fileName).forEach(function (symbol) {\n            var /** @type {?} */ resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);\n            var /** @type {?} */ symbolMeta = resolvedSymbol.metadata;\n            if (!symbolMeta || symbolMeta.__symbolic === 'error') {\n                return;\n            }\n            var /** @type {?} */ isNgSymbol = false;\n            if (symbolMeta.__symbolic === 'class') {\n                if (metadataResolver.isDirective(symbol)) {\n                    isNgSymbol = true;\n                    directives.push(symbol);\n                }\n                else if (metadataResolver.isPipe(symbol)) {\n                    isNgSymbol = true;\n                    pipes.push(symbol);\n                }\n                else if (metadataResolver.isNgModule(symbol)) {\n                    var /** @type {?} */ ngModule = metadataResolver.getNgModuleMetadata(symbol, false);\n                    if (ngModule) {\n                        isNgSymbol = true;\n                        ngModules.push(ngModule);\n                    }\n                }\n                else if (metadataResolver.isInjectable(symbol)) {\n                    isNgSymbol = true;\n                    var /** @type {?} */ injectable = metadataResolver.getInjectableMetadata(symbol, null, false);\n                    if (injectable) {\n                        injectables.push(injectable);\n                    }\n                }\n            }\n            if (!isNgSymbol) {\n                exportsNonSourceFiles =\n                    exportsNonSourceFiles || isValueExportingNonSourceFile(host, symbolMeta);\n            }\n        });\n    }\n    return {\n        fileName: fileName, directives: directives, pipes: pipes, ngModules: ngModules, injectables: injectables, exportsNonSourceFiles: exportsNonSourceFiles,\n    };\n}\n/**\n * @param {?} host\n * @param {?} staticSymbolResolver\n * @param {?} metadataResolver\n * @param {?} fileName\n * @return {?}\n */\nexport function analyzeFileForInjectables(host, staticSymbolResolver, metadataResolver, fileName) {\n    var /** @type {?} */ injectables = [];\n    var /** @type {?} */ shallowModules = [];\n    if (staticSymbolResolver.hasDecorators(fileName)) {\n        staticSymbolResolver.getSymbolsOf(fileName).forEach(function (symbol) {\n            var /** @type {?} */ resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);\n            var /** @type {?} */ symbolMeta = resolvedSymbol.metadata;\n            if (!symbolMeta || symbolMeta.__symbolic === 'error') {\n                return;\n            }\n            var /** @type {?} */ isNgSymbol = false;\n            if (symbolMeta.__symbolic === 'class') {\n                if (metadataResolver.isInjectable(symbol)) {\n                    isNgSymbol = true;\n                    var /** @type {?} */ injectable = metadataResolver.getInjectableMetadata(symbol, null, false);\n                    if (injectable) {\n                        injectables.push(injectable);\n                    }\n                }\n                else if (metadataResolver.isNgModule(symbol)) {\n                    isNgSymbol = true;\n                    var /** @type {?} */ module = metadataResolver.getShallowModuleMetadata(symbol);\n                    if (module) {\n                        shallowModules.push(module);\n                    }\n                }\n            }\n        });\n    }\n    return { fileName: fileName, injectables: injectables, shallowModules: shallowModules };\n}\n/**\n * @param {?} host\n * @param {?} metadata\n * @return {?}\n */\nfunction isValueExportingNonSourceFile(host, metadata) {\n    var /** @type {?} */ exportsNonSourceFiles = false;\n    var Visitor = /** @class */ (function () {\n        function Visitor() {\n        }\n        /**\n         * @param {?} arr\n         * @param {?} context\n         * @return {?}\n         */\n        Visitor.prototype.visitArray = /**\n         * @param {?} arr\n         * @param {?} context\n         * @return {?}\n         */\n        function (arr, context) {\n            var _this = this;\n            arr.forEach(function (v) { return visitValue(v, _this, context); });\n        };\n        /**\n         * @param {?} map\n         * @param {?} context\n         * @return {?}\n         */\n        Visitor.prototype.visitStringMap = /**\n         * @param {?} map\n         * @param {?} context\n         * @return {?}\n         */\n        function (map, context) {\n            var _this = this;\n            Object.keys(map).forEach(function (key) { return visitValue(map[key], _this, context); });\n        };\n        /**\n         * @param {?} value\n         * @param {?} context\n         * @return {?}\n         */\n        Visitor.prototype.visitPrimitive = /**\n         * @param {?} value\n         * @param {?} context\n         * @return {?}\n         */\n        function (value, context) { };\n        /**\n         * @param {?} value\n         * @param {?} context\n         * @return {?}\n         */\n        Visitor.prototype.visitOther = /**\n         * @param {?} value\n         * @param {?} context\n         * @return {?}\n         */\n        function (value, context) {\n            if (value instanceof StaticSymbol && !host.isSourceFile(value.filePath)) {\n                exportsNonSourceFiles = true;\n            }\n        };\n        return Visitor;\n    }());\n    visitValue(metadata, new Visitor(), null);\n    return exportsNonSourceFiles;\n}\n/**\n * @param {?} analyzedFiles\n * @return {?}\n */\nexport function mergeAnalyzedFiles(analyzedFiles) {\n    var /** @type {?} */ allNgModules = [];\n    var /** @type {?} */ ngModuleByPipeOrDirective = new Map();\n    var /** @type {?} */ allPipesAndDirectives = new Set();\n    analyzedFiles.forEach(function (af) {\n        af.ngModules.forEach(function (ngModule) {\n            allNgModules.push(ngModule);\n            ngModule.declaredDirectives.forEach(function (d) { return ngModuleByPipeOrDirective.set(d.reference, ngModule); });\n            ngModule.declaredPipes.forEach(function (p) { return ngModuleByPipeOrDirective.set(p.reference, ngModule); });\n        });\n        af.directives.forEach(function (d) { return allPipesAndDirectives.add(d); });\n        af.pipes.forEach(function (p) { return allPipesAndDirectives.add(p); });\n    });\n    var /** @type {?} */ symbolsMissingModule = [];\n    allPipesAndDirectives.forEach(function (ref) {\n        if (!ngModuleByPipeOrDirective.has(ref)) {\n            symbolsMissingModule.push(ref);\n        }\n    });\n    return {\n        ngModules: allNgModules,\n        ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,\n        symbolsMissingModule: symbolsMissingModule,\n        files: analyzedFiles\n    };\n}\n/**\n * @param {?} files\n * @return {?}\n */\nfunction mergeAndValidateNgFiles(files) {\n    return validateAnalyzedModules(mergeAnalyzedFiles(files));\n}\n//# sourceMappingURL=compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { identifierName } from '../compile_metadata';\nimport * as o from '../output/output_ast';\nimport { error } from '../util';\nimport { Identifiers as R3 } from './r3_identifiers';\nimport { BUILD_OPTIMIZER_COLOCATE } from './r3_types';\nimport { createFactory } from './r3_view_compiler';\n/**\n * Write a pipe definition to the output context.\n * @param {?} outputCtx\n * @param {?} pipe\n * @param {?} reflector\n * @param {?} mode\n * @return {?}\n */\nexport function compilePipe(outputCtx, pipe, reflector, mode) {\n    var /** @type {?} */ definitionMapValues = [];\n    // e.g. `name: 'myPipe'`\n    definitionMapValues.push({ key: 'name', value: o.literal(pipe.name), quoted: false });\n    // e.g. `type: MyPipe`\n    definitionMapValues.push({ key: 'type', value: outputCtx.importExpr(pipe.type.reference), quoted: false });\n    // e.g. factory: function MyPipe_Factory() { return new MyPipe(); },\n    var /** @type {?} */ templateFactory = createFactory(pipe.type, outputCtx, reflector, []);\n    definitionMapValues.push({ key: 'factory', value: templateFactory, quoted: false });\n    // e.g. pure: true\n    if (pipe.pure) {\n        definitionMapValues.push({ key: 'pure', value: o.literal(true), quoted: false });\n    }\n    var /** @type {?} */ className = /** @type {?} */ ((identifierName(pipe.type)));\n    className || error(\"Cannot resolve the name of \" + pipe.type);\n    var /** @type {?} */ definitionField = outputCtx.constantPool.propertyNameOf(3 /* Pipe */);\n    var /** @type {?} */ definitionFunction = o.importExpr(R3.definePipe).callFn([o.literalMap(definitionMapValues)]);\n    if (mode === 0 /* PartialClass */) {\n        outputCtx.statements.push(new o.ClassStmt(className, null, /* fields */ [new o.ClassField(definitionField, /* type */ o.INFERRED_TYPE, /* modifiers */ [o.StmtModifier.Static], definitionFunction)], /* getters */ [], /* constructorMethod */ new o.ClassMethod(null, [], []), /* methods */ []));\n    }\n    else {\n        // Create back-patch definition.\n        var /** @type {?} */ classReference = outputCtx.importExpr(pipe.type.reference);\n        // Create the back-patch statement\n        outputCtx.statements.push(new o.CommentStmt(BUILD_OPTIMIZER_COLOCATE), classReference.prop(definitionField).set(definitionFunction).toStmt());\n    }\n}\n//# sourceMappingURL=r3_pipe_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { syntaxError } from '../util';\n/**\n * @record\n */\nexport function Position() { }\nfunction Position_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Position.prototype.fileName;\n    /** @type {?} */\n    Position.prototype.line;\n    /** @type {?} */\n    Position.prototype.column;\n}\n/**\n * @record\n */\nexport function FormattedMessageChain() { }\nfunction FormattedMessageChain_tsickle_Closure_declarations() {\n    /** @type {?} */\n    FormattedMessageChain.prototype.message;\n    /** @type {?|undefined} */\n    FormattedMessageChain.prototype.position;\n    /** @type {?|undefined} */\n    FormattedMessageChain.prototype.next;\n}\nvar /** @type {?} */ FORMATTED_MESSAGE = 'ngFormattedMessage';\n/**\n * @param {?} level\n * @return {?}\n */\nfunction indentStr(level) {\n    if (level <= 0)\n        return '';\n    if (level < 6)\n        return ['', ' ', '  ', '   ', '    ', '     '][level];\n    var /** @type {?} */ half = indentStr(Math.floor(level / 2));\n    return half + half + (level % 2 === 1 ? ' ' : '');\n}\n/**\n * @param {?} chain\n * @param {?=} indent\n * @return {?}\n */\nfunction formatChain(chain, indent) {\n    if (indent === void 0) { indent = 0; }\n    if (!chain)\n        return '';\n    var /** @type {?} */ position = chain.position ?\n        chain.position.fileName + \"(\" + (chain.position.line + 1) + \",\" + (chain.position.column + 1) + \")\" :\n        '';\n    var /** @type {?} */ prefix = position && indent === 0 ? position + \": \" : '';\n    var /** @type {?} */ postfix = position && indent !== 0 ? \" at \" + position : '';\n    var /** @type {?} */ message = \"\" + prefix + chain.message + postfix;\n    return \"\" + indentStr(indent) + message + ((chain.next && ('\\n' + formatChain(chain.next, indent + 2))) || '');\n}\n/**\n * @param {?} chain\n * @return {?}\n */\nexport function formattedError(chain) {\n    var /** @type {?} */ message = formatChain(chain) + '.';\n    var /** @type {?} */ error = /** @type {?} */ (syntaxError(message));\n    (/** @type {?} */ (error))[FORMATTED_MESSAGE] = true;\n    error.chain = chain;\n    error.position = chain.position;\n    return error;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function isFormattedError(error) {\n    return !!(/** @type {?} */ (error))[FORMATTED_MESSAGE];\n}\n//# sourceMappingURL=formatted_error.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { CompileSummaryKind } from '../compile_metadata';\nimport { createAttribute, createComponent, createContentChild, createContentChildren, createDirective, createHost, createHostBinding, createHostListener, createInject, createInjectable, createInput, createNgModule, createOptional, createOutput, createPipe, createSelf, createSkipSelf, createViewChild, createViewChildren } from '../core';\nimport { syntaxError } from '../util';\nimport { formattedError } from './formatted_error';\nimport { StaticSymbol } from './static_symbol';\nvar /** @type {?} */ ANGULAR_CORE = '@angular/core';\nvar /** @type {?} */ ANGULAR_ROUTER = '@angular/router';\nvar /** @type {?} */ HIDDEN_KEY = /^\\$.*\\$$/;\nvar /** @type {?} */ IGNORE = {\n    __symbolic: 'ignore'\n};\nvar /** @type {?} */ USE_VALUE = 'useValue';\nvar /** @type {?} */ PROVIDE = 'provide';\nvar /** @type {?} */ REFERENCE_SET = new Set([USE_VALUE, 'useFactory', 'data', 'id', 'loadChildren']);\nvar /** @type {?} */ TYPEGUARD_POSTFIX = 'TypeGuard';\nvar /** @type {?} */ USE_IF = 'UseIf';\n/**\n * @param {?} value\n * @return {?}\n */\nfunction shouldIgnore(value) {\n    return value && value.__symbolic == 'ignore';\n}\n/**\n * A static reflector implements enough of the Reflector API that is necessary to compile\n * templates statically.\n */\nvar /**\n * A static reflector implements enough of the Reflector API that is necessary to compile\n * templates statically.\n */\nStaticReflector = /** @class */ (function () {\n    function StaticReflector(summaryResolver, symbolResolver, knownMetadataClasses, knownMetadataFunctions, errorRecorder) {\n        if (knownMetadataClasses === void 0) { knownMetadataClasses = []; }\n        if (knownMetadataFunctions === void 0) { knownMetadataFunctions = []; }\n        var _this = this;\n        this.summaryResolver = summaryResolver;\n        this.symbolResolver = symbolResolver;\n        this.errorRecorder = errorRecorder;\n        this.annotationCache = new Map();\n        this.shallowAnnotationCache = new Map();\n        this.propertyCache = new Map();\n        this.parameterCache = new Map();\n        this.methodCache = new Map();\n        this.staticCache = new Map();\n        this.conversionMap = new Map();\n        this.resolvedExternalReferences = new Map();\n        this.annotationForParentClassWithSummaryKind = new Map();\n        this.initializeConversionMap();\n        knownMetadataClasses.forEach(function (kc) {\n            return _this._registerDecoratorOrConstructor(_this.getStaticSymbol(kc.filePath, kc.name), kc.ctor);\n        });\n        knownMetadataFunctions.forEach(function (kf) { return _this._registerFunction(_this.getStaticSymbol(kf.filePath, kf.name), kf.fn); });\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Directive, [createDirective, createComponent]);\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Pipe, [createPipe]);\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.NgModule, [createNgModule]);\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Injectable, [createInjectable, createPipe, createDirective, createComponent, createNgModule]);\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    StaticReflector.prototype.componentModuleUrl = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        var /** @type {?} */ staticSymbol = this.findSymbolDeclaration(typeOrFunc);\n        return this.symbolResolver.getResourcePath(staticSymbol);\n    };\n    /**\n     * @param {?} ref\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    StaticReflector.prototype.resolveExternalReference = /**\n     * @param {?} ref\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    function (ref, containingFile) {\n        var /** @type {?} */ key = undefined;\n        if (!containingFile) {\n            key = ref.moduleName + \":\" + ref.name;\n            var /** @type {?} */ declarationSymbol_1 = this.resolvedExternalReferences.get(key);\n            if (declarationSymbol_1)\n                return declarationSymbol_1;\n        }\n        var /** @type {?} */ refSymbol = this.symbolResolver.getSymbolByModule(/** @type {?} */ ((ref.moduleName)), /** @type {?} */ ((ref.name)), containingFile);\n        var /** @type {?} */ declarationSymbol = this.findSymbolDeclaration(refSymbol);\n        if (!containingFile) {\n            this.symbolResolver.recordModuleNameForFileName(refSymbol.filePath, /** @type {?} */ ((ref.moduleName)));\n            this.symbolResolver.recordImportAs(declarationSymbol, refSymbol);\n        }\n        if (key) {\n            this.resolvedExternalReferences.set(key, declarationSymbol);\n        }\n        return declarationSymbol;\n    };\n    /**\n     * @param {?} moduleUrl\n     * @param {?} name\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    StaticReflector.prototype.findDeclaration = /**\n     * @param {?} moduleUrl\n     * @param {?} name\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    function (moduleUrl, name, containingFile) {\n        return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));\n    };\n    /**\n     * @param {?} moduleUrl\n     * @param {?} name\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    StaticReflector.prototype.tryFindDeclaration = /**\n     * @param {?} moduleUrl\n     * @param {?} name\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    function (moduleUrl, name, containingFile) {\n        var _this = this;\n        return this.symbolResolver.ignoreErrorsFor(function () { return _this.findDeclaration(moduleUrl, name, containingFile); });\n    };\n    /**\n     * @param {?} symbol\n     * @return {?}\n     */\n    StaticReflector.prototype.findSymbolDeclaration = /**\n     * @param {?} symbol\n     * @return {?}\n     */\n    function (symbol) {\n        var /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\n        if (resolvedSymbol) {\n            var /** @type {?} */ resolvedMetadata = resolvedSymbol.metadata;\n            if (resolvedMetadata && resolvedMetadata.__symbolic === 'resolved') {\n                resolvedMetadata = resolvedMetadata.symbol;\n            }\n            if (resolvedMetadata instanceof StaticSymbol) {\n                return this.findSymbolDeclaration(resolvedSymbol.metadata);\n            }\n        }\n        return symbol;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype.tryAnnotations = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ originalRecorder = this.errorRecorder;\n        this.errorRecorder = function (error, fileName) { };\n        try {\n            return this.annotations(type);\n        }\n        finally {\n            this.errorRecorder = originalRecorder;\n        }\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype.annotations = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var _this = this;\n        return this._annotations(type, function (type, decorators) { return _this.simplify(type, decorators); }, this.annotationCache);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype.shallowAnnotations = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var _this = this;\n        return this._annotations(type, function (type, decorators) { return _this.simplify(type, decorators, true); }, this.shallowAnnotationCache);\n    };\n    /**\n     * @param {?} type\n     * @param {?} simplify\n     * @param {?} annotationCache\n     * @return {?}\n     */\n    StaticReflector.prototype._annotations = /**\n     * @param {?} type\n     * @param {?} simplify\n     * @param {?} annotationCache\n     * @return {?}\n     */\n    function (type, simplify, annotationCache) {\n        var /** @type {?} */ annotations = annotationCache.get(type);\n        if (!annotations) {\n            annotations = [];\n            var /** @type {?} */ classMetadata = this.getTypeMetadata(type);\n            var /** @type {?} */ parentType = this.findParentType(type, classMetadata);\n            if (parentType) {\n                var /** @type {?} */ parentAnnotations = this.annotations(parentType);\n                annotations.push.apply(annotations, parentAnnotations);\n            }\n            var /** @type {?} */ ownAnnotations_1 = [];\n            if (classMetadata['decorators']) {\n                ownAnnotations_1 = simplify(type, classMetadata['decorators']);\n                annotations.push.apply(annotations, ownAnnotations_1);\n            }\n            if (parentType && !this.summaryResolver.isLibraryFile(type.filePath) &&\n                this.summaryResolver.isLibraryFile(parentType.filePath)) {\n                var /** @type {?} */ summary = this.summaryResolver.resolveSummary(parentType);\n                if (summary && summary.type) {\n                    var /** @type {?} */ requiredAnnotationTypes = /** @type {?} */ ((this.annotationForParentClassWithSummaryKind.get(/** @type {?} */ ((summary.type.summaryKind)))));\n                    var /** @type {?} */ typeHasRequiredAnnotation = requiredAnnotationTypes.some(function (requiredType) { return ownAnnotations_1.some(function (ann) { return requiredType.isTypeOf(ann); }); });\n                    if (!typeHasRequiredAnnotation) {\n                        this.reportError(formatMetadataError(metadataError(\"Class \" + type.name + \" in \" + type.filePath + \" extends from a \" + CompileSummaryKind[(/** @type {?} */ ((summary.type.summaryKind)))] + \" in another compilation unit without duplicating the decorator\", undefined, \"Please add a \" + requiredAnnotationTypes.map(function (type) { return type.ngMetadataName; }).join(' or ') + \" decorator to the class\"), type), type);\n                    }\n                }\n            }\n            annotationCache.set(type, annotations.filter(function (ann) { return !!ann; }));\n        }\n        return annotations;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype.propMetadata = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var _this = this;\n        var /** @type {?} */ propMetadata = this.propertyCache.get(type);\n        if (!propMetadata) {\n            var /** @type {?} */ classMetadata = this.getTypeMetadata(type);\n            propMetadata = {};\n            var /** @type {?} */ parentType = this.findParentType(type, classMetadata);\n            if (parentType) {\n                var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentType);\n                Object.keys(parentPropMetadata_1).forEach(function (parentProp) {\n                    /** @type {?} */ ((propMetadata))[parentProp] = parentPropMetadata_1[parentProp];\n                });\n            }\n            var /** @type {?} */ members_1 = classMetadata['members'] || {};\n            Object.keys(members_1).forEach(function (propName) {\n                var /** @type {?} */ propData = members_1[propName];\n                var /** @type {?} */ prop = (/** @type {?} */ (propData))\n                    .find(function (a) { return a['__symbolic'] == 'property' || a['__symbolic'] == 'method'; });\n                var /** @type {?} */ decorators = [];\n                if (/** @type {?} */ ((propMetadata))[propName]) {\n                    decorators.push.apply(decorators, /** @type {?} */ ((propMetadata))[propName]);\n                } /** @type {?} */\n                ((propMetadata))[propName] = decorators;\n                if (prop && prop['decorators']) {\n                    decorators.push.apply(decorators, _this.simplify(type, prop['decorators']));\n                }\n            });\n            this.propertyCache.set(type, propMetadata);\n        }\n        return propMetadata;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype.parameters = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var _this = this;\n        if (!(type instanceof StaticSymbol)) {\n            this.reportError(new Error(\"parameters received \" + JSON.stringify(type) + \" which is not a StaticSymbol\"), type);\n            return [];\n        }\n        try {\n            var /** @type {?} */ parameters_1 = this.parameterCache.get(type);\n            if (!parameters_1) {\n                var /** @type {?} */ classMetadata = this.getTypeMetadata(type);\n                var /** @type {?} */ parentType = this.findParentType(type, classMetadata);\n                var /** @type {?} */ members = classMetadata ? classMetadata['members'] : null;\n                var /** @type {?} */ ctorData = members ? members['__ctor__'] : null;\n                if (ctorData) {\n                    var /** @type {?} */ ctor = (/** @type {?} */ (ctorData)).find(function (a) { return a['__symbolic'] == 'constructor'; });\n                    var /** @type {?} */ rawParameterTypes = /** @type {?} */ (ctor['parameters']) || [];\n                    var /** @type {?} */ parameterDecorators_1 = /** @type {?} */ (this.simplify(type, ctor['parameterDecorators'] || []));\n                    parameters_1 = [];\n                    rawParameterTypes.forEach(function (rawParamType, index) {\n                        var /** @type {?} */ nestedResult = [];\n                        var /** @type {?} */ paramType = _this.trySimplify(type, rawParamType);\n                        if (paramType)\n                            nestedResult.push(paramType);\n                        var /** @type {?} */ decorators = parameterDecorators_1 ? parameterDecorators_1[index] : null;\n                        if (decorators) {\n                            nestedResult.push.apply(nestedResult, decorators);\n                        } /** @type {?} */\n                        ((parameters_1)).push(nestedResult);\n                    });\n                }\n                else if (parentType) {\n                    parameters_1 = this.parameters(parentType);\n                }\n                if (!parameters_1) {\n                    parameters_1 = [];\n                }\n                this.parameterCache.set(type, parameters_1);\n            }\n            return parameters_1;\n        }\n        catch (/** @type {?} */ e) {\n            console.error(\"Failed on type \" + JSON.stringify(type) + \" with error \" + e);\n            throw e;\n        }\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype._methodNames = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ methodNames = this.methodCache.get(type);\n        if (!methodNames) {\n            var /** @type {?} */ classMetadata = this.getTypeMetadata(type);\n            methodNames = {};\n            var /** @type {?} */ parentType = this.findParentType(type, classMetadata);\n            if (parentType) {\n                var /** @type {?} */ parentMethodNames_1 = this._methodNames(parentType);\n                Object.keys(parentMethodNames_1).forEach(function (parentProp) {\n                    /** @type {?} */ ((methodNames))[parentProp] = parentMethodNames_1[parentProp];\n                });\n            }\n            var /** @type {?} */ members_2 = classMetadata['members'] || {};\n            Object.keys(members_2).forEach(function (propName) {\n                var /** @type {?} */ propData = members_2[propName];\n                var /** @type {?} */ isMethod = (/** @type {?} */ (propData)).some(function (a) { return a['__symbolic'] == 'method'; }); /** @type {?} */\n                ((methodNames))[propName] = /** @type {?} */ ((methodNames))[propName] || isMethod;\n            });\n            this.methodCache.set(type, methodNames);\n        }\n        return methodNames;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype._staticMembers = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ staticMembers = this.staticCache.get(type);\n        if (!staticMembers) {\n            var /** @type {?} */ classMetadata = this.getTypeMetadata(type);\n            var /** @type {?} */ staticMemberData = classMetadata['statics'] || {};\n            staticMembers = Object.keys(staticMemberData);\n            this.staticCache.set(type, staticMembers);\n        }\n        return staticMembers;\n    };\n    /**\n     * @param {?} type\n     * @param {?} classMetadata\n     * @return {?}\n     */\n    StaticReflector.prototype.findParentType = /**\n     * @param {?} type\n     * @param {?} classMetadata\n     * @return {?}\n     */\n    function (type, classMetadata) {\n        var /** @type {?} */ parentType = this.trySimplify(type, classMetadata['extends']);\n        if (parentType instanceof StaticSymbol) {\n            return parentType;\n        }\n    };\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    StaticReflector.prototype.hasLifecycleHook = /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    function (type, lcProperty) {\n        if (!(type instanceof StaticSymbol)) {\n            this.reportError(new Error(\"hasLifecycleHook received \" + JSON.stringify(type) + \" which is not a StaticSymbol\"), type);\n        }\n        try {\n            return !!this._methodNames(type)[lcProperty];\n        }\n        catch (/** @type {?} */ e) {\n            console.error(\"Failed on type \" + JSON.stringify(type) + \" with error \" + e);\n            throw e;\n        }\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype.guards = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        if (!(type instanceof StaticSymbol)) {\n            this.reportError(new Error(\"guards received \" + JSON.stringify(type) + \" which is not a StaticSymbol\"), type);\n            return {};\n        }\n        var /** @type {?} */ staticMembers = this._staticMembers(type);\n        var /** @type {?} */ result = {};\n        for (var _i = 0, staticMembers_1 = staticMembers; _i < staticMembers_1.length; _i++) {\n            var name_1 = staticMembers_1[_i];\n            if (name_1.endsWith(TYPEGUARD_POSTFIX)) {\n                var /** @type {?} */ property = name_1.substr(0, name_1.length - TYPEGUARD_POSTFIX.length);\n                var /** @type {?} */ value = void 0;\n                if (property.endsWith(USE_IF)) {\n                    property = name_1.substr(0, property.length - USE_IF.length);\n                    value = USE_IF;\n                }\n                else {\n                    value = this.getStaticSymbol(type.filePath, type.name, [name_1]);\n                }\n                result[property] = value;\n            }\n        }\n        return result;\n    };\n    /**\n     * @param {?} type\n     * @param {?} ctor\n     * @return {?}\n     */\n    StaticReflector.prototype._registerDecoratorOrConstructor = /**\n     * @param {?} type\n     * @param {?} ctor\n     * @return {?}\n     */\n    function (type, ctor) {\n        this.conversionMap.set(type, function (context, args) { return new (ctor.bind.apply(ctor, [void 0].concat(args)))(); });\n    };\n    /**\n     * @param {?} type\n     * @param {?} fn\n     * @return {?}\n     */\n    StaticReflector.prototype._registerFunction = /**\n     * @param {?} type\n     * @param {?} fn\n     * @return {?}\n     */\n    function (type, fn) {\n        this.conversionMap.set(type, function (context, args) { return fn.apply(undefined, args); });\n    };\n    /**\n     * @return {?}\n     */\n    StaticReflector.prototype.initializeConversionMap = /**\n     * @return {?}\n     */\n    function () {\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Injectable'), createInjectable);\n        this.injectionToken = this.findDeclaration(ANGULAR_CORE, 'InjectionToken');\n        this.opaqueToken = this.findDeclaration(ANGULAR_CORE, 'OpaqueToken');\n        this.ROUTES = this.tryFindDeclaration(ANGULAR_ROUTER, 'ROUTES');\n        this.ANALYZE_FOR_ENTRY_COMPONENTS =\n            this.findDeclaration(ANGULAR_CORE, 'ANALYZE_FOR_ENTRY_COMPONENTS');\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Inject'), createInject);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Attribute'), createAttribute);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChild'), createContentChild);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChildren'), createContentChildren);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChild'), createViewChild);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChildren'), createViewChildren);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Input'), createInput);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Output'), createOutput);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Pipe'), createPipe);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostBinding'), createHostBinding);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostListener'), createHostListener);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Directive'), createDirective);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Component'), createComponent);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'NgModule'), createNgModule);\n        // Note: Some metadata classes can be used directly with Provider.deps.\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\n    };\n    /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param declarationFile the absolute path of the file where the symbol is declared\n     * @param name the name of the type.\n     */\n    /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param {?} declarationFile the absolute path of the file where the symbol is declared\n     * @param {?} name the name of the type.\n     * @param {?=} members\n     * @return {?}\n     */\n    StaticReflector.prototype.getStaticSymbol = /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param {?} declarationFile the absolute path of the file where the symbol is declared\n     * @param {?} name the name of the type.\n     * @param {?=} members\n     * @return {?}\n     */\n    function (declarationFile, name, members) {\n        return this.symbolResolver.getStaticSymbol(declarationFile, name, members);\n    };\n    /**\n     * Simplify but discard any errors\n     * @param {?} context\n     * @param {?} value\n     * @return {?}\n     */\n    StaticReflector.prototype.trySimplify = /**\n     * Simplify but discard any errors\n     * @param {?} context\n     * @param {?} value\n     * @return {?}\n     */\n    function (context, value) {\n        var /** @type {?} */ originalRecorder = this.errorRecorder;\n        this.errorRecorder = function (error, fileName) { };\n        var /** @type {?} */ result = this.simplify(context, value);\n        this.errorRecorder = originalRecorder;\n        return result;\n    };\n    /**\n     * \\@internal\n     * @param {?} context\n     * @param {?} value\n     * @param {?=} lazy\n     * @return {?}\n     */\n    StaticReflector.prototype.simplify = /**\n     * \\@internal\n     * @param {?} context\n     * @param {?} value\n     * @param {?=} lazy\n     * @return {?}\n     */\n    function (context, value, lazy) {\n        if (lazy === void 0) { lazy = false; }\n        var /** @type {?} */ self = this;\n        var /** @type {?} */ scope = BindingScope.empty;\n        var /** @type {?} */ calling = new Map();\n        var /** @type {?} */ rootContext = context;\n        /**\n         * @param {?} context\n         * @param {?} value\n         * @param {?} depth\n         * @param {?} references\n         * @return {?}\n         */\n        function simplifyInContext(context, value, depth, references) {\n            /**\n             * @param {?} staticSymbol\n             * @return {?}\n             */\n            function resolveReferenceValue(staticSymbol) {\n                var /** @type {?} */ resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);\n                return resolvedSymbol ? resolvedSymbol.metadata : null;\n            }\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            function simplifyEagerly(value) {\n                return simplifyInContext(context, value, depth, 0);\n            }\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            function simplifyLazily(value) {\n                return simplifyInContext(context, value, depth, references + 1);\n            }\n            /**\n             * @param {?} nestedContext\n             * @param {?} value\n             * @return {?}\n             */\n            function simplifyNested(nestedContext, value) {\n                if (nestedContext === context) {\n                    // If the context hasn't changed let the exception propagate unmodified.\n                    return simplifyInContext(nestedContext, value, depth + 1, references);\n                }\n                try {\n                    return simplifyInContext(nestedContext, value, depth + 1, references);\n                }\n                catch (/** @type {?} */ e) {\n                    if (isMetadataError(e)) {\n                        // Propagate the message text up but add a message to the chain that explains how we got\n                        // here.\n                        // e.chain implies e.symbol\n                        var /** @type {?} */ summaryMsg = e.chain ? 'references \\'' + /** @type {?} */ ((e.symbol)).name + '\\'' : errorSummary(e);\n                        var /** @type {?} */ summary = \"'\" + nestedContext.name + \"' \" + summaryMsg;\n                        var /** @type {?} */ chain = { message: summary, position: e.position, next: e.chain };\n                        // TODO(chuckj): retrieve the position information indirectly from the collectors node\n                        // map if the metadata is from a .ts file.\n                        self.error({\n                            message: e.message,\n                            advise: e.advise,\n                            context: e.context, chain: chain,\n                            symbol: nestedContext\n                        }, context);\n                    }\n                    else {\n                        // It is probably an internal error.\n                        throw e;\n                    }\n                }\n            }\n            /**\n             * @param {?} functionSymbol\n             * @param {?} targetFunction\n             * @param {?} args\n             * @param {?} targetExpression\n             * @return {?}\n             */\n            function simplifyCall(functionSymbol, targetFunction, args, targetExpression) {\n                if (targetFunction && targetFunction['__symbolic'] == 'function') {\n                    if (calling.get(functionSymbol)) {\n                        self.error({\n                            message: 'Recursion is not supported',\n                            summary: \"called '\" + functionSymbol.name + \"' recursively\",\n                            value: targetFunction\n                        }, functionSymbol);\n                    }\n                    try {\n                        var /** @type {?} */ value_1 = targetFunction['value'];\n                        if (value_1 && (depth != 0 || value_1.__symbolic != 'error')) {\n                            var /** @type {?} */ parameters = targetFunction['parameters'];\n                            var /** @type {?} */ defaults = targetFunction.defaults;\n                            args = args.map(function (arg) { return simplifyNested(context, arg); })\n                                .map(function (arg) { return shouldIgnore(arg) ? undefined : arg; });\n                            if (defaults && defaults.length > args.length) {\n                                args.push.apply(args, defaults.slice(args.length).map(function (value) { return simplify(value); }));\n                            }\n                            calling.set(functionSymbol, true);\n                            var /** @type {?} */ functionScope = BindingScope.build();\n                            for (var /** @type {?} */ i = 0; i < parameters.length; i++) {\n                                functionScope.define(parameters[i], args[i]);\n                            }\n                            var /** @type {?} */ oldScope = scope;\n                            var /** @type {?} */ result_1;\n                            try {\n                                scope = functionScope.done();\n                                result_1 = simplifyNested(functionSymbol, value_1);\n                            }\n                            finally {\n                                scope = oldScope;\n                            }\n                            return result_1;\n                        }\n                    }\n                    finally {\n                        calling.delete(functionSymbol);\n                    }\n                }\n                if (depth === 0) {\n                    // If depth is 0 we are evaluating the top level expression that is describing element\n                    // decorator. In this case, it is a decorator we don't understand, such as a custom\n                    // non-angular decorator, and we should just ignore it.\n                    return IGNORE;\n                }\n                var /** @type {?} */ position = undefined;\n                if (targetExpression && targetExpression.__symbolic == 'resolved') {\n                    var /** @type {?} */ line = targetExpression.line;\n                    var /** @type {?} */ character = targetExpression.character;\n                    var /** @type {?} */ fileName = targetExpression.fileName;\n                    if (fileName != null && line != null && character != null) {\n                        position = { fileName: fileName, line: line, column: character };\n                    }\n                }\n                self.error({\n                    message: FUNCTION_CALL_NOT_SUPPORTED,\n                    context: functionSymbol,\n                    value: targetFunction, position: position\n                }, context);\n            }\n            /**\n             * @param {?} expression\n             * @return {?}\n             */\n            function simplify(expression) {\n                if (isPrimitive(expression)) {\n                    return expression;\n                }\n                if (expression instanceof Array) {\n                    var /** @type {?} */ result_2 = [];\n                    for (var _i = 0, _a = (/** @type {?} */ (expression)); _i < _a.length; _i++) {\n                        var item = _a[_i];\n                        // Check for a spread expression\n                        if (item && item.__symbolic === 'spread') {\n                            // We call with references as 0 because we require the actual value and cannot\n                            // tolerate a reference here.\n                            var /** @type {?} */ spreadArray = simplifyEagerly(item.expression);\n                            if (Array.isArray(spreadArray)) {\n                                for (var _b = 0, spreadArray_1 = spreadArray; _b < spreadArray_1.length; _b++) {\n                                    var spreadItem = spreadArray_1[_b];\n                                    result_2.push(spreadItem);\n                                }\n                                continue;\n                            }\n                        }\n                        var /** @type {?} */ value_2 = simplify(item);\n                        if (shouldIgnore(value_2)) {\n                            continue;\n                        }\n                        result_2.push(value_2);\n                    }\n                    return result_2;\n                }\n                if (expression instanceof StaticSymbol) {\n                    // Stop simplification at builtin symbols or if we are in a reference context and\n                    // the symbol doesn't have members.\n                    if (expression === self.injectionToken || self.conversionMap.has(expression) ||\n                        (references > 0 && !expression.members.length)) {\n                        return expression;\n                    }\n                    else {\n                        var /** @type {?} */ staticSymbol = expression;\n                        var /** @type {?} */ declarationValue = resolveReferenceValue(staticSymbol);\n                        if (declarationValue != null) {\n                            return simplifyNested(staticSymbol, declarationValue);\n                        }\n                        else {\n                            return staticSymbol;\n                        }\n                    }\n                }\n                if (expression) {\n                    if (expression['__symbolic']) {\n                        var /** @type {?} */ staticSymbol = void 0;\n                        switch (expression['__symbolic']) {\n                            case 'binop':\n                                var /** @type {?} */ left = simplify(expression['left']);\n                                if (shouldIgnore(left))\n                                    return left;\n                                var /** @type {?} */ right = simplify(expression['right']);\n                                if (shouldIgnore(right))\n                                    return right;\n                                switch (expression['operator']) {\n                                    case '&&':\n                                        return left && right;\n                                    case '||':\n                                        return left || right;\n                                    case '|':\n                                        return left | right;\n                                    case '^':\n                                        return left ^ right;\n                                    case '&':\n                                        return left & right;\n                                    case '==':\n                                        return left == right;\n                                    case '!=':\n                                        return left != right;\n                                    case '===':\n                                        return left === right;\n                                    case '!==':\n                                        return left !== right;\n                                    case '<':\n                                        return left < right;\n                                    case '>':\n                                        return left > right;\n                                    case '<=':\n                                        return left <= right;\n                                    case '>=':\n                                        return left >= right;\n                                    case '<<':\n                                        return left << right;\n                                    case '>>':\n                                        return left >> right;\n                                    case '+':\n                                        return left + right;\n                                    case '-':\n                                        return left - right;\n                                    case '*':\n                                        return left * right;\n                                    case '/':\n                                        return left / right;\n                                    case '%':\n                                        return left % right;\n                                }\n                                return null;\n                            case 'if':\n                                var /** @type {?} */ condition = simplify(expression['condition']);\n                                return condition ? simplify(expression['thenExpression']) :\n                                    simplify(expression['elseExpression']);\n                            case 'pre':\n                                var /** @type {?} */ operand = simplify(expression['operand']);\n                                if (shouldIgnore(operand))\n                                    return operand;\n                                switch (expression['operator']) {\n                                    case '+':\n                                        return operand;\n                                    case '-':\n                                        return -operand;\n                                    case '!':\n                                        return !operand;\n                                    case '~':\n                                        return ~operand;\n                                }\n                                return null;\n                            case 'index':\n                                var /** @type {?} */ indexTarget = simplifyEagerly(expression['expression']);\n                                var /** @type {?} */ index = simplifyEagerly(expression['index']);\n                                if (indexTarget && isPrimitive(index))\n                                    return indexTarget[index];\n                                return null;\n                            case 'select':\n                                var /** @type {?} */ member = expression['member'];\n                                var /** @type {?} */ selectContext = context;\n                                var /** @type {?} */ selectTarget = simplify(expression['expression']);\n                                if (selectTarget instanceof StaticSymbol) {\n                                    var /** @type {?} */ members = selectTarget.members.concat(member);\n                                    selectContext =\n                                        self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);\n                                    var /** @type {?} */ declarationValue = resolveReferenceValue(selectContext);\n                                    if (declarationValue != null) {\n                                        return simplifyNested(selectContext, declarationValue);\n                                    }\n                                    else {\n                                        return selectContext;\n                                    }\n                                }\n                                if (selectTarget && isPrimitive(member))\n                                    return simplifyNested(selectContext, selectTarget[member]);\n                                return null;\n                            case 'reference':\n                                // Note: This only has to deal with variable references, as symbol references have\n                                // been converted into 'resolved'\n                                // in the StaticSymbolResolver.\n                                var /** @type {?} */ name_2 = expression['name'];\n                                var /** @type {?} */ localValue = scope.resolve(name_2);\n                                if (localValue != BindingScope.missing) {\n                                    return localValue;\n                                }\n                                break;\n                            case 'resolved':\n                                try {\n                                    return simplify(expression.symbol);\n                                }\n                                catch (/** @type {?} */ e) {\n                                    // If an error is reported evaluating the symbol record the position of the\n                                    // reference in the error so it can\n                                    // be reported in the error message generated from the exception.\n                                    if (isMetadataError(e) && expression.fileName != null &&\n                                        expression.line != null && expression.character != null) {\n                                        e.position = {\n                                            fileName: expression.fileName,\n                                            line: expression.line,\n                                            column: expression.character\n                                        };\n                                    }\n                                    throw e;\n                                }\n                            case 'class':\n                                return context;\n                            case 'function':\n                                return context;\n                            case 'new':\n                            case 'call':\n                                // Determine if the function is a built-in conversion\n                                staticSymbol = simplifyInContext(context, expression['expression'], depth + 1, /* references */ 0);\n                                if (staticSymbol instanceof StaticSymbol) {\n                                    if (staticSymbol === self.injectionToken || staticSymbol === self.opaqueToken) {\n                                        // if somebody calls new InjectionToken, don't create an InjectionToken,\n                                        // but rather return the symbol to which the InjectionToken is assigned to.\n                                        // OpaqueToken is supported too as it is required by the language service to\n                                        // support v4 and prior versions of Angular.\n                                        return context;\n                                    }\n                                    var /** @type {?} */ argExpressions = expression['arguments'] || [];\n                                    var /** @type {?} */ converter = self.conversionMap.get(staticSymbol);\n                                    if (converter) {\n                                        var /** @type {?} */ args = argExpressions.map(function (arg) { return simplifyNested(context, arg); })\n                                            .map(function (arg) { return shouldIgnore(arg) ? undefined : arg; });\n                                        return converter(context, args);\n                                    }\n                                    else {\n                                        // Determine if the function is one we can simplify.\n                                        var /** @type {?} */ targetFunction = resolveReferenceValue(staticSymbol);\n                                        return simplifyCall(staticSymbol, targetFunction, argExpressions, expression['expression']);\n                                    }\n                                }\n                                return IGNORE;\n                            case 'error':\n                                var /** @type {?} */ message = expression.message;\n                                if (expression['line'] != null) {\n                                    self.error({\n                                        message: message,\n                                        context: expression.context,\n                                        value: expression,\n                                        position: {\n                                            fileName: expression['fileName'],\n                                            line: expression['line'],\n                                            column: expression['character']\n                                        }\n                                    }, context);\n                                }\n                                else {\n                                    self.error({ message: message, context: expression.context }, context);\n                                }\n                                return IGNORE;\n                            case 'ignore':\n                                return expression;\n                        }\n                        return null;\n                    }\n                    return mapStringMap(expression, function (value, name) {\n                        if (REFERENCE_SET.has(name)) {\n                            if (name === USE_VALUE && PROVIDE in expression) {\n                                // If this is a provider expression, check for special tokens that need the value\n                                // during analysis.\n                                var /** @type {?} */ provide = simplify(expression.provide);\n                                if (provide === self.ROUTES || provide == self.ANALYZE_FOR_ENTRY_COMPONENTS) {\n                                    return simplify(value);\n                                }\n                            }\n                            return simplifyLazily(value);\n                        }\n                        return simplify(value);\n                    });\n                }\n                return IGNORE;\n            }\n            return simplify(value);\n        }\n        var /** @type {?} */ result;\n        try {\n            result = simplifyInContext(context, value, 0, lazy ? 1 : 0);\n        }\n        catch (/** @type {?} */ e) {\n            if (this.errorRecorder) {\n                this.reportError(e, context);\n            }\n            else {\n                throw formatMetadataError(e, context);\n            }\n        }\n        if (shouldIgnore(result)) {\n            return undefined;\n        }\n        return result;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype.getTypeMetadata = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(type);\n        return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata :\n            { __symbolic: 'class' };\n    };\n    /**\n     * @param {?} error\n     * @param {?} context\n     * @param {?=} path\n     * @return {?}\n     */\n    StaticReflector.prototype.reportError = /**\n     * @param {?} error\n     * @param {?} context\n     * @param {?=} path\n     * @return {?}\n     */\n    function (error, context, path) {\n        if (this.errorRecorder) {\n            this.errorRecorder(formatMetadataError(error, context), (context && context.filePath) || path);\n        }\n        else {\n            throw error;\n        }\n    };\n    /**\n     * @param {?} __0\n     * @param {?} reportingContext\n     * @return {?}\n     */\n    StaticReflector.prototype.error = /**\n     * @param {?} __0\n     * @param {?} reportingContext\n     * @return {?}\n     */\n    function (_a, reportingContext) {\n        var message = _a.message, summary = _a.summary, advise = _a.advise, position = _a.position, context = _a.context, value = _a.value, symbol = _a.symbol, chain = _a.chain;\n        this.reportError(metadataError(message, summary, advise, position, symbol, context, chain), reportingContext);\n    };\n    return StaticReflector;\n}());\n/**\n * A static reflector implements enough of the Reflector API that is necessary to compile\n * templates statically.\n */\nexport { StaticReflector };\nfunction StaticReflector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StaticReflector.prototype.annotationCache;\n    /** @type {?} */\n    StaticReflector.prototype.shallowAnnotationCache;\n    /** @type {?} */\n    StaticReflector.prototype.propertyCache;\n    /** @type {?} */\n    StaticReflector.prototype.parameterCache;\n    /** @type {?} */\n    StaticReflector.prototype.methodCache;\n    /** @type {?} */\n    StaticReflector.prototype.staticCache;\n    /** @type {?} */\n    StaticReflector.prototype.conversionMap;\n    /** @type {?} */\n    StaticReflector.prototype.resolvedExternalReferences;\n    /** @type {?} */\n    StaticReflector.prototype.injectionToken;\n    /** @type {?} */\n    StaticReflector.prototype.opaqueToken;\n    /** @type {?} */\n    StaticReflector.prototype.ROUTES;\n    /** @type {?} */\n    StaticReflector.prototype.ANALYZE_FOR_ENTRY_COMPONENTS;\n    /** @type {?} */\n    StaticReflector.prototype.annotationForParentClassWithSummaryKind;\n    /** @type {?} */\n    StaticReflector.prototype.summaryResolver;\n    /** @type {?} */\n    StaticReflector.prototype.symbolResolver;\n    /** @type {?} */\n    StaticReflector.prototype.errorRecorder;\n}\n/**\n * @record\n */\nfunction Position() { }\nfunction Position_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Position.prototype.fileName;\n    /** @type {?} */\n    Position.prototype.line;\n    /** @type {?} */\n    Position.prototype.column;\n}\n/**\n * @record\n */\nfunction MetadataMessageChain() { }\nfunction MetadataMessageChain_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MetadataMessageChain.prototype.message;\n    /** @type {?|undefined} */\n    MetadataMessageChain.prototype.summary;\n    /** @type {?|undefined} */\n    MetadataMessageChain.prototype.position;\n    /** @type {?|undefined} */\n    MetadataMessageChain.prototype.context;\n    /** @type {?|undefined} */\n    MetadataMessageChain.prototype.symbol;\n    /** @type {?|undefined} */\n    MetadataMessageChain.prototype.next;\n}\nvar /** @type {?} */ METADATA_ERROR = 'ngMetadataError';\n/**\n * @param {?} message\n * @param {?=} summary\n * @param {?=} advise\n * @param {?=} position\n * @param {?=} symbol\n * @param {?=} context\n * @param {?=} chain\n * @return {?}\n */\nfunction metadataError(message, summary, advise, position, symbol, context, chain) {\n    var /** @type {?} */ error = /** @type {?} */ (syntaxError(message));\n    (/** @type {?} */ (error))[METADATA_ERROR] = true;\n    if (advise)\n        error.advise = advise;\n    if (position)\n        error.position = position;\n    if (summary)\n        error.summary = summary;\n    if (context)\n        error.context = context;\n    if (chain)\n        error.chain = chain;\n    if (symbol)\n        error.symbol = symbol;\n    return error;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction isMetadataError(error) {\n    return !!(/** @type {?} */ (error))[METADATA_ERROR];\n}\nvar /** @type {?} */ REFERENCE_TO_NONEXPORTED_CLASS = 'Reference to non-exported class';\nvar /** @type {?} */ VARIABLE_NOT_INITIALIZED = 'Variable not initialized';\nvar /** @type {?} */ DESTRUCTURE_NOT_SUPPORTED = 'Destructuring not supported';\nvar /** @type {?} */ COULD_NOT_RESOLVE_TYPE = 'Could not resolve type';\nvar /** @type {?} */ FUNCTION_CALL_NOT_SUPPORTED = 'Function call not supported';\nvar /** @type {?} */ REFERENCE_TO_LOCAL_SYMBOL = 'Reference to a local symbol';\nvar /** @type {?} */ LAMBDA_NOT_SUPPORTED = 'Lambda not supported';\n/**\n * @param {?} message\n * @param {?} context\n * @return {?}\n */\nfunction expandedMessage(message, context) {\n    switch (message) {\n        case REFERENCE_TO_NONEXPORTED_CLASS:\n            if (context && context.className) {\n                return \"References to a non-exported class are not supported in decorators but \" + context.className + \" was referenced.\";\n            }\n            break;\n        case VARIABLE_NOT_INITIALIZED:\n            return 'Only initialized variables and constants can be referenced in decorators because the value of this variable is needed by the template compiler';\n        case DESTRUCTURE_NOT_SUPPORTED:\n            return 'Referencing an exported destructured variable or constant is not supported in decorators and this value is needed by the template compiler';\n        case COULD_NOT_RESOLVE_TYPE:\n            if (context && context.typeName) {\n                return \"Could not resolve type \" + context.typeName;\n            }\n            break;\n        case FUNCTION_CALL_NOT_SUPPORTED:\n            if (context && context.name) {\n                return \"Function calls are not supported in decorators but '\" + context.name + \"' was called\";\n            }\n            return 'Function calls are not supported in decorators';\n        case REFERENCE_TO_LOCAL_SYMBOL:\n            if (context && context.name) {\n                return \"Reference to a local (non-exported) symbols are not supported in decorators but '\" + context.name + \"' was referenced\";\n            }\n            break;\n        case LAMBDA_NOT_SUPPORTED:\n            return \"Function expressions are not supported in decorators\";\n    }\n    return message;\n}\n/**\n * @param {?} message\n * @param {?} context\n * @return {?}\n */\nfunction messageAdvise(message, context) {\n    switch (message) {\n        case REFERENCE_TO_NONEXPORTED_CLASS:\n            if (context && context.className) {\n                return \"Consider exporting '\" + context.className + \"'\";\n            }\n            break;\n        case DESTRUCTURE_NOT_SUPPORTED:\n            return 'Consider simplifying to avoid destructuring';\n        case REFERENCE_TO_LOCAL_SYMBOL:\n            if (context && context.name) {\n                return \"Consider exporting '\" + context.name + \"'\";\n            }\n            break;\n        case LAMBDA_NOT_SUPPORTED:\n            return \"Consider changing the function expression into an exported function\";\n    }\n    return undefined;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction errorSummary(error) {\n    if (error.summary) {\n        return error.summary;\n    }\n    switch (error.message) {\n        case REFERENCE_TO_NONEXPORTED_CLASS:\n            if (error.context && error.context.className) {\n                return \"references non-exported class \" + error.context.className;\n            }\n            break;\n        case VARIABLE_NOT_INITIALIZED:\n            return 'is not initialized';\n        case DESTRUCTURE_NOT_SUPPORTED:\n            return 'is a destructured variable';\n        case COULD_NOT_RESOLVE_TYPE:\n            return 'could not be resolved';\n        case FUNCTION_CALL_NOT_SUPPORTED:\n            if (error.context && error.context.name) {\n                return \"calls '\" + error.context.name + \"'\";\n            }\n            return \"calls a function\";\n        case REFERENCE_TO_LOCAL_SYMBOL:\n            if (error.context && error.context.name) {\n                return \"references local variable \" + error.context.name;\n            }\n            return \"references a local variable\";\n    }\n    return 'contains the error';\n}\n/**\n * @param {?} input\n * @param {?} transform\n * @return {?}\n */\nfunction mapStringMap(input, transform) {\n    if (!input)\n        return {};\n    var /** @type {?} */ result = {};\n    Object.keys(input).forEach(function (key) {\n        var /** @type {?} */ value = transform(input[key], key);\n        if (!shouldIgnore(value)) {\n            if (HIDDEN_KEY.test(key)) {\n                Object.defineProperty(result, key, { enumerable: false, configurable: true, value: value });\n            }\n            else {\n                result[key] = value;\n            }\n        }\n    });\n    return result;\n}\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isPrimitive(o) {\n    return o === null || (typeof o !== 'function' && typeof o !== 'object');\n}\n/**\n * @record\n */\nfunction BindingScopeBuilder() { }\nfunction BindingScopeBuilder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BindingScopeBuilder.prototype.define;\n    /** @type {?} */\n    BindingScopeBuilder.prototype.done;\n}\n/**\n * @abstract\n */\nvar BindingScope = /** @class */ (function () {\n    function BindingScope() {\n    }\n    /**\n     * @return {?}\n     */\n    BindingScope.build = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ current = new Map();\n        return {\n            define: function (name, value) {\n                current.set(name, value);\n                return this;\n            },\n            done: function () {\n                return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;\n            }\n        };\n    };\n    BindingScope.missing = {};\n    BindingScope.empty = { resolve: function (name) { return BindingScope.missing; } };\n    return BindingScope;\n}());\nfunction BindingScope_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BindingScope.missing;\n    /** @type {?} */\n    BindingScope.empty;\n    /**\n     * @abstract\n     * @param {?} name\n     * @return {?}\n     */\n    BindingScope.prototype.resolve = function (name) { };\n}\nvar PopulatedScope = /** @class */ (function (_super) {\n    tslib_1.__extends(PopulatedScope, _super);\n    function PopulatedScope(bindings) {\n        var _this = _super.call(this) || this;\n        _this.bindings = bindings;\n        return _this;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    PopulatedScope.prototype.resolve = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;\n    };\n    return PopulatedScope;\n}(BindingScope));\nfunction PopulatedScope_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PopulatedScope.prototype.bindings;\n}\n/**\n * @param {?} chain\n * @param {?} advise\n * @return {?}\n */\nfunction formatMetadataMessageChain(chain, advise) {\n    var /** @type {?} */ expanded = expandedMessage(chain.message, chain.context);\n    var /** @type {?} */ nesting = chain.symbol ? \" in '\" + chain.symbol.name + \"'\" : '';\n    var /** @type {?} */ message = \"\" + expanded + nesting;\n    var /** @type {?} */ position = chain.position;\n    var /** @type {?} */ next = chain.next ?\n        formatMetadataMessageChain(chain.next, advise) :\n        advise ? { message: advise } : undefined;\n    return { message: message, position: position, next: next };\n}\n/**\n * @param {?} e\n * @param {?} context\n * @return {?}\n */\nfunction formatMetadataError(e, context) {\n    if (isMetadataError(e)) {\n        // Produce a formatted version of the and leaving enough information in the original error\n        // to recover the formatting information to eventually produce a diagnostic error message.\n        var /** @type {?} */ position = e.position;\n        var /** @type {?} */ chain = {\n            message: \"Error during template compile of '\" + context.name + \"'\",\n            position: position,\n            next: { message: e.message, next: e.chain, context: e.context, symbol: e.symbol }\n        };\n        var /** @type {?} */ advise = e.advise || messageAdvise(e.message, e.context);\n        return formattedError(formatMetadataMessageChain(chain, advise));\n    }\n    return e;\n}\n//# sourceMappingURL=static_reflector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { deserializeSummaries } from './summary_serializer';\nimport { stripGeneratedFileSuffix, summaryFileName } from './util';\n/**\n * @record\n */\nexport function AotSummaryResolverHost() { }\nfunction AotSummaryResolverHost_tsickle_Closure_declarations() {\n    /**\n     * Loads an NgModule/Directive/Pipe summary file\n     * @type {?}\n     */\n    AotSummaryResolverHost.prototype.loadSummary;\n    /**\n     * Returns whether a file is a source file or not.\n     * @type {?}\n     */\n    AotSummaryResolverHost.prototype.isSourceFile;\n    /**\n     * Converts a file name into a representation that should be stored in a summary file.\n     * This has to include changing the suffix as well.\n     * E.g.\n     * `some_file.ts` -> `some_file.d.ts`\n     *\n     * \\@param referringSrcFileName the soure file that refers to fileName\n     * @type {?}\n     */\n    AotSummaryResolverHost.prototype.toSummaryFileName;\n    /**\n     * Converts a fileName that was processed by `toSummaryFileName` back into a real fileName\n     * given the fileName of the library that is referrig to it.\n     * @type {?}\n     */\n    AotSummaryResolverHost.prototype.fromSummaryFileName;\n}\nvar AotSummaryResolver = /** @class */ (function () {\n    function AotSummaryResolver(host, staticSymbolCache) {\n        this.host = host;\n        this.staticSymbolCache = staticSymbolCache;\n        this.summaryCache = new Map();\n        this.loadedFilePaths = new Map();\n        this.importAs = new Map();\n        this.knownFileNameToModuleNames = new Map();\n    }\n    /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.isLibraryFile = /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    function (filePath) {\n        // Note: We need to strip the .ngfactory. file path,\n        // so this method also works for generated files\n        // (for which host.isSourceFile will always return false).\n        return !this.host.isSourceFile(stripGeneratedFileSuffix(filePath));\n    };\n    /**\n     * @param {?} filePath\n     * @param {?} referringSrcFileName\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.toSummaryFileName = /**\n     * @param {?} filePath\n     * @param {?} referringSrcFileName\n     * @return {?}\n     */\n    function (filePath, referringSrcFileName) {\n        return this.host.toSummaryFileName(filePath, referringSrcFileName);\n    };\n    /**\n     * @param {?} fileName\n     * @param {?} referringLibFileName\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.fromSummaryFileName = /**\n     * @param {?} fileName\n     * @param {?} referringLibFileName\n     * @return {?}\n     */\n    function (fileName, referringLibFileName) {\n        return this.host.fromSummaryFileName(fileName, referringLibFileName);\n    };\n    /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.resolveSummary = /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    function (staticSymbol) {\n        var /** @type {?} */ rootSymbol = staticSymbol.members.length ?\n            this.staticSymbolCache.get(staticSymbol.filePath, staticSymbol.name) :\n            staticSymbol;\n        var /** @type {?} */ summary = this.summaryCache.get(rootSymbol);\n        if (!summary) {\n            this._loadSummaryFile(staticSymbol.filePath);\n            summary = /** @type {?} */ ((this.summaryCache.get(staticSymbol)));\n        }\n        return (rootSymbol === staticSymbol && summary) || null;\n    };\n    /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.getSymbolsOf = /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    function (filePath) {\n        if (this._loadSummaryFile(filePath)) {\n            return Array.from(this.summaryCache.keys()).filter(function (symbol) { return symbol.filePath === filePath; });\n        }\n        return null;\n    };\n    /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.getImportAs = /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    function (staticSymbol) {\n        staticSymbol.assertNoMembers();\n        return /** @type {?} */ ((this.importAs.get(staticSymbol)));\n    };\n    /**\n     * Converts a file path to a module name that can be used as an `import`.\n     */\n    /**\n     * Converts a file path to a module name that can be used as an `import`.\n     * @param {?} importedFilePath\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.getKnownModuleName = /**\n     * Converts a file path to a module name that can be used as an `import`.\n     * @param {?} importedFilePath\n     * @return {?}\n     */\n    function (importedFilePath) {\n        return this.knownFileNameToModuleNames.get(importedFilePath) || null;\n    };\n    /**\n     * @param {?} summary\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.addSummary = /**\n     * @param {?} summary\n     * @return {?}\n     */\n    function (summary) { this.summaryCache.set(summary.symbol, summary); };\n    /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    AotSummaryResolver.prototype._loadSummaryFile = /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    function (filePath) {\n        var _this = this;\n        var /** @type {?} */ hasSummary = this.loadedFilePaths.get(filePath);\n        if (hasSummary != null) {\n            return hasSummary;\n        }\n        var /** @type {?} */ json = null;\n        if (this.isLibraryFile(filePath)) {\n            var /** @type {?} */ summaryFilePath = summaryFileName(filePath);\n            try {\n                json = this.host.loadSummary(summaryFilePath);\n            }\n            catch (/** @type {?} */ e) {\n                console.error(\"Error loading summary file \" + summaryFilePath);\n                throw e;\n            }\n        }\n        hasSummary = json != null;\n        this.loadedFilePaths.set(filePath, hasSummary);\n        if (json) {\n            var _a = deserializeSummaries(this.staticSymbolCache, this, filePath, json), moduleName = _a.moduleName, summaries = _a.summaries, importAs = _a.importAs;\n            summaries.forEach(function (summary) { return _this.summaryCache.set(summary.symbol, summary); });\n            if (moduleName) {\n                this.knownFileNameToModuleNames.set(filePath, moduleName);\n            }\n            importAs.forEach(function (importAs) { _this.importAs.set(importAs.symbol, importAs.importAs); });\n        }\n        return hasSummary;\n    };\n    return AotSummaryResolver;\n}());\nexport { AotSummaryResolver };\nfunction AotSummaryResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AotSummaryResolver.prototype.summaryCache;\n    /** @type {?} */\n    AotSummaryResolver.prototype.loadedFilePaths;\n    /** @type {?} */\n    AotSummaryResolver.prototype.importAs;\n    /** @type {?} */\n    AotSummaryResolver.prototype.knownFileNameToModuleNames;\n    /** @type {?} */\n    AotSummaryResolver.prototype.host;\n    /** @type {?} */\n    AotSummaryResolver.prototype.staticSymbolCache;\n}\n//# sourceMappingURL=summary_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompilerConfig } from '../config';\nimport { ViewEncapsulation } from '../core';\nimport { DirectiveNormalizer } from '../directive_normalizer';\nimport { DirectiveResolver } from '../directive_resolver';\nimport { Lexer } from '../expression_parser/lexer';\nimport { Parser } from '../expression_parser/parser';\nimport { I18NHtmlParser } from '../i18n/i18n_html_parser';\nimport { InjectableCompiler } from '../injectable_compiler';\nimport { CompileMetadataResolver } from '../metadata_resolver';\nimport { HtmlParser } from '../ml_parser/html_parser';\nimport { NgModuleCompiler } from '../ng_module_compiler';\nimport { NgModuleResolver } from '../ng_module_resolver';\nimport { TypeScriptEmitter } from '../output/ts_emitter';\nimport { PipeResolver } from '../pipe_resolver';\nimport { DomElementSchemaRegistry } from '../schema/dom_element_schema_registry';\nimport { StyleCompiler } from '../style_compiler';\nimport { TemplateParser } from '../template_parser/template_parser';\nimport { syntaxError } from '../util';\nimport { TypeCheckCompiler } from '../view_compiler/type_check_compiler';\nimport { ViewCompiler } from '../view_compiler/view_compiler';\nimport { AotCompiler } from './compiler';\nimport { StaticReflector } from './static_reflector';\nimport { StaticSymbolCache } from './static_symbol';\nimport { StaticSymbolResolver } from './static_symbol_resolver';\nimport { AotSummaryResolver } from './summary_resolver';\n/**\n * @param {?} host\n * @return {?}\n */\nexport function createAotUrlResolver(host) {\n    return {\n        resolve: function (basePath, url) {\n            var /** @type {?} */ filePath = host.resourceNameToFileName(url, basePath);\n            if (!filePath) {\n                throw syntaxError(\"Couldn't resolve resource \" + url + \" from \" + basePath);\n            }\n            return filePath;\n        }\n    };\n}\n/**\n * Creates a new AotCompiler based on options and a host.\n * @param {?} compilerHost\n * @param {?} options\n * @param {?=} errorCollector\n * @return {?}\n */\nexport function createAotCompiler(compilerHost, options, errorCollector) {\n    var /** @type {?} */ translations = options.translations || '';\n    var /** @type {?} */ urlResolver = createAotUrlResolver(compilerHost);\n    var /** @type {?} */ symbolCache = new StaticSymbolCache();\n    var /** @type {?} */ summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);\n    var /** @type {?} */ symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);\n    var /** @type {?} */ staticReflector = new StaticReflector(summaryResolver, symbolResolver, [], [], errorCollector);\n    var /** @type {?} */ htmlParser;\n    if (!!options.enableIvy) {\n        // Ivy handles i18n at the compiler level so we must use a regular parser\n        htmlParser = /** @type {?} */ (new HtmlParser());\n    }\n    else {\n        htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat, options.missingTranslation, console);\n    }\n    var /** @type {?} */ config = new CompilerConfig({\n        defaultEncapsulation: ViewEncapsulation.Emulated,\n        useJit: false,\n        missingTranslation: options.missingTranslation,\n        preserveWhitespaces: options.preserveWhitespaces,\n        strictInjectionParameters: options.strictInjectionParameters,\n    });\n    var /** @type {?} */ normalizer = new DirectiveNormalizer({ get: function (url) { return compilerHost.loadResource(url); } }, urlResolver, htmlParser, config);\n    var /** @type {?} */ expressionParser = new Parser(new Lexer());\n    var /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();\n    var /** @type {?} */ tmplParser = new TemplateParser(config, staticReflector, expressionParser, elementSchemaRegistry, htmlParser, console, []);\n    var /** @type {?} */ resolver = new CompileMetadataResolver(config, htmlParser, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector, errorCollector);\n    // TODO(vicb): do not pass options.i18nFormat here\n    var /** @type {?} */ viewCompiler = new ViewCompiler(staticReflector);\n    var /** @type {?} */ typeCheckCompiler = new TypeCheckCompiler(options, staticReflector);\n    var /** @type {?} */ compiler = new AotCompiler(config, options, compilerHost, staticReflector, resolver, tmplParser, new StyleCompiler(urlResolver), viewCompiler, typeCheckCompiler, new NgModuleCompiler(staticReflector), new InjectableCompiler(staticReflector, !!options.enableIvy), new TypeScriptEmitter(), summaryResolver, symbolResolver);\n    return { compiler: compiler, reflector: staticReflector };\n}\n//# sourceMappingURL=compiler_factory.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n * @template T\n */\nexport function Summary() { }\nfunction Summary_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Summary.prototype.symbol;\n    /** @type {?} */\n    Summary.prototype.metadata;\n    /** @type {?|undefined} */\n    Summary.prototype.type;\n}\n/**\n * @abstract\n * @template T\n */\nvar /**\n * @abstract\n * @template T\n */\nSummaryResolver = /** @class */ (function () {\n    function SummaryResolver() {\n    }\n    return SummaryResolver;\n}());\n/**\n * @abstract\n * @template T\n */\nexport { SummaryResolver };\nfunction SummaryResolver_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} fileName\n     * @return {?}\n     */\n    SummaryResolver.prototype.isLibraryFile = function (fileName) { };\n    /**\n     * @abstract\n     * @param {?} fileName\n     * @param {?} referringSrcFileName\n     * @return {?}\n     */\n    SummaryResolver.prototype.toSummaryFileName = function (fileName, referringSrcFileName) { };\n    /**\n     * @abstract\n     * @param {?} fileName\n     * @param {?} referringLibFileName\n     * @return {?}\n     */\n    SummaryResolver.prototype.fromSummaryFileName = function (fileName, referringLibFileName) { };\n    /**\n     * @abstract\n     * @param {?} reference\n     * @return {?}\n     */\n    SummaryResolver.prototype.resolveSummary = function (reference) { };\n    /**\n     * @abstract\n     * @param {?} filePath\n     * @return {?}\n     */\n    SummaryResolver.prototype.getSymbolsOf = function (filePath) { };\n    /**\n     * @abstract\n     * @param {?} reference\n     * @return {?}\n     */\n    SummaryResolver.prototype.getImportAs = function (reference) { };\n    /**\n     * @abstract\n     * @param {?} fileName\n     * @return {?}\n     */\n    SummaryResolver.prototype.getKnownModuleName = function (fileName) { };\n    /**\n     * @abstract\n     * @param {?} summary\n     * @return {?}\n     */\n    SummaryResolver.prototype.addSummary = function (summary) { };\n}\nvar JitSummaryResolver = /** @class */ (function () {\n    function JitSummaryResolver() {\n        this._summaries = new Map();\n    }\n    /**\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.isLibraryFile = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.toSummaryFileName = /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    function (fileName) { return fileName; };\n    /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.fromSummaryFileName = /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    function (fileName) { return fileName; };\n    /**\n     * @param {?} reference\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.resolveSummary = /**\n     * @param {?} reference\n     * @return {?}\n     */\n    function (reference) {\n        return this._summaries.get(reference) || null;\n    };\n    /**\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.getSymbolsOf = /**\n     * @return {?}\n     */\n    function () { return []; };\n    /**\n     * @param {?} reference\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.getImportAs = /**\n     * @param {?} reference\n     * @return {?}\n     */\n    function (reference) { return reference; };\n    /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.getKnownModuleName = /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    function (fileName) { return null; };\n    /**\n     * @param {?} summary\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.addSummary = /**\n     * @param {?} summary\n     * @return {?}\n     */\n    function (summary) { this._summaries.set(summary.symbol, summary); };\n    return JitSummaryResolver;\n}());\nexport { JitSummaryResolver };\nfunction JitSummaryResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    JitSummaryResolver.prototype._summaries;\n}\n//# sourceMappingURL=summary_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as o from './output_ast';\nimport { debugOutputAstAsTypeScript } from './ts_emitter';\n/**\n * @param {?} statements\n * @param {?} reflector\n * @return {?}\n */\nexport function interpretStatements(statements, reflector) {\n    var /** @type {?} */ ctx = new _ExecutionContext(null, null, null, new Map());\n    var /** @type {?} */ visitor = new StatementInterpreter(reflector);\n    visitor.visitAllStatements(statements, ctx);\n    var /** @type {?} */ result = {};\n    ctx.exports.forEach(function (exportName) { result[exportName] = ctx.vars.get(exportName); });\n    return result;\n}\n/**\n * @param {?} varNames\n * @param {?} varValues\n * @param {?} statements\n * @param {?} ctx\n * @param {?} visitor\n * @return {?}\n */\nfunction _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {\n    var /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();\n    for (var /** @type {?} */ i = 0; i < varNames.length; i++) {\n        childCtx.vars.set(varNames[i], varValues[i]);\n    }\n    var /** @type {?} */ result = visitor.visitAllStatements(statements, childCtx);\n    return result ? result.value : null;\n}\nvar _ExecutionContext = /** @class */ (function () {\n    function _ExecutionContext(parent, instance, className, vars) {\n        this.parent = parent;\n        this.instance = instance;\n        this.className = className;\n        this.vars = vars;\n        this.exports = [];\n    }\n    /**\n     * @return {?}\n     */\n    _ExecutionContext.prototype.createChildWihtLocalVars = /**\n     * @return {?}\n     */\n    function () {\n        return new _ExecutionContext(this, this.instance, this.className, new Map());\n    };\n    return _ExecutionContext;\n}());\nfunction _ExecutionContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _ExecutionContext.prototype.exports;\n    /** @type {?} */\n    _ExecutionContext.prototype.parent;\n    /** @type {?} */\n    _ExecutionContext.prototype.instance;\n    /** @type {?} */\n    _ExecutionContext.prototype.className;\n    /** @type {?} */\n    _ExecutionContext.prototype.vars;\n}\nvar ReturnValue = /** @class */ (function () {\n    function ReturnValue(value) {\n        this.value = value;\n    }\n    return ReturnValue;\n}());\nfunction ReturnValue_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReturnValue.prototype.value;\n}\n/**\n * @param {?} _classStmt\n * @param {?} _ctx\n * @param {?} _visitor\n * @return {?}\n */\nfunction createDynamicClass(_classStmt, _ctx, _visitor) {\n    var /** @type {?} */ propertyDescriptors = {};\n    _classStmt.getters.forEach(function (getter) {\n        // Note: use `function` instead of arrow function to capture `this`\n        propertyDescriptors[getter.name] = {\n            configurable: false,\n            get: function () {\n                var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n                return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);\n            }\n        };\n    });\n    _classStmt.methods.forEach(function (method) {\n        var /** @type {?} */ paramNames = method.params.map(function (param) { return param.name; });\n        // Note: use `function` instead of arrow function to capture `this`\n        propertyDescriptors[/** @type {?} */ ((method.name))] = {\n            writable: false,\n            configurable: false,\n            value: function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n                return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);\n            }\n        };\n    });\n    var /** @type {?} */ ctorParamNames = _classStmt.constructorMethod.params.map(function (param) { return param.name; });\n    // Note: use `function` instead of arrow function to capture `this`\n    var /** @type {?} */ ctor = function () {\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n        _classStmt.fields.forEach(function (field) { _this[field.name] = undefined; });\n        _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);\n    };\n    var /** @type {?} */ superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;\n    ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);\n    return ctor;\n}\nvar StatementInterpreter = /** @class */ (function () {\n    function StatementInterpreter(reflector) {\n        this.reflector = reflector;\n    }\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    StatementInterpreter.prototype.debugAst = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) { return debugOutputAstAsTypeScript(ast); };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitDeclareVarStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        var /** @type {?} */ initialValue = stmt.value ? stmt.value.visitExpression(this, ctx) : undefined;\n        ctx.vars.set(stmt.name, initialValue);\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            ctx.exports.push(stmt.name);\n        }\n        return null;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitWriteVarExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ value = expr.value.visitExpression(this, ctx);\n        var /** @type {?} */ currCtx = ctx;\n        while (currCtx != null) {\n            if (currCtx.vars.has(expr.name)) {\n                currCtx.vars.set(expr.name, value);\n                return value;\n            }\n            currCtx = /** @type {?} */ ((currCtx.parent));\n        }\n        throw new Error(\"Not declared variable \" + expr.name);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitReadVarExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ varName = /** @type {?} */ ((ast.name));\n        if (ast.builtin != null) {\n            switch (ast.builtin) {\n                case o.BuiltinVar.Super:\n                    return ctx.instance.__proto__;\n                case o.BuiltinVar.This:\n                    return ctx.instance;\n                case o.BuiltinVar.CatchError:\n                    varName = CATCH_ERROR_VAR;\n                    break;\n                case o.BuiltinVar.CatchStack:\n                    varName = CATCH_STACK_VAR;\n                    break;\n                default:\n                    throw new Error(\"Unknown builtin variable \" + ast.builtin);\n            }\n        }\n        var /** @type {?} */ currCtx = ctx;\n        while (currCtx != null) {\n            if (currCtx.vars.has(varName)) {\n                return currCtx.vars.get(varName);\n            }\n            currCtx = /** @type {?} */ ((currCtx.parent));\n        }\n        throw new Error(\"Not declared variable \" + varName);\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitWriteKeyExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\n        var /** @type {?} */ index = expr.index.visitExpression(this, ctx);\n        var /** @type {?} */ value = expr.value.visitExpression(this, ctx);\n        receiver[index] = value;\n        return value;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitWritePropExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\n        var /** @type {?} */ value = expr.value.visitExpression(this, ctx);\n        receiver[expr.name] = value;\n        return value;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitInvokeMethodExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\n        var /** @type {?} */ args = this.visitAllExpressions(expr.args, ctx);\n        var /** @type {?} */ result;\n        if (expr.builtin != null) {\n            switch (expr.builtin) {\n                case o.BuiltinMethod.ConcatArray:\n                    result = receiver.concat.apply(receiver, args);\n                    break;\n                case o.BuiltinMethod.SubscribeObservable:\n                    result = receiver.subscribe({ next: args[0] });\n                    break;\n                case o.BuiltinMethod.Bind:\n                    result = receiver.bind.apply(receiver, args);\n                    break;\n                default:\n                    throw new Error(\"Unknown builtin method \" + expr.builtin);\n            }\n        }\n        else {\n            result = receiver[/** @type {?} */ ((expr.name))].apply(receiver, args);\n        }\n        return result;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitInvokeFunctionExpr = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        var /** @type {?} */ args = this.visitAllExpressions(stmt.args, ctx);\n        var /** @type {?} */ fnExpr = stmt.fn;\n        if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {\n            ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);\n            return null;\n        }\n        else {\n            var /** @type {?} */ fn = stmt.fn.visitExpression(this, ctx);\n            return fn.apply(null, args);\n        }\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitReturnStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        return new ReturnValue(stmt.value.visitExpression(this, ctx));\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitDeclareClassStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        var /** @type {?} */ clazz = createDynamicClass(stmt, ctx, this);\n        ctx.vars.set(stmt.name, clazz);\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            ctx.exports.push(stmt.name);\n        }\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitExpressionStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        return stmt.expr.visitExpression(this, ctx);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitIfStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        var /** @type {?} */ condition = stmt.condition.visitExpression(this, ctx);\n        if (condition) {\n            return this.visitAllStatements(stmt.trueCase, ctx);\n        }\n        else if (stmt.falseCase != null) {\n            return this.visitAllStatements(stmt.falseCase, ctx);\n        }\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitTryCatchStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        try {\n            return this.visitAllStatements(stmt.bodyStmts, ctx);\n        }\n        catch (/** @type {?} */ e) {\n            var /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();\n            childCtx.vars.set(CATCH_ERROR_VAR, e);\n            childCtx.vars.set(CATCH_STACK_VAR, e.stack);\n            return this.visitAllStatements(stmt.catchStmts, childCtx);\n        }\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitThrowStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        throw stmt.error.visitExpression(this, ctx);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?=} context\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitCommentStmt = /**\n     * @param {?} stmt\n     * @param {?=} context\n     * @return {?}\n     */\n    function (stmt, context) { return null; };\n    /**\n     * @param {?} stmt\n     * @param {?=} context\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitJSDocCommentStmt = /**\n     * @param {?} stmt\n     * @param {?=} context\n     * @return {?}\n     */\n    function (stmt, context) { return null; };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitInstantiateExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ args = this.visitAllExpressions(ast.args, ctx);\n        var /** @type {?} */ clazz = ast.classExpr.visitExpression(this, ctx);\n        return new (clazz.bind.apply(clazz, [void 0].concat(args)))();\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitLiteralExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) { return ast.value; };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitExternalExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        return this.reflector.resolveExternalReference(ast.value);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitConditionalExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        if (ast.condition.visitExpression(this, ctx)) {\n            return ast.trueCase.visitExpression(this, ctx);\n        }\n        else if (ast.falseCase != null) {\n            return ast.falseCase.visitExpression(this, ctx);\n        }\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitNotExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        return !ast.condition.visitExpression(this, ctx);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitAssertNotNullExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        return ast.condition.visitExpression(this, ctx);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitCastExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        return ast.value.visitExpression(this, ctx);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitFunctionExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ paramNames = ast.params.map(function (param) { return param.name; });\n        return _declareFn(paramNames, ast.statements, ctx, this);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitDeclareFunctionStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        var /** @type {?} */ paramNames = stmt.params.map(function (param) { return param.name; });\n        ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            ctx.exports.push(stmt.name);\n        }\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitBinaryOperatorExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var _this = this;\n        var /** @type {?} */ lhs = function () { return ast.lhs.visitExpression(_this, ctx); };\n        var /** @type {?} */ rhs = function () { return ast.rhs.visitExpression(_this, ctx); };\n        switch (ast.operator) {\n            case o.BinaryOperator.Equals:\n                return lhs() == rhs();\n            case o.BinaryOperator.Identical:\n                return lhs() === rhs();\n            case o.BinaryOperator.NotEquals:\n                return lhs() != rhs();\n            case o.BinaryOperator.NotIdentical:\n                return lhs() !== rhs();\n            case o.BinaryOperator.And:\n                return lhs() && rhs();\n            case o.BinaryOperator.Or:\n                return lhs() || rhs();\n            case o.BinaryOperator.Plus:\n                return lhs() + rhs();\n            case o.BinaryOperator.Minus:\n                return lhs() - rhs();\n            case o.BinaryOperator.Divide:\n                return lhs() / rhs();\n            case o.BinaryOperator.Multiply:\n                return lhs() * rhs();\n            case o.BinaryOperator.Modulo:\n                return lhs() % rhs();\n            case o.BinaryOperator.Lower:\n                return lhs() < rhs();\n            case o.BinaryOperator.LowerEquals:\n                return lhs() <= rhs();\n            case o.BinaryOperator.Bigger:\n                return lhs() > rhs();\n            case o.BinaryOperator.BiggerEquals:\n                return lhs() >= rhs();\n            default:\n                throw new Error(\"Unknown operator \" + ast.operator);\n        }\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitReadPropExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);\n        result = receiver[ast.name];\n        return result;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitReadKeyExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);\n        var /** @type {?} */ prop = ast.index.visitExpression(this, ctx);\n        return receiver[prop];\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitLiteralArrayExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        return this.visitAllExpressions(ast.entries, ctx);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitLiteralMapExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var _this = this;\n        var /** @type {?} */ result = {};\n        ast.entries.forEach(function (entry) { return result[entry.key] = entry.value.visitExpression(_this, ctx); });\n        return result;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitCommaExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ values = this.visitAllExpressions(ast.parts, context);\n        return values[values.length - 1];\n    };\n    /**\n     * @param {?} expressions\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitAllExpressions = /**\n     * @param {?} expressions\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expressions, ctx) {\n        var _this = this;\n        return expressions.map(function (expr) { return expr.visitExpression(_this, ctx); });\n    };\n    /**\n     * @param {?} statements\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitAllStatements = /**\n     * @param {?} statements\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (statements, ctx) {\n        for (var /** @type {?} */ i = 0; i < statements.length; i++) {\n            var /** @type {?} */ stmt = statements[i];\n            var /** @type {?} */ val = stmt.visitStatement(this, ctx);\n            if (val instanceof ReturnValue) {\n                return val;\n            }\n        }\n        return null;\n    };\n    return StatementInterpreter;\n}());\nfunction StatementInterpreter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StatementInterpreter.prototype.reflector;\n}\n/**\n * @param {?} varNames\n * @param {?} statements\n * @param {?} ctx\n * @param {?} visitor\n * @return {?}\n */\nfunction _declareFn(varNames, statements, ctx, visitor) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return _executeFunctionStatements(varNames, args, statements, ctx, visitor);\n    };\n}\nvar /** @type {?} */ CATCH_ERROR_VAR = 'error';\nvar /** @type {?} */ CATCH_STACK_VAR = 'stack';\n//# sourceMappingURL=output_interpreter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { identifierName } from '../compile_metadata';\nimport { EmitterVisitorContext } from './abstract_emitter';\nimport { AbstractJsEmitterVisitor } from './abstract_js_emitter';\nimport * as o from './output_ast';\n/**\n * @param {?} sourceUrl\n * @param {?} ctx\n * @param {?} vars\n * @param {?} createSourceMap\n * @return {?}\n */\nfunction evalExpression(sourceUrl, ctx, vars, createSourceMap) {\n    var /** @type {?} */ fnBody = ctx.toSource() + \"\\n//# sourceURL=\" + sourceUrl;\n    var /** @type {?} */ fnArgNames = [];\n    var /** @type {?} */ fnArgValues = [];\n    for (var /** @type {?} */ argName in vars) {\n        fnArgNames.push(argName);\n        fnArgValues.push(vars[argName]);\n    }\n    if (createSourceMap) {\n        // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise\n        // E.g. ```\n        // function anonymous(a,b,c\n        // /**/) { ... }```\n        // We don't want to hard code this fact, so we auto detect it via an empty function first.\n        var /** @type {?} */ emptyFn = new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat('return null;'))))().toString();\n        var /** @type {?} */ headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\\n').length - 1;\n        fnBody += \"\\n\" + ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment();\n    }\n    return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);\n}\n/**\n * @param {?} sourceUrl\n * @param {?} statements\n * @param {?} reflector\n * @param {?} createSourceMaps\n * @return {?}\n */\nexport function jitStatements(sourceUrl, statements, reflector, createSourceMaps) {\n    var /** @type {?} */ converter = new JitEmitterVisitor(reflector);\n    var /** @type {?} */ ctx = EmitterVisitorContext.createRoot();\n    converter.visitAllStatements(statements, ctx);\n    converter.createReturnStmt(ctx);\n    return evalExpression(sourceUrl, ctx, converter.getArgs(), createSourceMaps);\n}\nvar JitEmitterVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(JitEmitterVisitor, _super);\n    function JitEmitterVisitor(reflector) {\n        var _this = _super.call(this) || this;\n        _this.reflector = reflector;\n        _this._evalArgNames = [];\n        _this._evalArgValues = [];\n        _this._evalExportedVars = [];\n        return _this;\n    }\n    /**\n     * @param {?} ctx\n     * @return {?}\n     */\n    JitEmitterVisitor.prototype.createReturnStmt = /**\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ctx) {\n        var /** @type {?} */ stmt = new o.ReturnStatement(new o.LiteralMapExpr(this._evalExportedVars.map(function (resultVar) { return new o.LiteralMapEntry(resultVar, o.variable(resultVar), false); })));\n        stmt.visitStatement(this, ctx);\n    };\n    /**\n     * @return {?}\n     */\n    JitEmitterVisitor.prototype.getArgs = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ result = {};\n        for (var /** @type {?} */ i = 0; i < this._evalArgNames.length; i++) {\n            result[this._evalArgNames[i]] = this._evalArgValues[i];\n        }\n        return result;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    JitEmitterVisitor.prototype.visitExternalExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ value = this.reflector.resolveExternalReference(ast.value);\n        var /** @type {?} */ id = this._evalArgValues.indexOf(value);\n        if (id === -1) {\n            id = this._evalArgValues.length;\n            this._evalArgValues.push(value);\n            var /** @type {?} */ name_1 = identifierName({ reference: value }) || 'val';\n            this._evalArgNames.push(\"jit_\" + name_1 + \"_\" + id);\n        }\n        ctx.print(ast, this._evalArgNames[id]);\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    JitEmitterVisitor.prototype.visitDeclareVarStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            this._evalExportedVars.push(stmt.name);\n        }\n        return _super.prototype.visitDeclareVarStmt.call(this, stmt, ctx);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    JitEmitterVisitor.prototype.visitDeclareFunctionStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            this._evalExportedVars.push(stmt.name);\n        }\n        return _super.prototype.visitDeclareFunctionStmt.call(this, stmt, ctx);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    JitEmitterVisitor.prototype.visitDeclareClassStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            this._evalExportedVars.push(stmt.name);\n        }\n        return _super.prototype.visitDeclareClassStmt.call(this, stmt, ctx);\n    };\n    return JitEmitterVisitor;\n}(AbstractJsEmitterVisitor));\nexport { JitEmitterVisitor };\nfunction JitEmitterVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    JitEmitterVisitor.prototype._evalArgNames;\n    /** @type {?} */\n    JitEmitterVisitor.prototype._evalArgValues;\n    /** @type {?} */\n    JitEmitterVisitor.prototype._evalExportedVars;\n    /** @type {?} */\n    JitEmitterVisitor.prototype.reflector;\n}\n//# sourceMappingURL=output_jit.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { AbstractEmitterVisitor, CATCH_ERROR_VAR, CATCH_STACK_VAR } from './abstract_emitter';\nimport * as o from './output_ast';\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nAbstractJsEmitterVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractJsEmitterVisitor, _super);\n    function AbstractJsEmitterVisitor() {\n        return _super.call(this, false) || this;\n    }\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        var _this = this;\n        ctx.pushClass(stmt);\n        this._visitClassConstructor(stmt, ctx);\n        if (stmt.parent != null) {\n            ctx.print(stmt, stmt.name + \".prototype = Object.create(\");\n            stmt.parent.visitExpression(this, ctx);\n            ctx.println(stmt, \".prototype);\");\n        }\n        stmt.getters.forEach(function (getter) { return _this._visitClassGetter(stmt, getter, ctx); });\n        stmt.methods.forEach(function (method) { return _this._visitClassMethod(stmt, method, ctx); });\n        ctx.popClass();\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype._visitClassConstructor = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.print(stmt, \"function \" + stmt.name + \"(\");\n        if (stmt.constructorMethod != null) {\n            this._visitParams(stmt.constructorMethod.params, ctx);\n        }\n        ctx.println(stmt, \") {\");\n        ctx.incIndent();\n        if (stmt.constructorMethod != null) {\n            if (stmt.constructorMethod.body.length > 0) {\n                ctx.println(stmt, \"var self = this;\");\n                this.visitAllStatements(stmt.constructorMethod.body, ctx);\n            }\n        }\n        ctx.decIndent();\n        ctx.println(stmt, \"}\");\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} getter\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype._visitClassGetter = /**\n     * @param {?} stmt\n     * @param {?} getter\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, getter, ctx) {\n        ctx.println(stmt, \"Object.defineProperty(\" + stmt.name + \".prototype, '\" + getter.name + \"', { get: function() {\");\n        ctx.incIndent();\n        if (getter.body.length > 0) {\n            ctx.println(stmt, \"var self = this;\");\n            this.visitAllStatements(getter.body, ctx);\n        }\n        ctx.decIndent();\n        ctx.println(stmt, \"}});\");\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} method\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype._visitClassMethod = /**\n     * @param {?} stmt\n     * @param {?} method\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, method, ctx) {\n        ctx.print(stmt, stmt.name + \".prototype.\" + method.name + \" = function(\");\n        this._visitParams(method.params, ctx);\n        ctx.println(stmt, \") {\");\n        ctx.incIndent();\n        if (method.body.length > 0) {\n            ctx.println(stmt, \"var self = this;\");\n            this.visitAllStatements(method.body, ctx);\n        }\n        ctx.decIndent();\n        ctx.println(stmt, \"};\");\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitReadVarExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        if (ast.builtin === o.BuiltinVar.This) {\n            ctx.print(ast, 'self');\n        }\n        else if (ast.builtin === o.BuiltinVar.Super) {\n            throw new Error(\"'super' needs to be handled at a parent ast node, not at the variable level!\");\n        }\n        else {\n            _super.prototype.visitReadVarExpr.call(this, ast, ctx);\n        }\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.print(stmt, \"var \" + stmt.name);\n        if (stmt.value) {\n            ctx.print(stmt, ' = ');\n            stmt.value.visitExpression(this, ctx);\n        }\n        ctx.println(stmt, \";\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitCastExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ast.value.visitExpression(this, ctx);\n        return null;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ fnExpr = expr.fn;\n        if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {\n            /** @type {?} */ ((/** @type {?} */ ((ctx.currentClass)).parent)).visitExpression(this, ctx);\n            ctx.print(expr, \".call(this\");\n            if (expr.args.length > 0) {\n                ctx.print(expr, \", \");\n                this.visitAllExpressions(expr.args, ctx, ',');\n            }\n            ctx.print(expr, \")\");\n        }\n        else {\n            _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);\n        }\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitFunctionExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, \"function\" + (ast.name ? ' ' + ast.name : '') + \"(\");\n        this._visitParams(ast.params, ctx);\n        ctx.println(ast, \") {\");\n        ctx.incIndent();\n        this.visitAllStatements(ast.statements, ctx);\n        ctx.decIndent();\n        ctx.print(ast, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.print(stmt, \"function \" + stmt.name + \"(\");\n        this._visitParams(stmt.params, ctx);\n        ctx.println(stmt, \") {\");\n        ctx.incIndent();\n        this.visitAllStatements(stmt.statements, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.println(stmt, \"try {\");\n        ctx.incIndent();\n        this.visitAllStatements(stmt.bodyStmts, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, \"} catch (\" + CATCH_ERROR_VAR.name + \") {\");\n        ctx.incIndent();\n        var /** @type {?} */ catchStmts = [/** @type {?} */ (CATCH_STACK_VAR.set(CATCH_ERROR_VAR.prop('stack')).toDeclStmt(null, [\n                o.StmtModifier.Final\n            ]))].concat(stmt.catchStmts);\n        this.visitAllStatements(catchStmts, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} params\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype._visitParams = /**\n     * @param {?} params\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (params, ctx) {\n        this.visitAllObjects(function (param) { return ctx.print(null, param.name); }, params, ctx, ',');\n    };\n    /**\n     * @param {?} method\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = /**\n     * @param {?} method\n     * @return {?}\n     */\n    function (method) {\n        var /** @type {?} */ name;\n        switch (method) {\n            case o.BuiltinMethod.ConcatArray:\n                name = 'concat';\n                break;\n            case o.BuiltinMethod.SubscribeObservable:\n                name = 'subscribe';\n                break;\n            case o.BuiltinMethod.Bind:\n                name = 'bind';\n                break;\n            default:\n                throw new Error(\"Unknown builtin method: \" + method);\n        }\n        return name;\n    };\n    return AbstractJsEmitterVisitor;\n}(AbstractEmitterVisitor));\n/**\n * @abstract\n */\nexport { AbstractJsEmitterVisitor };\n//# sourceMappingURL=abstract_js_emitter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { identifierName, ngModuleJitUrl, sharedStylesheetJitUrl, templateJitUrl, templateSourceUrl } from '../compile_metadata';\nimport { ConstantPool } from '../constant_pool';\nimport * as ir from '../output/output_ast';\nimport { interpretStatements } from '../output/output_interpreter';\nimport { jitStatements } from '../output/output_jit';\nimport { SyncAsync, stringify } from '../util';\n/**\n * @record\n */\nexport function ModuleWithComponentFactories() { }\nfunction ModuleWithComponentFactories_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.ngModuleFactory;\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.componentFactories;\n}\n/**\n * An internal module of the Angular compiler that begins with component types,\n * extracts templates, and eventually produces a compiled version of the component\n * ready for linking into an application.\n *\n * \\@security When compiling templates at runtime, you must ensure that the entire template comes\n * from a trusted source. Attacker-controlled data introduced by a template could expose your\n * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).\n */\nvar /**\n * An internal module of the Angular compiler that begins with component types,\n * extracts templates, and eventually produces a compiled version of the component\n * ready for linking into an application.\n *\n * \\@security When compiling templates at runtime, you must ensure that the entire template comes\n * from a trusted source. Attacker-controlled data introduced by a template could expose your\n * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).\n */\nJitCompiler = /** @class */ (function () {\n    function JitCompiler(_metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _summaryResolver, _reflector, _compilerConfig, _console, getExtraNgModuleProviders) {\n        this._metadataResolver = _metadataResolver;\n        this._templateParser = _templateParser;\n        this._styleCompiler = _styleCompiler;\n        this._viewCompiler = _viewCompiler;\n        this._ngModuleCompiler = _ngModuleCompiler;\n        this._summaryResolver = _summaryResolver;\n        this._reflector = _reflector;\n        this._compilerConfig = _compilerConfig;\n        this._console = _console;\n        this.getExtraNgModuleProviders = getExtraNgModuleProviders;\n        this._compiledTemplateCache = new Map();\n        this._compiledHostTemplateCache = new Map();\n        this._compiledDirectiveWrapperCache = new Map();\n        this._compiledNgModuleCache = new Map();\n        this._sharedStylesheetCount = 0;\n        this._addedAotSummaries = new Set();\n    }\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    JitCompiler.prototype.compileModuleSync = /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        return SyncAsync.assertSync(this._compileModuleAndComponents(moduleType, true));\n    };\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    JitCompiler.prototype.compileModuleAsync = /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        return Promise.resolve(this._compileModuleAndComponents(moduleType, false));\n    };\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    JitCompiler.prototype.compileModuleAndAllComponentsSync = /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        return SyncAsync.assertSync(this._compileModuleAndAllComponents(moduleType, true));\n    };\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    JitCompiler.prototype.compileModuleAndAllComponentsAsync = /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        return Promise.resolve(this._compileModuleAndAllComponents(moduleType, false));\n    };\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    JitCompiler.prototype.getComponentFactory = /**\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        var /** @type {?} */ summary = this._metadataResolver.getDirectiveSummary(component);\n        return /** @type {?} */ (summary.componentFactory);\n    };\n    /**\n     * @param {?} summaries\n     * @return {?}\n     */\n    JitCompiler.prototype.loadAotSummaries = /**\n     * @param {?} summaries\n     * @return {?}\n     */\n    function (summaries) {\n        this.clearCache();\n        this._addAotSummaries(summaries);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    JitCompiler.prototype._addAotSummaries = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        if (this._addedAotSummaries.has(fn)) {\n            return;\n        }\n        this._addedAotSummaries.add(fn);\n        var /** @type {?} */ summaries = fn();\n        for (var /** @type {?} */ i = 0; i < summaries.length; i++) {\n            var /** @type {?} */ entry = summaries[i];\n            if (typeof entry === 'function') {\n                this._addAotSummaries(entry);\n            }\n            else {\n                var /** @type {?} */ summary = /** @type {?} */ (entry);\n                this._summaryResolver.addSummary({ symbol: summary.type.reference, metadata: null, type: summary });\n            }\n        }\n    };\n    /**\n     * @param {?} ref\n     * @return {?}\n     */\n    JitCompiler.prototype.hasAotSummary = /**\n     * @param {?} ref\n     * @return {?}\n     */\n    function (ref) { return !!this._summaryResolver.resolveSummary(ref); };\n    /**\n     * @param {?} ids\n     * @return {?}\n     */\n    JitCompiler.prototype._filterJitIdentifiers = /**\n     * @param {?} ids\n     * @return {?}\n     */\n    function (ids) {\n        var _this = this;\n        return ids.map(function (mod) { return mod.reference; }).filter(function (ref) { return !_this.hasAotSummary(ref); });\n    };\n    /**\n     * @param {?} moduleType\n     * @param {?} isSync\n     * @return {?}\n     */\n    JitCompiler.prototype._compileModuleAndComponents = /**\n     * @param {?} moduleType\n     * @param {?} isSync\n     * @return {?}\n     */\n    function (moduleType, isSync) {\n        var _this = this;\n        return SyncAsync.then(this._loadModules(moduleType, isSync), function () {\n            _this._compileComponents(moduleType, null);\n            return _this._compileModule(moduleType);\n        });\n    };\n    /**\n     * @param {?} moduleType\n     * @param {?} isSync\n     * @return {?}\n     */\n    JitCompiler.prototype._compileModuleAndAllComponents = /**\n     * @param {?} moduleType\n     * @param {?} isSync\n     * @return {?}\n     */\n    function (moduleType, isSync) {\n        var _this = this;\n        return SyncAsync.then(this._loadModules(moduleType, isSync), function () {\n            var /** @type {?} */ componentFactories = [];\n            _this._compileComponents(moduleType, componentFactories);\n            return {\n                ngModuleFactory: _this._compileModule(moduleType),\n                componentFactories: componentFactories\n            };\n        });\n    };\n    /**\n     * @param {?} mainModule\n     * @param {?} isSync\n     * @return {?}\n     */\n    JitCompiler.prototype._loadModules = /**\n     * @param {?} mainModule\n     * @param {?} isSync\n     * @return {?}\n     */\n    function (mainModule, isSync) {\n        var _this = this;\n        var /** @type {?} */ loading = [];\n        var /** @type {?} */ mainNgModule = /** @type {?} */ ((this._metadataResolver.getNgModuleMetadata(mainModule)));\n        // Note: for runtime compilation, we want to transitively compile all modules,\n        // so we also need to load the declared directives / pipes for all nested modules.\n        this._filterJitIdentifiers(mainNgModule.transitiveModule.modules).forEach(function (nestedNgModule) {\n            // getNgModuleMetadata only returns null if the value passed in is not an NgModule\n            var /** @type {?} */ moduleMeta = /** @type {?} */ ((_this._metadataResolver.getNgModuleMetadata(nestedNgModule)));\n            _this._filterJitIdentifiers(moduleMeta.declaredDirectives).forEach(function (ref) {\n                var /** @type {?} */ promise = _this._metadataResolver.loadDirectiveMetadata(moduleMeta.type.reference, ref, isSync);\n                if (promise) {\n                    loading.push(promise);\n                }\n            });\n            _this._filterJitIdentifiers(moduleMeta.declaredPipes)\n                .forEach(function (ref) { return _this._metadataResolver.getOrLoadPipeMetadata(ref); });\n        });\n        return SyncAsync.all(loading);\n    };\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    JitCompiler.prototype._compileModule = /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        var /** @type {?} */ ngModuleFactory = /** @type {?} */ ((this._compiledNgModuleCache.get(moduleType)));\n        if (!ngModuleFactory) {\n            var /** @type {?} */ moduleMeta = /** @type {?} */ ((this._metadataResolver.getNgModuleMetadata(moduleType)));\n            // Always provide a bound Compiler\n            var /** @type {?} */ extraProviders = this.getExtraNgModuleProviders(moduleMeta.type.reference);\n            var /** @type {?} */ outputCtx = createOutputContext();\n            var /** @type {?} */ compileResult = this._ngModuleCompiler.compile(outputCtx, moduleMeta, extraProviders);\n            ngModuleFactory = this._interpretOrJit(ngModuleJitUrl(moduleMeta), outputCtx.statements)[compileResult.ngModuleFactoryVar];\n            this._compiledNgModuleCache.set(moduleMeta.type.reference, ngModuleFactory);\n        }\n        return ngModuleFactory;\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} mainModule\n     * @param {?} allComponentFactories\n     * @return {?}\n     */\n    JitCompiler.prototype._compileComponents = /**\n     * \\@internal\n     * @param {?} mainModule\n     * @param {?} allComponentFactories\n     * @return {?}\n     */\n    function (mainModule, allComponentFactories) {\n        var _this = this;\n        var /** @type {?} */ ngModule = /** @type {?} */ ((this._metadataResolver.getNgModuleMetadata(mainModule)));\n        var /** @type {?} */ moduleByJitDirective = new Map();\n        var /** @type {?} */ templates = new Set();\n        var /** @type {?} */ transJitModules = this._filterJitIdentifiers(ngModule.transitiveModule.modules);\n        transJitModules.forEach(function (localMod) {\n            var /** @type {?} */ localModuleMeta = /** @type {?} */ ((_this._metadataResolver.getNgModuleMetadata(localMod)));\n            _this._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach(function (dirRef) {\n                moduleByJitDirective.set(dirRef, localModuleMeta);\n                var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(dirRef);\n                if (dirMeta.isComponent) {\n                    templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));\n                    if (allComponentFactories) {\n                        var /** @type {?} */ template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);\n                        templates.add(template);\n                        allComponentFactories.push(/** @type {?} */ (dirMeta.componentFactory));\n                    }\n                }\n            });\n        });\n        transJitModules.forEach(function (localMod) {\n            var /** @type {?} */ localModuleMeta = /** @type {?} */ ((_this._metadataResolver.getNgModuleMetadata(localMod)));\n            _this._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach(function (dirRef) {\n                var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(dirRef);\n                if (dirMeta.isComponent) {\n                    dirMeta.entryComponents.forEach(function (entryComponentType) {\n                        var /** @type {?} */ moduleMeta = /** @type {?} */ ((moduleByJitDirective.get(entryComponentType.componentType)));\n                        templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));\n                    });\n                }\n            });\n            localModuleMeta.entryComponents.forEach(function (entryComponentType) {\n                if (!_this.hasAotSummary(entryComponentType.componentType.reference)) {\n                    var /** @type {?} */ moduleMeta = /** @type {?} */ ((moduleByJitDirective.get(entryComponentType.componentType)));\n                    templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));\n                }\n            });\n        });\n        templates.forEach(function (template) { return _this._compileTemplate(template); });\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    JitCompiler.prototype.clearCacheFor = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        this._compiledNgModuleCache.delete(type);\n        this._metadataResolver.clearCacheFor(type);\n        this._compiledHostTemplateCache.delete(type);\n        var /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(type);\n        if (compiledTemplate) {\n            this._compiledTemplateCache.delete(type);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    JitCompiler.prototype.clearCache = /**\n     * @return {?}\n     */\n    function () {\n        // Note: don't clear the _addedAotSummaries, as they don't change!\n        this._metadataResolver.clearCache();\n        this._compiledTemplateCache.clear();\n        this._compiledHostTemplateCache.clear();\n        this._compiledNgModuleCache.clear();\n    };\n    /**\n     * @param {?} compType\n     * @param {?} ngModule\n     * @return {?}\n     */\n    JitCompiler.prototype._createCompiledHostTemplate = /**\n     * @param {?} compType\n     * @param {?} ngModule\n     * @return {?}\n     */\n    function (compType, ngModule) {\n        if (!ngModule) {\n            throw new Error(\"Component \" + stringify(compType) + \" is not part of any NgModule or the module has not been imported into your module.\");\n        }\n        var /** @type {?} */ compiledTemplate = this._compiledHostTemplateCache.get(compType);\n        if (!compiledTemplate) {\n            var /** @type {?} */ compMeta = this._metadataResolver.getDirectiveMetadata(compType);\n            assertComponent(compMeta);\n            var /** @type {?} */ hostMeta = this._metadataResolver.getHostComponentMetadata(compMeta, (/** @type {?} */ (compMeta.componentFactory)).viewDefFactory);\n            compiledTemplate =\n                new CompiledTemplate(true, compMeta.type, hostMeta, ngModule, [compMeta.type]);\n            this._compiledHostTemplateCache.set(compType, compiledTemplate);\n        }\n        return compiledTemplate;\n    };\n    /**\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @return {?}\n     */\n    JitCompiler.prototype._createCompiledTemplate = /**\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @return {?}\n     */\n    function (compMeta, ngModule) {\n        var /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);\n        if (!compiledTemplate) {\n            assertComponent(compMeta);\n            compiledTemplate = new CompiledTemplate(false, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);\n            this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);\n        }\n        return compiledTemplate;\n    };\n    /**\n     * @param {?} template\n     * @return {?}\n     */\n    JitCompiler.prototype._compileTemplate = /**\n     * @param {?} template\n     * @return {?}\n     */\n    function (template) {\n        var _this = this;\n        if (template.isCompiled) {\n            return;\n        }\n        var /** @type {?} */ compMeta = template.compMeta;\n        var /** @type {?} */ externalStylesheetsByModuleUrl = new Map();\n        var /** @type {?} */ outputContext = createOutputContext();\n        var /** @type {?} */ componentStylesheet = this._styleCompiler.compileComponent(outputContext, compMeta); /** @type {?} */\n        ((compMeta.template)).externalStylesheets.forEach(function (stylesheetMeta) {\n            var /** @type {?} */ compiledStylesheet = _this._styleCompiler.compileStyles(createOutputContext(), compMeta, stylesheetMeta);\n            externalStylesheetsByModuleUrl.set(/** @type {?} */ ((stylesheetMeta.moduleUrl)), compiledStylesheet);\n        });\n        this._resolveStylesCompileResult(componentStylesheet, externalStylesheetsByModuleUrl);\n        var /** @type {?} */ pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });\n        var _a = this._parseTemplate(compMeta, template.ngModule, template.directives), parsedTemplate = _a.template, usedPipes = _a.pipes;\n        var /** @type {?} */ compileResult = this._viewCompiler.compileComponent(outputContext, compMeta, parsedTemplate, ir.variable(componentStylesheet.stylesVar), usedPipes);\n        var /** @type {?} */ evalResult = this._interpretOrJit(templateJitUrl(template.ngModule.type, template.compMeta), outputContext.statements);\n        var /** @type {?} */ viewClass = evalResult[compileResult.viewClassVar];\n        var /** @type {?} */ rendererType = evalResult[compileResult.rendererTypeVar];\n        template.compiled(viewClass, rendererType);\n    };\n    /**\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} directiveIdentifiers\n     * @return {?}\n     */\n    JitCompiler.prototype._parseTemplate = /**\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} directiveIdentifiers\n     * @return {?}\n     */\n    function (compMeta, ngModule, directiveIdentifiers) {\n        var _this = this;\n        // Note: ! is ok here as components always have a template.\n        var /** @type {?} */ preserveWhitespaces = /** @type {?} */ ((compMeta.template)).preserveWhitespaces;\n        var /** @type {?} */ directives = directiveIdentifiers.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });\n        var /** @type {?} */ pipes = ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });\n        return this._templateParser.parse(compMeta, /** @type {?} */ ((/** @type {?} */ ((compMeta.template)).htmlAst)), directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, /** @type {?} */ ((compMeta.template))), preserveWhitespaces);\n    };\n    /**\n     * @param {?} result\n     * @param {?} externalStylesheetsByModuleUrl\n     * @return {?}\n     */\n    JitCompiler.prototype._resolveStylesCompileResult = /**\n     * @param {?} result\n     * @param {?} externalStylesheetsByModuleUrl\n     * @return {?}\n     */\n    function (result, externalStylesheetsByModuleUrl) {\n        var _this = this;\n        result.dependencies.forEach(function (dep, i) {\n            var /** @type {?} */ nestedCompileResult = /** @type {?} */ ((externalStylesheetsByModuleUrl.get(dep.moduleUrl)));\n            var /** @type {?} */ nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);\n            dep.setValue(nestedStylesArr);\n        });\n    };\n    /**\n     * @param {?} result\n     * @param {?} externalStylesheetsByModuleUrl\n     * @return {?}\n     */\n    JitCompiler.prototype._resolveAndEvalStylesCompileResult = /**\n     * @param {?} result\n     * @param {?} externalStylesheetsByModuleUrl\n     * @return {?}\n     */\n    function (result, externalStylesheetsByModuleUrl) {\n        this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);\n        return this._interpretOrJit(sharedStylesheetJitUrl(result.meta, this._sharedStylesheetCount++), result.outputCtx.statements)[result.stylesVar];\n    };\n    /**\n     * @param {?} sourceUrl\n     * @param {?} statements\n     * @return {?}\n     */\n    JitCompiler.prototype._interpretOrJit = /**\n     * @param {?} sourceUrl\n     * @param {?} statements\n     * @return {?}\n     */\n    function (sourceUrl, statements) {\n        if (!this._compilerConfig.useJit) {\n            return interpretStatements(statements, this._reflector);\n        }\n        else {\n            return jitStatements(sourceUrl, statements, this._reflector, this._compilerConfig.jitDevMode);\n        }\n    };\n    return JitCompiler;\n}());\n/**\n * An internal module of the Angular compiler that begins with component types,\n * extracts templates, and eventually produces a compiled version of the component\n * ready for linking into an application.\n *\n * \\@security When compiling templates at runtime, you must ensure that the entire template comes\n * from a trusted source. Attacker-controlled data introduced by a template could expose your\n * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).\n */\nexport { JitCompiler };\nfunction JitCompiler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    JitCompiler.prototype._compiledTemplateCache;\n    /** @type {?} */\n    JitCompiler.prototype._compiledHostTemplateCache;\n    /** @type {?} */\n    JitCompiler.prototype._compiledDirectiveWrapperCache;\n    /** @type {?} */\n    JitCompiler.prototype._compiledNgModuleCache;\n    /** @type {?} */\n    JitCompiler.prototype._sharedStylesheetCount;\n    /** @type {?} */\n    JitCompiler.prototype._addedAotSummaries;\n    /** @type {?} */\n    JitCompiler.prototype._metadataResolver;\n    /** @type {?} */\n    JitCompiler.prototype._templateParser;\n    /** @type {?} */\n    JitCompiler.prototype._styleCompiler;\n    /** @type {?} */\n    JitCompiler.prototype._viewCompiler;\n    /** @type {?} */\n    JitCompiler.prototype._ngModuleCompiler;\n    /** @type {?} */\n    JitCompiler.prototype._summaryResolver;\n    /** @type {?} */\n    JitCompiler.prototype._reflector;\n    /** @type {?} */\n    JitCompiler.prototype._compilerConfig;\n    /** @type {?} */\n    JitCompiler.prototype._console;\n    /** @type {?} */\n    JitCompiler.prototype.getExtraNgModuleProviders;\n}\nvar CompiledTemplate = /** @class */ (function () {\n    function CompiledTemplate(isHost, compType, compMeta, ngModule, directives) {\n        this.isHost = isHost;\n        this.compType = compType;\n        this.compMeta = compMeta;\n        this.ngModule = ngModule;\n        this.directives = directives;\n        this._viewClass = /** @type {?} */ ((null));\n        this.isCompiled = false;\n    }\n    /**\n     * @param {?} viewClass\n     * @param {?} rendererType\n     * @return {?}\n     */\n    CompiledTemplate.prototype.compiled = /**\n     * @param {?} viewClass\n     * @param {?} rendererType\n     * @return {?}\n     */\n    function (viewClass, rendererType) {\n        this._viewClass = viewClass;\n        (/** @type {?} */ (this.compMeta.componentViewType)).setDelegate(viewClass);\n        for (var /** @type {?} */ prop in rendererType) {\n            (/** @type {?} */ (this.compMeta.rendererType))[prop] = rendererType[prop];\n        }\n        this.isCompiled = true;\n    };\n    return CompiledTemplate;\n}());\nfunction CompiledTemplate_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompiledTemplate.prototype._viewClass;\n    /** @type {?} */\n    CompiledTemplate.prototype.isCompiled;\n    /** @type {?} */\n    CompiledTemplate.prototype.isHost;\n    /** @type {?} */\n    CompiledTemplate.prototype.compType;\n    /** @type {?} */\n    CompiledTemplate.prototype.compMeta;\n    /** @type {?} */\n    CompiledTemplate.prototype.ngModule;\n    /** @type {?} */\n    CompiledTemplate.prototype.directives;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction assertComponent(meta) {\n    if (!meta.isComponent) {\n        throw new Error(\"Could not compile '\" + identifierName(meta.type) + \"' because it is not a component.\");\n    }\n}\n/**\n * @return {?}\n */\nfunction createOutputContext() {\n    var /** @type {?} */ importExpr = function (symbol) {\n        return ir.importExpr({ name: identifierName(symbol), moduleName: null, runtime: symbol });\n    };\n    return { statements: [], genFilePath: '', importExpr: importExpr, constantPool: new ConstantPool() };\n}\n//# sourceMappingURL=compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Create a {\\@link UrlResolver} with no package prefix.\n * @return {?}\n */\nexport function createUrlResolverWithoutPackagePrefix() {\n    return new UrlResolver();\n}\n/**\n * @return {?}\n */\nexport function createOfflineCompileUrlResolver() {\n    return new UrlResolver('.');\n}\n/**\n * @record\n */\nexport function UrlResolverCtor() { }\nfunction UrlResolverCtor_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    new (packagePrefix?: string|null): UrlResolver;\n    */\n}\nexport var /** @type {?} */ UrlResolver = /** @class */ (function () {\n    function UrlResolverImpl(_packagePrefix) {\n        if (_packagePrefix === void 0) { _packagePrefix = null; }\n        this._packagePrefix = _packagePrefix;\n    }\n    /**\n     * Resolves the `url` given the `baseUrl`:\n     * - when the `url` is null, the `baseUrl` is returned,\n     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of\n     * `baseUrl` and `url`,\n     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is\n     * returned as is (ignoring the `baseUrl`)\n     */\n    /**\n     * Resolves the `url` given the `baseUrl`:\n     * - when the `url` is null, the `baseUrl` is returned,\n     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of\n     * `baseUrl` and `url`,\n     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is\n     * returned as is (ignoring the `baseUrl`)\n     * @param {?} baseUrl\n     * @param {?} url\n     * @return {?}\n     */\n    UrlResolverImpl.prototype.resolve = /**\n     * Resolves the `url` given the `baseUrl`:\n     * - when the `url` is null, the `baseUrl` is returned,\n     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of\n     * `baseUrl` and `url`,\n     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is\n     * returned as is (ignoring the `baseUrl`)\n     * @param {?} baseUrl\n     * @param {?} url\n     * @return {?}\n     */\n    function (baseUrl, url) {\n        var /** @type {?} */ resolvedUrl = url;\n        if (baseUrl != null && baseUrl.length > 0) {\n            resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);\n        }\n        var /** @type {?} */ resolvedParts = _split(resolvedUrl);\n        var /** @type {?} */ prefix = this._packagePrefix;\n        if (prefix != null && resolvedParts != null &&\n            resolvedParts[_ComponentIndex.Scheme] == 'package') {\n            var /** @type {?} */ path = resolvedParts[_ComponentIndex.Path];\n            prefix = prefix.replace(/\\/+$/, '');\n            path = path.replace(/^\\/+/, '');\n            return prefix + \"/\" + path;\n        }\n        return resolvedUrl;\n    };\n    return UrlResolverImpl;\n}());\n/**\n * Extract the scheme of a URL.\n * @param {?} url\n * @return {?}\n */\nexport function getUrlScheme(url) {\n    var /** @type {?} */ match = _split(url);\n    return (match && match[_ComponentIndex.Scheme]) || '';\n}\n/**\n * Builds a URI string from already-encoded parts.\n *\n * No encoding is performed.  Any component may be omitted as either null or\n * undefined.\n *\n * @param {?=} opt_scheme The scheme such as 'http'.\n * @param {?=} opt_userInfo The user name before the '\\@'.\n * @param {?=} opt_domain The domain such as 'www.google.com', already\n *     URI-encoded.\n * @param {?=} opt_port The port number.\n * @param {?=} opt_path The path, already URI-encoded.  If it is not\n *     empty, it must begin with a slash.\n * @param {?=} opt_queryData The URI-encoded query data.\n * @param {?=} opt_fragment The URI-encoded fragment identifier.\n * @return {?} The fully combined URI.\n */\nfunction _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {\n    var /** @type {?} */ out = [];\n    if (opt_scheme != null) {\n        out.push(opt_scheme + ':');\n    }\n    if (opt_domain != null) {\n        out.push('//');\n        if (opt_userInfo != null) {\n            out.push(opt_userInfo + '@');\n        }\n        out.push(opt_domain);\n        if (opt_port != null) {\n            out.push(':' + opt_port);\n        }\n    }\n    if (opt_path != null) {\n        out.push(opt_path);\n    }\n    if (opt_queryData != null) {\n        out.push('?' + opt_queryData);\n    }\n    if (opt_fragment != null) {\n        out.push('#' + opt_fragment);\n    }\n    return out.join('');\n}\n/**\n * A regular expression for breaking a URI into its component parts.\n *\n * {\\@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says\n * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\n * disambiguation method used by POSIX regular expressions, it is natural and\n * commonplace to use a regular expression for parsing the potential five\n * components of a URI reference.\n *\n * The following line is the regular expression for breaking-down a\n * well-formed URI reference into its components.\n *\n * <pre>\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n * </pre>\n *\n * The numbers in the second line above are only to assist readability; they\n * indicate the reference points for each subexpression (i.e., each paired\n * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\n * For example, matching the above expression to\n * <pre>\n *     http://www.ics.uci.edu/pub/ietf/uri/#Related\n * </pre>\n * results in the following subexpression matches:\n * <pre>\n *    $1 = http:\n *    $2 = http\n *    $3 = //www.ics.uci.edu\n *    $4 = www.ics.uci.edu\n *    $5 = /pub/ietf/uri/\n *    $6 = <undefined>\n *    $7 = <undefined>\n *    $8 = #Related\n *    $9 = Related\n * </pre>\n * where <undefined> indicates that the component is not present, as is the\n * case for the query component in the above example. Therefore, we can\n * determine the value of the five components as\n * <pre>\n *    scheme    = $2\n *    authority = $4\n *    path      = $5\n *    query     = $7\n *    fragment  = $9\n * </pre>\n *\n * The regular expression has been modified slightly to expose the\n * userInfo, domain, and port separately from the authority.\n * The modified version yields\n * <pre>\n *    $1 = http              scheme\n *    $2 = <undefined>       userInfo -\\\n *    $3 = www.ics.uci.edu   domain     | authority\n *    $4 = <undefined>       port     -/\n *    $5 = /pub/ietf/uri/    path\n *    $6 = <undefined>       query without ?\n *    $7 = Related           fragment without #\n * </pre>\n * \\@internal\n */\nvar /** @type {?} */ _splitRe = new RegExp('^' +\n    '(?:' +\n    '([^:/?#.]+)' + // scheme - ignore special characters\n    ':)?' +\n    '(?://' +\n    '(?:([^/?#]*)@)?' + // userInfo\n    '([\\\\w\\\\d\\\\-\\\\u0100-\\\\uffff.%]*)' + // domain - restrict to letters,\n    '(?::([0-9]+))?' + // port\n    ')?' +\n    '([^?#]+)?' + // path\n    '(?:\\\\?([^#]*))?' + // query\n    '(?:#(.*))?' + // fragment\n    '$');\n/** @enum {number} */\nvar _ComponentIndex = {\n    Scheme: 1,\n    UserInfo: 2,\n    Domain: 3,\n    Port: 4,\n    Path: 5,\n    QueryData: 6,\n    Fragment: 7,\n};\n_ComponentIndex[_ComponentIndex.Scheme] = \"Scheme\";\n_ComponentIndex[_ComponentIndex.UserInfo] = \"UserInfo\";\n_ComponentIndex[_ComponentIndex.Domain] = \"Domain\";\n_ComponentIndex[_ComponentIndex.Port] = \"Port\";\n_ComponentIndex[_ComponentIndex.Path] = \"Path\";\n_ComponentIndex[_ComponentIndex.QueryData] = \"QueryData\";\n_ComponentIndex[_ComponentIndex.Fragment] = \"Fragment\";\n/**\n * Splits a URI into its component parts.\n *\n * Each component can be accessed via the component indices; for example:\n * <pre>\n * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];\n * </pre>\n *\n * @param {?} uri The URI string to examine.\n * @return {?} Each component still URI-encoded.\n *     Each component that is present will contain the encoded value, whereas\n *     components that are not present will be undefined or empty, depending\n *     on the browser's regular expression implementation.  Never null, since\n *     arbitrary strings may still look like path names.\n */\nfunction _split(uri) {\n    return /** @type {?} */ ((uri.match(_splitRe)));\n}\n/**\n * Removes dot segments in given path component, as described in\n * RFC 3986, section 5.2.4.\n *\n * @param {?} path A non-empty path component.\n * @return {?} Path component with removed dot segments.\n */\nfunction _removeDotSegments(path) {\n    if (path == '/')\n        return '/';\n    var /** @type {?} */ leadingSlash = path[0] == '/' ? '/' : '';\n    var /** @type {?} */ trailingSlash = path[path.length - 1] === '/' ? '/' : '';\n    var /** @type {?} */ segments = path.split('/');\n    var /** @type {?} */ out = [];\n    var /** @type {?} */ up = 0;\n    for (var /** @type {?} */ pos = 0; pos < segments.length; pos++) {\n        var /** @type {?} */ segment = segments[pos];\n        switch (segment) {\n            case '':\n            case '.':\n                break;\n            case '..':\n                if (out.length > 0) {\n                    out.pop();\n                }\n                else {\n                    up++;\n                }\n                break;\n            default:\n                out.push(segment);\n        }\n    }\n    if (leadingSlash == '') {\n        while (up-- > 0) {\n            out.unshift('..');\n        }\n        if (out.length === 0)\n            out.push('.');\n    }\n    return leadingSlash + out.join('/') + trailingSlash;\n}\n/**\n * Takes an array of the parts from split and canonicalizes the path part\n * and then joins all the parts.\n * @param {?} parts\n * @return {?}\n */\nfunction _joinAndCanonicalizePath(parts) {\n    var /** @type {?} */ path = parts[_ComponentIndex.Path];\n    path = path == null ? '' : _removeDotSegments(path);\n    parts[_ComponentIndex.Path] = path;\n    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);\n}\n/**\n * Resolves a URL.\n * @param {?} base The URL acting as the base URL.\n * @param {?} url\n * @return {?}\n */\nfunction _resolveUrl(base, url) {\n    var /** @type {?} */ parts = _split(encodeURI(url));\n    var /** @type {?} */ baseParts = _split(base);\n    if (parts[_ComponentIndex.Scheme] != null) {\n        return _joinAndCanonicalizePath(parts);\n    }\n    else {\n        parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];\n    }\n    for (var /** @type {?} */ i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {\n        if (parts[i] == null) {\n            parts[i] = baseParts[i];\n        }\n    }\n    if (parts[_ComponentIndex.Path][0] == '/') {\n        return _joinAndCanonicalizePath(parts);\n    }\n    var /** @type {?} */ path = baseParts[_ComponentIndex.Path];\n    if (path == null)\n        path = '/';\n    var /** @type {?} */ index = path.lastIndexOf('/');\n    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];\n    parts[_ComponentIndex.Path] = path;\n    return _joinAndCanonicalizePath(parts);\n}\n//# sourceMappingURL=url_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface for retrieving documents by URL that the compiler uses\n * to load templates.\n */\nvar /**\n * An interface for retrieving documents by URL that the compiler uses\n * to load templates.\n */\nResourceLoader = /** @class */ (function () {\n    function ResourceLoader() {\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    ResourceLoader.prototype.get = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) { return ''; };\n    return ResourceLoader;\n}());\n/**\n * An interface for retrieving documents by URL that the compiler uses\n * to load templates.\n */\nexport { ResourceLoader };\n//# sourceMappingURL=resource_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { analyzeAndValidateNgModules } from '../aot/compiler';\nimport { createAotUrlResolver } from '../aot/compiler_factory';\nimport { StaticReflector } from '../aot/static_reflector';\nimport { StaticSymbolCache } from '../aot/static_symbol';\nimport { StaticSymbolResolver } from '../aot/static_symbol_resolver';\nimport { AotSummaryResolver } from '../aot/summary_resolver';\nimport { CompilerConfig } from '../config';\nimport { ViewEncapsulation } from '../core';\nimport { DirectiveNormalizer } from '../directive_normalizer';\nimport { DirectiveResolver } from '../directive_resolver';\nimport { CompileMetadataResolver } from '../metadata_resolver';\nimport { HtmlParser } from '../ml_parser/html_parser';\nimport { InterpolationConfig } from '../ml_parser/interpolation_config';\nimport { NgModuleResolver } from '../ng_module_resolver';\nimport { PipeResolver } from '../pipe_resolver';\nimport { DomElementSchemaRegistry } from '../schema/dom_element_schema_registry';\nimport { MessageBundle } from './message_bundle';\n/**\n * The host of the Extractor disconnects the implementation from TypeScript / other language\n * services and from underlying file systems.\n * @record\n */\nexport function ExtractorHost() { }\nfunction ExtractorHost_tsickle_Closure_declarations() {\n    /**\n     * Converts a path that refers to a resource into an absolute filePath\n     * that can be lateron used for loading the resource via `loadResource.\n     * @type {?}\n     */\n    ExtractorHost.prototype.resourceNameToFileName;\n    /**\n     * Loads a resource (e.g. html / css)\n     * @type {?}\n     */\n    ExtractorHost.prototype.loadResource;\n}\nvar Extractor = /** @class */ (function () {\n    function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) {\n        this.host = host;\n        this.staticSymbolResolver = staticSymbolResolver;\n        this.messageBundle = messageBundle;\n        this.metadataResolver = metadataResolver;\n    }\n    /**\n     * @param {?} rootFiles\n     * @return {?}\n     */\n    Extractor.prototype.extract = /**\n     * @param {?} rootFiles\n     * @return {?}\n     */\n    function (rootFiles) {\n        var _this = this;\n        var _a = analyzeAndValidateNgModules(rootFiles, this.host, this.staticSymbolResolver, this.metadataResolver), files = _a.files, ngModules = _a.ngModules;\n        return Promise\n            .all(ngModules.map(function (ngModule) {\n            return _this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false);\n        }))\n            .then(function () {\n            var /** @type {?} */ errors = [];\n            files.forEach(function (file) {\n                var /** @type {?} */ compMetas = [];\n                file.directives.forEach(function (directiveType) {\n                    var /** @type {?} */ dirMeta = _this.metadataResolver.getDirectiveMetadata(directiveType);\n                    if (dirMeta && dirMeta.isComponent) {\n                        compMetas.push(dirMeta);\n                    }\n                });\n                compMetas.forEach(function (compMeta) {\n                    var /** @type {?} */ html = /** @type {?} */ ((/** @type {?} */ ((compMeta.template)).template));\n                    var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(/** @type {?} */ ((compMeta.template)).interpolation);\n                    errors.push.apply(errors, /** @type {?} */ ((_this.messageBundle.updateFromTemplate(html, file.fileName, interpolationConfig))));\n                });\n            });\n            if (errors.length) {\n                throw new Error(errors.map(function (e) { return e.toString(); }).join('\\n'));\n            }\n            return _this.messageBundle;\n        });\n    };\n    /**\n     * @param {?} host\n     * @param {?} locale\n     * @return {?}\n     */\n    Extractor.create = /**\n     * @param {?} host\n     * @param {?} locale\n     * @return {?}\n     */\n    function (host, locale) {\n        var /** @type {?} */ htmlParser = new HtmlParser();\n        var /** @type {?} */ urlResolver = createAotUrlResolver(host);\n        var /** @type {?} */ symbolCache = new StaticSymbolCache();\n        var /** @type {?} */ summaryResolver = new AotSummaryResolver(host, symbolCache);\n        var /** @type {?} */ staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);\n        var /** @type {?} */ staticReflector = new StaticReflector(summaryResolver, staticSymbolResolver);\n        var /** @type {?} */ config = new CompilerConfig({ defaultEncapsulation: ViewEncapsulation.Emulated, useJit: false });\n        var /** @type {?} */ normalizer = new DirectiveNormalizer({ get: function (url) { return host.loadResource(url); } }, urlResolver, htmlParser, config);\n        var /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();\n        var /** @type {?} */ resolver = new CompileMetadataResolver(config, htmlParser, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector);\n        // TODO(vicb): implicit tags & attributes\n        var /** @type {?} */ messageBundle = new MessageBundle(htmlParser, [], {}, locale);\n        var /** @type {?} */ extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);\n        return { extractor: extractor, staticReflector: staticReflector };\n    };\n    return Extractor;\n}());\nexport { Extractor };\nfunction Extractor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Extractor.prototype.host;\n    /** @type {?} */\n    Extractor.prototype.staticSymbolResolver;\n    /** @type {?} */\n    Extractor.prototype.messageBundle;\n    /** @type {?} */\n    Extractor.prototype.metadataResolver;\n}\n//# sourceMappingURL=extractor.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { Extractor } from './extractor';\nexport { I18NHtmlParser } from './i18n_html_parser';\nexport { MessageBundle } from './message_bundle';\nexport { Serializer } from './serializers/serializer';\nexport { Xliff } from './serializers/xliff';\nexport { Xliff2 } from './serializers/xliff2';\nexport { Xmb } from './serializers/xmb';\nexport { Xtb } from './serializers/xtb';\n//# sourceMappingURL=index.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {StaticSymbol} from '@angular/compiler';\n\n/**\n * The range of a span of text in a source file.\n *\n * @experimental\n */\nexport interface Span {\n  /**\n   * The first code-point of the span as an offset relative to the beginning of the source assuming\n   * a UTF-16 encoding.\n   */\n  start: number;\n\n  /**\n   * The first code-point after the span as an offset relative to the beginning of the source\n   * assuming a UTF-16 encoding.\n   */\n  end: number;\n}\n\n/**\n * A file and span.\n */\nexport interface Location {\n  fileName: string;\n  span: Span;\n}\n\n/**\n * A defnition location(s).\n */\nexport type Definition = Location[] | undefined;\n\n/**\n * A symbol describing a language element that can be referenced by expressions\n * in an Angular template.\n *\n * @experimental\n */\nexport interface Symbol {\n  /**\n   * The name of the symbol as it would be referenced in an Angular expression.\n   */\n  readonly name: string;\n\n  /**\n   * The kind of completion this symbol should generate if included.\n   */\n  readonly kind: string;\n\n  /**\n   * The language of the source that defines the symbol. (e.g. typescript for TypeScript,\n   * ng-template for an Angular template, etc.)\n   */\n  readonly language: string;\n\n  /**\n   * A symbol representing type of the symbol.\n   */\n  readonly type: Symbol|undefined;\n\n  /**\n   * A symbol for the container of this symbol. For example, if this is a method, the container\n   * is the class or interface of the method. If no container is appropriate, undefined is\n   * returned.\n   */\n  readonly container: Symbol|undefined;\n\n  /**\n   * The symbol is public in the container.\n   */\n  readonly public: boolean;\n\n  /**\n   * `true` if the symbol can be the target of a call.\n   */\n  readonly callable: boolean;\n\n  /**\n   * The location of the definition of the symbol\n   */\n  readonly definition: Definition|undefined;\n\n  /**\n   * `true` if the symbol is a type that is nullable (can be null or undefined).\n   */\n  readonly nullable: boolean;\n\n  /**\n   * A table of the members of the symbol; that is, the members that can appear\n   * after a `.` in an Angular expression.\n   */\n  members(): SymbolTable;\n\n  /**\n   * The list of overloaded signatures that can be used if the symbol is the\n   * target of a call.\n   */\n  signatures(): Signature[];\n\n  /**\n   * Return which signature of returned by `signatures()` would be used selected\n   * given the `types` supplied. If no signature would match, this method should\n   * return `undefined`.\n   */\n  selectSignature(types: Symbol[]): Signature|undefined;\n\n  /**\n   * Return the type of the expression if this symbol is indexed by `argument`.\n   * If the symbol cannot be indexed, this method should return `undefined`.\n   */\n  indexed(argument: Symbol): Symbol|undefined;\n}\n\n/**\n * A table of `Symbol`s accessible by name.\n *\n * @experimental\n */\nexport interface SymbolTable {\n  /**\n   * The number of symbols in the table.\n   */\n  readonly size: number;\n\n  /**\n   * Get the symbol corresponding to `key` or `undefined` if there is no symbol in the\n   * table by the name `key`.\n   */\n  get(key: string): Symbol|undefined;\n\n  /**\n   * Returns `true` if the table contains a `Symbol` with the name `key`.\n   */\n  has(key: string): boolean;\n\n  /**\n   * Returns all the `Symbol`s in the table. The order should be, but is not required to be,\n   * in declaration order.\n   */\n  values(): Symbol[];\n}\n\n/**\n * A description of a function or method signature.\n *\n * @experimental\n */\nexport interface Signature {\n  /**\n   * The arguments of the signture. The order of `arguments.symbols()` must be in the order\n   * of argument declaration.\n   */\n  readonly arguments: SymbolTable;\n\n  /**\n   * The symbol of the signature result type.\n   */\n  readonly result: Symbol;\n}\n\n/**\n * An enumeration of basic types.\n *\n * @experimental\n */\nexport enum BuiltinType {\n  /**\n   * The type is a type that can hold any other type.\n   */\n  Any,\n\n  /**\n   * The type of a string literal.\n   */\n  String,\n\n  /**\n   * The type of a numeric literal.\n   */\n  Number,\n\n  /**\n   * The type of the `true` and `false` literals.\n   */\n  Boolean,\n\n  /**\n   * The type of the `undefined` literal.\n   */\n  Undefined,\n\n  /**\n   * the type of the `null` literal.\n   */\n  Null,\n\n  /**\n   * the type is an unbound type parameter.\n   */\n  Unbound,\n\n  /**\n   * Not a built-in type.\n   */\n  Other\n}\n\n/**\n * The kinds of definition.\n *\n * @experimental\n */\nexport type DeclarationKind = 'attribute' | 'html attribute' | 'component' | 'element' | 'entity' |\n    'key' | 'method' | 'pipe' | 'property' | 'type' | 'reference' | 'variable';\n\n/**\n * Describes a symbol to type binding used to build a symbol table.\n *\n * @experimental\n */\nexport interface SymbolDeclaration {\n  /**\n   * The name of the symbol in table.\n   */\n  readonly name: string;\n\n  /**\n   * The kind of symbol to declare.\n   */\n  readonly kind: DeclarationKind;\n\n  /**\n   * Type of the symbol. The type symbol should refer to a symbol for a type.\n   */\n  readonly type: Symbol;\n\n  /**\n   * The definion of the symbol if one exists.\n   */\n  readonly definition?: Definition;\n}\n\n/**\n * Information about the pipes that are available for use in a template.\n *\n * @experimental\n */\nexport interface PipeInfo {\n  /**\n   * The name of the pipe.\n   */\n  name: string;\n\n  /**\n   * The static symbol for the pipe's constructor.\n   */\n  symbol: StaticSymbol;\n}\n\n/**\n * A sequence of pipe information.\n *\n * @experimental\n */\nexport type Pipes = PipeInfo[] | undefined;\n\n/**\n * Describes the language context in which an Angular expression is evaluated.\n *\n * @experimental\n */\nexport interface SymbolQuery {\n  /**\n   * Return the built-in type this symbol represents or Other if it is not a built-in type.\n   */\n  getTypeKind(symbol: Symbol): BuiltinType;\n\n  /**\n   * Return a symbol representing the given built-in type.\n   */\n  getBuiltinType(kind: BuiltinType): Symbol;\n\n  /**\n   * Return the symbol for a type that represents the union of all the types given. Any value\n   * of one of the types given should be assignable to the returned type. If no one type can\n   * be constructed then this should be the Any type.\n   */\n  getTypeUnion(...types: Symbol[]): Symbol;\n\n  /**\n   * Return a symbol for an array type that has the `type` as its element type.\n   */\n  getArrayType(type: Symbol): Symbol;\n\n  /**\n   * Return element type symbol for an array type if the `type` is an array type. Otherwise return\n   * undefined.\n   */\n  getElementType(type: Symbol): Symbol|undefined;\n\n  /**\n   * Return a type that is the non-nullable version of the given type. If `type` is already\n   * non-nullable, return `type`.\n   */\n  getNonNullableType(type: Symbol): Symbol;\n\n  /**\n   * Return a symbol table for the pipes that are in scope.\n   */\n  getPipes(): SymbolTable;\n\n  /**\n   * Return the type symbol for the given static symbol.\n   */\n  getTypeSymbol(type: StaticSymbol): Symbol|undefined;\n\n  /**\n   * Return the members that are in the context of a type's template reference.\n   */\n  getTemplateContext(type: StaticSymbol): SymbolTable|undefined;\n\n  /**\n   * Produce a symbol table with the given symbols. Used to produce a symbol table\n   * for use with mergeSymbolTables().\n   */\n  createSymbolTable(symbols: SymbolDeclaration[]): SymbolTable;\n\n  /**\n   * Produce a merged symbol table. If the symbol tables contain duplicate entries\n   * the entries of the latter symbol tables will obscure the entries in the prior\n   * symbol tables.\n   *\n   * The symbol tables passed to this routine MUST be produces by the same instance\n   * of SymbolQuery that is being called.\n   */\n  mergeSymbolTable(symbolTables: SymbolTable[]): SymbolTable;\n\n  /**\n   * Return the span of the narrowest non-token node at the given location.\n   */\n  getSpanAt(line: number, column: number): Span|undefined;\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AST, AstVisitor, Binary, BindingPipe, Chain, Conditional, FunctionCall, ImplicitReceiver, Interpolation, KeyedRead, KeyedWrite, LiteralArray, LiteralMap, LiteralPrimitive, MethodCall, NonNullAssert, PrefixNot, PropertyRead, PropertyWrite, Quote, SafeMethodCall, SafePropertyRead, visitAstChildren} from '@angular/compiler';\n\nimport {BuiltinType, Signature, Span, Symbol, SymbolQuery, SymbolTable} from './symbols';\n\nexport interface ExpressionDiagnosticsContext { event?: boolean; }\n\nexport enum DiagnosticKind {\n  Error,\n  Warning,\n}\n\nexport class TypeDiagnostic {\n  constructor(public kind: DiagnosticKind, public message: string, public ast: AST) {}\n}\n\n// AstType calculatetype of the ast given AST element.\nexport class AstType implements AstVisitor {\n  public diagnostics: TypeDiagnostic[];\n\n  constructor(\n      private scope: SymbolTable, private query: SymbolQuery,\n      private context: ExpressionDiagnosticsContext) {}\n\n  getType(ast: AST): Symbol { return ast.visit(this); }\n\n  getDiagnostics(ast: AST): TypeDiagnostic[] {\n    this.diagnostics = [];\n    const type: Symbol = ast.visit(this);\n    if (this.context.event && type.callable) {\n      this.reportWarning('Unexpected callable expression. Expected a method call', ast);\n    }\n    return this.diagnostics;\n  }\n\n  visitBinary(ast: Binary): Symbol {\n    // Treat undefined and null as other.\n    function normalize(kind: BuiltinType, other: BuiltinType): BuiltinType {\n      switch (kind) {\n        case BuiltinType.Undefined:\n        case BuiltinType.Null:\n          return normalize(other, BuiltinType.Other);\n      }\n      return kind;\n    }\n\n    const getType = (ast: AST, operation: string): Symbol => {\n      const type = this.getType(ast);\n      if (type.nullable) {\n        switch (operation) {\n          case '&&':\n          case '||':\n          case '==':\n          case '!=':\n          case '===':\n          case '!==':\n            // Nullable allowed.\n            break;\n          default:\n            this.reportError(`The expression might be null`, ast);\n            break;\n        }\n        return this.query.getNonNullableType(type);\n      }\n      return type;\n    };\n\n    const leftType = getType(ast.left, ast.operation);\n    const rightType = getType(ast.right, ast.operation);\n    const leftRawKind = this.query.getTypeKind(leftType);\n    const rightRawKind = this.query.getTypeKind(rightType);\n    const leftKind = normalize(leftRawKind, rightRawKind);\n    const rightKind = normalize(rightRawKind, leftRawKind);\n\n    // The following swtich implements operator typing similar to the\n    // type production tables in the TypeScript specification.\n    // https://github.com/Microsoft/TypeScript/blob/v1.8.10/doc/spec.md#4.19\n    const operKind = leftKind << 8 | rightKind;\n    switch (ast.operation) {\n      case '*':\n      case '/':\n      case '%':\n      case '-':\n      case '<<':\n      case '>>':\n      case '>>>':\n      case '&':\n      case '^':\n      case '|':\n        switch (operKind) {\n          case BuiltinType.Any << 8 | BuiltinType.Any:\n          case BuiltinType.Number << 8 | BuiltinType.Any:\n          case BuiltinType.Any << 8 | BuiltinType.Number:\n          case BuiltinType.Number << 8 | BuiltinType.Number:\n            return this.query.getBuiltinType(BuiltinType.Number);\n          default:\n            let errorAst = ast.left;\n            switch (leftKind) {\n              case BuiltinType.Any:\n              case BuiltinType.Number:\n                errorAst = ast.right;\n                break;\n            }\n            return this.reportError('Expected a numeric type', errorAst);\n        }\n      case '+':\n        switch (operKind) {\n          case BuiltinType.Any << 8 | BuiltinType.Any:\n          case BuiltinType.Any << 8 | BuiltinType.Boolean:\n          case BuiltinType.Any << 8 | BuiltinType.Number:\n          case BuiltinType.Any << 8 | BuiltinType.Other:\n          case BuiltinType.Boolean << 8 | BuiltinType.Any:\n          case BuiltinType.Number << 8 | BuiltinType.Any:\n          case BuiltinType.Other << 8 | BuiltinType.Any:\n            return this.anyType;\n          case BuiltinType.Any << 8 | BuiltinType.String:\n          case BuiltinType.Boolean << 8 | BuiltinType.String:\n          case BuiltinType.Number << 8 | BuiltinType.String:\n          case BuiltinType.String << 8 | BuiltinType.Any:\n          case BuiltinType.String << 8 | BuiltinType.Boolean:\n          case BuiltinType.String << 8 | BuiltinType.Number:\n          case BuiltinType.String << 8 | BuiltinType.String:\n          case BuiltinType.String << 8 | BuiltinType.Other:\n          case BuiltinType.Other << 8 | BuiltinType.String:\n            return this.query.getBuiltinType(BuiltinType.String);\n          case BuiltinType.Number << 8 | BuiltinType.Number:\n            return this.query.getBuiltinType(BuiltinType.Number);\n          case BuiltinType.Boolean << 8 | BuiltinType.Number:\n          case BuiltinType.Other << 8 | BuiltinType.Number:\n            return this.reportError('Expected a number type', ast.left);\n          case BuiltinType.Number << 8 | BuiltinType.Boolean:\n          case BuiltinType.Number << 8 | BuiltinType.Other:\n            return this.reportError('Expected a number type', ast.right);\n          default:\n            return this.reportError('Expected operands to be a string or number type', ast);\n        }\n      case '>':\n      case '<':\n      case '<=':\n      case '>=':\n      case '==':\n      case '!=':\n      case '===':\n      case '!==':\n        switch (operKind) {\n          case BuiltinType.Any << 8 | BuiltinType.Any:\n          case BuiltinType.Any << 8 | BuiltinType.Boolean:\n          case BuiltinType.Any << 8 | BuiltinType.Number:\n          case BuiltinType.Any << 8 | BuiltinType.String:\n          case BuiltinType.Any << 8 | BuiltinType.Other:\n          case BuiltinType.Boolean << 8 | BuiltinType.Any:\n          case BuiltinType.Boolean << 8 | BuiltinType.Boolean:\n          case BuiltinType.Number << 8 | BuiltinType.Any:\n          case BuiltinType.Number << 8 | BuiltinType.Number:\n          case BuiltinType.String << 8 | BuiltinType.Any:\n          case BuiltinType.String << 8 | BuiltinType.String:\n          case BuiltinType.Other << 8 | BuiltinType.Any:\n          case BuiltinType.Other << 8 | BuiltinType.Other:\n            return this.query.getBuiltinType(BuiltinType.Boolean);\n          default:\n            return this.reportError('Expected the operants to be of similar type or any', ast);\n        }\n      case '&&':\n        return rightType;\n      case '||':\n        return this.query.getTypeUnion(leftType, rightType);\n    }\n\n    return this.reportError(`Unrecognized operator ${ast.operation}`, ast);\n  }\n\n  visitChain(ast: Chain) {\n    if (this.diagnostics) {\n      // If we are producing diagnostics, visit the children\n      visitAstChildren(ast, this);\n    }\n    // The type of a chain is always undefined.\n    return this.query.getBuiltinType(BuiltinType.Undefined);\n  }\n\n  visitConditional(ast: Conditional) {\n    // The type of a conditional is the union of the true and false conditions.\n    if (this.diagnostics) {\n      visitAstChildren(ast, this);\n    }\n    return this.query.getTypeUnion(this.getType(ast.trueExp), this.getType(ast.falseExp));\n  }\n\n  visitFunctionCall(ast: FunctionCall) {\n    // The type of a function call is the return type of the selected signature.\n    // The signature is selected based on the types of the arguments. Angular doesn't\n    // support contextual typing of arguments so this is simpler than TypeScript's\n    // version.\n    const args = ast.args.map(arg => this.getType(arg));\n    const target = this.getType(ast.target !);\n    if (!target || !target.callable) return this.reportError('Call target is not callable', ast);\n    const signature = target.selectSignature(args);\n    if (signature) return signature.result;\n    // TODO: Consider a better error message here.\n    return this.reportError('Unable no compatible signature found for call', ast);\n  }\n\n  visitImplicitReceiver(ast: ImplicitReceiver): Symbol {\n    const _this = this;\n    // Return a pseudo-symbol for the implicit receiver.\n    // The members of the implicit receiver are what is defined by the\n    // scope passed into this class.\n    return {\n      name: '$implict',\n      kind: 'component',\n      language: 'ng-template',\n      type: undefined,\n      container: undefined,\n      callable: false,\n      nullable: false,\n      public: true,\n      definition: undefined,\n      members(): SymbolTable{return _this.scope;},\n      signatures(): Signature[]{return [];},\n      selectSignature(types): Signature | undefined{return undefined;},\n      indexed(argument): Symbol | undefined{return undefined;}\n    };\n  }\n\n  visitInterpolation(ast: Interpolation): Symbol {\n    // If we are producing diagnostics, visit the children.\n    if (this.diagnostics) {\n      visitAstChildren(ast, this);\n    }\n    return this.undefinedType;\n  }\n\n  visitKeyedRead(ast: KeyedRead): Symbol {\n    const targetType = this.getType(ast.obj);\n    const keyType = this.getType(ast.key);\n    const result = targetType.indexed(keyType);\n    return result || this.anyType;\n  }\n\n  visitKeyedWrite(ast: KeyedWrite): Symbol {\n    // The write of a type is the type of the value being written.\n    return this.getType(ast.value);\n  }\n\n  visitLiteralArray(ast: LiteralArray): Symbol {\n    // A type literal is an array type of the union of the elements\n    return this.query.getArrayType(\n        this.query.getTypeUnion(...ast.expressions.map(element => this.getType(element))));\n  }\n\n  visitLiteralMap(ast: LiteralMap): Symbol {\n    // If we are producing diagnostics, visit the children\n    if (this.diagnostics) {\n      visitAstChildren(ast, this);\n    }\n    // TODO: Return a composite type.\n    return this.anyType;\n  }\n\n  visitLiteralPrimitive(ast: LiteralPrimitive) {\n    // The type of a literal primitive depends on the value of the literal.\n    switch (ast.value) {\n      case true:\n      case false:\n        return this.query.getBuiltinType(BuiltinType.Boolean);\n      case null:\n        return this.query.getBuiltinType(BuiltinType.Null);\n      case undefined:\n        return this.query.getBuiltinType(BuiltinType.Undefined);\n      default:\n        switch (typeof ast.value) {\n          case 'string':\n            return this.query.getBuiltinType(BuiltinType.String);\n          case 'number':\n            return this.query.getBuiltinType(BuiltinType.Number);\n          default:\n            return this.reportError('Unrecognized primitive', ast);\n        }\n    }\n  }\n\n  visitMethodCall(ast: MethodCall) {\n    return this.resolveMethodCall(this.getType(ast.receiver), ast);\n  }\n\n  visitPipe(ast: BindingPipe) {\n    // The type of a pipe node is the return type of the pipe's transform method. The table returned\n    // by getPipes() is expected to contain symbols with the corresponding transform method type.\n    const pipe = this.query.getPipes().get(ast.name);\n    if (!pipe) return this.reportError(`No pipe by the name ${ast.name} found`, ast);\n    const expType = this.getType(ast.exp);\n    const signature =\n        pipe.selectSignature([expType].concat(ast.args.map(arg => this.getType(arg))));\n    if (!signature) return this.reportError('Unable to resolve signature for pipe invocation', ast);\n    return signature.result;\n  }\n\n  visitPrefixNot(ast: PrefixNot) {\n    // The type of a prefix ! is always boolean.\n    return this.query.getBuiltinType(BuiltinType.Boolean);\n  }\n\n  visitNonNullAssert(ast: NonNullAssert) {\n    const expressionType = this.getType(ast.expression);\n    return this.query.getNonNullableType(expressionType);\n  }\n\n  visitPropertyRead(ast: PropertyRead) {\n    return this.resolvePropertyRead(this.getType(ast.receiver), ast);\n  }\n\n  visitPropertyWrite(ast: PropertyWrite) {\n    // The type of a write is the type of the value being written.\n    return this.getType(ast.value);\n  }\n\n  visitQuote(ast: Quote) {\n    // The type of a quoted expression is any.\n    return this.query.getBuiltinType(BuiltinType.Any);\n  }\n\n  visitSafeMethodCall(ast: SafeMethodCall) {\n    return this.resolveMethodCall(this.query.getNonNullableType(this.getType(ast.receiver)), ast);\n  }\n\n  visitSafePropertyRead(ast: SafePropertyRead) {\n    return this.resolvePropertyRead(this.query.getNonNullableType(this.getType(ast.receiver)), ast);\n  }\n\n  private _anyType: Symbol;\n  private get anyType(): Symbol {\n    let result = this._anyType;\n    if (!result) {\n      result = this._anyType = this.query.getBuiltinType(BuiltinType.Any);\n    }\n    return result;\n  }\n\n  private _undefinedType: Symbol;\n  private get undefinedType(): Symbol {\n    let result = this._undefinedType;\n    if (!result) {\n      result = this._undefinedType = this.query.getBuiltinType(BuiltinType.Undefined);\n    }\n    return result;\n  }\n\n  private resolveMethodCall(receiverType: Symbol, ast: SafeMethodCall|MethodCall) {\n    if (this.isAny(receiverType)) {\n      return this.anyType;\n    }\n\n    // The type of a method is the selected methods result type.\n    const method = receiverType.members().get(ast.name);\n    if (!method) return this.reportError(`Unknown method '${ast.name}'`, ast);\n    if (!method.type) return this.reportError(`Could not find a type for '${ast.name}'`, ast);\n    if (!method.type.callable) return this.reportError(`Member '${ast.name}' is not callable`, ast);\n    const signature = method.type.selectSignature(ast.args.map(arg => this.getType(arg)));\n    if (!signature)\n      return this.reportError(`Unable to resolve signature for call of method ${ast.name}`, ast);\n    return signature.result;\n  }\n\n  private resolvePropertyRead(receiverType: Symbol, ast: SafePropertyRead|PropertyRead) {\n    if (this.isAny(receiverType)) {\n      return this.anyType;\n    }\n\n    // The type of a property read is the seelcted member's type.\n    const member = receiverType.members().get(ast.name);\n    if (!member) {\n      let receiverInfo = receiverType.name;\n      if (receiverInfo == '$implict') {\n        receiverInfo =\n            'The component declaration, template variable declarations, and element references do';\n      } else if (receiverType.nullable) {\n        return this.reportError(`The expression might be null`, ast.receiver);\n      } else {\n        receiverInfo = `'${receiverInfo}' does`;\n      }\n      return this.reportError(\n          `Identifier '${ast.name}' is not defined. ${receiverInfo} not contain such a member`,\n          ast);\n    }\n    if (!member.public) {\n      let receiverInfo = receiverType.name;\n      if (receiverInfo == '$implict') {\n        receiverInfo = 'the component';\n      } else {\n        receiverInfo = `'${receiverInfo}'`;\n      }\n      this.reportWarning(\n          `Identifier '${ast.name}' refers to a private member of ${receiverInfo}`, ast);\n    }\n    return member.type;\n  }\n\n  private reportError(message: string, ast: AST): Symbol {\n    if (this.diagnostics) {\n      this.diagnostics.push(new TypeDiagnostic(DiagnosticKind.Error, message, ast));\n    }\n    return this.anyType;\n  }\n\n  private reportWarning(message: string, ast: AST): Symbol {\n    if (this.diagnostics) {\n      this.diagnostics.push(new TypeDiagnostic(DiagnosticKind.Warning, message, ast));\n    }\n    return this.anyType;\n  }\n\n  private isAny(symbol: Symbol): boolean {\n    return !symbol || this.query.getTypeKind(symbol) == BuiltinType.Any ||\n        (!!symbol.type && this.isAny(symbol.type));\n  }\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AST, AstPath, Attribute, BoundDirectivePropertyAst, BoundElementPropertyAst, BoundEventAst, BoundTextAst, CompileDirectiveSummary, CompileTypeMetadata, DirectiveAst, ElementAst, EmbeddedTemplateAst, Node, ParseSourceSpan, RecursiveTemplateAstVisitor, ReferenceAst, TemplateAst, TemplateAstPath, VariableAst, findNode, identifierName, templateVisitAll, tokenReference} from '@angular/compiler';\n\nimport {AstType, DiagnosticKind, ExpressionDiagnosticsContext, TypeDiagnostic} from './expression_type';\nimport {BuiltinType, Definition, Span, Symbol, SymbolDeclaration, SymbolQuery, SymbolTable} from './symbols';\n\nexport interface DiagnosticTemplateInfo {\n  fileName?: string;\n  offset: number;\n  query: SymbolQuery;\n  members: SymbolTable;\n  htmlAst: Node[];\n  templateAst: TemplateAst[];\n}\n\nexport interface ExpressionDiagnostic {\n  message: string;\n  span: Span;\n  kind: DiagnosticKind;\n}\n\nexport function getTemplateExpressionDiagnostics(info: DiagnosticTemplateInfo):\n    ExpressionDiagnostic[] {\n  const visitor = new ExpressionDiagnosticsVisitor(\n      info, (path: TemplateAstPath, includeEvent: boolean) =>\n                getExpressionScope(info, path, includeEvent));\n  templateVisitAll(visitor, info.templateAst);\n  return visitor.diagnostics;\n}\n\nexport function getExpressionDiagnostics(\n    scope: SymbolTable, ast: AST, query: SymbolQuery,\n    context: ExpressionDiagnosticsContext = {}): TypeDiagnostic[] {\n  const analyzer = new AstType(scope, query, context);\n  analyzer.getDiagnostics(ast);\n  return analyzer.diagnostics;\n}\n\nfunction getReferences(info: DiagnosticTemplateInfo): SymbolDeclaration[] {\n  const result: SymbolDeclaration[] = [];\n\n  function processReferences(references: ReferenceAst[]) {\n    for (const reference of references) {\n      let type: Symbol|undefined = undefined;\n      if (reference.value) {\n        type = info.query.getTypeSymbol(tokenReference(reference.value));\n      }\n      result.push({\n        name: reference.name,\n        kind: 'reference',\n        type: type || info.query.getBuiltinType(BuiltinType.Any),\n        get definition() { return getDefinitionOf(info, reference); }\n      });\n    }\n  }\n\n  const visitor = new class extends RecursiveTemplateAstVisitor {\n    visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any {\n      super.visitEmbeddedTemplate(ast, context);\n      processReferences(ast.references);\n    }\n    visitElement(ast: ElementAst, context: any): any {\n      super.visitElement(ast, context);\n      processReferences(ast.references);\n    }\n  };\n\n  templateVisitAll(visitor, info.templateAst);\n\n  return result;\n}\n\nfunction getDefinitionOf(info: DiagnosticTemplateInfo, ast: TemplateAst): Definition|undefined {\n  if (info.fileName) {\n    const templateOffset = info.offset;\n    return [{\n      fileName: info.fileName,\n      span: {\n        start: ast.sourceSpan.start.offset + templateOffset,\n        end: ast.sourceSpan.end.offset + templateOffset\n      }\n    }];\n  }\n}\n\nfunction getVarDeclarations(\n    info: DiagnosticTemplateInfo, path: TemplateAstPath): SymbolDeclaration[] {\n  const result: SymbolDeclaration[] = [];\n\n  let current = path.tail;\n  while (current) {\n    if (current instanceof EmbeddedTemplateAst) {\n      for (const variable of current.variables) {\n        const name = variable.name;\n\n        // Find the first directive with a context.\n        const context =\n            current.directives.map(d => info.query.getTemplateContext(d.directive.type.reference))\n                .find(c => !!c);\n\n        // Determine the type of the context field referenced by variable.value.\n        let type: Symbol|undefined = undefined;\n        if (context) {\n          const value = context.get(variable.value);\n          if (value) {\n            type = value.type !;\n            let kind = info.query.getTypeKind(type);\n            if (kind === BuiltinType.Any || kind == BuiltinType.Unbound) {\n              // The any type is not very useful here. For special cases, such as ngFor, we can do\n              // better.\n              type = refinedVariableType(type, info, current);\n            }\n          }\n        }\n        if (!type) {\n          type = info.query.getBuiltinType(BuiltinType.Any);\n        }\n        result.push({\n          name,\n          kind: 'variable', type, get definition() { return getDefinitionOf(info, variable); }\n        });\n      }\n    }\n    current = path.parentOf(current);\n  }\n\n  return result;\n}\n\nfunction refinedVariableType(\n    type: Symbol, info: DiagnosticTemplateInfo, templateElement: EmbeddedTemplateAst): Symbol {\n  // Special case the ngFor directive\n  const ngForDirective = templateElement.directives.find(d => {\n    const name = identifierName(d.directive.type);\n    return name == 'NgFor' || name == 'NgForOf';\n  });\n  if (ngForDirective) {\n    const ngForOfBinding = ngForDirective.inputs.find(i => i.directiveName == 'ngForOf');\n    if (ngForOfBinding) {\n      const bindingType = new AstType(info.members, info.query, {}).getType(ngForOfBinding.value);\n      if (bindingType) {\n        const result = info.query.getElementType(bindingType);\n        if (result) {\n          return result;\n        }\n      }\n    }\n  }\n\n  // We can't do better, return any\n  return info.query.getBuiltinType(BuiltinType.Any);\n}\n\nfunction getEventDeclaration(info: DiagnosticTemplateInfo, includeEvent?: boolean) {\n  let result: SymbolDeclaration[] = [];\n  if (includeEvent) {\n    // TODO: Determine the type of the event parameter based on the Observable<T> or EventEmitter<T>\n    // of the event.\n    result = [{name: '$event', kind: 'variable', type: info.query.getBuiltinType(BuiltinType.Any)}];\n  }\n  return result;\n}\n\nexport function getExpressionScope(\n    info: DiagnosticTemplateInfo, path: TemplateAstPath, includeEvent: boolean): SymbolTable {\n  let result = info.members;\n  const references = getReferences(info);\n  const variables = getVarDeclarations(info, path);\n  const events = getEventDeclaration(info, includeEvent);\n  if (references.length || variables.length || events.length) {\n    const referenceTable = info.query.createSymbolTable(references);\n    const variableTable = info.query.createSymbolTable(variables);\n    const eventsTable = info.query.createSymbolTable(events);\n    result = info.query.mergeSymbolTable([result, referenceTable, variableTable, eventsTable]);\n  }\n  return result;\n}\n\nclass ExpressionDiagnosticsVisitor extends RecursiveTemplateAstVisitor {\n  private path: TemplateAstPath;\n  private directiveSummary: CompileDirectiveSummary;\n\n  diagnostics: ExpressionDiagnostic[] = [];\n\n  constructor(\n      private info: DiagnosticTemplateInfo,\n      private getExpressionScope: (path: TemplateAstPath, includeEvent: boolean) => SymbolTable) {\n    super();\n    this.path = new AstPath<TemplateAst>([]);\n  }\n\n  visitDirective(ast: DirectiveAst, context: any): any {\n    // Override the default child visitor to ignore the host properties of a directive.\n    if (ast.inputs && ast.inputs.length) {\n      templateVisitAll(this, ast.inputs, context);\n    }\n  }\n\n  visitBoundText(ast: BoundTextAst): void {\n    this.push(ast);\n    this.diagnoseExpression(ast.value, ast.sourceSpan.start.offset, false);\n    this.pop();\n  }\n\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst): void {\n    this.push(ast);\n    this.diagnoseExpression(ast.value, this.attributeValueLocation(ast), false);\n    this.pop();\n  }\n\n  visitElementProperty(ast: BoundElementPropertyAst): void {\n    this.push(ast);\n    this.diagnoseExpression(ast.value, this.attributeValueLocation(ast), false);\n    this.pop();\n  }\n\n  visitEvent(ast: BoundEventAst): void {\n    this.push(ast);\n    this.diagnoseExpression(ast.handler, this.attributeValueLocation(ast), true);\n    this.pop();\n  }\n\n  visitVariable(ast: VariableAst): void {\n    const directive = this.directiveSummary;\n    if (directive && ast.value) {\n      const context = this.info.query.getTemplateContext(directive.type.reference) !;\n      if (context && !context.has(ast.value)) {\n        if (ast.value === '$implicit') {\n          this.reportError(\n              'The template context does not have an implicit value', spanOf(ast.sourceSpan));\n        } else {\n          this.reportError(\n              `The template context does not defined a member called '${ast.value}'`,\n              spanOf(ast.sourceSpan));\n        }\n      }\n    }\n  }\n\n  visitElement(ast: ElementAst, context: any): void {\n    this.push(ast);\n    super.visitElement(ast, context);\n    this.pop();\n  }\n\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any {\n    const previousDirectiveSummary = this.directiveSummary;\n\n    this.push(ast);\n\n    // Find directive that references this template\n    this.directiveSummary =\n        ast.directives.map(d => d.directive).find(d => hasTemplateReference(d.type)) !;\n\n    // Process children\n    super.visitEmbeddedTemplate(ast, context);\n\n    this.pop();\n\n    this.directiveSummary = previousDirectiveSummary;\n  }\n\n  private attributeValueLocation(ast: TemplateAst) {\n    const path = findNode(this.info.htmlAst, ast.sourceSpan.start.offset);\n    const last = path.tail;\n    if (last instanceof Attribute && last.valueSpan) {\n      // Add 1 for the quote.\n      return last.valueSpan.start.offset + 1;\n    }\n    return ast.sourceSpan.start.offset;\n  }\n\n  private diagnoseExpression(ast: AST, offset: number, includeEvent: boolean) {\n    const scope = this.getExpressionScope(this.path, includeEvent);\n    this.diagnostics.push(...getExpressionDiagnostics(scope, ast, this.info.query, {\n                            event: includeEvent\n                          }).map(d => ({\n                                   span: offsetSpan(d.ast.span, offset + this.info.offset),\n                                   kind: d.kind,\n                                   message: d.message\n                                 })));\n  }\n\n  private push(ast: TemplateAst) { this.path.push(ast); }\n\n  private pop() { this.path.pop(); }\n\n  private reportError(message: string, span: Span|undefined) {\n    if (span) {\n      this.diagnostics.push(\n          {span: offsetSpan(span, this.info.offset), kind: DiagnosticKind.Error, message});\n    }\n  }\n\n  private reportWarning(message: string, span: Span) {\n    this.diagnostics.push(\n        {span: offsetSpan(span, this.info.offset), kind: DiagnosticKind.Warning, message});\n  }\n}\n\nfunction hasTemplateReference(type: CompileTypeMetadata): boolean {\n  if (type.diDeps) {\n    for (let diDep of type.diDeps) {\n      if (diDep.token && diDep.token.identifier &&\n          identifierName(diDep.token !.identifier !) == 'TemplateRef')\n        return true;\n    }\n  }\n  return false;\n}\n\nfunction offsetSpan(span: Span, amount: number): Span {\n  return {start: span.start + amount, end: span.end + amount};\n}\n\nfunction spanOf(sourceSpan: ParseSourceSpan): Span {\n  return {start: sourceSpan.start.offset, end: sourceSpan.end.offset};\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts a `string` version into an array of numbers\n * @example\n * toNumbers('2.0.1'); // returns [2, 0, 1]\n */\nexport function toNumbers(value: string): number[] {\n  return value.split('.').map(Number);\n}\n\n/**\n * Compares two arrays of positive numbers with lexicographical order in mind.\n *\n * However - unlike lexicographical order - for arrays of different length we consider:\n * [1, 2, 3] = [1, 2, 3, 0] instead of [1, 2, 3] < [1, 2, 3, 0]\n *\n * @param a The 'left hand' array in the comparison test\n * @param b The 'right hand' in the comparison test\n * @returns {-1|0|1} The comparison result: 1 if a is greater, -1 if b is greater, 0 is the two\n * arrays are equals\n */\nexport function compareNumbers(a: number[], b: number[]): -1|0|1 {\n  const max = Math.max(a.length, b.length);\n  const min = Math.min(a.length, b.length);\n\n  for (let i = 0; i < min; i++) {\n    if (a[i] > b[i]) return 1;\n    if (a[i] < b[i]) return -1;\n  }\n\n  if (min !== max) {\n    const longestArray = a.length === max ? a : b;\n\n    // The result to return in case the to arrays are considered different (1 if a is greater,\n    // -1 if b is greater)\n    const comparisonResult = a.length === max ? 1 : -1;\n\n    // Check that at least one of the remaining elements is greater than 0 to consider that the two\n    // arrays are different (e.g. [1, 0] and [1] are considered the same but not [1, 0, 1] and [1])\n    for (let i = min; i < max; i++) {\n      if (longestArray[i] > 0) {\n        return comparisonResult;\n      }\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Checks if a TypeScript version is:\n * - greater or equal than the provided `low` version,\n * - lower or equal than an optional `high` version.\n *\n * @param version The TypeScript version\n * @param low The minimum version\n * @param high The maximum version\n */\nexport function isVersionBetween(version: string, low: string, high?: string): boolean {\n  const tsNumbers = toNumbers(version);\n  if (high !== undefined) {\n    return compareNumbers(toNumbers(low), tsNumbers) <= 0 &&\n        compareNumbers(toNumbers(high), tsNumbers) >= 0;\n  }\n  return compareNumbers(toNumbers(low), tsNumbers) <= 0;\n}\n\n/**\n * Compares two versions\n *\n * @param v1 The 'left hand' version in the comparison test\n * @param v2 The 'right hand' version in the comparison test\n * @returns {-1|0|1} The comparison result: 1 if v1 is greater, -1 if v2 is greater, 0 is the two\n * versions are equals\n */\nexport function compareVersions(v1: string, v2: string): -1|0|1 {\n  return compareNumbers(toNumbers(v1), toNumbers(v2));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AotSummaryResolver, CompileMetadataResolver, CompilePipeSummary, CompilerConfig, DEFAULT_INTERPOLATION_CONFIG, DirectiveNormalizer, DirectiveResolver, DomElementSchemaRegistry, HtmlParser, InterpolationConfig, NgAnalyzedModules, NgModuleResolver, ParseTreeResult, PipeResolver, ResourceLoader, StaticReflector, StaticSymbol, StaticSymbolCache, StaticSymbolResolver, SummaryResolver} from '@angular/compiler';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {BuiltinType, DeclarationKind, Definition, PipeInfo, Pipes, Signature, Span, Symbol, SymbolDeclaration, SymbolQuery, SymbolTable} from './symbols';\nimport {isVersionBetween} from './typescript_version';\n\n// In TypeScript 2.1 these flags moved\n// These helpers work for both 2.0 and 2.1.\nconst isPrivate = (ts as any).ModifierFlags ?\n    ((node: ts.Node) =>\n         !!((ts as any).getCombinedModifierFlags(node) & (ts as any).ModifierFlags.Private)) :\n    ((node: ts.Node) => !!(node.flags & (ts as any).NodeFlags.Private));\n\nconst isReferenceType = (ts as any).ObjectFlags ?\n    ((type: ts.Type) =>\n         !!(type.flags & (ts as any).TypeFlags.Object &&\n            (type as any).objectFlags & (ts as any).ObjectFlags.Reference)) :\n    ((type: ts.Type) => !!(type.flags & (ts as any).TypeFlags.Reference));\n\ninterface TypeContext {\n  node: ts.Node;\n  program: ts.Program;\n  checker: ts.TypeChecker;\n}\n\nexport function getSymbolQuery(\n    program: ts.Program, checker: ts.TypeChecker, source: ts.SourceFile,\n    fetchPipes: () => SymbolTable): SymbolQuery {\n  return new TypeScriptSymbolQuery(program, checker, source, fetchPipes);\n}\n\nexport function getClassMembers(\n    program: ts.Program, checker: ts.TypeChecker, staticSymbol: StaticSymbol): SymbolTable|\n    undefined {\n  const declaration = getClassFromStaticSymbol(program, staticSymbol);\n  if (declaration) {\n    const type = checker.getTypeAtLocation(declaration);\n    const node = program.getSourceFile(staticSymbol.filePath);\n    if (node) {\n      return new TypeWrapper(type, {node, program, checker}).members();\n    }\n  }\n}\n\nexport function getClassMembersFromDeclaration(\n    program: ts.Program, checker: ts.TypeChecker, source: ts.SourceFile,\n    declaration: ts.ClassDeclaration) {\n  const type = checker.getTypeAtLocation(declaration);\n  return new TypeWrapper(type, {node: source, program, checker}).members();\n}\n\nexport function getClassFromStaticSymbol(\n    program: ts.Program, type: StaticSymbol): ts.ClassDeclaration|undefined {\n  const source = program.getSourceFile(type.filePath);\n  if (source) {\n    return ts.forEachChild(source, child => {\n      if (child.kind === ts.SyntaxKind.ClassDeclaration) {\n        const classDeclaration = child as ts.ClassDeclaration;\n        if (classDeclaration.name != null && classDeclaration.name.text === type.name) {\n          return classDeclaration;\n        }\n      }\n    }) as(ts.ClassDeclaration | undefined);\n  }\n\n  return undefined;\n}\n\nexport function getPipesTable(\n    source: ts.SourceFile, program: ts.Program, checker: ts.TypeChecker,\n    pipes: CompilePipeSummary[]): SymbolTable {\n  return new PipesTable(pipes, {program, checker, node: source});\n}\n\nclass TypeScriptSymbolQuery implements SymbolQuery {\n  private typeCache = new Map<BuiltinType, Symbol>();\n  private pipesCache: SymbolTable;\n\n  constructor(\n      private program: ts.Program, private checker: ts.TypeChecker, private source: ts.SourceFile,\n      private fetchPipes: () => SymbolTable) {}\n\n  getTypeKind(symbol: Symbol): BuiltinType { return typeKindOf(this.getTsTypeOf(symbol)); }\n\n  getBuiltinType(kind: BuiltinType): Symbol {\n    let result = this.typeCache.get(kind);\n    if (!result) {\n      const type = getBuiltinTypeFromTs(\n          kind, {checker: this.checker, node: this.source, program: this.program});\n      result =\n          new TypeWrapper(type, {program: this.program, checker: this.checker, node: this.source});\n      this.typeCache.set(kind, result);\n    }\n    return result;\n  }\n\n  getTypeUnion(...types: Symbol[]): Symbol {\n    // No API exists so return any if the types are not all the same type.\n    let result: Symbol|undefined = undefined;\n    if (types.length) {\n      result = types[0];\n      for (let i = 1; i < types.length; i++) {\n        if (types[i] != result) {\n          result = undefined;\n          break;\n        }\n      }\n    }\n    return result || this.getBuiltinType(BuiltinType.Any);\n  }\n\n  getArrayType(type: Symbol): Symbol { return this.getBuiltinType(BuiltinType.Any); }\n\n  getElementType(type: Symbol): Symbol|undefined {\n    if (type instanceof TypeWrapper) {\n      const elementType = getTypeParameterOf(type.tsType, 'Array');\n      if (elementType) {\n        return new TypeWrapper(elementType, type.context);\n      }\n    }\n  }\n\n  getNonNullableType(symbol: Symbol): Symbol {\n    if (symbol instanceof TypeWrapper && (typeof this.checker.getNonNullableType == 'function')) {\n      const tsType = symbol.tsType;\n      const nonNullableType = this.checker.getNonNullableType(tsType);\n      if (nonNullableType != tsType) {\n        return new TypeWrapper(nonNullableType, symbol.context);\n      } else if (nonNullableType == tsType) {\n        return symbol;\n      }\n    }\n    return this.getBuiltinType(BuiltinType.Any);\n  }\n\n  getPipes(): SymbolTable {\n    let result = this.pipesCache;\n    if (!result) {\n      result = this.pipesCache = this.fetchPipes();\n    }\n    return result;\n  }\n\n  getTemplateContext(type: StaticSymbol): SymbolTable|undefined {\n    const context: TypeContext = {node: this.source, program: this.program, checker: this.checker};\n    const typeSymbol = findClassSymbolInContext(type, context);\n    if (typeSymbol) {\n      const contextType = this.getTemplateRefContextType(typeSymbol);\n      if (contextType) return new SymbolWrapper(contextType, context).members();\n    }\n  }\n\n  getTypeSymbol(type: StaticSymbol): Symbol|undefined {\n    const context: TypeContext = {node: this.source, program: this.program, checker: this.checker};\n    const typeSymbol = findClassSymbolInContext(type, context);\n    return typeSymbol && new SymbolWrapper(typeSymbol, context);\n  }\n\n  createSymbolTable(symbols: SymbolDeclaration[]): SymbolTable {\n    const result = new MapSymbolTable();\n    result.addAll(symbols.map(s => new DeclaredSymbol(s)));\n    return result;\n  }\n\n  mergeSymbolTable(symbolTables: SymbolTable[]): SymbolTable {\n    const result = new MapSymbolTable();\n    for (const symbolTable of symbolTables) {\n      result.addAll(symbolTable.values());\n    }\n    return result;\n  }\n\n  getSpanAt(line: number, column: number): Span|undefined {\n    return spanAt(this.source, line, column);\n  }\n\n  private getTemplateRefContextType(typeSymbol: ts.Symbol): ts.Symbol|undefined {\n    const type = this.checker.getTypeOfSymbolAtLocation(typeSymbol, this.source);\n    const constructor = type.symbol && type.symbol.members &&\n        getFromSymbolTable(type.symbol.members !, '__constructor');\n\n    if (constructor) {\n      const constructorDeclaration = constructor.declarations ![0] as ts.ConstructorTypeNode;\n      for (const parameter of constructorDeclaration.parameters) {\n        const type = this.checker.getTypeAtLocation(parameter.type !);\n        if (type.symbol !.name == 'TemplateRef' && isReferenceType(type)) {\n          const typeReference = type as ts.TypeReference;\n          if (typeReference.typeArguments && typeReference.typeArguments.length === 1) {\n            return typeReference.typeArguments[0].symbol;\n          }\n        }\n      }\n    }\n  }\n\n  private getTsTypeOf(symbol: Symbol): ts.Type|undefined {\n    const type = this.getTypeWrapper(symbol);\n    return type && type.tsType;\n  }\n\n  private getTypeWrapper(symbol: Symbol): TypeWrapper|undefined {\n    let type: TypeWrapper|undefined = undefined;\n    if (symbol instanceof TypeWrapper) {\n      type = symbol;\n    } else if (symbol.type instanceof TypeWrapper) {\n      type = symbol.type;\n    }\n    return type;\n  }\n}\n\nfunction typeCallable(type: ts.Type): boolean {\n  const signatures = type.getCallSignatures();\n  return signatures && signatures.length != 0;\n}\n\nfunction signaturesOf(type: ts.Type, context: TypeContext): Signature[] {\n  return type.getCallSignatures().map(s => new SignatureWrapper(s, context));\n}\n\nfunction selectSignature(type: ts.Type, context: TypeContext, types: Symbol[]): Signature|\n    undefined {\n  // TODO: Do a better job of selecting the right signature.\n  const signatures = type.getCallSignatures();\n  return signatures.length ? new SignatureWrapper(signatures[0], context) : undefined;\n}\n\nclass TypeWrapper implements Symbol {\n  constructor(public tsType: ts.Type, public context: TypeContext) {\n    if (!tsType) {\n      throw Error('Internal: null type');\n    }\n  }\n\n  get name(): string {\n    const symbol = this.tsType.symbol;\n    return (symbol && symbol.name) || '<anonymous>';\n  }\n\n  public readonly kind: DeclarationKind = 'type';\n\n  public readonly language: string = 'typescript';\n\n  public readonly type: Symbol|undefined = undefined;\n\n  public readonly container: Symbol|undefined = undefined;\n\n  public readonly public: boolean = true;\n\n  get callable(): boolean { return typeCallable(this.tsType); }\n\n  get nullable(): boolean {\n    return this.context.checker.getNonNullableType(this.tsType) != this.tsType;\n  }\n\n  get definition(): Definition|undefined {\n    const symbol = this.tsType.getSymbol();\n    return symbol ? definitionFromTsSymbol(symbol) : undefined;\n  }\n\n  members(): SymbolTable {\n    return new SymbolTableWrapper(this.tsType.getProperties(), this.context);\n  }\n\n  signatures(): Signature[] { return signaturesOf(this.tsType, this.context); }\n\n  selectSignature(types: Symbol[]): Signature|undefined {\n    return selectSignature(this.tsType, this.context, types);\n  }\n\n  indexed(argument: Symbol): Symbol|undefined { return undefined; }\n}\n\nclass SymbolWrapper implements Symbol {\n  private symbol: ts.Symbol;\n  private _tsType: ts.Type;\n  private _members: SymbolTable;\n\n  public readonly nullable: boolean = false;\n  public readonly language: string = 'typescript';\n\n  constructor(symbol: ts.Symbol, private context: TypeContext) {\n    this.symbol = symbol && context && (symbol.flags & ts.SymbolFlags.Alias) ?\n        context.checker.getAliasedSymbol(symbol) :\n        symbol;\n  }\n\n  get name(): string { return this.symbol.name; }\n\n  get kind(): DeclarationKind { return this.callable ? 'method' : 'property'; }\n\n  get type(): Symbol|undefined { return new TypeWrapper(this.tsType, this.context); }\n\n  get container(): Symbol|undefined { return getContainerOf(this.symbol, this.context); }\n\n  get public(): boolean {\n    // Symbols that are not explicitly made private are public.\n    return !isSymbolPrivate(this.symbol);\n  }\n\n  get callable(): boolean { return typeCallable(this.tsType); }\n\n  get definition(): Definition { return definitionFromTsSymbol(this.symbol); }\n\n  members(): SymbolTable {\n    if (!this._members) {\n      if ((this.symbol.flags & (ts.SymbolFlags.Class | ts.SymbolFlags.Interface)) != 0) {\n        const declaredType = this.context.checker.getDeclaredTypeOfSymbol(this.symbol);\n        const typeWrapper = new TypeWrapper(declaredType, this.context);\n        this._members = typeWrapper.members();\n      } else {\n        this._members = new SymbolTableWrapper(this.symbol.members !, this.context);\n      }\n    }\n    return this._members;\n  }\n\n  signatures(): Signature[] { return signaturesOf(this.tsType, this.context); }\n\n  selectSignature(types: Symbol[]): Signature|undefined {\n    return selectSignature(this.tsType, this.context, types);\n  }\n\n  indexed(argument: Symbol): Symbol|undefined { return undefined; }\n\n  private get tsType(): ts.Type {\n    let type = this._tsType;\n    if (!type) {\n      type = this._tsType =\n          this.context.checker.getTypeOfSymbolAtLocation(this.symbol, this.context.node);\n    }\n    return type;\n  }\n}\n\nclass DeclaredSymbol implements Symbol {\n  public readonly language: string = 'ng-template';\n\n  public readonly nullable: boolean = false;\n\n  public readonly public: boolean = true;\n\n  constructor(private declaration: SymbolDeclaration) {}\n\n  get name() { return this.declaration.name; }\n\n  get kind() { return this.declaration.kind; }\n\n  get container(): Symbol|undefined { return undefined; }\n\n  get type() { return this.declaration.type; }\n\n  get callable(): boolean { return this.declaration.type.callable; }\n\n\n  get definition(): Definition { return this.declaration.definition; }\n\n  members(): SymbolTable { return this.declaration.type.members(); }\n\n  signatures(): Signature[] { return this.declaration.type.signatures(); }\n\n  selectSignature(types: Symbol[]): Signature|undefined {\n    return this.declaration.type.selectSignature(types);\n  }\n\n  indexed(argument: Symbol): Symbol|undefined { return undefined; }\n}\n\nclass SignatureWrapper implements Signature {\n  constructor(private signature: ts.Signature, private context: TypeContext) {}\n\n  get arguments(): SymbolTable {\n    return new SymbolTableWrapper(this.signature.getParameters(), this.context);\n  }\n\n  get result(): Symbol { return new TypeWrapper(this.signature.getReturnType(), this.context); }\n}\n\nclass SignatureResultOverride implements Signature {\n  constructor(private signature: Signature, private resultType: Symbol) {}\n\n  get arguments(): SymbolTable { return this.signature.arguments; }\n\n  get result(): Symbol { return this.resultType; }\n}\n\n/**\n * Indicates the lower bound TypeScript version supporting `SymbolTable` as an ES6 `Map`.\n * For lower versions, `SymbolTable` is implemented as a dictionary\n */\nconst MIN_TS_VERSION_SUPPORTING_MAP = '2.2';\n\nexport const toSymbolTableFactory = (tsVersion: string) => (symbols: ts.Symbol[]) => {\n  if (isVersionBetween(tsVersion, MIN_TS_VERSION_SUPPORTING_MAP)) {\n    // ∀ Typescript version >= 2.2, `SymbolTable` is implemented as an ES6 `Map`\n    const result = new Map<string, ts.Symbol>();\n    for (const symbol of symbols) {\n      result.set(symbol.name, symbol);\n    }\n    // First, tell the compiler that `result` is of type `any`. Then, use a second type assertion\n    // to `ts.SymbolTable`.\n    // Otherwise, `Map<string, ts.Symbol>` and `ts.SymbolTable` will be considered as incompatible\n    // types by the compiler\n    return <ts.SymbolTable>(<any>result);\n  }\n\n  // ∀ Typescript version < 2.2, `SymbolTable` is implemented as a dictionary\n  const result: {[name: string]: ts.Symbol} = {};\n  for (const symbol of symbols) {\n    result[symbol.name] = symbol;\n  }\n  return <ts.SymbolTable>(<any>result);\n};\n\nfunction toSymbols(symbolTable: ts.SymbolTable | undefined): ts.Symbol[] {\n  if (!symbolTable) return [];\n\n  const table = symbolTable as any;\n\n  if (typeof table.values === 'function') {\n    return Array.from(table.values()) as ts.Symbol[];\n  }\n\n  const result: ts.Symbol[] = [];\n\n  const own = typeof table.hasOwnProperty === 'function' ?\n      (name: string) => table.hasOwnProperty(name) :\n      (name: string) => !!table[name];\n\n  for (const name in table) {\n    if (own(name)) {\n      result.push(table[name]);\n    }\n  }\n  return result;\n}\n\nclass SymbolTableWrapper implements SymbolTable {\n  private symbols: ts.Symbol[];\n  private symbolTable: ts.SymbolTable;\n\n  constructor(symbols: ts.SymbolTable|ts.Symbol[]|undefined, private context: TypeContext) {\n    symbols = symbols || [];\n\n    if (Array.isArray(symbols)) {\n      this.symbols = symbols;\n      const toSymbolTable = toSymbolTableFactory(ts.version);\n      this.symbolTable = toSymbolTable(symbols);\n    } else {\n      this.symbols = toSymbols(symbols);\n      this.symbolTable = symbols;\n    }\n  }\n\n  get size(): number { return this.symbols.length; }\n\n  get(key: string): Symbol|undefined {\n    const symbol = getFromSymbolTable(this.symbolTable, key);\n    return symbol ? new SymbolWrapper(symbol, this.context) : undefined;\n  }\n\n  has(key: string): boolean {\n    const table: any = this.symbolTable;\n    return (typeof table.has === 'function') ? table.has(key) : table[key] != null;\n  }\n\n  values(): Symbol[] { return this.symbols.map(s => new SymbolWrapper(s, this.context)); }\n}\n\nclass MapSymbolTable implements SymbolTable {\n  private map = new Map<string, Symbol>();\n  private _values: Symbol[] = [];\n\n  get size(): number { return this.map.size; }\n\n  get(key: string): Symbol|undefined { return this.map.get(key); }\n\n  add(symbol: Symbol) {\n    if (this.map.has(symbol.name)) {\n      const previous = this.map.get(symbol.name) !;\n      this._values[this._values.indexOf(previous)] = symbol;\n    }\n    this.map.set(symbol.name, symbol);\n    this._values.push(symbol);\n  }\n\n  addAll(symbols: Symbol[]) {\n    for (const symbol of symbols) {\n      this.add(symbol);\n    }\n  }\n\n  has(key: string): boolean { return this.map.has(key); }\n\n  values(): Symbol[] {\n    // Switch to this.map.values once iterables are supported by the target language.\n    return this._values;\n  }\n}\n\nclass PipesTable implements SymbolTable {\n  constructor(private pipes: CompilePipeSummary[], private context: TypeContext) {}\n\n  get size() { return this.pipes.length; }\n\n  get(key: string): Symbol|undefined {\n    const pipe = this.pipes.find(pipe => pipe.name == key);\n    if (pipe) {\n      return new PipeSymbol(pipe, this.context);\n    }\n  }\n\n  has(key: string): boolean { return this.pipes.find(pipe => pipe.name == key) != null; }\n\n  values(): Symbol[] { return this.pipes.map(pipe => new PipeSymbol(pipe, this.context)); }\n}\n\n// This matches .d.ts files that look like \".../<package-name>/<package-name>.d.ts\",\nconst INDEX_PATTERN = /[\\\\/]([^\\\\/]+)[\\\\/]\\1\\.d\\.ts$/;\n\nclass PipeSymbol implements Symbol {\n  private _tsType: ts.Type;\n  public readonly kind: DeclarationKind = 'pipe';\n  public readonly language: string = 'typescript';\n  public readonly container: Symbol|undefined = undefined;\n  public readonly callable: boolean = true;\n  public readonly nullable: boolean = false;\n  public readonly public: boolean = true;\n\n  constructor(private pipe: CompilePipeSummary, private context: TypeContext) {}\n\n  get name(): string { return this.pipe.name; }\n\n  get type(): Symbol|undefined { return new TypeWrapper(this.tsType, this.context); }\n\n  get definition(): Definition|undefined {\n    const symbol = this.tsType.getSymbol();\n    return symbol ? definitionFromTsSymbol(symbol) : undefined;\n  }\n\n  members(): SymbolTable { return EmptyTable.instance; }\n\n  signatures(): Signature[] { return signaturesOf(this.tsType, this.context); }\n\n  selectSignature(types: Symbol[]): Signature|undefined {\n    let signature = selectSignature(this.tsType, this.context, types) !;\n    if (types.length == 1) {\n      const parameterType = types[0];\n      if (parameterType instanceof TypeWrapper) {\n        let resultType: ts.Type|undefined = undefined;\n        switch (this.name) {\n          case 'async':\n            switch (parameterType.name) {\n              case 'Observable':\n              case 'Promise':\n              case 'EventEmitter':\n                resultType = getTypeParameterOf(parameterType.tsType, parameterType.name);\n                break;\n              default:\n                resultType = getBuiltinTypeFromTs(BuiltinType.Any, this.context);\n                break;\n            }\n            break;\n          case 'slice':\n            resultType = getTypeParameterOf(parameterType.tsType, 'Array');\n            break;\n        }\n        if (resultType) {\n          signature = new SignatureResultOverride(\n              signature, new TypeWrapper(resultType, parameterType.context));\n        }\n      }\n    }\n    return signature;\n  }\n\n  indexed(argument: Symbol): Symbol|undefined { return undefined; }\n\n  private get tsType(): ts.Type {\n    let type = this._tsType;\n    if (!type) {\n      const classSymbol = this.findClassSymbol(this.pipe.type.reference);\n      if (classSymbol) {\n        type = this._tsType = this.findTransformMethodType(classSymbol) !;\n      }\n      if (!type) {\n        type = this._tsType = getBuiltinTypeFromTs(BuiltinType.Any, this.context);\n      }\n    }\n    return type;\n  }\n\n  private findClassSymbol(type: StaticSymbol): ts.Symbol|undefined {\n    return findClassSymbolInContext(type, this.context);\n  }\n\n  private findTransformMethodType(classSymbol: ts.Symbol): ts.Type|undefined {\n    const classType = this.context.checker.getDeclaredTypeOfSymbol(classSymbol);\n    if (classType) {\n      const transform = classType.getProperty('transform');\n      if (transform) {\n        return this.context.checker.getTypeOfSymbolAtLocation(transform, this.context.node);\n      }\n    }\n  }\n}\n\nfunction findClassSymbolInContext(type: StaticSymbol, context: TypeContext): ts.Symbol|undefined {\n  let sourceFile = context.program.getSourceFile(type.filePath);\n  if (!sourceFile) {\n    // This handles a case where an <packageName>/index.d.ts and a <packageName>/<packageName>.d.ts\n    // are in the same directory. If we are looking for <packageName>/<packageName> and didn't\n    // find it, look for <packageName>/index.d.ts as the program might have found that instead.\n    const p = type.filePath as string;\n    const m = p.match(INDEX_PATTERN);\n    if (m) {\n      const indexVersion = path.join(path.dirname(p), 'index.d.ts');\n      sourceFile = context.program.getSourceFile(indexVersion);\n    }\n  }\n  if (sourceFile) {\n    const moduleSymbol = (sourceFile as any).module || (sourceFile as any).symbol;\n    const exports = context.checker.getExportsOfModule(moduleSymbol);\n    return (exports || []).find(symbol => symbol.name == type.name);\n  }\n}\n\nclass EmptyTable implements SymbolTable {\n  public readonly size: number = 0;\n  get(key: string): Symbol|undefined { return undefined; }\n  has(key: string): boolean { return false; }\n  values(): Symbol[] { return []; }\n  static instance = new EmptyTable();\n}\n\nfunction findTsConfig(fileName: string): string|undefined {\n  let dir = path.dirname(fileName);\n  while (fs.existsSync(dir)) {\n    const candidate = path.join(dir, 'tsconfig.json');\n    if (fs.existsSync(candidate)) return candidate;\n    const parentDir = path.dirname(dir);\n    if (parentDir === dir) break;\n    dir = parentDir;\n  }\n}\n\nfunction isBindingPattern(node: ts.Node): node is ts.BindingPattern {\n  return !!node && (node.kind === ts.SyntaxKind.ArrayBindingPattern ||\n                    node.kind === ts.SyntaxKind.ObjectBindingPattern);\n}\n\nfunction walkUpBindingElementsAndPatterns(node: ts.Node): ts.Node {\n  while (node && (node.kind === ts.SyntaxKind.BindingElement || isBindingPattern(node))) {\n    node = node.parent !;\n  }\n\n  return node;\n}\n\nfunction getCombinedNodeFlags(node: ts.Node): ts.NodeFlags {\n  node = walkUpBindingElementsAndPatterns(node);\n\n  let flags = node.flags;\n  if (node.kind === ts.SyntaxKind.VariableDeclaration) {\n    node = node.parent !;\n  }\n\n  if (node && node.kind === ts.SyntaxKind.VariableDeclarationList) {\n    flags |= node.flags;\n    node = node.parent !;\n  }\n\n  if (node && node.kind === ts.SyntaxKind.VariableStatement) {\n    flags |= node.flags;\n  }\n\n  return flags;\n}\n\nfunction isSymbolPrivate(s: ts.Symbol): boolean {\n  return !!s.valueDeclaration && isPrivate(s.valueDeclaration);\n}\n\nfunction getBuiltinTypeFromTs(kind: BuiltinType, context: TypeContext): ts.Type {\n  let type: ts.Type;\n  const checker = context.checker;\n  const node = context.node;\n  switch (kind) {\n    case BuiltinType.Any:\n      type = checker.getTypeAtLocation(setParents(\n          <ts.Node><any>{\n            kind: ts.SyntaxKind.AsExpression,\n            expression: <ts.Node>{kind: ts.SyntaxKind.TrueKeyword},\n            type: <ts.Node>{kind: ts.SyntaxKind.AnyKeyword}\n          },\n          node));\n      break;\n    case BuiltinType.Boolean:\n      type =\n          checker.getTypeAtLocation(setParents(<ts.Node>{kind: ts.SyntaxKind.TrueKeyword}, node));\n      break;\n    case BuiltinType.Null:\n      type =\n          checker.getTypeAtLocation(setParents(<ts.Node>{kind: ts.SyntaxKind.NullKeyword}, node));\n      break;\n    case BuiltinType.Number:\n      const numeric = <ts.Node>{kind: ts.SyntaxKind.NumericLiteral};\n      setParents(<any>{kind: ts.SyntaxKind.ExpressionStatement, expression: numeric}, node);\n      type = checker.getTypeAtLocation(numeric);\n      break;\n    case BuiltinType.String:\n      type = checker.getTypeAtLocation(\n          setParents(<ts.Node>{kind: ts.SyntaxKind.NoSubstitutionTemplateLiteral}, node));\n      break;\n    case BuiltinType.Undefined:\n      type = checker.getTypeAtLocation(setParents(\n          <ts.Node><any>{\n            kind: ts.SyntaxKind.VoidExpression,\n            expression: <ts.Node>{kind: ts.SyntaxKind.NumericLiteral}\n          },\n          node));\n      break;\n    default:\n      throw new Error(`Internal error, unhandled literal kind ${kind}:${BuiltinType[kind]}`);\n  }\n  return type;\n}\n\nfunction setParents<T extends ts.Node>(node: T, parent: ts.Node): T {\n  node.parent = parent;\n  ts.forEachChild(node, child => setParents(child, node));\n  return node;\n}\n\nfunction spanOf(node: ts.Node): Span {\n  return {start: node.getStart(), end: node.getEnd()};\n}\n\nfunction shrink(span: Span, offset?: number) {\n  if (offset == null) offset = 1;\n  return {start: span.start + offset, end: span.end - offset};\n}\n\nfunction spanAt(sourceFile: ts.SourceFile, line: number, column: number): Span|undefined {\n  if (line != null && column != null) {\n    const position = ts.getPositionOfLineAndCharacter(sourceFile, line, column);\n    const findChild = function findChild(node: ts.Node): ts.Node | undefined {\n      if (node.kind > ts.SyntaxKind.LastToken && node.pos <= position && node.end > position) {\n        const betterNode = ts.forEachChild(node, findChild);\n        return betterNode || node;\n      }\n    };\n\n    const node = ts.forEachChild(sourceFile, findChild);\n    if (node) {\n      return {start: node.getStart(), end: node.getEnd()};\n    }\n  }\n}\n\nfunction definitionFromTsSymbol(symbol: ts.Symbol): Definition {\n  const declarations = symbol.declarations;\n  if (declarations) {\n    return declarations.map(declaration => {\n      const sourceFile = declaration.getSourceFile();\n      return {\n        fileName: sourceFile.fileName,\n        span: {start: declaration.getStart(), end: declaration.getEnd()}\n      };\n    });\n  }\n}\n\nfunction parentDeclarationOf(node: ts.Node): ts.Node|undefined {\n  while (node) {\n    switch (node.kind) {\n      case ts.SyntaxKind.ClassDeclaration:\n      case ts.SyntaxKind.InterfaceDeclaration:\n        return node;\n      case ts.SyntaxKind.SourceFile:\n        return undefined;\n    }\n    node = node.parent !;\n  }\n}\n\nfunction getContainerOf(symbol: ts.Symbol, context: TypeContext): Symbol|undefined {\n  if (symbol.getFlags() & ts.SymbolFlags.ClassMember && symbol.declarations) {\n    for (const declaration of symbol.declarations) {\n      const parent = parentDeclarationOf(declaration);\n      if (parent) {\n        const type = context.checker.getTypeAtLocation(parent);\n        if (type) {\n          return new TypeWrapper(type, context);\n        }\n      }\n    }\n  }\n}\n\nfunction getTypeParameterOf(type: ts.Type, name: string): ts.Type|undefined {\n  if (type && type.symbol && type.symbol.name == name) {\n    const typeArguments: ts.Type[] = (type as any).typeArguments;\n    if (typeArguments && typeArguments.length <= 1) {\n      return typeArguments[0];\n    }\n  }\n}\n\nfunction typeKindOf(type: ts.Type | undefined): BuiltinType {\n  if (type) {\n    if (type.flags & ts.TypeFlags.Any) {\n      return BuiltinType.Any;\n    } else if (\n        type.flags & (ts.TypeFlags.String | ts.TypeFlags.StringLike | ts.TypeFlags.StringLiteral)) {\n      return BuiltinType.String;\n    } else if (type.flags & (ts.TypeFlags.Number | ts.TypeFlags.NumberLike)) {\n      return BuiltinType.Number;\n    } else if (type.flags & (ts.TypeFlags.Undefined)) {\n      return BuiltinType.Undefined;\n    } else if (type.flags & (ts.TypeFlags.Null)) {\n      return BuiltinType.Null;\n    } else if (type.flags & ts.TypeFlags.Union) {\n      // If all the constituent types of a union are the same kind, it is also that kind.\n      let candidate: BuiltinType|null = null;\n      const unionType = type as ts.UnionType;\n      if (unionType.types.length > 0) {\n        candidate = typeKindOf(unionType.types[0]);\n        for (const subType of unionType.types) {\n          if (candidate != typeKindOf(subType)) {\n            return BuiltinType.Other;\n          }\n        }\n      }\n      if (candidate != null) {\n        return candidate;\n      }\n    } else if (type.flags & ts.TypeFlags.TypeParameter) {\n      return BuiltinType.Unbound;\n    }\n  }\n  return BuiltinType.Other;\n}\n\n\n\nfunction getFromSymbolTable(symbolTable: ts.SymbolTable, key: string): ts.Symbol|undefined {\n  const table = symbolTable as any;\n  let symbol: ts.Symbol|undefined;\n\n  if (typeof table.get === 'function') {\n    // TS 2.2 uses a Map\n    symbol = table.get(key);\n  } else {\n    // TS pre-2.2 uses an object\n    symbol = table[key];\n  }\n\n  return symbol;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Metadata Schema\n\n// If you make a backwards incompatible change to the schema, increment the METADTA_VERSION number.\n\n// If you make a backwards compatible change to the metadata (such as adding an option field) then\n// leave METADATA_VERSION the same. If possible, supply as many versions of the metadata that can\n// represent the semantics of the file in an array. For example, when generating a version 2 file,\n// if version 1 can accurately represent the metadata, generate both version 1 and version 2 in\n// an array.\n\nexport const METADATA_VERSION = 4;\n\nexport type MetadataEntry = ClassMetadata | InterfaceMetadata | FunctionMetadata | MetadataValue;\n\nexport interface ModuleMetadata {\n  __symbolic: 'module';\n  version: number;\n  exports?: ModuleExportMetadata[];\n  importAs?: string;\n  metadata: {[name: string]: MetadataEntry};\n  origins?: {[name: string]: string};\n}\nexport function isModuleMetadata(value: any): value is ModuleMetadata {\n  return value && value.__symbolic === 'module';\n}\n\nexport interface ModuleExportMetadata {\n  export?: (string|{name: string, as: string})[];\n  from: string;\n}\n\nexport interface ClassMetadata {\n  __symbolic: 'class';\n  extends?: MetadataSymbolicExpression|MetadataError;\n  arity?: number;\n  decorators?: (MetadataSymbolicExpression|MetadataError)[];\n  members?: MetadataMap;\n  statics?: {[name: string]: MetadataValue | FunctionMetadata};\n}\nexport function isClassMetadata(value: any): value is ClassMetadata {\n  return value && value.__symbolic === 'class';\n}\n\nexport interface InterfaceMetadata { __symbolic: 'interface'; }\nexport function isInterfaceMetadata(value: any): value is InterfaceMetadata {\n  return value && value.__symbolic === 'interface';\n}\n\nexport interface MetadataMap { [name: string]: MemberMetadata[]; }\n\nexport interface MemberMetadata {\n  __symbolic: 'constructor'|'method'|'property';\n  decorators?: (MetadataSymbolicExpression|MetadataError)[];\n}\nexport function isMemberMetadata(value: any): value is MemberMetadata {\n  if (value) {\n    switch (value.__symbolic) {\n      case 'constructor':\n      case 'method':\n      case 'property':\n        return true;\n    }\n  }\n  return false;\n}\n\nexport interface MethodMetadata extends MemberMetadata {\n  __symbolic: 'constructor'|'method';\n  parameterDecorators?: ((MetadataSymbolicExpression | MetadataError)[]|undefined)[];\n}\nexport function isMethodMetadata(value: any): value is MethodMetadata {\n  return value && (value.__symbolic === 'constructor' || value.__symbolic === 'method');\n}\n\nexport interface ConstructorMetadata extends MethodMetadata {\n  __symbolic: 'constructor';\n  parameters?: (MetadataSymbolicExpression|MetadataError|null|undefined)[];\n}\nexport function isConstructorMetadata(value: any): value is ConstructorMetadata {\n  return value && value.__symbolic === 'constructor';\n}\n\nexport interface FunctionMetadata {\n  __symbolic: 'function';\n  parameters: string[];\n  defaults?: MetadataValue[];\n  value: MetadataValue;\n}\nexport function isFunctionMetadata(value: any): value is FunctionMetadata {\n  return value && value.__symbolic === 'function';\n}\n\nexport type MetadataValue = string | number | boolean | undefined | null | MetadataObject |\n    MetadataArray | MetadataSymbolicExpression | MetadataSymbolicReferenceExpression |\n    MetadataSymbolicBinaryExpression | MetadataSymbolicIndexExpression |\n    MetadataSymbolicCallExpression | MetadataSymbolicPrefixExpression |\n    MetadataSymbolicIfExpression | MetadataSymbolicSpreadExpression |\n    MetadataSymbolicSelectExpression | MetadataError;\n\nexport interface MetadataObject { [name: string]: MetadataValue; }\n\nexport interface MetadataArray { [name: number]: MetadataValue; }\n\nexport type MetadataSymbolicExpression = MetadataSymbolicBinaryExpression |\n    MetadataSymbolicIndexExpression | MetadataSymbolicIndexExpression |\n    MetadataSymbolicCallExpression | MetadataSymbolicCallExpression |\n    MetadataSymbolicPrefixExpression | MetadataSymbolicIfExpression |\n    MetadataGlobalReferenceExpression | MetadataModuleReferenceExpression |\n    MetadataImportedSymbolReferenceExpression | MetadataImportedDefaultReferenceExpression |\n    MetadataSymbolicSelectExpression | MetadataSymbolicSpreadExpression;\n\nexport function isMetadataSymbolicExpression(value: any): value is MetadataSymbolicExpression {\n  if (value) {\n    switch (value.__symbolic) {\n      case 'binary':\n      case 'call':\n      case 'index':\n      case 'new':\n      case 'pre':\n      case 'reference':\n      case 'select':\n      case 'spread':\n      case 'if':\n        return true;\n    }\n  }\n  return false;\n}\n\nexport interface MetadataSymbolicBinaryExpression {\n  __symbolic: 'binary';\n  operator: '&&'|'||'|'|'|'^'|'&'|'=='|'!='|'==='|'!=='|'<'|'>'|'<='|'>='|'instanceof'|'in'|'as'|\n      '<<'|'>>'|'>>>'|'+'|'-'|'*'|'/'|'%'|'**';\n  left: MetadataValue;\n  right: MetadataValue;\n}\nexport function isMetadataSymbolicBinaryExpression(value: any):\n    value is MetadataSymbolicBinaryExpression {\n  return value && value.__symbolic === 'binary';\n}\n\nexport interface MetadataSymbolicIndexExpression {\n  __symbolic: 'index';\n  expression: MetadataValue;\n  index: MetadataValue;\n}\nexport function isMetadataSymbolicIndexExpression(value: any):\n    value is MetadataSymbolicIndexExpression {\n  return value && value.__symbolic === 'index';\n}\n\nexport interface MetadataSymbolicCallExpression {\n  __symbolic: 'call'|'new';\n  expression: MetadataValue;\n  arguments?: MetadataValue[];\n}\nexport function isMetadataSymbolicCallExpression(value: any):\n    value is MetadataSymbolicCallExpression {\n  return value && (value.__symbolic === 'call' || value.__symbolic === 'new');\n}\n\nexport interface MetadataSymbolicPrefixExpression {\n  __symbolic: 'pre';\n  operator: '+'|'-'|'~'|'!';\n  operand: MetadataValue;\n}\nexport function isMetadataSymbolicPrefixExpression(value: any):\n    value is MetadataSymbolicPrefixExpression {\n  return value && value.__symbolic === 'pre';\n}\n\nexport interface MetadataSymbolicIfExpression {\n  __symbolic: 'if';\n  condition: MetadataValue;\n  thenExpression: MetadataValue;\n  elseExpression: MetadataValue;\n}\nexport function isMetadataSymbolicIfExpression(value: any): value is MetadataSymbolicIfExpression {\n  return value && value.__symbolic === 'if';\n}\n\nexport interface MetadataSourceLocationInfo {\n  /**\n   * The line number of the error in the .ts file the metadata was created for.\n   */\n  line?: number;\n\n  /**\n   * The number of utf8 code-units from the beginning of the file of the error.\n   */\n  character?: number;\n}\n\nexport interface MetadataGlobalReferenceExpression extends MetadataSourceLocationInfo {\n  __symbolic: 'reference';\n  name: string;\n  arguments?: MetadataValue[];\n}\nexport function isMetadataGlobalReferenceExpression(value: any):\n    value is MetadataGlobalReferenceExpression {\n  return value && value.name && !value.module && isMetadataSymbolicReferenceExpression(value);\n}\n\nexport interface MetadataModuleReferenceExpression extends MetadataSourceLocationInfo {\n  __symbolic: 'reference';\n  module: string;\n}\nexport function isMetadataModuleReferenceExpression(value: any):\n    value is MetadataModuleReferenceExpression {\n  return value && value.module && !value.name && !value.default &&\n      isMetadataSymbolicReferenceExpression(value);\n}\n\nexport interface MetadataImportedSymbolReferenceExpression extends MetadataSourceLocationInfo {\n  __symbolic: 'reference';\n  module: string;\n  name: string;\n  arguments?: MetadataValue[];\n}\nexport function isMetadataImportedSymbolReferenceExpression(value: any):\n    value is MetadataImportedSymbolReferenceExpression {\n  return value && value.module && !!value.name && isMetadataSymbolicReferenceExpression(value);\n}\n\nexport interface MetadataImportedDefaultReferenceExpression extends MetadataSourceLocationInfo {\n  __symbolic: 'reference';\n  module: string;\n  default:\n    boolean;\n    arguments?: MetadataValue[];\n}\nexport function isMetadataImportDefaultReference(value: any):\n    value is MetadataImportedDefaultReferenceExpression {\n  return value && value.module && value.default && isMetadataSymbolicReferenceExpression(value);\n}\n\nexport type MetadataSymbolicReferenceExpression = MetadataGlobalReferenceExpression |\n    MetadataModuleReferenceExpression | MetadataImportedSymbolReferenceExpression |\n    MetadataImportedDefaultReferenceExpression;\nexport function isMetadataSymbolicReferenceExpression(value: any):\n    value is MetadataSymbolicReferenceExpression {\n  return value && value.__symbolic === 'reference';\n}\n\nexport interface MetadataSymbolicSelectExpression {\n  __symbolic: 'select';\n  expression: MetadataValue;\n  member: string;\n}\nexport function isMetadataSymbolicSelectExpression(value: any):\n    value is MetadataSymbolicSelectExpression {\n  return value && value.__symbolic === 'select';\n}\n\nexport interface MetadataSymbolicSpreadExpression {\n  __symbolic: 'spread';\n  expression: MetadataValue;\n}\nexport function isMetadataSymbolicSpreadExpression(value: any):\n    value is MetadataSymbolicSpreadExpression {\n  return value && value.__symbolic === 'spread';\n}\n\nexport interface MetadataError extends MetadataSourceLocationInfo {\n  __symbolic: 'error';\n\n  /**\n   * This message should be short and relatively discriptive and should be fixed once it is created.\n   * If the reader doesn't recognize the message, it will display the message unmodified. If the\n   * reader recognizes the error message is it free to use substitute message the is more\n   * descriptive and/or localized.\n   */\n  message: string;\n\n  /**\n   * The module of the error (only used in bundled metadata)\n   */\n  module?: string;\n\n  /**\n   * Context information that can be used to generate a more descriptive error message. The content\n   * of the context is dependent on the error message.\n   */\n  context?: {[name: string]: string};\n}\n\nexport function isMetadataError(value: any): value is MetadataError {\n  return value && value.__symbolic === 'error';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {CollectorOptions} from './collector';\nimport {ClassMetadata, FunctionMetadata, InterfaceMetadata, MetadataEntry, MetadataError, MetadataImportedSymbolReferenceExpression, MetadataSourceLocationInfo, MetadataSymbolicCallExpression, MetadataValue, isMetadataError, isMetadataGlobalReferenceExpression, isMetadataImportDefaultReference, isMetadataImportedSymbolReferenceExpression, isMetadataModuleReferenceExpression, isMetadataSymbolicReferenceExpression, isMetadataSymbolicSpreadExpression} from './schema';\nimport {Symbols} from './symbols';\n\n\n\n// In TypeScript 2.1 the spread element kind was renamed.\nconst spreadElementSyntaxKind: ts.SyntaxKind =\n    (ts.SyntaxKind as any).SpreadElement || (ts.SyntaxKind as any).SpreadElementExpression;\n\nfunction isMethodCallOf(callExpression: ts.CallExpression, memberName: string): boolean {\n  const expression = callExpression.expression;\n  if (expression.kind === ts.SyntaxKind.PropertyAccessExpression) {\n    const propertyAccessExpression = <ts.PropertyAccessExpression>expression;\n    const name = propertyAccessExpression.name;\n    if (name.kind == ts.SyntaxKind.Identifier) {\n      return name.text === memberName;\n    }\n  }\n  return false;\n}\n\nfunction isCallOf(callExpression: ts.CallExpression, ident: string): boolean {\n  const expression = callExpression.expression;\n  if (expression.kind === ts.SyntaxKind.Identifier) {\n    const identifier = <ts.Identifier>expression;\n    return identifier.text === ident;\n  }\n  return false;\n}\n\n/* @internal */\nexport function recordMapEntry<T extends MetadataEntry>(\n    entry: T, node: ts.Node,\n    nodeMap: Map<MetadataValue|ClassMetadata|InterfaceMetadata|FunctionMetadata, ts.Node>,\n    sourceFile?: ts.SourceFile) {\n  if (!nodeMap.has(entry)) {\n    nodeMap.set(entry, node);\n    if (node && (isMetadataImportedSymbolReferenceExpression(entry) ||\n                 isMetadataImportDefaultReference(entry)) &&\n        entry.line == null) {\n      const info = sourceInfo(node, sourceFile);\n      if (info.line != null) entry.line = info.line;\n      if (info.character != null) entry.character = info.character;\n    }\n  }\n  return entry;\n}\n\n/**\n * ts.forEachChild stops iterating children when the callback return a truthy value.\n * This method inverts this to implement an `every` style iterator. It will return\n * true if every call to `cb` returns `true`.\n */\nfunction everyNodeChild(node: ts.Node, cb: (node: ts.Node) => boolean) {\n  return !ts.forEachChild(node, node => !cb(node));\n}\n\nexport function isPrimitive(value: any): boolean {\n  return Object(value) !== value;\n}\n\nfunction isDefined(obj: any): boolean {\n  return obj !== undefined;\n}\n\n// import {propertyName as name} from 'place'\n// import {name} from 'place'\nexport interface ImportSpecifierMetadata {\n  name: string;\n  propertyName?: string;\n}\nexport interface ImportMetadata {\n  defaultName?: string;                      // import d from 'place'\n  namespace?: string;                        // import * as d from 'place'\n  namedImports?: ImportSpecifierMetadata[];  // import {a} from 'place'\n  from: string;                              // from 'place'\n}\n\n\nfunction getSourceFileOfNode(node: ts.Node | undefined): ts.SourceFile {\n  while (node && node.kind != ts.SyntaxKind.SourceFile) {\n    node = node.parent;\n  }\n  return <ts.SourceFile>node;\n}\n\n/* @internal */\nexport function sourceInfo(\n    node: ts.Node | undefined, sourceFile: ts.SourceFile | undefined): MetadataSourceLocationInfo {\n  if (node) {\n    sourceFile = sourceFile || getSourceFileOfNode(node);\n    if (sourceFile) {\n      return ts.getLineAndCharacterOfPosition(sourceFile, node.getStart(sourceFile));\n    }\n  }\n  return {};\n}\n\n/* @internal */\nexport function errorSymbol(\n    message: string, node?: ts.Node, context?: {[name: string]: string},\n    sourceFile?: ts.SourceFile): MetadataError {\n  const result: MetadataError = {__symbolic: 'error', message, ...sourceInfo(node, sourceFile)};\n  if (context) {\n    result.context = context;\n  }\n  return result;\n}\n\n/**\n * Produce a symbolic representation of an expression folding values into their final value when\n * possible.\n */\nexport class Evaluator {\n  constructor(\n      private symbols: Symbols, private nodeMap: Map<MetadataEntry, ts.Node>,\n      private options: CollectorOptions = {},\n      private recordExport?: (name: string, value: MetadataValue) => void) {}\n\n  nameOf(node: ts.Node|undefined): string|MetadataError {\n    if (node && node.kind == ts.SyntaxKind.Identifier) {\n      return (<ts.Identifier>node).text;\n    }\n    const result = node && this.evaluateNode(node);\n    if (isMetadataError(result) || typeof result === 'string') {\n      return result;\n    } else {\n      return errorSymbol(\n          'Name expected', node, {received: (node && node.getText()) || '<missing>'});\n    }\n  }\n\n  /**\n   * Returns true if the expression represented by `node` can be folded into a literal expression.\n   *\n   * For example, a literal is always foldable. This means that literal expressions such as `1.2`\n   * `\"Some value\"` `true` `false` are foldable.\n   *\n   * - An object literal is foldable if all the properties in the literal are foldable.\n   * - An array literal is foldable if all the elements are foldable.\n   * - A call is foldable if it is a call to a Array.prototype.concat or a call to CONST_EXPR.\n   * - A property access is foldable if the object is foldable.\n   * - A array index is foldable if index expression is foldable and the array is foldable.\n   * - Binary operator expressions are foldable if the left and right expressions are foldable and\n   *   it is one of '+', '-', '*', '/', '%', '||', and '&&'.\n   * - An identifier is foldable if a value can be found for its symbol in the evaluator symbol\n   *   table.\n   */\n  public isFoldable(node: ts.Node): boolean {\n    return this.isFoldableWorker(node, new Map<ts.Node, boolean>());\n  }\n\n  private isFoldableWorker(node: ts.Node|undefined, folding: Map<ts.Node, boolean>): boolean {\n    if (node) {\n      switch (node.kind) {\n        case ts.SyntaxKind.ObjectLiteralExpression:\n          return everyNodeChild(node, child => {\n            if (child.kind === ts.SyntaxKind.PropertyAssignment) {\n              const propertyAssignment = <ts.PropertyAssignment>child;\n              return this.isFoldableWorker(propertyAssignment.initializer, folding);\n            }\n            return false;\n          });\n        case ts.SyntaxKind.ArrayLiteralExpression:\n          return everyNodeChild(node, child => this.isFoldableWorker(child, folding));\n        case ts.SyntaxKind.CallExpression:\n          const callExpression = <ts.CallExpression>node;\n          // We can fold a <array>.concat(<v>).\n          if (isMethodCallOf(callExpression, 'concat') &&\n              arrayOrEmpty(callExpression.arguments).length === 1) {\n            const arrayNode = (<ts.PropertyAccessExpression>callExpression.expression).expression;\n            if (this.isFoldableWorker(arrayNode, folding) &&\n                this.isFoldableWorker(callExpression.arguments[0], folding)) {\n              // It needs to be an array.\n              const arrayValue = this.evaluateNode(arrayNode);\n              if (arrayValue && Array.isArray(arrayValue)) {\n                return true;\n              }\n            }\n          }\n\n          // We can fold a call to CONST_EXPR\n          if (isCallOf(callExpression, 'CONST_EXPR') &&\n              arrayOrEmpty(callExpression.arguments).length === 1)\n            return this.isFoldableWorker(callExpression.arguments[0], folding);\n          return false;\n        case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n        case ts.SyntaxKind.StringLiteral:\n        case ts.SyntaxKind.NumericLiteral:\n        case ts.SyntaxKind.NullKeyword:\n        case ts.SyntaxKind.TrueKeyword:\n        case ts.SyntaxKind.FalseKeyword:\n        case ts.SyntaxKind.TemplateHead:\n        case ts.SyntaxKind.TemplateMiddle:\n        case ts.SyntaxKind.TemplateTail:\n          return true;\n        case ts.SyntaxKind.ParenthesizedExpression:\n          const parenthesizedExpression = <ts.ParenthesizedExpression>node;\n          return this.isFoldableWorker(parenthesizedExpression.expression, folding);\n        case ts.SyntaxKind.BinaryExpression:\n          const binaryExpression = <ts.BinaryExpression>node;\n          switch (binaryExpression.operatorToken.kind) {\n            case ts.SyntaxKind.PlusToken:\n            case ts.SyntaxKind.MinusToken:\n            case ts.SyntaxKind.AsteriskToken:\n            case ts.SyntaxKind.SlashToken:\n            case ts.SyntaxKind.PercentToken:\n            case ts.SyntaxKind.AmpersandAmpersandToken:\n            case ts.SyntaxKind.BarBarToken:\n              return this.isFoldableWorker(binaryExpression.left, folding) &&\n                  this.isFoldableWorker(binaryExpression.right, folding);\n            default:\n              return false;\n          }\n        case ts.SyntaxKind.PropertyAccessExpression:\n          const propertyAccessExpression = <ts.PropertyAccessExpression>node;\n          return this.isFoldableWorker(propertyAccessExpression.expression, folding);\n        case ts.SyntaxKind.ElementAccessExpression:\n          const elementAccessExpression = <ts.ElementAccessExpression>node;\n          return this.isFoldableWorker(elementAccessExpression.expression, folding) &&\n              this.isFoldableWorker(elementAccessExpression.argumentExpression, folding);\n        case ts.SyntaxKind.Identifier:\n          let identifier = <ts.Identifier>node;\n          let reference = this.symbols.resolve(identifier.text);\n          if (reference !== undefined && isPrimitive(reference)) {\n            return true;\n          }\n          break;\n        case ts.SyntaxKind.TemplateExpression:\n          const templateExpression = <ts.TemplateExpression>node;\n          return templateExpression.templateSpans.every(\n              span => this.isFoldableWorker(span.expression, folding));\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Produce a JSON serialiable object representing `node`. The foldable values in the expression\n   * tree are folded. For example, a node representing `1 + 2` is folded into `3`.\n   */\n  public evaluateNode(node: ts.Node, preferReference?: boolean): MetadataValue {\n    const t = this;\n    let error: MetadataError|undefined;\n\n    function recordEntry(entry: MetadataValue, node: ts.Node): MetadataValue {\n      if (t.options.substituteExpression) {\n        const newEntry = t.options.substituteExpression(entry, node);\n        if (t.recordExport && newEntry != entry && isMetadataGlobalReferenceExpression(newEntry)) {\n          t.recordExport(newEntry.name, entry);\n        }\n        entry = newEntry;\n      }\n      return recordMapEntry(entry, node, t.nodeMap);\n    }\n\n    function isFoldableError(value: any): value is MetadataError {\n      return !t.options.verboseInvalidExpression && isMetadataError(value);\n    }\n\n    const resolveName = (name: string, preferReference?: boolean): MetadataValue => {\n      const reference = this.symbols.resolve(name, preferReference);\n      if (reference === undefined) {\n        // Encode as a global reference. StaticReflector will check the reference.\n        return recordEntry({__symbolic: 'reference', name}, node);\n      }\n      if (reference && isMetadataSymbolicReferenceExpression(reference)) {\n        return recordEntry({...reference}, node);\n      }\n      return reference;\n    };\n\n    switch (node.kind) {\n      case ts.SyntaxKind.ObjectLiteralExpression:\n        let obj: {[name: string]: any} = {};\n        let quoted: string[] = [];\n        ts.forEachChild(node, child => {\n          switch (child.kind) {\n            case ts.SyntaxKind.ShorthandPropertyAssignment:\n            case ts.SyntaxKind.PropertyAssignment:\n              const assignment = <ts.PropertyAssignment|ts.ShorthandPropertyAssignment>child;\n              if (assignment.name.kind == ts.SyntaxKind.StringLiteral) {\n                const name = (assignment.name as ts.StringLiteral).text;\n                quoted.push(name);\n              }\n              const propertyName = this.nameOf(assignment.name);\n              if (isFoldableError(propertyName)) {\n                error = propertyName;\n                return true;\n              }\n              const propertyValue = isPropertyAssignment(assignment) ?\n                  this.evaluateNode(assignment.initializer, /* preferReference */ true) :\n                  resolveName(propertyName, /* preferReference */ true);\n              if (isFoldableError(propertyValue)) {\n                error = propertyValue;\n                return true;  // Stop the forEachChild.\n              } else {\n                obj[<string>propertyName] = isPropertyAssignment(assignment) ?\n                    recordEntry(propertyValue, assignment.initializer) :\n                    propertyValue;\n              }\n          }\n        });\n        if (error) return error;\n        if (this.options.quotedNames && quoted.length) {\n          obj['$quoted$'] = quoted;\n        }\n        return recordEntry(obj, node);\n      case ts.SyntaxKind.ArrayLiteralExpression:\n        let arr: MetadataValue[] = [];\n        ts.forEachChild(node, child => {\n          const value = this.evaluateNode(child, /* preferReference */ true);\n\n          // Check for error\n          if (isFoldableError(value)) {\n            error = value;\n            return true;  // Stop the forEachChild.\n          }\n\n          // Handle spread expressions\n          if (isMetadataSymbolicSpreadExpression(value)) {\n            if (Array.isArray(value.expression)) {\n              for (const spreadValue of value.expression) {\n                arr.push(spreadValue);\n              }\n              return;\n            }\n          }\n\n          arr.push(value);\n        });\n        if (error) return error;\n        return recordEntry(arr, node);\n      case spreadElementSyntaxKind:\n        let spreadExpression = this.evaluateNode((node as any).expression);\n        return recordEntry({__symbolic: 'spread', expression: spreadExpression}, node);\n      case ts.SyntaxKind.CallExpression:\n        const callExpression = <ts.CallExpression>node;\n        if (isCallOf(callExpression, 'forwardRef') &&\n            arrayOrEmpty(callExpression.arguments).length === 1) {\n          const firstArgument = callExpression.arguments[0];\n          if (firstArgument.kind == ts.SyntaxKind.ArrowFunction) {\n            const arrowFunction = <ts.ArrowFunction>firstArgument;\n            return recordEntry(this.evaluateNode(arrowFunction.body), node);\n          }\n        }\n        const args = arrayOrEmpty(callExpression.arguments).map(arg => this.evaluateNode(arg));\n        if (this.isFoldable(callExpression)) {\n          if (isMethodCallOf(callExpression, 'concat')) {\n            const arrayValue = <MetadataValue[]>this.evaluateNode(\n                (<ts.PropertyAccessExpression>callExpression.expression).expression);\n            if (isFoldableError(arrayValue)) return arrayValue;\n            return arrayValue.concat(args[0]);\n          }\n        }\n        // Always fold a CONST_EXPR even if the argument is not foldable.\n        if (isCallOf(callExpression, 'CONST_EXPR') &&\n            arrayOrEmpty(callExpression.arguments).length === 1) {\n          return recordEntry(args[0], node);\n        }\n        const expression = this.evaluateNode(callExpression.expression);\n        if (isFoldableError(expression)) {\n          return recordEntry(expression, node);\n        }\n        let result: MetadataSymbolicCallExpression = {__symbolic: 'call', expression: expression};\n        if (args && args.length) {\n          result.arguments = args;\n        }\n        return recordEntry(result, node);\n      case ts.SyntaxKind.NewExpression:\n        const newExpression = <ts.NewExpression>node;\n        const newArgs = arrayOrEmpty(newExpression.arguments).map(arg => this.evaluateNode(arg));\n        const newTarget = this.evaluateNode(newExpression.expression);\n        if (isMetadataError(newTarget)) {\n          return recordEntry(newTarget, node);\n        }\n        const call: MetadataSymbolicCallExpression = {__symbolic: 'new', expression: newTarget};\n        if (newArgs.length) {\n          call.arguments = newArgs;\n        }\n        return recordEntry(call, node);\n      case ts.SyntaxKind.PropertyAccessExpression: {\n        const propertyAccessExpression = <ts.PropertyAccessExpression>node;\n        const expression = this.evaluateNode(propertyAccessExpression.expression);\n        if (isFoldableError(expression)) {\n          return recordEntry(expression, node);\n        }\n        const member = this.nameOf(propertyAccessExpression.name);\n        if (isFoldableError(member)) {\n          return recordEntry(member, node);\n        }\n        if (expression && this.isFoldable(propertyAccessExpression.expression))\n          return (<any>expression)[<string>member];\n        if (isMetadataModuleReferenceExpression(expression)) {\n          // A select into a module reference and be converted into a reference to the symbol\n          // in the module\n          return recordEntry(\n              {__symbolic: 'reference', module: expression.module, name: member}, node);\n        }\n        return recordEntry({__symbolic: 'select', expression, member}, node);\n      }\n      case ts.SyntaxKind.ElementAccessExpression: {\n        const elementAccessExpression = <ts.ElementAccessExpression>node;\n        const expression = this.evaluateNode(elementAccessExpression.expression);\n        if (isFoldableError(expression)) {\n          return recordEntry(expression, node);\n        }\n        if (!elementAccessExpression.argumentExpression) {\n          return recordEntry(errorSymbol('Expression form not supported', node), node);\n        }\n        const index = this.evaluateNode(elementAccessExpression.argumentExpression);\n        if (isFoldableError(expression)) {\n          return recordEntry(expression, node);\n        }\n        if (this.isFoldable(elementAccessExpression.expression) &&\n            this.isFoldable(elementAccessExpression.argumentExpression))\n          return (<any>expression)[<string|number>index];\n        return recordEntry({__symbolic: 'index', expression, index}, node);\n      }\n      case ts.SyntaxKind.Identifier:\n        const identifier = <ts.Identifier>node;\n        const name = identifier.text;\n        return resolveName(name, preferReference);\n      case ts.SyntaxKind.TypeReference:\n        const typeReferenceNode = <ts.TypeReferenceNode>node;\n        const typeNameNode = typeReferenceNode.typeName;\n        const getReference: (typeNameNode: ts.Identifier | ts.QualifiedName) => MetadataValue =\n            node => {\n              if (typeNameNode.kind === ts.SyntaxKind.QualifiedName) {\n                const qualifiedName = <ts.QualifiedName>node;\n                const left = this.evaluateNode(qualifiedName.left);\n                if (isMetadataModuleReferenceExpression(left)) {\n                  return recordEntry(\n                      <MetadataImportedSymbolReferenceExpression>{\n                        __symbolic: 'reference',\n                        module: left.module,\n                        name: qualifiedName.right.text\n                      },\n                      node);\n                }\n                // Record a type reference to a declared type as a select.\n                return {__symbolic: 'select', expression: left, member: qualifiedName.right.text};\n              } else {\n                const identifier = <ts.Identifier>typeNameNode;\n                const symbol = this.symbols.resolve(identifier.text);\n                if (isFoldableError(symbol) || isMetadataSymbolicReferenceExpression(symbol)) {\n                  return recordEntry(symbol, node);\n                }\n                return recordEntry(\n                    errorSymbol('Could not resolve type', node, {typeName: identifier.text}), node);\n              }\n            };\n        const typeReference = getReference(typeNameNode);\n        if (isFoldableError(typeReference)) {\n          return recordEntry(typeReference, node);\n        }\n        if (!isMetadataModuleReferenceExpression(typeReference) &&\n            typeReferenceNode.typeArguments && typeReferenceNode.typeArguments.length) {\n          const args = typeReferenceNode.typeArguments.map(element => this.evaluateNode(element));\n          // TODO: Remove typecast when upgraded to 2.0 as it will be correctly inferred.\n          // Some versions of 1.9 do not infer this correctly.\n          (<MetadataImportedSymbolReferenceExpression>typeReference).arguments = args;\n        }\n        return recordEntry(typeReference, node);\n      case ts.SyntaxKind.UnionType:\n        const unionType = <ts.UnionTypeNode>node;\n\n        // Remove null and undefined from the list of unions.\n        const references = unionType.types\n                               .filter(\n                                   n => n.kind != ts.SyntaxKind.NullKeyword &&\n                                       n.kind != ts.SyntaxKind.UndefinedKeyword)\n                               .map(n => this.evaluateNode(n));\n\n        // The remmaining reference must be the same. If two have type arguments consider them\n        // different even if the type arguments are the same.\n        let candidate: any = null;\n        for (let i = 0; i < references.length; i++) {\n          const reference = references[i];\n          if (isMetadataSymbolicReferenceExpression(reference)) {\n            if (candidate) {\n              if ((reference as any).name == candidate.name &&\n                  (reference as any).module == candidate.module && !(reference as any).arguments) {\n                candidate = reference;\n              }\n            } else {\n              candidate = reference;\n            }\n          } else {\n            return reference;\n          }\n        }\n        if (candidate) return candidate;\n        break;\n      case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n      case ts.SyntaxKind.StringLiteral:\n      case ts.SyntaxKind.TemplateHead:\n      case ts.SyntaxKind.TemplateTail:\n      case ts.SyntaxKind.TemplateMiddle:\n        return (<ts.LiteralLikeNode>node).text;\n      case ts.SyntaxKind.NumericLiteral:\n        return parseFloat((<ts.LiteralExpression>node).text);\n      case ts.SyntaxKind.AnyKeyword:\n        return recordEntry({__symbolic: 'reference', name: 'any'}, node);\n      case ts.SyntaxKind.StringKeyword:\n        return recordEntry({__symbolic: 'reference', name: 'string'}, node);\n      case ts.SyntaxKind.NumberKeyword:\n        return recordEntry({__symbolic: 'reference', name: 'number'}, node);\n      case ts.SyntaxKind.BooleanKeyword:\n        return recordEntry({__symbolic: 'reference', name: 'boolean'}, node);\n      case ts.SyntaxKind.ArrayType:\n        const arrayTypeNode = <ts.ArrayTypeNode>node;\n        return recordEntry(\n            {\n              __symbolic: 'reference',\n              name: 'Array',\n              arguments: [this.evaluateNode(arrayTypeNode.elementType)]\n            },\n            node);\n      case ts.SyntaxKind.NullKeyword:\n        return null;\n      case ts.SyntaxKind.TrueKeyword:\n        return true;\n      case ts.SyntaxKind.FalseKeyword:\n        return false;\n      case ts.SyntaxKind.ParenthesizedExpression:\n        const parenthesizedExpression = <ts.ParenthesizedExpression>node;\n        return this.evaluateNode(parenthesizedExpression.expression);\n      case ts.SyntaxKind.TypeAssertionExpression:\n        const typeAssertion = <ts.TypeAssertion>node;\n        return this.evaluateNode(typeAssertion.expression);\n      case ts.SyntaxKind.PrefixUnaryExpression:\n        const prefixUnaryExpression = <ts.PrefixUnaryExpression>node;\n        const operand = this.evaluateNode(prefixUnaryExpression.operand);\n        if (isDefined(operand) && isPrimitive(operand)) {\n          switch (prefixUnaryExpression.operator) {\n            case ts.SyntaxKind.PlusToken:\n              return +(operand as any);\n            case ts.SyntaxKind.MinusToken:\n              return -(operand as any);\n            case ts.SyntaxKind.TildeToken:\n              return ~(operand as any);\n            case ts.SyntaxKind.ExclamationToken:\n              return !operand;\n          }\n        }\n        let operatorText: string;\n        switch (prefixUnaryExpression.operator) {\n          case ts.SyntaxKind.PlusToken:\n            operatorText = '+';\n            break;\n          case ts.SyntaxKind.MinusToken:\n            operatorText = '-';\n            break;\n          case ts.SyntaxKind.TildeToken:\n            operatorText = '~';\n            break;\n          case ts.SyntaxKind.ExclamationToken:\n            operatorText = '!';\n            break;\n          default:\n            return undefined;\n        }\n        return recordEntry({__symbolic: 'pre', operator: operatorText, operand: operand}, node);\n      case ts.SyntaxKind.BinaryExpression:\n        const binaryExpression = <ts.BinaryExpression>node;\n        const left = this.evaluateNode(binaryExpression.left);\n        const right = this.evaluateNode(binaryExpression.right);\n        if (isDefined(left) && isDefined(right)) {\n          if (isPrimitive(left) && isPrimitive(right))\n            switch (binaryExpression.operatorToken.kind) {\n              case ts.SyntaxKind.BarBarToken:\n                return <any>left || <any>right;\n              case ts.SyntaxKind.AmpersandAmpersandToken:\n                return <any>left && <any>right;\n              case ts.SyntaxKind.AmpersandToken:\n                return <any>left & <any>right;\n              case ts.SyntaxKind.BarToken:\n                return <any>left | <any>right;\n              case ts.SyntaxKind.CaretToken:\n                return <any>left ^ <any>right;\n              case ts.SyntaxKind.EqualsEqualsToken:\n                return <any>left == <any>right;\n              case ts.SyntaxKind.ExclamationEqualsToken:\n                return <any>left != <any>right;\n              case ts.SyntaxKind.EqualsEqualsEqualsToken:\n                return <any>left === <any>right;\n              case ts.SyntaxKind.ExclamationEqualsEqualsToken:\n                return <any>left !== <any>right;\n              case ts.SyntaxKind.LessThanToken:\n                return <any>left < <any>right;\n              case ts.SyntaxKind.GreaterThanToken:\n                return <any>left > <any>right;\n              case ts.SyntaxKind.LessThanEqualsToken:\n                return <any>left <= <any>right;\n              case ts.SyntaxKind.GreaterThanEqualsToken:\n                return <any>left >= <any>right;\n              case ts.SyntaxKind.LessThanLessThanToken:\n                return (<any>left) << (<any>right);\n              case ts.SyntaxKind.GreaterThanGreaterThanToken:\n                return <any>left >> <any>right;\n              case ts.SyntaxKind.GreaterThanGreaterThanGreaterThanToken:\n                return <any>left >>> <any>right;\n              case ts.SyntaxKind.PlusToken:\n                return <any>left + <any>right;\n              case ts.SyntaxKind.MinusToken:\n                return <any>left - <any>right;\n              case ts.SyntaxKind.AsteriskToken:\n                return <any>left * <any>right;\n              case ts.SyntaxKind.SlashToken:\n                return <any>left / <any>right;\n              case ts.SyntaxKind.PercentToken:\n                return <any>left % <any>right;\n            }\n          return recordEntry(\n              {\n                __symbolic: 'binop',\n                operator: binaryExpression.operatorToken.getText(),\n                left: left,\n                right: right\n              },\n              node);\n        }\n        break;\n      case ts.SyntaxKind.ConditionalExpression:\n        const conditionalExpression = <ts.ConditionalExpression>node;\n        const condition = this.evaluateNode(conditionalExpression.condition);\n        const thenExpression = this.evaluateNode(conditionalExpression.whenTrue);\n        const elseExpression = this.evaluateNode(conditionalExpression.whenFalse);\n        if (isPrimitive(condition)) {\n          return condition ? thenExpression : elseExpression;\n        }\n        return recordEntry({__symbolic: 'if', condition, thenExpression, elseExpression}, node);\n      case ts.SyntaxKind.FunctionExpression:\n      case ts.SyntaxKind.ArrowFunction:\n        return recordEntry(errorSymbol('Lambda not supported', node), node);\n      case ts.SyntaxKind.TaggedTemplateExpression:\n        return recordEntry(\n            errorSymbol('Tagged template expressions are not supported in metadata', node), node);\n      case ts.SyntaxKind.TemplateExpression:\n        const templateExpression = <ts.TemplateExpression>node;\n        if (this.isFoldable(node)) {\n          return templateExpression.templateSpans.reduce(\n              (previous, current) => previous + <string>this.evaluateNode(current.expression) +\n                  <string>this.evaluateNode(current.literal),\n              this.evaluateNode(templateExpression.head));\n        } else {\n          return templateExpression.templateSpans.reduce((previous, current) => {\n            const expr = this.evaluateNode(current.expression);\n            const literal = this.evaluateNode(current.literal);\n            if (isFoldableError(expr)) return expr;\n            if (isFoldableError(literal)) return literal;\n            if (typeof previous === 'string' && typeof expr === 'string' &&\n                typeof literal === 'string') {\n              return previous + expr + literal;\n            }\n            let result = expr;\n            if (previous !== '') {\n              result = {__symbolic: 'binop', operator: '+', left: previous, right: expr};\n            }\n            if (literal != '') {\n              result = {__symbolic: 'binop', operator: '+', left: result, right: literal};\n            }\n            return result;\n          }, this.evaluateNode(templateExpression.head));\n        }\n      case ts.SyntaxKind.AsExpression:\n        const asExpression = <ts.AsExpression>node;\n        return this.evaluateNode(asExpression.expression);\n      case ts.SyntaxKind.ClassExpression:\n        return {__symbolic: 'class'};\n    }\n    return recordEntry(errorSymbol('Expression form not supported', node), node);\n  }\n}\n\nfunction isPropertyAssignment(node: ts.Node): node is ts.PropertyAssignment {\n  return node.kind == ts.SyntaxKind.PropertyAssignment;\n}\n\nconst empty = ts.createNodeArray<any>();\n\nfunction arrayOrEmpty<T extends ts.Node>(v: ts.NodeArray<T>| undefined): ts.NodeArray<T> {\n  return v || empty;\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {MetadataSymbolicReferenceExpression, MetadataValue} from './schema';\n\nexport class Symbols {\n  private _symbols: Map<string, MetadataValue>;\n  private references = new Map<string, MetadataSymbolicReferenceExpression>();\n\n  constructor(private sourceFile: ts.SourceFile) {}\n\n  resolve(name: string, preferReference?: boolean): MetadataValue|undefined {\n    return (preferReference && this.references.get(name)) || this.symbols.get(name);\n  }\n\n  define(name: string, value: MetadataValue) { this.symbols.set(name, value); }\n  defineReference(name: string, value: MetadataSymbolicReferenceExpression) {\n    this.references.set(name, value);\n  }\n\n  has(name: string): boolean { return this.symbols.has(name); }\n\n  private get symbols(): Map<string, MetadataValue> {\n    let result = this._symbols;\n    if (!result) {\n      result = this._symbols = new Map<string, MetadataValue>();\n      populateBuiltins(result);\n      this.buildImports();\n    }\n    return result;\n  }\n\n  private buildImports(): void {\n    const symbols = this._symbols;\n    // Collect the imported symbols into this.symbols\n    const stripQuotes = (s: string) => s.replace(/^['\"]|['\"]$/g, '');\n    const visit = (node: ts.Node) => {\n      switch (node.kind) {\n        case ts.SyntaxKind.ImportEqualsDeclaration:\n          const importEqualsDeclaration = <ts.ImportEqualsDeclaration>node;\n          if (importEqualsDeclaration.moduleReference.kind ===\n              ts.SyntaxKind.ExternalModuleReference) {\n            const externalReference =\n                <ts.ExternalModuleReference>importEqualsDeclaration.moduleReference;\n            if (externalReference.expression) {\n              // An `import <identifier> = require(<module-specifier>);\n              if (!externalReference.expression.parent) {\n                // The `parent` field of a node is set by the TypeScript binder (run as\n                // part of the type checker). Setting it here allows us to call `getText()`\n                // even if the `SourceFile` was not type checked (which looks for `SourceFile`\n                // in the parent chain). This doesn't damage the node as the binder unconditionally\n                // sets the parent.\n                externalReference.expression.parent = externalReference;\n                externalReference.parent = this.sourceFile as any;\n              }\n              const from = stripQuotes(externalReference.expression.getText());\n              symbols.set(\n                  importEqualsDeclaration.name.text, {__symbolic: 'reference', module: from});\n              break;\n            }\n          }\n          symbols.set(\n              importEqualsDeclaration.name.text,\n              {__symbolic: 'error', message: `Unsupported import syntax`});\n          break;\n        case ts.SyntaxKind.ImportDeclaration:\n          const importDecl = <ts.ImportDeclaration>node;\n          if (!importDecl.importClause) {\n            // An `import <module-specifier>` clause which does not bring symbols into scope.\n            break;\n          }\n          if (!importDecl.moduleSpecifier.parent) {\n            // See note above in the `ImportEqualDeclaration` case.\n            importDecl.moduleSpecifier.parent = importDecl;\n            importDecl.parent = this.sourceFile;\n          }\n          const from = stripQuotes(importDecl.moduleSpecifier.getText());\n          if (importDecl.importClause.name) {\n            // An `import <identifier> form <module-specifier>` clause. Record the default symbol.\n            symbols.set(\n                importDecl.importClause.name.text,\n                {__symbolic: 'reference', module: from, default: true});\n          }\n          const bindings = importDecl.importClause.namedBindings;\n          if (bindings) {\n            switch (bindings.kind) {\n              case ts.SyntaxKind.NamedImports:\n                // An `import { [<identifier> [, <identifier>] } from <module-specifier>` clause\n                for (const binding of (<ts.NamedImports>bindings).elements) {\n                  symbols.set(binding.name.text, {\n                    __symbolic: 'reference',\n                    module: from,\n                    name: binding.propertyName ? binding.propertyName.text : binding.name.text\n                  });\n                }\n                break;\n              case ts.SyntaxKind.NamespaceImport:\n                // An `input * as <identifier> from <module-specifier>` clause.\n                symbols.set(\n                    (<ts.NamespaceImport>bindings).name.text,\n                    {__symbolic: 'reference', module: from});\n                break;\n            }\n          }\n          break;\n      }\n      ts.forEachChild(node, visit);\n    };\n    if (this.sourceFile) {\n      ts.forEachChild(this.sourceFile, visit);\n    }\n  }\n}\n\nfunction populateBuiltins(symbols: Map<string, MetadataValue>) {\n  // From lib.core.d.ts (all \"define const\")\n  ['Object', 'Function', 'String', 'Number', 'Array', 'Boolean', 'Map', 'NaN', 'Infinity', 'Math',\n   'Date', 'RegExp', 'Error', 'Error', 'EvalError', 'RangeError', 'ReferenceError', 'SyntaxError',\n   'TypeError', 'URIError', 'JSON', 'ArrayBuffer', 'DataView', 'Int8Array', 'Uint8Array',\n   'Uint8ClampedArray', 'Uint16Array', 'Int16Array', 'Int32Array', 'Uint32Array', 'Float32Array',\n   'Float64Array']\n      .forEach(name => symbols.set(name, {__symbolic: 'reference', name}));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {Evaluator, errorSymbol, recordMapEntry} from './evaluator';\nimport {ClassMetadata, ConstructorMetadata, FunctionMetadata, InterfaceMetadata, METADATA_VERSION, MemberMetadata, MetadataEntry, MetadataError, MetadataMap, MetadataSymbolicBinaryExpression, MetadataSymbolicCallExpression, MetadataSymbolicExpression, MetadataSymbolicIfExpression, MetadataSymbolicIndexExpression, MetadataSymbolicPrefixExpression, MetadataSymbolicReferenceExpression, MetadataSymbolicSelectExpression, MetadataSymbolicSpreadExpression, MetadataValue, MethodMetadata, ModuleExportMetadata, ModuleMetadata, isClassMetadata, isConstructorMetadata, isFunctionMetadata, isMetadataError, isMetadataGlobalReferenceExpression, isMetadataImportDefaultReference, isMetadataImportedSymbolReferenceExpression, isMetadataSymbolicExpression, isMetadataSymbolicReferenceExpression, isMetadataSymbolicSelectExpression, isMethodMetadata} from './schema';\nimport {Symbols} from './symbols';\n\nconst isStatic = (node: ts.Node) => ts.getCombinedModifierFlags(node) & ts.ModifierFlags.Static;\n\n/**\n * A set of collector options to use when collecting metadata.\n */\nexport interface CollectorOptions {\n  /**\n   * Version of the metadata to collect.\n   */\n  version?: number;\n\n  /**\n   * Collect a hidden field \"$quoted$\" in objects literals that record when the key was quoted in\n   * the source.\n   */\n  quotedNames?: boolean;\n\n  /**\n   * Do not simplify invalid expressions.\n   */\n  verboseInvalidExpression?: boolean;\n\n  /**\n   * An expression substitution callback.\n   */\n  substituteExpression?: (value: MetadataValue, node: ts.Node) => MetadataValue;\n}\n\n/**\n * Collect decorator metadata from a TypeScript module.\n */\nexport class MetadataCollector {\n  constructor(private options: CollectorOptions = {}) {}\n\n  /**\n   * Returns a JSON.stringify friendly form describing the decorators of the exported classes from\n   * the source file that is expected to correspond to a module.\n   */\n  public getMetadata(\n      sourceFile: ts.SourceFile, strict: boolean = false,\n      substituteExpression?: (value: MetadataValue, node: ts.Node) => MetadataValue): ModuleMetadata\n      |undefined {\n    const locals = new Symbols(sourceFile);\n    const nodeMap =\n        new Map<MetadataValue|ClassMetadata|InterfaceMetadata|FunctionMetadata, ts.Node>();\n    const composedSubstituter = substituteExpression && this.options.substituteExpression ?\n        (value: MetadataValue, node: ts.Node) =>\n            this.options.substituteExpression !(substituteExpression(value, node), node) :\n        substituteExpression;\n    const evaluatorOptions = substituteExpression ?\n        {...this.options, substituteExpression: composedSubstituter} :\n        this.options;\n    let metadata: {[name: string]: MetadataValue | ClassMetadata | FunctionMetadata}|undefined;\n    const evaluator = new Evaluator(locals, nodeMap, evaluatorOptions, (name, value) => {\n      if (!metadata) metadata = {};\n      metadata[name] = value;\n    });\n    let exports: ModuleExportMetadata[]|undefined = undefined;\n\n    function objFromDecorator(decoratorNode: ts.Decorator): MetadataSymbolicExpression {\n      return <MetadataSymbolicExpression>evaluator.evaluateNode(decoratorNode.expression);\n    }\n\n    function recordEntry<T extends MetadataEntry>(entry: T, node: ts.Node): T {\n      if (composedSubstituter) {\n        entry = composedSubstituter(entry as MetadataValue, node) as T;\n      }\n      return recordMapEntry(entry, node, nodeMap, sourceFile);\n    }\n\n    function errorSym(\n        message: string, node?: ts.Node, context?: {[name: string]: string}): MetadataError {\n      return errorSymbol(message, node, context, sourceFile);\n    }\n\n    function maybeGetSimpleFunction(\n        functionDeclaration: ts.FunctionDeclaration |\n        ts.MethodDeclaration): {func: FunctionMetadata, name: string}|undefined {\n      if (functionDeclaration.name && functionDeclaration.name.kind == ts.SyntaxKind.Identifier) {\n        const nameNode = <ts.Identifier>functionDeclaration.name;\n        const functionName = nameNode.text;\n        const functionBody = functionDeclaration.body;\n        if (functionBody && functionBody.statements.length == 1) {\n          const statement = functionBody.statements[0];\n          if (statement.kind === ts.SyntaxKind.ReturnStatement) {\n            const returnStatement = <ts.ReturnStatement>statement;\n            if (returnStatement.expression) {\n              const func: FunctionMetadata = {\n                __symbolic: 'function',\n                parameters: namesOf(functionDeclaration.parameters),\n                value: evaluator.evaluateNode(returnStatement.expression)\n              };\n              if (functionDeclaration.parameters.some(p => p.initializer != null)) {\n                func.defaults = functionDeclaration.parameters.map(\n                    p => p.initializer && evaluator.evaluateNode(p.initializer));\n              }\n              return recordEntry({func, name: functionName}, functionDeclaration);\n            }\n          }\n        }\n      }\n    }\n\n    function classMetadataOf(classDeclaration: ts.ClassDeclaration): ClassMetadata {\n      const result: ClassMetadata = {__symbolic: 'class'};\n\n      function getDecorators(decorators: ReadonlyArray<ts.Decorator>| undefined):\n          MetadataSymbolicExpression[]|undefined {\n        if (decorators && decorators.length)\n          return decorators.map(decorator => objFromDecorator(decorator));\n        return undefined;\n      }\n\n      function referenceFrom(node: ts.Node): MetadataSymbolicReferenceExpression|MetadataError|\n          MetadataSymbolicSelectExpression {\n        const result = evaluator.evaluateNode(node);\n        if (isMetadataError(result) || isMetadataSymbolicReferenceExpression(result) ||\n            isMetadataSymbolicSelectExpression(result)) {\n          return result;\n        } else {\n          return errorSym('Symbol reference expected', node);\n        }\n      }\n\n      // Add class parents\n      if (classDeclaration.heritageClauses) {\n        classDeclaration.heritageClauses.forEach((hc) => {\n          if (hc.token === ts.SyntaxKind.ExtendsKeyword && hc.types) {\n            hc.types.forEach(type => result.extends = referenceFrom(type.expression));\n          }\n        });\n      }\n\n      // Add arity if the type is generic\n      const typeParameters = classDeclaration.typeParameters;\n      if (typeParameters && typeParameters.length) {\n        result.arity = typeParameters.length;\n      }\n\n      // Add class decorators\n      if (classDeclaration.decorators) {\n        result.decorators = getDecorators(classDeclaration.decorators);\n      }\n\n      // member decorators\n      let members: MetadataMap|null = null;\n      function recordMember(name: string, metadata: MemberMetadata) {\n        if (!members) members = {};\n        const data = members.hasOwnProperty(name) ? members[name] : [];\n        data.push(metadata);\n        members[name] = data;\n      }\n\n      // static member\n      let statics: {[name: string]: MetadataValue | FunctionMetadata}|null = null;\n      function recordStaticMember(name: string, value: MetadataValue | FunctionMetadata) {\n        if (!statics) statics = {};\n        statics[name] = value;\n      }\n\n      for (const member of classDeclaration.members) {\n        let isConstructor = false;\n        switch (member.kind) {\n          case ts.SyntaxKind.Constructor:\n          case ts.SyntaxKind.MethodDeclaration:\n            isConstructor = member.kind === ts.SyntaxKind.Constructor;\n            const method = <ts.MethodDeclaration|ts.ConstructorDeclaration>member;\n            if (isStatic(method)) {\n              const maybeFunc = maybeGetSimpleFunction(<ts.MethodDeclaration>method);\n              if (maybeFunc) {\n                recordStaticMember(maybeFunc.name, maybeFunc.func);\n              }\n              continue;\n            }\n            const methodDecorators = getDecorators(method.decorators);\n            const parameters = method.parameters;\n            const parameterDecoratorData:\n                ((MetadataSymbolicExpression | MetadataError)[] | undefined)[] = [];\n            const parametersData:\n                (MetadataSymbolicReferenceExpression | MetadataError |\n                 MetadataSymbolicSelectExpression | null)[] = [];\n            let hasDecoratorData: boolean = false;\n            let hasParameterData: boolean = false;\n            for (const parameter of parameters) {\n              const parameterData = getDecorators(parameter.decorators);\n              parameterDecoratorData.push(parameterData);\n              hasDecoratorData = hasDecoratorData || !!parameterData;\n              if (isConstructor) {\n                if (parameter.type) {\n                  parametersData.push(referenceFrom(parameter.type));\n                } else {\n                  parametersData.push(null);\n                }\n                hasParameterData = true;\n              }\n            }\n            const data: MethodMetadata = {__symbolic: isConstructor ? 'constructor' : 'method'};\n            const name = isConstructor ? '__ctor__' : evaluator.nameOf(member.name);\n            if (methodDecorators) {\n              data.decorators = methodDecorators;\n            }\n            if (hasDecoratorData) {\n              data.parameterDecorators = parameterDecoratorData;\n            }\n            if (hasParameterData) {\n              (<ConstructorMetadata>data).parameters = parametersData;\n            }\n            if (!isMetadataError(name)) {\n              recordMember(name, data);\n            }\n            break;\n          case ts.SyntaxKind.PropertyDeclaration:\n          case ts.SyntaxKind.GetAccessor:\n          case ts.SyntaxKind.SetAccessor:\n            const property = <ts.PropertyDeclaration>member;\n            if (isStatic(property)) {\n              const name = evaluator.nameOf(property.name);\n              if (!isMetadataError(name)) {\n                if (property.initializer) {\n                  const value = evaluator.evaluateNode(property.initializer);\n                  recordStaticMember(name, value);\n                } else {\n                  recordStaticMember(name, errorSym('Variable not initialized', property.name));\n                }\n              }\n            }\n            const propertyDecorators = getDecorators(property.decorators);\n            if (propertyDecorators) {\n              const name = evaluator.nameOf(property.name);\n              if (!isMetadataError(name)) {\n                recordMember(name, {__symbolic: 'property', decorators: propertyDecorators});\n              }\n            }\n            break;\n        }\n      }\n      if (members) {\n        result.members = members;\n      }\n      if (statics) {\n        result.statics = statics;\n      }\n\n      return recordEntry(result, classDeclaration);\n    }\n\n    // Collect all exported symbols from an exports clause.\n    const exportMap = new Map<string, string>();\n    ts.forEachChild(sourceFile, node => {\n      switch (node.kind) {\n        case ts.SyntaxKind.ExportDeclaration:\n          const exportDeclaration = <ts.ExportDeclaration>node;\n          const {moduleSpecifier, exportClause} = exportDeclaration;\n\n          if (!moduleSpecifier) {\n            // If there is a module specifier there is also an exportClause\n            exportClause !.elements.forEach(spec => {\n              const exportedAs = spec.name.text;\n              const name = (spec.propertyName || spec.name).text;\n              exportMap.set(name, exportedAs);\n            });\n          }\n      }\n    });\n\n    const isExport = (node: ts.Node) =>\n        sourceFile.isDeclarationFile || ts.getCombinedModifierFlags(node) & ts.ModifierFlags.Export;\n    const isExportedIdentifier = (identifier?: ts.Identifier) =>\n        identifier && exportMap.has(identifier.text);\n    const isExported =\n        (node: ts.FunctionDeclaration | ts.ClassDeclaration | ts.TypeAliasDeclaration |\n         ts.InterfaceDeclaration | ts.EnumDeclaration) =>\n            isExport(node) || isExportedIdentifier(node.name);\n    const exportedIdentifierName = (identifier?: ts.Identifier) =>\n        identifier && (exportMap.get(identifier.text) || identifier.text);\n    const exportedName =\n        (node: ts.FunctionDeclaration | ts.ClassDeclaration | ts.InterfaceDeclaration |\n         ts.TypeAliasDeclaration | ts.EnumDeclaration) => exportedIdentifierName(node.name);\n\n\n    // Pre-declare classes and functions\n    ts.forEachChild(sourceFile, node => {\n      switch (node.kind) {\n        case ts.SyntaxKind.ClassDeclaration:\n          const classDeclaration = <ts.ClassDeclaration>node;\n          if (classDeclaration.name) {\n            const className = classDeclaration.name.text;\n            if (isExported(classDeclaration)) {\n              locals.define(\n                  className, {__symbolic: 'reference', name: exportedName(classDeclaration)});\n            } else {\n              locals.define(\n                  className, errorSym('Reference to non-exported class', node, {className}));\n            }\n          }\n          break;\n\n        case ts.SyntaxKind.InterfaceDeclaration:\n          const interfaceDeclaration = <ts.InterfaceDeclaration>node;\n          if (interfaceDeclaration.name) {\n            const interfaceName = interfaceDeclaration.name.text;\n            // All references to interfaces should be converted to references to `any`.\n            locals.define(interfaceName, {__symbolic: 'reference', name: 'any'});\n          }\n          break;\n\n        case ts.SyntaxKind.FunctionDeclaration:\n          const functionDeclaration = <ts.FunctionDeclaration>node;\n          if (!isExported(functionDeclaration)) {\n            // Report references to this function as an error.\n            const nameNode = functionDeclaration.name;\n            if (nameNode && nameNode.text) {\n              locals.define(\n                  nameNode.text,\n                  errorSym(\n                      'Reference to a non-exported function', nameNode, {name: nameNode.text}));\n            }\n          }\n          break;\n      }\n    });\n\n    ts.forEachChild(sourceFile, node => {\n      switch (node.kind) {\n        case ts.SyntaxKind.ExportDeclaration:\n          // Record export declarations\n          const exportDeclaration = <ts.ExportDeclaration>node;\n          const {moduleSpecifier, exportClause} = exportDeclaration;\n\n          if (!moduleSpecifier) {\n            // no module specifier -> export {propName as name};\n            if (exportClause) {\n              exportClause.elements.forEach(spec => {\n                const name = spec.name.text;\n                // If the symbol was not already exported, export a reference since it is a\n                // reference to an import\n                if (!metadata || !metadata[name]) {\n                  const propNode = spec.propertyName || spec.name;\n                  const value: MetadataValue = evaluator.evaluateNode(propNode);\n                  if (!metadata) metadata = {};\n                  metadata[name] = recordEntry(value, node);\n                }\n              });\n            }\n          }\n\n          if (moduleSpecifier && moduleSpecifier.kind == ts.SyntaxKind.StringLiteral) {\n            // Ignore exports that don't have string literals as exports.\n            // This is allowed by the syntax but will be flagged as an error by the type checker.\n            const from = (<ts.StringLiteral>moduleSpecifier).text;\n            const moduleExport: ModuleExportMetadata = {from};\n            if (exportClause) {\n              moduleExport.export = exportClause.elements.map(\n                  spec => spec.propertyName ? {name: spec.propertyName.text, as: spec.name.text} :\n                                              spec.name.text);\n            }\n            if (!exports) exports = [];\n            exports.push(moduleExport);\n          }\n          break;\n        case ts.SyntaxKind.ClassDeclaration:\n          const classDeclaration = <ts.ClassDeclaration>node;\n          if (classDeclaration.name) {\n            if (isExported(classDeclaration)) {\n              const name = exportedName(classDeclaration);\n              if (name) {\n                if (!metadata) metadata = {};\n                metadata[name] = classMetadataOf(classDeclaration);\n              }\n            }\n          }\n          // Otherwise don't record metadata for the class.\n          break;\n\n        case ts.SyntaxKind.TypeAliasDeclaration:\n          const typeDeclaration = <ts.TypeAliasDeclaration>node;\n          if (typeDeclaration.name && isExported(typeDeclaration)) {\n            const name = exportedName(typeDeclaration);\n            if (name) {\n              if (!metadata) metadata = {};\n              metadata[name] = {__symbolic: 'interface'};\n            }\n          }\n          break;\n\n        case ts.SyntaxKind.InterfaceDeclaration:\n          const interfaceDeclaration = <ts.InterfaceDeclaration>node;\n          if (interfaceDeclaration.name && isExported(interfaceDeclaration)) {\n            const name = exportedName(interfaceDeclaration);\n            if (name) {\n              if (!metadata) metadata = {};\n              metadata[name] = {__symbolic: 'interface'};\n            }\n          }\n          break;\n\n        case ts.SyntaxKind.FunctionDeclaration:\n          // Record functions that return a single value. Record the parameter\n          // names substitution will be performed by the StaticReflector.\n          const functionDeclaration = <ts.FunctionDeclaration>node;\n          if (isExported(functionDeclaration) && functionDeclaration.name) {\n            const name = exportedName(functionDeclaration);\n            const maybeFunc = maybeGetSimpleFunction(functionDeclaration);\n            if (name) {\n              if (!metadata) metadata = {};\n              metadata[name] =\n                  maybeFunc ? recordEntry(maybeFunc.func, node) : {__symbolic: 'function'};\n            }\n          }\n          break;\n\n        case ts.SyntaxKind.EnumDeclaration:\n          const enumDeclaration = <ts.EnumDeclaration>node;\n          if (isExported(enumDeclaration)) {\n            const enumValueHolder: {[name: string]: MetadataValue} = {};\n            const enumName = exportedName(enumDeclaration);\n            let nextDefaultValue: MetadataValue = 0;\n            let writtenMembers = 0;\n            for (const member of enumDeclaration.members) {\n              let enumValue: MetadataValue;\n              if (!member.initializer) {\n                enumValue = nextDefaultValue;\n              } else {\n                enumValue = evaluator.evaluateNode(member.initializer);\n              }\n              let name: string|undefined = undefined;\n              if (member.name.kind == ts.SyntaxKind.Identifier) {\n                const identifier = <ts.Identifier>member.name;\n                name = identifier.text;\n                enumValueHolder[name] = enumValue;\n                writtenMembers++;\n              }\n              if (typeof enumValue === 'number') {\n                nextDefaultValue = enumValue + 1;\n              } else if (name) {\n                nextDefaultValue = {\n                  __symbolic: 'binary',\n                  operator: '+',\n                  left: {\n                    __symbolic: 'select',\n                    expression: recordEntry({__symbolic: 'reference', name: enumName}, node), name\n                  }\n                };\n              } else {\n                nextDefaultValue =\n                    recordEntry(errorSym('Unsupported enum member name', member.name), node);\n              }\n            }\n            if (writtenMembers) {\n              if (enumName) {\n                if (!metadata) metadata = {};\n                metadata[enumName] = recordEntry(enumValueHolder, node);\n              }\n            }\n          }\n          break;\n\n        case ts.SyntaxKind.VariableStatement:\n          const variableStatement = <ts.VariableStatement>node;\n          for (const variableDeclaration of variableStatement.declarationList.declarations) {\n            if (variableDeclaration.name.kind == ts.SyntaxKind.Identifier) {\n              const nameNode = <ts.Identifier>variableDeclaration.name;\n              let varValue: MetadataValue;\n              if (variableDeclaration.initializer) {\n                varValue = evaluator.evaluateNode(variableDeclaration.initializer);\n              } else {\n                varValue = recordEntry(errorSym('Variable not initialized', nameNode), nameNode);\n              }\n              let exported = false;\n              if (isExport(variableStatement) || isExport(variableDeclaration) ||\n                  isExportedIdentifier(nameNode)) {\n                const name = exportedIdentifierName(nameNode);\n                if (name) {\n                  if (!metadata) metadata = {};\n                  metadata[name] = recordEntry(varValue, node);\n                }\n                exported = true;\n              }\n              if (typeof varValue == 'string' || typeof varValue == 'number' ||\n                  typeof varValue == 'boolean') {\n                locals.define(nameNode.text, varValue);\n                if (exported) {\n                  locals.defineReference(\n                      nameNode.text, {__symbolic: 'reference', name: nameNode.text});\n                }\n              } else if (!exported) {\n                if (varValue && !isMetadataError(varValue)) {\n                  locals.define(nameNode.text, recordEntry(varValue, node));\n                } else {\n                  locals.define(\n                      nameNode.text,\n                      recordEntry(\n                          errorSym('Reference to a local symbol', nameNode, {name: nameNode.text}),\n                          node));\n                }\n              }\n            } else {\n              // Destructuring (or binding) declarations are not supported,\n              // var {<identifier>[, <identifier>]+} = <expression>;\n              //   or\n              // var [<identifier>[, <identifier}+] = <expression>;\n              // are not supported.\n              const report: (nameNode: ts.Node) => void = (nameNode: ts.Node) => {\n                switch (nameNode.kind) {\n                  case ts.SyntaxKind.Identifier:\n                    const name = <ts.Identifier>nameNode;\n                    const varValue = errorSym('Destructuring not supported', name);\n                    locals.define(name.text, varValue);\n                    if (isExport(node)) {\n                      if (!metadata) metadata = {};\n                      metadata[name.text] = varValue;\n                    }\n                    break;\n                  case ts.SyntaxKind.BindingElement:\n                    const bindingElement = <ts.BindingElement>nameNode;\n                    report(bindingElement.name);\n                    break;\n                  case ts.SyntaxKind.ObjectBindingPattern:\n                  case ts.SyntaxKind.ArrayBindingPattern:\n                    const bindings = <ts.BindingPattern>nameNode;\n                    (bindings as any).elements.forEach(report);\n                    break;\n                }\n              };\n              report(variableDeclaration.name);\n            }\n          }\n          break;\n      }\n    });\n\n    if (metadata || exports) {\n      if (!metadata)\n        metadata = {};\n      else if (strict) {\n        validateMetadata(sourceFile, nodeMap, metadata);\n      }\n      const result: ModuleMetadata = {\n        __symbolic: 'module',\n        version: this.options.version || METADATA_VERSION, metadata\n      };\n      if (sourceFile.moduleName) result.importAs = sourceFile.moduleName;\n      if (exports) result.exports = exports;\n      return result;\n    }\n  }\n}\n\n// This will throw if the metadata entry given contains an error node.\nfunction validateMetadata(\n    sourceFile: ts.SourceFile, nodeMap: Map<MetadataEntry, ts.Node>,\n    metadata: {[name: string]: MetadataEntry}) {\n  let locals: Set<string> = new Set(['Array', 'Object', 'Set', 'Map', 'string', 'number', 'any']);\n\n  function validateExpression(\n      expression: MetadataValue | MetadataSymbolicExpression | MetadataError) {\n    if (!expression) {\n      return;\n    } else if (Array.isArray(expression)) {\n      expression.forEach(validateExpression);\n    } else if (typeof expression === 'object' && !expression.hasOwnProperty('__symbolic')) {\n      Object.getOwnPropertyNames(expression).forEach(v => validateExpression((<any>expression)[v]));\n    } else if (isMetadataError(expression)) {\n      reportError(expression);\n    } else if (isMetadataGlobalReferenceExpression(expression)) {\n      if (!locals.has(expression.name)) {\n        const reference = <MetadataValue>metadata[expression.name];\n        if (reference) {\n          validateExpression(reference);\n        }\n      }\n    } else if (isFunctionMetadata(expression)) {\n      validateFunction(<any>expression);\n    } else if (isMetadataSymbolicExpression(expression)) {\n      switch (expression.__symbolic) {\n        case 'binary':\n          const binaryExpression = <MetadataSymbolicBinaryExpression>expression;\n          validateExpression(binaryExpression.left);\n          validateExpression(binaryExpression.right);\n          break;\n        case 'call':\n        case 'new':\n          const callExpression = <MetadataSymbolicCallExpression>expression;\n          validateExpression(callExpression.expression);\n          if (callExpression.arguments) callExpression.arguments.forEach(validateExpression);\n          break;\n        case 'index':\n          const indexExpression = <MetadataSymbolicIndexExpression>expression;\n          validateExpression(indexExpression.expression);\n          validateExpression(indexExpression.index);\n          break;\n        case 'pre':\n          const prefixExpression = <MetadataSymbolicPrefixExpression>expression;\n          validateExpression(prefixExpression.operand);\n          break;\n        case 'select':\n          const selectExpression = <MetadataSymbolicSelectExpression>expression;\n          validateExpression(selectExpression.expression);\n          break;\n        case 'spread':\n          const spreadExpression = <MetadataSymbolicSpreadExpression>expression;\n          validateExpression(spreadExpression.expression);\n          break;\n        case 'if':\n          const ifExpression = <MetadataSymbolicIfExpression>expression;\n          validateExpression(ifExpression.condition);\n          validateExpression(ifExpression.elseExpression);\n          validateExpression(ifExpression.thenExpression);\n          break;\n      }\n    }\n  }\n\n  function validateMember(classData: ClassMetadata, member: MemberMetadata) {\n    if (member.decorators) {\n      member.decorators.forEach(validateExpression);\n    }\n    if (isMethodMetadata(member) && member.parameterDecorators) {\n      member.parameterDecorators.forEach(validateExpression);\n    }\n    // Only validate parameters of classes for which we know that are used with our DI\n    if (classData.decorators && isConstructorMetadata(member) && member.parameters) {\n      member.parameters.forEach(validateExpression);\n    }\n  }\n\n  function validateClass(classData: ClassMetadata) {\n    if (classData.decorators) {\n      classData.decorators.forEach(validateExpression);\n    }\n    if (classData.members) {\n      Object.getOwnPropertyNames(classData.members)\n          .forEach(name => classData.members ![name].forEach((m) => validateMember(classData, m)));\n    }\n    if (classData.statics) {\n      Object.getOwnPropertyNames(classData.statics).forEach(name => {\n        const staticMember = classData.statics ![name];\n        if (isFunctionMetadata(staticMember)) {\n          validateExpression(staticMember.value);\n        } else {\n          validateExpression(staticMember);\n        }\n      });\n    }\n  }\n\n  function validateFunction(functionDeclaration: FunctionMetadata) {\n    if (functionDeclaration.value) {\n      const oldLocals = locals;\n      if (functionDeclaration.parameters) {\n        locals = new Set(oldLocals.values());\n        if (functionDeclaration.parameters)\n          functionDeclaration.parameters.forEach(n => locals.add(n));\n      }\n      validateExpression(functionDeclaration.value);\n      locals = oldLocals;\n    }\n  }\n\n  function shouldReportNode(node: ts.Node | undefined) {\n    if (node) {\n      const nodeStart = node.getStart();\n      return !(\n          node.pos != nodeStart &&\n          sourceFile.text.substring(node.pos, nodeStart).indexOf('@dynamic') >= 0);\n    }\n    return true;\n  }\n\n  function reportError(error: MetadataError) {\n    const node = nodeMap.get(error);\n    if (shouldReportNode(node)) {\n      const lineInfo = error.line != undefined ?\n          error.character != undefined ? `:${error.line + 1}:${error.character + 1}` :\n                                         `:${error.line + 1}` :\n          '';\n      throw new Error(\n          `${sourceFile.fileName}${lineInfo}: Metadata collected contains an error that will be reported at runtime: ${expandedMessage(error)}.\\n  ${JSON.stringify(error)}`);\n    }\n  }\n\n  Object.getOwnPropertyNames(metadata).forEach(name => {\n    const entry = metadata[name];\n    try {\n      if (isClassMetadata(entry)) {\n        validateClass(entry);\n      }\n    } catch (e) {\n      const node = nodeMap.get(entry);\n      if (shouldReportNode(node)) {\n        if (node) {\n          const {line, character} = sourceFile.getLineAndCharacterOfPosition(node.getStart());\n          throw new Error(\n              `${sourceFile.fileName}:${line + 1}:${character + 1}: Error encountered in metadata generated for exported symbol '${name}': \\n ${e.message}`);\n        }\n        throw new Error(\n            `Error encountered in metadata generated for exported symbol ${name}: \\n ${e.message}`);\n      }\n    }\n  });\n}\n\n// Collect parameter names from a function.\nfunction namesOf(parameters: ts.NodeArray<ts.ParameterDeclaration>): string[] {\n  const result: string[] = [];\n\n  function addNamesOf(name: ts.Identifier | ts.BindingPattern) {\n    if (name.kind == ts.SyntaxKind.Identifier) {\n      const identifier = <ts.Identifier>name;\n      result.push(identifier.text);\n    } else {\n      const bindingPattern = <ts.BindingPattern>name;\n      for (const element of bindingPattern.elements) {\n        const name = (element as any).name;\n        if (name) {\n          addNamesOf(name);\n        }\n      }\n    }\n  }\n\n  for (const parameter of parameters) {\n    addNamesOf(parameter.name);\n  }\n\n  return result;\n}\n\nfunction expandedMessage(error: any): string {\n  switch (error.message) {\n    case 'Reference to non-exported class':\n      if (error.context && error.context.className) {\n        return `Reference to a non-exported class ${error.context.className}. Consider exporting the class`;\n      }\n      break;\n    case 'Variable not initialized':\n      return 'Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler';\n    case 'Destructuring not supported':\n      return 'Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring';\n    case 'Could not resolve type':\n      if (error.context && error.context.typeName) {\n        return `Could not resolve type ${error.context.typeName}`;\n      }\n      break;\n    case 'Function call not supported':\n      let prefix =\n          error.context && error.context.name ? `Calling function '${error.context.name}', f` : 'F';\n      return prefix +\n          'unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function';\n    case 'Reference to a local symbol':\n      if (error.context && error.context.name) {\n        return `Reference to a local (non-exported) symbol '${error.context.name}'. Consider exporting the symbol`;\n      }\n  }\n  return error.message;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {MetadataCollector} from '../metadata/collector';\nimport {ClassMetadata, ConstructorMetadata, FunctionMetadata, METADATA_VERSION, MemberMetadata, MetadataEntry, MetadataError, MetadataImportedSymbolReferenceExpression, MetadataMap, MetadataObject, MetadataSymbolicExpression, MetadataSymbolicReferenceExpression, MetadataValue, MethodMetadata, ModuleExportMetadata, ModuleMetadata, isClassMetadata, isConstructorMetadata, isFunctionMetadata, isInterfaceMetadata, isMetadataError, isMetadataGlobalReferenceExpression, isMetadataImportedSymbolReferenceExpression, isMetadataModuleReferenceExpression, isMetadataSymbolicExpression, isMethodMetadata} from '../metadata/schema';\nimport {MetadataCache} from '../transformers/metadata_cache';\n\n\n\n// The character set used to produce private names.\nconst PRIVATE_NAME_CHARS = 'abcdefghijklmnopqrstuvwxyz';\n\ninterface Symbol {\n  module: string;\n  name: string;\n\n  // Produced by indirectly by exportAll() for symbols re-export another symbol.\n  exports?: Symbol;\n\n  // Produced by indirectly by exportAll() for symbols are re-exported by another symbol.\n  reexportedAs?: Symbol;\n\n  // Produced by canonicalizeSymbols() for all symbols. A symbol is private if it is not\n  // exported by the index.\n  isPrivate?: boolean;\n\n  // Produced by canonicalizeSymbols() for all symbols. This is the one symbol that\n  // respresents all other symbols and is the only symbol that, among all the re-exported\n  // aliases, whose fields can be trusted to contain the correct information.\n  // For private symbols this is the declaration symbol. For public symbols this is the\n  // symbol that is exported.\n  canonicalSymbol?: Symbol;\n\n  // Produced by canonicalizeSymbols() for all symbols. This the symbol that originally\n  // declared the value and should be used to fetch the value.\n  declaration?: Symbol;\n\n  // A symbol is referenced if it is exported from index or referenced by the value of\n  // a referenced symbol's value.\n  referenced?: boolean;\n\n  // A symbol is marked as a re-export the symbol was rexported from a module that is\n  // not part of the flat module bundle.\n  reexport?: boolean;\n\n  // Only valid for referenced canonical symbols. Produces by convertSymbols().\n  value?: MetadataEntry;\n\n  // Only valid for referenced private symbols. It is the name to use to import the symbol from\n  // the bundle index. Produce by assignPrivateNames();\n  privateName?: string;\n}\n\nexport interface BundleEntries { [name: string]: MetadataEntry; }\n\nexport interface BundlePrivateEntry {\n  privateName: string;\n  name: string;\n  module: string;\n}\n\nexport interface BundledModule {\n  metadata: ModuleMetadata;\n  privates: BundlePrivateEntry[];\n}\n\nexport interface MetadataBundlerHost {\n  getMetadataFor(moduleName: string): ModuleMetadata|undefined;\n}\n\ntype StaticsMetadata = {\n  [name: string]: MetadataValue | FunctionMetadata;\n};\n\nexport class MetadataBundler {\n  private symbolMap = new Map<string, Symbol>();\n  private metadataCache = new Map<string, ModuleMetadata|undefined>();\n  private exports = new Map<string, Symbol[]>();\n  private rootModule: string;\n  private privateSymbolPrefix: string;\n  private exported: Set<Symbol>;\n\n  constructor(\n      private root: string, private importAs: string|undefined, private host: MetadataBundlerHost,\n      privateSymbolPrefix?: string) {\n    this.rootModule = `./${path.basename(root)}`;\n    this.privateSymbolPrefix = (privateSymbolPrefix || '').replace(/\\W/g, '_');\n  }\n\n  getMetadataBundle(): BundledModule {\n    // Export the root module. This also collects the transitive closure of all values referenced by\n    // the exports.\n    const exportedSymbols = this.exportAll(this.rootModule);\n    this.canonicalizeSymbols(exportedSymbols);\n    // TODO: exports? e.g. a module re-exports a symbol from another bundle\n    const metadata = this.getEntries(exportedSymbols);\n    const privates = Array.from(this.symbolMap.values())\n                         .filter(s => s.referenced && s.isPrivate)\n                         .map(s => ({\n                                privateName: s.privateName !,\n                                name: s.declaration !.name,\n                                module: s.declaration !.module\n                              }));\n    const origins = Array.from(this.symbolMap.values())\n                        .filter(s => s.referenced && !s.reexport)\n                        .reduce<{[name: string]: string}>((p, s) => {\n                          p[s.isPrivate ? s.privateName ! : s.name] = s.declaration !.module;\n                          return p;\n                        }, {});\n    const exports = this.getReExports(exportedSymbols);\n    return {\n      metadata: {\n        __symbolic: 'module',\n        version: METADATA_VERSION,\n        exports: exports.length ? exports : undefined, metadata, origins,\n        importAs: this.importAs !\n      },\n      privates\n    };\n  }\n\n  static resolveModule(importName: string, from: string): string {\n    return resolveModule(importName, from);\n  }\n\n  private getMetadata(moduleName: string): ModuleMetadata|undefined {\n    let result = this.metadataCache.get(moduleName);\n    if (!result) {\n      if (moduleName.startsWith('.')) {\n        const fullModuleName = resolveModule(moduleName, this.root);\n        result = this.host.getMetadataFor(fullModuleName);\n      }\n      this.metadataCache.set(moduleName, result);\n    }\n    return result;\n  }\n\n  private exportAll(moduleName: string): Symbol[] {\n    const module = this.getMetadata(moduleName);\n    let result = this.exports.get(moduleName);\n\n    if (result) {\n      return result;\n    }\n\n    result = [];\n\n    const exportSymbol = (exportedSymbol: Symbol, exportAs: string) => {\n      const symbol = this.symbolOf(moduleName, exportAs);\n      result !.push(symbol);\n      exportedSymbol.reexportedAs = symbol;\n      symbol.exports = exportedSymbol;\n    };\n\n    // Export all the symbols defined in this module.\n    if (module && module.metadata) {\n      for (let key in module.metadata) {\n        const data = module.metadata[key];\n        if (isMetadataImportedSymbolReferenceExpression(data)) {\n          // This is a re-export of an imported symbol. Record this as a re-export.\n          const exportFrom = resolveModule(data.module, moduleName);\n          this.exportAll(exportFrom);\n          const symbol = this.symbolOf(exportFrom, data.name);\n          exportSymbol(symbol, key);\n        } else {\n          // Record that this symbol is exported by this module.\n          result.push(this.symbolOf(moduleName, key));\n        }\n      }\n    }\n\n    // Export all the re-exports from this module\n    if (module && module.exports) {\n      for (const exportDeclaration of module.exports) {\n        const exportFrom = resolveModule(exportDeclaration.from, moduleName);\n        // Record all the exports from the module even if we don't use it directly.\n        const exportedSymbols = this.exportAll(exportFrom);\n        if (exportDeclaration.export) {\n          // Re-export all the named exports from a module.\n          for (const exportItem of exportDeclaration.export) {\n            const name = typeof exportItem == 'string' ? exportItem : exportItem.name;\n            const exportAs = typeof exportItem == 'string' ? exportItem : exportItem.as;\n            const symbol = this.symbolOf(exportFrom, name);\n            if (exportedSymbols && exportedSymbols.length == 1 && exportedSymbols[0].reexport &&\n                exportedSymbols[0].name == '*') {\n              // This is a named export from a module we have no metadata about. Record the named\n              // export as a re-export.\n              symbol.reexport = true;\n            }\n            exportSymbol(this.symbolOf(exportFrom, name), exportAs);\n          }\n        } else {\n          // Re-export all the symbols from the module\n          const exportedSymbols = this.exportAll(exportFrom);\n          for (const exportedSymbol of exportedSymbols) {\n            const name = exportedSymbol.name;\n            exportSymbol(exportedSymbol, name);\n          }\n        }\n      }\n    }\n\n    if (!module) {\n      // If no metadata is found for this import then it is considered external to the\n      // library and should be recorded as a re-export in the final metadata if it is\n      // eventually re-exported.\n      const symbol = this.symbolOf(moduleName, '*');\n      symbol.reexport = true;\n      result.push(symbol);\n    }\n    this.exports.set(moduleName, result);\n\n    return result;\n  }\n\n  /**\n   * Fill in the canonicalSymbol which is the symbol that should be imported by factories.\n   * The canonical symbol is the one exported by the index file for the bundle or definition\n   * symbol for private symbols that are not exported by bundle index.\n   */\n  private canonicalizeSymbols(exportedSymbols: Symbol[]) {\n    const symbols = Array.from(this.symbolMap.values());\n    this.exported = new Set(exportedSymbols);\n    symbols.forEach(this.canonicalizeSymbol, this);\n  }\n\n  private canonicalizeSymbol(symbol: Symbol) {\n    const rootExport = getRootExport(symbol);\n    const declaration = getSymbolDeclaration(symbol);\n    const isPrivate = !this.exported.has(rootExport);\n    const canonicalSymbol = isPrivate ? declaration : rootExport;\n    symbol.isPrivate = isPrivate;\n    symbol.declaration = declaration;\n    symbol.canonicalSymbol = canonicalSymbol;\n    symbol.reexport = declaration.reexport;\n  }\n\n  private getEntries(exportedSymbols: Symbol[]): BundleEntries {\n    const result: BundleEntries = {};\n\n    const exportedNames = new Set(exportedSymbols.map(s => s.name));\n    let privateName = 0;\n\n    function newPrivateName(prefix: string): string {\n      while (true) {\n        let digits: string[] = [];\n        let index = privateName++;\n        let base = PRIVATE_NAME_CHARS;\n        while (!digits.length || index > 0) {\n          digits.unshift(base[index % base.length]);\n          index = Math.floor(index / base.length);\n        }\n        const result = `\\u0275${prefix}${digits.join('')}`;\n        if (!exportedNames.has(result)) return result;\n      }\n    }\n\n    exportedSymbols.forEach(symbol => this.convertSymbol(symbol));\n\n    const symbolsMap = new Map<string, string[]>();\n    Array.from(this.symbolMap.values()).forEach(symbol => {\n      if (symbol.referenced && !symbol.reexport) {\n        let name = symbol.name;\n        const identifier = `${symbol.declaration!.module}:${symbol.declaration !.name}`;\n        if (symbol.isPrivate && !symbol.privateName) {\n          name = newPrivateName(this.privateSymbolPrefix);\n          symbol.privateName = name;\n        }\n        if (symbolsMap.has(identifier)) {\n          const names = symbolsMap.get(identifier);\n          names !.push(name);\n        } else {\n          symbolsMap.set(identifier, [name]);\n        }\n        result[name] = symbol.value !;\n      }\n    });\n\n    // check for duplicated entries\n    symbolsMap.forEach((names: string[], identifier: string) => {\n      if (names.length > 1) {\n        const [module, declaredName] = identifier.split(':');\n        // prefer the export that uses the declared name (if any)\n        let reference = names.indexOf(declaredName);\n        if (reference === -1) {\n          reference = 0;\n        }\n\n        // keep one entry and replace the others by references\n        names.forEach((name: string, i: number) => {\n          if (i !== reference) {\n            result[name] = {__symbolic: 'reference', name: names[reference]};\n          }\n        });\n      }\n    });\n\n    return result;\n  }\n\n  private getReExports(exportedSymbols: Symbol[]): ModuleExportMetadata[] {\n    type ExportClause = {name: string, as: string}[];\n    const modules = new Map<string, ExportClause>();\n    const exportAlls = new Set<string>();\n    for (const symbol of exportedSymbols) {\n      if (symbol.reexport) {\n        // symbol.declaration is guaranteed to be defined during the phase this method is called.\n        const declaration = symbol.declaration !;\n        const module = declaration.module;\n        if (declaration !.name == '*') {\n          // Reexport all the symbols.\n          exportAlls.add(declaration.module);\n        } else {\n          // Re-export the symbol as the exported name.\n          let entry = modules.get(module);\n          if (!entry) {\n            entry = [];\n            modules.set(module, entry);\n          }\n          const as = symbol.name;\n          const name = declaration.name;\n          entry.push({name, as});\n        }\n      }\n    }\n    return [\n      ...Array.from(exportAlls.values()).map(from => ({from})),\n      ...Array.from(modules.entries()).map(([from, exports]) => ({export: exports, from}))\n    ];\n  }\n\n  private convertSymbol(symbol: Symbol) {\n    // canonicalSymbol is ensured to be defined before this is called.\n    const canonicalSymbol = symbol.canonicalSymbol !;\n\n    if (!canonicalSymbol.referenced) {\n      canonicalSymbol.referenced = true;\n      // declaration is ensured to be definded before this method is called.\n      const declaration = canonicalSymbol.declaration !;\n      const module = this.getMetadata(declaration.module);\n      if (module) {\n        const value = module.metadata[declaration.name];\n        if (value && !declaration.name.startsWith('___')) {\n          canonicalSymbol.value = this.convertEntry(declaration.module, value);\n        }\n      }\n    }\n  }\n\n  private convertEntry(moduleName: string, value: MetadataEntry): MetadataEntry {\n    if (isClassMetadata(value)) {\n      return this.convertClass(moduleName, value);\n    }\n    if (isFunctionMetadata(value)) {\n      return this.convertFunction(moduleName, value);\n    }\n    if (isInterfaceMetadata(value)) {\n      return value;\n    }\n    return this.convertValue(moduleName, value);\n  }\n\n  private convertClass(moduleName: string, value: ClassMetadata): ClassMetadata {\n    return {\n      __symbolic: 'class',\n      arity: value.arity,\n      extends: this.convertExpression(moduleName, value.extends) !,\n      decorators:\n          value.decorators && value.decorators.map(d => this.convertExpression(moduleName, d) !),\n      members: this.convertMembers(moduleName, value.members !),\n      statics: value.statics && this.convertStatics(moduleName, value.statics)\n    };\n  }\n\n  private convertMembers(moduleName: string, members: MetadataMap): MetadataMap {\n    const result: MetadataMap = {};\n    for (const name in members) {\n      const value = members[name];\n      result[name] = value.map(v => this.convertMember(moduleName, v));\n    }\n    return result;\n  }\n\n  private convertMember(moduleName: string, member: MemberMetadata) {\n    const result: MemberMetadata = {__symbolic: member.__symbolic};\n    result.decorators =\n        member.decorators && member.decorators.map(d => this.convertExpression(moduleName, d) !);\n    if (isMethodMetadata(member)) {\n      (result as MethodMetadata).parameterDecorators = member.parameterDecorators &&\n          member.parameterDecorators.map(\n              d => d && d.map(p => this.convertExpression(moduleName, p) !));\n      if (isConstructorMetadata(member)) {\n        if (member.parameters) {\n          (result as ConstructorMetadata).parameters =\n              member.parameters.map(p => this.convertExpression(moduleName, p));\n        }\n      }\n    }\n    return result;\n  }\n\n  private convertStatics(moduleName: string, statics: StaticsMetadata): StaticsMetadata {\n    let result: StaticsMetadata = {};\n    for (const key in statics) {\n      const value = statics[key];\n      result[key] = isFunctionMetadata(value) ? this.convertFunction(moduleName, value) : value;\n    }\n    return result;\n  }\n\n  private convertFunction(moduleName: string, value: FunctionMetadata): FunctionMetadata {\n    return {\n      __symbolic: 'function',\n      parameters: value.parameters,\n      defaults: value.defaults && value.defaults.map(v => this.convertValue(moduleName, v)),\n      value: this.convertValue(moduleName, value.value)\n    };\n  }\n\n  private convertValue(moduleName: string, value: MetadataValue): MetadataValue {\n    if (isPrimitive(value)) {\n      return value;\n    }\n    if (isMetadataError(value)) {\n      return this.convertError(moduleName, value);\n    }\n    if (isMetadataSymbolicExpression(value)) {\n      return this.convertExpression(moduleName, value) !;\n    }\n    if (Array.isArray(value)) {\n      return value.map(v => this.convertValue(moduleName, v));\n    }\n\n    // Otherwise it is a metadata object.\n    const object = value as MetadataObject;\n    const result: MetadataObject = {};\n    for (const key in object) {\n      result[key] = this.convertValue(moduleName, object[key]);\n    }\n    return result;\n  }\n\n  private convertExpression(\n      moduleName: string, value: MetadataSymbolicExpression|MetadataError|null|\n      undefined): MetadataSymbolicExpression|MetadataError|undefined|null {\n    if (value) {\n      switch (value.__symbolic) {\n        case 'error':\n          return this.convertError(moduleName, value as MetadataError);\n        case 'reference':\n          return this.convertReference(moduleName, value as MetadataSymbolicReferenceExpression);\n        default:\n          return this.convertExpressionNode(moduleName, value);\n      }\n    }\n    return value;\n  }\n\n  private convertError(module: string, value: MetadataError): MetadataError {\n    return {\n      __symbolic: 'error',\n      message: value.message,\n      line: value.line,\n      character: value.character,\n      context: value.context, module\n    };\n  }\n\n  private convertReference(moduleName: string, value: MetadataSymbolicReferenceExpression):\n      MetadataSymbolicReferenceExpression|MetadataError|undefined {\n    const createReference = (symbol: Symbol): MetadataSymbolicReferenceExpression => {\n      const declaration = symbol.declaration !;\n      if (declaration.module.startsWith('.')) {\n        // Reference to a symbol defined in the module. Ensure it is converted then return a\n        // references to the final symbol.\n        this.convertSymbol(symbol);\n        return {\n          __symbolic: 'reference',\n          get name() {\n            // Resolved lazily because private names are assigned late.\n            const canonicalSymbol = symbol.canonicalSymbol !;\n            if (canonicalSymbol.isPrivate == null) {\n              throw Error('Invalid state: isPrivate was not initialized');\n            }\n            return canonicalSymbol.isPrivate ? canonicalSymbol.privateName ! : canonicalSymbol.name;\n          }\n        };\n      } else {\n        // The symbol was a re-exported symbol from another module. Return a reference to the\n        // original imported symbol.\n        return {__symbolic: 'reference', name: declaration.name, module: declaration.module};\n      }\n    };\n\n    if (isMetadataGlobalReferenceExpression(value)) {\n      const metadata = this.getMetadata(moduleName);\n      if (metadata && metadata.metadata && metadata.metadata[value.name]) {\n        // Reference to a symbol defined in the module\n        return createReference(this.canonicalSymbolOf(moduleName, value.name));\n      }\n\n      // If a reference has arguments, the arguments need to be converted.\n      if (value.arguments) {\n        return {\n          __symbolic: 'reference',\n          name: value.name,\n          arguments: value.arguments.map(a => this.convertValue(moduleName, a))\n        };\n      }\n\n      // Global references without arguments (such as to Math or JSON) are unmodified.\n      return value;\n    }\n\n    if (isMetadataImportedSymbolReferenceExpression(value)) {\n      // References to imported symbols are separated into two, references to bundled modules and\n      // references to modules external to the bundle. If the module reference is relative it is\n      // assumed to be in the bundle. If it is Global it is assumed to be outside the bundle.\n      // References to symbols outside the bundle are left unmodified. References to symbol inside\n      // the bundle need to be converted to a bundle import reference reachable from the bundle\n      // index.\n\n      if (value.module.startsWith('.')) {\n        // Reference is to a symbol defined inside the module. Convert the reference to a reference\n        // to the canonical symbol.\n        const referencedModule = resolveModule(value.module, moduleName);\n        const referencedName = value.name;\n        return createReference(this.canonicalSymbolOf(referencedModule, referencedName));\n      }\n\n      // Value is a reference to a symbol defined outside the module.\n      if (value.arguments) {\n        // If a reference has arguments the arguments need to be converted.\n        return {\n          __symbolic: 'reference',\n          name: value.name,\n          module: value.module,\n          arguments: value.arguments.map(a => this.convertValue(moduleName, a))\n        };\n      }\n      return value;\n    }\n\n    if (isMetadataModuleReferenceExpression(value)) {\n      // Cannot support references to bundled modules as the internal modules of a bundle are erased\n      // by the bundler.\n      if (value.module.startsWith('.')) {\n        return {\n          __symbolic: 'error',\n          message: 'Unsupported bundled module reference',\n          context: {module: value.module}\n        };\n      }\n\n      // References to unbundled modules are unmodified.\n      return value;\n    }\n  }\n\n  private convertExpressionNode(moduleName: string, value: MetadataSymbolicExpression):\n      MetadataSymbolicExpression {\n    const result: MetadataSymbolicExpression = { __symbolic: value.__symbolic } as any;\n    for (const key in value) {\n      (result as any)[key] = this.convertValue(moduleName, (value as any)[key]);\n    }\n    return result;\n  }\n\n  private symbolOf(module: string, name: string): Symbol {\n    const symbolKey = `${module}:${name}`;\n    let symbol = this.symbolMap.get(symbolKey);\n    if (!symbol) {\n      symbol = {module, name};\n      this.symbolMap.set(symbolKey, symbol);\n    }\n    return symbol;\n  }\n\n  private canonicalSymbolOf(module: string, name: string): Symbol {\n    // Ensure the module has been seen.\n    this.exportAll(module);\n    const symbol = this.symbolOf(module, name);\n    if (!symbol.canonicalSymbol) {\n      this.canonicalizeSymbol(symbol);\n    }\n    return symbol;\n  }\n}\n\nexport class CompilerHostAdapter implements MetadataBundlerHost {\n  private collector = new MetadataCollector();\n\n  constructor(private host: ts.CompilerHost, private cache: MetadataCache|null) {}\n\n  getMetadataFor(fileName: string): ModuleMetadata|undefined {\n    if (!this.host.fileExists(fileName + '.ts')) return undefined;\n    const sourceFile = this.host.getSourceFile(fileName + '.ts', ts.ScriptTarget.Latest);\n    // If there is a metadata cache, use it to get the metadata for this source file. Otherwise,\n    // fall back on the locally created MetadataCollector.\n    if (!sourceFile) {\n      return undefined;\n    } else if (this.cache) {\n      return this.cache.getMetadata(sourceFile);\n    } else {\n      return this.collector.getMetadata(sourceFile);\n    }\n  }\n}\n\nfunction resolveModule(importName: string, from: string): string {\n  if (importName.startsWith('.') && from) {\n    let normalPath = path.normalize(path.join(path.dirname(from), importName));\n    if (!normalPath.startsWith('.') && from.startsWith('.')) {\n      // path.normalize() preserves leading '../' but not './'. This adds it back.\n      normalPath = `.${path.sep}${normalPath}`;\n    }\n    // Replace windows path delimiters with forward-slashes. Otherwise the paths are not\n    // TypeScript compatible when building the bundle.\n    return normalPath.replace(/\\\\/g, '/');\n  }\n  return importName;\n}\n\nfunction isPrimitive(o: any): o is boolean|string|number {\n  return o === null || (typeof o !== 'function' && typeof o !== 'object');\n}\n\nfunction getRootExport(symbol: Symbol): Symbol {\n  return symbol.reexportedAs ? getRootExport(symbol.reexportedAs) : symbol;\n}\n\nfunction getSymbolDeclaration(symbol: Symbol): Symbol {\n  return symbol.exports ? getSymbolDeclaration(symbol.exports) : symbol;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BundlePrivateEntry} from './bundler';\n\nconst INDEX_HEADER = `/**\n * Generated bundle index. Do not edit.\n */\n`;\n\ntype MapEntry = [string, BundlePrivateEntry[]];\n\nexport function privateEntriesToIndex(index: string, privates: BundlePrivateEntry[]): string {\n  const results: string[] = [INDEX_HEADER];\n\n  // Export all of the index symbols.\n  results.push(`export * from '${index}';`, '');\n\n  // Simplify the exports\n  const exports = new Map<string, BundlePrivateEntry[]>();\n\n  for (const entry of privates) {\n    let entries = exports.get(entry.module);\n    if (!entries) {\n      entries = [];\n      exports.set(entry.module, entries);\n    }\n    entries.push(entry);\n  }\n\n\n  const compareEntries = compare((e: BundlePrivateEntry) => e.name);\n  const compareModules = compare((e: MapEntry) => e[0]);\n  const orderedExports =\n      Array.from(exports)\n          .map(([module, entries]) => <MapEntry>[module, entries.sort(compareEntries)])\n          .sort(compareModules);\n\n  for (const [module, entries] of orderedExports) {\n    let symbols = entries.map(e => `${e.name} as ${e.privateName}`);\n    results.push(`export {${symbols}} from '${module}';`);\n  }\n\n  return results.join('\\n');\n}\n\nfunction compare<E, T>(select: (e: E) => T): (a: E, b: E) => number {\n  return (a, b) => {\n    const ak = select(a);\n    const bk = select(b);\n    return ak > bk ? 1 : ak < bk ? -1 : 0;\n  };\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {CompilerOptions} from '../transformers/api';\nimport {MetadataCache} from '../transformers/metadata_cache';\n\nimport {CompilerHostAdapter, MetadataBundler} from './bundler';\nimport {privateEntriesToIndex} from './index_writer';\n\nconst DTS = /\\.d\\.ts$/;\nconst JS_EXT = /(\\.js|)$/;\n\nfunction createSyntheticIndexHost<H extends ts.CompilerHost>(\n    delegate: H, syntheticIndex: {name: string, content: string, getMetadata: () => string}): H {\n  const normalSyntheticIndexName = path.normalize(syntheticIndex.name);\n\n  const newHost = Object.create(delegate);\n  newHost.fileExists = (fileName: string): boolean => {\n    return path.normalize(fileName) == normalSyntheticIndexName || delegate.fileExists(fileName);\n  };\n\n  newHost.readFile = (fileName: string) => {\n    return path.normalize(fileName) == normalSyntheticIndexName ? syntheticIndex.content :\n                                                                  delegate.readFile(fileName);\n  };\n\n  newHost.getSourceFile =\n      (fileName: string, languageVersion: ts.ScriptTarget, onError?: (message: string) => void) => {\n        if (path.normalize(fileName) == normalSyntheticIndexName) {\n          const sf = ts.createSourceFile(fileName, syntheticIndex.content, languageVersion, true);\n          if ((delegate as any).fileNameToModuleName) {\n            sf.moduleName = (delegate as any).fileNameToModuleName(fileName);\n          }\n          return sf;\n        }\n        return delegate.getSourceFile(fileName, languageVersion, onError);\n      };\n\n  newHost.writeFile =\n      (fileName: string, data: string, writeByteOrderMark: boolean,\n       onError: ((message: string) => void) | undefined,\n       sourceFiles: Readonly<ts.SourceFile>[]) => {\n        delegate.writeFile(fileName, data, writeByteOrderMark, onError, sourceFiles);\n        if (fileName.match(DTS) && sourceFiles && sourceFiles.length == 1 &&\n            path.normalize(sourceFiles[0].fileName) === normalSyntheticIndexName) {\n          // If we are writing the synthetic index, write the metadata along side.\n          const metadataName = fileName.replace(DTS, '.metadata.json');\n          const indexMetadata = syntheticIndex.getMetadata();\n          delegate.writeFile(metadataName, indexMetadata, writeByteOrderMark, onError, []);\n        }\n      };\n  return newHost;\n}\n\nexport function createBundleIndexHost<H extends ts.CompilerHost>(\n    ngOptions: CompilerOptions, rootFiles: ReadonlyArray<string>, host: H,\n    getMetadataCache: () =>\n        MetadataCache): {host: H, indexName?: string, errors?: ts.Diagnostic[]} {\n  const files = rootFiles.filter(f => !DTS.test(f));\n  let indexFile: string|undefined;\n  if (files.length === 1) {\n    indexFile = files[0];\n  } else {\n    for (const f of files) {\n      // Assume the shortest file path called index.ts is the entry point\n      if (f.endsWith(path.sep + 'index.ts')) {\n        if (!indexFile || indexFile.length > f.length) {\n          indexFile = f;\n        }\n      }\n    }\n  }\n  if (!indexFile) {\n    return {\n      host,\n      errors: [{\n        file: null as any as ts.SourceFile,\n        start: null as any as number,\n        length: null as any as number,\n        messageText:\n            'Angular compiler option \"flatModuleIndex\" requires one and only one .ts file in the \"files\" field.',\n        category: ts.DiagnosticCategory.Error,\n        code: 0\n      }]\n    };\n  }\n\n  const indexModule = indexFile.replace(/\\.ts$/, '');\n\n  // The operation of producing a metadata bundle happens twice - once during setup and once during\n  // the emit phase. The first time, the bundle is produced without a metadata cache, to compute the\n  // contents of the flat module index. The bundle produced during emit does use the metadata cache\n  // with associated transforms, so the metadata will have lowered expressions, resource inlining,\n  // etc.\n  const getMetadataBundle = (cache: MetadataCache | null) => {\n    const bundler = new MetadataBundler(\n        indexModule, ngOptions.flatModuleId, new CompilerHostAdapter(host, cache),\n        ngOptions.flatModulePrivateSymbolPrefix);\n    return bundler.getMetadataBundle();\n  };\n\n  // First, produce the bundle with no MetadataCache.\n  const metadataBundle = getMetadataBundle(/* MetadataCache */ null);\n  const name =\n      path.join(path.dirname(indexModule), ngOptions.flatModuleOutFile !.replace(JS_EXT, '.ts'));\n  const libraryIndex = `./${path.basename(indexModule)}`;\n  const content = privateEntriesToIndex(libraryIndex, metadataBundle.privates);\n\n  host = createSyntheticIndexHost(host, {\n    name,\n    content,\n    getMetadata: () => {\n      // The second metadata bundle production happens on-demand, and uses the getMetadataCache\n      // closure to retrieve an up-to-date MetadataCache which is configured with whatever metadata\n      // transforms were used to produce the JS output.\n      const metadataBundle = getMetadataBundle(getMetadataCache());\n      return JSON.stringify(metadataBundle.metadata);\n    }\n  });\n  return {host, indexName: name};\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GeneratedFile, ParseSourceSpan, Position} from '@angular/compiler';\nimport * as ts from 'typescript';\n\nexport const DEFAULT_ERROR_CODE = 100;\nexport const UNKNOWN_ERROR_CODE = 500;\nexport const SOURCE = 'angular' as 'angular';\n\nexport interface DiagnosticMessageChain {\n  messageText: string;\n  position?: Position;\n  next?: DiagnosticMessageChain;\n}\n\nexport interface Diagnostic {\n  messageText: string;\n  span?: ParseSourceSpan;\n  position?: Position;\n  chain?: DiagnosticMessageChain;\n  category: ts.DiagnosticCategory;\n  code: number;\n  source: 'angular';\n}\n\nexport function isTsDiagnostic(diagnostic: any): diagnostic is ts.Diagnostic {\n  return diagnostic != null && diagnostic.source !== 'angular';\n}\n\nexport function isNgDiagnostic(diagnostic: any): diagnostic is Diagnostic {\n  return diagnostic != null && diagnostic.source === 'angular';\n}\n\nexport interface CompilerOptions extends ts.CompilerOptions {\n  // NOTE: These comments and aio/content/guides/aot-compiler.md should be kept in sync.\n\n  // Write statistics about compilation (e.g. total time, ...)\n  // Note: this is the --diagnostics command line option from TS (which is @internal\n  // on ts.CompilerOptions interface).\n  diagnostics?: boolean;\n\n  // Absolute path to a directory where generated file structure is written.\n  // If unspecified, generated files will be written alongside sources.\n  // @deprecated - no effect\n  genDir?: string;\n\n  // Path to the directory containing the tsconfig.json file.\n  basePath?: string;\n\n  // Don't produce .metadata.json files (they don't work for bundled emit with --out)\n  skipMetadataEmit?: boolean;\n\n  // Produce an error if the metadata written for a class would produce an error if used.\n  strictMetadataEmit?: boolean;\n\n  // Don't produce .ngfactory.js or .ngstyle.js files\n  skipTemplateCodegen?: boolean;\n\n  // Always report errors when the type of a parameter supplied whose injection type cannot\n  // be determined. When this value option is not provided or is `false`, constructor\n  // parameters of classes marked with `@Injectable` whose type cannot be resolved will\n  // produce a warning. With this option `true`, they produce an error. When this option is\n  // not provided is treated as if it were `false`. In Angular 6.0, if this option is not\n  // provided, it will be treated as `true`.\n  strictInjectionParameters?: boolean;\n\n  // Whether to generate a flat module index of the given name and the corresponding\n  // flat module metadata. This option is intended to be used when creating flat\n  // modules similar to how `@angular/core` and `@angular/common` are packaged.\n  // When this option is used the `package.json` for the library should referred to the\n  // generated flat module index instead of the library index file. When using this\n  // option only one .metadata.json file is produced that contains all the metadata\n  // necessary for symbols exported from the library index.\n  // In the generated .ngfactory.ts files flat module index is used to import symbols\n  // includes both the public API from the library index as well as shrowded internal\n  // symbols.\n  // By default the .ts file supplied in the `files` files field is assumed to be\n  // library index. If more than one is specified, uses `libraryIndex` to select the\n  // file to use. If more than on .ts file is supplied and no `libraryIndex` is supplied\n  // an error is produced.\n  // A flat module index .d.ts and .js will be created with the given `flatModuleOutFile`\n  // name in the same location as the library index .d.ts file is emitted.\n  // For example, if a library uses `public_api.ts` file as the library index of the\n  // module the `tsconfig.json` `files` field would be `[\"public_api.ts\"]`. The\n  // `flatModuleOutFile` options could then be set to, for example `\"index.js\"`, which\n  // produces `index.d.ts` and  `index.metadata.json` files. The library's\n  // `package.json`'s `module` field would be `\"index.js\"` and the `typings` field would\n  // be `\"index.d.ts\"`.\n  flatModuleOutFile?: string;\n\n  // Preferred module id to use for importing flat module. References generated by `ngc`\n  // will use this module name when importing symbols from the flat module. This is only\n  // meaningful when `flatModuleOutFile` is also supplied. It is otherwise ignored.\n  flatModuleId?: string;\n\n  // A prefix to insert in generated private symbols, e.g. for \"my_prefix_\" we\n  // would generate private symbols named like `ɵmy_prefix_a`.\n  flatModulePrivateSymbolPrefix?: string;\n\n  // Whether to generate code for library code.\n  // If true, produce .ngfactory.ts and .ngstyle.ts files for .d.ts inputs.\n  // Default is true.\n  generateCodeForLibraries?: boolean;\n\n  // Whether to enable all type checks for templates.\n  // This will be true be default in Angular 6.\n  fullTemplateTypeCheck?: boolean;\n\n  // Insert JSDoc type annotations needed by Closure Compiler\n  annotateForClosureCompiler?: boolean;\n\n  // Modify how angular annotations are emitted to improve tree-shaking.\n  // Default is static fields.\n  // decorators: Leave the Decorators in-place. This makes compilation faster.\n  //             TypeScript will emit calls to the __decorate helper.\n  //             `--emitDecoratorMetadata` can be used for runtime reflection.\n  //             However, the resulting code will not properly tree-shake.\n  // static fields: Replace decorators with a static field in the class.\n  //                Allows advanced tree-shakers like Closure Compiler to remove\n  //                unused classes.\n  annotationsAs?: 'decorators'|'static fields';\n\n  // Print extra information while running the compiler\n  trace?: boolean;\n\n  // Whether to enable lowering expressions lambdas and expressions in a reference value\n  // position.\n  disableExpressionLowering?: boolean;\n\n  // Disable TypeScript Version Check.\n  disableTypeScriptVersionCheck?: boolean;\n\n  // Locale of the application\n  i18nOutLocale?: string;\n  // Export format (xlf, xlf2 or xmb)\n  i18nOutFormat?: string;\n  // Path to the extracted message file\n  i18nOutFile?: string;\n\n  // Import format if different from `i18nFormat`\n  i18nInFormat?: string;\n  // Locale of the imported translations\n  i18nInLocale?: string;\n  // Path to the translation file\n  i18nInFile?: string;\n  // How to handle missing messages\n  i18nInMissingTranslations?: 'error'|'warning'|'ignore';\n\n  // Whether to remove blank text nodes from compiled templates. It is `false` by default starting\n  // from Angular 6.\n  preserveWhitespaces?: boolean;\n\n  /** generate all possible generated files  */\n  allowEmptyCodegenFiles?: boolean;\n\n  /**\n   * Whether to generate .ngsummary.ts files that allow to use AOTed artifacts\n   * in JIT mode. This is off by default.\n   */\n  enableSummariesForJit?: boolean;\n\n  /**\n   * Whether to replace the `templateUrl` and `styleUrls` property in all\n   * @Component decorators with inlined contents in `template` and `styles`\n   * properties.\n   * When enabled, the .js output of ngc will have no lazy-loaded `templateUrl`\n   * or `styleUrl`s. Note that this requires that resources be available to\n   * load statically at compile-time.\n   */\n  enableResourceInlining?: boolean;\n\n  /**\n   * Tells the compiler to generate definitions using the Render3 style code generation.\n   * This option defaults to `false`.\n   *\n   * Not all features are supported with this option enabled. It is only supported\n   * for experimentation and testing of Render3 style code generation.\n   *\n   * @experimental\n   */\n  enableIvy?: boolean;\n\n  /** @internal */\n  collectAllErrors?: boolean;\n}\n\nexport interface CompilerHost extends ts.CompilerHost {\n  /**\n   * Converts a module name that is used in an `import` to a file path.\n   * I.e. `path/to/containingFile.ts` containing `import {...} from 'module-name'`.\n   */\n  moduleNameToFileName?(moduleName: string, containingFile: string): string|null;\n  /**\n   * Converts a file path to a module name that can be used as an `import ...`\n   * I.e. `path/to/importedFile.ts` should be imported by `path/to/containingFile.ts`.\n   */\n  fileNameToModuleName?(importedFilePath: string, containingFilePath: string): string;\n  /**\n   * Converts a file path for a resource that is used in a source file or another resource\n   * into a filepath.\n   */\n  resourceNameToFileName?(resourceName: string, containingFilePath: string): string|null;\n  /**\n   * Converts a file name into a representation that should be stored in a summary file.\n   * This has to include changing the suffix as well.\n   * E.g.\n   * `some_file.ts` -> `some_file.d.ts`\n   *\n   * @param referringSrcFileName the soure file that refers to fileName\n   */\n  toSummaryFileName?(fileName: string, referringSrcFileName: string): string;\n  /**\n   * Converts a fileName that was processed by `toSummaryFileName` back into a real fileName\n   * given the fileName of the library that is referrig to it.\n   */\n  fromSummaryFileName?(fileName: string, referringLibFileName: string): string;\n  /**\n   * Load a referenced resource either statically or asynchronously. If the host returns a\n   * `Promise<string>` it is assumed the user of the corresponding `Program` will call\n   * `loadNgStructureAsync()`. Returning  `Promise<string>` outside `loadNgStructureAsync()` will\n   * cause a diagnostics diagnostic error or an exception to be thrown.\n   */\n  readResource?(fileName: string): Promise<string>|string;\n  /**\n   * Produce an AMD module name for the source file. Used in Bazel.\n   *\n   * An AMD module can have an arbitrary name, so that it is require'd by name\n   * rather than by path. See http://requirejs.org/docs/whyamd.html#namedmodules\n   */\n  amdModuleName?(sf: ts.SourceFile): string|undefined;\n}\n\nexport enum EmitFlags {\n  DTS = 1 << 0,\n  JS = 1 << 1,\n  Metadata = 1 << 2,\n  I18nBundle = 1 << 3,\n  Codegen = 1 << 4,\n\n  Default = DTS | JS | Codegen,\n  All = DTS | JS | Metadata | I18nBundle | Codegen,\n}\n\nexport interface CustomTransformers {\n  beforeTs?: ts.TransformerFactory<ts.SourceFile>[];\n  afterTs?: ts.TransformerFactory<ts.SourceFile>[];\n}\n\nexport interface TsEmitArguments {\n  program: ts.Program;\n  host: CompilerHost;\n  options: CompilerOptions;\n  targetSourceFile?: ts.SourceFile;\n  writeFile?: ts.WriteFileCallback;\n  cancellationToken?: ts.CancellationToken;\n  emitOnlyDtsFiles?: boolean;\n  customTransformers?: ts.CustomTransformers;\n}\n\nexport interface TsEmitCallback { (args: TsEmitArguments): ts.EmitResult; }\nexport interface TsMergeEmitResultsCallback { (results: ts.EmitResult[]): ts.EmitResult; }\n\nexport interface LibrarySummary {\n  fileName: string;\n  text: string;\n  sourceFile?: ts.SourceFile;\n}\n\nexport interface LazyRoute {\n  route: string;\n  module: {name: string, filePath: string};\n  referencedModule: {name: string, filePath: string};\n}\n\nexport interface Program {\n  /**\n   * Retrieve the TypeScript program used to produce semantic diagnostics and emit the sources.\n   *\n   * Angular structural information is required to produce the program.\n   */\n  getTsProgram(): ts.Program;\n\n  /**\n   * Retrieve options diagnostics for the TypeScript options used to create the program. This is\n   * faster than calling `getTsProgram().getOptionsDiagnostics()` since it does not need to\n   * collect Angular structural information to produce the errors.\n   */\n  getTsOptionDiagnostics(cancellationToken?: ts.CancellationToken): ReadonlyArray<ts.Diagnostic>;\n\n  /**\n   * Retrieve options diagnostics for the Angular options used to create the program.\n   */\n  getNgOptionDiagnostics(cancellationToken?: ts.CancellationToken): ReadonlyArray<Diagnostic>;\n\n  /**\n   * Retrieve the syntax diagnostics from TypeScript. This is faster than calling\n   * `getTsProgram().getSyntacticDiagnostics()` since it does not need to collect Angular structural\n   * information to produce the errors.\n   */\n  getTsSyntacticDiagnostics(sourceFile?: ts.SourceFile, cancellationToken?: ts.CancellationToken):\n      ReadonlyArray<ts.Diagnostic>;\n\n  /**\n   * Retrieve the diagnostics for the structure of an Angular application is correctly formed.\n   * This includes validating Angular annotations and the syntax of referenced and imbedded HTML\n   * and CSS.\n   *\n   * Note it is important to displaying TypeScript semantic diagnostics along with Angular\n   * structural diagnostics as an error in the program strucutre might cause errors detected in\n   * semantic analysis and a semantic error might cause errors in specifying the program structure.\n   *\n   * Angular structural information is required to produce these diagnostics.\n   */\n  getNgStructuralDiagnostics(cancellationToken?: ts.CancellationToken): ReadonlyArray<Diagnostic>;\n\n  /**\n   * Retrieve the semantic diagnostics from TypeScript. This is equivalent to calling\n   * `getTsProgram().getSemanticDiagnostics()` directly and is included for completeness.\n   */\n  getTsSemanticDiagnostics(sourceFile?: ts.SourceFile, cancellationToken?: ts.CancellationToken):\n      ReadonlyArray<ts.Diagnostic>;\n\n  /**\n   * Retrieve the Angular semantic diagnostics.\n   *\n   * Angular structural information is required to produce these diagnostics.\n   */\n  getNgSemanticDiagnostics(fileName?: string, cancellationToken?: ts.CancellationToken):\n      ReadonlyArray<Diagnostic>;\n\n  /**\n   * Load Angular structural information asynchronously. If this method is not called then the\n   * Angular structural information, including referenced HTML and CSS files, are loaded\n   * synchronously. If the supplied Angular compiler host returns a promise from `loadResource()`\n   * will produce a diagnostic error message or, `getTsProgram()` or `emit` to throw.\n   */\n  loadNgStructureAsync(): Promise<void>;\n\n  /**\n   * Returns the lazy routes in the program.\n   * @param entryRoute A reference to an NgModule like `someModule#name`. If given,\n   *              will recursively analyze routes starting from this symbol only.\n   *              Otherwise will list all routes for all NgModules in the program/\n   */\n  listLazyRoutes(entryRoute?: string): LazyRoute[];\n\n  /**\n   * Emit the files requested by emitFlags implied by the program.\n   *\n   * Angular structural information is required to emit files.\n   */\n  emit({emitFlags, cancellationToken, customTransformers, emitCallback,\n        mergeEmitResultsCallback}?: {\n    emitFlags?: EmitFlags,\n    cancellationToken?: ts.CancellationToken,\n    customTransformers?: CustomTransformers,\n    emitCallback?: TsEmitCallback,\n    mergeEmitResultsCallback?: TsMergeEmitResultsCallback\n  }): ts.EmitResult;\n\n  /**\n   * Returns the .d.ts / .ngsummary.json / .ngfactory.d.ts files of libraries that have been emitted\n   * in this program or previous programs with paths that emulate the fact that these libraries\n   * have been compiled before with no outDir.\n   */\n  getLibrarySummaries(): Map<string, LibrarySummary>;\n\n  /**\n   * @internal\n   */\n  getEmittedGeneratedFiles(): Map<string, GeneratedFile>;\n\n  /**\n   * @internal\n   */\n  getEmittedSourceFiles(): Map<string, ts.SourceFile>;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {syntaxError} from '@angular/compiler';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {CompilerOptions, DEFAULT_ERROR_CODE, Diagnostic, SOURCE} from './api';\n\nexport const GENERATED_FILES = /(.*?)\\.(ngfactory|shim\\.ngstyle|ngstyle|ngsummary)\\.(js|d\\.ts|ts)$/;\nexport const DTS = /\\.d\\.ts$/;\nexport const TS = /^(?!.*\\.d\\.ts$).*\\.ts$/;\n\nexport const enum StructureIsReused {Not = 0, SafeModules = 1, Completely = 2}\n\n// Note: This is an internal property in TypeScript. Use it only for assertions and tests.\nexport function tsStructureIsReused(program: ts.Program): StructureIsReused {\n  return (program as any).structureIsReused;\n}\n\nexport function error(msg: string): never {\n  throw new Error(`Internal error: ${msg}`);\n}\n\nexport function userError(msg: string): never {\n  throw syntaxError(msg);\n}\n\nexport function createMessageDiagnostic(messageText: string): ts.Diagnostic&Diagnostic {\n  return {\n    file: undefined,\n    start: undefined,\n    length: undefined,\n    category: ts.DiagnosticCategory.Message, messageText,\n    code: DEFAULT_ERROR_CODE,\n    source: SOURCE,\n  };\n}\n\nexport function isInRootDir(fileName: string, options: CompilerOptions) {\n  return !options.rootDir || pathStartsWithPrefix(options.rootDir, fileName);\n}\n\nexport function relativeToRootDirs(filePath: string, rootDirs: string[]): string {\n  if (!filePath) return filePath;\n  for (const dir of rootDirs || []) {\n    const rel = pathStartsWithPrefix(dir, filePath);\n    if (rel) {\n      return rel;\n    }\n  }\n  return filePath;\n}\n\nfunction pathStartsWithPrefix(prefix: string, fullPath: string): string|null {\n  const rel = path.relative(prefix, fullPath);\n  return rel.startsWith('..') ? null : rel;\n}\n\n/**\n * Converts a ng.Diagnostic into a ts.Diagnostic.\n * This looses some information, and also uses an incomplete object as `file`.\n *\n * I.e. only use this where the API allows only a ts.Diagnostic.\n */\nexport function ngToTsDiagnostic(ng: Diagnostic): ts.Diagnostic {\n  let file: ts.SourceFile|undefined;\n  let start: number|undefined;\n  let length: number|undefined;\n  if (ng.span) {\n    // Note: We can't use a real ts.SourceFile,\n    // but we can at least mirror the properties `fileName` and `text`, which\n    // are mostly used for error reporting.\n    file = { fileName: ng.span.start.file.url, text: ng.span.start.file.content } as ts.SourceFile;\n    start = ng.span.start.offset;\n    length = ng.span.end.offset - start;\n  }\n  return {\n    file,\n    messageText: ng.messageText,\n    category: ng.category,\n    code: ng.code, start, length,\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {METADATA_VERSION, ModuleMetadata} from '../metadata';\n\nimport {DTS} from './util';\n\nexport interface MetadataReaderHost {\n  getSourceFileMetadata(filePath: string): ModuleMetadata|undefined;\n  cacheMetadata?(fileName: string): boolean;\n  fileExists(filePath: string): boolean;\n  readFile(filePath: string): string;\n}\n\nexport interface MetadataReaderCache {\n  /**\n   * @internal\n   */\n  data: Map<string, ModuleMetadata[]|undefined>;\n}\n\nexport function createMetadataReaderCache(): MetadataReaderCache {\n  const data = new Map<string, ModuleMetadata[]|undefined>();\n  return {data};\n}\n\nexport function readMetadata(\n    filePath: string, host: MetadataReaderHost, cache?: MetadataReaderCache): ModuleMetadata[]|\n    undefined {\n  let metadatas = cache && cache.data.get(filePath);\n  if (metadatas) {\n    return metadatas;\n  }\n  if (host.fileExists(filePath)) {\n    // If the file doesn't exists then we cannot return metadata for the file.\n    // This will occur if the user referenced a declared module for which no file\n    // exists for the module (i.e. jQuery or angularjs).\n    if (DTS.test(filePath)) {\n      metadatas = readMetadataFile(host, filePath);\n      if (!metadatas) {\n        // If there is a .d.ts file but no metadata file we need to produce a\n        // metadata from the .d.ts file as metadata files capture reexports\n        // (starting with v3).\n        metadatas = [upgradeMetadataWithDtsData(\n            host, {'__symbolic': 'module', 'version': 1, 'metadata': {}}, filePath)];\n      }\n    } else {\n      const metadata = host.getSourceFileMetadata(filePath);\n      metadatas = metadata ? [metadata] : [];\n    }\n  }\n  if (cache && (!host.cacheMetadata || host.cacheMetadata(filePath))) {\n    cache.data.set(filePath, metadatas);\n  }\n  return metadatas;\n}\n\n\nfunction readMetadataFile(host: MetadataReaderHost, dtsFilePath: string): ModuleMetadata[]|\n    undefined {\n  const metadataPath = dtsFilePath.replace(DTS, '.metadata.json');\n  if (!host.fileExists(metadataPath)) {\n    return undefined;\n  }\n  try {\n    const metadataOrMetadatas = JSON.parse(host.readFile(metadataPath));\n    const metadatas: ModuleMetadata[] = metadataOrMetadatas ?\n        (Array.isArray(metadataOrMetadatas) ? metadataOrMetadatas : [metadataOrMetadatas]) :\n        [];\n    if (metadatas.length) {\n      let maxMetadata = metadatas.reduce((p, c) => p.version > c.version ? p : c);\n      if (maxMetadata.version < METADATA_VERSION) {\n        metadatas.push(upgradeMetadataWithDtsData(host, maxMetadata, dtsFilePath));\n      }\n    }\n    return metadatas;\n  } catch (e) {\n    console.error(`Failed to read JSON file ${metadataPath}`);\n    throw e;\n  }\n}\n\nfunction upgradeMetadataWithDtsData(\n    host: MetadataReaderHost, oldMetadata: ModuleMetadata, dtsFilePath: string): ModuleMetadata {\n  // patch v1 to v3 by adding exports and the `extends` clause.\n  // patch v3 to v4 by adding `interface` symbols for TypeAlias\n  let newMetadata: ModuleMetadata = {\n    '__symbolic': 'module',\n    'version': METADATA_VERSION,\n    'metadata': {...oldMetadata.metadata},\n  };\n  if (oldMetadata.exports) {\n    newMetadata.exports = oldMetadata.exports;\n  }\n  if (oldMetadata.importAs) {\n    newMetadata.importAs = oldMetadata.importAs;\n  }\n  if (oldMetadata.origins) {\n    newMetadata.origins = oldMetadata.origins;\n  }\n  const dtsMetadata = host.getSourceFileMetadata(dtsFilePath);\n  if (dtsMetadata) {\n    for (let prop in dtsMetadata.metadata) {\n      if (!newMetadata.metadata[prop]) {\n        newMetadata.metadata[prop] = dtsMetadata.metadata[prop];\n      }\n    }\n    if (dtsMetadata['importAs']) newMetadata['importAs'] = dtsMetadata['importAs'];\n\n    // Only copy exports from exports from metadata prior to version 3.\n    // Starting with version 3 the collector began collecting exports and\n    // this should be redundant. Also, with bundler will rewrite the exports\n    // which will hoist the exports from modules referenced indirectly causing\n    // the imports to be different than the .d.ts files and using the .d.ts file\n    // exports would cause the StaticSymbolResolver to redirect symbols to the\n    // incorrect location.\n    if ((!oldMetadata.version || oldMetadata.version < 3) && dtsMetadata.exports) {\n      newMetadata.exports = dtsMetadata.exports;\n    }\n  }\n  return newMetadata;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/*\n\nThe API from compiler-cli that language-service can see.\nIt is important that none the exported modules require anything other than\nAngular modules and Typescript as this will indirectly add a dependency\nto the language service.\n\n*/\nexport {DiagnosticTemplateInfo, ExpressionDiagnostic, getExpressionDiagnostics, getExpressionScope, getTemplateExpressionDiagnostics} from './diagnostics/expression_diagnostics';\nexport {AstType, DiagnosticKind, ExpressionDiagnosticsContext, TypeDiagnostic} from './diagnostics/expression_type';\nexport {BuiltinType, DeclarationKind, Definition, Location, PipeInfo, Pipes, Signature, Span, Symbol, SymbolDeclaration, SymbolQuery, SymbolTable} from './diagnostics/symbols';\nexport {getClassFromStaticSymbol, getClassMembers, getClassMembersFromDeclaration, getPipesTable, getSymbolQuery} from './diagnostics/typescript_symbols';\nexport {MetadataCollector, ModuleMetadata} from './metadata';\nexport {CompilerOptions} from './transformers/api';\nexport {MetadataReaderCache, MetadataReaderHost, createMetadataReaderCache, readMetadata} from './transformers/metadata_reader';\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n}\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super(errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    this.name = 'UnsubscriptionError';\n    (Object as any).setPrototypeOf(this, UnsubscriptionError.prototype);\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parent: Subscription = null;\n  /** @internal */\n  protected _parents: Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  /** @internal */\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export const rxSubscriber =\n  (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? Symbol.for('rxSubscriber')\n    : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): For situations where Node has multiple copies of rxjs in\n          // node_modules, we cannot rely on `instanceof` checks\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic } from './types';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { OperatorFunction, PartialObserver, Subscribable } from '../internal/types';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    super('object unsubscribed');\n    this.name = 'ObjectUnsubscribedError';\n    (Object as any).setPrototypeOf(this, ObjectUnsubscribedError.prototype);\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  } as MonoTypeOperatorFunction<T>;\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  /** @internal */\n  _isComplete = false;\n\n  constructor(public source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { SubscriptionLike } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<SubscriptionLike>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nexport class Scheduler implements SchedulerLike {\n\n  /** @nocollapse */\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * {@link Scheduler}. It is preferrable to use this over `empty()`.\n */\nexport const EMPTY = new Observable<never>(subscriber => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * <img src=\"./img/empty.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then complete.</caption>\n * var result = Rx.Observable.empty().startWith(7);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n * var interval = Rx.Observable.interval(1000);\n * var result = interval.mergeMap(x =>\n *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n *\n * @see {@link create}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throw}\n *\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using EMPTY constant.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nexport function emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n","import { SchedulerLike } from '../types';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  if (!subscriber.closed) {\n    subscriber.complete();\n  }\n};\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\n\nexport function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToArray(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let i = 0;\n      sub.add(scheduler.schedule(function () {\n        if (i === input.length) {\n          subscriber.complete();\n          return;\n        }\n        subscriber.next(input[i++]);\n        if (!subscriber.closed) {\n          sub.add(this.schedule());\n        }\n      }));\n      return sub;\n    });\n  }\n}\n","import { Observable } from '../Observable';\n\nexport function scalar<T>(value: T) {\n  const result = new Observable<T>(subscriber => {\n    subscriber.next(value);\n    subscriber.complete();\n  });\n  result._isScalar = true;\n  (result as any).value = value;\n  return result;\n}\n","import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nimport { Observable } from '../Observable';\n\nexport function of<T>(a: T, scheduler?: SchedulerLike): Observable<T>;\nexport function of<T, T2>(a: T, b: T2, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T>;\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  let scheduler = args[args.length - 1] as SchedulerLike;\n  if (isScheduler(scheduler)) {\n    args.pop();\n  } else {\n    scheduler = undefined;\n  }\n  switch (args.length) {\n    case 0:\n      return empty(scheduler);\n    case 1:\n      return scheduler ? fromArray(args as T[], scheduler) : scalar(args[0] as T);\n    default:\n      return fromArray(args as T[], scheduler);\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * <img src=\"./img/throw.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then emit an error.</caption>\n * import { throwError, concat, of } from 'rxjs/create';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n * import { throwError, interval, of } from 'rxjs/create';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 13 ?\n *     throwError('Thirteens are bad') :\n *     of('a', 'b', 'c')\n *   )\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link create}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throw\n * @owner Observable\n */\nexport function throwError(error: any, scheduler?: SchedulerLike): Observable<never> {\n  if (!scheduler) {\n    return new Observable(subscriber => subscriber.error(error));\n  } else {\n    return new Observable(subscriber => scheduler.schedule(dispatch, 0, { error, subscriber }));\n  }\n}\n\ninterface DispatchArg {\n  error: any;\n  subscriber: Subscriber<any>;\n}\n\nfunction dispatch({ error, subscriber }: DispatchArg) {\n  subscriber.error(error);\n}\n","import { PartialObserver } from './types';\nimport { Observable } from './Observable';\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n      case 'E':\n        return throwError(this.error);\n      case 'C':\n        return empty();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: SchedulerLike, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  /** @nocollapse */\n  static dispatch(this: SchedulerAction<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: SchedulerLike,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { SchedulerLike } from './types';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: (ReplayEvent<T> | T)[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n  private _infiniteTimeWindow: boolean = false;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: SchedulerLike) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n\n    if (windowTime === Number.POSITIVE_INFINITY) {\n      this._infiniteTimeWindow = true;\n      this.next = this.nextInfiniteTimeWindow;\n    } else {\n      this.next = this.nextTimeWindow;\n    }\n  }\n\n  private nextInfiniteTimeWindow(value: T): void {\n    const _events = this._events;\n    _events.push(value);\n    // Since this method is invoked in every next() call than the buffer\n    // can overgrow the max size only by one item\n    if (_events.length > this._bufferSize) {\n      _events.shift();\n    }\n\n    super.next(value);\n  }\n\n  private nextTimeWindow(value: T): void {\n    this._events.push(new ReplayEvent(this._getNow(), value));\n    this._trimBufferThenGetEvents();\n\n    super.next(value);\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    // When `_infiniteTimeWindow === true` then the buffer is already trimmed\n    const _infiniteTimeWindow = this._infiniteTimeWindow;\n    const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    const len = _events.length;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.isStopped || this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    if (_infiniteTimeWindow) {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next(<T>_events[i]);\n      }\n    } else {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next((<ReplayEvent<T>>_events[i]).value);\n      }\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = <ReplayEvent<T>[]>this._events;\n\n    const eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","let nextHandle = 0;\n\nconst tasksByHandle: { [handle: string]: () => void } = {};\n\nfunction runIfPresent(handle: number) {\n  const cb = tasksByHandle[handle];\n  if (cb) {\n    cb();\n  }\n}\n\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    tasksByHandle[handle] = cb;\n    Promise.resolve().then(() => runIfPresent(handle));\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    delete tasksByHandle[handle];\n  },\n};\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(\n      () => scheduler.flush(null)));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction as any,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    (actions as Array<VirtualAction<T>>).sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    super('argument out of range');\n    this.name = 'ArgumentOutOfRangeError';\n    (Object as any).setPrototypeOf(this, ArgumentOutOfRangeError.prototype);\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    super('no elements in sequence');\n    this.name = 'EmptyError';\n    (Object as any).setPrototypeOf(this, EmptyError.prototype);\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    super('Timeout has occurred');\r\n\r\n    (Object as any).setPrototypeOf(this, TimeoutError.prototype);\r\n  }\r\n}\r\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { SchedulerLike, SchedulerAction } from '../types';\nimport { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\nimport { isArray } from '../util/isArray';\nimport { isScheduler } from '../util/isScheduler';\n\n// tslint:disable:max-line-length\n/** @deprecated resultSelector is no longer supported, use a mapping function. */\nexport function bindCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\n\nexport function bindCallback<R1, R2, R3, R4>(callbackFunc: (callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): () => Observable<any[]>;\nexport function bindCallback<R1, R2, R3>(callbackFunc: (callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2, R3]>;\nexport function bindCallback<R1, R2>(callbackFunc: (callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2]>;\nexport function bindCallback<R1>(callbackFunc: (callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): () => Observable<R1>;\nexport function bindCallback(callbackFunc: (callback: () => any) => any, scheduler?: SchedulerLike): () => Observable<void>;\n\nexport function bindCallback<A1, R1, R2, R3, R4>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<any[]>;\nexport function bindCallback<A1, R1, R2, R3>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, R1, R2>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2]>;\nexport function bindCallback<A1, R1>(callbackFunc: (arg1: A1, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<R1>;\nexport function bindCallback<A1>(callbackFunc: (arg1: A1, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<void>;\n\nexport function bindCallback<A1, A2, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<any[]>;\nexport function bindCallback<A1, A2, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, A2, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;\nexport function bindCallback<A1, A2, R1>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<R1>;\nexport function bindCallback<A1, A2>(callbackFunc: (arg1: A1, arg2: A2, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<void>;\n\nexport function bindCallback<A1, A2, A3, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<any[]>;\nexport function bindCallback<A1, A2, A3, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, A2, A3, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;\nexport function bindCallback<A1, A2, A3, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;\nexport function bindCallback<A1, A2, A3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;\n\nexport function bindCallback<A1, A2, A3, A4, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<any[]>;\nexport function bindCallback<A1, A2, A3, A4, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, A2, A3, A4, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;\nexport function bindCallback<A1, A2, A3, A4, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;\nexport function bindCallback<A1, A2, A3, A4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;\n\nexport function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<any[]>;\nexport function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, A2, A3, A4, A5, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;\nexport function bindCallback<A1, A2, A3, A4, A5, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;\nexport function bindCallback<A1, A2, A3, A4, A5>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>;\n\nexport function bindCallback<A, R>(callbackFunc: (...args: Array<A | ((result: R) => any)>) => any, scheduler?: SchedulerLike): (...args: A[]) => Observable<R>;\nexport function bindCallback<A, R>(callbackFunc: (...args: Array<A | ((...results: R[]) => any)>) => any, scheduler?: SchedulerLike): (...args: A[]) => Observable<R[]>;\n\nexport function bindCallback(callbackFunc: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\n\n// tslint:enable:max-line-length\n\n/**\n * Converts a callback API to a function that returns an Observable.\n *\n * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n * it will return a function `g` that when called as `g(x)` will output an\n * Observable.</span>\n *\n * `bindCallback` is not an operator because its input and output are not\n * Observables. The input is a function `func` with some parameters, the\n * last parameter must be a callback function that `func` calls when it is\n * done.\n *\n * The output of `bindCallback` is a function that takes the same parameters\n * as `func`, except the last one (the callback). When the output function\n * is called with arguments it will return an Observable. If function `func`\n * calls its callback with one argument the Observable will emit that value.\n * If on the other hand the callback is called with multiple values the resulting\n * Observable will emit an array with said values as arguments.\n *\n * It is very important to remember that input function `func` is not called\n * when the output function is, but rather when the Observable returned by the output\n * function is subscribed. This means if `func` makes an AJAX request, that request\n * will be made every time someone subscribes to the resulting Observable, but not before.\n *\n * The last optional parameter - {@link Scheduler} - can be used to control when the call\n * to `func` happens after someone subscribes to Observable, as well as when results\n * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n * and call `subscribe` on the output Observable all function calls that are currently executing\n * will end before `func` is invoked.\n *\n * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n * In particular, if the callback is called synchronously the subscription of the resulting Observable\n * will call the `next` function synchronously as well.  If you want to defer that call,\n * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n *\n * Note that the Observable created by the output function will always emit a single value\n * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n * calls will not appear in the stream. If you need to listen for multiple calls,\n *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n *\n * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n * will be the context that the output function has at call time. In particular, if `func`\n * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n * it is recommended that the context of the output function is set to that object as well.\n *\n * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n * provides convenient error handling and probably is a better choice.\n * `bindCallback` will treat such functions the same as any other and error parameters\n * (whether passed or not) will always be interpreted as regular callback argument.\n *\n *\n * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n * // Suppose we have jQuery.getJSON('/my/url', callback)\n * var getJSONAsObservable = bindCallback(jQuery.getJSON);\n * var result = getJSONAsObservable('/my/url');\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n *\n * @example <caption>Receive an array of arguments passed to a callback</caption>\n * someFunction((a, b, c) => {\n *   console.log(a); // 5\n *   console.log(b); // 'some string'\n *   console.log(c); // {someProperty: 'someValue'}\n * });\n *\n * const boundSomeFunction = bindCallback(someFunction);\n * boundSomeFunction().subscribe(values => {\n *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n * });\n *\n *\n * @example <caption>Compare behaviour with and without async Scheduler</caption>\n * function iCallMyCallbackSynchronously(cb) {\n *   cb();\n * }\n *\n * const boundSyncFn = bindCallback(iCallMyCallbackSynchronously);\n * const boundAsyncFn = bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n *\n * boundSyncFn().subscribe(() => console.log('I was sync!'));\n * boundAsyncFn().subscribe(() => console.log('I was async!'));\n * console.log('This happened...');\n *\n * // Logs:\n * // I was sync!\n * // This happened...\n * // I was async!\n *\n *\n * @example <caption>Use bindCallback on an object method</caption>\n * const boundMethod = bindCallback(someObject.methodWithCallback);\n * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n * .subscribe(subscriber);\n *\n *\n * @see {@link bindNodeCallback}\n * @see {@link from}\n * @see {@link fromPromise}\n *\n * @param {function} func A function with a callback as the last parameter.\n * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n * callbacks.\n * @return {function(...params: *): Observable} A function which returns the\n * Observable that delivers the same values the callback would deliver.\n * @name bindCallback\n */\nexport function bindCallback<T>(\n  callbackFunc: Function,\n  resultSelector?: Function|SchedulerLike,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<T> {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      // DEPRECATED PATH\n      return (...args: any[]) => bindCallback(callbackFunc, scheduler)(...args).pipe(\n        map((args) => isArray(args) ? resultSelector(...args) : resultSelector(args)),\n      );\n    }\n  }\n\n  return function (this: any, ...args: any[]): Observable<T> {\n    const context = this;\n    let subject: AsyncSubject<T>;\n    const params = {\n      context,\n      subject,\n      callbackFunc,\n      scheduler,\n    };\n    return new Observable<T>(subscriber => {\n      if (!scheduler) {\n        if (!subject) {\n          subject = new AsyncSubject<T>();\n          const handler = (...innerArgs: any[]) => {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, [...args, handler]);\n          } catch (err) {\n            subject.error(err);\n          }\n        }\n        return subject.subscribe(subscriber);\n      } else {\n        const state: DispatchState<T> = {\n          args, subscriber, params,\n        };\n        return scheduler.schedule<DispatchState<T>>(dispatch, 0, state);\n      }\n    });\n  };\n}\n\ninterface DispatchState<T> {\n  args: any[];\n  subscriber: Subscriber<T>;\n  params: ParamsContext<T>;\n}\n\ninterface ParamsContext<T> {\n  callbackFunc: Function;\n  scheduler: SchedulerLike;\n  context: any;\n  subject: AsyncSubject<T>;\n}\n\nfunction dispatch<T>(this: SchedulerAction<DispatchState<T>>, state: DispatchState<T>) {\n  const self = this;\n  const { args, subscriber, params } = state;\n  const { callbackFunc, context, scheduler } = params;\n  let { subject } = params;\n  if (!subject) {\n    subject = params.subject = new AsyncSubject<T>();\n\n    const handler = (...innerArgs: any[]) => {\n      const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n      this.add(scheduler.schedule<NextState<T>>(dispatchNext, 0, { value, subject }));\n    };\n\n    try {\n      callbackFunc.apply(context, [...args, handler]);\n    } catch (err) {\n      subject.error(err);\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\ninterface NextState<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\n\nfunction dispatchNext<T>(this: SchedulerAction<NextState<T>>, state: NextState<T>) {\n  const { value, subject } = state;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface ErrorState<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\n\nfunction dispatchError<T>(this: SchedulerAction<ErrorState<T>>, state: ErrorState<T>) {\n  const { err, subject } = state;\n  subject.error(err);\n}\n","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { Subscriber } from '../Subscriber';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { map } from '../operators/map';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport function bindNodeCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\n\nexport function bindNodeCallback<R1, R2, R3, R4>(callbackFunc: (callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<R1, R2, R3>(callbackFunc: (callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<R1, R2>(callbackFunc: (callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2]>;\nexport function bindNodeCallback<R1>(callbackFunc: (callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): () => Observable<R1>;\nexport function bindNodeCallback(callbackFunc: (callback: (err: any) => any) => any, scheduler?: SchedulerLike): () => Observable<void>;\n\nexport function bindNodeCallback<A1, R1, R2, R3, R4>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, R1, R2, R3>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, R1, R2>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, R1>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<R1>;\nexport function bindNodeCallback<A1>(callbackFunc: (arg1: A1, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<void>;\n\nexport function bindNodeCallback<A1, A2, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, A2, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, A2, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, A2, R1>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<R1>;\nexport function bindNodeCallback<A1, A2>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<void>;\n\nexport function bindNodeCallback<A1, A2, A3, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, A2, A3, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, A2, A3, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, A2, A3, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;\nexport function bindNodeCallback<A1, A2, A3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;\n\nexport function bindNodeCallback<A1, A2, A3, A4, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, A2, A3, A4, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, A2, A3, A4, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, A2, A3, A4, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;\nexport function bindNodeCallback<A1, A2, A3, A4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;\n\nexport function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, A2, A3, A4, A5, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;\nexport function bindNodeCallback<A1, A2, A3, A4, A5>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>; /* tslint:enable:max-line-length */\n\nexport function bindNodeCallback(callbackFunc: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\n/**\n * Converts a Node.js-style callback API to a function that returns an\n * Observable.\n *\n * <span class=\"informal\">It's just like {@link bindCallback}, but the\n * callback is expected to be of type `callback(error, result)`.</span>\n *\n * `bindNodeCallback` is not an operator because its input and output are not\n * Observables. The input is a function `func` with some parameters, but the\n * last parameter must be a callback function that `func` calls when it is\n * done. The callback function is expected to follow Node.js conventions,\n * where the first argument to the callback is an error object, signaling\n * whether call was successful. If that object is passed to callback, it means\n * something went wrong.\n *\n * The output of `bindNodeCallback` is a function that takes the same\n * parameters as `func`, except the last one (the callback). When the output\n * function is called with arguments, it will return an Observable.\n * If `func` calls its callback with error parameter present, Observable will\n * error with that value as well. If error parameter is not passed, Observable will emit\n * second parameter. If there are more parameters (third and so on),\n * Observable will emit an array with all arguments, except first error argument.\n *\n * Note that `func` will not be called at the same time output function is,\n * but rather whenever resulting Observable is subscribed. By default call to\n * `func` will happen synchronously after subscription, but that can be changed\n * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n * can also control when values from callback will be emitted by Observable.\n * To find out more, check out documentation for {@link bindCallback}, where\n * Scheduler works exactly the same.\n *\n * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n * of returned function, when it is called.\n *\n * After Observable emits value, it will complete immediately. This means\n * even if `func` calls callback again, values from second and consecutive\n * calls will never appear on the stream. If you need to handle functions\n * that call callbacks multiple times, check out {@link fromEvent} or\n * {@link fromEventPattern} instead.\n *\n * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n * \"Node.js-style\" callbacks are just a convention, so if you write for\n * browsers or any other environment and API you use implements that callback style,\n * `bindNodeCallback` can be safely used on that API functions as well.\n *\n * Remember that Error object passed to callback does not have to be an instance\n * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n * Error parameter of callback function is interpreted as \"present\", when value\n * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n * string or boolean `true`. In all of these cases resulting Observable would error\n * with that value. This means usually regular style callbacks will fail very often when\n * `bindNodeCallback` is used. If your Observable errors much more often then you\n * would expect, check if callback really is called in Node.js-style and, if not,\n * switch to {@link bindCallback} instead.\n *\n * Note that even if error parameter is technically present in callback, but its value\n * is falsy, it still won't appear in array emitted by Observable.\n *\n *\n * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n * import * as fs from 'fs';\n * var readFileAsObservable = bindNodeCallback(fs.readFile);\n * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n *\n * @example <caption>Use on function calling callback with multiple arguments</caption>\n * someFunction((err, a, b) => {\n *   console.log(err); // null\n *   console.log(a); // 5\n *   console.log(b); // \"some string\"\n * });\n * var boundSomeFunction = bindNodeCallback(someFunction);\n * boundSomeFunction()\n * .subscribe(value => {\n *   console.log(value); // [5, \"some string\"]\n * });\n *\n * @example <caption>Use on function calling callback in regular style</caption>\n * someFunction(a => {\n *   console.log(a); // 5\n * });\n * var boundSomeFunction = bindNodeCallback(someFunction);\n * boundSomeFunction()\n * .subscribe(\n *   value => {}             // never gets called\n *   err => console.log(err) // 5\n * );\n *\n *\n * @see {@link bindCallback}\n * @see {@link from}\n * @see {@link fromPromise}\n *\n * @param {function} func Function with a Node.js-style callback as the last parameter.\n * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n * callbacks.\n * @return {function(...params: *): Observable} A function which returns the\n * Observable that delivers the same values the Node.js callback would\n * deliver.\n * @name bindNodeCallback\n */\nexport function bindNodeCallback<T>(\n  callbackFunc: Function,\n  resultSelector: Function|SchedulerLike,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<T> {\n\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      // DEPRECATED PATH\n      return (...args: any[]) => bindNodeCallback(callbackFunc, scheduler)(...args).pipe(\n        map(args => isArray(args) ? resultSelector(...args) : resultSelector(args))\n      );\n    }\n  }\n\n  return function(this: any, ...args: any[]): Observable<T> {\n    const params: ParamsState<T> = {\n      subject: undefined,\n      args,\n      callbackFunc,\n      scheduler,\n      context: this,\n    };\n    return new Observable<T>(subscriber => {\n      const { context } = params;\n      let { subject } = params;\n      if (!scheduler) {\n        if (!subject) {\n          subject = params.subject = new AsyncSubject<T>();\n          const handler = (...innerArgs: any[]) => {\n            const err = innerArgs.shift();\n\n            if (err) {\n              subject.error(err);\n              return;\n            }\n\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, [...args, handler]);\n          } catch (err) {\n            subject.error(err);\n          }\n        }\n        return subject.subscribe(subscriber);\n      } else {\n        return scheduler.schedule<DispatchState<T>>(dispatch, 0, { params, subscriber, context });\n      }\n    });\n  };\n}\n\ninterface DispatchState<T> {\n  subscriber: Subscriber<T>;\n  context: any;\n  params: ParamsState<T>;\n}\n\ninterface ParamsState<T> {\n  callbackFunc: Function;\n  args: any[];\n  scheduler: SchedulerLike;\n  subject: AsyncSubject<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: SchedulerAction<DispatchState<T>>, state: DispatchState<T>) {\n  const { params, subscriber, context } = state;\n  const { callbackFunc, args, scheduler } = params;\n  let subject = params.subject;\n\n  if (!subject) {\n    subject = params.subject = new AsyncSubject<T>();\n\n    const handler = (...innerArgs: any[]) => {\n      const err = innerArgs.shift();\n      if (err) {\n        this.add(scheduler.schedule<DispatchErrorArg<T>>(dispatchError, 0, { err, subject }));\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        this.add(scheduler.schedule<DispatchNextArg<T>>(dispatchNext, 0, { value, subject }));\n      }\n    };\n\n    try {\n      callbackFunc.apply(context, [...args, handler]);\n    } catch (err) {\n      this.add(scheduler.schedule<DispatchErrorArg<T>>(dispatchError, 0, { err, subject }));\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\n\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\n\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { hostReportError } from './hostReportError';\n\nexport const subscribeToPromise = <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => {\n  promise.then(\n    (value) => {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    },\n    (err: any) => subscriber.error(err)\n  )\n  .then(null, hostReportError);\n  return subscriber;\n};\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n\n/**\n * @deprecated use {@link iterator} instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = iterable[Symbol_iterator]();\n  do {\n    const item = iterator.next();\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n","import { Subscriber } from '../Subscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport const subscribeToObservable = <T>(obj: any) => (subscriber: Subscriber<T>) => {\n  const obs = obj[Symbol_observable]();\n  if (typeof obs.subscribe !== 'function') {\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  } else {\n    return obs.subscribe(subscriber);\n  }\n};\n","export function isPromise(value: any): value is PromiseLike<any> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscriber } from '../Subscriber';\n\nexport const subscribeTo = <T>(result: ObservableInput<T>) => {\n  if (result instanceof Observable) {\n    return (subscriber: Subscriber<T>) => {\n        if (result._isScalar) {\n        subscriber.next((result as any).value);\n        subscriber.complete();\n        return undefined;\n      } else {\n        return result.subscribe(subscriber);\n      }\n    };\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result as Promise<any>);\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result as any);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result as any);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n","\nimport { ObservableInput } from '../types';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeTo } from './subscribeTo';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription | void {\n  const destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  return subscribeTo(result)(destination);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { isScheduler  } from '../util/isScheduler';\nimport { isArray  } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Operator } from '../Operator';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\n\nconst NONE = {};\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: SchedulerLike): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: SchedulerLike): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R, scheduler?: SchedulerLike): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | SchedulerLike>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | SchedulerLike>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | SchedulerLike>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    SchedulerLike>): Observable<R> {\n  let resultSelector: (...values: Array<any>) => R =  null;\n  let scheduler: SchedulerLike = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <SchedulerLike>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    resultSelector = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return fromArray(observables, scheduler).lift(new CombineLatestOperator<T, R>(resultSelector));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private resultSelector?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private resultSelector?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(NONE);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === NONE ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.resultSelector) {\n        this._tryResultSelector(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryResultSelector(values: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { ObservableLike } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isObservable(input: any): input is ObservableLike<any> {\n  return input && typeof input[Symbol_observable] === 'function';\n}\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return input && typeof input[Symbol_iterator] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\n\nexport function fromPromise<T>(input: PromiseLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToPromise(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      sub.add(scheduler.schedule(() => input.then(\n        value => {\n          sub.add(scheduler.schedule(() => {\n            subscriber.next(value);\n            sub.add(scheduler.schedule(() => subscriber.complete()));\n          }));\n        },\n        err => {\n          sub.add(scheduler.schedule(() => subscriber.error(err)));\n        }\n      )));\n      return sub;\n    });\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\n\nexport function fromIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  if (!scheduler) {\n    return new Observable<T>(subscribeToIterable(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let iterator: Iterator<T>;\n      sub.add(() => {\n        // Finalize generators\n        if (iterator && typeof iterator.return === 'function') {\n          iterator.return();\n        }\n      });\n      sub.add(scheduler.schedule(() => {\n        iterator = input[Symbol_iterator]();\n        sub.add(scheduler.schedule(function () {\n          if (subscriber.closed) {\n            return;\n          }\n          let value: T;\n          let done: boolean;\n          try {\n            const result = iterator.next();\n            value = result.value;\n            done = result.done;\n          } catch (err) {\n            subscriber.error(err);\n            return;\n          }\n          if (done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(value);\n            this.schedule();\n          }\n        }));\n      }));\n      return sub;\n    });\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { subscribeToObservable } from '../util/subscribeToObservable';\nimport { ObservableLike, SchedulerLike, Subscribable } from '../types';\n\nexport function fromObservable<T>(input: ObservableLike<T>, scheduler: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToObservable(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      sub.add(scheduler.schedule(() => {\n        const observable: Subscribable<T> = input[Symbol_observable]();\n        sub.add(observable.subscribe({\n          next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n          error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n          complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n        }));\n      }));\n      return sub;\n    });\n  }\n}\n","import { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isObservable } from '../util/isObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nimport { ObservableInput, SchedulerLike } from '../types';\n\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function from<T>(input: ObservableInput<ObservableInput<T>>, scheduler?: SchedulerLike): Observable<Observable<T>>;\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  if (!scheduler) {\n    if (input instanceof Observable) {\n      return input;\n    }\n    return new Observable(subscribeTo(input));\n  }\n\n  if (input != null) {\n    if (isObservable(input)) {\n      return fromObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return fromPromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return fromArray(input, scheduler);\n    }  else if (isIterable(input) || typeof input === 'string') {\n      return fromIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, I|R> {\n  if (typeof resultSelector === 'function') {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      mergeMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii)),\n      ), concurrent)\n    );\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<R>, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | SchedulerLike)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | SchedulerLike)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll<R>()(of(...observables));\n}\n","import { Observable } from '../Observable';\nimport { SubscribableOrPromise } from '../types';\nimport { from } from './from'; // lol\nimport { empty } from './empty';\n\n/**\n * Creates an Observable that, on subscribe, calls an Observable factory to\n * make an Observable for each new Observer.\n *\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n * is subscribed.\n * </span>\n *\n * <img src=\"./img/defer.png\" width=\"100%\">\n *\n * `defer` allows you to create the Observable only when the Observer\n * subscribes, and create a fresh Observable for each Observer. It waits until\n * an Observer subscribes to it, and then it generates an Observable,\n * typically with an Observable factory function. It does this afresh for each\n * subscriber, so although each subscriber may think it is subscribing to the\n * same Observable, in fact each subscriber gets its own individual\n * Observable.\n *\n * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n * var clicksOrInterval = Rx.Observable.defer(function () {\n *   if (Math.random() > 0.5) {\n *     return Rx.Observable.fromEvent(document, 'click');\n *   } else {\n *     return Rx.Observable.interval(1000);\n *   }\n * });\n * clicksOrInterval.subscribe(x => console.log(x));\n *\n * // Results in the following behavior:\n * // If the result of Math.random() is greater than 0.5 it will listen\n * // for clicks anywhere on the \"document\"; when document is clicked it\n * // will log a MouseEvent object to the console. If the result is less\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n *\n * @see {@link create}\n *\n * @param {function(): SubscribableOrPromise} observableFactory The Observable\n * factory function to invoke for each Observer that subscribes to the output\n * Observable. May also return a Promise, which will be converted on the fly\n * to an Observable.\n * @return {Observable} An Observable whose Observers' subscriptions trigger\n * an invocation of the given Observable factory function.\n * @static true\n * @name defer\n * @owner Observable\n */\nexport function defer<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n  return new Observable(subscriber => {\n    let input: SubscribableOrPromise<T> | void;\n    try {\n      input = observableFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    const source = input ? from(input) : empty();\n    return source.subscribe(subscriber);\n  });\n}","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\n\n/* tslint:disable:max-line-length */\n// forkJoin([a$, b$, c$]);\nexport function forkJoin<T>(sources: [ObservableInput<T>]): Observable<T[]>;\nexport function forkJoin<T, T2>(sources: [ObservableInput<T>, ObservableInput<T2>]): Observable<[T, T2]>;\nexport function forkJoin<T, T2, T3>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>]): Observable<[T, T2, T3]>;\nexport function forkJoin<T, T2, T3, T4>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>]): Observable<[T, T2, T3, T4]>;\nexport function forkJoin<T, T2, T3, T4, T5>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>]): Observable<[T, T2, T3, T4, T5]>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>, ObservableInput<T6>]): Observable<[T, T2, T3, T4, T5, T6]>;\nexport function forkJoin<T>(sources: Array<ObservableInput<T>>): Observable<T[]>;\n\n// forkJoin(a$, b$, c$)\nexport function forkJoin<T>(v1: ObservableInput<T>): Observable<T[]>;\nexport function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport function forkJoin(...args: Array<ObservableInput<any>|Function>): Observable<any>;\nexport function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Joins last values emitted by passed Observables.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n *\n * <img src=\"./img/forkJoin.png\" width=\"100%\">\n *\n * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n * or directly as arguments. If no input Observables are provided, resulting stream will complete\n * immediately.\n *\n * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n * array will have `n` values, where first value is the last thing emitted by the first Observable,\n * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n * not emit more than once and it will complete after that. If you need to emit combined values not only\n * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for resulting array to have the same length as the number of input Observables, whenever any of\n * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other Observables.\n * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n * unless at any point some other Observable completes without emitting value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n * have to emit something at least once and complete.\n *\n * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n * will be immediately unsubscribed.\n *\n * Optionally `forkJoin` accepts project function, that will be called with values which normally\n * would land in emitted array. Whatever is returned by project function, will appear in output\n * Observable instead. This means that default project can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that project function will be called only\n * when output Observable is supposed to emit a result.\n *\n * @example <caption>Use forkJoin with operator emitting immediately</caption>\n * import { forkJoin, of } from 'rxjs';\n *\n * const observable = forkJoin(\n *   of(1, 2, 3, 4),\n *   of(5, 6, 7, 8)\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!')\n * );\n *\n * // Logs:\n * // [4, 8]\n * // \"This is how it ends!\"\n *\n *\n * @example <caption>Use forkJoin with operator emitting after some time</caption>\n * import { forkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)) // emit 0, 1, 2, 3 every half a second and complete\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!')\n * );\n *\n * // Logs:\n * // [2, 3] after 3 seconds\n * // \"This is how it ends!\" immediately after\n *\n *\n * @example <caption>Use forkJoin with project function</caption>\n * import { jorkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)), // emit 0, 1, 2, 3 every half a second and complete\n *   (n, m) => n + m\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!')\n * );\n *\n * // Logs:\n * // 5 after 3 seconds\n * // \"This is how it ends!\" immediately after\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin<T>(\n  ...sources: Array<ObservableInput<T> | ObservableInput<T>[] | Function>\n): Observable<T[]> {\n\n  let resultSelector: Function;\n  if (typeof sources[sources.length - 1] === 'function') {\n    // DEPRECATED PATH\n    resultSelector = sources.pop() as Function;\n  }\n\n  // if the first and only other argument is an array\n  // assume it's been called with `forkJoin([obs1, obs2, obs3])`\n  if (sources.length === 1 && isArray(sources[0])) {\n    sources = sources[0] as Array<ObservableInput<T>>;\n  }\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return forkJoin(sources).pipe(\n      map(args => resultSelector(...args))\n    );\n  }\n\n  return new Observable(subscriber => {\n    return new ForkJoinSubscriber(subscriber, sources as Array<ObservableInput<T>>);\n  });\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T, R> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private values: T[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<R>,\n              private sources: Array<ObservableInput<T>>) {\n    super(destination);\n\n    const len = sources.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(innerSub as any)._hasValue) {\n      (innerSub as any)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const { destination, haveValues, values } = this;\n    const len = values.length;\n\n    if (!(innerSub as any)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      destination.next(values);\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\n\nconst toString: Function = Object.prototype.toString;\n\nexport interface NodeStyleEventEmitter {\n  addListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n  removeListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\n/* tslint:disable:max-line-length */\nexport function fromEvent<T>(target: EventTargetLike, eventName: string): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(target: EventTargetLike, eventName: string, resultSelector: (...args: any[]) => T): Observable<T>;\nexport function fromEvent<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, resultSelector: (...args: any[]) => T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an Observable that emits events of a specific type coming from the\n * given event target.\n *\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n * EventEmitter events or others.</span>\n *\n * <img src=\"./img/fromEvent.png\" width=\"100%\">\n *\n * `fromEvent` accepts as a first argument event target, which is an object with methods\n * for registering event handler functions. As a second argument it takes string that indicates\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n * which are described in detail below. If your event target does not match any of the ones listed,\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n * handler functions have different names, but they all accept a string describing event type\n * and function itself, which will be called whenever said event happens.\n *\n * Every time resulting Observable is subscribed, event handler function will be registered\n * to event target on given event type. When that event fires, value\n * passed as a first argument to registered function will be emitted by output Observable.\n * When Observable is unsubscribed, function will be unregistered from event target.\n *\n * Note that if event target calls registered function with more than one argument, second\n * and following arguments will not appear in resulting stream. In order to get access to them,\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\n * passed to event handler. Output Observable will then emit value returned by project function,\n * instead of the usual value.\n *\n * Remember that event targets listed below are checked via duck typing. It means that\n * no matter what kind of object you have and no matter what environment you work in,\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\n * of course they behave as was described above). So for example if Node.js library exposes\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n * a good choice.\n *\n * If the API you use is more callback then event handler oriented (subscribed\n * callback function fires only once and thus there is no need to manually\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n * instead.\n *\n * `fromEvent` supports following types of event targets:\n *\n * **DOM EventTarget**\n *\n * This is an object with `addEventListener` and `removeEventListener` methods.\n *\n * In the browser, `addEventListener` accepts - apart from event type string and event\n * handler function arguments - optional third parameter, which is either an object or boolean,\n * both used for additional configuration how and when passed function will be called. When\n * `fromEvent` is used with event target of that type, you can provide this values\n * as third parameter as well.\n *\n * **Node.js EventEmitter**\n *\n * An object with `addListener` and `removeListener` methods.\n *\n * **JQuery-style event target**\n *\n * An object with `on` and `off` methods\n *\n * **DOM NodeList**\n *\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n *\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n * it contains and install event handler function in every of them. When returned Observable\n * is unsubscribed, function will be removed from all Nodes.\n *\n * **DOM HtmlCollection**\n *\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n * installed and removed in each of elements.\n *\n *\n * @example <caption>Emits clicks happening on the DOM document</caption>\n * var clicks = fromEvent(document, 'click');\n * clicks.subscribe(x => console.log(x));\n *\n * // Results in:\n * // MouseEvent object logged to console every time a click\n * // occurs on the document.\n *\n *\n * @example <caption>Use addEventListener with capture option</caption>\n * var clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter\n *                                                                          // which will be passed to addEventListener\n * var clicksInDiv = fromEvent(someDivInDocument, 'click');\n *\n * clicksInDocument.subscribe(() => console.log('document'));\n * clicksInDiv.subscribe(() => console.log('div'));\n *\n * // By default events bubble UP in DOM tree, so normally\n * // when we would click on div in document\n * // \"div\" would be logged first and then \"document\".\n * // Since we specified optional `capture` option, document\n * // will catch event when it goes DOWN DOM tree, so console\n * // will log \"document\" and then \"div\".\n *\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n * @see {@link fromEventPattern}\n *\n * @param {EventTargetLike} target The DOM EventTarget, Node.js\n * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n * @param {string} eventName The event name of interest, being emitted by the\n * `target`.\n * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n * @return {Observable<T>}\n * @name fromEvent\n */\nexport function fromEvent<T>(\n  target: EventTargetLike,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: ((...args: any[]) => T)\n): Observable<T> {\n\n  if (isFunction(options)) {\n    // DEPRECATED PATH\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return fromEvent<T>(target, eventName, <EventListenerOptions | undefined>options).pipe(\n      map(args => isArray(args) ? resultSelector(...args) : resultSelector(args))\n    );\n  }\n\n  return new Observable<T>(subscriber => {\n    function handler(e: T) {\n      if (arguments.length > 1) {\n        subscriber.next(Array.prototype.slice.call(arguments));\n      } else {\n        subscriber.next(e);\n      }\n    }\n    setupSubscription(target, eventName, handler, subscriber, options as EventListenerOptions);\n  });\n}\n\nfunction setupSubscription<T>(sourceObj: EventTargetLike, eventName: string,\n                              handler: Function, subscriber: Subscriber<T>,\n                              options?: EventListenerOptions) {\n  let unsubscribe: () => void;\n  if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n    for (let i = 0, len = sourceObj.length; i < len; i++) {\n      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n    }\n  } else if (isEventTarget(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addEventListener(eventName, handler as EventListener, options);\n    unsubscribe = () => source.removeEventListener(eventName, handler as EventListener, options);\n  } else if (isJQueryStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.on(eventName, handler);\n    unsubscribe = () => source.off(eventName, handler);\n  } else if (isNodeStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addListener(eventName, handler as NodeEventHandler);\n    unsubscribe = () => source.removeListener(eventName, handler as NodeEventHandler);\n  } else {\n    throw new TypeError('Invalid event target');\n  }\n\n  subscriber.add(unsubscribe);\n}\n\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { fromEvent } from './fromEvent';\nimport { map } from '../operators/map';\n\n/* tslint:disable:max-line-length */\nexport function fromEventPattern<T>(addHandler: (handler: Function) => any, removeHandler?: (handler: Function, signal?: any) => void): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEventPattern<T>(addHandler: (handler: Function) => any, removeHandler?: (handler: Function, signal?: any) => void, resultSelector?: (...args: any[]) => T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an Observable from an API based on addHandler/removeHandler\n * functions.\n *\n * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n * Observable.</span>\n *\n * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n *\n * Creates an Observable by using the `addHandler` and `removeHandler`\n * functions to add and remove the handlers. The `addHandler` is\n * called when the output Observable is subscribed, and `removeHandler` is\n * called when the Subscription is unsubscribed.\n *\n * @example <caption>Emits clicks happening on the DOM document</caption>\n * function addClickHandler(handler) {\n *   document.addEventListener('click', handler);\n * }\n *\n * function removeClickHandler(handler) {\n *   document.removeEventListener('click', handler);\n * }\n *\n * var clicks = fromEventPattern(\n *   addClickHandler,\n *   removeClickHandler\n * );\n * clicks.subscribe(x => console.log(x));\n *\n * @see {@link from}\n * @see {@link fromEvent}\n *\n * @param {function(handler: Function): any} addHandler A function that takes\n * a `handler` function as argument and attaches it somehow to the actual\n * source of events.\n * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n * takes a `handler` function as argument and removes it in case it was\n * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n * removeHandler function will forward it.\n * @return {Observable<T>}\n * @name fromEventPattern\n */\nexport function fromEventPattern<T>(addHandler: (handler: Function) => any,\n                                    removeHandler?: (handler: Function, signal?: any) => void,\n                                    resultSelector?: (...args: any[]) => T): Observable<T | T[]> {\n\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return fromEventPattern<T>(addHandler, removeHandler).pipe(\n      map(args => isArray(args) ? resultSelector(...args) : resultSelector(args))\n    );\n  }\n\n  return new Observable<T | T[]>(subscriber => {\n    const handler = (...e: T[]) => subscriber.next(e.length === 1 ? e[0] : e);\n\n    let retValue: any;\n    try {\n      retValue = addHandler(handler);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    if (!isFunction(removeHandler)) {\n      return undefined;\n    }\n\n    return () => removeHandler(handler, retValue) ;\n  });\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { identity } from '../util/identity';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n   */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n   */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * SchedulerLike to use for generation process.\n   * By default, a generator starts immediately.\n   */\n  scheduler?: SchedulerLike;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n *\n * <img src=\"./img/generate.png\" width=\"100%\">\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n *\n * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n * var res = Rx.Observable.generate(1, x => x < 5, x =>  * 2, x => x + 1, Rx.Scheduler.asap);\n *\n * @see {@link from}\n * @see {@link create}\n *\n * @param {S} initialState Initial state.\n * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n * @param {function (state: S): S} iterate Iteration step function.\n * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n * @param {Scheduler} [scheduler] A {@link SchedulerLike} on which to run the generator loop. If not provided, defaults to emit immediately.\n * @returns {Observable<T>} The generated sequence.\n */\n  export function generate<T, S>(initialState: S,\n                                 condition: ConditionFunc<S>,\n                                 iterate: IterateFunc<S>,\n                                 resultSelector: ResultFunc<S, T>,\n                                 scheduler?: SchedulerLike): Observable<T>;\n\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload uses state as an emitted value.\n *\n * <img src=\"./img/generate.png\" width=\"100%\">\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n *\n * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n * var res = Rx.Observable.generate(1, x => x < 5, x => x  * 2, Rx.Scheduler.asap);\n *\n * @see {@link from}\n * @see {@link create}\n *\n * @param {S} initialState Initial state.\n * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n * @param {function (state: S): S} iterate Iteration step function.\n * @param {Scheduler} [scheduler] A {@link SchedulerLike} on which to run the generator loop. If not provided, defaults to emit immediately.\n * @returns {Observable<S>} The generated sequence.\n */\nexport function generate<S>(initialState: S,\n                            condition: ConditionFunc<S>,\n                            iterate: IterateFunc<S>,\n                            scheduler?: SchedulerLike): Observable<S>;\n\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload accepts options object that might contain initial state, iterate,\n * condition and scheduler.\n *\n * <img src=\"./img/generate.png\" width=\"100%\">\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * var res = Rx.Observable.generate({\n *   initialState: 0,\n *   condition: x => x < 10,\n *   iterate: x => x + 1\n * });\n *\n * @see {@link from}\n * @see {@link create}\n *\n * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n * @returns {Observable<S>} The generated sequence.\n */\nexport function generate<S>(options: GenerateBaseOptions<S>): Observable<S>;\n\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload accepts options object that might contain initial state, iterate,\n * condition, result selector and scheduler.\n *\n * <img src=\"./img/generate.png\" width=\"100%\">\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * var res = Rx.Observable.generate({\n *   initialState: 0,\n *   condition: x => x < 10,\n *   iterate: x => x + 1,\n *   resultSelector: x => x\n * });\n *\n * @see {@link from}\n * @see {@link create}\n *\n * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n * @returns {Observable<T>} The generated sequence.\n */\nexport function generate<T, S>(options: GenerateOptions<T, S>): Observable<T>;\n\nexport function generate<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                               condition?: ConditionFunc<S>,\n                               iterate?: IterateFunc<S>,\n                               resultSelectorOrObservable?: (ResultFunc<S, T>) | SchedulerLike,\n                               scheduler?: SchedulerLike): Observable<T> {\n\n  let resultSelector: ResultFunc<S, T>;\n  let initialState: S;\n\n  if (arguments.length == 1) {\n    const options = initialStateOrOptions as GenerateOptions<T, S>;\n    initialState = options.initialState;\n    condition = options.condition;\n    iterate = options.iterate;\n    resultSelector = options.resultSelector || identity as ResultFunc<S, T>;\n    scheduler = options.scheduler;\n  } else if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n    initialState = initialStateOrOptions as S;\n    resultSelector = identity as ResultFunc<S, T>;\n    scheduler = resultSelectorOrObservable as SchedulerLike;\n  } else {\n    initialState = initialStateOrOptions as S;\n    resultSelector = resultSelectorOrObservable as ResultFunc<S, T>;\n  }\n\n  return new Observable<T>(subscriber => {\n    let state = initialState;\n    if (scheduler) {\n      return scheduler.schedule<SchedulerState<T, S>>(dispatch, 0, {\n        subscriber,\n        iterate,\n        condition,\n        resultSelector,\n        state\n      });\n    }\n\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return undefined;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return undefined;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return undefined;\n      }\n    } while (true);\n\n    return undefined;\n  });\n}\n\nfunction dispatch<T, S>(this: SchedulerAction<SchedulerState<T, S>>, state: SchedulerState<T, S>) {\n  const { subscriber, condition } = state;\n  if (subscriber.closed) {\n    return undefined;\n  }\n  if (state.needIterate) {\n    try {\n      state.state = state.iterate(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n  } else {\n    state.needIterate = true;\n  }\n  if (condition) {\n    let conditionResult: boolean;\n    try {\n      conditionResult = condition(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    if (!conditionResult) {\n      subscriber.complete();\n      return undefined;\n    }\n    if (subscriber.closed) {\n      return undefined;\n    }\n  }\n  let value: T;\n  try {\n    value = state.resultSelector(state.state);\n  } catch (err) {\n    subscriber.error(err);\n    return undefined;\n  }\n  if (subscriber.closed) {\n    return undefined;\n  }\n  subscriber.next(value);\n  if (subscriber.closed) {\n    return undefined;\n  }\n  return this.schedule(state);\n}\n","import { Observable } from '../Observable';\nimport { defer } from './defer';\nimport { EMPTY } from './empty';\nimport { SubscribableOrPromise } from '../types';\n\n/**\n * Decides at subscription time which Observable will actually be subscribed.\n *\n * <span class=\"informal\">`If` statement for Observables.</span>\n *\n * `if` accepts a condition function and two Observables. When\n * an Observable returned by the operator is subscribed, condition function will be called.\n * Based on what boolean it returns at that moment, consumer will subscribe either to\n * the first Observable (if condition was true) or to the second (if condition was false). Condition\n * function may also not return anything - in that case condition will be evaluated as false and\n * second Observable will be subscribed.\n *\n * Note that Observables for both cases (true and false) are optional. If condition points to an Observable that\n * was left undefined, resulting stream will simply complete immediately. That allows you to, rather\n * then controlling which Observable will be subscribed, decide at runtime if consumer should have access\n * to given Observable or not.\n *\n * If you have more complex logic that requires decision between more than two Observables, {@link defer}\n * will probably be a better choice. Actually `if` can be easily implemented with {@link defer}\n * and exists only for convenience and readability reasons.\n *\n *\n * @example <caption>Change at runtime which Observable will be subscribed</caption>\n * let subscribeToFirst;\n * const firstOrSecond = Rx.Observable.if(\n *   () => subscribeToFirst,\n *   Rx.Observable.of('first'),\n *   Rx.Observable.of('second')\n * );\n *\n * subscribeToFirst = true;\n * firstOrSecond.subscribe(value => console.log(value));\n *\n * // Logs:\n * // \"first\"\n *\n * subscribeToFirst = false;\n * firstOrSecond.subscribe(value => console.log(value));\n *\n * // Logs:\n * // \"second\"\n *\n *\n * @example <caption>Control an access to an Observable</caption>\n * let accessGranted;\n * const observableIfYouHaveAccess = Rx.Observable.if(\n *   () => accessGranted,\n *   Rx.Observable.of('It seems you have an access...') // Note that only one Observable is passed to the operator.\n * );\n *\n * accessGranted = true;\n * observableIfYouHaveAccess.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('The end')\n * );\n *\n * // Logs:\n * // \"It seems you have an access...\"\n * // \"The end\"\n *\n * accessGranted = false;\n * observableIfYouHaveAccess.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('The end')\n * );\n *\n * // Logs:\n * // \"The end\"\n *\n * @see {@link defer}\n *\n * @param {function(): boolean} condition Condition which Observable should be chosen.\n * @param {Observable} [trueObservable] An Observable that will be subscribed if condition is true.\n * @param {Observable} [falseObservable] An Observable that will be subscribed if condition is false.\n * @return {Observable} Either first or second Observable, depending on condition.\n * @static true\n * @name iif\n * @owner Observable\n */\nexport function iif<T, F>(\n  condition: () => boolean,\n  trueResult: SubscribableOrPromise<T> = EMPTY,\n  falseResult: SubscribableOrPromise<F> = EMPTY\n): Observable<T|F> {\n  return defer<T|F>(() => condition() ? trueResult : falseResult);\n}\n","import { isArray } from './isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { isNumeric } from '../util/isNumeric';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits sequential numbers every specified\n * interval of time, on a specified IScheduler.\n *\n * <span class=\"informal\">Emits incremental numbers periodically in time.\n * </span>\n *\n * <img src=\"./img/interval.png\" width=\"100%\">\n *\n * `interval` returns an Observable that emits an infinite sequence of\n * ascending integers, with a constant interval of time of your choosing\n * between those emissions. The first emission is not sent immediately, but\n * only after the first period has passed. By default, this operator uses the\n * `async` IScheduler to provide a notion of time, but you may pass any\n * IScheduler to it.\n *\n * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n * var numbers = Rx.Observable.interval(1000);\n * numbers.subscribe(x => console.log(x));\n *\n * @see {@link timer}\n * @see {@link delay}\n *\n * @param {number} [period=0] The interval size in milliseconds (by default)\n * or the time unit determined by the scheduler's clock.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a sequential number each time\n * interval.\n * @static true\n * @name interval\n * @owner Observable\n */\nexport function interval(period = 0,\n                         scheduler: SchedulerLike = async): Observable<number> {\n  if (!isNumeric(period) || period < 0) {\n    period = 0;\n  }\n\n  if (!scheduler || typeof scheduler.schedule !== 'function') {\n    scheduler = async;\n  }\n\n  return new Observable<number>(subscriber => {\n    subscriber.add(\n      scheduler.schedule(dispatch, period, { subscriber, counter: 0, period })\n    );\n    return subscriber;\n  });\n}\n\nfunction dispatch(this: SchedulerAction<IntervalState>, state: IntervalState) {\n  const { subscriber, counter, period } = state;\n  subscriber.next(counter);\n  this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n\ninterface IntervalState {\n  subscriber: Subscriber<number>;\n  counter: number;\n  period: number;\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike} from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | SchedulerLike | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | SchedulerLike | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: SchedulerLike = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <SchedulerLike>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll<R>(concurrent)(fromArray<any>(observables, scheduler));\n}\n","import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n\n/**\n * An Observable that emits no items to the Observer and never completes.\n *\n * <img src=\"./img/never.png\" width=\"100%\">\n *\n * A simple Observable that emits neither values nor errors nor the completion\n * notification. It can be used for testing purposes or for composing with other\n * Observables. Please note that by never emitting a complete notification, this\n * Observable keeps the subscription from being disposed automatically.\n * Subscriptions need to be manually disposed.\n *\n * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n * function info() {\n *   console.log('Will not be called');\n * }\n * var result = NEVER.startWith(7);\n * result.subscribe(x => console.log(x), info, info);\n *\n * @see {@link create}\n * @see {@link EMPTY}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const NEVER = new Observable<never>(noop);\n\n/**\n * @deprecated Deprecated in favor of using NEVER constant.\n */\nexport function never () {\n  return NEVER;\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { from } from './from';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNext<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` Will subscribe to each observable source it is provided, in order.\n * If the source it's subscribed to emits an error or completes, it will move to the next source\n * without error.\n *\n * If `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link EMPTY}.\n *\n * `onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its\n * sources emits an error.\n *\n * Note that there is no way to handle any errors thrown by sources via the resuult of\n * `onErrorResumeNext`. If you want to handle errors thrown in any given source, you can\n * always use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * import { onErrorResumeNext, of } from 'rxjs/create';\n * import { map } from 'rxjs/operators';\n *\n * onErrorResumeNext(\n *  of(1, 2, 3, 0).pipe(\n *    map(x => {\n *      if (x === 0) throw Error();\n *      return 10 / x;\n *    })\n *  ),\n *  of(1, 2, 3),\n * )\n * .subscribe(\n *   val => console.log(val),\n *   err => console.log(err),          // Will never be called.\n *   () => console.log('done')\n * );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"done\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} sources Observables (or anything that *is* observable) passed either directly or as an array.\n * @return {Observable} An Observable that concatenates all sources, one after the other,\n * ignoring all errors, such that any error causes it to move on to the next source.\n */\nexport function onErrorResumeNext<T, R>(...sources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  const [ first, ...remainder ] = sources;\n\n  if (sources.length === 1 && isArray(first)) {\n    return onErrorResumeNext(...first);\n  }\n\n  return new Observable(subscriber => {\n    const subNext = () => subscriber.add(\n      onErrorResumeNext(...remainder).subscribe(subscriber)\n    );\n\n    return from(first).subscribe({\n      next(value) { subscriber.next(value); },\n      error: subNext,\n      complete: subNext,\n    });\n  });\n}\n","import { Observable } from '../Observable';\r\nimport { SchedulerAction, SchedulerLike } from '../types';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Subscription } from '../Subscription';\r\n\r\n/**\r\n * Convert an object into an observable sequence of [key, value] pairs\r\n * using an optional IScheduler to enumerate the object.\r\n *\r\n * @example <caption>Converts a javascript object to an Observable</caption>\r\n * var obj = {\r\n *   foo: 42,\r\n *   bar: 56,\r\n *   baz: 78\r\n * };\r\n *\r\n * var source = Rx.Observable.pairs(obj);\r\n *\r\n * var subscription = source.subscribe(\r\n *   function (x) {\r\n *     console.log('Next: %s', x);\r\n *   },\r\n *   function (err) {\r\n *     console.log('Error: %s', err);\r\n *   },\r\n *   function () {\r\n *     console.log('Completed');\r\n *   });\r\n *\r\n * @param {Object} obj The object to inspect and turn into an\r\n * Observable sequence.\r\n * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n * enumeration of the input sequence on.\r\n * @returns {(Observable<[string, T]>)} An observable sequence of\r\n * [key, value] pairs from the object.\r\n */\r\nexport function pairs<T>(obj: Object, scheduler?: SchedulerLike): Observable<[string, T]> {\r\n  if (!scheduler) {\r\n    return new Observable<[string, T]>(subscriber => {\r\n      const keys = Object.keys(obj);\r\n      for (let i = 0; i < keys.length && !subscriber.closed; i++) {\r\n        const key = keys[i];\r\n        if (obj.hasOwnProperty(key)) {\r\n          subscriber.next([key, obj[key]]);\r\n        }\r\n      }\r\n      subscriber.complete();\r\n    });\r\n  } else {\r\n    return new Observable<[string, T]>(subscriber => {\r\n      const keys = Object.keys(obj);\r\n      const subscription = new Subscription();\r\n      subscription.add(\r\n        scheduler.schedule<{ keys: string[], index: number, subscriber: Subscriber<[string, T]>, subscription: Subscription, obj: Object }>\r\n          (dispatch, 0, { keys, index: 0, subscriber, subscription, obj }));\r\n      return subscription;\r\n    });\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport function dispatch<T>(this: SchedulerAction<any>,\r\n                            state: { keys: string[], index: number, subscriber: Subscriber<[string, T]>, subscription: Subscription, obj: Object }) {\r\n  const { keys, index, subscriber, subscription, obj } = state;\r\n  if (!subscriber.closed) {\r\n    if (index < keys.length) {\r\n      const key = keys[index];\r\n      subscriber.next([key, obj[key]]);\r\n      subscription.add(this.schedule({ keys, index: index + 1, subscriber, subscription, obj }));\r\n    } else {\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}\r\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable as any, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { SchedulerAction, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\n\n/**\n * Creates an Observable that emits a sequence of numbers within a specified\n * range.\n *\n * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n *\n * <img src=\"./img/range.png\" width=\"100%\">\n *\n * `range` operator emits a range of sequential integers, in order, where you\n * select the `start` of the range and its `length`. By default, uses no\n * IScheduler and just delivers the notifications synchronously, but may use\n * an optional IScheduler to regulate those deliveries.\n *\n * @example <caption>Emits the numbers 1 to 10</caption>\n * var numbers = Rx.Observable.range(1, 10);\n * numbers.subscribe(x => console.log(x));\n *\n * @see {@link timer}\n * @see {@link interval}\n *\n * @param {number} [start=0] The value of the first integer in the sequence.\n * @param {number} [count=0] The number of sequential integers to generate.\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emissions of the notifications.\n * @return {Observable} An Observable of numbers that emits a finite range of\n * sequential integers.\n * @static true\n * @name range\n * @owner Observable\n */\nexport function range(start: number = 0,\n                      count: number = 0,\n                      scheduler?: SchedulerLike): Observable<number> {\n  return new Observable<number>(subscriber => {\n    let index = 0;\n\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n\n    return undefined;\n  });\n}\n\n/** @internal */\nexport function dispatch(this: SchedulerAction<any>, state: any) {\n  const { start, index, count, subscriber } = state;\n\n  if (index >= count) {\n    subscriber.complete();\n    return;\n  }\n\n  subscriber.next(start);\n\n  if (subscriber.closed) {\n    return;\n  }\n\n  state.index = index + 1;\n  state.start = start + 1;\n\n  this.schedule(state);\n}\n","import { Observable } from '../Observable';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that starts emitting after an `initialDelay` and\n * emits ever increasing numbers after each `period` of time thereafter.\n *\n * <span class=\"informal\">Its like {@link interval}, but you can specify when\n * should the emissions start.</span>\n *\n * <img src=\"./img/timer.png\" width=\"100%\">\n *\n * `timer` returns an Observable that emits an infinite sequence of ascending\n * integers, with a constant interval of time, `period` of your choosing\n * between those emissions. The first emission happens after the specified\n * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n * operator uses the `async` IScheduler to provide a notion of time, but you\n * may pass any IScheduler to it. If `period` is not specified, the output\n * Observable emits only one value, `0`. Otherwise, it emits an infinite\n * sequence.\n *\n * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n * var numbers = Rx.Observable.timer(3000, 1000);\n * numbers.subscribe(x => console.log(x));\n *\n * @example <caption>Emits one number after five seconds</caption>\n * var numbers = Rx.Observable.timer(5000);\n * numbers.subscribe(x => console.log(x));\n *\n * @see {@link interval}\n * @see {@link delay}\n *\n * @param {number|Date} [dueTime] The initial delay time to wait before\n * emitting the first value of `0`.\n * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the\n * subsequent numbers.\n * @param {SchedulerLike} [scheduler=async] The IScheduler to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a `0` after the\n * `initialDelay` and ever increasing numbers after each `period` of time\n * thereafter.\n * @static true\n * @name timer\n * @owner Observable\n */\nexport function timer(dueTime: number | Date = 0,\n                      periodOrScheduler?: number | SchedulerLike,\n                      scheduler?: SchedulerLike): Observable<number> {\n  let period = -1;\n  if (isNumeric(periodOrScheduler)) {\n    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n  } else if (isScheduler(periodOrScheduler)) {\n    scheduler = periodOrScheduler as any;\n  }\n\n  if (!isScheduler(scheduler)) {\n    scheduler = async;\n  }\n\n  return new Observable(subscriber => {\n    const due = isNumeric(dueTime)\n      ? (dueTime as number)\n      : (+dueTime - scheduler.now());\n\n    return scheduler.schedule(dispatch, due, {\n      index: 0, period, subscriber\n    });\n  });\n}\n\ninterface TimerState {\n  index: number;\n  period: number;\n  subscriber: Subscriber<number>;\n}\n\nfunction dispatch(this: SchedulerAction<TimerState>, state: TimerState) {\n  const { index, period, subscriber } = state;\n  subscriber.next(index);\n\n  if (subscriber.closed) {\n    return;\n  } else if (period === -1) {\n    return subscriber.complete();\n  }\n\n  state.index = index + 1;\n  this.schedule(state, period);\n}\n","import { Observable } from '../Observable';\nimport { Unsubscribable, ObservableInput } from '../types';\nimport { from } from './from'; // from from from! LAWL\nimport { EMPTY } from './empty';\n\n/**\n * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.\n *\n * <span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span>\n *\n * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.\n * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with\n * that object and should return an Observable. That Observable can use resource object during its execution.\n * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor\n * resource object will be shared in any way between subscriptions.\n *\n * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed\n * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\n * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\n * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which\n * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\n * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make\n * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.\n *\n * @see {@link defer}\n *\n * @param {function(): ISubscription} resourceFactory A function which creates any resource object\n * that implements `unsubscribe` method.\n * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which\n * creates an Observable, that can use injected resource object.\n * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but\n * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.\n */\nexport function using<T>(resourceFactory: () => Unsubscribable | void,\n                         observableFactory: (resource: Unsubscribable | void) => ObservableInput<T> | void): Observable<T> {\n  return new Observable<T>(subscriber => {\n    let resource: Unsubscribable | void;\n\n    try {\n      resource = resourceFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    let result: ObservableInput<T> | void;\n    try {\n      result = observableFactory(resource);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    const source = result ? from(result) : EMPTY;\n    const subscription = source.subscribe(subscriber);\n    return () => {\n      subscription.unsubscribe();\n      if (resource) {\n        resource.unsubscribe();\n      }\n    };\n  });\n}\n","import { Observable } from '../Observable';\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { ObservableInput, PartialObserver } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zip<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zip<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zip<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zip<R>(array: ObservableInput<any>[]): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R): Observable<R>;\n\nexport function zip<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zip<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const resultSelector = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof resultSelector === 'function') {\n    observables.pop();\n  }\n  return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  resultSelector: (...values: Array<any>) => R;\n\n  constructor(resultSelector?: (...values: Array<any>) => R) {\n    this.resultSelector = resultSelector;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private resultSelector: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              resultSelector?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.resultSelector) {\n      this._tryresultSelector(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryresultSelector(args: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","/* Observable */\nexport { Observable } from './internal/Observable';\nexport { ConnectableObservable } from './internal/observable/ConnectableObservable';\nexport { Operator } from './internal/Operator';\nexport { observable } from './internal/symbol/observable';\n\n/* Subjects */\nexport { Subject } from './internal/Subject';\nexport { BehaviorSubject } from './internal/BehaviorSubject';\nexport { ReplaySubject } from './internal/ReplaySubject';\nexport { AsyncSubject } from './internal/AsyncSubject';\n\n/* Schedulers */\nexport { asap as asapScheduler } from './internal/scheduler/asap';\nexport { async as asyncScheduler } from './internal/scheduler/async';\nexport { queue as queueScheduler } from './internal/scheduler/queue';\nexport { animationFrame as animationFrameScheduler } from './internal/scheduler/animationFrame';\nexport { VirtualTimeScheduler, VirtualAction } from './internal/scheduler/VirtualTimeScheduler';\nexport { Scheduler } from './internal/Scheduler';\n\n/* Subscription */\nexport { Subscription } from './internal/Subscription';\nexport { Subscriber } from './internal/Subscriber';\n\n/* Notification */\nexport { Notification } from './internal/Notification';\n\n/* Utils */\nexport { pipe } from './internal/util/pipe';\nexport { noop } from './internal/util/noop';\nexport { identity } from './internal/util/identity';\n\n/* Error types */\nexport { ArgumentOutOfRangeError } from './internal/util/ArgumentOutOfRangeError';\nexport { EmptyError } from './internal/util/EmptyError';\nexport { ObjectUnsubscribedError } from './internal/util/ObjectUnsubscribedError';\nexport { UnsubscriptionError } from './internal/util/UnsubscriptionError';\nexport { TimeoutError } from './internal/util/TimeoutError';\n\n/* Static observable creation exports */\nexport { bindCallback } from './internal/observable/bindCallback';\nexport { bindNodeCallback } from './internal/observable/bindNodeCallback';\nexport { combineLatest } from './internal/observable/combineLatest';\nexport { concat } from './internal/observable/concat';\nexport { defer } from './internal/observable/defer';\nexport { empty } from './internal/observable/empty';\nexport { forkJoin } from './internal/observable/forkJoin';\nexport { from } from './internal/observable/from';\nexport { fromEvent } from './internal/observable/fromEvent';\nexport { fromEventPattern } from './internal/observable/fromEventPattern';\nexport { generate } from './internal/observable/generate';\nexport { iif } from './internal/observable/iif';\nexport { interval } from './internal/observable/interval';\nexport { merge } from './internal/observable/merge';\nexport { never } from './internal/observable/never';\nexport { of } from './internal/observable/of';\nexport { onErrorResumeNext } from './internal/observable/onErrorResumeNext';\nexport { pairs } from './internal/observable/pairs';\nexport { race } from './internal/observable/race';\nexport { range } from './internal/observable/range';\nexport { throwError } from './internal/observable/throwError';\nexport { timer } from './internal/observable/timer';\nexport { using } from './internal/observable/using';\nexport { zip } from './internal/observable/zip';\n\n/* Constants */\nexport { EMPTY } from './internal/observable/empty';\nexport { NEVER } from './internal/observable/never';\n\n/* Types */\nexport * from './internal/types';\n\n/* Config */\nexport { config } from './internal/config';\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction, SchedulerAction, SchedulerLike } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: SchedulerLike = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ninterface DispatchCreateArg<T> {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number;\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: SchedulerLike;\n}\n\ninterface DispatchCloseArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: DispatchCreateArg<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule<DispatchCloseArg<T>>(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule<DispatchCreateArg<T>>(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: SchedulerAction<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\nfunction dispatchBufferCreation<T>(this: SchedulerAction<DispatchCreateArg<T>>, state: DispatchCreateArg<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <SchedulerAction<DispatchCreateArg<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchCloseArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchCloseArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction, SubscribableOrPromise } from '../types';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction } from '../types';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { CombineLatestOperator } from '../observable/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, ObservableInput } from '../types';\n\nexport function combineAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\nexport function combineAll<T>(): OperatorFunction<any, T[]>;\nexport function combineAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\nexport function combineAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n","\nimport { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nimport { Observable } from '../Observable';\nimport { ObservableInput, OperatorFunction } from '../types';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\n/** @deprecated Deprecated in favor of static combineLatest. */\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @deprecated Deprecated in favor of static combineLatest.\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(from([source, ...observables]), new CombineLatestOperator(project));\n}\n","import {  concat as concatStatic } from '../observable/concat';\nimport { Observable } from '../Observable';\nimport { ObservableInput, OperatorFunction, MonoTypeOperatorFunction, SchedulerLike } from '../types';\n\n/* tslint:disable:max-line-length */\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T>(...observables: Array<ObservableInput<T> | SchedulerLike>): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static concat. */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @deprecated Deprecated in favor of static concat.\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer, OperatorFunction } from '../types';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<any>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (subscription && !subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      // This must be done *before* passing the value\n      // along to the destination because it's possible for\n      // the value to synchronously re-enter this operator\n      // recursively if the duration selector Observable\n      // emits synchronously\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      const { lastValue } = this;\n      // This must be done *before* passing the value\n      // along to the destination because it's possible for\n      // the value to synchronously re-enter this operator\n      // recursively when scheduled with things like\n      // VirtualScheduler/TestScheduler.\n      this.lastValue = null;\n      this.hasValue = false;\n      this.destination.next(lastValue);\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: SchedulerLike;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: SchedulerAction<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: SchedulerLike): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(public source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../types';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, TeardownLogic } from '../types';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next?: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nclass TapSubscriber<T> extends Subscriber<T> {\n  private _context: any;\n\n  private _tapNext: ((value: T) => void) = noop;\n\n  private _tapError: ((err: any) => void) = noop;\n\n  private _tapComplete: (() => void) = noop;\n\n  constructor(destination: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n      super(destination);\n      this._tapError = error || noop;\n      this._tapComplete = complete || noop;\n      if (isFunction(observerOrNext)) {\n        this._context = this;\n        this._tapNext = observerOrNext;\n      } else if (observerOrNext) {\n        this._context = observerOrNext;\n        this._tapNext = observerOrNext.next || noop;\n        this._tapError = observerOrNext.error || noop;\n        this._tapComplete = observerOrNext.complete || noop;\n      }\n    }\n\n  _next(value: T) {\n    try {\n      this._tapNext.call(this._context, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(value);\n  }\n\n  _error(err: any) {\n    try {\n      this._tapError.call(this._context, err);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.error(err);\n  }\n\n  _complete() {\n    try {\n      this._tapComplete.call(this._context, );\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    return this.destination.complete();\n  }\n}\n","import { tap } from './tap';\nimport { EmptyError } from '../util/EmptyError';\nimport { MonoTypeOperatorFunction } from '../types';\n\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link ErrorEmpty}.\n *\n * @example\n *\n * const click$ = fromEvent(button, 'click');\n *\n * clicks$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(\n *     () => new Error('the button was not clicked within 1 second')\n *   ),\n * )\n * .subscribe({\n *   next() { console.log('The button was clicked'); },\n *   error(err) { console.error(err); },\n * });\n * @param {Function} [errorFactory] A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n */\nexport const throwIfEmpty =\n  <T>(errorFactory: (() => any) = defaultErrorFactory) => tap<T>({\n    hasValue: false,\n    next() { this.hasValue = true; },\n    complete() {\n      if (!this.hasValue) {\n        throw errorFactory();\n      }\n    }\n  } as any);\n\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { filter } from './filter';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { take } from './take';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  if (index < 0) { throw new ArgumentOutOfRangeError(); }\n  const hasDefaultValue = arguments.length >= 2;\n  return (source: Observable<T>) => source.pipe(\n    filter((v, i) => i === index),\n    take(1),\n    hasDefaultValue\n      ? defaultIfEmpty(defaultValue)\n      : throwIfEmpty(() => new ArgumentOutOfRangeError()),\n  );\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Observer, OperatorFunction } from '../types';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction, TeardownLogic } from '../types';\n\nexport function exhaust<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport function exhaust<R>(): OperatorFunction<any, R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): OperatorFunction<any, T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n): OperatorFunction<T, I|R> {\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      exhaustMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii)),\n      )),\n    );\n  }\n  return (source: Observable<T>) =>\n    source.lift(new ExhauseMapOperator(project));\n}\n\nclass ExhauseMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ExhaustMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasSubscription = false;\n  private hasCompleted = false;\n  private index = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction, ObservableInput, SchedulerLike } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, R>;\nexport function expand<T>(project: (value: T, index: number) => ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: SchedulerLike = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: ObservableInput<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule<DispatchArg<T, R>>(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T | R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = new Map<K, Subject<T | R>>();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = (this.subjectSelector ? this.subjectSelector() : new Subject<R>()) as Subject<T | R>;\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T | any>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const { refCountSubscription, groupSubject } = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements(): OperatorFunction<any, never> {\n  return function ignoreElementsOperatorFunction(source: Observable<any>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    // Do nothing\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../types';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../types';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n","import { merge as mergeStatic } from '../observable/merge';\nimport { Observable } from '../Observable';\nimport { ObservableInput, OperatorFunction, MonoTypeOperatorFunction, SchedulerLike } from '../types';\n\n/* tslint:disable:max-line-length */\n/** @deprecated Deprecated in favor of static merge. */\nexport function merge<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static merge. */\nexport function merge<T>(concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static merge. */\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;\n/** @deprecated Deprecated in favor of static merge. */\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;\n/** @deprecated Deprecated in favor of static merge. */\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;\n/** @deprecated Deprecated in favor of static merge. */\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;\n/** @deprecated Deprecated in favor of static merge. */\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;\n/** @deprecated Deprecated in favor of static merge. */\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;\n/** @deprecated Deprecated in favor of static merge. */\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\n/** @deprecated Deprecated in favor of static merge. */\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\n/** @deprecated Deprecated in favor of static merge. */\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated Deprecated in favor of static merge. */\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated Deprecated in favor of static merge. */\nexport function merge<T>(...observables: Array<ObservableInput<T> | SchedulerLike | number>): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static merge. */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @deprecated Deprecated in favor of static merge.\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../../internal/types';\nimport { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T>(innerObservable: ObservableInput<T>, concurrent?: number): OperatorFunction<any, T>;\n/** @deprecated */\nexport function mergeMapTo<T, I, R>(innerObservable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable`\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(\n  innerObservable: ObservableInput<I>,\n  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, I|R> {\n  if (typeof resultSelector === 'function') {\n    return mergeMap(() => innerObservable, resultSelector, concurrent);\n  }\n  if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return mergeMap(() => innerObservable, concurrent);\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => ObservableInput<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => ObservableInput<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => ObservableInput<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../types';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<R>>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { from } from '../observable/from';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return from(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../types';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T, index: number) => boolean,\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) => [\n    filter(predicate, thisArg)(source),\n    filter(not(predicate, thisArg) as any)(source)\n  ] as [Observable<T>, Observable<T>];\n}\n","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../types';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../types';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction, SchedulerLike } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: SchedulerLike): OperatorFunction<T, R>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: SchedulerLike | OperatorFunction<T, R>,\n                                    scheduler?: SchedulerLike): UnaryFunction<Observable<T>, ConnectableObservable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as ConnectableObservable<R>;\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../types';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = <Array<Observable<T>>>observables[0];\n    }\n\n    return source.lift.call(raceStatic<T>(source, ...observables));\n  };\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { empty } from '../observable/empty';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return empty();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _unsubscribe } = this;\n\n    this._unsubscribe = null;\n    super._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { _unsubscribe } = this;\n\n    this._unsubscribe = null;\n    this._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: SchedulerAction<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { Observer, OperatorFunction } from '../types';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../types';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n}\n","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\nimport { Observer, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n * emits items but none match the specified predicate then `undefined` is emiited.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate or `undefined` when no items match.\n *\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, TeardownLogic, ObservableInput } from '../types';\nimport { Subscription } from '../Subscription';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(destination: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>, notifier: ObservableInput<any>) {\n    super(destination);\n    this.add(this.innerSubscription = subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n    this.innerSubscription.unsubscribe();\n  }\n\n  notifyComplete() {\n    /* do nothing */\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { fromArray } from '../observable/fromArray';\nimport { scalar } from '../observable/scalar';\nimport { empty } from '../observable/empty';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(v1: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(...array: Array<T | SchedulerLike>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | SchedulerLike>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    let scheduler = <SchedulerLike>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len === 1 && !scheduler) {\n      return concatStatic(scalar(array[0] as T), source);\n    } else if (len > 0) {\n      return concatStatic(fromArray(array as T[], scheduler), source);\n    } else {\n      return concatStatic<T>(empty(scheduler) as any, source);\n    }\n  };\n}\n","import { SchedulerLike, SchedulerAction } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  /** @nocollapse */\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: SchedulerLike = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  /** @nocollapse */\n  static dispatch<T>(this: SchedulerAction<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: SchedulerLike = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule<DispatchArg<any>>(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function subscribeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new SubscribeOnOperator<T>(scheduler, delay));\n  };\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: SchedulerLike,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable<T>(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n): OperatorFunction<T, I|R> {\n  if (typeof resultSelector === 'function') {\n    return (source: Observable<T>) => source.pipe(\n      switchMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii))\n      ))\n    );\n  }\n  return (source: Observable<T>) => source.lift(new SwitchMapOperator(project));\n}\n\nclass SwitchMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<R>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n      this.destination.next(innerValue);\n  }\n}\n","import { OperatorFunction, ObservableInput } from '../types';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport function switchAll<R>(): OperatorFunction<any, R>;\n\nexport function switchAll<T>(): OperatorFunction<ObservableInput<T>, T> {\n  return switchMap(identity);\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n    const notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n    if (notifierSubscription && !notifierSubscription.closed) {\n      takeUntilSubscriber.add(notifierSubscription);\n      return source.subscribe(takeUntilSubscriber);\n    }\n    return takeUntilSubscriber;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>, ) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<any>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private _throttled: Subscription;\n  private _sendValue: T;\n  private _hasValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this._hasValue = true;\n    this._sendValue = value;\n\n    if (!this._throttled) {\n      if (this._leading) {\n        this.send();\n      } else {\n        this.throttle(value);\n      }\n    }\n  }\n\n  private send() {\n    const { _hasValue, _sendValue } = this;\n    if (_hasValue) {\n      this.destination.next(_sendValue);\n      this.throttle(_sendValue);\n    }\n    this._hasValue = false;\n    this._sendValue = null;\n  }\n\n  private throttle(value: T): void {\n    const duration = this.tryDurationSelector(value);\n    if (duration) {\n      this.add(this._throttled = subscribeToResult(this, duration));\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  private throttlingDone() {\n    const { _throttled, _trailing } = this;\n    if (_throttled) {\n      _throttled.unsubscribe();\n    }\n    this._throttled = null;\n\n    if (_trailing) {\n      this.send();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.throttlingDone();\n  }\n\n  notifyComplete(): void {\n    this.throttlingDone();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: SchedulerLike = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: SchedulerLike,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: SchedulerLike,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule<DispatchArg<T>>(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { SchedulerLike, OperatorFunction } from '../types';\nimport { scan } from './scan';\nimport { defer } from '../observable/defer';\nimport { map } from './map';\n\nexport function timeInterval<T>(scheduler: SchedulerLike = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => defer(() => {\n    return source.pipe(\n      // HACK: the typings seem off with scan\n      scan(\n        ({ current }, value) => ({ value, current: scheduler.now(), last: current }),\n        { current: scheduler.now(), value: undefined,  last: undefined }\n      ) as any,\n      map<any, TimeInterval<T>>(({ current, last, value }) => new TimeInterval(value, current - last)),\n    );\n  });\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {}\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction, MonoTypeOperatorFunction, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: SchedulerLike): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: SchedulerLike = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: SchedulerAction<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<SchedulerAction<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<SchedulerAction<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule<TimeoutWithSubscriber<T, R>>(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","\nimport { async } from '../scheduler/async';\nimport { OperatorFunction, SchedulerLike, Timestamp as TimestampInterface } from '../types';\nimport { map } from './map';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: SchedulerLike = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> implements TimestampInterface<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n}\n","import { reduce } from './reduce';\nimport { OperatorFunction } from '../types';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  if (index === 0) {\n    return [item];\n  }\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction, SchedulerLike, SchedulerAction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: SchedulerLike = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: SchedulerLike;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: SchedulerAction<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule<CloseState<T>>(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule<CreationState<T>>(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule<TimeSpanOnlyState<T>>(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: SchedulerAction<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: SchedulerAction<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule<CloseState<T>>(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings as any));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context as any);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { zip as zipStatic } from '../observable/zip';\nimport { Observable } from '../Observable';\nimport { ObservableInput, OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\n/** @deprecated Deprecated in favor of static zip. */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\n/** @deprecated Deprecated in favor of static zip. */\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\n/** @deprecated Deprecated in favor of static zip. */\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\n/** @deprecated Deprecated in favor of static zip. */\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\n/** @deprecated Deprecated in favor of static zip. */\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\n/** @deprecated Deprecated in favor of static zip. */\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\n/** @deprecated Deprecated in favor of static zip. */\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static zip. */\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @deprecated Deprecated in favor of static zip.\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}","import { ZipOperator } from '../observable/zip';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, ObservableInput } from '../types';\n\nexport function zipAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\nexport function zipAll<T>(): OperatorFunction<any, T[]>;\nexport function zipAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\nexport function zipAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\n\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new ZipOperator(project));\n}\n","\n/* Operator exports */\nexport { audit } from '../internal/operators/audit';\nexport { auditTime } from '../internal/operators/auditTime';\nexport { buffer } from '../internal/operators/buffer';\nexport { bufferCount } from '../internal/operators/bufferCount';\nexport { bufferTime } from '../internal/operators/bufferTime';\nexport { bufferToggle } from '../internal/operators/bufferToggle';\nexport { bufferWhen } from '../internal/operators/bufferWhen';\nexport { catchError } from '../internal/operators/catchError';\nexport { combineAll } from '../internal/operators/combineAll';\nexport { combineLatest } from '../internal/operators/combineLatest';\nexport { concat } from '../internal/operators/concat';\nexport { concatAll } from '../internal/operators/concatAll';\nexport { concatMap } from '../internal/operators/concatMap';\nexport { concatMapTo } from '../internal/operators/concatMapTo';\nexport { count } from '../internal/operators/count';\nexport { debounce } from '../internal/operators/debounce';\nexport { debounceTime } from '../internal/operators/debounceTime';\nexport { defaultIfEmpty } from '../internal/operators/defaultIfEmpty';\nexport { delay } from '../internal/operators/delay';\nexport { delayWhen } from '../internal/operators/delayWhen';\nexport { dematerialize } from '../internal/operators/dematerialize';\nexport { distinct } from '../internal/operators/distinct';\nexport { distinctUntilChanged } from '../internal/operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from '../internal/operators/distinctUntilKeyChanged';\nexport { elementAt } from '../internal/operators/elementAt';\nexport { every } from '../internal/operators/every';\nexport { exhaust } from '../internal/operators/exhaust';\nexport { exhaustMap } from '../internal/operators/exhaustMap';\nexport { expand } from '../internal/operators/expand';\nexport { filter } from '../internal/operators/filter';\nexport { finalize } from '../internal/operators/finalize';\nexport { find } from '../internal/operators/find';\nexport { findIndex } from '../internal/operators/findIndex';\nexport { first } from '../internal/operators/first';\nexport { groupBy } from '../internal/operators/groupBy';\nexport { ignoreElements } from '../internal/operators/ignoreElements';\nexport { isEmpty } from '../internal/operators/isEmpty';\nexport { last } from '../internal/operators/last';\nexport { map } from '../internal/operators/map';\nexport { mapTo } from '../internal/operators/mapTo';\nexport { materialize } from '../internal/operators/materialize';\nexport { max } from '../internal/operators/max';\nexport { merge } from '../internal/operators/merge';\nexport { mergeAll } from '../internal/operators/mergeAll';\nexport { mergeMap } from '../internal/operators/mergeMap';\nexport { mergeMap as flatMap } from '../internal/operators/mergeMap';\nexport { mergeMapTo } from '../internal/operators/mergeMapTo';\nexport { mergeScan } from '../internal/operators/mergeScan';\nexport { min } from '../internal/operators/min';\nexport { multicast } from '../internal/operators/multicast';\nexport { observeOn } from '../internal/operators/observeOn';\nexport { onErrorResumeNext } from '../internal/operators/onErrorResumeNext';\nexport { pairwise } from '../internal/operators/pairwise';\nexport { partition } from '../internal/operators/partition';\nexport { pluck } from '../internal/operators/pluck';\nexport { publish } from '../internal/operators/publish';\nexport { publishBehavior } from '../internal/operators/publishBehavior';\nexport { publishLast } from '../internal/operators/publishLast';\nexport { publishReplay } from '../internal/operators/publishReplay';\nexport { race } from '../internal/operators/race';\nexport { reduce } from '../internal/operators/reduce';\nexport { repeat } from '../internal/operators/repeat';\nexport { repeatWhen } from '../internal/operators/repeatWhen';\nexport { retry } from '../internal/operators/retry';\nexport { retryWhen } from '../internal/operators/retryWhen';\nexport { refCount } from '../internal/operators/refCount';\nexport { sample } from '../internal/operators/sample';\nexport { sampleTime } from '../internal/operators/sampleTime';\nexport { scan } from '../internal/operators/scan';\nexport { sequenceEqual } from '../internal/operators/sequenceEqual';\nexport { share } from '../internal/operators/share';\nexport { shareReplay } from '../internal/operators/shareReplay';\nexport { single } from '../internal/operators/single';\nexport { skip } from '../internal/operators/skip';\nexport { skipLast } from '../internal/operators/skipLast';\nexport { skipUntil } from '../internal/operators/skipUntil';\nexport { skipWhile } from '../internal/operators/skipWhile';\nexport { startWith } from '../internal/operators/startWith';\nexport { subscribeOn } from '../internal/operators/subscribeOn';\nexport { switchAll } from '../internal/operators/switchAll';\nexport { switchMap } from '../internal/operators/switchMap';\nexport { switchMapTo } from '../internal/operators/switchMapTo';\nexport { take } from '../internal/operators/take';\nexport { takeLast } from '../internal/operators/takeLast';\nexport { takeUntil } from '../internal/operators/takeUntil';\nexport { takeWhile } from '../internal/operators/takeWhile';\nexport { tap } from '../internal/operators/tap';\nexport { throttle } from '../internal/operators/throttle';\nexport { throttleTime } from '../internal/operators/throttleTime';\nexport { throwIfEmpty } from '../internal/operators/throwIfEmpty';\nexport { timeInterval } from '../internal/operators/timeInterval';\nexport { timeout } from '../internal/operators/timeout';\nexport { timeoutWith } from '../internal/operators/timeoutWith';\nexport { timestamp } from '../internal/operators/timestamp';\nexport { toArray } from '../internal/operators/toArray';\nexport { window } from '../internal/operators/window';\nexport { windowCount } from '../internal/operators/windowCount';\nexport { windowTime } from '../internal/operators/windowTime';\nexport { windowToggle } from '../internal/operators/windowToggle';\nexport { windowWhen } from '../internal/operators/windowWhen';\nexport { withLatestFrom } from '../internal/operators/withLatestFrom';\nexport { zip } from '../internal/operators/zip';\nexport { zipAll } from '../internal/operators/zipAll';\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Information about how a type or `InjectionToken` interfaces with the DI system.\n *\n * At a minimum, this includes a `factory` which defines how to create the given type `T`, possibly\n * requesting injection of other types if necessary.\n *\n * Optionally, a `providedIn` parameter specifies that the given type belongs to a particular\n * `InjectorDef`, `NgModule`, or a special scope (e.g. `'root'`). A value of `null` indicates\n * that the injectable does not belong to any scope.\n *\n * This type is typically generated by the Angular compiler, but can be hand-written if needed.\n *\n * \\@experimental\n * @record\n * @template T\n */\nexport function InjectableDef() { }\nfunction InjectableDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InjectableDef.prototype.providedIn;\n    /** @type {?} */\n    InjectableDef.prototype.factory;\n}\n/**\n * Information about the providers to be included in an `Injector` as well as how the given type\n * which carries the information should be created by the DI system.\n *\n * An `InjectorDef` can import other types which have `InjectorDefs`, forming a deep nested\n * structure of providers with a defined priority (identically to how `NgModule`s also have\n * an import/dependency structure).\n *\n * \\@experimental\n * @record\n * @template T\n */\nexport function InjectorDef() { }\nfunction InjectorDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InjectorDef.prototype.factory;\n    /** @type {?} */\n    InjectorDef.prototype.providers;\n    /** @type {?} */\n    InjectorDef.prototype.imports;\n}\n/**\n * A `Type` which has an `InjectableDef` static field.\n *\n * `InjectableDefType`s contain their own Dependency Injection metadata and are usable in an\n * `InjectorDef`-based `StaticInjector.\n *\n * \\@experimental\n * @record\n * @template T\n */\nexport function InjectableType() { }\nfunction InjectableType_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InjectableType.prototype.ngInjectableDef;\n}\n/**\n * A type which has an `InjectorDef` static field.\n *\n * `InjectorDefTypes` can be used to configure a `StaticInjector`.\n *\n * \\@experimental\n * @record\n * @template T\n */\nexport function InjectorType() { }\nfunction InjectorType_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InjectorType.prototype.ngInjectorDef;\n}\n/**\n * Describes the `InjectorDef` equivalent of a `ModuleWithProviders`, an `InjectorDefType` with an\n * associated array of providers.\n *\n * Objects of this type can be listed in the imports section of an `InjectorDef`.\n *\n * \\@experimental\n * @record\n * @template T\n */\nexport function InjectorTypeWithProviders() { }\nfunction InjectorTypeWithProviders_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InjectorTypeWithProviders.prototype.ngModule;\n    /** @type {?|undefined} */\n    InjectorTypeWithProviders.prototype.providers;\n}\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `\\@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * \\@experimental\n * @template T\n * @param {?} opts\n * @return {?}\n */\nexport function defineInjectable(opts) {\n    return {\n        providedIn: (/** @type {?} */ (opts.providedIn)) || null,\n        factory: opts.factory,\n    };\n}\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * \\@experimental\n * @param {?} options\n * @return {?}\n */\nexport function defineInjector(options) {\n    return {\n        factory: options.factory,\n        providers: options.providers || [],\n        imports: options.imports || [],\n    };\n}\n//# sourceMappingURL=defs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from './defs';\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * ### Example\n *\n * #### Tree-shakeable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakeableInjectionToken'}\n *\n * #### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n *\n * @template T\n */\nvar /**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * ### Example\n *\n * #### Tree-shakeable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakeableInjectionToken'}\n *\n * #### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n *\n * @template T\n */\nInjectionToken = /** @class */ (function () {\n    function InjectionToken(_desc, options) {\n        this._desc = _desc;\n        /**\n         * \\@internal\n         */\n        this.ngMetadataName = 'InjectionToken';\n        if (options !== undefined) {\n            /** @nocollapse */ this.ngInjectableDef = defineInjectable({\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n        else {\n            /** @nocollapse */ this.ngInjectableDef = undefined;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    InjectionToken.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return \"InjectionToken \" + this._desc; };\n    return InjectionToken;\n}());\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * ### Example\n *\n * #### Tree-shakeable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakeableInjectionToken'}\n *\n * #### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n *\n * @template T\n */\nexport { InjectionToken };\nfunction InjectionToken_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    InjectionToken.prototype.ngMetadataName;\n    /** @type {?} */\n    InjectionToken.prototype.ngInjectableDef;\n    /** @type {?} */\n    InjectionToken.prototype._desc;\n}\n/**\n * @record\n * @template T\n */\nexport function InjectableDefToken() { }\nfunction InjectableDefToken_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InjectableDefToken.prototype.ngInjectableDef;\n}\n//# sourceMappingURL=injection_token.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as ES7\n * decorators as well as\n * Angular DSL syntax.\n *\n * ES7 syntax:\n *\n * ```\n * \\@ng.Component({...})\n * class MyClass {...}\n * ```\n *\n * @record\n */\nexport function TypeDecorator() { }\nfunction TypeDecorator_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    <T extends Type<any>>(type: T): T;\n    */\n    /* TODO: handle strange member:\n    (target: Object, propertyKey?: string|symbol, parameterIndex?: number): void;\n    */\n}\nexport var /** @type {?} */ ANNOTATIONS = '__annotations__';\nexport var /** @type {?} */ PARAMETERS = '__parameters__';\nexport var /** @type {?} */ PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} chainFn\n * @param {?=} typeFn\n * @return {?}\n */\nexport function makeDecorator(name, props, parentClass, chainFn, typeFn) {\n    var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function DecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call.apply(metaCtor, [this].concat(args));\n            return this;\n        }\n        var /** @type {?} */ annotationInstance = new ((_a = (/** @type {?} */ (DecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        var /** @type {?} */ TypeDecorator = /** @type {?} */ (function TypeDecorator(cls) {\n            typeFn && typeFn.apply(void 0, [cls].concat(args));\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var /** @type {?} */ annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                (/** @type {?} */ (cls))[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            return cls;\n        });\n        if (chainFn)\n            chainFn(TypeDecorator);\n        return TypeDecorator;\n        var _a;\n    }\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (DecoratorFactory)).annotationCls = DecoratorFactory;\n    return /** @type {?} */ (DecoratorFactory);\n}\n/**\n * @param {?=} props\n * @return {?}\n */\nfunction makeMetadataCtor(props) {\n    return function ctor() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (props) {\n            var /** @type {?} */ values = props.apply(void 0, args);\n            for (var /** @type {?} */ propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @return {?}\n */\nexport function makeParamDecorator(name, props, parentClass) {\n    var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function ParamDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        var /** @type {?} */ annotationInstance = new ((_a = (/** @type {?} */ (ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        (/** @type {?} */ (ParamDecorator)).annotation = annotationInstance;\n        return ParamDecorator;\n        /**\n         * @param {?} cls\n         * @param {?} unusedKey\n         * @param {?} index\n         * @return {?}\n         */\n        function ParamDecorator(cls, unusedKey, index) {\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var /** @type {?} */ parameters = cls.hasOwnProperty(PARAMETERS) ?\n                (/** @type {?} */ (cls))[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n        var _a;\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @return {?}\n */\nexport function makePropDecorator(name, props, parentClass) {\n    var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function PropDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        var /** @type {?} */ decoratorInstance = new ((_a = (/** @type {?} */ (PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        return function PropDecorator(target, name) {\n            var /** @type {?} */ constructor = target.constructor;\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var /** @type {?} */ meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                (/** @type {?} */ (constructor))[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n        };\n        var _a;\n    }\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (PropDecoratorFactory)).annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n//# sourceMappingURL=decorators.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar ChangeDetectionStrategy = {\n    /**\n       * `OnPush` means that the change detector's mode will be initially set to `CheckOnce`.\n       */\n    OnPush: 0,\n    /**\n       * `Default` means that the change detector's mode will be initially set to `CheckAlways`.\n       */\n    Default: 1,\n};\nexport { ChangeDetectionStrategy };\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = \"OnPush\";\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = \"Default\";\n/** @enum {number} */\nvar ChangeDetectorStatus = {\n    /**\n       * `CheckOnce` means that after calling detectChanges the mode of the change detector\n       * will become `Checked`.\n       */\n    CheckOnce: 0,\n    /**\n       * `Checked` means that the change detector should be skipped until its mode changes to\n       * `CheckOnce`.\n       */\n    Checked: 1,\n    /**\n       * `CheckAlways` means that after calling detectChanges the mode of the change detector\n       * will remain `CheckAlways`.\n       */\n    CheckAlways: 2,\n    /**\n       * `Detached` means that the change detector sub tree is not a part of the main tree and\n       * should be skipped.\n       */\n    Detached: 3,\n    /**\n       * `Errored` means that the change detector encountered an error checking a binding\n       * or calling a directive lifecycle method and is now in an inconsistent state. Change\n       * detectors in this state will no longer detect changes.\n       */\n    Errored: 4,\n    /**\n       * `Destroyed` means that the change detector is destroyed.\n       */\n    Destroyed: 5,\n};\nexport { ChangeDetectorStatus };\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = \"CheckOnce\";\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = \"Checked\";\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = \"CheckAlways\";\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = \"Detached\";\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = \"Errored\";\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = \"Destroyed\";\n/**\n * @param {?} changeDetectionStrategy\n * @return {?}\n */\nexport function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n    return changeDetectionStrategy == null ||\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n//# sourceMappingURL=constants.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n *\n */\nexport var /** @type {?} */ Type = Function;\n/**\n * @param {?} v\n * @return {?}\n */\nexport function isType(v) {\n    return typeof v === 'function';\n}\n//# sourceMappingURL=type.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ __window = typeof window !== 'undefined' && window;\nvar /** @type {?} */ __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar /** @type {?} */ __global = typeof global !== 'undefined' && global;\nvar /** @type {?} */ _global = __window || __global || __self;\nvar /** @type {?} */ promise = Promise.resolve(0);\nexport { _global as global };\nvar /** @type {?} */ _symbolIterator = null;\n/**\n * @return {?}\n */\nexport function getSymbolIterator() {\n    if (!_symbolIterator) {\n        var /** @type {?} */ Symbol_1 = _global['Symbol'];\n        if (Symbol_1 && Symbol_1.iterator) {\n            _symbolIterator = Symbol_1.iterator;\n        }\n        else {\n            // es6-shim specific logic\n            var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);\n            for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\n                var /** @type {?} */ key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    (/** @type {?} */ (Map)).prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nexport function scheduleMicroTask(fn) {\n    if (typeof Zone === 'undefined') {\n        // use promise to schedule microTask instead of use Zone\n        promise.then(function () { fn && fn.apply(null, null); });\n    }\n    else {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function looseIdentical(a, b) {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n/**\n * @param {?} token\n * @return {?}\n */\nexport function stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return \"\" + token.overriddenName;\n    }\n    if (token.name) {\n        return \"\" + token.name;\n    }\n    var /** @type {?} */ res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    var /** @type {?} */ newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type, isType } from '../type';\nimport { global, stringify } from '../util';\nimport { ANNOTATIONS, PARAMETERS, PROP_METADATA } from '../util/decorators';\n/**\n * Attention: These regex has to hold even if the code is minified!\n */\nexport var /** @type {?} */ DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\nexport var /** @type {?} */ INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[A-Za-z\\d$_]+\\s*{/;\nexport var /** @type {?} */ INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[A-Za-z\\d$_]+\\s*{[\\s\\S]*constructor\\s*\\(/;\nvar ReflectionCapabilities = /** @class */ (function () {\n    function ReflectionCapabilities(reflect) {\n        this._reflect = reflect || global['Reflect'];\n    }\n    /**\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.isReflectionEnabled = /**\n     * @return {?}\n     */\n    function () { return true; };\n    /**\n     * @template T\n     * @param {?} t\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.factory = /**\n     * @template T\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) { return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return new (t.bind.apply(t, [void 0].concat(args)))();\n    }; };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} paramTypes\n     * @param {?} paramAnnotations\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._zipTypesAndAnnotations = /**\n     * \\@internal\n     * @param {?} paramTypes\n     * @param {?} paramAnnotations\n     * @return {?}\n     */\n    function (paramTypes, paramAnnotations) {\n        var /** @type {?} */ result;\n        if (typeof paramTypes === 'undefined') {\n            result = new Array(paramAnnotations.length);\n        }\n        else {\n            result = new Array(paramTypes.length);\n        }\n        for (var /** @type {?} */ i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    };\n    /**\n     * @param {?} type\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownParameters = /**\n     * @param {?} type\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (type, parentCtor) {\n        var /** @type {?} */ typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (DELEGATE_CTOR.exec(typeStr) ||\n            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {\n            return null;\n        }\n        // Prefer the direct API.\n        if ((/** @type {?} */ (type)).parameters && (/** @type {?} */ (type)).parameters !== parentCtor.parameters) {\n            return (/** @type {?} */ (type)).parameters;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        var /** @type {?} */ tsickleCtorParams = (/** @type {?} */ (type)).ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            // Newer tsickle uses a function closure\n            // Retain the non-function case for compatibility with older tsickle\n            var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            var /** @type {?} */ paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n            var /** @type {?} */ paramAnnotations_1 = ctorParameters.map(function (ctorParam) {\n                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n            });\n            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);\n        }\n        // API for metadata created by invoking the decorators.\n        var /** @type {?} */ paramAnnotations = type.hasOwnProperty(PARAMETERS) && (/** @type {?} */ (type))[PARAMETERS];\n        var /** @type {?} */ paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return new Array((/** @type {?} */ (type.length))).fill(undefined);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.parameters = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        var /** @type {?} */ parentCtor = getParentCtor(type);\n        var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownAnnotations = /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if ((/** @type {?} */ (typeOrFunc)).annotations && (/** @type {?} */ (typeOrFunc)).annotations !== parentCtor.annotations) {\n            var /** @type {?} */ annotations = (/** @type {?} */ (typeOrFunc)).annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if ((/** @type {?} */ (typeOrFunc)).decorators && (/** @type {?} */ (typeOrFunc)).decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata((/** @type {?} */ (typeOrFunc)).decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return (/** @type {?} */ (typeOrFunc))[ANNOTATIONS];\n        }\n        return null;\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.annotations = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n        var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownPropMetadata = /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if ((/** @type {?} */ (typeOrFunc)).propMetadata &&\n            (/** @type {?} */ (typeOrFunc)).propMetadata !== parentCtor.propMetadata) {\n            var /** @type {?} */ propMetadata = (/** @type {?} */ (typeOrFunc)).propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if ((/** @type {?} */ (typeOrFunc)).propDecorators &&\n            (/** @type {?} */ (typeOrFunc)).propDecorators !== parentCtor.propDecorators) {\n            var /** @type {?} */ propDecorators_1 = (/** @type {?} */ (typeOrFunc)).propDecorators;\n            var /** @type {?} */ propMetadata_1 = /** @type {?} */ ({});\n            Object.keys(propDecorators_1).forEach(function (prop) {\n                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n            });\n            return propMetadata_1;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return (/** @type {?} */ (typeOrFunc))[PROP_METADATA];\n        }\n        return null;\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.propMetadata = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n        var /** @type {?} */ propMetadata = {};\n        if (parentCtor !== Object) {\n            var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata_1).forEach(function (propName) {\n                propMetadata[propName] = parentPropMetadata_1[propName];\n            });\n        }\n        var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach(function (propName) {\n                var /** @type {?} */ decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push.apply(decorators, propMetadata[propName]);\n                }\n                decorators.push.apply(decorators, ownPropMetadata[propName]);\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    };\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.hasLifecycleHook = /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    function (type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.guards = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return {}; };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.getter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return /** @type {?} */ (new Function('o', 'return o.' + name + ';')); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.setter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return /** @type {?} */ (new Function('o', 'v', 'return o.' + name + ' = v;'));\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.method = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n        return /** @type {?} */ (new Function('o', 'args', functionBody));\n    };\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.importUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        // StaticSymbol\n        if (typeof type === 'object' && type['filePath']) {\n            return type['filePath'];\n        }\n        // Runtime type\n        return \"./\" + stringify(type);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resourceUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return \"./\" + stringify(type); };\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resolveIdentifier = /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    function (name, moduleUrl, members, runtime) {\n        return runtime;\n    };\n    /**\n     * @param {?} enumIdentifier\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resolveEnum = /**\n     * @param {?} enumIdentifier\n     * @param {?} name\n     * @return {?}\n     */\n    function (enumIdentifier, name) { return enumIdentifier[name]; };\n    return ReflectionCapabilities;\n}());\nexport { ReflectionCapabilities };\nfunction ReflectionCapabilities_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReflectionCapabilities.prototype._reflect;\n}\n/**\n * @param {?} decoratorInvocations\n * @return {?}\n */\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(function (decoratorInvocation) {\n        var /** @type {?} */ decoratorType = decoratorInvocation.type;\n        var /** @type {?} */ annotationCls = decoratorType.annotationCls;\n        var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();\n    });\n}\n/**\n * @param {?} ctor\n * @return {?}\n */\nfunction getParentCtor(ctor) {\n    var /** @type {?} */ parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n//# sourceMappingURL=reflection_capabilities.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\n/**\n * An interface that a function passed into {\\@link forwardRef} has to implement.\n *\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * \\@experimental\n * @record\n */\nexport function ForwardRefFn() { }\nfunction ForwardRefFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (): any;\n    */\n}\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared,\n * but not yet defined. It is also used when the `token` which we use when creating a query is not\n * yet defined.\n *\n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@experimental\n * @param {?} forwardRefFn\n * @return {?}\n */\nexport function forwardRef(forwardRefFn) {\n    (/** @type {?} */ (forwardRefFn)).__forward_ref__ = forwardRef;\n    (/** @type {?} */ (forwardRefFn)).toString = function () { return stringify(this()); };\n    return (/** @type {?} */ (/** @type {?} */ (forwardRefFn)));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * See: {\\@link forwardRef}\n * \\@experimental\n * @param {?} type\n * @return {?}\n */\nexport function resolveForwardRef(type) {\n    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\n        type.__forward_ref__ === forwardRef) {\n        return (/** @type {?} */ (type))();\n    }\n    else {\n        return type;\n    }\n}\n//# sourceMappingURL=forward_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { defineInjectable } from './defs';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\nexport var /** @type {?} */ SOURCE = '__source';\nvar /** @type {?} */ _THROW_IF_NOT_FOUND = new Object();\nexport var /** @type {?} */ THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * \\@experimental\n */\nexport var /** @type {?} */ INJECTOR = new InjectionToken('INJECTOR');\nvar NullInjector = /** @class */ (function () {\n    function NullInjector() {\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    NullInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\n            throw new Error(\"NullInjectorError: No provider for \" + stringify(token) + \"!\");\n        }\n        return notFoundValue;\n    };\n    return NullInjector;\n}());\nexport { NullInjector };\n/**\n * \\@usageNotes\n * ```\n * const injector: Injector = ...;\n * injector.get(...);\n * ```\n *\n * \\@description\n *\n * Concrete injectors implement this interface.\n *\n * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n *\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n *\n * @abstract\n */\nvar Injector = /** @class */ (function () {\n    function Injector() {\n    }\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     */\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    Injector.create = /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (options, parent) {\n        if (Array.isArray(options)) {\n            return new StaticInjector(options, parent);\n        }\n        else {\n            return new StaticInjector(options.providers, options.parent, options.name || null);\n        }\n    };\n    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    Injector.NULL = new NullInjector();\n    /** @nocollapse */ Injector.ngInjectableDef = defineInjectable({\n        providedIn: /** @type {?} */ ('any'),\n        factory: function () { return inject(INJECTOR); },\n    });\n    return Injector;\n}());\nexport { Injector };\nfunction Injector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Injector.THROW_IF_NOT_FOUND;\n    /** @type {?} */\n    Injector.NULL;\n    /** @type {?} */\n    Injector.ngInjectableDef;\n    /**\n     * Retrieves an instance from the injector based on the provided token.\n     * If not found:\n     * - Throws an error if no `notFoundValue` that is not equal to\n     * Injector.THROW_IF_NOT_FOUND is given\n     * - Returns the `notFoundValue` otherwise\n     * @abstract\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    Injector.prototype.get = function (token, notFoundValue, flags) { };\n    /**\n     * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n     * @suppress {duplicate}\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    Injector.prototype.get = function (token, notFoundValue) { };\n}\nvar /** @type {?} */ IDENT = function (value) {\n    return value;\n};\nvar ɵ0 = IDENT;\nvar /** @type {?} */ EMPTY = /** @type {?} */ ([]);\nvar /** @type {?} */ CIRCULAR = IDENT;\nvar /** @type {?} */ MULTI_PROVIDER_FN = function () {\n    return Array.prototype.slice.call(arguments);\n};\nvar ɵ1 = MULTI_PROVIDER_FN;\nvar /** @type {?} */ GET_PROPERTY_NAME = /** @type {?} */ ({});\nexport var /** @type {?} */ USE_VALUE = getClosureSafeProperty({ provide: String, useValue: GET_PROPERTY_NAME });\nvar /** @type {?} */ NG_TOKEN_PATH = 'ngTokenPath';\nvar /** @type {?} */ NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n/** @enum {number} */\nvar OptionFlags = {\n    Optional: 1,\n    CheckSelf: 2,\n    CheckParent: 4,\n    Default: 6,\n};\nvar /** @type {?} */ NULL_INJECTOR = Injector.NULL;\nvar /** @type {?} */ NEW_LINE = /\\n/gm;\nvar /** @type {?} */ NO_NEW_LINE = 'ɵ';\nvar StaticInjector = /** @class */ (function () {\n    function StaticInjector(providers, parent, source) {\n        if (parent === void 0) { parent = NULL_INJECTOR; }\n        if (source === void 0) { source = null; }\n        this.parent = parent;\n        this.source = source;\n        var /** @type {?} */ records = this._records = new Map();\n        records.set(Injector, /** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false }));\n        records.set(INJECTOR, /** @type {?} */ ({ token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false }));\n        recursivelyProcessProviders(records, providers);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    StaticInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    function (token, notFoundValue, flags) {\n        if (flags === void 0) { flags = 0 /* Default */; }\n        var /** @type {?} */ record = this._records.get(token);\n        try {\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n        }\n        catch (/** @type {?} */ e) {\n            var /** @type {?} */ tokenPath = e[NG_TEMP_TOKEN_PATH];\n            if (token[SOURCE]) {\n                tokenPath.unshift(token[SOURCE]);\n            }\n            e.message = formatError('\\n' + e.message, tokenPath, this.source);\n            e[NG_TOKEN_PATH] = tokenPath;\n            e[NG_TEMP_TOKEN_PATH] = null;\n            throw e;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    StaticInjector.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ tokens = /** @type {?} */ ([]), /** @type {?} */ records = this._records;\n        records.forEach(function (v, token) { return tokens.push(stringify(token)); });\n        return \"StaticInjector[\" + tokens.join(', ') + \"]\";\n    };\n    return StaticInjector;\n}());\nexport { StaticInjector };\nfunction StaticInjector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StaticInjector.prototype.parent;\n    /** @type {?} */\n    StaticInjector.prototype.source;\n    /** @type {?} */\n    StaticInjector.prototype._records;\n}\n/**\n * @record\n */\nfunction Record() { }\nfunction Record_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Record.prototype.fn;\n    /** @type {?} */\n    Record.prototype.useNew;\n    /** @type {?} */\n    Record.prototype.deps;\n    /** @type {?} */\n    Record.prototype.value;\n}\n/**\n * @record\n */\nfunction DependencyRecord() { }\nfunction DependencyRecord_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DependencyRecord.prototype.token;\n    /** @type {?} */\n    DependencyRecord.prototype.options;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction resolveProvider(provider) {\n    var /** @type {?} */ deps = computeDeps(provider);\n    var /** @type {?} */ fn = IDENT;\n    var /** @type {?} */ value = EMPTY;\n    var /** @type {?} */ useNew = false;\n    var /** @type {?} */ provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = (/** @type {?} */ (provider)).useValue;\n    }\n    else if ((/** @type {?} */ (provider)).useFactory) {\n        fn = (/** @type {?} */ (provider)).useFactory;\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        // Just use IDENT\n    }\n    else if ((/** @type {?} */ (provider)).useClass) {\n        useNew = true;\n        fn = resolveForwardRef((/** @type {?} */ (provider)).useClass);\n    }\n    else if (typeof provide == 'function') {\n        useNew = true;\n        fn = provide;\n    }\n    else {\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n    }\n    return { deps: deps, fn: fn, useNew: useNew, value: value };\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction multiProviderMixError(token) {\n    return staticError('Cannot mix multi providers and regular providers', token);\n}\n/**\n * @param {?} records\n * @param {?} provider\n * @return {?}\n */\nfunction recursivelyProcessProviders(records, provider) {\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (provider instanceof Array) {\n            // if we have an array recurse into the array\n            for (var /** @type {?} */ i = 0; i < provider.length; i++) {\n                recursivelyProcessProviders(records, provider[i]);\n            }\n        }\n        else if (typeof provider === 'function') {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError('Function/Class not supported', provider);\n        }\n        else if (provider && typeof provider === 'object' && provider.provide) {\n            // At this point we have what looks like a provider: {provide: ?, ....}\n            var /** @type {?} */ token = resolveForwardRef(provider.provide);\n            var /** @type {?} */ resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                // This is a multi provider.\n                var /** @type {?} */ multiProvider = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                }\n                else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = /** @type {?} */ ({\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    }));\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({ token: token, options: 6 /* Default */ });\n            }\n            var /** @type {?} */ record = records.get(token);\n            if (record && record.fn == MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        }\n        else {\n            throw staticError('Unexpected provider', provider);\n        }\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    }\n    catch (/** @type {?} */ e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        var /** @type {?} */ path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value == CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n    var /** @type {?} */ value;\n    if (record && !(flags & 1 /* SkipSelf */)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value == CIRCULAR) {\n            throw Error(NO_NEW_LINE + 'Circular dependency');\n        }\n        else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            var /** @type {?} */ obj = undefined;\n            var /** @type {?} */ useNew = record.useNew;\n            var /** @type {?} */ fn = record.fn;\n            var /** @type {?} */ depRecords = record.deps;\n            var /** @type {?} */ deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (var /** @type {?} */ i = 0; i < depRecords.length; i++) {\n                    var /** @type {?} */ depRecord = depRecords[i];\n                    var /** @type {?} */ options = depRecord.options;\n                    var /** @type {?} */ childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                    // Current Token to resolve\n                    depRecord.token, childRecord, records, \n                    // If we don't know how to resolve dependency and we should not check parent for it,\n                    // than pass in Null injector.\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, 0 /* Default */));\n                }\n            }\n            record.value = value = useNew ? new ((_a = (/** @type {?} */ (fn))).bind.apply(_a, [void 0].concat(deps)))() : fn.apply(obj, deps);\n        }\n    }\n    else if (!(flags & 2 /* Self */)) {\n        value = parent.get(token, notFoundValue, 0 /* Default */);\n    }\n    return value;\n    var _a;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction computeDeps(provider) {\n    var /** @type {?} */ deps = EMPTY;\n    var /** @type {?} */ providerDeps = (/** @type {?} */ (provider)).deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (var /** @type {?} */ i = 0; i < providerDeps.length; i++) {\n            var /** @type {?} */ options = 6 /* Default */;\n            var /** @type {?} */ token = resolveForwardRef(providerDeps[i]);\n            if (token instanceof Array) {\n                for (var /** @type {?} */ j = 0, /** @type {?} */ annotations = token; j < annotations.length; j++) {\n                    var /** @type {?} */ annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation == Optional) {\n                        options = options | 1 /* Optional */;\n                    }\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                        options = options & ~2 /* CheckSelf */;\n                    }\n                    else if (annotation instanceof Self || annotation == Self) {\n                        options = options & ~4 /* CheckParent */;\n                    }\n                    else if (annotation instanceof Inject) {\n                        token = (/** @type {?} */ (annotation)).token;\n                    }\n                    else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({ token: token, options: options });\n        }\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        var /** @type {?} */ token = resolveForwardRef((/** @type {?} */ (provider)).useExisting);\n        deps = [{ token: token, options: 6 /* Default */ }];\n    }\n    else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError('\\'deps\\' required', provider);\n    }\n    return deps;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @param {?=} source\n * @return {?}\n */\nfunction formatError(text, obj, source) {\n    if (source === void 0) { source = null; }\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n    var /** @type {?} */ context = stringify(obj);\n    if (obj instanceof Array) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        var /** @type {?} */ parts = /** @type {?} */ ([]);\n        for (var /** @type {?} */ key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                var /** @type {?} */ value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = \"{\" + parts.join(', ') + \"}\";\n    }\n    return \"StaticInjectorError\" + (source ? '(' + source + ')' : '') + \"[\" + context + \"]: \" + text.replace(NEW_LINE, '\\n  ');\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @return {?}\n */\nfunction staticError(text, obj) {\n    return new Error(formatError(text, obj));\n}\n/**\n * @template T\n * @param {?} objWithPropertyToExtract\n * @return {?}\n */\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n    for (var /** @type {?} */ key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === GET_PROPERTY_NAME) {\n            return key;\n        }\n    }\n    throw Error('!prop');\n}\n/** @enum {number} */\nvar InjectFlags = {\n    Default: 0,\n    /** Skip the node that is requesting injection. */\n    SkipSelf: 1,\n    /** Don't descend into ancestors of the node requesting injection. */\n    Self: 2,\n};\nexport { InjectFlags };\nvar /** @type {?} */ _currentInjector = null;\n/**\n * @param {?} injector\n * @return {?}\n */\nexport function setCurrentInjector(injector) {\n    var /** @type {?} */ former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} notFoundValue\n * @param {?=} flags\n * @return {?}\n */\nexport function inject(token, notFoundValue, flags) {\n    if (flags === void 0) { flags = 0 /* Default */; }\n    if (_currentInjector === null) {\n        throw new Error(\"inject() must be called from an injection context\");\n    }\n    return _currentInjector.get(token, notFoundValue, flags);\n}\n/**\n * @param {?} types\n * @return {?}\n */\nexport function injectArgs(types) {\n    var /** @type {?} */ args = [];\n    for (var /** @type {?} */ i = 0; i < types.length; i++) {\n        var /** @type {?} */ arg = types[i];\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new Error('Arguments array must have arguments.');\n            }\n            var /** @type {?} */ type = undefined;\n            var /** @type {?} */ defaultValue = undefined;\n            var /** @type {?} */ flags = 0 /* Default */;\n            for (var /** @type {?} */ j = 0; j < arg.length; j++) {\n                var /** @type {?} */ meta = arg[j];\n                if (meta instanceof Optional || meta.__proto__.ngMetadataName === 'Optional') {\n                    defaultValue = null;\n                }\n                else if (meta instanceof SkipSelf || meta.__proto__.ngMetadataName === 'SkipSelf') {\n                    flags |= 1 /* SkipSelf */;\n                }\n                else if (meta instanceof Self || meta.__proto__.ngMetadataName === 'Self') {\n                    flags |= 2 /* Self */;\n                }\n                else if (meta instanceof Inject) {\n                    type = meta.token;\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(inject(/** @type {?} */ ((type)), defaultValue, 0 /* Default */));\n        }\n        else {\n            args.push(inject(arg));\n        }\n    }\n    return args;\n}\nexport { ɵ0, ɵ1 };\n//# sourceMappingURL=injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @template T\n * @param {?} objWithPropertyToExtract\n * @param {?} target\n * @return {?}\n */\nexport function getClosureSafeProperty(objWithPropertyToExtract, target) {\n    for (var /** @type {?} */ key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === target) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n//# sourceMappingURL=property.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ReflectionCapabilities } from '../reflection/reflection_capabilities';\nimport { makeDecorator } from '../util/decorators';\nimport { getClosureSafeProperty } from '../util/property';\nimport { defineInjectable } from './defs';\nimport { inject, injectArgs } from './injector';\nvar /** @type {?} */ GET_PROPERTY_NAME = /** @type {?} */ ({});\nvar ɵ0 = GET_PROPERTY_NAME;\nvar /** @type {?} */ USE_VALUE = getClosureSafeProperty({ provide: String, useValue: ɵ0 }, GET_PROPERTY_NAME);\n/**\n * Type of the Injectable decorator / constructor function.\n *\n *\n * @record\n */\nexport function InjectableDecorator() { }\nfunction InjectableDecorator_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (): any;\n    */\n    /* TODO: handle strange member:\n    (options?: {providedIn: Type<any>| 'root' | null}&InjectableProvider): any;\n    */\n    /* TODO: handle strange member:\n    new (): Injectable;\n    */\n    /* TODO: handle strange member:\n    new (options?: {providedIn: Type<any>| 'root' | null}&InjectableProvider): Injectable;\n    */\n}\nvar /** @type {?} */ EMPTY_ARRAY = [];\n/**\n * @param {?} type\n * @param {?=} provider\n * @return {?}\n */\nexport function convertInjectableProviderToFactory(type, provider) {\n    if (!provider) {\n        var /** @type {?} */ reflectionCapabilities = new ReflectionCapabilities();\n        var /** @type {?} */ deps_1 = reflectionCapabilities.parameters(type);\n        // TODO - convert to flags.\n        return function () { return new (type.bind.apply(type, [void 0].concat(injectArgs(/** @type {?} */ (deps_1)))))(); };\n    }\n    if (USE_VALUE in provider) {\n        var /** @type {?} */ valueProvider_1 = (/** @type {?} */ (provider));\n        return function () { return valueProvider_1.useValue; };\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        var /** @type {?} */ existingProvider_1 = (/** @type {?} */ (provider));\n        return function () { return inject(existingProvider_1.useExisting); };\n    }\n    else if ((/** @type {?} */ (provider)).useFactory) {\n        var /** @type {?} */ factoryProvider_1 = (/** @type {?} */ (provider));\n        return function () { return factoryProvider_1.useFactory.apply(factoryProvider_1, injectArgs(factoryProvider_1.deps || EMPTY_ARRAY)); };\n    }\n    else if ((/** @type {?} */ (provider)).useClass) {\n        var /** @type {?} */ classProvider_1 = (/** @type {?} */ (provider));\n        var /** @type {?} */ deps_2 = (/** @type {?} */ (provider)).deps;\n        if (!deps_2) {\n            var /** @type {?} */ reflectionCapabilities = new ReflectionCapabilities();\n            deps_2 = reflectionCapabilities.parameters(type);\n        }\n        return function () {\n            return new ((_a = classProvider_1.useClass).bind.apply(_a, [void 0].concat(injectArgs(deps_2))))();\n            var _a;\n        };\n    }\n    else {\n        var /** @type {?} */ deps_3 = (/** @type {?} */ (provider)).deps;\n        if (!deps_3) {\n            var /** @type {?} */ reflectionCapabilities = new ReflectionCapabilities();\n            deps_3 = reflectionCapabilities.parameters(type);\n        }\n        return function () { return new (type.bind.apply(type, [void 0].concat(injectArgs(/** @type {?} */ ((deps_3))))))(); };\n    }\n}\n/**\n * Injectable decorator and metadata.\n *\n *\n * \\@Annotation\n */\nexport var /** @type {?} */ Injectable = makeDecorator('Injectable', undefined, undefined, undefined, function (injectableType, options) {\n    if (options && options.providedIn !== undefined &&\n        injectableType.ngInjectableDef === undefined) {\n        /** @nocollapse */ injectableType.ngInjectableDef = defineInjectable({\n            providedIn: options.providedIn,\n            factory: convertInjectableProviderToFactory(injectableType, options)\n        });\n    }\n});\n/**\n * Type representing injectable service.\n *\n * \\@experimental\n * @record\n * @template T\n */\nexport function InjectableType() { }\nfunction InjectableType_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InjectableType.prototype.ngInjectableDef;\n}\nexport { ɵ0 };\n//# sourceMappingURL=injectable.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjector } from '../di/defs';\nimport { convertInjectableProviderToFactory } from '../di/injectable';\nimport { makeDecorator } from '../util/decorators';\n/**\n * A wrapper around a module that also includes the providers.\n *\n *\n * @record\n */\nexport function ModuleWithProviders() { }\nfunction ModuleWithProviders_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ModuleWithProviders.prototype.ngModule;\n    /** @type {?|undefined} */\n    ModuleWithProviders.prototype.providers;\n}\n/**\n * Interface for schema definitions in \\@NgModules.\n *\n * \\@experimental\n * @record\n */\nexport function SchemaMetadata() { }\nfunction SchemaMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SchemaMetadata.prototype.name;\n}\n/**\n * Defines a schema that will allow:\n * - any non-Angular elements with a `-` in their name,\n * - any properties on elements with a `-` in their name which is the common rule for custom\n * elements.\n *\n *\n */\nexport var /** @type {?} */ CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\n/**\n * Defines a schema that will allow any property on any element.\n *\n * \\@experimental\n */\nexport var /** @type {?} */ NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\n/**\n * Type of the NgModule decorator / constructor function.\n *\n *\n * @record\n */\nexport function NgModuleDecorator() { }\nfunction NgModuleDecorator_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (obj?: NgModule): TypeDecorator;\n    */\n    /* TODO: handle strange member:\n    new (obj?: NgModule): NgModule;\n    */\n}\n/**\n * NgModule decorator and metadata.\n *\n *\n * \\@Annotation\n */\nexport var /** @type {?} */ NgModule = makeDecorator('NgModule', function (ngModule) { return ngModule; }, undefined, undefined, function (moduleType, metadata) {\n    var /** @type {?} */ imports = (metadata && metadata.imports) || [];\n    if (metadata && metadata.exports) {\n        imports = imports.concat([metadata.exports]);\n    }\n    moduleType.ngInjectorDef = defineInjector({\n        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),\n        providers: metadata && metadata.providers,\n        imports: imports,\n    });\n});\n//# sourceMappingURL=ng_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar ViewEncapsulation = {\n    /**\n       * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n       * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n       * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n       * selectors.\n       *\n       * This is the default option.\n       */\n    Emulated: 0,\n    /**\n       * Use the native encapsulation mechanism of the renderer.\n       *\n       * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n       * creating a ShadowRoot for Component's Host Element.\n       */\n    Native: 1,\n    /**\n       * Don't provide any template or style encapsulation.\n       */\n    None: 2,\n};\nexport { ViewEncapsulation };\nViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\nViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\nViewEncapsulation[ViewEncapsulation.None] = \"None\";\n//# sourceMappingURL=view.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description Represents the version of Angular\n *\n *\n */\nvar /**\n * \\@description Represents the version of Angular\n *\n *\n */\nVersion = /** @class */ (function () {\n    function Version(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n    return Version;\n}());\n/**\n * \\@description Represents the version of Angular\n *\n *\n */\nexport { Version };\nfunction Version_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Version.prototype.major;\n    /** @type {?} */\n    Version.prototype.minor;\n    /** @type {?} */\n    Version.prototype.patch;\n    /** @type {?} */\n    Version.prototype.full;\n}\n/**\n *\n */\nexport var /** @type {?} */ VERSION = new Version('6.0.0-rc.4-aa27155');\n//# sourceMappingURL=version.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport var /** @type {?} */ ERROR_TYPE = 'ngType';\nexport var /** @type {?} */ ERROR_DEBUG_CONTEXT = 'ngDebugContext';\nexport var /** @type {?} */ ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nexport var /** @type {?} */ ERROR_LOGGER = 'ngErrorLogger';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getType(error) {\n    return (/** @type {?} */ (error))[ERROR_TYPE];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getDebugContext(error) {\n    return (/** @type {?} */ (error))[ERROR_DEBUG_CONTEXT];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getOriginalError(error) {\n    return (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getErrorLogger(error) {\n    return (/** @type {?} */ (error))[ERROR_LOGGER] || defaultErrorLogger;\n}\n/**\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nfunction defaultErrorLogger(console) {\n    var values = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        values[_i - 1] = arguments[_i];\n    }\n    console.error.apply(console, values);\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ERROR_ORIGINAL_ERROR, getDebugContext, getErrorLogger, getOriginalError } from './errors';\n/**\n *\n * \\@description\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n *\n */\nvar /**\n *\n * \\@description\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n *\n */\nErrorHandler = /** @class */ (function () {\n    function ErrorHandler() {\n        /**\n         * \\@internal\n         */\n        this._console = console;\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype.handleError = /**\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        var /** @type {?} */ originalError = this._findOriginalError(error);\n        var /** @type {?} */ context = this._findContext(error);\n        // Note: Browser consoles show the place from where console.error was called.\n        // We can use this to give users additional information about the error.\n        var /** @type {?} */ errorLogger = getErrorLogger(error);\n        errorLogger(this._console, \"ERROR\", error);\n        if (originalError) {\n            errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\n        }\n        if (context) {\n            errorLogger(this._console, 'ERROR CONTEXT', context);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype._findContext = /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        if (error) {\n            return getDebugContext(error) ? getDebugContext(error) :\n                this._findContext(getOriginalError(error));\n        }\n        return null;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype._findOriginalError = /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        var /** @type {?} */ e = getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e;\n    };\n    return ErrorHandler;\n}());\n/**\n *\n * \\@description\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n *\n */\nexport { ErrorHandler };\nfunction ErrorHandler_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ErrorHandler.prototype._console;\n}\n/**\n * @param {?} message\n * @param {?} originalError\n * @return {?}\n */\nexport function wrappedError(message, originalError) {\n    var /** @type {?} */ msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\n    var /** @type {?} */ error = Error(msg);\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n//# sourceMappingURL=error_handler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { wrappedError } from '../error_handler';\nimport { ERROR_ORIGINAL_ERROR } from '../errors';\nimport { stringify } from '../util';\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys) {\n    var /** @type {?} */ res = [];\n    for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\n        if (res.indexOf(keys[i]) > -1) {\n            res.push(keys[i]);\n            return res;\n        }\n        res.push(keys[i]);\n    }\n    return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys) {\n    if (keys.length > 1) {\n        var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());\n        var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n        return ' (' + tokenStrs.join(' -> ') + ')';\n    }\n    return '';\n}\n/**\n * @record\n */\nexport function InjectionError() { }\nfunction InjectionError_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InjectionError.prototype.keys;\n    /** @type {?} */\n    InjectionError.prototype.injectors;\n    /** @type {?} */\n    InjectionError.prototype.constructResolvingMessage;\n    /** @type {?} */\n    InjectionError.prototype.addKey;\n}\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n * @param {?=} originalError\n * @return {?}\n */\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n    var /** @type {?} */ keys = [key];\n    var /** @type {?} */ errMsg = constructResolvingMessage(keys);\n    var /** @type {?} */ error = /** @type {?} */ ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg)));\n    error.addKey = addKey;\n    error.keys = keys;\n    error.injectors = [injector];\n    error.constructResolvingMessage = constructResolvingMessage;\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n/**\n * @this {?}\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction addKey(injector, key) {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    // Note: This updated message won't be reflected in the `.stack` property\n    this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n *\n * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function noProviderError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        var /** @type {?} */ first = stringify(keys[0].token);\n        return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n    });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function cyclicDependencyError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n    });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n * @return {?}\n */\nexport function instantiationError(injector, originalException, originalStack, key) {\n    return injectionError(injector, key, function (keys) {\n        var /** @type {?} */ first = stringify(keys[0].token);\n        return originalException.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(keys) + \".\";\n    }, originalException);\n}\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n *\n * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * @param {?} provider\n * @return {?}\n */\nexport function invalidProviderError(provider) {\n    return Error(\"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nexport function noAnnotationError(typeOrFunc, params) {\n    var /** @type {?} */ signature = [];\n    for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {\n        var /** @type {?} */ parameter = params[i];\n        if (!parameter || parameter.length == 0) {\n            signature.push('?');\n        }\n        else {\n            signature.push(parameter.map(stringify).join(' '));\n        }\n    }\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n        signature.join(', ') + '). ' +\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n * @param {?} index\n * @return {?}\n */\nexport function outOfBoundsError(index) {\n    return Error(\"Index \" + index + \" is out-of-bounds.\");\n}\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n * @param {?} provider1\n * @param {?} provider2\n * @return {?}\n */\nexport function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n    return Error(\"Cannot mix multi providers and regular providers, got: \" + provider1 + \" \" + provider2);\n}\n//# sourceMappingURL=reflective_errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { resolveForwardRef } from './forward_ref';\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * @deprecated No replacement\n */\nvar /**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * @deprecated No replacement\n */\nReflectiveKey = /** @class */ (function () {\n    /**\n     * Private\n     */\n    function ReflectiveKey(token, id) {\n        this.token = token;\n        this.id = id;\n        if (!token) {\n            throw new Error('Token must be defined!');\n        }\n        this.displayName = stringify(this.token);\n    }\n    /**\n     * Retrieves a `Key` for a token.\n     */\n    /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    ReflectiveKey.get = /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        return _globalKeyRegistry.get(resolveForwardRef(token));\n    };\n    Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n        /**\n         * @returns the number of keys registered in the system.\n         */\n        get: /**\n         * @return {?} the number of keys registered in the system.\n         */\n        function () { return _globalKeyRegistry.numberOfKeys; },\n        enumerable: true,\n        configurable: true\n    });\n    return ReflectiveKey;\n}());\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * @deprecated No replacement\n */\nexport { ReflectiveKey };\nfunction ReflectiveKey_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReflectiveKey.prototype.displayName;\n    /** @type {?} */\n    ReflectiveKey.prototype.token;\n    /** @type {?} */\n    ReflectiveKey.prototype.id;\n}\nvar KeyRegistry = /** @class */ (function () {\n    function KeyRegistry() {\n        this._allKeys = new Map();\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    KeyRegistry.prototype.get = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        if (token instanceof ReflectiveKey)\n            return token;\n        if (this._allKeys.has(token)) {\n            return /** @type {?} */ ((this._allKeys.get(token)));\n        }\n        var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n        this._allKeys.set(token, newKey);\n        return newKey;\n    };\n    Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._allKeys.size; },\n        enumerable: true,\n        configurable: true\n    });\n    return KeyRegistry;\n}());\nexport { KeyRegistry };\nfunction KeyRegistry_tsickle_Closure_declarations() {\n    /** @type {?} */\n    KeyRegistry.prototype._allKeys;\n}\nvar /** @type {?} */ _globalKeyRegistry = new KeyRegistry();\n//# sourceMappingURL=reflective_key.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nvar /**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nReflector = /** @class */ (function () {\n    function Reflector(reflectionCapabilities) {\n        this.reflectionCapabilities = reflectionCapabilities;\n    }\n    /**\n     * @param {?} caps\n     * @return {?}\n     */\n    Reflector.prototype.updateCapabilities = /**\n     * @param {?} caps\n     * @return {?}\n     */\n    function (caps) { this.reflectionCapabilities = caps; };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.factory = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.factory(type); };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.parameters = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.annotations = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.propMetadata = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    };\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    Reflector.prototype.hasLifecycleHook = /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    function (type, lcProperty) {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.getter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.getter(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.setter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.setter(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.method = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.method(name); };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.importUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.importUri(type); };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.resourceUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.resourceUri(type); };\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    Reflector.prototype.resolveIdentifier = /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    function (name, moduleUrl, members, runtime) {\n        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n    };\n    /**\n     * @param {?} identifier\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.resolveEnum = /**\n     * @param {?} identifier\n     * @param {?} name\n     * @return {?}\n     */\n    function (identifier, name) {\n        return this.reflectionCapabilities.resolveEnum(identifier, name);\n    };\n    return Reflector;\n}());\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nexport { Reflector };\nfunction Reflector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Reflector.prototype.reflectionCapabilities;\n}\n//# sourceMappingURL=reflector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { reflector } from '../reflection/reflection';\nimport { Type } from '../type';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\nimport { invalidProviderError, mixingMultiProvidersWithRegularProvidersError, noAnnotationError } from './reflective_errors';\nimport { ReflectiveKey } from './reflective_key';\n/**\n * @record\n */\nfunction NormalizedProvider() { }\nfunction NormalizedProvider_tsickle_Closure_declarations() {\n}\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nvar /**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nReflectiveDependency = /** @class */ (function () {\n    function ReflectiveDependency(key, optional, visibility) {\n        this.key = key;\n        this.optional = optional;\n        this.visibility = visibility;\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    ReflectiveDependency.fromKey = /**\n     * @param {?} key\n     * @return {?}\n     */\n    function (key) {\n        return new ReflectiveDependency(key, false, null);\n    };\n    return ReflectiveDependency;\n}());\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nexport { ReflectiveDependency };\nfunction ReflectiveDependency_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReflectiveDependency.prototype.key;\n    /** @type {?} */\n    ReflectiveDependency.prototype.optional;\n    /** @type {?} */\n    ReflectiveDependency.prototype.visibility;\n}\nvar /** @type {?} */ _EMPTY_LIST = [];\n/**\n * An internal resolved representation of a {\\@link Provider} used by the {\\@link Injector}.\n *\n * It is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example ([live demo](http://plnkr.co/edit/RfEnhh8kUEI0G3qsnIeT?p%3Dpreview&p=preview))\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n *\n * \\@experimental\n * @record\n */\nexport function ResolvedReflectiveProvider() { }\nfunction ResolvedReflectiveProvider_tsickle_Closure_declarations() {\n    /**\n     * A key, usually a `Type<any>`.\n     * @type {?}\n     */\n    ResolvedReflectiveProvider.prototype.key;\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     * @type {?}\n     */\n    ResolvedReflectiveProvider.prototype.resolvedFactories;\n    /**\n     * Indicates if the provider is a multi-provider or a regular provider.\n     * @type {?}\n     */\n    ResolvedReflectiveProvider.prototype.multiProvider;\n}\nvar ResolvedReflectiveProvider_ = /** @class */ (function () {\n    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n        this.key = key;\n        this.resolvedFactories = resolvedFactories;\n        this.multiProvider = multiProvider;\n        this.resolvedFactory = this.resolvedFactories[0];\n    }\n    return ResolvedReflectiveProvider_;\n}());\nexport { ResolvedReflectiveProvider_ };\nfunction ResolvedReflectiveProvider__tsickle_Closure_declarations() {\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.resolvedFactory;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.key;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.resolvedFactories;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.multiProvider;\n}\n/**\n * An internal resolved representation of a factory function created by resolving {\\@link\n * Provider}.\n * \\@experimental\n */\nvar /**\n * An internal resolved representation of a factory function created by resolving {\\@link\n * Provider}.\n * \\@experimental\n */\nResolvedReflectiveFactory = /** @class */ (function () {\n    function ResolvedReflectiveFactory(factory, dependencies) {\n        this.factory = factory;\n        this.dependencies = dependencies;\n    }\n    return ResolvedReflectiveFactory;\n}());\n/**\n * An internal resolved representation of a factory function created by resolving {\\@link\n * Provider}.\n * \\@experimental\n */\nexport { ResolvedReflectiveFactory };\nfunction ResolvedReflectiveFactory_tsickle_Closure_declarations() {\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     * @type {?}\n     */\n    ResolvedReflectiveFactory.prototype.factory;\n    /**\n     * Arguments (dependencies) to the `factory` function.\n     * @type {?}\n     */\n    ResolvedReflectiveFactory.prototype.dependencies;\n}\n/**\n * Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveFactory(provider) {\n    var /** @type {?} */ factoryFn;\n    var /** @type {?} */ resolvedDeps;\n    if (provider.useClass) {\n        var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);\n        factoryFn = reflector.factory(useClass);\n        resolvedDeps = _dependenciesFor(useClass);\n    }\n    else if (provider.useExisting) {\n        factoryFn = function (aliasInstance) { return aliasInstance; };\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n    }\n    else if (provider.useFactory) {\n        factoryFn = provider.useFactory;\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n    }\n    else {\n        factoryFn = function () { return provider.useValue; };\n        resolvedDeps = _EMPTY_LIST;\n    }\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the {\\@link Provider} into {\\@link ResolvedProvider}.\n *\n * {\\@link Injector} internally only uses {\\@link ResolvedProvider}, {\\@link Provider} contains\n * convenience provider syntax.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveProvider(provider) {\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nexport function resolveReflectiveProviders(providers) {\n    var /** @type {?} */ normalized = _normalizeProviders(providers, []);\n    var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);\n    var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n    return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where\n * each key is contained exactly once and multi providers\n * have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nexport function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n    for (var /** @type {?} */ i = 0; i < providers.length; i++) {\n        var /** @type {?} */ provider = providers[i];\n        var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);\n        if (existing) {\n            if (provider.multiProvider !== existing.multiProvider) {\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n            }\n            if (provider.multiProvider) {\n                for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                }\n            }\n            else {\n                normalizedProvidersMap.set(provider.key.id, provider);\n            }\n        }\n        else {\n            var /** @type {?} */ resolvedProvider = void 0;\n            if (provider.multiProvider) {\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n            }\n            else {\n                resolvedProvider = provider;\n            }\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n        }\n    }\n    return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(providers, res) {\n    providers.forEach(function (b) {\n        if (b instanceof Type) {\n            res.push({ provide: b, useClass: b });\n        }\n        else if (b && typeof b == 'object' && (/** @type {?} */ (b)).provide !== undefined) {\n            res.push(/** @type {?} */ (b));\n        }\n        else if (b instanceof Array) {\n            _normalizeProviders(b, res);\n        }\n        else {\n            throw invalidProviderError(b);\n        }\n    });\n    return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?=} dependencies\n * @return {?}\n */\nexport function constructDependencies(typeOrFunc, dependencies) {\n    if (!dependencies) {\n        return _dependenciesFor(typeOrFunc);\n    }\n    else {\n        var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });\n        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n    }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc) {\n    var /** @type {?} */ params = reflector.parameters(typeOrFunc);\n    if (!params)\n        return [];\n    if (params.some(function (p) { return p == null; })) {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(typeOrFunc, metadata, params) {\n    var /** @type {?} */ token = null;\n    var /** @type {?} */ optional = false;\n    if (!Array.isArray(metadata)) {\n        if (metadata instanceof Inject) {\n            return _createDependency(metadata.token, optional, null);\n        }\n        else {\n            return _createDependency(metadata, optional, null);\n        }\n    }\n    var /** @type {?} */ visibility = null;\n    for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {\n        var /** @type {?} */ paramMetadata = metadata[i];\n        if (paramMetadata instanceof Type) {\n            token = paramMetadata;\n        }\n        else if (paramMetadata instanceof Inject) {\n            token = paramMetadata.token;\n        }\n        else if (paramMetadata instanceof Optional) {\n            optional = true;\n        }\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n            visibility = paramMetadata;\n        }\n        else if (paramMetadata instanceof InjectionToken) {\n            token = paramMetadata;\n        }\n    }\n    token = resolveForwardRef(token);\n    if (token != null) {\n        return _createDependency(token, optional, visibility);\n    }\n    else {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} visibility\n * @return {?}\n */\nfunction _createDependency(token, optional, visibility) {\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n//# sourceMappingURL=reflective_provider.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector, THROW_IF_NOT_FOUND } from './injector';\nimport { Self, SkipSelf } from './metadata';\nimport { cyclicDependencyError, instantiationError, noProviderError, outOfBoundsError } from './reflective_errors';\nimport { ReflectiveKey } from './reflective_key';\nimport { resolveReflectiveProviders } from './reflective_provider';\n// Threshold for the dynamic version\nvar /** @type {?} */ UNDEFINED = new Object();\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @abstract\n */\nvar /**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @abstract\n */\nReflectiveInjector = /** @class */ (function () {\n    function ReflectiveInjector() {\n    }\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of {@link ResolvedReflectiveProvider}s.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * See {@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.\n     */\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of {\\@link ResolvedReflectiveProvider}s.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * See {\\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.resolve = /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of {\\@link ResolvedReflectiveProvider}s.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * See {\\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        return resolveReflectiveProviders(providers);\n    };\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, {@link Provider},\n     * or a recursive array of more providers.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     *\n     * This function is slower than the corresponding `fromResolvedProviders`\n     * because it needs to resolve the passed-in providers first.\n     * See {@link ReflectiveInjector#resolve resolve} and\n     * {@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.\n     */\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, {\\@link Provider},\n     * or a recursive array of more providers.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     *\n     * This function is slower than the corresponding `fromResolvedProviders`\n     * because it needs to resolve the passed-in providers first.\n     * See {\\@link ReflectiveInjector#resolve resolve} and\n     * {\\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    ReflectiveInjector.resolveAndCreate = /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, {\\@link Provider},\n     * or a recursive array of more providers.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     *\n     * This function is slower than the corresponding `fromResolvedProviders`\n     * because it needs to resolve the passed-in providers first.\n     * See {\\@link ReflectiveInjector#resolve resolve} and\n     * {\\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (providers, parent) {\n        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n    };\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @experimental\n     */\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * \\@experimental\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    ReflectiveInjector.fromResolvedProviders = /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * \\@experimental\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (providers, parent) {\n        return new ReflectiveInjector_(providers, parent);\n    };\n    return ReflectiveInjector;\n}());\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @abstract\n */\nexport { ReflectiveInjector };\nfunction ReflectiveInjector_tsickle_Closure_declarations() {\n    /**\n     * Parent of this injector.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))\n     *\n     * ```typescript\n     * var parent = ReflectiveInjector.resolveAndCreate([]);\n     * var child = parent.resolveAndCreateChild([]);\n     * expect(child.parent).toBe(parent);\n     * ```\n     * @abstract\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.parent = function () { };\n    /**\n     * Resolves an array of providers and creates a child injector from those providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * The passed-in providers can be an array of `Type`, {\\@link Provider},\n     * or a recursive array of more providers.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n     * var child = parent.resolveAndCreateChild([ChildProvider]);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     *\n     * This function is slower than the corresponding `createChildFromResolved`\n     * because it needs to resolve the passed-in providers first.\n     * See {\\@link ReflectiveInjector#resolve resolve} and\n     * {\\@link ReflectiveInjector#createChildFromResolved createChildFromResolved}.\n     * @abstract\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };\n    /**\n     * Creates a child injector from previously resolved providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n     *\n     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n     * var child = parent.createChildFromResolved(childProviders);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     * @abstract\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };\n    /**\n     * Resolves a provider and instantiates an object in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     *\n     * var car = injector.resolveAndInstantiate(Car);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n     * ```\n     * @abstract\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };\n    /**\n     * Instantiates an object using a resolved provider in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     * var carProvider = ReflectiveInjector.resolve([Car])[0];\n     * var car = injector.instantiateResolved(carProvider);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n     * ```\n     * @abstract\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.instantiateResolved = function (provider) { };\n    /**\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.get = function (token, notFoundValue) { };\n}\nvar ReflectiveInjector_ = /** @class */ (function () {\n    /**\n     * Private\n     */\n    function ReflectiveInjector_(_providers, _parent) {\n        /**\n         * \\@internal\n         */\n        this._constructionCounter = 0;\n        this._providers = _providers;\n        this.parent = _parent || null;\n        var /** @type {?} */ len = _providers.length;\n        this.keyIds = new Array(len);\n        this.objs = new Array(len);\n        for (var /** @type {?} */ i = 0; i < len; i++) {\n            this.keyIds[i] = _providers[i].key.id;\n            this.objs[i] = UNDEFINED;\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n    };\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.resolveAndCreateChild = /**\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\n    };\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.createChildFromResolved = /**\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        var /** @type {?} */ inj = new ReflectiveInjector_(providers);\n        (/** @type {?} */ (inj)).parent = this;\n        return inj;\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.resolveAndInstantiate = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.instantiateResolved = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        return this._instantiateProvider(provider);\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.getProviderAtIndex = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        if (index < 0 || index >= this._providers.length) {\n            throw outOfBoundsError(index);\n        }\n        return this._providers[index];\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._new = /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n            throw cyclicDependencyError(this, provider.key);\n        }\n        return this._instantiateProvider(provider);\n    };\n    /**\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getMaxNumberOfObjects = /**\n     * @return {?}\n     */\n    function () { return this.objs.length; };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._instantiateProvider = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        if (provider.multiProvider) {\n            var /** @type {?} */ res = new Array(provider.resolvedFactories.length);\n            for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n            }\n            return res;\n        }\n        else {\n            return this._instantiate(provider, provider.resolvedFactories[0]);\n        }\n    };\n    /**\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._instantiate = /**\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    function (provider, ResolvedReflectiveFactory) {\n        var _this = this;\n        var /** @type {?} */ factory = ResolvedReflectiveFactory.factory;\n        var /** @type {?} */ deps;\n        try {\n            deps =\n                ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n        }\n        catch (/** @type {?} */ e) {\n            if (e.addKey) {\n                e.addKey(this, provider.key);\n            }\n            throw e;\n        }\n        var /** @type {?} */ obj;\n        try {\n            obj = factory.apply(void 0, deps);\n        }\n        catch (/** @type {?} */ e) {\n            throw instantiationError(this, e, e.stack, provider.key);\n        }\n        return obj;\n    };\n    /**\n     * @param {?} dep\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByReflectiveDependency = /**\n     * @param {?} dep\n     * @return {?}\n     */\n    function (dep) {\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n    };\n    /**\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKey = /**\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, visibility, notFoundValue) {\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\n            return this;\n        }\n        if (visibility instanceof Self) {\n            return this._getByKeySelf(key, notFoundValue);\n        }\n        else {\n            return this._getByKeyDefault(key, notFoundValue, visibility);\n        }\n    };\n    /**\n     * @param {?} keyId\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getObjByKeyId = /**\n     * @param {?} keyId\n     * @return {?}\n     */\n    function (keyId) {\n        for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {\n            if (this.keyIds[i] === keyId) {\n                if (this.objs[i] === UNDEFINED) {\n                    this.objs[i] = this._new(this._providers[i]);\n                }\n                return this.objs[i];\n            }\n        }\n        return UNDEFINED;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._throwOrNull = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, notFoundValue) {\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\n            return notFoundValue;\n        }\n        else {\n            throw noProviderError(this, key);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKeySelf = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, notFoundValue) {\n        var /** @type {?} */ obj = this._getObjByKeyId(key.id);\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKeyDefault = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    function (key, notFoundValue, visibility) {\n        var /** @type {?} */ inj;\n        if (visibility instanceof SkipSelf) {\n            inj = this.parent;\n        }\n        else {\n            inj = this;\n        }\n        while (inj instanceof ReflectiveInjector_) {\n            var /** @type {?} */ inj_ = /** @type {?} */ (inj);\n            var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);\n            if (obj !== UNDEFINED)\n                return obj;\n            inj = inj_.parent;\n        }\n        if (inj !== null) {\n            return inj.get(key.token, notFoundValue);\n        }\n        else {\n            return this._throwOrNull(key, notFoundValue);\n        }\n    };\n    Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n                .join(', ');\n            return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this.displayName; };\n    ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\n    return ReflectiveInjector_;\n}());\nexport { ReflectiveInjector_ };\nfunction ReflectiveInjector__tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReflectiveInjector_.INJECTOR_KEY;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ReflectiveInjector_.prototype._constructionCounter;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ReflectiveInjector_.prototype._providers;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.parent;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.keyIds;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.objs;\n}\n/**\n * @param {?} injector\n * @param {?} fn\n * @return {?}\n */\nfunction _mapProviders(injector, fn) {\n    var /** @type {?} */ res = new Array(injector._providers.length);\n    for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {\n        res[i] = fn(injector.getProviderAtIndex(i));\n    }\n    return res;\n}\n//# sourceMappingURL=reflective_injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isPromise } from '../src/util/lang';\nimport { Inject, Injectable, InjectionToken, Optional } from './di';\n/**\n * A function that will be executed when an application is initialized.\n * \\@experimental\n */\nexport var /** @type {?} */ APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n *\n * \\@experimental\n */\nvar ApplicationInitStatus = /** @class */ (function () {\n    function ApplicationInitStatus(appInits) {\n        var _this = this;\n        this.appInits = appInits;\n        this.initialized = false;\n        this.done = false;\n        this.donePromise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ApplicationInitStatus.prototype.runInitializers = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.initialized) {\n            return;\n        }\n        var /** @type {?} */ asyncInitPromises = [];\n        var /** @type {?} */ complete = function () {\n            (/** @type {?} */ (_this)).done = true;\n            _this.resolve();\n        };\n        if (this.appInits) {\n            for (var /** @type {?} */ i = 0; i < this.appInits.length; i++) {\n                var /** @type {?} */ initResult = this.appInits[i]();\n                if (isPromise(initResult)) {\n                    asyncInitPromises.push(initResult);\n                }\n            }\n        }\n        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\n        if (asyncInitPromises.length === 0) {\n            complete();\n        }\n        this.initialized = true;\n    };\n    ApplicationInitStatus.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ApplicationInitStatus.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },\n    ]; };\n    return ApplicationInitStatus;\n}());\nexport { ApplicationInitStatus };\nfunction ApplicationInitStatus_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    ApplicationInitStatus.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    ApplicationInitStatus.ctorParameters;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.resolve;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.reject;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.initialized;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.donePromise;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.done;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.appInits;\n}\n//# sourceMappingURL=application_init.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './di';\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {\\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\n * using this token.\n * \\@experimental\n */\nexport var /** @type {?} */ APP_ID = new InjectionToken('AppId');\n/**\n * @return {?}\n */\nexport function _appIdRandomProviderFactory() {\n    return \"\" + _randomChar() + _randomChar() + _randomChar();\n}\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * \\@experimental\n */\nexport var /** @type {?} */ APP_ID_RANDOM_PROVIDER = {\n    provide: APP_ID,\n    useFactory: _appIdRandomProviderFactory,\n    deps: /** @type {?} */ ([]),\n};\n/**\n * @return {?}\n */\nfunction _randomChar() {\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/**\n * A function that will be executed when a platform is initialized.\n * \\@experimental\n */\nexport var /** @type {?} */ PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/**\n * A token that indicates an opaque platform id.\n * \\@experimental\n */\nexport var /** @type {?} */ PLATFORM_ID = new InjectionToken('Platform ID');\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * \\@experimental\n */\nexport var /** @type {?} */ APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n/**\n * A token which indicates the root directory of the application\n * \\@experimental\n */\nexport var /** @type {?} */ PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n//# sourceMappingURL=application_tokens.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from './di';\nvar Console = /** @class */ (function () {\n    function Console() {\n    }\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Console.prototype.log = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n    };\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Console.prototype.warn = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n    };\n    Console.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Console.ctorParameters = function () { return []; };\n    return Console;\n}());\nexport { Console };\nfunction Console_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    Console.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    Console.ctorParameters;\n}\n//# sourceMappingURL=console.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, InjectionToken } from '../di';\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@experimental\n * @template T\n */\nvar /**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@experimental\n * @template T\n */\nModuleWithComponentFactories = /** @class */ (function () {\n    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    }\n    return ModuleWithComponentFactories;\n}());\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@experimental\n * @template T\n */\nexport { ModuleWithComponentFactories };\nfunction ModuleWithComponentFactories_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.ngModuleFactory;\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.componentFactories;\n}\n/**\n * @return {?}\n */\nfunction _throwError() {\n    throw new Error(\"Runtime compiler is not loaded\");\n}\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {\\@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `\\@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n */\nvar Compiler = /** @class */ (function () {\n    function Compiler() {\n    }\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     */\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleSync = /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) { throw _throwError(); };\n    /**\n     * Compiles the given NgModule and all of its components\n     */\n    /**\n     * Compiles the given NgModule and all of its components\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAsync = /**\n     * Compiles the given NgModule and all of its components\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) { throw _throwError(); };\n    /**\n     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n     */\n    /**\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAndAllComponentsSync = /**\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        throw _throwError();\n    };\n    /**\n     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     */\n    /**\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAndAllComponentsAsync = /**\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        throw _throwError();\n    };\n    /**\n     * Clears all caches.\n     */\n    /**\n     * Clears all caches.\n     * @return {?}\n     */\n    Compiler.prototype.clearCache = /**\n     * Clears all caches.\n     * @return {?}\n     */\n    function () { };\n    /**\n     * Clears the cache for the given component/ngModule.\n     */\n    /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    Compiler.prototype.clearCacheFor = /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { };\n    Compiler.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Compiler.ctorParameters = function () { return []; };\n    return Compiler;\n}());\nexport { Compiler };\nfunction Compiler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    Compiler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    Compiler.ctorParameters;\n}\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * \\@experimental\n */\nexport var /** @type {?} */ COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * \\@experimental\n * @abstract\n */\nvar /**\n * A factory for creating a Compiler\n *\n * \\@experimental\n * @abstract\n */\nCompilerFactory = /** @class */ (function () {\n    function CompilerFactory() {\n    }\n    return CompilerFactory;\n}());\n/**\n * A factory for creating a Compiler\n *\n * \\@experimental\n * @abstract\n */\nexport { CompilerFactory };\nfunction CompilerFactory_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?=} options\n     * @return {?}\n     */\n    CompilerFactory.prototype.createCompiler = function (options) { };\n}\n//# sourceMappingURL=compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global } from '../util';\n/**\n * A scope function for the Web Tracing Framework (WTF).\n *\n * \\@experimental\n * @record\n */\nexport function WtfScopeFn() { }\nfunction WtfScopeFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (arg0?: any, arg1?: any): any;\n    */\n}\n/**\n * @record\n */\nfunction WTF() { }\nfunction WTF_tsickle_Closure_declarations() {\n    /** @type {?} */\n    WTF.prototype.trace;\n}\n/**\n * @record\n */\nfunction Trace() { }\nfunction Trace_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Trace.prototype.events;\n    /** @type {?} */\n    Trace.prototype.leaveScope;\n    /** @type {?} */\n    Trace.prototype.beginTimeRange;\n    /** @type {?} */\n    Trace.prototype.endTimeRange;\n}\n/**\n * @record\n */\nexport function Range() { }\nfunction Range_tsickle_Closure_declarations() {\n}\n/**\n * @record\n */\nfunction Events() { }\nfunction Events_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Events.prototype.createScope;\n}\n/**\n * @record\n */\nexport function Scope() { }\nfunction Scope_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (...args: any[] __* TODO #9100 __): any;\n    */\n}\nvar /** @type {?} */ trace;\nvar /** @type {?} */ events;\n/**\n * @return {?}\n */\nexport function detectWTF() {\n    var /** @type {?} */ wtf = (/** @type {?} */ (global /** TODO #9100 */) /** TODO #9100 */)['wtf'];\n    if (wtf) {\n        trace = wtf['trace'];\n        if (trace) {\n            events = trace['events'];\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} signature\n * @param {?=} flags\n * @return {?}\n */\nexport function createScope(signature, flags) {\n    if (flags === void 0) { flags = null; }\n    return events.createScope(signature, flags);\n}\n/**\n * @template T\n * @param {?} scope\n * @param {?=} returnValue\n * @return {?}\n */\nexport function leave(scope, returnValue) {\n    trace.leaveScope(scope, returnValue);\n    return returnValue;\n}\n/**\n * @param {?} rangeType\n * @param {?} action\n * @return {?}\n */\nexport function startTimeRange(rangeType, action) {\n    return trace.beginTimeRange(rangeType, action);\n}\n/**\n * @param {?} range\n * @return {?}\n */\nexport function endTimeRange(range) {\n    trace.endTimeRange(range);\n}\n//# sourceMappingURL=wtf_impl.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { stringify } from '../util';\nimport { ComponentFactory } from './component_factory';\n/**\n * @param {?} component\n * @return {?}\n */\nexport function noComponentFactoryError(component) {\n    var /** @type {?} */ error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n    (/** @type {?} */ (error))[ERROR_COMPONENT] = component;\n    return error;\n}\nvar /** @type {?} */ ERROR_COMPONENT = 'ngComponent';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getComponent(error) {\n    return (/** @type {?} */ (error))[ERROR_COMPONENT];\n}\nvar _NullComponentFactoryResolver = /** @class */ (function () {\n    function _NullComponentFactoryResolver() {\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    _NullComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        throw noComponentFactoryError(component);\n    };\n    return _NullComponentFactoryResolver;\n}());\n/**\n *\n * @abstract\n */\nvar ComponentFactoryResolver = /** @class */ (function () {\n    function ComponentFactoryResolver() {\n    }\n    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n    return ComponentFactoryResolver;\n}());\nexport { ComponentFactoryResolver };\nfunction ComponentFactoryResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ComponentFactoryResolver.NULL;\n    /**\n     * @abstract\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };\n}\nvar CodegenComponentFactoryResolver = /** @class */ (function () {\n    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\n        this._parent = _parent;\n        this._ngModule = _ngModule;\n        this._factories = new Map();\n        for (var /** @type {?} */ i = 0; i < factories.length; i++) {\n            var /** @type {?} */ factory = factories[i];\n            this._factories.set(factory.componentType, factory);\n        }\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        var /** @type {?} */ factory = this._factories.get(component);\n        if (!factory && this._parent) {\n            factory = this._parent.resolveComponentFactory(component);\n        }\n        if (!factory) {\n            throw noComponentFactoryError(component);\n        }\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n    };\n    return CodegenComponentFactoryResolver;\n}());\nexport { CodegenComponentFactoryResolver };\nfunction CodegenComponentFactoryResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._factories;\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._parent;\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._ngModule;\n}\n/**\n * @template C\n */\nvar /**\n * @template C\n */\nComponentFactoryBoundToModule = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactoryBoundToModule, _super);\n    function ComponentFactoryBoundToModule(factory, ngModule) {\n        var _this = _super.call(this) || this;\n        _this.factory = factory;\n        _this.ngModule = ngModule;\n        _this.selector = factory.selector;\n        _this.componentType = factory.componentType;\n        _this.ngContentSelectors = factory.ngContentSelectors;\n        _this.inputs = factory.inputs;\n        _this.outputs = factory.outputs;\n        return _this;\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactoryBoundToModule.prototype.create = /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n    };\n    return ComponentFactoryBoundToModule;\n}(ComponentFactory));\n/**\n * @template C\n */\nexport { ComponentFactoryBoundToModule };\nfunction ComponentFactoryBoundToModule_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.selector;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.componentType;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.ngContentSelectors;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.inputs;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.outputs;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.factory;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.ngModule;\n}\n//# sourceMappingURL=component_factory_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Subject, Subscription } from 'rxjs';\n/**\n * Use by directives and components to emit custom Events.\n *\n * ### Examples\n *\n * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n * title gets clicked:\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * The events payload can be accessed by the parameter `$event` on the components output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @template T\n */\nvar /**\n * Use by directives and components to emit custom Events.\n *\n * ### Examples\n *\n * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n * title gets clicked:\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * The events payload can be accessed by the parameter `$event` on the components output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @template T\n */\nEventEmitter = /** @class */ (function (_super) {\n    tslib_1.__extends(EventEmitter, _super);\n    /**\n     * Creates an instance of {@link EventEmitter}, which depending on `isAsync`,\n     * delivers events synchronously or asynchronously.\n     *\n     * @param isAsync By default, events are delivered synchronously (default value: `false`).\n     * Set to `true` for asynchronous event delivery.\n     */\n    function EventEmitter(isAsync) {\n        if (isAsync === void 0) { isAsync = false; }\n        var _this = _super.call(this) || this;\n        _this.__isAsync = isAsync;\n        return _this;\n    }\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    EventEmitter.prototype.emit = /**\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) { _super.prototype.next.call(this, value); };\n    /**\n     * @param {?=} generatorOrNext\n     * @param {?=} error\n     * @param {?=} complete\n     * @return {?}\n     */\n    EventEmitter.prototype.subscribe = /**\n     * @param {?=} generatorOrNext\n     * @param {?=} error\n     * @param {?=} complete\n     * @return {?}\n     */\n    function (generatorOrNext, error, complete) {\n        var /** @type {?} */ schedulerFn;\n        var /** @type {?} */ errorFn = function (err) { return null; };\n        var /** @type {?} */ completeFn = function () { return null; };\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this.__isAsync ? function (value) {\n                setTimeout(function () { return generatorOrNext.next(value); });\n            } : function (value) { generatorOrNext.next(value); };\n            if (generatorOrNext.error) {\n                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                    function (err) { generatorOrNext.error(err); };\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                    function () { generatorOrNext.complete(); };\n            }\n        }\n        else {\n            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                function (value) { generatorOrNext(value); };\n            if (error) {\n                errorFn =\n                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n            }\n            if (complete) {\n                completeFn =\n                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n            }\n        }\n        var /** @type {?} */ sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        if (generatorOrNext instanceof Subscription) {\n            generatorOrNext.add(sink);\n        }\n        return sink;\n    };\n    return EventEmitter;\n}(Subject));\n/**\n * Use by directives and components to emit custom Events.\n *\n * ### Examples\n *\n * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n * title gets clicked:\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * The events payload can be accessed by the parameter `$event` on the components output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @template T\n */\nexport { EventEmitter };\nfunction EventEmitter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    EventEmitter.prototype.__isAsync;\n}\n//# sourceMappingURL=event_emitter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nvar /**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nNgZone = /** @class */ (function () {\n    function NgZone(_a) {\n        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        /**\n         * Whether there are no outstanding microtasks or macrotasks.\n         */\n        this.isStable = true;\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        this.onUnstable = new EventEmitter(false);\n        /**\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        this.onMicrotaskEmpty = new EventEmitter(false);\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        this.onStable = new EventEmitter(false);\n        /**\n         * Notifies that an error has been delivered.\n         */\n        this.onError = new EventEmitter(false);\n        if (typeof Zone == 'undefined') {\n            throw new Error(\"In this configuration Angular requires Zone.js\");\n        }\n        Zone.assertZonePatched();\n        var /** @type {?} */ self = /** @type {?} */ ((this));\n        self._nesting = 0;\n        self._outer = self._inner = Zone.current;\n        if ((/** @type {?} */ (Zone))['wtfZoneSpec']) {\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['wtfZoneSpec']);\n        }\n        if ((/** @type {?} */ (Zone))['TaskTrackingZoneSpec']) {\n            self._inner = self._inner.fork(new (/** @type {?} */ ((/** @type {?} */ (Zone))['TaskTrackingZoneSpec'])));\n        }\n        if (enableLongStackTrace && (/** @type {?} */ (Zone))['longStackTraceZoneSpec']) {\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['longStackTraceZoneSpec']);\n        }\n        forkInnerZoneWithAngularBehavior(self);\n    }\n    /**\n     * @return {?}\n     */\n    NgZone.isInAngularZone = /**\n     * @return {?}\n     */\n    function () { return Zone.current.get('isAngularZone') === true; };\n    /**\n     * @return {?}\n     */\n    NgZone.assertInAngularZone = /**\n     * @return {?}\n     */\n    function () {\n        if (!NgZone.isInAngularZone()) {\n            throw new Error('Expected to be in Angular Zone, but it is not!');\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgZone.assertNotInAngularZone = /**\n     * @return {?}\n     */\n    function () {\n        if (NgZone.isInAngularZone()) {\n            throw new Error('Expected to not be in Angular Zone, but it is!');\n        }\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    NgZone.prototype.run = /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.run(fn, applyThis, applyArgs));\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    NgZone.prototype.runTask = /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs, name) {\n        var /** @type {?} */ zone = (/** @type {?} */ ((this)))._inner;\n        var /** @type {?} */ task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n        try {\n            return /** @type {?} */ (zone.runTask(task, applyThis, applyArgs));\n        }\n        finally {\n            zone.cancelTask(task);\n        }\n    };\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     */\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    NgZone.prototype.runGuarded = /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.runGuarded(fn, applyThis, applyArgs));\n    };\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n     */\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    NgZone.prototype.runOutsideAngular = /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._outer.run(fn));\n    };\n    return NgZone;\n}());\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nexport { NgZone };\nfunction NgZone_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgZone.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NgZone.prototype.hasPendingMacrotasks;\n    /**\n     * Whether there are no outstanding microtasks or macrotasks.\n     * @type {?}\n     */\n    NgZone.prototype.isStable;\n    /**\n     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n     * @type {?}\n     */\n    NgZone.prototype.onUnstable;\n    /**\n     * Notifies when there is no more microtasks enqueued in the current VM Turn.\n     * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n     * For this reason this event can fire multiple times per VM Turn.\n     * @type {?}\n     */\n    NgZone.prototype.onMicrotaskEmpty;\n    /**\n     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n     * implies we are about to relinquish VM turn.\n     * This event gets called just once.\n     * @type {?}\n     */\n    NgZone.prototype.onStable;\n    /**\n     * Notifies that an error has been delivered.\n     * @type {?}\n     */\n    NgZone.prototype.onError;\n}\n/**\n * @return {?}\n */\nfunction noop() { }\nvar /** @type {?} */ EMPTY_PAYLOAD = {};\n/**\n * @record\n */\nfunction NgZonePrivate() { }\nfunction NgZonePrivate_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgZonePrivate.prototype._outer;\n    /** @type {?} */\n    NgZonePrivate.prototype._inner;\n    /** @type {?} */\n    NgZonePrivate.prototype._nesting;\n    /** @type {?} */\n    NgZonePrivate.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NgZonePrivate.prototype.hasPendingMacrotasks;\n    /** @type {?} */\n    NgZonePrivate.prototype.isStable;\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction checkStable(zone) {\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n        try {\n            zone._nesting++;\n            zone.onMicrotaskEmpty.emit(null);\n        }\n        finally {\n            zone._nesting--;\n            if (!zone.hasPendingMicrotasks) {\n                try {\n                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\n                }\n                finally {\n                    zone.isStable = true;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction forkInnerZoneWithAngularBehavior(zone) {\n    zone._inner = zone._inner.fork({\n        name: 'angular',\n        properties: /** @type {?} */ ({ 'isAngularZone': true }),\n        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n            try {\n                onEnter(zone);\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n            try {\n                onEnter(zone);\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onHasTask: function (delegate, current, target, hasTaskState) {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\n                    checkStable(zone);\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                }\n            }\n        },\n        onHandleError: function (delegate, current, target, error) {\n            delegate.handleError(target, error);\n            zone.runOutsideAngular(function () { return zone.onError.emit(error); });\n            return false;\n        }\n    });\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onEnter(zone) {\n    zone._nesting++;\n    if (zone.isStable) {\n        zone.isStable = false;\n        zone.onUnstable.emit(null);\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onLeave(zone) {\n    zone._nesting--;\n    checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nvar /**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nNoopNgZone = /** @class */ (function () {\n    function NoopNgZone() {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        this.isStable = true;\n        this.onUnstable = new EventEmitter();\n        this.onMicrotaskEmpty = new EventEmitter();\n        this.onStable = new EventEmitter();\n        this.onError = new EventEmitter();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.run = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runGuarded = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runOutsideAngular = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runTask = /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    return NoopNgZone;\n}());\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport { NoopNgZone };\nfunction NoopNgZone_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NoopNgZone.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NoopNgZone.prototype.hasPendingMacrotasks;\n    /** @type {?} */\n    NoopNgZone.prototype.isStable;\n    /** @type {?} */\n    NoopNgZone.prototype.onUnstable;\n    /** @type {?} */\n    NoopNgZone.prototype.onMicrotaskEmpty;\n    /** @type {?} */\n    NoopNgZone.prototype.onStable;\n    /** @type {?} */\n    NoopNgZone.prototype.onError;\n}\n//# sourceMappingURL=ng_zone.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '../di';\nimport { scheduleMicroTask } from '../util';\nimport { NgZone } from '../zone/ng_zone';\n/**\n * @record\n */\nexport function PendingMacrotask() { }\nfunction PendingMacrotask_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PendingMacrotask.prototype.source;\n    /** @type {?} */\n    PendingMacrotask.prototype.isPeriodic;\n    /** @type {?|undefined} */\n    PendingMacrotask.prototype.delay;\n    /** @type {?} */\n    PendingMacrotask.prototype.creationLocation;\n    /** @type {?|undefined} */\n    PendingMacrotask.prototype.xhr;\n}\n/**\n * @record\n */\nfunction WaitCallback() { }\nfunction WaitCallback_tsickle_Closure_declarations() {\n    /** @type {?} */\n    WaitCallback.prototype.timeoutId;\n    /** @type {?} */\n    WaitCallback.prototype.doneCb;\n    /** @type {?|undefined} */\n    WaitCallback.prototype.updateCb;\n}\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * \\@experimental\n */\nvar Testability = /** @class */ (function () {\n    function Testability(_ngZone) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        this._pendingCount = 0;\n        this._isZoneStable = true;\n        /**\n         * Whether any work was done since the last 'whenStable' callback. This is\n         * useful to detect if this could have potentially destabilized another\n         * component while it is stabilizing.\n         * \\@internal\n         */\n        this._didWork = false;\n        this._callbacks = [];\n        this._watchAngularEvents();\n        _ngZone.run(function () { _this.taskTrackingZone = Zone.current.get('TaskTrackingZone'); });\n    }\n    /**\n     * @return {?}\n     */\n    Testability.prototype._watchAngularEvents = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._ngZone.onUnstable.subscribe({\n            next: function () {\n                _this._didWork = true;\n                _this._isZoneStable = false;\n            }\n        });\n        this._ngZone.runOutsideAngular(function () {\n            _this._ngZone.onStable.subscribe({\n                next: function () {\n                    NgZone.assertNotInAngularZone();\n                    scheduleMicroTask(function () {\n                        _this._isZoneStable = true;\n                        _this._runCallbacksIfReady();\n                    });\n                }\n            });\n        });\n    };\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     */\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     * @return {?}\n     */\n    Testability.prototype.increasePendingRequestCount = /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     * @return {?}\n     */\n    function () {\n        this._pendingCount += 1;\n        this._didWork = true;\n        return this._pendingCount;\n    };\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     */\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    Testability.prototype.decreasePendingRequestCount = /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    function () {\n        this._pendingCount -= 1;\n        if (this._pendingCount < 0) {\n            throw new Error('pending async requests below zero');\n        }\n        this._runCallbacksIfReady();\n        return this._pendingCount;\n    };\n    /**\n     * Whether an associated application is stable\n     */\n    /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    Testability.prototype.isStable = /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    function () {\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n    };\n    /**\n     * @return {?}\n     */\n    Testability.prototype._runCallbacksIfReady = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.isStable()) {\n            // Schedules the call backs in a new frame so that it is always async.\n            scheduleMicroTask(function () {\n                while (_this._callbacks.length !== 0) {\n                    var /** @type {?} */ cb = /** @type {?} */ ((_this._callbacks.pop()));\n                    clearTimeout(cb.timeoutId);\n                    cb.doneCb(_this._didWork);\n                }\n                _this._didWork = false;\n            });\n        }\n        else {\n            // Still not stable, send updates.\n            var /** @type {?} */ pending_1 = this.getPendingTasks();\n            this._callbacks = this._callbacks.filter(function (cb) {\n                if (cb.updateCb && cb.updateCb(pending_1)) {\n                    clearTimeout(cb.timeoutId);\n                    return false;\n                }\n                return true;\n            });\n            this._didWork = true;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    Testability.prototype.getPendingTasks = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.taskTrackingZone) {\n            return [];\n        }\n        return this.taskTrackingZone.macroTasks.map(function (t) {\n            return {\n                source: t.source,\n                isPeriodic: t.data.isPeriodic,\n                delay: t.data.delay,\n                // From TaskTrackingZone:\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                creationLocation: /** @type {?} */ ((/** @type {?} */ (t)).creationLocation),\n                // Added by Zones for XHRs\n                // https://github.com/angular/zone.js/blob/master/lib/browser/browser.ts#L133\n                xhr: (/** @type {?} */ (t.data)).target\n            };\n        });\n    };\n    /**\n     * @param {?} cb\n     * @param {?=} timeout\n     * @param {?=} updateCb\n     * @return {?}\n     */\n    Testability.prototype.addCallback = /**\n     * @param {?} cb\n     * @param {?=} timeout\n     * @param {?=} updateCb\n     * @return {?}\n     */\n    function (cb, timeout, updateCb) {\n        var _this = this;\n        var /** @type {?} */ timeoutId = -1;\n        if (timeout && timeout > 0) {\n            timeoutId = setTimeout(function () {\n                _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });\n                cb(_this._didWork, _this.getPendingTasks());\n            }, timeout);\n        }\n        this._callbacks.push(/** @type {?} */ ({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb }));\n    };\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     */\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     * @return {?}\n     */\n    Testability.prototype.whenStable = /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     * @return {?}\n     */\n    function (doneCb, timeout, updateCb) {\n        if (updateCb && !this.taskTrackingZone) {\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\n                'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n        }\n        // These arguments are 'Function' above to keep the public API simple.\n        this.addCallback(/** @type {?} */ (doneCb), timeout, /** @type {?} */ (updateCb));\n        this._runCallbacksIfReady();\n    };\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     */\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    Testability.prototype.getPendingRequestCount = /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    function () { return this._pendingCount; };\n    /**\n     * Find providers by name\n     * @param using The root element to search from\n     * @param provider The name of binding variable\n     * @param exactMatch Whether using exactMatch\n     */\n    /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    Testability.prototype.findProviders = /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    function (using, provider, exactMatch) {\n        // TODO(juliemr): implement.\n        return [];\n    };\n    Testability.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Testability.ctorParameters = function () { return [\n        { type: NgZone, },\n    ]; };\n    return Testability;\n}());\nexport { Testability };\nfunction Testability_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    Testability.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    Testability.ctorParameters;\n    /** @type {?} */\n    Testability.prototype._pendingCount;\n    /** @type {?} */\n    Testability.prototype._isZoneStable;\n    /**\n     * Whether any work was done since the last 'whenStable' callback. This is\n     * useful to detect if this could have potentially destabilized another\n     * component while it is stabilizing.\n     * \\@internal\n     * @type {?}\n     */\n    Testability.prototype._didWork;\n    /** @type {?} */\n    Testability.prototype._callbacks;\n    /** @type {?} */\n    Testability.prototype.taskTrackingZone;\n    /** @type {?} */\n    Testability.prototype._ngZone;\n}\n/**\n * A global registry of {\\@link Testability} instances for specific elements.\n * \\@experimental\n */\nvar TestabilityRegistry = /** @class */ (function () {\n    function TestabilityRegistry() {\n        /**\n         * \\@internal\n         */\n        this._applications = new Map();\n        _testabilityGetter.addToWindow(this);\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param token token of application, root element\n     * @param testability Testability hook\n     */\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.registerApplication = /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    function (token, testability) {\n        this._applications.set(token, testability);\n    };\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     */\n    /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.unregisterApplication = /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    function (token) { this._applications.delete(token); };\n    /**\n     * Unregisters all applications\n     */\n    /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.unregisterAllApplications = /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    function () { this._applications.clear(); };\n    /**\n     * Get a testability hook associated with the application\n     * @param elem root element\n     */\n    /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getTestability = /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    function (elem) { return this._applications.get(elem) || null; };\n    /**\n     * Get all registered testabilities\n     */\n    /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getAllTestabilities = /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    function () { return Array.from(this._applications.values()); };\n    /**\n     * Get all registered applications(root elements)\n     */\n    /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getAllRootElements = /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    function () { return Array.from(this._applications.keys()); };\n    /**\n     * Find testability of a node in the Tree\n     * @param elem node\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     */\n    /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.findTestabilityInTree = /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    function (elem, findInAncestors) {\n        if (findInAncestors === void 0) { findInAncestors = true; }\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n    };\n    TestabilityRegistry.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    TestabilityRegistry.ctorParameters = function () { return []; };\n    return TestabilityRegistry;\n}());\nexport { TestabilityRegistry };\nfunction TestabilityRegistry_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    TestabilityRegistry.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    TestabilityRegistry.ctorParameters;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TestabilityRegistry.prototype._applications;\n}\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * \\@experimental Testability apis are primarily intended to be used by e2e test tool vendors like\n * the Protractor team.\n * @record\n */\nexport function GetTestability() { }\nfunction GetTestability_tsickle_Closure_declarations() {\n    /** @type {?} */\n    GetTestability.prototype.addToWindow;\n    /** @type {?} */\n    GetTestability.prototype.findTestabilityInTree;\n}\nvar _NoopGetTestability = /** @class */ (function () {\n    function _NoopGetTestability() {\n    }\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    _NoopGetTestability.prototype.addToWindow = /**\n     * @param {?} registry\n     * @return {?}\n     */\n    function (registry) { };\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    _NoopGetTestability.prototype.findTestabilityInTree = /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    function (registry, elem, findInAncestors) {\n        return null;\n    };\n    return _NoopGetTestability;\n}());\n/**\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n * \\@experimental\n * @param {?} getter\n * @return {?}\n */\nexport function setTestabilityGetter(getter) {\n    _testabilityGetter = getter;\n}\nvar /** @type {?} */ _testabilityGetter = new _NoopGetTestability();\n//# sourceMappingURL=testability.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Observable, merge } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { ErrorHandler } from '../src/error_handler';\nimport { scheduleMicroTask, stringify } from '../src/util';\nimport { isPromise } from '../src/util/lang';\nimport { ApplicationInitStatus } from './application_init';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER } from './application_tokens';\nimport { Console } from './console';\nimport { Injectable, InjectionToken, Injector } from './di';\nimport { CompilerFactory } from './linker/compiler';\nimport { ComponentFactory } from './linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from './linker/component_factory_resolver';\nimport { NgModuleRef } from './linker/ng_module_factory';\nimport { wtfCreateScope, wtfLeave } from './profile/profile';\nimport { Testability, TestabilityRegistry } from './testability/testability';\nimport { NgZone, NoopNgZone } from './zone/ng_zone';\nvar /** @type {?} */ _devMode = true;\nvar /** @type {?} */ _runModeLocked = false;\nvar /** @type {?} */ _platform;\nexport var /** @type {?} */ ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n *\n * @return {?}\n */\nexport function enableProdMode() {\n    if (_runModeLocked) {\n        throw new Error('Cannot enable prod mode after platform setup.');\n    }\n    _devMode = false;\n}\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function isDevMode() {\n    _runModeLocked = true;\n    return _devMode;\n}\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@experimental\n */\nvar /**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@experimental\n */\nNgProbeToken = /** @class */ (function () {\n    function NgProbeToken(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n    return NgProbeToken;\n}());\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@experimental\n */\nexport { NgProbeToken };\nfunction NgProbeToken_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgProbeToken.prototype.name;\n    /** @type {?} */\n    NgProbeToken.prototype.token;\n}\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} injector\n * @return {?}\n */\nexport function createPlatform(injector) {\n    if (_platform && !_platform.destroyed &&\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n    }\n    _platform = injector.get(PlatformRef);\n    var /** @type {?} */ inits = injector.get(PLATFORM_INITIALIZER, null);\n    if (inits)\n        inits.forEach(function (init) { return init(); });\n    return _platform;\n}\n/**\n * Creates a factory for a platform\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nexport function createPlatformFactory(parentPlatformFactory, name, providers) {\n    if (providers === void 0) { providers = []; }\n    var /** @type {?} */ desc = \"Platform: \" + name;\n    var /** @type {?} */ marker = new InjectionToken(desc);\n    return function (extraProviders) {\n        if (extraProviders === void 0) { extraProviders = []; }\n        var /** @type {?} */ platform = getPlatform();\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            if (parentPlatformFactory) {\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n            }\n            else {\n                var /** @type {?} */ injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n            }\n        }\n        return assertPlatform(marker);\n    };\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} requiredToken\n * @return {?}\n */\nexport function assertPlatform(requiredToken) {\n    var /** @type {?} */ platform = getPlatform();\n    if (!platform) {\n        throw new Error('No platform exists!');\n    }\n    if (!platform.injector.get(requiredToken, null)) {\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n    }\n    return platform;\n}\n/**\n * Destroy the existing platform.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function destroyPlatform() {\n    if (_platform && !_platform.destroyed) {\n        _platform.destroy();\n    }\n}\n/**\n * Returns the current platform.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function getPlatform() {\n    return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * Provides additional options to the bootstraping process.\n *\n *\n * @record\n */\nexport function BootstrapOptions() { }\nfunction BootstrapOptions_tsickle_Closure_declarations() {\n    /**\n     * Optionally specify which `NgZone` should be used.\n     *\n     * - Provide your own `NgZone` instance.\n     * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n     * - `noop` - Use `NoopNgZone` which does nothing.\n     * @type {?|undefined}\n     */\n    BootstrapOptions.prototype.ngZone;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\n *\n *\n */\nvar PlatformRef = /** @class */ (function () {\n    /** @internal */\n    function PlatformRef(_injector) {\n        this._injector = _injector;\n        this._modules = [];\n        this._destroyListeners = [];\n        this._destroyed = false;\n    }\n    /**\n     * Creates an instance of an `@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * ## Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     *\n     * @experimental APIs related to application bootstrap are currently under review.\n     */\n    /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * ## Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    PlatformRef.prototype.bootstrapModuleFactory = /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * ## Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    function (moduleFactory, options) {\n        var _this = this;\n        // Note: We need to create the NgZone _before_ we instantiate the module,\n        // as instantiating the module creates some providers eagerly.\n        // So we create a mini parent injector that just contains the new NgZone and\n        // pass that as parent to the NgModuleFactory.\n        var /** @type {?} */ ngZoneOption = options ? options.ngZone : undefined;\n        var /** @type {?} */ ngZone = getNgZone(ngZoneOption);\n        var /** @type {?} */ providers = [{ provide: NgZone, useValue: ngZone }];\n        // Attention: Don't use ApplicationRef.run here,\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n        return ngZone.run(function () {\n            var /** @type {?} */ ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });\n            var /** @type {?} */ moduleRef = /** @type {?} */ (moduleFactory.create(ngZoneInjector));\n            var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n            if (!exceptionHandler) {\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n            }\n            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); }); /** @type {?} */\n            ((ngZone)).runOutsideAngular(function () { return ((ngZone)).onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });\n            return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */ ((ngZone)), function () {\n                var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then(function () {\n                    _this._moduleDoBootstrap(moduleRef);\n                    return moduleRef;\n                });\n            });\n        });\n    };\n    /**\n     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n     *\n     * ## Simple Example\n     *\n     * ```typescript\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     */\n    /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * ## Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    PlatformRef.prototype.bootstrapModule = /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * ## Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    function (moduleType, compilerOptions) {\n        var _this = this;\n        if (compilerOptions === void 0) { compilerOptions = []; }\n        var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);\n        var /** @type {?} */ options = optionsReducer({}, compilerOptions);\n        var /** @type {?} */ compiler = compilerFactory.createCompiler([options]);\n        return compiler.compileModuleAsync(moduleType)\n            .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });\n    };\n    /**\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    PlatformRef.prototype._moduleDoBootstrap = /**\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    function (moduleRef) {\n        var /** @type {?} */ appRef = /** @type {?} */ (moduleRef.injector.get(ApplicationRef));\n        if (moduleRef._bootstrapComponents.length > 0) {\n            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\n        }\n        else if (moduleRef.instance.ngDoBootstrap) {\n            moduleRef.instance.ngDoBootstrap(appRef);\n        }\n        else {\n            throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\n                \"Please define one of these.\");\n        }\n        this._modules.push(moduleRef);\n    };\n    /**\n     * Register a listener to be called when the platform is disposed.\n     */\n    /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    PlatformRef.prototype.onDestroy = /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._destroyListeners.push(callback); };\n    Object.defineProperty(PlatformRef.prototype, \"injector\", {\n        /**\n         * Retrieve the platform {@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         */\n        get: /**\n         * Retrieve the platform {\\@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         * @return {?}\n         */\n        function () { return this._injector; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     */\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    PlatformRef.prototype.destroy = /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    function () {\n        if (this._destroyed) {\n            throw new Error('The platform has already been destroyed!');\n        }\n        this._modules.slice().forEach(function (module) { return module.destroy(); });\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n        this._destroyed = true;\n    };\n    Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._destroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    PlatformRef.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    PlatformRef.ctorParameters = function () { return [\n        { type: Injector, },\n    ]; };\n    return PlatformRef;\n}());\nexport { PlatformRef };\nfunction PlatformRef_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    PlatformRef.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    PlatformRef.ctorParameters;\n    /** @type {?} */\n    PlatformRef.prototype._modules;\n    /** @type {?} */\n    PlatformRef.prototype._destroyListeners;\n    /** @type {?} */\n    PlatformRef.prototype._destroyed;\n    /** @type {?} */\n    PlatformRef.prototype._injector;\n}\n/**\n * @param {?=} ngZoneOption\n * @return {?}\n */\nfunction getNgZone(ngZoneOption) {\n    var /** @type {?} */ ngZone;\n    if (ngZoneOption === 'noop') {\n        ngZone = new NoopNgZone();\n    }\n    else {\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n            new NgZone({ enableLongStackTrace: isDevMode() });\n    }\n    return ngZone;\n}\n/**\n * @param {?} errorHandler\n * @param {?} ngZone\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n    try {\n        var /** @type {?} */ result = callback();\n        if (isPromise(result)) {\n            return result.catch(function (e) {\n                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n                // rethrow as the exception handler might not do it\n                throw e;\n            });\n        }\n        return result;\n    }\n    catch (/** @type {?} */ e) {\n        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n        // rethrow as the exception handler might not do it\n        throw e;\n    }\n}\n/**\n * @template T\n * @param {?} dst\n * @param {?} objs\n * @return {?}\n */\nfunction optionsReducer(dst, objs) {\n    if (Array.isArray(objs)) {\n        dst = objs.reduce(optionsReducer, dst);\n    }\n    else {\n        dst = tslib_1.__assign({}, dst, (/** @type {?} */ (objs)));\n    }\n    return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n *\n *\n */\nvar ApplicationRef = /** @class */ (function () {\n    /** @internal */\n    function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n        var _this = this;\n        this._zone = _zone;\n        this._console = _console;\n        this._injector = _injector;\n        this._exceptionHandler = _exceptionHandler;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._initStatus = _initStatus;\n        this._bootstrapListeners = [];\n        this._views = [];\n        this._runningTick = false;\n        this._enforceNoNewChanges = false;\n        this._stable = true;\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         */\n        this.componentTypes = [];\n        /**\n         * Get a list of components registered to this application.\n         */\n        this.components = [];\n        this._enforceNoNewChanges = isDevMode();\n        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n        var /** @type {?} */ isCurrentlyStable = new Observable(function (observer) {\n            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\n                !_this._zone.hasPendingMicrotasks;\n            _this._zone.runOutsideAngular(function () {\n                observer.next(_this._stable);\n                observer.complete();\n            });\n        });\n        var /** @type {?} */ isStable = new Observable(function (observer) {\n            // Create the subscription to onStable outside the Angular Zone so that\n            // the callback is run outside the Angular Zone.\n            var /** @type {?} */ stableSub;\n            _this._zone.runOutsideAngular(function () {\n                stableSub = _this._zone.onStable.subscribe(function () {\n                    NgZone.assertNotInAngularZone();\n                    // Check whether there are no pending macro/micro tasks in the next tick\n                    // to allow for NgZone to update the state.\n                    scheduleMicroTask(function () {\n                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\n                            !_this._zone.hasPendingMicrotasks) {\n                            _this._stable = true;\n                            observer.next(true);\n                        }\n                    });\n                });\n            });\n            var /** @type {?} */ unstableSub = _this._zone.onUnstable.subscribe(function () {\n                NgZone.assertInAngularZone();\n                if (_this._stable) {\n                    _this._stable = false;\n                    _this._zone.runOutsideAngular(function () { observer.next(false); });\n                }\n            });\n            return function () {\n                stableSub.unsubscribe();\n                unstableSub.unsubscribe();\n            };\n        });\n        (/** @type {?} */ (this)).isStable =\n            merge(isCurrentlyStable, isStable.pipe(share()));\n    }\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the [componentType]'s\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * [componentType]'s selector.\n     *\n     * ### Example\n     * {@example core/ts/platform/platform.ts region='longform'}\n     */\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the [componentType]'s\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * [componentType]'s selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    ApplicationRef.prototype.bootstrap = /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the [componentType]'s\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * [componentType]'s selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    function (componentOrFactory, rootSelectorOrNode) {\n        var _this = this;\n        if (!this._initStatus.done) {\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n        }\n        var /** @type {?} */ componentFactory;\n        if (componentOrFactory instanceof ComponentFactory) {\n            componentFactory = componentOrFactory;\n        }\n        else {\n            componentFactory =\n                /** @type {?} */ ((this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        // Create a factory associated with the current module if it's not bound to some other\n        var /** @type {?} */ ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n            null :\n            this._injector.get(NgModuleRef);\n        var /** @type {?} */ selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        var /** @type {?} */ compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n        compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n        var /** @type {?} */ testability = compRef.injector.get(Testability, null);\n        if (testability) {\n            compRef.injector.get(TestabilityRegistry)\n                .registerApplication(compRef.location.nativeElement, testability);\n        }\n        this._loadComponent(compRef);\n        if (isDevMode()) {\n            this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n        }\n        return compRef;\n    };\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     */\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    ApplicationRef.prototype.tick = /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._runningTick) {\n            throw new Error('ApplicationRef.tick is called recursively');\n        }\n        var /** @type {?} */ scope = ApplicationRef._tickScope();\n        try {\n            this._runningTick = true;\n            this._views.forEach(function (view) { return view.detectChanges(); });\n            if (this._enforceNoNewChanges) {\n                this._views.forEach(function (view) { return view.checkNoChanges(); });\n            }\n        }\n        catch (/** @type {?} */ e) {\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\n        }\n        finally {\n            this._runningTick = false;\n            wtfLeave(scope);\n        }\n    };\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     */\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ApplicationRef.prototype.attachView = /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        var /** @type {?} */ view = (/** @type {?} */ (viewRef));\n        this._views.push(view);\n        view.attachToAppRef(this);\n    };\n    /**\n     * Detaches a view from dirty checking again.\n     */\n    /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ApplicationRef.prototype.detachView = /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        var /** @type {?} */ view = (/** @type {?} */ (viewRef));\n        remove(this._views, view);\n        view.detachFromAppRef();\n    };\n    /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    ApplicationRef.prototype._loadComponent = /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        this.attachView(componentRef.hostView);\n        this.tick();\n        this.components.push(componentRef);\n        // Get the listeners lazily to prevent DI cycles.\n        var /** @type {?} */ listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n        listeners.forEach(function (listener) { return listener(componentRef); });\n    };\n    /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    ApplicationRef.prototype._unloadComponent = /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        this.detachView(componentRef.hostView);\n        remove(this.components, componentRef);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ApplicationRef.prototype.ngOnDestroy = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        // TODO(alxhub): Dispose of the NgZone.\n        this._views.slice().forEach(function (view) { return view.destroy(); });\n    };\n    Object.defineProperty(ApplicationRef.prototype, \"viewCount\", {\n        /**\n         * Returns the number of attached views.\n         */\n        get: /**\n         * Returns the number of attached views.\n         * @return {?}\n         */\n        function () { return this._views.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     */\n    ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\n    ApplicationRef.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ApplicationRef.ctorParameters = function () { return [\n        { type: NgZone, },\n        { type: Console, },\n        { type: Injector, },\n        { type: ErrorHandler, },\n        { type: ComponentFactoryResolver, },\n        { type: ApplicationInitStatus, },\n    ]; };\n    return ApplicationRef;\n}());\nexport { ApplicationRef };\nfunction ApplicationRef_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    ApplicationRef.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    ApplicationRef.ctorParameters;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ApplicationRef._tickScope;\n    /** @type {?} */\n    ApplicationRef.prototype._bootstrapListeners;\n    /** @type {?} */\n    ApplicationRef.prototype._views;\n    /** @type {?} */\n    ApplicationRef.prototype._runningTick;\n    /** @type {?} */\n    ApplicationRef.prototype._enforceNoNewChanges;\n    /** @type {?} */\n    ApplicationRef.prototype._stable;\n    /**\n     * Get a list of component types registered to this application.\n     * This list is populated even before the component is created.\n     * @type {?}\n     */\n    ApplicationRef.prototype.componentTypes;\n    /**\n     * Get a list of components registered to this application.\n     * @type {?}\n     */\n    ApplicationRef.prototype.components;\n    /**\n     * Returns an Observable that indicates when the application is stable or unstable.\n     * @type {?}\n     */\n    ApplicationRef.prototype.isStable;\n    /** @type {?} */\n    ApplicationRef.prototype._zone;\n    /** @type {?} */\n    ApplicationRef.prototype._console;\n    /** @type {?} */\n    ApplicationRef.prototype._injector;\n    /** @type {?} */\n    ApplicationRef.prototype._exceptionHandler;\n    /** @type {?} */\n    ApplicationRef.prototype._componentFactoryResolver;\n    /** @type {?} */\n    ApplicationRef.prototype._initStatus;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    var /** @type {?} */ index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n//# sourceMappingURL=application_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { NgZone } from './zone/ng_zone';\n//# sourceMappingURL=zone.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di';\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n */\nvar /**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n */\nRenderComponentType = /** @class */ (function () {\n    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    }\n    return RenderComponentType;\n}());\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n */\nexport { RenderComponentType };\nfunction RenderComponentType_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RenderComponentType.prototype.id;\n    /** @type {?} */\n    RenderComponentType.prototype.templateUrl;\n    /** @type {?} */\n    RenderComponentType.prototype.slotCount;\n    /** @type {?} */\n    RenderComponentType.prototype.encapsulation;\n    /** @type {?} */\n    RenderComponentType.prototype.styles;\n    /** @type {?} */\n    RenderComponentType.prototype.animations;\n}\n/**\n * @deprecated Debug info is handeled internally in the view engine now.\n * @abstract\n */\nvar /**\n * @deprecated Debug info is handeled internally in the view engine now.\n * @abstract\n */\nRenderDebugInfo = /** @class */ (function () {\n    function RenderDebugInfo() {\n    }\n    return RenderDebugInfo;\n}());\n/**\n * @deprecated Debug info is handeled internally in the view engine now.\n * @abstract\n */\nexport { RenderDebugInfo };\nfunction RenderDebugInfo_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.source = function () { };\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * @record\n */\nexport function DirectRenderer() { }\nfunction DirectRenderer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DirectRenderer.prototype.remove;\n    /** @type {?} */\n    DirectRenderer.prototype.appendChild;\n    /** @type {?} */\n    DirectRenderer.prototype.insertBefore;\n    /** @type {?} */\n    DirectRenderer.prototype.nextSibling;\n    /** @type {?} */\n    DirectRenderer.prototype.parentElement;\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * @abstract\n */\nvar /**\n * @deprecated Use the `Renderer2` instead.\n * @abstract\n */\nRenderer = /** @class */ (function () {\n    function Renderer() {\n    }\n    return Renderer;\n}());\n/**\n * @deprecated Use the `Renderer2` instead.\n * @abstract\n */\nexport { Renderer };\nfunction Renderer_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} selectorOrNode\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} name\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @return {?}\n     */\n    Renderer.prototype.createViewRoot = function (hostElement) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} value\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createText = function (parentElement, value, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    Renderer.prototype.projectNodes = function (parentElement, nodes) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.detachView = function (viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listen = function (renderElement, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listenGlobal = function (target, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} attributeName\n     * @param {?} attributeValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };\n    /**\n     * Used only in debug mode to serialize property changes to dom nodes as attributes.\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?=} args\n     * @return {?}\n     */\n    Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };\n    /**\n     * @abstract\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    Renderer.prototype.setText = function (renderNode, text) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} startingStyles\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };\n}\nexport var /** @type {?} */ Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @abstract\n */\nvar /**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @abstract\n */\nRootRenderer = /** @class */ (function () {\n    function RootRenderer() {\n    }\n    return RootRenderer;\n}());\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @abstract\n */\nexport { RootRenderer };\nfunction RootRenderer_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} componentType\n     * @return {?}\n     */\n    RootRenderer.prototype.renderComponent = function (componentType) { };\n}\n/**\n * \\@experimental\n * @record\n */\nexport function RendererType2() { }\nfunction RendererType2_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RendererType2.prototype.id;\n    /** @type {?} */\n    RendererType2.prototype.encapsulation;\n    /** @type {?} */\n    RendererType2.prototype.styles;\n    /** @type {?} */\n    RendererType2.prototype.data;\n}\n/**\n * \\@experimental\n * @abstract\n */\nvar /**\n * \\@experimental\n * @abstract\n */\nRendererFactory2 = /** @class */ (function () {\n    function RendererFactory2() {\n    }\n    return RendererFactory2;\n}());\n/**\n * \\@experimental\n * @abstract\n */\nexport { RendererFactory2 };\nfunction RendererFactory2_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @param {?} type\n     * @return {?}\n     */\n    RendererFactory2.prototype.createRenderer = function (hostElement, type) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.begin = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.end = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.whenRenderingDone = function () { };\n}\n/** @enum {number} */\nvar RendererStyleFlags2 = {\n    Important: 1,\n    DashCase: 2,\n};\nexport { RendererStyleFlags2 };\nRendererStyleFlags2[RendererStyleFlags2.Important] = \"Important\";\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = \"DashCase\";\n/**\n * \\@experimental\n * @abstract\n */\nvar /**\n * \\@experimental\n * @abstract\n */\nRenderer2 = /** @class */ (function () {\n    function Renderer2() {\n    }\n    return Renderer2;\n}());\n/**\n * \\@experimental\n * @abstract\n */\nexport { Renderer2 };\nfunction Renderer2_tsickle_Closure_declarations() {\n    /**\n     * This property is allowed to be null / undefined,\n     * in which case the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     * @type {?}\n     */\n    Renderer2.prototype.destroyNode;\n    /**\n     * This field can be used to store arbitrary data on this renderer instance.\n     * This is useful for renderers that delegate to other renderers.\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.data = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.destroy = function () { };\n    /**\n     * @abstract\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    Renderer2.prototype.createElement = function (name, namespace) { };\n    /**\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    Renderer2.prototype.createComment = function (value) { };\n    /**\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    Renderer2.prototype.createText = function (value) { };\n    /**\n     * @abstract\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    Renderer2.prototype.appendChild = function (parent, newChild) { };\n    /**\n     * @abstract\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };\n    /**\n     * @abstract\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    Renderer2.prototype.removeChild = function (parent, oldChild) { };\n    /**\n     * @abstract\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    Renderer2.prototype.selectRootElement = function (selectorOrNode) { };\n    /**\n     * Attention: On WebWorkers, this will always return a value,\n     * as we are asking for a result synchronously. I.e.\n     * the caller can't rely on checking whether this is null or not.\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    Renderer2.prototype.parentNode = function (node) { };\n    /**\n     * Attention: On WebWorkers, this will always return a value,\n     * as we are asking for a result synchronously. I.e.\n     * the caller can't rely on checking whether this is null or not.\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    Renderer2.prototype.nextSibling = function (node) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    Renderer2.prototype.removeAttribute = function (el, name, namespace) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    Renderer2.prototype.addClass = function (el, name) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    Renderer2.prototype.removeClass = function (el, name) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?=} flags\n     * @return {?}\n     */\n    Renderer2.prototype.setStyle = function (el, style, value, flags) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} style\n     * @param {?=} flags\n     * @return {?}\n     */\n    Renderer2.prototype.removeStyle = function (el, style, flags) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Renderer2.prototype.setProperty = function (el, name, value) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    Renderer2.prototype.setValue = function (node, value) { };\n    /**\n     * @abstract\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer2.prototype.listen = function (target, eventName, callback) { };\n}\n//# sourceMappingURL=api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n *\n * @template T\n */\nvar /**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n *\n * @template T\n */\nElementRef = /** @class */ (function () {\n    function ElementRef(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n    return ElementRef;\n}());\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n *\n * @template T\n */\nexport { ElementRef };\nfunction ElementRef_tsickle_Closure_declarations() {\n    /**\n     * The underlying native element or `null` if direct access to native elements is not supported\n     * (e.g. when the application runs in a web worker).\n     *\n     * <div class=\"callout is-critical\">\n     *   <header>Use with caution</header>\n     *   <p>\n     *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n     *    data-binding provided by Angular instead. Alternatively you can take a look at {\\@link\n     * Renderer2}\n     *    which provides API that can safely be used even when direct access to native elements is not\n     *    supported.\n     *   </p>\n     *   <p>\n     *    Relying on direct DOM access creates tight coupling between your application and rendering\n     *    layers which will make it impossible to separate the two and deploy your application into a\n     *    web worker.\n     *   </p>\n     * </div>\n     *\n     * @type {?}\n     */\n    ElementRef.prototype.nativeElement;\n}\n//# sourceMappingURL=element_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to load ng module factories.\n *\n * @abstract\n */\nvar /**\n * Used to load ng module factories.\n *\n * @abstract\n */\nNgModuleFactoryLoader = /** @class */ (function () {\n    function NgModuleFactoryLoader() {\n    }\n    return NgModuleFactoryLoader;\n}());\n/**\n * Used to load ng module factories.\n *\n * @abstract\n */\nexport { NgModuleFactoryLoader };\nfunction NgModuleFactoryLoader_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} path\n     * @return {?}\n     */\n    NgModuleFactoryLoader.prototype.load = function (path) { };\n}\nvar /** @type {?} */ moduleFactories = new Map();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@experimental\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nexport function registerModuleFactory(id, factory) {\n    var /** @type {?} */ existing = moduleFactories.get(id);\n    if (existing) {\n        throw new Error(\"Duplicate module registered for \" + id + \" - \" + existing.moduleType.name + \" vs \" + factory.moduleType.name);\n    }\n    moduleFactories.set(id, factory);\n}\n/**\n * @return {?}\n */\nexport function clearModulesForTest() {\n    moduleFactories = new Map();\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@experimental\n * @param {?} id\n * @return {?}\n */\nexport function getModuleFactory(id) {\n    var /** @type {?} */ factory = moduleFactories.get(id);\n    if (!factory)\n        throw new Error(\"No module with ID \" + id + \" loaded\");\n    return factory;\n}\n//# sourceMappingURL=ng_module_factory_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\nimport { getSymbolIterator } from '../util';\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n * ```typescript\n * \\@Component({...})\n * class Container {\n *   \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @template T\n */\nvar /**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n * ```typescript\n * \\@Component({...})\n * class Container {\n *   \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @template T\n */\nQueryList = /** @class */ (function () {\n    function QueryList() {\n        this.dirty = true;\n        this._results = [];\n        this.changes = new EventEmitter();\n        this.length = 0;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.map = /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return this._results.map(fn); };\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.filter = /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.filter(fn);\n    };\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.find = /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.find(fn);\n    };\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    QueryList.prototype.reduce = /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    function (fn, init) {\n        return this._results.reduce(fn, init);\n    };\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.forEach = /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._results.forEach(fn); };\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.some = /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.some(fn);\n    };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.toArray = /**\n     * @return {?}\n     */\n    function () { return this._results.slice(); };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype[getSymbolIterator()] = /**\n     * @return {?}\n     */\n    function () { return (/** @type {?} */ (this._results))[getSymbolIterator()](); };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this._results.toString(); };\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    QueryList.prototype.reset = /**\n     * @param {?} res\n     * @return {?}\n     */\n    function (res) {\n        this._results = flatten(res);\n        (/** @type {?} */ (this)).dirty = false;\n        (/** @type {?} */ (this)).length = this._results.length;\n        (/** @type {?} */ (this)).last = this._results[this.length - 1];\n        (/** @type {?} */ (this)).first = this._results[0];\n    };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.notifyOnChanges = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this.changes)).emit(this); };\n    /** internal */\n    /**\n     * internal\n     * @return {?}\n     */\n    QueryList.prototype.setDirty = /**\n     * internal\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).dirty = true; };\n    /** internal */\n    /**\n     * internal\n     * @return {?}\n     */\n    QueryList.prototype.destroy = /**\n     * internal\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this.changes)).complete();\n        (/** @type {?} */ (this.changes)).unsubscribe();\n    };\n    return QueryList;\n}());\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n * ```typescript\n * \\@Component({...})\n * class Container {\n *   \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @template T\n */\nexport { QueryList };\nfunction QueryList_tsickle_Closure_declarations() {\n    /** @type {?} */\n    QueryList.prototype.dirty;\n    /** @type {?} */\n    QueryList.prototype._results;\n    /** @type {?} */\n    QueryList.prototype.changes;\n    /** @type {?} */\n    QueryList.prototype.length;\n    /** @type {?} */\n    QueryList.prototype.first;\n    /** @type {?} */\n    QueryList.prototype.last;\n}\n/**\n * @template T\n * @param {?} list\n * @return {?}\n */\nfunction flatten(list) {\n    return list.reduce(function (flat, item) {\n        var /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;\n        return (/** @type {?} */ (flat)).concat(flatItem);\n    }, []);\n}\n//# sourceMappingURL=query_list.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, Optional } from '../di';\nimport { Compiler } from './compiler';\nvar /** @type {?} */ _SEPARATOR = '#';\nvar /** @type {?} */ FACTORY_CLASS_SUFFIX = 'NgFactory';\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@experimental\n * @abstract\n */\nvar /**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@experimental\n * @abstract\n */\nSystemJsNgModuleLoaderConfig = /** @class */ (function () {\n    function SystemJsNgModuleLoaderConfig() {\n    }\n    return SystemJsNgModuleLoaderConfig;\n}());\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@experimental\n * @abstract\n */\nexport { SystemJsNgModuleLoaderConfig };\nfunction SystemJsNgModuleLoaderConfig_tsickle_Closure_declarations() {\n    /**\n     * Prefix to add when computing the name of the factory module for a given module name.\n     * @type {?}\n     */\n    SystemJsNgModuleLoaderConfig.prototype.factoryPathPrefix;\n    /**\n     * Suffix to add when computing the name of the factory module for a given module name.\n     * @type {?}\n     */\n    SystemJsNgModuleLoaderConfig.prototype.factoryPathSuffix;\n}\nvar /** @type {?} */ DEFAULT_CONFIG = {\n    factoryPathPrefix: '',\n    factoryPathSuffix: '.ngfactory',\n};\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * \\@experimental\n */\nvar SystemJsNgModuleLoader = /** @class */ (function () {\n    function SystemJsNgModuleLoader(_compiler, config) {\n        this._compiler = _compiler;\n        this._config = config || DEFAULT_CONFIG;\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.load = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;\n        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.loadAndCompile = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var _this = this;\n        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n        if (exportName === undefined) {\n            exportName = 'default';\n        }\n        return System.import(module)\n            .then(function (module) { return module[exportName]; })\n            .then(function (type) { return checkNotEmpty(type, module, exportName); })\n            .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.loadFactory = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n        var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n        if (exportName === undefined) {\n            exportName = 'default';\n            factoryClassSuffix = '';\n        }\n        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n            .then(function (module) { return module[exportName + factoryClassSuffix]; })\n            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n    };\n    SystemJsNgModuleLoader.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    SystemJsNgModuleLoader.ctorParameters = function () { return [\n        { type: Compiler, },\n        { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },\n    ]; };\n    return SystemJsNgModuleLoader;\n}());\nexport { SystemJsNgModuleLoader };\nfunction SystemJsNgModuleLoader_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    SystemJsNgModuleLoader.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    SystemJsNgModuleLoader.ctorParameters;\n    /** @type {?} */\n    SystemJsNgModuleLoader.prototype._config;\n    /** @type {?} */\n    SystemJsNgModuleLoader.prototype._compiler;\n}\n/**\n * @param {?} value\n * @param {?} modulePath\n * @param {?} exportName\n * @return {?}\n */\nfunction checkNotEmpty(value, modulePath, exportName) {\n    if (!value) {\n        throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n    }\n    return value;\n}\n//# sourceMappingURL=system_js_ng_module_factory_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nvar EventListener = /** @class */ (function () {\n    function EventListener(name, callback) {\n        this.name = name;\n        this.callback = callback;\n    }\n    return EventListener;\n}());\nexport { EventListener };\nfunction EventListener_tsickle_Closure_declarations() {\n    /** @type {?} */\n    EventListener.prototype.name;\n    /** @type {?} */\n    EventListener.prototype.callback;\n}\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nvar /**\n * \\@experimental All debugging apis are currently experimental.\n */\nDebugNode = /** @class */ (function () {\n    function DebugNode(nativeNode, parent, _debugContext) {\n        this._debugContext = _debugContext;\n        this.nativeNode = nativeNode;\n        if (parent && parent instanceof DebugElement) {\n            parent.addChild(this);\n        }\n        else {\n            this.parent = null;\n        }\n        this.listeners = [];\n    }\n    Object.defineProperty(DebugNode.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.injector; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"componentInstance\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.references; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.providerTokens; },\n        enumerable: true,\n        configurable: true\n    });\n    return DebugNode;\n}());\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nexport { DebugNode };\nfunction DebugNode_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DebugNode.prototype.nativeNode;\n    /** @type {?} */\n    DebugNode.prototype.listeners;\n    /** @type {?} */\n    DebugNode.prototype.parent;\n    /** @type {?} */\n    DebugNode.prototype._debugContext;\n}\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nvar /**\n * \\@experimental All debugging apis are currently experimental.\n */\nDebugElement = /** @class */ (function (_super) {\n    tslib_1.__extends(DebugElement, _super);\n    function DebugElement(nativeNode, parent, _debugContext) {\n        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\n        _this.properties = {};\n        _this.attributes = {};\n        _this.classes = {};\n        _this.styles = {};\n        _this.childNodes = [];\n        _this.nativeElement = nativeNode;\n        return _this;\n    }\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    DebugElement.prototype.addChild = /**\n     * @param {?} child\n     * @return {?}\n     */\n    function (child) {\n        if (child) {\n            this.childNodes.push(child);\n            child.parent = this;\n        }\n    };\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    DebugElement.prototype.removeChild = /**\n     * @param {?} child\n     * @return {?}\n     */\n    function (child) {\n        var /** @type {?} */ childIndex = this.childNodes.indexOf(child);\n        if (childIndex !== -1) {\n            child.parent = null;\n            this.childNodes.splice(childIndex, 1);\n        }\n    };\n    /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    DebugElement.prototype.insertChildrenAfter = /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    function (child, newChildren) {\n        var _this = this;\n        var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);\n        if (siblingIndex !== -1) {\n            (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));\n            newChildren.forEach(function (c) {\n                if (c.parent) {\n                    c.parent.removeChild(c);\n                }\n                c.parent = _this;\n            });\n        }\n        var _a;\n    };\n    /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    DebugElement.prototype.insertBefore = /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    function (refChild, newChild) {\n        var /** @type {?} */ refIndex = this.childNodes.indexOf(refChild);\n        if (refIndex === -1) {\n            this.addChild(newChild);\n        }\n        else {\n            if (newChild.parent) {\n                newChild.parent.removeChild(newChild);\n            }\n            newChild.parent = this;\n            this.childNodes.splice(refIndex, 0, newChild);\n        }\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.query = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        var /** @type {?} */ results = this.queryAll(predicate);\n        return results[0] || null;\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.queryAll = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        var /** @type {?} */ matches = [];\n        _queryElementChildren(this, predicate, matches);\n        return matches;\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.queryAllNodes = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        var /** @type {?} */ matches = [];\n        _queryNodeChildren(this, predicate, matches);\n        return matches;\n    };\n    Object.defineProperty(DebugElement.prototype, \"children\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return /** @type {?} */ (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    DebugElement.prototype.triggerEventHandler = /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    function (eventName, eventObj) {\n        this.listeners.forEach(function (listener) {\n            if (listener.name == eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    };\n    return DebugElement;\n}(DebugNode));\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nexport { DebugElement };\nfunction DebugElement_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DebugElement.prototype.name;\n    /** @type {?} */\n    DebugElement.prototype.properties;\n    /** @type {?} */\n    DebugElement.prototype.attributes;\n    /** @type {?} */\n    DebugElement.prototype.classes;\n    /** @type {?} */\n    DebugElement.prototype.styles;\n    /** @type {?} */\n    DebugElement.prototype.childNodes;\n    /** @type {?} */\n    DebugElement.prototype.nativeElement;\n}\n/**\n * \\@experimental\n * @param {?} debugEls\n * @return {?}\n */\nexport function asNativeElements(debugEls) {\n    return debugEls.map(function (el) { return el.nativeElement; });\n}\n/**\n * @param {?} element\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryElementChildren(element, predicate, matches) {\n    element.childNodes.forEach(function (node) {\n        if (node instanceof DebugElement) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            _queryElementChildren(node, predicate, matches);\n        }\n    });\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryNodeChildren(parentNode, predicate, matches) {\n    if (parentNode instanceof DebugElement) {\n        parentNode.childNodes.forEach(function (node) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement) {\n                _queryNodeChildren(node, predicate, matches);\n            }\n        });\n    }\n}\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\nvar /** @type {?} */ _nativeNodeToDebugNode = new Map();\n/**\n * \\@experimental\n * @param {?} nativeNode\n * @return {?}\n */\nexport function getDebugNode(nativeNode) {\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n/**\n * @return {?}\n */\nexport function getAllDebugNodes() {\n    return Array.from(_nativeNodeToDebugNode.values());\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function indexDebugNode(node) {\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function removeDebugNodeFromIndex(node) {\n    _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * \\@experimental All debugging apis are currently experimental.\n * @record\n * @template T\n */\nexport function Predicate() { }\nfunction Predicate_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (value: T): boolean;\n    */\n}\n//# sourceMappingURL=debug_node.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ChangeDetectorRef } from '../change_detection/change_detector_ref';\n/**\n *\n * @abstract\n */\nvar /**\n *\n * @abstract\n */\nViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewRef, _super);\n    function ViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ViewRef;\n}(ChangeDetectorRef));\n/**\n *\n * @abstract\n */\nexport { ViewRef };\nfunction ViewRef_tsickle_Closure_declarations() {\n    /**\n     * Destroys the view and all of the data structures associated with it.\n     * @abstract\n     * @return {?}\n     */\n    ViewRef.prototype.destroy = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    ViewRef.prototype.destroyed = function () { };\n    /**\n     * @abstract\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef.prototype.onDestroy = function (callback) { };\n}\n/**\n * Represents an Angular View.\n *\n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n *\n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n * <!-- /TODO -->\n *\n * ### Example\n *\n * Given this template...\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * We have two {\\@link TemplateRef}s:\n *\n * Outer {\\@link TemplateRef}:\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * Inner {\\@link TemplateRef}:\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n *\n * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n * @template C\n */\nvar /**\n * Represents an Angular View.\n *\n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n *\n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n * <!-- /TODO -->\n *\n * ### Example\n *\n * Given this template...\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * We have two {\\@link TemplateRef}s:\n *\n * Outer {\\@link TemplateRef}:\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * Inner {\\@link TemplateRef}:\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n *\n * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n * @template C\n */\nEmbeddedViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(EmbeddedViewRef, _super);\n    function EmbeddedViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return EmbeddedViewRef;\n}(ViewRef));\n/**\n * Represents an Angular View.\n *\n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n *\n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n * <!-- /TODO -->\n *\n * ### Example\n *\n * Given this template...\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * We have two {\\@link TemplateRef}s:\n *\n * Outer {\\@link TemplateRef}:\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * Inner {\\@link TemplateRef}:\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n *\n * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n * @template C\n */\nexport { EmbeddedViewRef };\nfunction EmbeddedViewRef_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    EmbeddedViewRef.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    EmbeddedViewRef.prototype.rootNodes = function () { };\n}\n/**\n * @record\n */\nexport function InternalViewRef() { }\nfunction InternalViewRef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InternalViewRef.prototype.detachFromAppRef;\n    /** @type {?} */\n    InternalViewRef.prototype.attachToAppRef;\n}\n//# sourceMappingURL=view_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getSymbolIterator, looseIdentical } from '../util';\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function devModeEqual(a, b) {\n    var /** @type {?} */ isListLikeIterableA = isListLikeIterable(a);\n    var /** @type {?} */ isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        var /** @type {?} */ isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        var /** @type {?} */ isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n */\nvar /**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n */\nWrappedValue = /** @class */ (function () {\n    function WrappedValue(value) {\n        this.wrapped = value;\n    }\n    /** Creates a wrapped value. */\n    /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.wrap = /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return new WrappedValue(value); };\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     **/\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.unwrap = /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };\n    /** Returns true if `value` is a wrapped value. */\n    /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.isWrapped = /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return value instanceof WrappedValue; };\n    return WrappedValue;\n}());\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n */\nexport { WrappedValue };\nfunction WrappedValue_tsickle_Closure_declarations() {\n    /**\n     * @deprecated from 5.3, use `unwrap()` instead - will switch to protected\n     * @type {?}\n     */\n    WrappedValue.prototype.wrapped;\n}\n/**\n * Represents a basic change from a previous to a new value.\n *\n */\nvar /**\n * Represents a basic change from a previous to a new value.\n *\n */\nSimpleChange = /** @class */ (function () {\n    function SimpleChange(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    /**\n     * Check whether the new value is the first value assigned.\n     * @return {?}\n     */\n    SimpleChange.prototype.isFirstChange = /**\n     * Check whether the new value is the first value assigned.\n     * @return {?}\n     */\n    function () { return this.firstChange; };\n    return SimpleChange;\n}());\n/**\n * Represents a basic change from a previous to a new value.\n *\n */\nexport { SimpleChange };\nfunction SimpleChange_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SimpleChange.prototype.previousValue;\n    /** @type {?} */\n    SimpleChange.prototype.currentValue;\n    /** @type {?} */\n    SimpleChange.prototype.firstChange;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} comparator\n * @return {?}\n */\nexport function areIterablesEqual(a, b, comparator) {\n    var /** @type {?} */ iterator1 = a[getSymbolIterator()]();\n    var /** @type {?} */ iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        var /** @type {?} */ item1 = iterator1.next();\n        var /** @type {?} */ item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\n/**\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nexport function iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (var /** @type {?} */ i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        var /** @type {?} */ iterator = obj[getSymbolIterator()]();\n        var /** @type {?} */ item = void 0;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nexport function isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n//# sourceMappingURL=change_detection_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical, stringify } from '../../util';\nimport { isListLikeIterable, iterateListLike } from '../change_detection_util';\nvar DefaultIterableDifferFactory = /** @class */ (function () {\n    function DefaultIterableDifferFactory() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    DefaultIterableDifferFactory.prototype.supports = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) { return isListLikeIterable(obj); };\n    /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    DefaultIterableDifferFactory.prototype.create = /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    function (trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    };\n    return DefaultIterableDifferFactory;\n}());\nexport { DefaultIterableDifferFactory };\nvar /** @type {?} */ trackByIdentity = function (index, item) { return item; };\nvar ɵ0 = trackByIdentity;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @template V\n */\nvar /**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @template V\n */\nDefaultIterableDiffer = /** @class */ (function () {\n    function DefaultIterableDiffer(trackByFn) {\n        this.length = 0;\n        this._linkedRecords = null;\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = trackByFn || trackByIdentity;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachOperation = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ nextIt = this._itHead;\n        var /** @type {?} */ nextRemove = this._removalsHead;\n        var /** @type {?} */ addRemoveOffset = 0;\n        var /** @type {?} */ moveOffsets = null;\n        while (nextIt || nextRemove) {\n            // Figure out which is the next record to process\n            // Order: remove, add, move\n            var /** @type {?} */ record = !nextRemove ||\n                nextIt && /** @type {?} */ ((nextIt.currentIndex)) < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? /** @type {?} */\n                ((nextIt)) :\n                nextRemove;\n            var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n            var /** @type {?} */ currentIndex = record.currentIndex;\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n            if (record === nextRemove) {\n                addRemoveOffset--;\n                nextRemove = nextRemove._nextRemoved;\n            }\n            else {\n                nextIt = /** @type {?} */ ((nextIt))._next;\n                if (record.previousIndex == null) {\n                    addRemoveOffset++;\n                }\n                else {\n                    // INVARIANT:  currentIndex < previousIndex\n                    if (!moveOffsets)\n                        moveOffsets = [];\n                    var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                    var /** @type {?} */ localCurrentIndex = /** @type {?} */ ((currentIndex)) - addRemoveOffset;\n                    if (localMovePreviousIndex != localCurrentIndex) {\n                        for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {\n                            var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                            var /** @type {?} */ index = offset + i;\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                moveOffsets[i] = offset + 1;\n                            }\n                        }\n                        var /** @type {?} */ previousIndex = record.previousIndex;\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                    }\n                }\n            }\n            if (adjPreviousIndex !== currentIndex) {\n                fn(record, adjPreviousIndex, currentIndex);\n            }\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachPreviousItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachAddedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachMovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachRemovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachIdentityChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.diff = /**\n     * @param {?} collection\n     * @return {?}\n     */\n    function (collection) {\n        if (collection == null)\n            collection = [];\n        if (!isListLikeIterable(collection)) {\n            throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.onDestroy = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.check = /**\n     * @param {?} collection\n     * @return {?}\n     */\n    function (collection) {\n        var _this = this;\n        this._reset();\n        var /** @type {?} */ record = this._itHead;\n        var /** @type {?} */ mayBeDirty = false;\n        var /** @type {?} */ index;\n        var /** @type {?} */ item;\n        var /** @type {?} */ itemTrackBy;\n        if (Array.isArray(collection)) {\n            (/** @type {?} */ (this)).length = collection.length;\n            for (var /** @type {?} */ index_1 = 0; index_1 < this.length; index_1++) {\n                item = collection[index_1];\n                itemTrackBy = this._trackByFn(index_1, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index_1);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            iterateListLike(collection, function (item) {\n                itemTrackBy = _this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = _this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        _this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            });\n            (/** @type {?} */ (this)).length = index;\n        }\n        this._truncate(record);\n        (/** @type {?} */ (this)).collection = collection;\n        return this.isDirty;\n    };\n    Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n         * changes.\n         */\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._additionsHead !== null || this._movesHead !== null ||\n                this._removalsHead !== null || this._identityChangesHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * @internal\n     */\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._reset = /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.isDirty) {\n            var /** @type {?} */ record = void 0;\n            var /** @type {?} */ nextRecord = void 0;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = nextRecord) {\n                record.previousIndex = record.currentIndex;\n                nextRecord = record._nextMoved;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n            // todo(vicb) when assert gets supported\n            // assert(!this.isDirty);\n        }\n    };\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * @internal\n     */\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._mismatch = /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, item, itemTrackBy, index) {\n        // The previous record after which we will append the current one.\n        var /** @type {?} */ previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // Attempt to see if we have seen the item before.\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n        if (record !== null) {\n            // We have seen this before, we need to move it forward in the collection.\n            // But first we need to check if identity changed, so we can update in view if necessary\n            if (!looseIdentical(record.item, item))\n                this._addIdentityChange(record, item);\n            this._moveAfter(record, previousRecord, index);\n        }\n        else {\n            // Never seen it, check evicted list.\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (record !== null) {\n                // It is an item which we have evicted earlier: reinsert it back into the list.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._reinsertAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    };\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * @internal\n     */\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._verifyReinsertion = /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, item, itemTrackBy, index) {\n        var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, /** @type {?} */ ((record._prev)), index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    };\n    /**\n     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {@link IterableChangeRecord_}.\n     *\n     * @internal\n     */\n    /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._truncate = /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            var /** @type {?} */ nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._reinsertAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        var /** @type {?} */ prev = record._prevRemoved;\n        var /** @type {?} */ next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._moveAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // todo(vicb)\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // todo(vicb)\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._insertAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        // todo(vicb)\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;\n        // todo(vicb)\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._remove = /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        return this._addToRemovals(this._unlink(record));\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._unlink = /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        var /** @type {?} */ prev = record._prev;\n        var /** @type {?} */ next = record._next;\n        // todo(vicb)\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addToMoves = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    function (record, toIndex) {\n        // todo(vicb)\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // todo(vicb)\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // todo(vicb)\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addToRemovals = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // todo(vicb)\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // todo(vicb)\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addIdentityChange = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    function (record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    };\n    return DefaultIterableDiffer;\n}());\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @template V\n */\nexport { DefaultIterableDiffer };\nfunction DefaultIterableDiffer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DefaultIterableDiffer.prototype.length;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype.collection;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._linkedRecords;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._unlinkedRecords;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._previousItHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._itHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._itTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._additionsHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._additionsTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._movesHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._movesTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._removalsHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._removalsTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._identityChangesHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._identityChangesTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._trackByFn;\n}\n/**\n *\n * @template V\n */\nvar /**\n *\n * @template V\n */\nIterableChangeRecord_ = /** @class */ (function () {\n    function IterableChangeRecord_(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prevDup = null;\n        /**\n         * \\@internal\n         */\n        this._nextDup = null;\n        /**\n         * \\@internal\n         */\n        this._prevRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextMoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextIdentityChange = null;\n    }\n    return IterableChangeRecord_;\n}());\n/**\n *\n * @template V\n */\nexport { IterableChangeRecord_ };\nfunction IterableChangeRecord__tsickle_Closure_declarations() {\n    /** @type {?} */\n    IterableChangeRecord_.prototype.currentIndex;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.previousIndex;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextPrevious;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prev;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._next;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prevDup;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextDup;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prevRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextAdded;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextMoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextIdentityChange;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.item;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.trackById;\n}\n/**\n * @template V\n */\nvar /**\n * @template V\n */\n_DuplicateItemRecordList = /** @class */ (function () {\n    function _DuplicateItemRecordList() {\n        /**\n         * \\@internal\n         */\n        this._head = null;\n        /**\n         * \\@internal\n         */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     */\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.add = /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            /** @type {?} */ ((\n            // todo(vicb)\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            this._tail))._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    };\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n    /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.get = /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    function (trackById, atOrAfterIndex) {\n        var /** @type {?} */ record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((atOrAfterIndex === null || atOrAfterIndex <= /** @type {?} */ ((record.currentIndex))) &&\n                looseIdentical(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     */\n    /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.remove = /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        // todo(vicb)\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        var /** @type {?} */ prev = record._prevDup;\n        var /** @type {?} */ next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    };\n    return _DuplicateItemRecordList;\n}());\nfunction _DuplicateItemRecordList_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    _DuplicateItemRecordList.prototype._head;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    _DuplicateItemRecordList.prototype._tail;\n}\n/**\n * @template V\n */\nvar /**\n * @template V\n */\n_DuplicateMap = /** @class */ (function () {\n    function _DuplicateMap() {\n        this.map = new Map();\n    }\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateMap.prototype.put = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        var /** @type {?} */ key = record.trackById;\n        var /** @type {?} */ duplicates = this.map.get(key);\n        if (!duplicates) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    };\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     */\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    _DuplicateMap.prototype.get = /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    function (trackById, atOrAfterIndex) {\n        var /** @type {?} */ key = trackById;\n        var /** @type {?} */ recordList = this.map.get(key);\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n    };\n    /**\n     * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     */\n    /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateMap.prototype.remove = /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        var /** @type {?} */ key = record.trackById;\n        var /** @type {?} */ recordList = /** @type {?} */ ((this.map.get(key)));\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    };\n    Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.map.size === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    _DuplicateMap.prototype.clear = /**\n     * @return {?}\n     */\n    function () { this.map.clear(); };\n    return _DuplicateMap;\n}());\nfunction _DuplicateMap_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _DuplicateMap.prototype.map;\n}\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n    var /** @type {?} */ previousIndex = item.previousIndex;\n    if (previousIndex === null)\n        return previousIndex;\n    var /** @type {?} */ moveOffset = 0;\n    if (moveOffsets && previousIndex < moveOffsets.length) {\n        moveOffset = moveOffsets[previousIndex];\n    }\n    return previousIndex + addRemoveOffset + moveOffset;\n}\nexport { ɵ0 };\n//# sourceMappingURL=default_iterable_differ.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical, stringify } from '../../util';\nimport { isJsObject } from '../change_detection_util';\n/**\n * @template K, V\n */\nvar /**\n * @template K, V\n */\nDefaultKeyValueDifferFactory = /** @class */ (function () {\n    function DefaultKeyValueDifferFactory() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    DefaultKeyValueDifferFactory.prototype.supports = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) { return obj instanceof Map || isJsObject(obj); };\n    /**\n     * @template K, V\n     * @return {?}\n     */\n    DefaultKeyValueDifferFactory.prototype.create = /**\n     * @template K, V\n     * @return {?}\n     */\n    function () { return new DefaultKeyValueDiffer(); };\n    return DefaultKeyValueDifferFactory;\n}());\n/**\n * @template K, V\n */\nexport { DefaultKeyValueDifferFactory };\n/**\n * @template K, V\n */\nvar /**\n * @template K, V\n */\nDefaultKeyValueDiffer = /** @class */ (function () {\n    function DefaultKeyValueDiffer() {\n        this._records = new Map();\n        this._mapHead = null;\n        this._appendAfter = null;\n        this._previousMapHead = null;\n        this._changesHead = null;\n        this._changesTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n    }\n    Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._additionsHead !== null || this._changesHead !== null ||\n                this._removalsHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._mapHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachPreviousItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachChangedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachAddedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachRemovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?=} map\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.diff = /**\n     * @param {?=} map\n     * @return {?}\n     */\n    function (map) {\n        if (!map) {\n            map = new Map();\n        }\n        else if (!(map instanceof Map || isJsObject(map))) {\n            throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\n        }\n        return this.check(map) ? this : null;\n    };\n    /**\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.onDestroy = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     */\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.check = /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    function (map) {\n        var _this = this;\n        this._reset();\n        var /** @type {?} */ insertBefore = this._mapHead;\n        this._appendAfter = null;\n        this._forEach(map, function (value, key) {\n            if (insertBefore && insertBefore.key === key) {\n                _this._maybeAddToChanges(insertBefore, value);\n                _this._appendAfter = insertBefore;\n                insertBefore = insertBefore._next;\n            }\n            else {\n                var /** @type {?} */ record = _this._getOrCreateRecordForKey(key, value);\n                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\n            }\n        });\n        // Items remaining at the end of the list have been deleted\n        if (insertBefore) {\n            if (insertBefore._prev) {\n                insertBefore._prev._next = null;\n            }\n            this._removalsHead = insertBefore;\n            for (var /** @type {?} */ record = insertBefore; record !== null; record = record._nextRemoved) {\n                if (record === this._mapHead) {\n                    this._mapHead = null;\n                }\n                this._records.delete(record.key);\n                record._nextRemoved = record._next;\n                record.previousValue = record.currentValue;\n                record.currentValue = null;\n                record._prev = null;\n                record._next = null;\n            }\n        }\n        // Make sure tails have no next records from previous runs\n        if (this._changesTail)\n            this._changesTail._nextChanged = null;\n        if (this._additionsTail)\n            this._additionsTail._nextAdded = null;\n        return this.isDirty;\n    };\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    function (before, record) {\n        if (before) {\n            var /** @type {?} */ prev = before._prev;\n            record._next = before;\n            record._prev = prev;\n            before._prev = record;\n            if (prev) {\n                prev._next = record;\n            }\n            if (before === this._mapHead) {\n                this._mapHead = record;\n            }\n            this._appendAfter = before;\n            return before;\n        }\n        if (this._appendAfter) {\n            this._appendAfter._next = record;\n            record._prev = this._appendAfter;\n        }\n        else {\n            this._mapHead = record;\n        }\n        this._appendAfter = record;\n        return null;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    function (key, value) {\n        if (this._records.has(key)) {\n            var /** @type {?} */ record_1 = /** @type {?} */ ((this._records.get(key)));\n            this._maybeAddToChanges(record_1, value);\n            var /** @type {?} */ prev = record_1._prev;\n            var /** @type {?} */ next = record_1._next;\n            if (prev) {\n                prev._next = next;\n            }\n            if (next) {\n                next._prev = prev;\n            }\n            record_1._next = null;\n            record_1._prev = null;\n            return record_1;\n        }\n        var /** @type {?} */ record = new KeyValueChangeRecord_(key);\n        this._records.set(key, record);\n        record.currentValue = value;\n        this._addToAdditions(record);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._reset = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.isDirty) {\n            var /** @type {?} */ record = void 0;\n            // let `_previousMapHead` contain the state of the map before the changes\n            this._previousMapHead = this._mapHead;\n            for (record = this._previousMapHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            // Update `record.previousValue` with the value of the item before the changes\n            // We need to update all changed items (that's those which have been added and changed)\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                record.previousValue = record.currentValue;\n            }\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                record.previousValue = record.currentValue;\n            }\n            this._changesHead = this._changesTail = null;\n            this._additionsHead = this._additionsTail = null;\n            this._removalsHead = null;\n        }\n    };\n    /**\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._maybeAddToChanges = /**\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (record, newValue) {\n        if (!looseIdentical(newValue, record.currentValue)) {\n            record.previousValue = record.currentValue;\n            record.currentValue = newValue;\n            this._addToChanges(record);\n        }\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._addToAdditions = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._additionsHead === null) {\n            this._additionsHead = this._additionsTail = record;\n        }\n        else {\n            /** @type {?} */ ((this._additionsTail))._nextAdded = record;\n            this._additionsTail = record;\n        }\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._addToChanges = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._changesHead === null) {\n            this._changesHead = this._changesTail = record;\n        }\n        else {\n            /** @type {?} */ ((this._changesTail))._nextChanged = record;\n            this._changesTail = record;\n        }\n    };\n    /**\n     * \\@internal\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._forEach = /**\n     * \\@internal\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    function (obj, fn) {\n        if (obj instanceof Map) {\n            obj.forEach(fn);\n        }\n        else {\n            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n        }\n    };\n    return DefaultKeyValueDiffer;\n}());\n/**\n * @template K, V\n */\nexport { DefaultKeyValueDiffer };\nfunction DefaultKeyValueDiffer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._records;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._mapHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._appendAfter;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._previousMapHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._changesHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._changesTail;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._additionsHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._additionsTail;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._removalsHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._removalsTail;\n}\n/**\n *\n * @template K, V\n */\nvar /**\n *\n * @template K, V\n */\nKeyValueChangeRecord_ = /** @class */ (function () {\n    function KeyValueChangeRecord_(key) {\n        this.key = key;\n        this.previousValue = null;\n        this.currentValue = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextChanged = null;\n    }\n    return KeyValueChangeRecord_;\n}());\nfunction KeyValueChangeRecord__tsickle_Closure_declarations() {\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.previousValue;\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.currentValue;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextPrevious;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._next;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._prev;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextAdded;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextChanged;\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.key;\n}\n//# sourceMappingURL=default_keyvalue_differ.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional, SkipSelf } from '../../di/metadata';\n/**\n * A strategy for tracking changes over time to an iterable. Used by {\\@link NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n *\n * @record\n * @template V\n */\nexport function IterableDiffer() { }\nfunction IterableDiffer_tsickle_Closure_declarations() {\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * \\@param object containing the new value.\n     * \\@return an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     * @type {?}\n     */\n    IterableDiffer.prototype.diff;\n}\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n *\n * @record\n * @template V\n */\nexport function IterableChanges() { }\nfunction IterableChanges_tsickle_Closure_declarations() {\n    /**\n     * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n     * to each item.\n     * @type {?}\n     */\n    IterableChanges.prototype.forEachItem;\n    /**\n     * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n     * new `Iterable`.\n     *\n     * NOTE: These are not necessarily the actual operations which were applied to the original\n     * `Iterable`, rather these are a set of computed operations which may not be the same as the\n     * ones applied.\n     *\n     * \\@param record A change which needs to be applied\n     * \\@param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n     *        original `Iterable` location, where as `previousIndex` refers to the transient location\n     *        of the item, after applying the operations up to this point.\n     * \\@param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n     *        original `Iterable` location, where as `currentIndex` refers to the transient location\n     *        of the item, after applying the operations up to this point.\n     * @type {?}\n     */\n    IterableChanges.prototype.forEachOperation;\n    /**\n     * Iterate over changes in the order of original `Iterable` showing where the original items\n     * have moved.\n     * @type {?}\n     */\n    IterableChanges.prototype.forEachPreviousItem;\n    /**\n     * Iterate over all added items.\n     * @type {?}\n     */\n    IterableChanges.prototype.forEachAddedItem;\n    /**\n     * Iterate over all moved items.\n     * @type {?}\n     */\n    IterableChanges.prototype.forEachMovedItem;\n    /**\n     * Iterate over all removed items.\n     * @type {?}\n     */\n    IterableChanges.prototype.forEachRemovedItem;\n    /**\n     * Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n     * changed.\n     * @type {?}\n     */\n    IterableChanges.prototype.forEachIdentityChange;\n}\n/**\n * Record representing the item change information.\n *\n *\n * @record\n * @template V\n */\nexport function IterableChangeRecord() { }\nfunction IterableChangeRecord_tsickle_Closure_declarations() {\n    /**\n     * Current index of the item in `Iterable` or null if removed.\n     * @type {?}\n     */\n    IterableChangeRecord.prototype.currentIndex;\n    /**\n     * Previous index of the item in `Iterable` or null if added.\n     * @type {?}\n     */\n    IterableChangeRecord.prototype.previousIndex;\n    /**\n     * The item.\n     * @type {?}\n     */\n    IterableChangeRecord.prototype.item;\n    /**\n     * Track by identity as computed by the `TrackByFunction`.\n     * @type {?}\n     */\n    IterableChangeRecord.prototype.trackById;\n}\n/**\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\n * @record\n * @template V\n */\nexport function CollectionChangeRecord() { }\nfunction CollectionChangeRecord_tsickle_Closure_declarations() {\n}\n/**\n * An optional function passed into {\\@link NgForOf} that defines how to track\n * items in an iterable (e.g. fby index or id)\n *\n *\n * @record\n * @template T\n */\nexport function TrackByFunction() { }\nfunction TrackByFunction_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (index: number, item: T): any;\n    */\n}\n/**\n * Provides a factory for {\\@link IterableDiffer}.\n *\n *\n * @record\n */\nexport function IterableDifferFactory() { }\nfunction IterableDifferFactory_tsickle_Closure_declarations() {\n    /** @type {?} */\n    IterableDifferFactory.prototype.supports;\n    /** @type {?} */\n    IterableDifferFactory.prototype.create;\n}\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n */\nvar /**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n */\nIterableDiffers = /** @class */ (function () {\n    function IterableDiffers(factories) {\n        this.factories = factories;\n    }\n    /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    IterableDiffers.create = /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (factories, parent) {\n        if (parent != null) {\n            var /** @type {?} */ copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new IterableDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\n     * {@link IterableDiffers} instance.\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link IterableDiffer} available.\n     *\n     * ### Example\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ### Example\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    IterableDiffers.extend = /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ### Example\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    function (factories) {\n        return {\n            provide: IterableDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                    // to\n                    // bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\n                }\n                return IterableDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    IterableDiffers.prototype.find = /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    function (iterable) {\n        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });\n        if (factory != null) {\n            return factory;\n        }\n        else {\n            throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n        }\n    };\n    return IterableDiffers;\n}());\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n */\nexport { IterableDiffers };\nfunction IterableDiffers_tsickle_Closure_declarations() {\n    /**\n     * @deprecated v4.0.0 - Should be private\n     * @type {?}\n     */\n    IterableDiffers.prototype.factories;\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n//# sourceMappingURL=iterable_differs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional, SkipSelf } from '../../di';\n/**\n * A differ that tracks changes made to an object over time.\n *\n *\n * @record\n * @template K, V\n */\nexport function KeyValueDiffer() { }\nfunction KeyValueDiffer_tsickle_Closure_declarations() {\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * \\@param object containing the new value.\n     * \\@return an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     * @type {?}\n     */\n    KeyValueDiffer.prototype.diff;\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * \\@param object containing the new value.\n     * \\@return an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     * @type {?}\n     */\n    KeyValueDiffer.prototype.diff;\n}\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n *\n * @record\n * @template K, V\n */\nexport function KeyValueChanges() { }\nfunction KeyValueChanges_tsickle_Closure_declarations() {\n    /**\n     * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n     * to each item.\n     * @type {?}\n     */\n    KeyValueChanges.prototype.forEachItem;\n    /**\n     * Iterate over changes in the order of original Map showing where the original items\n     * have moved.\n     * @type {?}\n     */\n    KeyValueChanges.prototype.forEachPreviousItem;\n    /**\n     * Iterate over all keys for which values have changed.\n     * @type {?}\n     */\n    KeyValueChanges.prototype.forEachChangedItem;\n    /**\n     * Iterate over all added items.\n     * @type {?}\n     */\n    KeyValueChanges.prototype.forEachAddedItem;\n    /**\n     * Iterate over all removed items.\n     * @type {?}\n     */\n    KeyValueChanges.prototype.forEachRemovedItem;\n}\n/**\n * Record representing the item change information.\n *\n *\n * @record\n * @template K, V\n */\nexport function KeyValueChangeRecord() { }\nfunction KeyValueChangeRecord_tsickle_Closure_declarations() {\n    /**\n     * Current key in the Map.\n     * @type {?}\n     */\n    KeyValueChangeRecord.prototype.key;\n    /**\n     * Current value for the key or `null` if removed.\n     * @type {?}\n     */\n    KeyValueChangeRecord.prototype.currentValue;\n    /**\n     * Previous value for the key or `null` if added.\n     * @type {?}\n     */\n    KeyValueChangeRecord.prototype.previousValue;\n}\n/**\n * Provides a factory for {\\@link KeyValueDiffer}.\n *\n *\n * @record\n */\nexport function KeyValueDifferFactory() { }\nfunction KeyValueDifferFactory_tsickle_Closure_declarations() {\n    /**\n     * Test to see if the differ knows how to diff this kind of object.\n     * @type {?}\n     */\n    KeyValueDifferFactory.prototype.supports;\n    /**\n     * Create a `KeyValueDiffer`.\n     * @type {?}\n     */\n    KeyValueDifferFactory.prototype.create;\n}\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n */\nvar /**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n */\nKeyValueDiffers = /** @class */ (function () {\n    function KeyValueDiffers(factories) {\n        this.factories = factories;\n    }\n    /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    KeyValueDiffers.create = /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (factories, parent) {\n        if (parent) {\n            var /** @type {?} */ copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new KeyValueDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n     * {@link KeyValueDiffers} instance.\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\n     *\n     * ### Example\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ### Example\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    KeyValueDiffers.extend = /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ### Example\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    function (factories) {\n        return {\n            provide: KeyValueDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                    // to bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                }\n                return KeyValueDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    /**\n     * @param {?} kv\n     * @return {?}\n     */\n    KeyValueDiffers.prototype.find = /**\n     * @param {?} kv\n     * @return {?}\n     */\n    function (kv) {\n        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });\n        if (factory) {\n            return factory;\n        }\n        throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n    };\n    return KeyValueDiffers;\n}());\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n */\nexport { KeyValueDiffers };\nfunction KeyValueDiffers_tsickle_Closure_declarations() {\n    /**\n     * @deprecated v4.0.0 - Should be private.\n     * @type {?}\n     */\n    KeyValueDiffers.prototype.factories;\n}\n//# sourceMappingURL=keyvalue_differs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DefaultIterableDifferFactory } from './differs/default_iterable_differ';\nimport { DefaultKeyValueDifferFactory } from './differs/default_keyvalue_differ';\nimport { IterableDiffers } from './differs/iterable_differs';\nimport { KeyValueDiffers } from './differs/keyvalue_differs';\nexport { SimpleChange, WrappedValue, devModeEqual } from './change_detection_util';\nexport { ChangeDetectorRef } from './change_detector_ref';\nexport { ChangeDetectionStrategy, ChangeDetectorStatus, isDefaultChangeDetectionStrategy } from './constants';\nexport { DefaultIterableDifferFactory } from './differs/default_iterable_differ';\nexport { DefaultIterableDiffer } from './differs/default_iterable_differ';\nexport { DefaultKeyValueDifferFactory } from './differs/default_keyvalue_differ';\nexport { IterableDiffers } from './differs/iterable_differs';\nexport { KeyValueDiffers } from './differs/keyvalue_differs';\n/**\n * Structural diffing for `Object`s and `Map`s.\n */\nvar /** @type {?} */ keyValDiff = [new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n */\nvar /** @type {?} */ iterableDiff = [new DefaultIterableDifferFactory()];\nexport var /** @type {?} */ defaultIterableDiffers = new IterableDiffers(iterableDiff);\nexport var /** @type {?} */ defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n//# sourceMappingURL=change_detection.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationInitStatus } from './application_init';\nimport { ApplicationRef } from './application_ref';\nimport { APP_ID_RANDOM_PROVIDER } from './application_tokens';\nimport { IterableDiffers, KeyValueDiffers, defaultIterableDiffers, defaultKeyValueDiffers } from './change_detection/change_detection';\nimport { Inject, Optional, SkipSelf } from './di/metadata';\nimport { LOCALE_ID } from './i18n/tokens';\nimport { Compiler } from './linker/compiler';\nimport { NgModule } from './metadata';\n/**\n * @return {?}\n */\nexport function _iterableDiffersFactory() {\n    return defaultIterableDiffers;\n}\n/**\n * @return {?}\n */\nexport function _keyValueDiffersFactory() {\n    return defaultKeyValueDiffers;\n}\n/**\n * @param {?=} locale\n * @return {?}\n */\nexport function _localeFactory(locale) {\n    return locale || 'en-US';\n}\n/**\n * This module includes the providers of \\@angular/core that are needed\n * to bootstrap components via `ApplicationRef`.\n *\n * \\@experimental\n */\nvar ApplicationModule = /** @class */ (function () {\n    // Inject ApplicationRef to make it eager...\n    function ApplicationModule(appRef) {\n    }\n    ApplicationModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        ApplicationRef,\n                        ApplicationInitStatus,\n                        Compiler,\n                        APP_ID_RANDOM_PROVIDER,\n                        { provide: IterableDiffers, useFactory: _iterableDiffersFactory },\n                        { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },\n                        {\n                            provide: LOCALE_ID,\n                            useFactory: _localeFactory,\n                            deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n                        },\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    ApplicationModule.ctorParameters = function () { return [\n        { type: ApplicationRef, },\n    ]; };\n    return ApplicationModule;\n}());\nexport { ApplicationModule };\nfunction ApplicationModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    ApplicationModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    ApplicationModule.ctorParameters;\n}\n//# sourceMappingURL=application_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nvar /**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nInertBodyHelper = /** @class */ (function () {\n    function InertBodyHelper(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        this.inertBodyElement = this.inertDocument.body;\n        if (this.inertBodyElement == null) {\n            // usually there should be only one body element in the document, but IE doesn't have any, so\n            // we need to create one.\n            var /** @type {?} */ inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            this.inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(this.inertBodyElement);\n        }\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n            // so use the XHR strategy.\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\n            return;\n        }\n        this.inertBodyElement.innerHTML =\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n            // so use the DOMParser strategy, if it is available.\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n            // fall through to the default strategy below.\n            if (isDOMParserAvailable()) {\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                return;\n            }\n        }\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n    }\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_XHR = /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            html = encodeURI(html);\n        }\n        catch (/** @type {?} */ e) {\n            return null;\n        }\n        var /** @type {?} */ xhr = new XMLHttpRequest();\n        xhr.responseType = 'document';\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n        xhr.send(null);\n        var /** @type {?} */ body = xhr.response.body;\n        body.removeChild(/** @type {?} */ ((body.firstChild)));\n        return body;\n    };\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_DOMParser = /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            var /** @type {?} */ body = /** @type {?} */ (new (/** @type {?} */ (window))\n                .DOMParser()\n                .parseFromString(html, 'text/html')\n                .body);\n            body.removeChild(/** @type {?} */ ((body.firstChild)));\n            return body;\n        }\n        catch (/** @type {?} */ e) {\n            return null;\n        }\n    };\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_InertDocument = /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        // Prefer using <template> element if supported.\n        var /** @type {?} */ templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = html;\n            return templateEl;\n        }\n        this.inertBodyElement.innerHTML = html;\n        // Support: IE 9-11 only\n        // strip custom-namespaced attributes on IE<=11\n        if ((/** @type {?} */ (this.defaultDoc)).documentMode) {\n            this.stripCustomNsAttrs(this.inertBodyElement);\n        }\n        return this.inertBodyElement;\n    };\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @param {?} el\n     * @return {?}\n     */\n    InertBodyHelper.prototype.stripCustomNsAttrs = /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        var /** @type {?} */ elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (var /** @type {?} */ i = elAttrs.length - 1; 0 < i; i--) {\n            var /** @type {?} */ attrib = elAttrs.item(i);\n            var /** @type {?} */ attrName = attrib.name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        var /** @type {?} */ childNode = el.firstChild;\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs(/** @type {?} */ (childNode));\n            childNode = childNode.nextSibling;\n        }\n    };\n    return InertBodyHelper;\n}());\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nexport { InertBodyHelper };\nfunction InertBodyHelper_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InertBodyHelper.prototype.inertBodyElement;\n    /** @type {?} */\n    InertBodyHelper.prototype.inertDocument;\n    /**\n     * Get an inert DOM element containing DOM created from the dirty HTML string provided.\n     * The implementation of this is determined in the constructor, when the class is instantiated.\n     * @type {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement;\n    /** @type {?} */\n    InertBodyHelper.prototype.defaultDoc;\n}\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n * @return {?}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!(/** @type {?} */ (window)).DOMParser;\n    }\n    catch (/** @type {?} */ e) {\n        return false;\n    }\n}\n//# sourceMappingURL=inert_body.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../application_ref';\nimport { InertBodyHelper } from './inert_body';\nimport { _sanitizeUrl, sanitizeSrcset } from './url_sanitizer';\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags) {\n    var /** @type {?} */ res = {};\n    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {\n        var t = _a[_i];\n        res[t] = true;\n    }\n    return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge() {\n    var sets = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sets[_i] = arguments[_i];\n    }\n    var /** @type {?} */ res = {};\n    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {\n        var s = sets_1[_a];\n        for (var /** @type {?} */ v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nvar /** @type {?} */ VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nvar /** @type {?} */ OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nvar /** @type {?} */ OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nvar /** @type {?} */ OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\nvar /** @type {?} */ BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\nvar /** @type {?} */ INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nvar /** @type {?} */ VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\nvar /** @type {?} */ URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n// Attributes that have special href set hence need to be sanitized\nvar /** @type {?} */ SRCSET_ATTRS = tagSet('srcset');\nvar /** @type {?} */ HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\nvar /** @type {?} */ VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nvar /**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nSanitizingHtmlSerializer = /** @class */ (function () {\n    function SanitizingHtmlSerializer() {\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.sanitizeChildren = /**\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n        // However this code never accesses properties off of `document` before deleting its contents\n        // again, so it shouldn't be vulnerable to DOM clobbering.\n        var /** @type {?} */ current = /** @type {?} */ ((el.firstChild));\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                this.startElement(/** @type {?} */ (current));\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars(/** @type {?} */ ((current.nodeValue)));\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (current.firstChild) {\n                current = /** @type {?} */ ((current.firstChild));\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement(/** @type {?} */ (current));\n                }\n                var /** @type {?} */ next = this.checkClobberedElement(current, /** @type {?} */ ((current.nextSibling)));\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, /** @type {?} */ ((current.parentNode)));\n            }\n        }\n        return this.buf.join('');\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.startElement = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        var /** @type {?} */ tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return;\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        var /** @type {?} */ elAttrs = element.attributes;\n        for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {\n            var /** @type {?} */ elAttr = elAttrs.item(i);\n            var /** @type {?} */ attrName = elAttr.name;\n            var /** @type {?} */ lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            var /** @type {?} */ value = elAttr.value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n    };\n    /**\n     * @param {?} current\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.endElement = /**\n     * @param {?} current\n     * @return {?}\n     */\n    function (current) {\n        var /** @type {?} */ tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.chars = /**\n     * @param {?} chars\n     * @return {?}\n     */\n    function (chars) { this.buf.push(encodeEntities(chars)); };\n    /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.checkClobberedElement = /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    function (node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(\"Failed to sanitize html because the element is clobbered: \" + ((/** @type {?} */ (node))).outerHTML);\n        }\n        return nextNode;\n    };\n    return SanitizingHtmlSerializer;\n}());\nfunction SanitizingHtmlSerializer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SanitizingHtmlSerializer.prototype.sanitizedSomething;\n    /** @type {?} */\n    SanitizingHtmlSerializer.prototype.buf;\n}\n// Regular Expressions for parsing tags and attributes\nvar /** @type {?} */ SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nvar /** @type {?} */ NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        var /** @type {?} */ hi = match.charCodeAt(0);\n        var /** @type {?} */ low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\nvar /** @type {?} */ inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nexport function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    var /** @type {?} */ inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n        var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n        var /** @type {?} */ mXSSAttempts = 5;\n        var /** @type {?} */ parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = /** @type {?} */ ((inertBodyElement)).innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();\n        var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(/** @type {?} */ (getTemplateContent(/** @type {?} */ ((inertBodyElement)))) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\n        }\n        return safeHtml;\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            var /** @type {?} */ parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent_1.firstChild) {\n                parent_1.removeChild(parent_1.firstChild);\n            }\n        }\n    }\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction getTemplateContent(el) {\n    return 'content' in (/** @type {?} */ (el /** Microsoft/TypeScript#21517 */) /** Microsoft/TypeScript#21517 */) && isTemplateElement(el) ?\n        el.content :\n        null;\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n//# sourceMappingURL=html_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar SecurityContext = {\n    NONE: 0,\n    HTML: 1,\n    STYLE: 2,\n    SCRIPT: 3,\n    URL: 4,\n    RESOURCE_URL: 5,\n};\nexport { SecurityContext };\nSecurityContext[SecurityContext.NONE] = \"NONE\";\nSecurityContext[SecurityContext.HTML] = \"HTML\";\nSecurityContext[SecurityContext.STYLE] = \"STYLE\";\nSecurityContext[SecurityContext.SCRIPT] = \"SCRIPT\";\nSecurityContext[SecurityContext.URL] = \"URL\";\nSecurityContext[SecurityContext.RESOURCE_URL] = \"RESOURCE_URL\";\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n *\n * @abstract\n */\nvar /**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n *\n * @abstract\n */\nSanitizer = /** @class */ (function () {\n    function Sanitizer() {\n    }\n    return Sanitizer;\n}());\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n *\n * @abstract\n */\nexport { Sanitizer };\nfunction Sanitizer_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} context\n     * @param {?} value\n     * @return {?}\n     */\n    Sanitizer.prototype.sanitize = function (context, value) { };\n}\n//# sourceMappingURL=security.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// unsupported: template constraints.\n/**\n * Factory for ViewDefinitions/NgModuleDefinitions.\n * We use a function so we can reexeute it in case an error happens and use the given logger\n * function to log the error from the definition of the node, which is shown in all browser\n * logs.\n * @record\n * @template D\n */\nexport function DefinitionFactory() { }\nfunction DefinitionFactory_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (logger: NodeLogger): D;\n    */\n}\n/**\n * Function to call console.error at the right source location. This is an indirection\n * via another function as browser will log the location that actually called\n * `console.error`.\n * @record\n */\nexport function NodeLogger() { }\nfunction NodeLogger_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (): () => void;\n    */\n}\n// unsupported: template constraints.\n/**\n * @record\n * @template DF\n */\nexport function Definition() { }\nfunction Definition_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Definition.prototype.factory;\n}\n/**\n * @record\n */\nexport function NgModuleDefinition() { }\nfunction NgModuleDefinition_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleDefinition.prototype.providers;\n    /** @type {?} */\n    NgModuleDefinition.prototype.providersByKey;\n    /** @type {?} */\n    NgModuleDefinition.prototype.modules;\n    /** @type {?} */\n    NgModuleDefinition.prototype.isRoot;\n}\n/**\n * @record\n */\nexport function NgModuleDefinitionFactory() { }\nfunction NgModuleDefinitionFactory_tsickle_Closure_declarations() {\n}\n/**\n * @record\n */\nexport function ViewDefinition() { }\nfunction ViewDefinition_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewDefinition.prototype.flags;\n    /** @type {?} */\n    ViewDefinition.prototype.updateDirectives;\n    /** @type {?} */\n    ViewDefinition.prototype.updateRenderer;\n    /** @type {?} */\n    ViewDefinition.prototype.handleEvent;\n    /**\n     * Order: Depth first.\n     * Especially providers are before elements / anchors.\n     * @type {?}\n     */\n    ViewDefinition.prototype.nodes;\n    /**\n     * aggregated NodeFlags for all nodes *\n     * @type {?}\n     */\n    ViewDefinition.prototype.nodeFlags;\n    /** @type {?} */\n    ViewDefinition.prototype.rootNodeFlags;\n    /** @type {?} */\n    ViewDefinition.prototype.lastRenderRootNode;\n    /** @type {?} */\n    ViewDefinition.prototype.bindingCount;\n    /** @type {?} */\n    ViewDefinition.prototype.outputCount;\n    /**\n     * Binary or of all query ids that are matched by one of the nodes.\n     * This includes query ids from templates as well.\n     * Used as a bloom filter.\n     * @type {?}\n     */\n    ViewDefinition.prototype.nodeMatchedQueries;\n}\n/**\n * @record\n */\nexport function ViewDefinitionFactory() { }\nfunction ViewDefinitionFactory_tsickle_Closure_declarations() {\n}\n/**\n * @record\n */\nexport function ViewUpdateFn() { }\nfunction ViewUpdateFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (check: NodeCheckFn, view: ViewData): void;\n    */\n}\n/**\n * @record\n */\nexport function NodeCheckFn() { }\nfunction NodeCheckFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (view: ViewData, nodeIndex: number, argStyle: ArgumentType.Dynamic, values: any[]): any;\n    */\n    /* TODO: handle strange member:\n    (view: ViewData, nodeIndex: number, argStyle: ArgumentType.Inline, v0?: any, v1?: any, v2?: any,\n       v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): any;\n    */\n}\n/** @enum {number} */\nvar ArgumentType = { Inline: 0, Dynamic: 1, };\nexport { ArgumentType };\n/**\n * @record\n */\nexport function ViewHandleEventFn() { }\nfunction ViewHandleEventFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (view: ViewData, nodeIndex: number, eventName: string, event: any): boolean;\n    */\n}\n/** @enum {number} */\nvar ViewFlags = {\n    None: 0,\n    OnPush: 2,\n};\nexport { ViewFlags };\n/**\n * A node definition in the view.\n *\n * Note: We use one type for all nodes so that loops that loop over all nodes\n * of a ViewDefinition stay monomorphic!\n * @record\n */\nexport function NodeDef() { }\nfunction NodeDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NodeDef.prototype.flags;\n    /** @type {?} */\n    NodeDef.prototype.nodeIndex;\n    /** @type {?} */\n    NodeDef.prototype.checkIndex;\n    /** @type {?} */\n    NodeDef.prototype.parent;\n    /** @type {?} */\n    NodeDef.prototype.renderParent;\n    /**\n     * this is checked against NgContentDef.index to find matched nodes\n     * @type {?}\n     */\n    NodeDef.prototype.ngContentIndex;\n    /**\n     * number of transitive children\n     * @type {?}\n     */\n    NodeDef.prototype.childCount;\n    /**\n     * aggregated NodeFlags for all transitive children (does not include self) *\n     * @type {?}\n     */\n    NodeDef.prototype.childFlags;\n    /**\n     * aggregated NodeFlags for all direct children (does not include self) *\n     * @type {?}\n     */\n    NodeDef.prototype.directChildFlags;\n    /** @type {?} */\n    NodeDef.prototype.bindingIndex;\n    /** @type {?} */\n    NodeDef.prototype.bindings;\n    /** @type {?} */\n    NodeDef.prototype.bindingFlags;\n    /** @type {?} */\n    NodeDef.prototype.outputIndex;\n    /** @type {?} */\n    NodeDef.prototype.outputs;\n    /**\n     * references that the user placed on the element\n     * @type {?}\n     */\n    NodeDef.prototype.references;\n    /**\n     * ids and value types of all queries that are matched by this node.\n     * @type {?}\n     */\n    NodeDef.prototype.matchedQueries;\n    /**\n     * Binary or of all matched query ids of this node.\n     * @type {?}\n     */\n    NodeDef.prototype.matchedQueryIds;\n    /**\n     * Binary or of all query ids that are matched by one of the children.\n     * This includes query ids from templates as well.\n     * Used as a bloom filter.\n     * @type {?}\n     */\n    NodeDef.prototype.childMatchedQueries;\n    /** @type {?} */\n    NodeDef.prototype.element;\n    /** @type {?} */\n    NodeDef.prototype.provider;\n    /** @type {?} */\n    NodeDef.prototype.text;\n    /** @type {?} */\n    NodeDef.prototype.query;\n    /** @type {?} */\n    NodeDef.prototype.ngContent;\n}\n/** @enum {number} */\nvar NodeFlags = {\n    None: 0,\n    TypeElement: 1,\n    TypeText: 2,\n    ProjectedTemplate: 4,\n    CatRenderNode: 3,\n    TypeNgContent: 8,\n    TypePipe: 16,\n    TypePureArray: 32,\n    TypePureObject: 64,\n    TypePurePipe: 128,\n    CatPureExpression: 224,\n    TypeValueProvider: 256,\n    TypeClassProvider: 512,\n    TypeFactoryProvider: 1024,\n    TypeUseExistingProvider: 2048,\n    LazyProvider: 4096,\n    PrivateProvider: 8192,\n    TypeDirective: 16384,\n    Component: 32768,\n    CatProviderNoDirective: 3840,\n    CatProvider: 20224,\n    OnInit: 65536,\n    OnDestroy: 131072,\n    DoCheck: 262144,\n    OnChanges: 524288,\n    AfterContentInit: 1048576,\n    AfterContentChecked: 2097152,\n    AfterViewInit: 4194304,\n    AfterViewChecked: 8388608,\n    EmbeddedViews: 16777216,\n    ComponentView: 33554432,\n    TypeContentQuery: 67108864,\n    TypeViewQuery: 134217728,\n    StaticQuery: 268435456,\n    DynamicQuery: 536870912,\n    TypeNgModule: 1073741824,\n    CatQuery: 201326592,\n    // mutually exclusive values...\n    Types: 201347067,\n};\nexport { NodeFlags };\n/**\n * @record\n */\nexport function BindingDef() { }\nfunction BindingDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BindingDef.prototype.flags;\n    /** @type {?} */\n    BindingDef.prototype.ns;\n    /** @type {?} */\n    BindingDef.prototype.name;\n    /** @type {?} */\n    BindingDef.prototype.nonMinifiedName;\n    /** @type {?} */\n    BindingDef.prototype.securityContext;\n    /** @type {?} */\n    BindingDef.prototype.suffix;\n}\n/** @enum {number} */\nvar BindingFlags = {\n    TypeElementAttribute: 1,\n    TypeElementClass: 2,\n    TypeElementStyle: 4,\n    TypeProperty: 8,\n    SyntheticProperty: 16,\n    SyntheticHostProperty: 32,\n    CatSyntheticProperty: 48,\n    // mutually exclusive values...\n    Types: 15,\n};\nexport { BindingFlags };\n/**\n * @record\n */\nexport function OutputDef() { }\nfunction OutputDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    OutputDef.prototype.type;\n    /** @type {?} */\n    OutputDef.prototype.target;\n    /** @type {?} */\n    OutputDef.prototype.eventName;\n    /** @type {?} */\n    OutputDef.prototype.propName;\n}\n/** @enum {number} */\nvar OutputType = { ElementOutput: 0, DirectiveOutput: 1, };\nexport { OutputType };\n/** @enum {number} */\nvar QueryValueType = {\n    ElementRef: 0,\n    RenderElement: 1,\n    TemplateRef: 2,\n    ViewContainerRef: 3,\n    Provider: 4,\n};\nexport { QueryValueType };\n/**\n * @record\n */\nexport function ElementDef() { }\nfunction ElementDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElementDef.prototype.name;\n    /** @type {?} */\n    ElementDef.prototype.ns;\n    /**\n     * ns, name, value\n     * @type {?}\n     */\n    ElementDef.prototype.attrs;\n    /** @type {?} */\n    ElementDef.prototype.template;\n    /** @type {?} */\n    ElementDef.prototype.componentProvider;\n    /** @type {?} */\n    ElementDef.prototype.componentRendererType;\n    /** @type {?} */\n    ElementDef.prototype.componentView;\n    /**\n     * visible public providers for DI in the view,\n     * as see from this element. This does not include private providers.\n     * @type {?}\n     */\n    ElementDef.prototype.publicProviders;\n    /**\n     * same as visiblePublicProviders, but also includes private providers\n     * that are located on this element.\n     * @type {?}\n     */\n    ElementDef.prototype.allProviders;\n    /** @type {?} */\n    ElementDef.prototype.handleEvent;\n}\n/**\n * @record\n */\nexport function ElementHandleEventFn() { }\nfunction ElementHandleEventFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (view: ViewData, eventName: string, event: any): boolean;\n    */\n}\n/**\n * @record\n */\nexport function ProviderDef() { }\nfunction ProviderDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProviderDef.prototype.token;\n    /** @type {?} */\n    ProviderDef.prototype.value;\n    /** @type {?} */\n    ProviderDef.prototype.deps;\n}\n/**\n * @record\n */\nexport function NgModuleProviderDef() { }\nfunction NgModuleProviderDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleProviderDef.prototype.flags;\n    /** @type {?} */\n    NgModuleProviderDef.prototype.index;\n    /** @type {?} */\n    NgModuleProviderDef.prototype.token;\n    /** @type {?} */\n    NgModuleProviderDef.prototype.value;\n    /** @type {?} */\n    NgModuleProviderDef.prototype.deps;\n}\n/**\n * @record\n */\nexport function DepDef() { }\nfunction DepDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DepDef.prototype.flags;\n    /** @type {?} */\n    DepDef.prototype.token;\n    /** @type {?} */\n    DepDef.prototype.tokenKey;\n}\n/** @enum {number} */\nvar DepFlags = {\n    None: 0,\n    SkipSelf: 1,\n    Optional: 2,\n    Self: 4,\n    Value: 8,\n};\nexport { DepFlags };\n/**\n * @record\n */\nexport function TextDef() { }\nfunction TextDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TextDef.prototype.prefix;\n}\n/**\n * @record\n */\nexport function QueryDef() { }\nfunction QueryDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    QueryDef.prototype.id;\n    /** @type {?} */\n    QueryDef.prototype.filterId;\n    /** @type {?} */\n    QueryDef.prototype.bindings;\n}\n/**\n * @record\n */\nexport function QueryBindingDef() { }\nfunction QueryBindingDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    QueryBindingDef.prototype.propName;\n    /** @type {?} */\n    QueryBindingDef.prototype.bindingType;\n}\n/** @enum {number} */\nvar QueryBindingType = { First: 0, All: 1, };\nexport { QueryBindingType };\n/**\n * @record\n */\nexport function NgContentDef() { }\nfunction NgContentDef_tsickle_Closure_declarations() {\n    /**\n     * this index is checked against NodeDef.ngContentIndex to find the nodes\n     * that are matched by this ng-content.\n     * Note that a NodeDef with an ng-content can be reprojected, i.e.\n     * have a ngContentIndex on its own.\n     * @type {?}\n     */\n    NgContentDef.prototype.index;\n}\n/**\n * @record\n */\nexport function NgModuleData() { }\nfunction NgModuleData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleData.prototype._def;\n    /** @type {?} */\n    NgModuleData.prototype._parent;\n    /** @type {?} */\n    NgModuleData.prototype._providers;\n}\n/**\n * View instance data.\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ViewData() { }\nfunction ViewData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewData.prototype.def;\n    /** @type {?} */\n    ViewData.prototype.root;\n    /** @type {?} */\n    ViewData.prototype.renderer;\n    /** @type {?} */\n    ViewData.prototype.parentNodeDef;\n    /** @type {?} */\n    ViewData.prototype.parent;\n    /** @type {?} */\n    ViewData.prototype.viewContainerParent;\n    /** @type {?} */\n    ViewData.prototype.component;\n    /** @type {?} */\n    ViewData.prototype.context;\n    /** @type {?} */\n    ViewData.prototype.nodes;\n    /** @type {?} */\n    ViewData.prototype.state;\n    /** @type {?} */\n    ViewData.prototype.oldValues;\n    /** @type {?} */\n    ViewData.prototype.disposables;\n    /** @type {?} */\n    ViewData.prototype.initIndex;\n}\n/** @enum {number} */\nvar ViewState = {\n    BeforeFirstCheck: 1,\n    FirstCheck: 2,\n    Attached: 4,\n    ChecksEnabled: 8,\n    IsProjectedView: 16,\n    CheckProjectedView: 32,\n    CheckProjectedViews: 64,\n    Destroyed: 128,\n    // InitState Uses 3 bits\n    InitState_Mask: 1792,\n    InitState_BeforeInit: 0,\n    InitState_CallingOnInit: 256,\n    InitState_CallingAfterContentInit: 512,\n    InitState_CallingAfterViewInit: 768,\n    InitState_AfterInit: 1024,\n    CatDetectChanges: 12,\n    CatInit: 13,\n};\nexport { ViewState };\n/**\n * @param {?} view\n * @param {?} priorInitState\n * @param {?} newInitState\n * @return {?}\n */\nexport function shiftInitState(view, priorInitState, newInitState) {\n    // Only update the InitState if we are currently in the prior state.\n    // For example, only move into CallingInit if we are in BeforeInit. Only\n    // move into CallingContentInit if we are in CallingInit. Normally this will\n    // always be true because of how checkCycle is called in checkAndUpdateView.\n    // However, if checkAndUpdateView is called recursively or if an exception is\n    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\n    // from the beginning. This ensures the state is monotonically increasing,\n    // terminating in the AfterInit state, which ensures the Init methods are called\n    // at least once and only once.\n    var /** @type {?} */ state = view.state;\n    var /** @type {?} */ initState = state & 1792 /* InitState_Mask */;\n    if (initState === priorInitState) {\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n        view.initIndex = -1;\n        return true;\n    }\n    return initState === newInitState;\n}\n/**\n * @param {?} view\n * @param {?} initState\n * @param {?} index\n * @return {?}\n */\nexport function shouldCallLifecycleInitHook(view, initState, index) {\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n        view.initIndex = index + 1;\n        return true;\n    }\n    return false;\n}\n/**\n * @record\n */\nexport function DisposableFn() { }\nfunction DisposableFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (): void;\n    */\n}\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nvar /**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nNodeData = /** @class */ (function () {\n    function NodeData() {\n    }\n    return NodeData;\n}());\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nexport { NodeData };\nfunction NodeData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NodeData.prototype.__brand;\n}\n/**\n * Data for an instantiated NodeType.Text.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function TextData() { }\nfunction TextData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TextData.prototype.renderText;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asTextData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.Element.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ElementData() { }\nfunction ElementData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElementData.prototype.renderElement;\n    /** @type {?} */\n    ElementData.prototype.componentView;\n    /** @type {?} */\n    ElementData.prototype.viewContainer;\n    /** @type {?} */\n    ElementData.prototype.template;\n}\n/**\n * @record\n */\nexport function ViewContainerData() { }\nfunction ViewContainerData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewContainerData.prototype._embeddedViews;\n}\n/**\n * @record\n */\nexport function TemplateData() { }\nfunction TemplateData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateData.prototype._projectedViews;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asElementData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.Provider.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ProviderData() { }\nfunction ProviderData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProviderData.prototype.instance;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asProviderData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.PureExpression.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function PureExpressionData() { }\nfunction PureExpressionData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PureExpressionData.prototype.value;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asPureExpressionData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asQueryList(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * @record\n */\nexport function RootData() { }\nfunction RootData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RootData.prototype.injector;\n    /** @type {?} */\n    RootData.prototype.ngModule;\n    /** @type {?} */\n    RootData.prototype.projectableNodes;\n    /** @type {?} */\n    RootData.prototype.selectorOrNode;\n    /** @type {?} */\n    RootData.prototype.renderer;\n    /** @type {?} */\n    RootData.prototype.rendererFactory;\n    /** @type {?} */\n    RootData.prototype.errorHandler;\n    /** @type {?} */\n    RootData.prototype.sanitizer;\n}\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nDebugContext = /** @class */ (function () {\n    function DebugContext() {\n    }\n    return DebugContext;\n}());\n/**\n * @abstract\n */\nexport { DebugContext };\nfunction DebugContext_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.view = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.nodeIndex = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.componentRenderElement = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.renderNode = function () { };\n    /**\n     * @abstract\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    DebugContext.prototype.logError = function (console, values) { };\n}\n/** @enum {number} */\nvar CheckType = { CheckAndUpdate: 0, CheckNoChanges: 1, };\nexport { CheckType };\n/**\n * @record\n */\nexport function ProviderOverride() { }\nfunction ProviderOverride_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProviderOverride.prototype.token;\n    /** @type {?} */\n    ProviderOverride.prototype.flags;\n    /** @type {?} */\n    ProviderOverride.prototype.value;\n    /** @type {?} */\n    ProviderOverride.prototype.deps;\n    /** @type {?} */\n    ProviderOverride.prototype.deprecatedBehavior;\n}\n/**\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n */\nexport var /** @type {?} */ Services = {\n    setCurrentNode: /** @type {?} */ ((undefined)),\n    createRootView: /** @type {?} */ ((undefined)),\n    createEmbeddedView: /** @type {?} */ ((undefined)),\n    createComponentView: /** @type {?} */ ((undefined)),\n    createNgModuleRef: /** @type {?} */ ((undefined)),\n    overrideProvider: /** @type {?} */ ((undefined)),\n    overrideComponentView: /** @type {?} */ ((undefined)),\n    clearOverrides: /** @type {?} */ ((undefined)),\n    checkAndUpdateView: /** @type {?} */ ((undefined)),\n    checkNoChangesView: /** @type {?} */ ((undefined)),\n    destroyView: /** @type {?} */ ((undefined)),\n    resolveDep: /** @type {?} */ ((undefined)),\n    createDebugContext: /** @type {?} */ ((undefined)),\n    handleEvent: /** @type {?} */ ((undefined)),\n    updateDirectives: /** @type {?} */ ((undefined)),\n    updateRenderer: /** @type {?} */ ((undefined)),\n    dirtyParentQueries: /** @type {?} */ ((undefined)),\n};\n//# sourceMappingURL=types.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ERROR_DEBUG_CONTEXT, ERROR_LOGGER, getDebugContext } from '../errors';\n/**\n * @param {?} context\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nexport function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n    var /** @type {?} */ msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n    if (isFirstCheck) {\n        msg +=\n            \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                \" Has it been created in a change detection hook ?\";\n    }\n    return viewDebugError(msg, context);\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nexport function viewWrappedDebugError(err, context) {\n    if (!(err instanceof Error)) {\n        // errors that are not Error instances don't have a stack,\n        // so it is ok to wrap them into a new Error object...\n        err = new Error(err.toString());\n    }\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} msg\n * @param {?} context\n * @return {?}\n */\nexport function viewDebugError(msg, context) {\n    var /** @type {?} */ err = new Error(msg);\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction _addDebugContext(err, context) {\n    (/** @type {?} */ (err))[ERROR_DEBUG_CONTEXT] = context;\n    (/** @type {?} */ (err))[ERROR_LOGGER] = context.logError.bind(context);\n}\n/**\n * @param {?} err\n * @return {?}\n */\nexport function isViewDebugError(err) {\n    return !!getDebugContext(err);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nexport function viewDestroyedError(action) {\n    return new Error(\"ViewDestroyedError: Attempt to use a destroyed view: \" + action);\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WrappedValue, devModeEqual } from '../change_detection/change_detection';\nimport { SOURCE } from '../di/injector';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { looseIdentical, stringify } from '../util';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { Services, asElementData, asTextData } from './types';\nexport var /** @type {?} */ NOOP = function () { };\nvar /** @type {?} */ _tokenKeyCache = new Map();\n/**\n * @param {?} token\n * @return {?}\n */\nexport function tokenKey(token) {\n    var /** @type {?} */ key = _tokenKeyCache.get(token);\n    if (!key) {\n        key = stringify(token) + '_' + _tokenKeyCache.size;\n        _tokenKeyCache.set(token, key);\n    }\n    return key;\n}\n/**\n * @param {?} view\n * @param {?} nodeIdx\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function unwrapValue(view, nodeIdx, bindingIdx, value) {\n    if (WrappedValue.isWrapped(value)) {\n        value = WrappedValue.unwrap(value);\n        var /** @type {?} */ globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n        var /** @type {?} */ oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n    }\n    return value;\n}\nvar /** @type {?} */ UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\nvar /** @type {?} */ EMPTY_RENDERER_TYPE_ID = '$$empty';\n/**\n * @param {?} values\n * @return {?}\n */\nexport function createRendererType2(values) {\n    return {\n        id: UNDEFINED_RENDERER_TYPE_ID,\n        styles: values.styles,\n        encapsulation: values.encapsulation,\n        data: values.data\n    };\n}\nvar /** @type {?} */ _renderCompCount = 0;\n/**\n * @param {?=} type\n * @return {?}\n */\nexport function resolveRendererType2(type) {\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n        // first time we see this RendererType2. Initialize it...\n        var /** @type {?} */ isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n            type.styles.length || Object.keys(type.data).length);\n        if (isFilled) {\n            type.id = \"c\" + _renderCompCount++;\n        }\n        else {\n            type.id = EMPTY_RENDERER_TYPE_ID;\n        }\n    }\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n        type = null;\n    }\n    return type || null;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBinding(view, def, bindingIdx, value) {\n    var /** @type {?} */ oldValues = view.oldValues;\n    if ((view.state & 2 /* FirstCheck */) ||\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkAndUpdateBinding(view, def, bindingIdx, value) {\n    if (checkBinding(view, def, bindingIdx, value)) {\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBindingNoChanges(view, def, bindingIdx, value) {\n    var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n        var /** @type {?} */ bindingName = def.bindings[bindingIdx].name;\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + \": \" + oldValue, bindingName + \": \" + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function markParentViewsForCheck(view) {\n    var /** @type {?} */ currView = view;\n    while (currView) {\n        if (currView.def.flags & 2 /* OnPush */) {\n            currView.state |= 8 /* ChecksEnabled */;\n        }\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} endView\n * @return {?}\n */\nexport function markParentViewsForCheckProjectedViews(view, endView) {\n    var /** @type {?} */ currView = view;\n    while (currView && currView !== endView) {\n        currView.state |= 64 /* CheckProjectedViews */;\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nexport function dispatchEvent(view, nodeIndex, eventName, event) {\n    try {\n        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\n        var /** @type {?} */ startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n            asElementData(view, nodeIndex).componentView :\n            view;\n        markParentViewsForCheck(startView);\n        return Services.handleEvent(view, nodeIndex, eventName, event);\n    }\n    catch (/** @type {?} */ e) {\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n        view.root.errorHandler.handleError(e);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function declaredViewContainer(view) {\n    if (view.parent) {\n        var /** @type {?} */ parentView = view.parent;\n        return asElementData(parentView, /** @type {?} */ ((view.parentNodeDef)).nodeIndex);\n    }\n    return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n * @param {?} view\n * @return {?}\n */\nexport function viewParentEl(view) {\n    var /** @type {?} */ parentView = view.parent;\n    if (parentView) {\n        return /** @type {?} */ ((view.parentNodeDef)).parent;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function renderNode(view, def) {\n    switch (def.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return asElementData(view, def.nodeIndex).renderElement;\n        case 2 /* TypeText */:\n            return asTextData(view, def.nodeIndex).renderText;\n    }\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nexport function elementEventFullName(target, name) {\n    return target ? target + \":\" + name : name;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isComponentView(view) {\n    return !!view.parent && !!(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isEmbeddedView(view) {\n    return !!view.parent && !(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nexport function filterQueryId(queryId) {\n    return 1 << (queryId % 32);\n}\n/**\n * @param {?} matchedQueriesDsl\n * @return {?}\n */\nexport function splitMatchedQueriesDsl(matchedQueriesDsl) {\n    var /** @type {?} */ matchedQueries = {};\n    var /** @type {?} */ matchedQueryIds = 0;\n    var /** @type {?} */ references = {};\n    if (matchedQueriesDsl) {\n        matchedQueriesDsl.forEach(function (_a) {\n            var queryId = _a[0], valueType = _a[1];\n            if (typeof queryId === 'number') {\n                matchedQueries[queryId] = valueType;\n                matchedQueryIds |= filterQueryId(queryId);\n            }\n            else {\n                references[queryId] = valueType;\n            }\n        });\n    }\n    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\n}\n/**\n * @param {?} deps\n * @param {?=} sourceName\n * @return {?}\n */\nexport function splitDepsDsl(deps, sourceName) {\n    return deps.map(function (value) {\n        var /** @type {?} */ token;\n        var /** @type {?} */ flags;\n        if (Array.isArray(value)) {\n            flags = value[0], token = value[1];\n        }\n        else {\n            flags = 0 /* None */;\n            token = value;\n        }\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n        }\n        return { flags: flags, token: token, tokenKey: tokenKey(token) };\n    });\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function getParentRenderElement(view, renderHost, def) {\n    var /** @type {?} */ renderParent = def.renderParent;\n    if (renderParent) {\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n            (/** @type {?} */ ((renderParent.element)).componentRendererType && /** @type {?} */ ((/** @type {?} */ ((renderParent.element)).componentRendererType)).encapsulation === ViewEncapsulation.Native)) {\n            // only children of non components, or children of components with native encapsulation should\n            // be attached.\n            return asElementData(view, /** @type {?} */ ((def.renderParent)).nodeIndex).renderElement;\n        }\n    }\n    else {\n        return renderHost;\n    }\n}\nvar /** @type {?} */ DEFINITION_CACHE = new WeakMap();\n/**\n * @template D\n * @param {?} factory\n * @return {?}\n */\nexport function resolveDefinition(factory) {\n    var /** @type {?} */ value = /** @type {?} */ (((DEFINITION_CACHE.get(factory))));\n    if (!value) {\n        value = factory(function () { return NOOP; });\n        value.factory = factory;\n        DEFINITION_CACHE.set(factory, value);\n    }\n    return value;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function rootRenderNodes(view) {\n    var /** @type {?} */ renderNodes = [];\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n    return renderNodes;\n}\n/** @enum {number} */\nvar RenderNodeAction = { Collect: 0, AppendChild: 1, InsertBefore: 2, RemoveChild: 3, };\nexport { RenderNodeAction };\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n    // We need to re-compute the parent node in case the nodes have been moved around manually\n    if (action === 3 /* RemoveChild */) {\n        parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */ ((view.def.lastRenderRootNode))));\n    }\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n}\n/**\n * @param {?} view\n * @param {?} ngContentIndex\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n    var /** @type {?} */ compView = view;\n    while (compView && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    var /** @type {?} */ hostView = /** @type {?} */ ((compView)).parent;\n    var /** @type {?} */ hostElDef = viewParentEl(/** @type {?} */ ((compView)));\n    var /** @type {?} */ startIndex = /** @type {?} */ ((hostElDef)).nodeIndex + 1;\n    var /** @type {?} */ endIndex = /** @type {?} */ ((hostElDef)).nodeIndex + /** @type {?} */ ((hostElDef)).childCount;\n    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {\n        var /** @type {?} */ nodeDef = /** @type {?} */ ((hostView)).def.nodes[i];\n        if (nodeDef.ngContentIndex === ngContentIndex) {\n            visitRenderNode(/** @type {?} */ ((hostView)), nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n    if (!/** @type {?} */ ((hostView)).parent) {\n        // a root view\n        var /** @type {?} */ projectedNodes = view.root.projectableNodes[ngContentIndex];\n        if (projectedNodes) {\n            for (var /** @type {?} */ i = 0; i < projectedNodes.length; i++) {\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\n        visitProjectedRenderNodes(view, /** @type {?} */ ((nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\n    }\n    else {\n        var /** @type {?} */ rn = renderNode(view, nodeDef);\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n            // Note: we might need to do both actions.\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                var /** @type {?} */ compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n            }\n        }\n        else {\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n        }\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            var /** @type {?} */ embeddedViews = /** @type {?} */ ((asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\n            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n            }\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && !/** @type {?} */ ((nodeDef.element)).name) {\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n    var /** @type {?} */ renderer = view.renderer;\n    switch (action) {\n        case 1 /* AppendChild */:\n            renderer.appendChild(parentNode, renderNode);\n            break;\n        case 2 /* InsertBefore */:\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\n            break;\n        case 3 /* RemoveChild */:\n            renderer.removeChild(parentNode, renderNode);\n            break;\n        case 0 /* Collect */:\n            /** @type {?} */ ((target)).push(renderNode);\n            break;\n    }\n}\nvar /** @type {?} */ NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nexport function splitNamespace(name) {\n    if (name[0] === ':') {\n        var /** @type {?} */ match = /** @type {?} */ ((name.match(NS_PREFIX_RE)));\n        return [match[1], match[2]];\n    }\n    return ['', name];\n}\n/**\n * @param {?} bindings\n * @return {?}\n */\nexport function calcBindingFlags(bindings) {\n    var /** @type {?} */ flags = 0;\n    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {\n        flags |= bindings[i].flags;\n    }\n    return flags;\n}\n/**\n * @param {?} valueCount\n * @param {?} constAndInterp\n * @return {?}\n */\nexport function interpolate(valueCount, constAndInterp) {\n    var /** @type {?} */ result = '';\n    for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n    }\n    return result + constAndInterp[valueCount * 2];\n}\n/**\n * @param {?} valueCount\n * @param {?} c0\n * @param {?} a1\n * @param {?} c1\n * @param {?=} a2\n * @param {?=} c2\n * @param {?=} a3\n * @param {?=} c3\n * @param {?=} a4\n * @param {?=} c4\n * @param {?=} a5\n * @param {?=} c5\n * @param {?=} a6\n * @param {?=} c6\n * @param {?=} a7\n * @param {?=} c7\n * @param {?=} a8\n * @param {?=} c8\n * @param {?=} a9\n * @param {?=} c9\n * @return {?}\n */\nexport function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n    switch (valueCount) {\n        case 1:\n            return c0 + _toStringWithNull(a1) + c1;\n        case 2:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n        case 3:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3;\n        case 4:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4;\n        case 5:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n        case 6:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n        case 7:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7;\n        case 8:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n        case 9:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n        default:\n            throw new Error(\"Does not support more than 9 expressions\");\n    }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction _toStringWithNull(v) {\n    return v != null ? v.toString() : '';\n}\nexport var /** @type {?} */ EMPTY_ARRAY = [];\nexport var /** @type {?} */ EMPTY_MAP = {};\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SecurityContext } from '../sanitization/security';\nimport { asElementData } from './types';\nimport { NOOP, calcBindingFlags, checkAndUpdateBinding, dispatchEvent, elementEventFullName, getParentRenderElement, resolveDefinition, resolveRendererType2, splitMatchedQueriesDsl, splitNamespace } from './util';\n/**\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?=} handleEvent\n * @param {?=} templateFactory\n * @return {?}\n */\nexport function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n    flags |= 1 /* TypeElement */;\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    var /** @type {?} */ template = templateFactory ? resolveDefinition(templateFactory) : null;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        flags: flags,\n        checkIndex: -1,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: {\n            ns: null,\n            name: null,\n            attrs: null, template: template,\n            componentProvider: null,\n            componentView: null,\n            componentRendererType: null,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?} namespaceAndName\n * @param {?=} fixedAttrs\n * @param {?=} bindings\n * @param {?=} outputs\n * @param {?=} handleEvent\n * @param {?=} componentView\n * @param {?=} componentRendererType\n * @return {?}\n */\nexport function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {\n    if (fixedAttrs === void 0) { fixedAttrs = []; }\n    if (!handleEvent) {\n        handleEvent = NOOP;\n    }\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    var /** @type {?} */ ns = /** @type {?} */ ((null));\n    var /** @type {?} */ name = /** @type {?} */ ((null));\n    if (namespaceAndName) {\n        _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];\n    }\n    bindings = bindings || [];\n    var /** @type {?} */ bindingDefs = new Array(bindings.length);\n    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {\n        var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];\n        var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];\n        var /** @type {?} */ securityContext = /** @type {?} */ ((undefined));\n        var /** @type {?} */ suffix = /** @type {?} */ ((undefined));\n        switch (bindingFlags & 15 /* Types */) {\n            case 4 /* TypeElementStyle */:\n                suffix = /** @type {?} */ (suffixOrSecurityContext);\n                break;\n            case 1 /* TypeElementAttribute */:\n            case 8 /* TypeProperty */:\n                securityContext = /** @type {?} */ (suffixOrSecurityContext);\n                break;\n        }\n        bindingDefs[i] =\n            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };\n    }\n    outputs = outputs || [];\n    var /** @type {?} */ outputDefs = new Array(outputs.length);\n    for (var /** @type {?} */ i = 0; i < outputs.length; i++) {\n        var _e = outputs[i], target = _e[0], eventName = _e[1];\n        outputDefs[i] = {\n            type: 0 /* ElementOutput */,\n            target: /** @type {?} */ (target), eventName: eventName,\n            propName: null\n        };\n    }\n    fixedAttrs = fixedAttrs || [];\n    var /** @type {?} */ attrs = /** @type {?} */ (fixedAttrs.map(function (_a) {\n        var namespaceAndName = _a[0], value = _a[1];\n        var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];\n        return [ns, name, value];\n    }));\n    componentRendererType = resolveRendererType2(componentRendererType);\n    if (componentView) {\n        flags |= 33554432 /* ComponentView */;\n    }\n    flags |= 1 /* TypeElement */;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: bindingDefs,\n        bindingFlags: calcBindingFlags(bindingDefs),\n        outputs: outputDefs,\n        element: {\n            ns: ns,\n            name: name,\n            attrs: attrs,\n            template: null,\n            // will bet set by the view definition\n            componentProvider: null,\n            componentView: componentView || null,\n            componentRendererType: componentRendererType,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP,\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n    var _b;\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function createElement(view, renderHost, def) {\n    var /** @type {?} */ elDef = /** @type {?} */ ((def.element));\n    var /** @type {?} */ rootSelectorOrNode = view.root.selectorOrNode;\n    var /** @type {?} */ renderer = view.renderer;\n    var /** @type {?} */ el;\n    if (view.parent || !rootSelectorOrNode) {\n        if (elDef.name) {\n            el = renderer.createElement(elDef.name, elDef.ns);\n        }\n        else {\n            el = renderer.createComment('');\n        }\n        var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, el);\n        }\n    }\n    else {\n        el = renderer.selectRootElement(rootSelectorOrNode);\n    }\n    if (elDef.attrs) {\n        for (var /** @type {?} */ i = 0; i < elDef.attrs.length; i++) {\n            var _a = elDef.attrs[i], ns = _a[0], name_2 = _a[1], value = _a[2];\n            renderer.setAttribute(el, name_2, value, ns);\n        }\n    }\n    return el;\n}\n/**\n * @param {?} view\n * @param {?} compView\n * @param {?} def\n * @param {?} el\n * @return {?}\n */\nexport function listenToElementOutputs(view, compView, def, el) {\n    for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {\n        var /** @type {?} */ output = def.outputs[i];\n        var /** @type {?} */ handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n        var /** @type {?} */ listenTarget = output.target;\n        var /** @type {?} */ listenerView = view;\n        if (output.target === 'component') {\n            listenTarget = null;\n            listenerView = compView;\n        }\n        var /** @type {?} */ disposable = /** @type {?} */ (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)); /** @type {?} */\n        ((view.disposables))[def.outputIndex + i] = disposable;\n    }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction renderEventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var /** @type {?} */ bindLen = def.bindings.length;\n    var /** @type {?} */ changed = false;\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n        changed = true;\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateElementDynamic(view, def, values) {\n    var /** @type {?} */ changed = false;\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\n            changed = true;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n        return false;\n    }\n    var /** @type {?} */ binding = def.bindings[bindingIdx];\n    var /** @type {?} */ elData = asElementData(view, def.nodeIndex);\n    var /** @type {?} */ renderNode = elData.renderElement;\n    var /** @type {?} */ name = /** @type {?} */ ((binding.name));\n    switch (binding.flags & 15 /* Types */) {\n        case 1 /* TypeElementAttribute */:\n            setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n            break;\n        case 2 /* TypeElementClass */:\n            setElementClass(view, renderNode, name, value);\n            break;\n        case 4 /* TypeElementStyle */:\n            setElementStyle(view, binding, renderNode, name, value);\n            break;\n        case 8 /* TypeProperty */:\n            var /** @type {?} */ bindView = (def.flags & 33554432 /* ComponentView */ &&\n                binding.flags & 32 /* SyntheticHostProperty */) ?\n                elData.componentView :\n                view;\n            setElementProperty(bindView, binding, renderNode, name, value);\n            break;\n    }\n    return true;\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementAttribute(view, binding, renderNode, ns, name, value) {\n    var /** @type {?} */ securityContext = binding.securityContext;\n    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    renderValue = renderValue != null ? renderValue.toString() : null;\n    var /** @type {?} */ renderer = view.renderer;\n    if (value != null) {\n        renderer.setAttribute(renderNode, name, renderValue, ns);\n    }\n    else {\n        renderer.removeAttribute(renderNode, name, ns);\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementClass(view, renderNode, name, value) {\n    var /** @type {?} */ renderer = view.renderer;\n    if (value) {\n        renderer.addClass(renderNode, name);\n    }\n    else {\n        renderer.removeClass(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementStyle(view, binding, renderNode, name, value) {\n    var /** @type {?} */ renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */ (value));\n    if (renderValue != null) {\n        renderValue = renderValue.toString();\n        var /** @type {?} */ unit = binding.suffix;\n        if (unit != null) {\n            renderValue = renderValue + unit;\n        }\n    }\n    else {\n        renderValue = null;\n    }\n    var /** @type {?} */ renderer = view.renderer;\n    if (renderValue != null) {\n        renderer.setStyle(renderNode, name, renderValue);\n    }\n    else {\n        renderer.removeStyle(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementProperty(view, binding, renderNode, name, value) {\n    var /** @type {?} */ securityContext = binding.securityContext;\n    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    view.renderer.setProperty(renderNode, name, renderValue);\n}\n//# sourceMappingURL=element.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { resolveForwardRef } from '../di/forward_ref';\nimport { INJECTOR, Injector, setCurrentInjector } from '../di/injector';\nimport { APP_ROOT } from '../di/scope';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { stringify } from '../util';\nimport { splitDepsDsl, tokenKey } from './util';\nvar /** @type {?} */ UNDEFINED_VALUE = new Object();\nvar /** @type {?} */ InjectorRefTokenKey = tokenKey(Injector);\nvar /** @type {?} */ INJECTORRefTokenKey = tokenKey(INJECTOR);\nvar /** @type {?} */ NgModuleRefTokenKey = tokenKey(NgModuleRef);\n/**\n * @param {?} flags\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function moduleProvideDef(flags, token, value, deps) {\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    var /** @type {?} */ depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the module definition\n        index: -1,\n        deps: depDefs, flags: flags, token: token, value: value\n    };\n}\n/**\n * @param {?} providers\n * @return {?}\n */\nexport function moduleDef(providers) {\n    var /** @type {?} */ providersByKey = {};\n    var /** @type {?} */ modules = [];\n    var /** @type {?} */ isRoot = false;\n    for (var /** @type {?} */ i = 0; i < providers.length; i++) {\n        var /** @type {?} */ provider = providers[i];\n        if (provider.token === APP_ROOT) {\n            isRoot = true;\n        }\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\n            modules.push(provider.token);\n        }\n        provider.index = i;\n        providersByKey[tokenKey(provider.token)] = provider;\n    }\n    return {\n        // Will be filled later...\n        factory: null,\n        providersByKey: providersByKey,\n        providers: providers,\n        modules: modules,\n        isRoot: isRoot,\n    };\n}\n/**\n * @param {?} data\n * @return {?}\n */\nexport function initNgModule(data) {\n    var /** @type {?} */ def = data._def;\n    var /** @type {?} */ providers = data._providers = new Array(def.providers.length);\n    for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {\n        var /** @type {?} */ provDef = def.providers[i];\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\n            providers[i] = _createProviderInstance(data, provDef);\n        }\n    }\n}\n/**\n * @param {?} data\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveNgModuleDep(data, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    var /** @type {?} */ former = setCurrentInjector(data);\n    try {\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        if (depDef.flags & 1 /* SkipSelf */) {\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        var /** @type {?} */ tokenKey_1 = depDef.tokenKey;\n        switch (tokenKey_1) {\n            case InjectorRefTokenKey:\n            case INJECTORRefTokenKey:\n            case NgModuleRefTokenKey:\n                return data;\n        }\n        var /** @type {?} */ providerDef = data._def.providersByKey[tokenKey_1];\n        if (providerDef) {\n            var /** @type {?} */ providerInstance = data._providers[providerDef.index];\n            if (providerInstance === undefined) {\n                providerInstance = data._providers[providerDef.index] =\n                    _createProviderInstance(data, providerDef);\n            }\n            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n        }\n        else if (depDef.token.ngInjectableDef && targetsModule(data, depDef.token.ngInjectableDef)) {\n            var /** @type {?} */ injectableDef = /** @type {?} */ (depDef.token.ngInjectableDef);\n            var /** @type {?} */ key = tokenKey_1;\n            var /** @type {?} */ index = data._providers.length;\n            data._def.providersByKey[depDef.tokenKey] = {\n                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                value: injectableDef.factory,\n                deps: [], index: index,\n                token: depDef.token,\n            };\n            data._providers[index] = UNDEFINED_VALUE;\n            return (data._providers[index] =\n                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n        }\n        return data._parent.get(depDef.token, notFoundValue);\n    }\n    finally {\n        setCurrentInjector(former);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} scope\n * @return {?}\n */\nfunction moduleTransitivelyPresent(ngModule, scope) {\n    return ngModule._def.modules.indexOf(scope) > -1;\n}\n/**\n * @param {?} ngModule\n * @param {?} def\n * @return {?}\n */\nfunction targetsModule(ngModule, def) {\n    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\n        def.providedIn === 'root' && ngModule._def.isRoot);\n}\n/**\n * @param {?} ngModule\n * @param {?} providerDef\n * @return {?}\n */\nfunction _createProviderInstance(ngModule, providerDef) {\n    var /** @type {?} */ injectable;\n    switch (providerDef.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 1024 /* TypeFactoryProvider */:\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 2048 /* TypeUseExistingProvider */:\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n            break;\n        case 256 /* TypeValueProvider */:\n            injectable = providerDef.value;\n            break;\n    }\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\n/**\n * @param {?} ngModule\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction _createClass(ngModule, ctor, deps) {\n    var /** @type {?} */ len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            var /** @type {?} */ depValues = new Array(len);\n            for (var /** @type {?} */ i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction _callFactory(ngModule, factory, deps) {\n    var /** @type {?} */ len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            var /** @type {?} */ depValues = Array(len);\n            for (var /** @type {?} */ i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return factory.apply(void 0, depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callNgModuleLifecycle(ngModule, lifecycles) {\n    var /** @type {?} */ def = ngModule._def;\n    for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {\n        var /** @type {?} */ provDef = def.providers[i];\n        if (provDef.flags & 131072 /* OnDestroy */) {\n            var /** @type {?} */ instance = ngModule._providers[i];\n            if (instance && instance !== UNDEFINED_VALUE) {\n                instance.ngOnDestroy();\n            }\n        }\n    }\n}\n//# sourceMappingURL=ng_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Services } from './types';\nimport { declaredViewContainer, renderNode, visitRootRenderNodes } from './util';\n/**\n * @param {?} parentView\n * @param {?} elementData\n * @param {?} viewIndex\n * @param {?} view\n * @return {?}\n */\nexport function attachEmbeddedView(parentView, elementData, viewIndex, view) {\n    var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    if (viewIndex === null || viewIndex === undefined) {\n        viewIndex = embeddedViews.length;\n    }\n    view.viewContainerParent = parentView;\n    addToArray(embeddedViews, /** @type {?} */ ((viewIndex)), view);\n    attachProjectedView(elementData, view);\n    Services.dirtyParentQueries(view);\n    var /** @type {?} */ prevView = /** @type {?} */ ((viewIndex)) > 0 ? embeddedViews[/** @type {?} */ ((viewIndex)) - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n}\n/**\n * @param {?} vcElementData\n * @param {?} view\n * @return {?}\n */\nfunction attachProjectedView(vcElementData, view) {\n    var /** @type {?} */ dvcElementData = declaredViewContainer(view);\n    if (!dvcElementData || dvcElementData === vcElementData ||\n        view.state & 16 /* IsProjectedView */) {\n        return;\n    }\n    // Note: For performance reasons, we\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\n    //   and remove it not until the view is destroyed.\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n    //    nested projected views as well, even across component boundaries).\n    // - don't track the insertion order of views in the projected views array\n    //   (hard, as when the views of the same template are inserted different view containers)\n    view.state |= 16 /* IsProjectedView */;\n    var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;\n    if (!projectedViews) {\n        projectedViews = dvcElementData.template._projectedViews = [];\n    }\n    projectedViews.push(view);\n    // Note: we are changing the NodeDef here as we cannot calculate\n    // the fact whether a template is used for projection during compilation.\n    markNodeAsProjectedTemplate(/** @type {?} */ ((view.parent)).def, /** @type {?} */ ((view.parentNodeDef)));\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeDef\n * @return {?}\n */\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n        return;\n    }\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\n    var /** @type {?} */ parentNodeDef = nodeDef.parent;\n    while (parentNodeDef) {\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n        parentNodeDef = parentNodeDef.parent;\n    }\n}\n/**\n * @param {?} elementData\n * @param {?=} viewIndex\n * @return {?}\n */\nexport function detachEmbeddedView(elementData, viewIndex) {\n    var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\n        viewIndex = embeddedViews.length - 1;\n    }\n    if (viewIndex < 0) {\n        return null;\n    }\n    var /** @type {?} */ view = embeddedViews[viewIndex];\n    view.viewContainerParent = null;\n    removeFromArray(embeddedViews, viewIndex);\n    // See attachProjectedView for why we don't update projectedViews here.\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    return view;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function detachProjectedView(view) {\n    if (!(view.state & 16 /* IsProjectedView */)) {\n        return;\n    }\n    var /** @type {?} */ dvcElementData = declaredViewContainer(view);\n    if (dvcElementData) {\n        var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;\n        if (projectedViews) {\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\n            Services.dirtyParentQueries(view);\n        }\n    }\n}\n/**\n * @param {?} elementData\n * @param {?} oldViewIndex\n * @param {?} newViewIndex\n * @return {?}\n */\nexport function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n    var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    var /** @type {?} */ view = embeddedViews[oldViewIndex];\n    removeFromArray(embeddedViews, oldViewIndex);\n    if (newViewIndex == null) {\n        newViewIndex = embeddedViews.length;\n    }\n    addToArray(embeddedViews, newViewIndex, view);\n    // Note: Don't need to change projectedViews as the order in there\n    // as always invalid...\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    var /** @type {?} */ prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n    return view;\n}\n/**\n * @param {?} elementData\n * @param {?} prevView\n * @param {?} view\n * @return {?}\n */\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\n    var /** @type {?} */ prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */ ((prevView.def.lastRenderRootNode))) :\n        elementData.renderElement;\n    var /** @type {?} */ parentNode = view.renderer.parentNode(prevRenderNode);\n    var /** @type {?} */ nextSibling = view.renderer.nextSibling(prevRenderNode);\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function renderDetachView(view) {\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        arr.pop();\n    }\n    else {\n        arr.splice(index, 1);\n    }\n}\n//# sourceMappingURL=view_attach.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { ComponentFactory, ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef } from '../linker/element_ref';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { TemplateRef } from '../linker/template_ref';\nimport { stringify } from '../util';\nimport { VERSION } from '../version';\nimport { callNgModuleLifecycle, initNgModule, resolveNgModuleDep } from './ng_module';\nimport { Services, asElementData, asProviderData, asTextData } from './types';\nimport { markParentViewsForCheck, resolveDefinition, rootRenderNodes, splitNamespace, tokenKey, viewParentEl } from './util';\nimport { attachEmbeddedView, detachEmbeddedView, moveEmbeddedView, renderDetachView } from './view_attach';\nvar /** @type {?} */ EMPTY_CONTEXT = new Object();\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} viewDefFactory\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} ngContentSelectors\n * @return {?}\n */\nexport function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n}\n/**\n * @param {?} componentFactory\n * @return {?}\n */\nexport function getComponentViewDefinitionFactory(componentFactory) {\n    return (/** @type {?} */ (componentFactory)).viewDefFactory;\n}\nvar ComponentFactory_ = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactory_, _super);\n    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.selector = selector;\n        _this.componentType = componentType;\n        _this._inputs = _inputs;\n        _this._outputs = _outputs;\n        _this.ngContentSelectors = ngContentSelectors;\n        _this.viewDefFactory = viewDefFactory;\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory_.prototype, \"inputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ inputsArr = [];\n            var /** @type {?} */ inputs = /** @type {?} */ ((this._inputs));\n            for (var /** @type {?} */ propName in inputs) {\n                var /** @type {?} */ templateName = inputs[propName];\n                inputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return inputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory_.prototype, \"outputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ outputsArr = [];\n            for (var /** @type {?} */ propName in this._outputs) {\n                var /** @type {?} */ templateName = this._outputs[propName];\n                outputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return outputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a new component.\n     */\n    /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactory_.prototype.create = /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        if (!ngModule) {\n            throw new Error('ngModule should be provided');\n        }\n        var /** @type {?} */ viewDef = resolveDefinition(this.viewDefFactory);\n        var /** @type {?} */ componentNodeIndex = /** @type {?} */ ((/** @type {?} */ ((viewDef.nodes[0].element)).componentProvider)).nodeIndex;\n        var /** @type {?} */ view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n        var /** @type {?} */ component = asProviderData(view, componentNodeIndex).instance;\n        if (rootSelectorOrNode) {\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n        }\n        return new ComponentRef_(view, new ViewRef_(view), component);\n    };\n    return ComponentFactory_;\n}(ComponentFactory));\nfunction ComponentFactory__tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ComponentFactory_.prototype.viewDefFactory;\n    /** @type {?} */\n    ComponentFactory_.prototype.selector;\n    /** @type {?} */\n    ComponentFactory_.prototype.componentType;\n    /** @type {?} */\n    ComponentFactory_.prototype._inputs;\n    /** @type {?} */\n    ComponentFactory_.prototype._outputs;\n    /** @type {?} */\n    ComponentFactory_.prototype.ngContentSelectors;\n}\nvar ComponentRef_ = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentRef_, _super);\n    function ComponentRef_(_view, _viewRef, _component) {\n        var _this = _super.call(this) || this;\n        _this._view = _view;\n        _this._viewRef = _viewRef;\n        _this._component = _component;\n        _this._elDef = _this._view.def.nodes[0];\n        _this.hostView = _viewRef;\n        _this.changeDetectorRef = _viewRef;\n        _this.instance = _component;\n        return _this;\n    }\n    Object.defineProperty(ComponentRef_.prototype, \"location\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ (this._component.constructor); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ComponentRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { this._viewRef.destroy(); };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ComponentRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._viewRef.onDestroy(callback); };\n    return ComponentRef_;\n}(ComponentRef));\nfunction ComponentRef__tsickle_Closure_declarations() {\n    /** @type {?} */\n    ComponentRef_.prototype.hostView;\n    /** @type {?} */\n    ComponentRef_.prototype.instance;\n    /** @type {?} */\n    ComponentRef_.prototype.changeDetectorRef;\n    /** @type {?} */\n    ComponentRef_.prototype._elDef;\n    /** @type {?} */\n    ComponentRef_.prototype._view;\n    /** @type {?} */\n    ComponentRef_.prototype._viewRef;\n    /** @type {?} */\n    ComponentRef_.prototype._component;\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} elData\n * @return {?}\n */\nexport function createViewContainerData(view, elDef, elData) {\n    return new ViewContainerRef_(view, elDef, elData);\n}\nvar ViewContainerRef_ = /** @class */ (function () {\n    function ViewContainerRef_(_view, _elDef, _data) {\n        this._view = _view;\n        this._elDef = _elDef;\n        this._data = _data;\n        /**\n         * \\@internal\n         */\n        this._embeddedViews = [];\n    }\n    Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new ElementRef(this._data.renderElement); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ view = this._view;\n            var /** @type {?} */ elDef = this._elDef.parent;\n            while (!elDef && view) {\n                elDef = viewParentEl(view);\n                view = /** @type {?} */ ((view.parent));\n            }\n            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.clear = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ len = this._embeddedViews.length;\n        for (var /** @type {?} */ i = len - 1; i >= 0; i--) {\n            var /** @type {?} */ view = /** @type {?} */ ((detachEmbeddedView(this._data, i)));\n            Services.destroyView(view);\n        }\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.get = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        var /** @type {?} */ view = this._embeddedViews[index];\n        if (view) {\n            var /** @type {?} */ ref = new ViewRef_(view);\n            ref.attachToViewContainerRef(this);\n            return ref;\n        }\n        return null;\n    };\n    Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._embeddedViews.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.createEmbeddedView = /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    function (templateRef, context, index) {\n        var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context || /** @type {?} */ ({}));\n        this.insert(viewRef, index);\n        return viewRef;\n    };\n    /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.createComponent = /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n        var /** @type {?} */ contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n            ngModuleRef = contextInjector.get(NgModuleRef);\n        }\n        var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.insert = /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    function (viewRef, index) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        var /** @type {?} */ viewRef_ = /** @type {?} */ (viewRef);\n        var /** @type {?} */ viewData = viewRef_._view;\n        attachEmbeddedView(this._view, this._data, index, viewData);\n        viewRef_.attachToViewContainerRef(this);\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.move = /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    function (viewRef, currentIndex) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        var /** @type {?} */ previousIndex = this._embeddedViews.indexOf(viewRef._view);\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.indexOf = /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        return this._embeddedViews.indexOf((/** @type {?} */ (viewRef))._view);\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.remove = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        var /** @type {?} */ viewData = detachEmbeddedView(this._data, index);\n        if (viewData) {\n            Services.destroyView(viewData);\n        }\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.detach = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        var /** @type {?} */ view = detachEmbeddedView(this._data, index);\n        return view ? new ViewRef_(view) : null;\n    };\n    return ViewContainerRef_;\n}());\nfunction ViewContainerRef__tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewContainerRef_.prototype._embeddedViews;\n    /** @type {?} */\n    ViewContainerRef_.prototype._view;\n    /** @type {?} */\n    ViewContainerRef_.prototype._elDef;\n    /** @type {?} */\n    ViewContainerRef_.prototype._data;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createChangeDetectorRef(view) {\n    return new ViewRef_(view);\n}\nvar ViewRef_ = /** @class */ (function () {\n    function ViewRef_(_view) {\n        this._view = _view;\n        this._viewContainerRef = null;\n        this._appRef = null;\n    }\n    Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return rootRenderNodes(this._view); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._view.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return (this._view.state & 128 /* Destroyed */) !== 0; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.markForCheck = /**\n     * @return {?}\n     */\n    function () { markParentViewsForCheck(this._view); };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detach = /**\n     * @return {?}\n     */\n    function () { this._view.state &= ~4 /* Attached */; };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detectChanges = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ fs = this._view.root.rendererFactory;\n        if (fs.begin) {\n            fs.begin();\n        }\n        try {\n            Services.checkAndUpdateView(this._view);\n        }\n        finally {\n            if (fs.end) {\n                fs.end();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.checkNoChanges = /**\n     * @return {?}\n     */\n    function () { Services.checkNoChangesView(this._view); };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.reattach = /**\n     * @return {?}\n     */\n    function () { this._view.state |= 4 /* Attached */; };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        if (!this._view.disposables) {\n            this._view.disposables = [];\n        }\n        this._view.disposables.push(/** @type {?} */ (callback));\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n        }\n        Services.destroyView(this._view);\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detachFromAppRef = /**\n     * @return {?}\n     */\n    function () {\n        this._appRef = null;\n        renderDetachView(this._view);\n        Services.dirtyParentQueries(this._view);\n    };\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    ViewRef_.prototype.attachToAppRef = /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    function (appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    };\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    ViewRef_.prototype.attachToViewContainerRef = /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    function (vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    };\n    return ViewRef_;\n}());\nexport { ViewRef_ };\nfunction ViewRef__tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef_.prototype._view;\n    /** @type {?} */\n    ViewRef_.prototype._viewContainerRef;\n    /** @type {?} */\n    ViewRef_.prototype._appRef;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createTemplateData(view, def) {\n    return new TemplateRef_(view, def);\n}\nvar TemplateRef_ = /** @class */ (function (_super) {\n    tslib_1.__extends(TemplateRef_, _super);\n    function TemplateRef_(_parentView, _def) {\n        var _this = _super.call(this) || this;\n        _this._parentView = _parentView;\n        _this._def = _def;\n        return _this;\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateRef_.prototype.createEmbeddedView = /**\n     * @param {?} context\n     * @return {?}\n     */\n    function (context) {\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, /** @type {?} */ ((/** @type {?} */ ((this._def.element)).template)), context));\n    };\n    Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return TemplateRef_;\n}(TemplateRef));\nfunction TemplateRef__tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TemplateRef_.prototype._projectedViews;\n    /** @type {?} */\n    TemplateRef_.prototype._parentView;\n    /** @type {?} */\n    TemplateRef_.prototype._def;\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @return {?}\n */\nexport function createInjector(view, elDef) {\n    return new Injector_(view, elDef);\n}\nvar Injector_ = /** @class */ (function () {\n    function Injector_(view, elDef) {\n        this.view = view;\n        this.elDef = elDef;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    Injector_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        var /** @type {?} */ allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);\n    };\n    return Injector_;\n}());\nfunction Injector__tsickle_Closure_declarations() {\n    /** @type {?} */\n    Injector_.prototype.view;\n    /** @type {?} */\n    Injector_.prototype.elDef;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function nodeValue(view, index) {\n    var /** @type {?} */ def = view.def.nodes[index];\n    if (def.flags & 1 /* TypeElement */) {\n        var /** @type {?} */ elData = asElementData(view, def.nodeIndex);\n        return /** @type {?} */ ((def.element)).template ? elData.template : elData.renderElement;\n    }\n    else if (def.flags & 2 /* TypeText */) {\n        return asTextData(view, def.nodeIndex).renderText;\n    }\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n        return asProviderData(view, def.nodeIndex).instance;\n    }\n    throw new Error(\"Illegal state: read nodeValue for node index \" + index);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createRendererV1(view) {\n    return new RendererAdapter(view.renderer);\n}\nvar RendererAdapter = /** @class */ (function () {\n    function RendererAdapter(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    RendererAdapter.prototype.selectRootElement = /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    function (selectorOrNode) {\n        return this.delegate.selectRootElement(selectorOrNode);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    RendererAdapter.prototype.createElement = /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    function (parent, namespaceAndName) {\n        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n        var /** @type {?} */ el = this.delegate.createElement(name, ns);\n        if (parent) {\n            this.delegate.appendChild(parent, el);\n        }\n        return el;\n    };\n    /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    RendererAdapter.prototype.createViewRoot = /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    function (hostElement) { return hostElement; };\n    /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    RendererAdapter.prototype.createTemplateAnchor = /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    function (parentElement) {\n        var /** @type {?} */ comment = this.delegate.createComment('');\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, comment);\n        }\n        return comment;\n    };\n    /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    RendererAdapter.prototype.createText = /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    function (parentElement, value) {\n        var /** @type {?} */ node = this.delegate.createText(value);\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, node);\n        }\n        return node;\n    };\n    /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.projectNodes = /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    function (parentElement, nodes) {\n        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\n            this.delegate.appendChild(parentElement, nodes[i]);\n        }\n    };\n    /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.attachViewAfter = /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    function (node, viewRootNodes) {\n        var /** @type {?} */ parentElement = this.delegate.parentNode(node);\n        var /** @type {?} */ nextSibling = this.delegate.nextSibling(node);\n        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n        }\n    };\n    /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.detachView = /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    function (viewRootNodes) {\n        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {\n            var /** @type {?} */ node = viewRootNodes[i];\n            var /** @type {?} */ parentElement = this.delegate.parentNode(node);\n            this.delegate.removeChild(parentElement, node);\n        }\n    };\n    /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.destroyView = /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    function (hostElement, viewAllNodes) {\n        for (var /** @type {?} */ i = 0; i < viewAllNodes.length; i++) {\n            /** @type {?} */ ((this.delegate.destroyNode))(viewAllNodes[i]);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    RendererAdapter.prototype.listen = /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    function (renderElement, name, callback) {\n        return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));\n    };\n    /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    RendererAdapter.prototype.listenGlobal = /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    function (target, name, callback) {\n        return this.delegate.listen(target, name, /** @type {?} */ (callback));\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementProperty = /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    function (renderElement, propertyName, propertyValue) {\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?} attributeValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementAttribute = /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?} attributeValue\n     * @return {?}\n     */\n    function (renderElement, namespaceAndName, attributeValue) {\n        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n        if (attributeValue != null) {\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n        }\n        else {\n            this.delegate.removeAttribute(renderElement, name, ns);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setBindingDebugInfo = /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementClass = /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    function (renderElement, className, isAdd) {\n        if (isAdd) {\n            this.delegate.addClass(renderElement, className);\n        }\n        else {\n            this.delegate.removeClass(renderElement, className);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementStyle = /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    function (renderElement, styleName, styleValue) {\n        if (styleValue != null) {\n            this.delegate.setStyle(renderElement, styleName, styleValue);\n        }\n        else {\n            this.delegate.removeStyle(renderElement, styleName);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    RendererAdapter.prototype.invokeElementMethod = /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    function (renderElement, methodName, args) {\n        (/** @type {?} */ (renderElement))[methodName].apply(renderElement, args);\n    };\n    /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    RendererAdapter.prototype.setText = /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    function (renderNode, text) { this.delegate.setValue(renderNode, text); };\n    /**\n     * @return {?}\n     */\n    RendererAdapter.prototype.animate = /**\n     * @return {?}\n     */\n    function () { throw new Error('Renderer.animate is no longer supported!'); };\n    return RendererAdapter;\n}());\nfunction RendererAdapter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RendererAdapter.prototype.delegate;\n}\n/**\n * @param {?} moduleType\n * @param {?} parent\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nexport function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n}\nvar NgModuleRef_ = /** @class */ (function () {\n    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {\n        this._moduleType = _moduleType;\n        this._parent = _parent;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._def = _def;\n        this._destroyListeners = [];\n        this._destroyed = false;\n        this.injector = this;\n        initNgModule(this);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    NgModuleRef_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    function (token, notFoundValue, injectFlags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (injectFlags === void 0) { injectFlags = 0 /* Default */; }\n        var /** @type {?} */ flags = 0 /* None */;\n        if (injectFlags & 1 /* SkipSelf */) {\n            flags |= 1 /* SkipSelf */;\n        }\n        else if (injectFlags & 2 /* Self */) {\n            flags |= 4 /* Self */;\n        }\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n    };\n    Object.defineProperty(NgModuleRef_.prototype, \"instance\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.get(this._moduleType); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModuleRef_.prototype, \"componentFactoryResolver\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.get(ComponentFactoryResolver); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NgModuleRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._destroyed) {\n            throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n        }\n        this._destroyed = true;\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    NgModuleRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._destroyListeners.push(callback); };\n    return NgModuleRef_;\n}());\nfunction NgModuleRef__tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleRef_.prototype._destroyListeners;\n    /** @type {?} */\n    NgModuleRef_.prototype._destroyed;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModuleRef_.prototype._providers;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModuleRef_.prototype._modules;\n    /** @type {?} */\n    NgModuleRef_.prototype.injector;\n    /** @type {?} */\n    NgModuleRef_.prototype._moduleType;\n    /** @type {?} */\n    NgModuleRef_.prototype._parent;\n    /** @type {?} */\n    NgModuleRef_.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleRef_.prototype._def;\n}\n//# sourceMappingURL=refs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, SimpleChange, WrappedValue } from '../change_detection/change_detection';\nimport { INJECTOR, Injector, resolveForwardRef } from '../di';\nimport { ElementRef } from '../linker/element_ref';\nimport { TemplateRef } from '../linker/template_ref';\nimport { ViewContainerRef } from '../linker/view_container_ref';\nimport { Renderer as RendererV1, Renderer2 } from '../render/api';\nimport { stringify } from '../util';\nimport { createChangeDetectorRef, createInjector, createRendererV1 } from './refs';\nimport { Services, asElementData, asProviderData, shouldCallLifecycleInitHook } from './types';\nimport { calcBindingFlags, checkBinding, dispatchEvent, isComponentView, splitDepsDsl, splitMatchedQueriesDsl, tokenKey, viewParentEl } from './util';\nvar /** @type {?} */ RendererV1TokenKey = tokenKey(RendererV1);\nvar /** @type {?} */ Renderer2TokenKey = tokenKey(Renderer2);\nvar /** @type {?} */ ElementRefTokenKey = tokenKey(ElementRef);\nvar /** @type {?} */ ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\nvar /** @type {?} */ TemplateRefTokenKey = tokenKey(TemplateRef);\nvar /** @type {?} */ ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\nvar /** @type {?} */ InjectorRefTokenKey = tokenKey(Injector);\nvar /** @type {?} */ INJECTORRefTokenKey = tokenKey(INJECTOR);\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} childCount\n * @param {?} ctor\n * @param {?} deps\n * @param {?=} props\n * @param {?=} outputs\n * @return {?}\n */\nexport function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n    var /** @type {?} */ bindings = [];\n    if (props) {\n        for (var /** @type {?} */ prop in props) {\n            var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];\n            bindings[bindingIndex] = {\n                flags: 8 /* TypeProperty */,\n                name: prop, nonMinifiedName: nonMinifiedName,\n                ns: null,\n                securityContext: null,\n                suffix: null\n            };\n        }\n    }\n    var /** @type {?} */ outputDefs = [];\n    if (outputs) {\n        for (var /** @type {?} */ propName in outputs) {\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\n        }\n    }\n    flags |= 16384 /* TypeDirective */;\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\n/**\n * @param {?} flags\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nexport function pipeDef(flags, ctor, deps) {\n    flags |= 16 /* TypePipe */;\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\n/**\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function providerDef(flags, matchedQueries, token, value, deps) {\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} childCount\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @param {?=} bindings\n * @param {?=} outputs\n * @return {?}\n */\nexport function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    if (!outputs) {\n        outputs = [];\n    }\n    if (!bindings) {\n        bindings = [];\n    }\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    var /** @type {?} */ depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\n        ngContentIndex: -1, childCount: childCount, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings), outputs: outputs,\n        element: null,\n        provider: { token: token, value: value, deps: depDefs },\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createProviderInstance(view, def) {\n    return _createProviderInstance(view, def);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPipeInstance(view, def) {\n    // deps are looked up from component.\n    var /** @type {?} */ compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    // pipes can see the private services of the component\n    var /** @type {?} */ allowPrivateServices = true;\n    // pipes are always eager and classes!\n    return createClass(/** @type {?} */ ((compView.parent)), /** @type {?} */ ((viewParentEl(compView))), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createDirectiveInstance(view, def) {\n    // components can see other private services, other directives can't.\n    var /** @type {?} */ allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n    // directives are always eager and classes!\n    var /** @type {?} */ instance = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\n    if (def.outputs.length) {\n        for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {\n            var /** @type {?} */ output = def.outputs[i];\n            var /** @type {?} */ subscription = instance[/** @type {?} */ ((output.propName))].subscribe(eventHandlerClosure(view, /** @type {?} */ ((def.parent)).nodeIndex, output.eventName)); /** @type {?} */\n            ((view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n        }\n    }\n    return instance;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction eventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);\n    var /** @type {?} */ directive = providerData.instance;\n    var /** @type {?} */ changed = false;\n    var /** @type {?} */ changes = /** @type {?} */ ((undefined));\n    var /** @type {?} */ bindLen = def.bindings.length;\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 0, v0, changes);\n    }\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 1, v1, changes);\n    }\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 2, v2, changes);\n    }\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 3, v3, changes);\n    }\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 4, v4, changes);\n    }\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 5, v5, changes);\n    }\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 6, v6, changes);\n    }\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 7, v7, changes);\n    }\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 8, v8, changes);\n    }\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 9, v9, changes);\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateDirectiveDynamic(view, def, values) {\n    var /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);\n    var /** @type {?} */ directive = providerData.instance;\n    var /** @type {?} */ changed = false;\n    var /** @type {?} */ changes = /** @type {?} */ ((undefined));\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n        if (checkBinding(view, def, i, values[i])) {\n            changed = true;\n            changes = updateProp(view, providerData, def, i, values[i], changes);\n        }\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction _createProviderInstance(view, def) {\n    // private services can see other private services\n    var /** @type {?} */ allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n    var /** @type {?} */ providerDef = def.provider;\n    switch (def.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            return createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\n        case 1024 /* TypeFactoryProvider */:\n            return callFactory(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\n        case 2048 /* TypeUseExistingProvider */:\n            return resolveDep(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).deps[0]);\n        case 256 /* TypeValueProvider */:\n            return /** @type {?} */ ((providerDef)).value;\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n    var /** @type {?} */ len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            var /** @type {?} */ depValues = new Array(len);\n            for (var /** @type {?} */ i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n    var /** @type {?} */ len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            var /** @type {?} */ depValues = Array(len);\n            for (var /** @type {?} */ i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return factory.apply(void 0, depValues);\n    }\n}\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nexport var /** @type {?} */ NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    var /** @type {?} */ startView = view;\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    var /** @type {?} */ tokenKey = depDef.tokenKey;\n    if (tokenKey === ChangeDetectorRefTokenKey) {\n        // directives on the same element as a component should be able to control the change detector\n        // of that component as well.\n        allowPrivateServices = !!(elDef && /** @type {?} */ ((elDef.element)).componentView);\n    }\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n        allowPrivateServices = false;\n        elDef = /** @type {?} */ ((elDef.parent));\n    }\n    var /** @type {?} */ searchView = view;\n    while (searchView) {\n        if (elDef) {\n            switch (tokenKey) {\n                case RendererV1TokenKey: {\n                    var /** @type {?} */ compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createRendererV1(compView);\n                }\n                case Renderer2TokenKey: {\n                    var /** @type {?} */ compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return compView.renderer;\n                }\n                case ElementRefTokenKey:\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                case ViewContainerRefTokenKey:\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                case TemplateRefTokenKey: {\n                    if (/** @type {?} */ ((elDef.element)).template) {\n                        return asElementData(searchView, elDef.nodeIndex).template;\n                    }\n                    break;\n                }\n                case ChangeDetectorRefTokenKey: {\n                    var /** @type {?} */ cdView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createChangeDetectorRef(cdView);\n                }\n                case InjectorRefTokenKey:\n                case INJECTORRefTokenKey:\n                    return createInjector(searchView, elDef);\n                default:\n                    var /** @type {?} */ providerDef_1 = /** @type {?} */ (((allowPrivateServices ? /** @type {?} */ ((elDef.element)).allProviders : /** @type {?} */ ((elDef.element)).publicProviders)))[tokenKey];\n                    if (providerDef_1) {\n                        var /** @type {?} */ providerData = asProviderData(searchView, providerDef_1.nodeIndex);\n                        if (!providerData) {\n                            providerData = { instance: _createProviderInstance(searchView, providerDef_1) };\n                            searchView.nodes[providerDef_1.nodeIndex] = /** @type {?} */ (providerData);\n                        }\n                        return providerData.instance;\n                    }\n            }\n        }\n        allowPrivateServices = isComponentView(searchView);\n        elDef = /** @type {?} */ ((viewParentEl(searchView)));\n        searchView = /** @type {?} */ ((searchView.parent));\n        if (depDef.flags & 4 /* Self */) {\n            searchView = null;\n        }\n    }\n    var /** @type {?} */ value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n    }\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @return {?}\n */\nfunction findCompView(view, elDef, allowPrivateServices) {\n    var /** @type {?} */ compView;\n    if (allowPrivateServices) {\n        compView = asElementData(view, elDef.nodeIndex).componentView;\n    }\n    else {\n        compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n    }\n    return compView;\n}\n/**\n * @param {?} view\n * @param {?} providerData\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @param {?} changes\n * @return {?}\n */\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n    if (def.flags & 32768 /* Component */) {\n        var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((def.parent)).nodeIndex).componentView;\n        if (compView.def.flags & 2 /* OnPush */) {\n            compView.state |= 8 /* ChecksEnabled */;\n        }\n    }\n    var /** @type {?} */ binding = def.bindings[bindingIdx];\n    var /** @type {?} */ propName = /** @type {?} */ ((binding.name));\n    // Note: This is still safe with Closure Compiler as\n    // the user passed in the property name as an object has to `providerDef`,\n    // so Closure Compiler will have renamed the property correctly already.\n    providerData.instance[propName] = value;\n    if (def.flags & 524288 /* OnChanges */) {\n        changes = changes || {};\n        var /** @type {?} */ oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n        var /** @type {?} */ binding_1 = def.bindings[bindingIdx];\n        changes[/** @type {?} */ ((binding_1.nonMinifiedName))] =\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n    }\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return changes;\n}\n/**\n * @param {?} view\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callLifecycleHooksChildrenFirst(view, lifecycles) {\n    if (!(view.def.nodeFlags & lifecycles)) {\n        return;\n    }\n    var /** @type {?} */ nodes = view.def.nodes;\n    var /** @type {?} */ initIndex = 0;\n    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\n        var /** @type {?} */ nodeDef = nodes[i];\n        var /** @type {?} */ parent_1 = nodeDef.parent;\n        if (!parent_1 && nodeDef.flags & lifecycles) {\n            // matching root node (e.g. a pipe)\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        if ((nodeDef.childFlags & lifecycles) === 0) {\n            // no child matches one of the lifecycles\n            i += nodeDef.childCount;\n        }\n        while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&\n            i === parent_1.nodeIndex + parent_1.childCount) {\n            // last child of an element\n            if (parent_1.directChildFlags & lifecycles) {\n                initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);\n            }\n            parent_1 = parent_1.parent;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n    for (var /** @type {?} */ i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & lifecycles) {\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        // only visit direct children\n        i += nodeDef.childCount;\n    }\n    return initIndex;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n    var /** @type {?} */ providerData = asProviderData(view, index);\n    if (!providerData) {\n        return;\n    }\n    var /** @type {?} */ provider = providerData.instance;\n    if (!provider) {\n        return;\n    }\n    Services.setCurrentNode(view, index);\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n        provider.ngAfterContentInit();\n    }\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\n        provider.ngAfterContentChecked();\n    }\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n        provider.ngAfterViewInit();\n    }\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\n        provider.ngAfterViewChecked();\n    }\n    if (lifecycles & 131072 /* OnDestroy */) {\n        provider.ngOnDestroy();\n    }\n}\n//# sourceMappingURL=provider.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '../linker/element_ref';\nimport { QueryList } from '../linker/query_list';\nimport { asElementData, asProviderData, asQueryList } from './types';\nimport { declaredViewContainer, filterQueryId, isEmbeddedView } from './util';\n/**\n * @param {?} flags\n * @param {?} id\n * @param {?} bindings\n * @return {?}\n */\nexport function queryDef(flags, id, bindings) {\n    var /** @type {?} */ bindingDefs = [];\n    for (var /** @type {?} */ propName in bindings) {\n        var /** @type {?} */ bindingType = bindings[propName];\n        bindingDefs.push({ propName: propName, bindingType: bindingType });\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        // TODO(vicb): check\n        checkIndex: -1, flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        ngContentIndex: -1,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\n        ngContent: null\n    };\n}\n/**\n * @return {?}\n */\nexport function createQuery() {\n    return new QueryList();\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function dirtyParentQueries(view) {\n    var /** @type {?} */ queryIds = view.def.nodeMatchedQueries;\n    while (view.parent && isEmbeddedView(view)) {\n        var /** @type {?} */ tplDef = /** @type {?} */ ((view.parentNodeDef));\n        view = view.parent;\n        // content queries\n        var /** @type {?} */ end = tplDef.nodeIndex + tplDef.childCount;\n        for (var /** @type {?} */ i = 0; i <= end; i++) {\n            var /** @type {?} */ nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                (/** @type {?} */ ((nodeDef.query)).filterId & queryIds) === /** @type {?} */ ((nodeDef.query)).filterId) {\n                asQueryList(view, i).setDirty();\n            }\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                // skip elements that don't contain the template element or no query.\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    // view queries\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n        for (var /** @type {?} */ i = 0; i < view.def.nodes.length; i++) {\n            var /** @type {?} */ nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                asQueryList(view, i).setDirty();\n            }\n            // only visit the root nodes\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nexport function checkAndUpdateQuery(view, nodeDef) {\n    var /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (!queryList.dirty) {\n        return;\n    }\n    var /** @type {?} */ directiveInstance;\n    var /** @type {?} */ newValues = /** @type {?} */ ((undefined));\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n        var /** @type {?} */ elementDef = /** @type {?} */ ((/** @type {?} */ ((nodeDef.parent)).parent));\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, /** @type {?} */ ((nodeDef.query)), []);\n        directiveInstance = asProviderData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).instance;\n    }\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */ ((nodeDef.query)), []);\n        directiveInstance = view.component;\n    }\n    queryList.reset(newValues);\n    var /** @type {?} */ bindings = /** @type {?} */ ((nodeDef.query)).bindings;\n    var /** @type {?} */ notify = false;\n    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {\n        var /** @type {?} */ binding = bindings[i];\n        var /** @type {?} */ boundValue = void 0;\n        switch (binding.bindingType) {\n            case 0 /* First */:\n                boundValue = queryList.first;\n                break;\n            case 1 /* All */:\n                boundValue = queryList;\n                notify = true;\n                break;\n        }\n        directiveInstance[binding.propName] = boundValue;\n    }\n    if (notify) {\n        queryList.notifyOnChanges();\n    }\n}\n/**\n * @param {?} view\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} queryDef\n * @param {?} values\n * @return {?}\n */\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\n        var /** @type {?} */ valueType = nodeDef.matchedQueries[queryDef.id];\n        if (valueType != null) {\n            values.push(getQueryValue(view, nodeDef, valueType));\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && /** @type {?} */ ((nodeDef.element)).template &&\n            (/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\n                queryDef.filterId) {\n            var /** @type {?} */ elementData = asElementData(view, i);\n            // check embedded views that were attached at the place of their template,\n            // but process child nodes first if some match the query (see issue #16568)\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                i += nodeDef.childCount;\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n                for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\n                    var /** @type {?} */ embeddedView = embeddedViews[k];\n                    var /** @type {?} */ dvc = declaredViewContainer(embeddedView);\n                    if (dvc && dvc === elementData) {\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            var /** @type {?} */ projectedViews = elementData.template._projectedViews;\n            if (projectedViews) {\n                for (var /** @type {?} */ k = 0; k < projectedViews.length; k++) {\n                    var /** @type {?} */ projectedView = projectedViews[k];\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                }\n            }\n        }\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n            // if no child matches the query, skip the children.\n            i += nodeDef.childCount;\n        }\n    }\n    return values;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} queryValueType\n * @return {?}\n */\nexport function getQueryValue(view, nodeDef, queryValueType) {\n    if (queryValueType != null) {\n        // a match\n        switch (queryValueType) {\n            case 1 /* RenderElement */:\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\n            case 0 /* ElementRef */:\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n            case 2 /* TemplateRef */:\n                return asElementData(view, nodeDef.nodeIndex).template;\n            case 3 /* ViewContainerRef */:\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\n            case 4 /* Provider */:\n                return asProviderData(view, nodeDef.nodeIndex).instance;\n        }\n    }\n}\n//# sourceMappingURL=query.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getParentRenderElement, visitProjectedRenderNodes } from './util';\n/**\n * @param {?} ngContentIndex\n * @param {?} index\n * @return {?}\n */\nexport function ngContentDef(ngContentIndex, index) {\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: -1,\n        flags: 8 /* TypeNgContent */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: { index: index }\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function appendNgContent(view, renderHost, def) {\n    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\n    if (!parentEl) {\n        // Nothing to do if there is no parent element.\n        return;\n    }\n    var /** @type {?} */ ngContentIndex = /** @type {?} */ ((def.ngContent)).index;\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n}\n//# sourceMappingURL=ng_content.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { asTextData } from './types';\nimport { checkAndUpdateBinding, getParentRenderElement } from './util';\n/**\n * @param {?} checkIndex\n * @param {?} ngContentIndex\n * @param {?} staticText\n * @return {?}\n */\nexport function textDef(checkIndex, ngContentIndex, staticText) {\n    var /** @type {?} */ bindings = new Array(staticText.length - 1);\n    for (var /** @type {?} */ i = 1; i < staticText.length; i++) {\n        bindings[i - 1] = {\n            flags: 8 /* TypeProperty */,\n            name: null,\n            ns: null,\n            nonMinifiedName: null,\n            securityContext: null,\n            suffix: staticText[i],\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: 2 /* TypeText */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0, bindings: bindings,\n        bindingFlags: 8 /* TypeProperty */,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: { prefix: staticText[0] },\n        query: null,\n        ngContent: null,\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function createText(view, renderHost, def) {\n    var /** @type {?} */ renderNode;\n    var /** @type {?} */ renderer = view.renderer;\n    renderNode = renderer.createText(/** @type {?} */ ((def.text)).prefix);\n    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\n    if (parentEl) {\n        renderer.appendChild(parentEl, renderNode);\n    }\n    return { renderText: renderNode };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var /** @type {?} */ changed = false;\n    var /** @type {?} */ bindings = def.bindings;\n    var /** @type {?} */ bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        var /** @type {?} */ value = /** @type {?} */ ((def.text)).prefix;\n        if (bindLen > 0)\n            value += _addInterpolationPart(v0, bindings[0]);\n        if (bindLen > 1)\n            value += _addInterpolationPart(v1, bindings[1]);\n        if (bindLen > 2)\n            value += _addInterpolationPart(v2, bindings[2]);\n        if (bindLen > 3)\n            value += _addInterpolationPart(v3, bindings[3]);\n        if (bindLen > 4)\n            value += _addInterpolationPart(v4, bindings[4]);\n        if (bindLen > 5)\n            value += _addInterpolationPart(v5, bindings[5]);\n        if (bindLen > 6)\n            value += _addInterpolationPart(v6, bindings[6]);\n        if (bindLen > 7)\n            value += _addInterpolationPart(v7, bindings[7]);\n        if (bindLen > 8)\n            value += _addInterpolationPart(v8, bindings[8]);\n        if (bindLen > 9)\n            value += _addInterpolationPart(v9, bindings[9]);\n        var /** @type {?} */ renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateTextDynamic(view, def, values) {\n    var /** @type {?} */ bindings = def.bindings;\n    var /** @type {?} */ changed = false;\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        var /** @type {?} */ value = '';\n        for (var /** @type {?} */ i = 0; i < values.length; i++) {\n            value = value + _addInterpolationPart(values[i], bindings[i]);\n        }\n        value = /** @type {?} */ ((def.text)).prefix + value;\n        var /** @type {?} */ renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} value\n * @param {?} binding\n * @return {?}\n */\nfunction _addInterpolationPart(value, binding) {\n    var /** @type {?} */ valueStr = value != null ? value.toString() : '';\n    return valueStr + binding.suffix;\n}\n//# sourceMappingURL=text.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { checkAndUpdateElementDynamic, checkAndUpdateElementInline, createElement, listenToElementOutputs } from './element';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { appendNgContent } from './ng_content';\nimport { callLifecycleHooksChildrenFirst, checkAndUpdateDirectiveDynamic, checkAndUpdateDirectiveInline, createDirectiveInstance, createPipeInstance, createProviderInstance } from './provider';\nimport { checkAndUpdatePureExpressionDynamic, checkAndUpdatePureExpressionInline, createPureExpression } from './pure_expression';\nimport { checkAndUpdateQuery, createQuery } from './query';\nimport { createTemplateData, createViewContainerData } from './refs';\nimport { checkAndUpdateTextDynamic, checkAndUpdateTextInline, createText } from './text';\nimport { Services, asElementData, asQueryList, asTextData, shiftInitState } from './types';\nimport { NOOP, checkBindingNoChanges, isComponentView, markParentViewsForCheckProjectedViews, resolveDefinition, tokenKey } from './util';\nimport { detachProjectedView } from './view_attach';\n/**\n * @param {?} flags\n * @param {?} nodes\n * @param {?=} updateDirectives\n * @param {?=} updateRenderer\n * @return {?}\n */\nexport function viewDef(flags, nodes, updateDirectives, updateRenderer) {\n    // clone nodes and set auto calculated values\n    var /** @type {?} */ viewBindingCount = 0;\n    var /** @type {?} */ viewDisposableCount = 0;\n    var /** @type {?} */ viewNodeFlags = 0;\n    var /** @type {?} */ viewRootNodeFlags = 0;\n    var /** @type {?} */ viewMatchedQueries = 0;\n    var /** @type {?} */ currentParent = null;\n    var /** @type {?} */ currentRenderParent = null;\n    var /** @type {?} */ currentElementHasPublicProviders = false;\n    var /** @type {?} */ currentElementHasPrivateProviders = false;\n    var /** @type {?} */ lastRenderRootNode = null;\n    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\n        var /** @type {?} */ node = nodes[i];\n        node.nodeIndex = i;\n        node.parent = currentParent;\n        node.bindingIndex = viewBindingCount;\n        node.outputIndex = viewDisposableCount;\n        node.renderParent = currentRenderParent;\n        viewNodeFlags |= node.flags;\n        viewMatchedQueries |= node.matchedQueryIds;\n        if (node.element) {\n            var /** @type {?} */ elDef = node.element;\n            elDef.publicProviders =\n                currentParent ? /** @type {?} */ ((currentParent.element)).publicProviders : Object.create(null);\n            elDef.allProviders = elDef.publicProviders;\n            // Note: We assume that all providers of an element are before any child element!\n            currentElementHasPublicProviders = false;\n            currentElementHasPrivateProviders = false;\n            if (node.element.template) {\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        validateNode(currentParent, node, nodes.length);\n        viewBindingCount += node.bindings.length;\n        viewDisposableCount += node.outputs.length;\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n            lastRenderRootNode = node;\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            if (!currentElementHasPublicProviders) {\n                currentElementHasPublicProviders = true; /** @type {?} */\n                ((/** @type {?} */ ((currentParent)).element)).publicProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders); /** @type {?} */\n                ((/** @type {?} */ ((currentParent)).element)).allProviders = /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders;\n            }\n            var /** @type {?} */ isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n            var /** @type {?} */ isComponent = (node.flags & 32768 /* Component */) !== 0;\n            if (!isPrivateService || isComponent) {\n                /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\n            }\n            else {\n                if (!currentElementHasPrivateProviders) {\n                    currentElementHasPrivateProviders = true; /** @type {?} */\n                    ((/** @type {?} */ ((currentParent)).element)).allProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders);\n                } /** @type {?} */\n                ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).allProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\n            }\n            if (isComponent) {\n                /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).componentProvider = node;\n            }\n        }\n        if (currentParent) {\n            currentParent.childFlags |= node.flags;\n            currentParent.directChildFlags |= node.flags;\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\n            if (node.element && node.element.template) {\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        else {\n            viewRootNodeFlags |= node.flags;\n        }\n        if (node.childCount > 0) {\n            currentParent = node;\n            if (!isNgContainer(node)) {\n                currentRenderParent = node;\n            }\n        }\n        else {\n            // When the current node has no children, check if it is the last children of its parent.\n            // When it is, propagate the flags up.\n            // The loop is required because an element could be the last transitive children of several\n            // elements. We loop to either the root or the highest opened element (= with remaining\n            // children)\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                var /** @type {?} */ newParent = currentParent.parent;\n                if (newParent) {\n                    newParent.childFlags |= currentParent.childFlags;\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                }\n                currentParent = newParent;\n                // We also need to update the render parent & account for ng-container\n                if (currentParent && isNgContainer(currentParent)) {\n                    currentRenderParent = currentParent.renderParent;\n                }\n                else {\n                    currentRenderParent = currentParent;\n                }\n            }\n        }\n    }\n    var /** @type {?} */ handleEvent = function (view, nodeIndex, eventName, event) { return ((/** @type {?} */ ((nodes[nodeIndex].element)).handleEvent))(view, eventName, event); };\n    return {\n        // Will be filled later...\n        factory: null,\n        nodeFlags: viewNodeFlags,\n        rootNodeFlags: viewRootNodeFlags,\n        nodeMatchedQueries: viewMatchedQueries, flags: flags,\n        nodes: nodes,\n        updateDirectives: updateDirectives || NOOP,\n        updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,\n        bindingCount: viewBindingCount,\n        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\n    };\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isNgContainer(node) {\n    return (node.flags & 1 /* TypeElement */) !== 0 && /** @type {?} */ ((node.element)).name === null;\n}\n/**\n * @param {?} parent\n * @param {?} node\n * @param {?} nodeCount\n * @return {?}\n */\nfunction validateNode(parent, node, nodeCount) {\n    var /** @type {?} */ template = node.element && node.element.template;\n    if (template) {\n        if (!template.lastRenderRootNode) {\n            throw new Error(\"Illegal State: Embedded templates without nodes are not allowed!\");\n        }\n        if (template.lastRenderRootNode &&\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n            throw new Error(\"Illegal State: Last root node of a template can't have embedded views, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.flags & 20224 /* CatProvider */) {\n        var /** @type {?} */ parentFlags = parent ? parent.flags : 0;\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\n            throw new Error(\"Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.query) {\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n            throw new Error(\"Illegal State: Content Query nodes need to be children of directives, at index \" + node.nodeIndex + \"!\");\n        }\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n            throw new Error(\"Illegal State: View Query nodes have to be top level nodes, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.childCount) {\n        var /** @type {?} */ parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n            throw new Error(\"Illegal State: childCount of node leads outside of parent, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n}\n/**\n * @param {?} parent\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nexport function createEmbeddedView(parent, anchorDef, viewDef, context) {\n    // embedded views are seen as siblings to the anchor, so we need\n    // to get the parent of the anchor and use it as parentIndex.\n    var /** @type {?} */ view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);\n    initView(view, parent.component, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} root\n * @param {?} def\n * @param {?=} context\n * @return {?}\n */\nexport function createRootView(root, def, context) {\n    var /** @type {?} */ view = createView(root, root.renderer, null, null, def);\n    initView(view, context, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nexport function createComponentView(parentView, nodeDef, viewDef, hostElement) {\n    var /** @type {?} */ rendererType = /** @type {?} */ ((nodeDef.element)).componentRendererType;\n    var /** @type {?} */ compRenderer;\n    if (!rendererType) {\n        compRenderer = parentView.root.renderer;\n    }\n    else {\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n    }\n    return createView(parentView.root, compRenderer, parentView, /** @type {?} */ ((nodeDef.element)).componentProvider, viewDef);\n}\n/**\n * @param {?} root\n * @param {?} renderer\n * @param {?} parent\n * @param {?} parentNodeDef\n * @param {?} def\n * @return {?}\n */\nfunction createView(root, renderer, parent, parentNodeDef, def) {\n    var /** @type {?} */ nodes = new Array(def.nodes.length);\n    var /** @type {?} */ disposables = def.outputCount ? new Array(def.outputCount) : null;\n    var /** @type {?} */ view = {\n        def: def,\n        parent: parent,\n        viewContainerParent: null, parentNodeDef: parentNodeDef,\n        context: null,\n        component: null, nodes: nodes,\n        state: 13 /* CatInit */, root: root, renderer: renderer,\n        oldValues: new Array(def.bindingCount), disposables: disposables,\n        initIndex: -1\n    };\n    return view;\n}\n/**\n * @param {?} view\n * @param {?} component\n * @param {?} context\n * @return {?}\n */\nfunction initView(view, component, context) {\n    view.component = component;\n    view.context = context;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createViewNodes(view) {\n    var /** @type {?} */ renderHost;\n    if (isComponentView(view)) {\n        var /** @type {?} */ hostDef = view.parentNodeDef;\n        renderHost = asElementData(/** @type {?} */ ((view.parent)), /** @type {?} */ ((/** @type {?} */ ((hostDef)).parent)).nodeIndex).renderElement;\n    }\n    var /** @type {?} */ def = view.def;\n    var /** @type {?} */ nodes = view.nodes;\n    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n        var /** @type {?} */ nodeDef = def.nodes[i];\n        Services.setCurrentNode(view, i);\n        var /** @type {?} */ nodeData = void 0;\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                var /** @type {?} */ el = /** @type {?} */ (createElement(view, renderHost, nodeDef));\n                var /** @type {?} */ componentView = /** @type {?} */ ((undefined));\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\n                    var /** @type {?} */ compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentView)));\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                }\n                listenToElementOutputs(view, componentView, nodeDef, el);\n                nodeData = /** @type {?} */ ({\n                    renderElement: el,\n                    componentView: componentView,\n                    viewContainer: null,\n                    template: /** @type {?} */ ((nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined\n                });\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                }\n                break;\n            case 2 /* TypeText */:\n                nodeData = /** @type {?} */ (createText(view, renderHost, nodeDef));\n                break;\n            case 512 /* TypeClassProvider */:\n            case 1024 /* TypeFactoryProvider */:\n            case 2048 /* TypeUseExistingProvider */:\n            case 256 /* TypeValueProvider */: {\n                nodeData = nodes[i];\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                    var /** @type {?} */ instance = createProviderInstance(view, nodeDef);\n                    nodeData = /** @type {?} */ ({ instance: instance });\n                }\n                break;\n            }\n            case 16 /* TypePipe */: {\n                var /** @type {?} */ instance = createPipeInstance(view, nodeDef);\n                nodeData = /** @type {?} */ ({ instance: instance });\n                break;\n            }\n            case 16384 /* TypeDirective */: {\n                nodeData = nodes[i];\n                if (!nodeData) {\n                    var /** @type {?} */ instance = createDirectiveInstance(view, nodeDef);\n                    nodeData = /** @type {?} */ ({ instance: instance });\n                }\n                if (nodeDef.flags & 32768 /* Component */) {\n                    var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).componentView;\n                    initView(compView, nodeData.instance, nodeData.instance);\n                }\n                break;\n            }\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                nodeData = /** @type {?} */ (createPureExpression(view, nodeDef));\n                break;\n            case 67108864 /* TypeContentQuery */:\n            case 134217728 /* TypeViewQuery */:\n                nodeData = /** @type {?} */ (createQuery());\n                break;\n            case 8 /* TypeNgContent */:\n                appendNgContent(view, renderHost, nodeDef);\n                // no runtime data needed for NgContent...\n                nodeData = undefined;\n                break;\n        }\n        nodes[i] = nodeData;\n    }\n    // Create the ViewData.nodes of component views after we created everything else,\n    // so that e.g. ng-content works\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\n    // fill static content and view queries\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function checkNoChangesView(view) {\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function checkAndUpdateView(view) {\n    if (view.state & 1 /* BeforeFirstCheck */) {\n        view.state &= ~1 /* BeforeFirstCheck */;\n        view.state |= 2 /* FirstCheck */;\n    }\n    else {\n        view.state &= ~2 /* FirstCheck */;\n    }\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    var /** @type {?} */ callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n    if (view.def.flags & 2 /* OnPush */) {\n        view.state &= ~8 /* ChecksEnabled */;\n    }\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nexport function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markProjectedViewsForCheck(view) {\n    var /** @type {?} */ def = view.def;\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n        return;\n    }\n    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n        var /** @type {?} */ nodeDef = def.nodes[i];\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            var /** @type {?} */ projectedViews = asElementData(view, i).template._projectedViews;\n            if (projectedViews) {\n                for (var /** @type {?} */ i_1 = 0; i_1 < projectedViews.length; i_1++) {\n                    var /** @type {?} */ projectedView = projectedViews[i_1];\n                    projectedView.state |= 32 /* CheckProjectedView */;\n                    markParentViewsForCheckProjectedViews(projectedView, view);\n                }\n            }\n        }\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nexport function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\n    }\n    // Returning false is ok here as we would have thrown in case of a change.\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var /** @type {?} */ bindLen = nodeDef.bindings.length;\n    if (bindLen > 0)\n        checkBindingNoChanges(view, nodeDef, 0, v0);\n    if (bindLen > 1)\n        checkBindingNoChanges(view, nodeDef, 1, v1);\n    if (bindLen > 2)\n        checkBindingNoChanges(view, nodeDef, 2, v2);\n    if (bindLen > 3)\n        checkBindingNoChanges(view, nodeDef, 3, v3);\n    if (bindLen > 4)\n        checkBindingNoChanges(view, nodeDef, 4, v4);\n    if (bindLen > 5)\n        checkBindingNoChanges(view, nodeDef, 5, v5);\n    if (bindLen > 6)\n        checkBindingNoChanges(view, nodeDef, 6, v6);\n    if (bindLen > 7)\n        checkBindingNoChanges(view, nodeDef, 7, v7);\n    if (bindLen > 8)\n        checkBindingNoChanges(view, nodeDef, 8, v8);\n    if (bindLen > 9)\n        checkBindingNoChanges(view, nodeDef, 9, v9);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\n    }\n}\n/**\n * Workaround https://github.com/angular/tsickle/issues/497\n * @suppress {misplacedTypeAnnotation}\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkNoChangesQuery(view, nodeDef) {\n    var /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (queryList.dirty) {\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), \"Query \" + (/** @type {?} */ ((nodeDef.query))).id + \" not dirty\", \"Query \" + (/** @type {?} */ ((nodeDef.query))).id + \" dirty\", (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function destroyView(view) {\n    if (view.state & 128 /* Destroyed */) {\n        return;\n    }\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\n    execComponentViewsAction(view, ViewAction.Destroy);\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n    if (view.disposables) {\n        for (var /** @type {?} */ i = 0; i < view.disposables.length; i++) {\n            view.disposables[i]();\n        }\n    }\n    detachProjectedView(view);\n    if (view.renderer.destroyNode) {\n        destroyViewNodes(view);\n    }\n    if (isComponentView(view)) {\n        view.renderer.destroy();\n    }\n    view.state |= 128 /* Destroyed */;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyViewNodes(view) {\n    var /** @type {?} */ len = view.def.nodes.length;\n    for (var /** @type {?} */ i = 0; i < len; i++) {\n        var /** @type {?} */ def = view.def.nodes[i];\n        if (def.flags & 1 /* TypeElement */) {\n            /** @type {?} */ ((view.renderer.destroyNode))(asElementData(view, i).renderElement);\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            /** @type {?} */ ((view.renderer.destroyNode))(asTextData(view, i).renderText);\n        }\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n            asQueryList(view, i).destroy();\n        }\n    }\n}\n/** @enum {number} */\nvar ViewAction = {\n    CreateViewNodes: 0,\n    CheckNoChanges: 1,\n    CheckNoChangesProjectedViews: 2,\n    CheckAndUpdate: 3,\n    CheckAndUpdateProjectedViews: 4,\n    Destroy: 5,\n};\nViewAction[ViewAction.CreateViewNodes] = \"CreateViewNodes\";\nViewAction[ViewAction.CheckNoChanges] = \"CheckNoChanges\";\nViewAction[ViewAction.CheckNoChangesProjectedViews] = \"CheckNoChangesProjectedViews\";\nViewAction[ViewAction.CheckAndUpdate] = \"CheckAndUpdate\";\nViewAction[ViewAction.CheckAndUpdateProjectedViews] = \"CheckAndUpdateProjectedViews\";\nViewAction[ViewAction.Destroy] = \"Destroy\";\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execComponentViewsAction(view, action) {\n    var /** @type {?} */ def = view.def;\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n        return;\n    }\n    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n        var /** @type {?} */ nodeDef = def.nodes[i];\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\n            // a leaf\n            callViewAction(asElementData(view, i).componentView, action);\n        }\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execEmbeddedViewsAction(view, action) {\n    var /** @type {?} */ def = view.def;\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n        return;\n    }\n    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n        var /** @type {?} */ nodeDef = def.nodes[i];\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            // a leaf\n            var /** @type {?} */ embeddedViews = /** @type {?} */ ((asElementData(view, i).viewContainer))._embeddedViews;\n            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\n                callViewAction(embeddedViews[k], action);\n            }\n        }\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction callViewAction(view, action) {\n    var /** @type {?} */ viewState = view.state;\n    switch (action) {\n        case ViewAction.CheckNoChanges:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckNoChangesProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdate:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdateProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.Destroy:\n            // Note: destroyView recurses over all views,\n            // so we don't need to special case projected views here.\n            destroyView(view);\n            break;\n        case ViewAction.CreateViewNodes:\n            createViewNodes(view);\n            break;\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execProjectedViewsAction(view, action) {\n    execEmbeddedViewsAction(view, action);\n    execComponentViewsAction(view, action);\n}\n/**\n * @param {?} view\n * @param {?} queryFlags\n * @param {?} staticDynamicQueryFlag\n * @param {?} checkType\n * @return {?}\n */\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n        return;\n    }\n    var /** @type {?} */ nodeCount = view.def.nodes.length;\n    for (var /** @type {?} */ i = 0; i < nodeCount; i++) {\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\n            switch (checkType) {\n                case 0 /* CheckAndUpdate */:\n                    checkAndUpdateQuery(view, nodeDef);\n                    break;\n                case 1 /* CheckNoChanges */:\n                    checkNoChangesQuery(view, nodeDef);\n                    break;\n            }\n        }\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n            // no child has a matching query\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n//# sourceMappingURL=view.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { asPureExpressionData } from './types';\nimport { calcBindingFlags, checkAndUpdateBinding } from './util';\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nexport function purePipeDef(checkIndex, argCount) {\n    // argCount + 1 to include the pipe as first arg\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n}\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nexport function pureArrayDef(checkIndex, argCount) {\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n}\n/**\n * @param {?} checkIndex\n * @param {?} propToIndex\n * @return {?}\n */\nexport function pureObjectDef(checkIndex, propToIndex) {\n    var /** @type {?} */ keys = Object.keys(propToIndex);\n    var /** @type {?} */ nbKeys = keys.length;\n    var /** @type {?} */ propertyNames = new Array(nbKeys);\n    for (var /** @type {?} */ i = 0; i < nbKeys; i++) {\n        var /** @type {?} */ key = keys[i];\n        var /** @type {?} */ index = propToIndex[key];\n        propertyNames[index] = key;\n    }\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n}\n/**\n * @param {?} flags\n * @param {?} checkIndex\n * @param {?} propertyNames\n * @return {?}\n */\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\n    var /** @type {?} */ bindings = new Array(propertyNames.length);\n    for (var /** @type {?} */ i = 0; i < propertyNames.length; i++) {\n        var /** @type {?} */ prop = propertyNames[i];\n        bindings[i] = {\n            flags: 8 /* TypeProperty */,\n            name: prop,\n            ns: null,\n            nonMinifiedName: prop,\n            securityContext: null,\n            suffix: null\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        ngContentIndex: -1,\n        childCount: 0, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings),\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPureExpression(view, def) {\n    return { value: undefined };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var /** @type {?} */ bindings = def.bindings;\n    var /** @type {?} */ changed = false;\n    var /** @type {?} */ bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        var /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);\n        var /** @type {?} */ value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = new Array(bindings.length);\n                if (bindLen > 0)\n                    value[0] = v0;\n                if (bindLen > 1)\n                    value[1] = v1;\n                if (bindLen > 2)\n                    value[2] = v2;\n                if (bindLen > 3)\n                    value[3] = v3;\n                if (bindLen > 4)\n                    value[4] = v4;\n                if (bindLen > 5)\n                    value[5] = v5;\n                if (bindLen > 6)\n                    value[6] = v6;\n                if (bindLen > 7)\n                    value[7] = v7;\n                if (bindLen > 8)\n                    value[8] = v8;\n                if (bindLen > 9)\n                    value[9] = v9;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                if (bindLen > 0)\n                    value[/** @type {?} */ ((bindings[0].name))] = v0;\n                if (bindLen > 1)\n                    value[/** @type {?} */ ((bindings[1].name))] = v1;\n                if (bindLen > 2)\n                    value[/** @type {?} */ ((bindings[2].name))] = v2;\n                if (bindLen > 3)\n                    value[/** @type {?} */ ((bindings[3].name))] = v3;\n                if (bindLen > 4)\n                    value[/** @type {?} */ ((bindings[4].name))] = v4;\n                if (bindLen > 5)\n                    value[/** @type {?} */ ((bindings[5].name))] = v5;\n                if (bindLen > 6)\n                    value[/** @type {?} */ ((bindings[6].name))] = v6;\n                if (bindLen > 7)\n                    value[/** @type {?} */ ((bindings[7].name))] = v7;\n                if (bindLen > 8)\n                    value[/** @type {?} */ ((bindings[8].name))] = v8;\n                if (bindLen > 9)\n                    value[/** @type {?} */ ((bindings[9].name))] = v9;\n                break;\n            case 128 /* TypePurePipe */:\n                var /** @type {?} */ pipe = v0;\n                switch (bindLen) {\n                    case 1:\n                        value = pipe.transform(v0);\n                        break;\n                    case 2:\n                        value = pipe.transform(v1);\n                        break;\n                    case 3:\n                        value = pipe.transform(v1, v2);\n                        break;\n                    case 4:\n                        value = pipe.transform(v1, v2, v3);\n                        break;\n                    case 5:\n                        value = pipe.transform(v1, v2, v3, v4);\n                        break;\n                    case 6:\n                        value = pipe.transform(v1, v2, v3, v4, v5);\n                        break;\n                    case 7:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                        break;\n                    case 8:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                        break;\n                    case 9:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                        break;\n                    case 10:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                        break;\n                }\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionDynamic(view, def, values) {\n    var /** @type {?} */ bindings = def.bindings;\n    var /** @type {?} */ changed = false;\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        var /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);\n        var /** @type {?} */ value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = values;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                for (var /** @type {?} */ i = 0; i < values.length; i++) {\n                    value[/** @type {?} */ ((bindings[i].name))] = values[i];\n                }\n                break;\n            case 128 /* TypePurePipe */:\n                var /** @type {?} */ pipe = values[0];\n                var /** @type {?} */ params = values.slice(1);\n                value = pipe.transform.apply(pipe, params);\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n//# sourceMappingURL=pure_expression.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../application_ref';\nimport { DebugElement, DebugNode, EventListener, getDebugNode, indexDebugNode, removeDebugNodeFromIndex } from '../debug/debug_node';\nimport { ErrorHandler } from '../error_handler';\nimport { RendererFactory2 } from '../render/api';\nimport { Sanitizer } from '../sanitization/security';\nimport { tokenKey } from '../view/util';\nimport { isViewDebugError, viewDestroyedError, viewWrappedDebugError } from './errors';\nimport { resolveDep } from './provider';\nimport { dirtyParentQueries, getQueryValue } from './query';\nimport { createInjector, createNgModuleRef, getComponentViewDefinitionFactory } from './refs';\nimport { Services, asElementData, asPureExpressionData } from './types';\nimport { NOOP, isComponentView, renderNode, resolveDefinition, splitDepsDsl, viewParentEl } from './util';\nimport { checkAndUpdateNode, checkAndUpdateView, checkNoChangesNode, checkNoChangesView, createComponentView, createEmbeddedView, createRootView, destroyView } from './view';\nvar /** @type {?} */ initialized = false;\n/**\n * @return {?}\n */\nexport function initServicesIfNeeded() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    var /** @type {?} */ services = isDevMode() ? createDebugServices() : createProdServices();\n    Services.setCurrentNode = services.setCurrentNode;\n    Services.createRootView = services.createRootView;\n    Services.createEmbeddedView = services.createEmbeddedView;\n    Services.createComponentView = services.createComponentView;\n    Services.createNgModuleRef = services.createNgModuleRef;\n    Services.overrideProvider = services.overrideProvider;\n    Services.overrideComponentView = services.overrideComponentView;\n    Services.clearOverrides = services.clearOverrides;\n    Services.checkAndUpdateView = services.checkAndUpdateView;\n    Services.checkNoChangesView = services.checkNoChangesView;\n    Services.destroyView = services.destroyView;\n    Services.resolveDep = resolveDep;\n    Services.createDebugContext = services.createDebugContext;\n    Services.handleEvent = services.handleEvent;\n    Services.updateDirectives = services.updateDirectives;\n    Services.updateRenderer = services.updateRenderer;\n    Services.dirtyParentQueries = dirtyParentQueries;\n}\n/**\n * @return {?}\n */\nfunction createProdServices() {\n    return {\n        setCurrentNode: function () { },\n        createRootView: createProdRootView,\n        createEmbeddedView: createEmbeddedView,\n        createComponentView: createComponentView,\n        createNgModuleRef: createNgModuleRef,\n        overrideProvider: NOOP,\n        overrideComponentView: NOOP,\n        clearOverrides: NOOP,\n        checkAndUpdateView: checkAndUpdateView,\n        checkNoChangesView: checkNoChangesView,\n        destroyView: destroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: function (view, nodeIndex, eventName, event) {\n            return view.def.handleEvent(view, nodeIndex, eventName, event);\n        },\n        updateDirectives: function (view, checkType) {\n            return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n                prodCheckNoChangesNode, view);\n        },\n        updateRenderer: function (view, checkType) {\n            return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n                prodCheckNoChangesNode, view);\n        },\n    };\n}\n/**\n * @return {?}\n */\nfunction createDebugServices() {\n    return {\n        setCurrentNode: debugSetCurrentNode,\n        createRootView: debugCreateRootView,\n        createEmbeddedView: debugCreateEmbeddedView,\n        createComponentView: debugCreateComponentView,\n        createNgModuleRef: debugCreateNgModuleRef,\n        overrideProvider: debugOverrideProvider,\n        overrideComponentView: debugOverrideComponentView,\n        clearOverrides: debugClearOverrides,\n        checkAndUpdateView: debugCheckAndUpdateView,\n        checkNoChangesView: debugCheckNoChangesView,\n        destroyView: debugDestroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: debugHandleEvent,\n        updateDirectives: debugUpdateDirectives,\n        updateRenderer: debugUpdateRenderer,\n    };\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);\n    var /** @type {?} */ root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n    var /** @type {?} */ defWithOverride = applyProviderOverridesToView(def);\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n}\n/**\n * @param {?} elInjector\n * @param {?} ngModule\n * @param {?} rendererFactory\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @return {?}\n */\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n    var /** @type {?} */ sanitizer = ngModule.injector.get(Sanitizer);\n    var /** @type {?} */ errorHandler = ngModule.injector.get(ErrorHandler);\n    var /** @type {?} */ renderer = rendererFactory.createRenderer(null, null);\n    return {\n        ngModule: ngModule,\n        injector: elInjector, projectableNodes: projectableNodes,\n        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler\n    };\n}\n/**\n * @param {?} parentView\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {\n    var /** @type {?} */ defWithOverride = applyProviderOverridesToView(viewDef);\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {\n    var /** @type {?} */ overrideComponentView = viewDefOverrides.get(/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentProvider)).provider)).token);\n    if (overrideComponentView) {\n        viewDef = overrideComponentView;\n    }\n    else {\n        viewDef = applyProviderOverridesToView(viewDef);\n    }\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);\n}\n/**\n * @param {?} moduleType\n * @param {?} parentInjector\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n    var /** @type {?} */ defWithOverride = applyProviderOverridesToNgModule(def);\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n}\nvar /** @type {?} */ providerOverrides = new Map();\nvar /** @type {?} */ providerOverridesWithScope = new Map();\nvar /** @type {?} */ viewDefOverrides = new Map();\n/**\n * @param {?} override\n * @return {?}\n */\nfunction debugOverrideProvider(override) {\n    providerOverrides.set(override.token, override);\n    if (typeof override.token === 'function' && override.token.ngInjectableDef &&\n        typeof override.token.ngInjectableDef.providedIn === 'function') {\n        providerOverridesWithScope.set(/** @type {?} */ (override.token), override);\n    }\n}\n/**\n * @param {?} comp\n * @param {?} compFactory\n * @return {?}\n */\nfunction debugOverrideComponentView(comp, compFactory) {\n    var /** @type {?} */ hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n    var /** @type {?} */ compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((hostViewDef.nodes[0].element)).componentView)));\n    viewDefOverrides.set(comp, compViewDef);\n}\n/**\n * @return {?}\n */\nfunction debugClearOverrides() {\n    providerOverrides.clear();\n    providerOverridesWithScope.clear();\n    viewDefOverrides.clear();\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToView(def) {\n    if (providerOverrides.size === 0) {\n        return def;\n    }\n    var /** @type {?} */ elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });\n    for (var /** @type {?} */ i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n    }\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function findElementIndicesWithOverwrittenProviders(def) {\n        var /** @type {?} */ elIndicesWithOverwrittenProviders = [];\n        var /** @type {?} */ lastElementDef = null;\n        for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n            var /** @type {?} */ nodeDef = def.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                lastElementDef = nodeDef;\n            }\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                providerOverrides.has(/** @type {?} */ ((nodeDef.provider)).token)) {\n                elIndicesWithOverwrittenProviders.push(/** @type {?} */ ((lastElementDef)).nodeIndex);\n                lastElementDef = null;\n            }\n        }\n        return elIndicesWithOverwrittenProviders;\n    }\n    /**\n     * @param {?} viewDef\n     * @param {?} elIndex\n     * @return {?}\n     */\n    function applyProviderOverridesToElement(viewDef, elIndex) {\n        for (var /** @type {?} */ i = elIndex + 1; i < viewDef.nodes.length; i++) {\n            var /** @type {?} */ nodeDef = viewDef.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                // stop at the next element\n                return;\n            }\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                var /** @type {?} */ provider = /** @type {?} */ ((nodeDef.provider));\n                var /** @type {?} */ override = providerOverrides.get(provider.token);\n                if (override) {\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToNgModule(def) {\n    var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;\n    if (!hasOverrides) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });\n    applyProviderOverrides(def);\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function calcHasOverrides(def) {\n        var /** @type {?} */ hasOverrides = false;\n        var /** @type {?} */ hasDeprecatedOverrides = false;\n        if (providerOverrides.size === 0) {\n            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n        }\n        def.providers.forEach(function (node) {\n            var /** @type {?} */ override = providerOverrides.get(node.token);\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                hasOverrides = true;\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n            }\n        });\n        def.modules.forEach(function (module) {\n            providerOverridesWithScope.forEach(function (override, token) {\n                if (token.ngInjectableDef.providedIn === module) {\n                    hasOverrides = true;\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                }\n            });\n        });\n        return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n    }\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function applyProviderOverrides(def) {\n        for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {\n            var /** @type {?} */ provider = def.providers[i];\n            if (hasDeprecatedOverrides) {\n                // We had a bug where me made\n                // all providers lazy. Keep this logic behind a flag\n                // for migrating existing users.\n                provider.flags |= 4096 /* LazyProvider */;\n            }\n            var /** @type {?} */ override = providerOverrides.get(provider.token);\n            if (override) {\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                provider.deps = splitDepsDsl(override.deps);\n                provider.value = override.value;\n            }\n        }\n        if (providerOverridesWithScope.size > 0) {\n            var /** @type {?} */ moduleSet_1 = new Set(def.modules);\n            providerOverridesWithScope.forEach(function (override, token) {\n                if (moduleSet_1.has(token.ngInjectableDef.providedIn)) {\n                    var /** @type {?} */ provider = {\n                        token: token,\n                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n                        deps: splitDepsDsl(override.deps),\n                        value: override.value,\n                        index: def.providers.length,\n                    };\n                    def.providers.push(provider);\n                    def.providersByKey[tokenKey(token)] = provider;\n                }\n            });\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var /** @type {?} */ nodeDef = view.def.nodes[checkIndex];\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var /** @type {?} */ nodeDef = view.def.nodes[checkIndex];\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckAndUpdateView(view) {\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckNoChangesView(view) {\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugDestroyView(view) {\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n}\n/** @enum {number} */\nvar DebugAction = {\n    create: 0,\n    detectChanges: 1,\n    checkNoChanges: 2,\n    destroy: 3,\n    handleEvent: 4,\n};\nDebugAction[DebugAction.create] = \"create\";\nDebugAction[DebugAction.detectChanges] = \"detectChanges\";\nDebugAction[DebugAction.checkNoChanges] = \"checkNoChanges\";\nDebugAction[DebugAction.destroy] = \"destroy\";\nDebugAction[DebugAction.handleEvent] = \"handleEvent\";\nvar /** @type {?} */ _currentAction;\nvar /** @type {?} */ _currentView;\nvar /** @type {?} */ _currentNodeIndex;\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction debugSetCurrentNode(view, nodeIndex) {\n    _currentView = view;\n    _currentNodeIndex = nodeIndex;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\n    debugSetCurrentNode(view, nodeIndex);\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateDirectives(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateRenderer(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} givenValues\n * @return {?}\n */\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n    var /** @type {?} */ changed = (/** @type {?} */ (checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));\n    if (changed) {\n        var /** @type {?} */ values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            var /** @type {?} */ bindingValues = {};\n            for (var /** @type {?} */ i = 0; i < nodeDef.bindings.length; i++) {\n                var /** @type {?} */ binding = nodeDef.bindings[i];\n                var /** @type {?} */ value = values[i];\n                if (binding.flags & 8 /* TypeProperty */) {\n                    bindingValues[normalizeDebugBindingName(/** @type {?} */ ((binding.nonMinifiedName)))] =\n                        normalizeDebugBindingValue(value);\n                }\n            }\n            var /** @type {?} */ elDef = /** @type {?} */ ((nodeDef.parent));\n            var /** @type {?} */ el = asElementData(view, elDef.nodeIndex).renderElement;\n            if (!/** @type {?} */ ((elDef.element)).name) {\n                // a comment.\n                view.renderer.setValue(el, \"bindings=\" + JSON.stringify(bindingValues, null, 2));\n            }\n            else {\n                // a regular element.\n                for (var /** @type {?} */ attr in bindingValues) {\n                    var /** @type {?} */ value = bindingValues[attr];\n                    if (value != null) {\n                        view.renderer.setAttribute(el, attr, value);\n                    }\n                    else {\n                        view.renderer.removeAttribute(el, attr);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} values\n * @return {?}\n */\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n    (/** @type {?} */ (checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return \"ng-reflect-\" + name;\n}\nvar /** @type {?} */ CAMEL_CASE_REGEXP = /([A-Z])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return '-' + m[1].toLowerCase();\n    });\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (/** @type {?} */ e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextDirectiveWithBinding(view, nodeIndex) {\n    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\n    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\nvar DebugContext_ = /** @class */ (function () {\n    function DebugContext_(view, nodeIndex) {\n        this.view = view;\n        this.nodeIndex = nodeIndex;\n        if (nodeIndex == null) {\n            this.nodeIndex = nodeIndex = 0;\n        }\n        this.nodeDef = view.def.nodes[nodeIndex];\n        var /** @type {?} */ elDef = this.nodeDef;\n        var /** @type {?} */ elView = view;\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n            elDef = /** @type {?} */ ((elDef.parent));\n        }\n        if (!elDef) {\n            while (!elDef && elView) {\n                elDef = /** @type {?} */ ((viewParentEl(elView)));\n                elView = /** @type {?} */ ((elView.parent));\n            }\n        }\n        this.elDef = elDef;\n        this.elView = elView;\n    }\n    Object.defineProperty(DebugContext_.prototype, \"elOrCompView\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // Has to be done lazily as we use the DebugContext also during creation of elements...\n            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return createInjector(this.elView, this.elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.elOrCompView.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.elOrCompView.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ tokens = [];\n            if (this.elDef) {\n                for (var /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    var /** @type {?} */ childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        tokens.push(/** @type {?} */ ((childDef.provider)).token);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return tokens;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ references = {};\n            if (this.elDef) {\n                collectReferences(this.elView, this.elDef, references);\n                for (var /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    var /** @type {?} */ childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        collectReferences(this.elView, childDef, references);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return references;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"componentRenderElement\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ elData = findHostElement(this.elOrCompView);\n            return elData ? elData.renderElement : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"renderNode\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n                renderNode(this.elView, this.elDef);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    DebugContext_.prototype.logError = /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    function (console) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        var /** @type {?} */ logViewDef;\n        var /** @type {?} */ logNodeIndex;\n        if (this.nodeDef.flags & 2 /* TypeText */) {\n            logViewDef = this.view.def;\n            logNodeIndex = this.nodeDef.nodeIndex;\n        }\n        else {\n            logViewDef = this.elView.def;\n            logNodeIndex = this.elDef.nodeIndex;\n        }\n        // Note: we only generate a log function for text and element nodes\n        // to make the generated code as small as possible.\n        var /** @type {?} */ renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n        var /** @type {?} */ currRenderNodeIndex = -1;\n        var /** @type {?} */ nodeLogger = function () {\n            currRenderNodeIndex++;\n            if (currRenderNodeIndex === renderNodeIndex) {\n                return (_a = console.error).bind.apply(_a, [console].concat(values));\n            }\n            else {\n                return NOOP;\n            }\n            var _a;\n        }; /** @type {?} */\n        ((logViewDef.factory))(nodeLogger);\n        if (currRenderNodeIndex < renderNodeIndex) {\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n            console.error.apply(console, values);\n        }\n    };\n    return DebugContext_;\n}());\nfunction DebugContext__tsickle_Closure_declarations() {\n    /** @type {?} */\n    DebugContext_.prototype.nodeDef;\n    /** @type {?} */\n    DebugContext_.prototype.elView;\n    /** @type {?} */\n    DebugContext_.prototype.elDef;\n    /** @type {?} */\n    DebugContext_.prototype.view;\n    /** @type {?} */\n    DebugContext_.prototype.nodeIndex;\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction getRenderNodeIndex(viewDef, nodeIndex) {\n    var /** @type {?} */ renderNodeIndex = -1;\n    for (var /** @type {?} */ i = 0; i <= nodeIndex; i++) {\n        var /** @type {?} */ nodeDef = viewDef.nodes[i];\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            renderNodeIndex++;\n        }\n    }\n    return renderNodeIndex;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction findHostElement(view) {\n    while (view && !isComponentView(view)) {\n        view = /** @type {?} */ ((view.parent));\n    }\n    if (view.parent) {\n        return asElementData(view.parent, /** @type {?} */ ((viewParentEl(view))).nodeIndex);\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} references\n * @return {?}\n */\nfunction collectReferences(view, nodeDef, references) {\n    for (var /** @type {?} */ refName in nodeDef.references) {\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n    }\n}\n/**\n * @param {?} action\n * @param {?} fn\n * @param {?} self\n * @param {?} args\n * @return {?}\n */\nfunction callWithDebugContext(action, fn, self, args) {\n    var /** @type {?} */ oldAction = _currentAction;\n    var /** @type {?} */ oldView = _currentView;\n    var /** @type {?} */ oldNodeIndex = _currentNodeIndex;\n    try {\n        _currentAction = action;\n        var /** @type {?} */ result = fn.apply(self, args);\n        _currentView = oldView;\n        _currentNodeIndex = oldNodeIndex;\n        _currentAction = oldAction;\n        return result;\n    }\n    catch (/** @type {?} */ e) {\n        if (isViewDebugError(e) || !_currentView) {\n            throw e;\n        }\n        throw viewWrappedDebugError(e, /** @type {?} */ ((getCurrentDebugContext())));\n    }\n}\n/**\n * @return {?}\n */\nexport function getCurrentDebugContext() {\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n}\nvar DebugRendererFactory2 = /** @class */ (function () {\n    function DebugRendererFactory2(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.createRenderer = /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    function (element, renderData) {\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.begin = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.end = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.whenRenderingDone = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.whenRenderingDone) {\n            return this.delegate.whenRenderingDone();\n        }\n        return Promise.resolve(null);\n    };\n    return DebugRendererFactory2;\n}());\nfunction DebugRendererFactory2_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DebugRendererFactory2.prototype.delegate;\n}\nvar DebugRenderer2 = /** @class */ (function () {\n    function DebugRenderer2(delegate) {\n        this.delegate = delegate;\n        this.data = this.delegate.data;\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.destroyNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        removeDebugNodeFromIndex(/** @type {?} */ ((getDebugNode(node))));\n        if (this.delegate.destroyNode) {\n            this.delegate.destroyNode(node);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRenderer2.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { this.delegate.destroy(); };\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createElement = /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (name, namespace) {\n        var /** @type {?} */ el = this.delegate.createElement(name, namespace);\n        var /** @type {?} */ debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            var /** @type {?} */ debugEl = new DebugElement(el, null, debugCtx);\n            debugEl.name = name;\n            indexDebugNode(debugEl);\n        }\n        return el;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createComment = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var /** @type {?} */ comment = this.delegate.createComment(value);\n        var /** @type {?} */ debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            indexDebugNode(new DebugNode(comment, null, debugCtx));\n        }\n        return comment;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createText = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var /** @type {?} */ text = this.delegate.createText(value);\n        var /** @type {?} */ debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            indexDebugNode(new DebugNode(text, null, debugCtx));\n        }\n        return text;\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.appendChild = /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    function (parent, newChild) {\n        var /** @type {?} */ debugEl = getDebugNode(parent);\n        var /** @type {?} */ debugChildEl = getDebugNode(newChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.addChild(debugChildEl);\n        }\n        this.delegate.appendChild(parent, newChild);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.insertBefore = /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    function (parent, newChild, refChild) {\n        var /** @type {?} */ debugEl = getDebugNode(parent);\n        var /** @type {?} */ debugChildEl = getDebugNode(newChild);\n        var /** @type {?} */ debugRefEl = /** @type {?} */ ((getDebugNode(refChild)));\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.insertBefore(debugRefEl, debugChildEl);\n        }\n        this.delegate.insertBefore(parent, newChild, refChild);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeChild = /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    function (parent, oldChild) {\n        var /** @type {?} */ debugEl = getDebugNode(parent);\n        var /** @type {?} */ debugChildEl = getDebugNode(oldChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.removeChild(debugChildEl);\n        }\n        this.delegate.removeChild(parent, oldChild);\n    };\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    DebugRenderer2.prototype.selectRootElement = /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    function (selectorOrNode) {\n        var /** @type {?} */ el = this.delegate.selectRootElement(selectorOrNode);\n        var /** @type {?} */ debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            indexDebugNode(new DebugElement(el, null, debugCtx));\n        }\n        return el;\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setAttribute = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (el, name, value, namespace) {\n        var /** @type {?} */ debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = value;\n        }\n        this.delegate.setAttribute(el, name, value, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeAttribute = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (el, name, namespace) {\n        var /** @type {?} */ debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = null;\n        }\n        this.delegate.removeAttribute(el, name, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DebugRenderer2.prototype.addClass = /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    function (el, name) {\n        var /** @type {?} */ debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.classes[name] = true;\n        }\n        this.delegate.addClass(el, name);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeClass = /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    function (el, name) {\n        var /** @type {?} */ debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.classes[name] = false;\n        }\n        this.delegate.removeClass(el, name);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setStyle = /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    function (el, style, value, flags) {\n        var /** @type {?} */ debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.styles[style] = value;\n        }\n        this.delegate.setStyle(el, style, value, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeStyle = /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    function (el, style, flags) {\n        var /** @type {?} */ debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.styles[style] = null;\n        }\n        this.delegate.removeStyle(el, style, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setProperty = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (el, name, value) {\n        var /** @type {?} */ debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.properties[name] = value;\n        }\n        this.delegate.setProperty(el, name, value);\n    };\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    DebugRenderer2.prototype.listen = /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    function (target, eventName, callback) {\n        if (typeof target !== 'string') {\n            var /** @type {?} */ debugEl = getDebugNode(target);\n            if (debugEl) {\n                debugEl.listeners.push(new EventListener(eventName, callback));\n            }\n        }\n        return this.delegate.listen(target, eventName, callback);\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.parentNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { return this.delegate.parentNode(node); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.nextSibling = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { return this.delegate.nextSibling(node); };\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setValue = /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    function (node, value) { return this.delegate.setValue(node, value); };\n    return DebugRenderer2;\n}());\nfunction DebugRenderer2_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DebugRenderer2.prototype.data;\n    /** @type {?} */\n    DebugRenderer2.prototype.delegate;\n}\n//# sourceMappingURL=services.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { NgModuleFactory } from '../linker/ng_module_factory';\nimport { initServicesIfNeeded } from './services';\nimport { Services } from './types';\nimport { resolveDefinition } from './util';\n/**\n * @param {?} override\n * @return {?}\n */\nexport function overrideProvider(override) {\n    initServicesIfNeeded();\n    return Services.overrideProvider(override);\n}\n/**\n * @param {?} comp\n * @param {?} componentFactory\n * @return {?}\n */\nexport function overrideComponentView(comp, componentFactory) {\n    initServicesIfNeeded();\n    return Services.overrideComponentView(comp, componentFactory);\n}\n/**\n * @return {?}\n */\nexport function clearOverrides() {\n    initServicesIfNeeded();\n    return Services.clearOverrides();\n}\n/**\n * @param {?} ngModuleType\n * @param {?} bootstrapComponents\n * @param {?} defFactory\n * @return {?}\n */\nexport function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\nvar NgModuleFactory_ = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleFactory_, _super);\n    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.moduleType = moduleType;\n        _this._bootstrapComponents = _bootstrapComponents;\n        _this._ngModuleDefFactory = _ngModuleDefFactory;\n        return _this;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    NgModuleFactory_.prototype.create = /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    function (parentInjector) {\n        initServicesIfNeeded();\n        var /** @type {?} */ def = resolveDefinition(this._ngModuleDefFactory);\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n    };\n    return NgModuleFactory_;\n}(NgModuleFactory));\nfunction NgModuleFactory__tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleFactory_.prototype.moduleType;\n    /** @type {?} */\n    NgModuleFactory_.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleFactory_.prototype._ngModuleDefFactory;\n}\n//# sourceMappingURL=entrypoint.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertEqual } from './assert';\n/**\n * If this is the first template pass, any ngOnInit or ngDoCheck hooks will be queued into\n * TView.initHooks during directiveCreate.\n *\n * The directive index and hook type are encoded into one number (1st bit: type, remaining bits:\n * directive index), then saved in the even indices of the initHooks array. The odd indices\n * hold the hook functions themselves.\n *\n * @param {?} index The index of the directive in LView.data\n * @param {?} onInit\n * @param {?} doCheck\n * @param {?} tView The current TView\n * @return {?}\n */\nexport function queueInitHooks(index, onInit, doCheck, tView) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n    if (onInit) {\n        (tView.initHooks || (tView.initHooks = [])).push(index, onInit);\n    }\n    if (doCheck) {\n        (tView.initHooks || (tView.initHooks = [])).push(index, doCheck);\n        (tView.checkHooks || (tView.checkHooks = [])).push(index, doCheck);\n    }\n}\n/**\n * Loops through the directives on a node and queues all their hooks except ngOnInit\n * and ngDoCheck, which are queued separately in directiveCreate.\n * @param {?} flags\n * @param {?} currentView\n * @return {?}\n */\nexport function queueLifecycleHooks(flags, currentView) {\n    var /** @type {?} */ tView = currentView.tView;\n    if (tView.firstTemplatePass === true) {\n        var /** @type {?} */ start = flags >> 13 /* INDX_SHIFT */;\n        var /** @type {?} */ size = (flags & 8190 /* SIZE_MASK */) >> 1 /* SIZE_SHIFT */;\n        var /** @type {?} */ end = start + size;\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n        // hooks for projected components and directives must be called *before* their hosts.\n        for (var /** @type {?} */ i = start; i < end; i++) {\n            var /** @type {?} */ def = (/** @type {?} */ (((tView.directives))[i]));\n            queueContentHooks(def, tView, i);\n            queueViewHooks(def, tView, i);\n            queueDestroyHooks(def, tView, i);\n        }\n    }\n}\n/**\n * Queues afterContentInit and afterContentChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueContentHooks(def, tView, i) {\n    if (def.afterContentInit) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentInit);\n    }\n    if (def.afterContentChecked) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentChecked);\n        (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, def.afterContentChecked);\n    }\n}\n/**\n * Queues afterViewInit and afterViewChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueViewHooks(def, tView, i) {\n    if (def.afterViewInit) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewInit);\n    }\n    if (def.afterViewChecked) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewChecked);\n        (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, def.afterViewChecked);\n    }\n}\n/**\n * Queues onDestroy hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueDestroyHooks(def, tView, i) {\n    if (def.onDestroy != null) {\n        (tView.destroyHooks || (tView.destroyHooks = [])).push(i, def.onDestroy);\n    }\n}\n/**\n * Calls onInit and doCheck calls if they haven't already been called.\n *\n * @param {?} currentView The current view\n * @param {?} tView\n * @param {?} creationMode\n * @return {?}\n */\nexport function executeInitHooks(currentView, tView, creationMode) {\n    if (currentView.lifecycleStage === 1 /* INIT */) {\n        executeHooks(/** @type {?} */ ((currentView.directives)), tView.initHooks, tView.checkHooks, creationMode);\n        currentView.lifecycleStage = 2 /* AFTER_INIT */;\n    }\n}\n/**\n * Iterates over afterViewInit and afterViewChecked functions and calls them.\n *\n * @param {?} data\n * @param {?} allHooks\n * @param {?} checkHooks\n * @param {?} creationMode\n * @return {?}\n */\nexport function executeHooks(data, allHooks, checkHooks, creationMode) {\n    var /** @type {?} */ hooksToCall = creationMode ? allHooks : checkHooks;\n    if (hooksToCall) {\n        callHooks(data, hooksToCall);\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * creation mode.\n *\n * @param {?} data\n * @param {?} arr The array in which the hooks are found\n * @return {?}\n */\nexport function callHooks(data, arr) {\n    for (var /** @type {?} */ i = 0; i < arr.length; i += 2) {\n        (/** @type {?} */ (arr[i + 1])).call(data[/** @type {?} */ (arr[i])]);\n    }\n}\n//# sourceMappingURL=hooks.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nif (typeof ngDevMode == 'undefined') {\n    if (typeof window != 'undefined')\n        (/** @type {?} */ (window)).ngDevMode = true;\n    if (typeof self != 'undefined')\n        (/** @type {?} */ (self)).ngDevMode = true;\n    if (typeof global != 'undefined')\n        (/** @type {?} */ (global)).ngDevMode = true;\n}\nexport var /** @type {?} */ _ngDevMode = true;\n//# sourceMappingURL=ng_dev_mode.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertEqual, assertNotNull } from './assert';\n/**\n * @param {?} node\n * @param {?} type\n * @return {?}\n */\nexport function assertNodeType(node, type) {\n    assertNotNull(node, 'should be called with a node');\n    assertEqual(node.type, type, \"should be a \" + typeName(type));\n}\n/**\n * @param {?} node\n * @param {...?} types\n * @return {?}\n */\nexport function assertNodeOfPossibleTypes(node) {\n    var types = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        types[_i - 1] = arguments[_i];\n    }\n    assertNotNull(node, 'should be called with a node');\n    var /** @type {?} */ found = types.some(function (type) { return node.type === type; });\n    assertEqual(found, true, \"Should be one of \" + types.map(typeName).join(', '));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction typeName(type) {\n    if (type == 1 /* Projection */)\n        return 'Projection';\n    if (type == 0 /* Container */)\n        return 'Container';\n    if (type == 2 /* View */)\n        return 'View';\n    if (type == 3 /* Element */)\n        return 'Element';\n    return '<unknown>';\n}\n//# sourceMappingURL=node_assert.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The state associated with an LContainer\n * @record\n */\nexport function LContainer() { }\nfunction LContainer_tsickle_Closure_declarations() {\n    /**\n     * The next active index in the views array to read or write to. This helps us\n     * keep track of where we are in the views array.\n     * @type {?}\n     */\n    LContainer.prototype.nextIndex;\n    /**\n     * This allows us to jump from a container to a sibling container or\n     * component view with the same parent, so we can remove listeners efficiently.\n     * @type {?}\n     */\n    LContainer.prototype.next;\n    /**\n     * Access to the parent view is necessary so we can propagate back\n     * up from inside a container to parent.next.\n     * @type {?}\n     */\n    LContainer.prototype.parent;\n    /**\n     * A list of the container's currently active child views. Views will be inserted\n     * here as they are added and spliced from here when they are removed. We need\n     * to keep a record of current views so we know which views are already in the DOM\n     * (and don't need to be re-added) and so we can remove views from the DOM when they\n     * are no longer required.\n     * @type {?}\n     */\n    LContainer.prototype.views;\n    /**\n     * Parent Element which will contain the location where all of the Views will be\n     * inserted into to.\n     *\n     * If `renderParent` is `null` it is headless. This means that it is contained\n     * in another `LViewNode` which in turn is contained in another `LContainerNode` and\n     * therefore it does not yet have its own parent.\n     *\n     * If `renderParent` is not `null` then it may be:\n     * - same as `LContainerNode.parent` in which case it is just a normal container.\n     * - different from `LContainerNode.parent` in which case it has been re-projected.\n     *   In other words `LContainerNode.parent` is logical parent where as\n     *   `LContainer.projectedParent` is render parent.\n     *\n     * When views are inserted into `LContainerNode` then `renderParent` is:\n     * - `null`, we are in `LViewNode` keep going up a hierarchy until actual\n     *   `renderParent` is found.\n     * - not `null`, then use the `projectedParent.native` as the `RElement` to insert\n     *   `LViewNode`s into.\n     * @type {?}\n     */\n    LContainer.prototype.renderParent;\n    /**\n     * The template extracted from the location of the Container.\n     * @type {?}\n     */\n    LContainer.prototype.template;\n    /**\n     * A count of dynamic views rendered into this container. If this is non-zero, the `views` array\n     * will be traversed when refreshing dynamic views on this container.\n     * @type {?}\n     */\n    LContainer.prototype.dynamicViewCount;\n    /**\n     * Queries active for this container - all the views inserted to / removed from\n     * this container are reported to queries referenced here.\n     * @type {?}\n     */\n    LContainer.prototype.queries;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport var /** @type {?} */ unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=container.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Must use this method for CD (instead of === ) since NaN !== NaN\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function isDifferent(a, b) {\n    // NaN is the only value that is not equal to itself so the first\n    // test checks if both a and b are not NaN\n    return !(a !== a && b !== b) && a !== b;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function stringify(value) {\n    if (typeof value == 'function')\n        return value.name || value;\n    if (typeof value == 'string')\n        return value;\n    if (value == null)\n        return '';\n    return '' + value;\n}\n/**\n *  Function that throws a \"not implemented\" error so it's clear certain\n *  behaviors/methods aren't yet ready.\n *\n * @return {?} Not implemented error\n */\nexport function notImplemented() {\n    return new Error('NotImplemented');\n}\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n * @param {?} list\n * @return {?}\n */\nexport function flatten(list) {\n    var /** @type {?} */ result = [];\n    var /** @type {?} */ i = 0;\n    while (i < list.length) {\n        var /** @type {?} */ item = list[i];\n        if (Array.isArray(item)) {\n            if (item.length > 0) {\n                list = item.concat(list.slice(i + 1));\n                i = 0;\n            }\n            else {\n                i++;\n            }\n        }\n        else {\n            result.push(item);\n            i++;\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { callHooks } from './hooks';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/container';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/projection';\nimport { isProceduralRenderer, unusedValueExportToPlacateAjd as unused4 } from './interfaces/renderer';\nimport { unusedValueExportToPlacateAjd as unused5 } from './interfaces/view';\nimport { assertNodeType } from './node_assert';\nimport { stringify } from './util';\nvar /** @type {?} */ unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4 + unused5;\n/**\n * Returns the first RNode following the given LNode in the same parent DOM element.\n *\n * This is needed in order to insert the given node with insertBefore.\n *\n * @param {?} node The node whose following DOM node must be found.\n * @param {?} stopNode A parent node at which the lookup in the tree should be stopped, or null if the\n * lookup should not be stopped until the result is found.\n * @return {?} RNode before which the provided node should be inserted or null if the lookup was\n * stopped\n * or if there is no native node after the given logical node in the same native parent.\n */\nfunction findNextRNodeSibling(node, stopNode) {\n    var /** @type {?} */ currentNode = node;\n    while (currentNode && currentNode !== stopNode) {\n        var /** @type {?} */ pNextOrParent = currentNode.pNextOrParent;\n        if (pNextOrParent) {\n            while (pNextOrParent.type !== 1 /* Projection */) {\n                var /** @type {?} */ nativeNode = findFirstRNode(pNextOrParent);\n                if (nativeNode) {\n                    return nativeNode;\n                }\n                pNextOrParent = /** @type {?} */ ((pNextOrParent.pNextOrParent));\n            }\n            currentNode = pNextOrParent;\n        }\n        else {\n            var /** @type {?} */ currentSibling = currentNode.next;\n            while (currentSibling) {\n                var /** @type {?} */ nativeNode = findFirstRNode(currentSibling);\n                if (nativeNode) {\n                    return nativeNode;\n                }\n                currentSibling = currentSibling.next;\n            }\n            var /** @type {?} */ parentNode = currentNode.parent;\n            currentNode = null;\n            if (parentNode) {\n                var /** @type {?} */ parentType = parentNode.type;\n                if (parentType === 0 /* Container */ || parentType === 2 /* View */) {\n                    currentNode = parentNode;\n                }\n            }\n        }\n    }\n    return null;\n}\n/**\n * Get the next node in the LNode tree, taking into account the place where a node is\n * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n *\n * @param {?} node The node whose next node in the LNode tree must be found.\n * @return {?} LNode|null The next sibling in the LNode tree.\n */\nfunction getNextLNodeWithProjection(node) {\n    var /** @type {?} */ pNextOrParent = node.pNextOrParent;\n    if (pNextOrParent) {\n        // The node is projected\n        var /** @type {?} */ isLastProjectedNode = pNextOrParent.type === 1 /* Projection */;\n        // returns pNextOrParent if we are not at the end of the list, null otherwise\n        return isLastProjectedNode ? null : pNextOrParent;\n    }\n    // returns node.next because the the node is not projected\n    return node.next;\n}\n/**\n * Find the next node in the LNode tree, taking into account the place where a node is\n * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n *\n * If there is no sibling node, this function goes to the next sibling of the parent node...\n * until it reaches rootNode (at which point null is returned).\n *\n * @param {?} initialNode The node whose following node in the LNode tree must be found.\n * @param {?} rootNode The root node at which the lookup should stop.\n * @return {?} LNode|null The following node in the LNode tree.\n */\nfunction getNextOrParentSiblingNode(initialNode, rootNode) {\n    var /** @type {?} */ node = initialNode;\n    var /** @type {?} */ nextNode = getNextLNodeWithProjection(node);\n    while (node && !nextNode) {\n        // if node.pNextOrParent is not null here, it is not the next node\n        // (because, at this point, nextNode is null, so it is the parent)\n        node = node.pNextOrParent || node.parent;\n        if (node === rootNode) {\n            return null;\n        }\n        nextNode = node && getNextLNodeWithProjection(node);\n    }\n    return nextNode;\n}\n/**\n * Returns the first RNode inside the given LNode.\n *\n * @param {?} rootNode\n * @return {?} RNode The first RNode of the given LNode or null if there is none.\n */\nfunction findFirstRNode(rootNode) {\n    var /** @type {?} */ node = rootNode;\n    while (node) {\n        var /** @type {?} */ nextNode = null;\n        if (node.type === 3 /* Element */) {\n            // A LElementNode has a matching RNode in LElementNode.native\n            return (/** @type {?} */ (node)).native;\n        }\n        else if (node.type === 0 /* Container */) {\n            var /** @type {?} */ lContainerNode = (/** @type {?} */ (node));\n            var /** @type {?} */ childContainerData = lContainerNode.dynamicLContainerNode ?\n                lContainerNode.dynamicLContainerNode.data :\n                lContainerNode.data;\n            nextNode = childContainerData.views.length ? childContainerData.views[0].child : null;\n        }\n        else if (node.type === 1 /* Projection */) {\n            // For Projection look at the first projected node\n            nextNode = (/** @type {?} */ (node)).data.head;\n        }\n        else {\n            // Otherwise look at the first child\n            nextNode = (/** @type {?} */ (node)).child;\n        }\n        node = nextNode === null ? getNextOrParentSiblingNode(node, rootNode) : nextNode;\n    }\n    return null;\n}\n/**\n * @param {?} value\n * @param {?} renderer\n * @return {?}\n */\nexport function createTextNode(value, renderer) {\n    return isProceduralRenderer(renderer) ? renderer.createText(stringify(value)) :\n        renderer.createTextNode(stringify(value));\n}\n/**\n * @param {?} container\n * @param {?} rootNode\n * @param {?} insertMode\n * @param {?=} beforeNode\n * @return {?}\n */\nexport function addRemoveViewFromContainer(container, rootNode, insertMode, beforeNode) {\n    ngDevMode && assertNodeType(container, 0 /* Container */);\n    ngDevMode && assertNodeType(rootNode, 2 /* View */);\n    var /** @type {?} */ parentNode = container.data.renderParent;\n    var /** @type {?} */ parent = parentNode ? parentNode.native : null;\n    var /** @type {?} */ node = rootNode.child;\n    if (parent) {\n        while (node) {\n            var /** @type {?} */ nextNode = null;\n            var /** @type {?} */ renderer = container.view.renderer;\n            if (node.type === 3 /* Element */) {\n                if (insertMode) {\n                    if (!node.native) {\n                        // If the native element doesn't exist, this is a bound text node that hasn't yet been\n                        // created because update mode has not run (occurs when a bound text node is a root\n                        // node of a dynamically created view). See textBinding() in instructions for ctx.\n                        (/** @type {?} */ (node)).native = createTextNode('', renderer);\n                    }\n                    isProceduralRenderer(renderer) ?\n                        renderer.insertBefore(parent, /** @type {?} */ ((node.native)), /** @type {?} */ (beforeNode)) :\n                        parent.insertBefore(/** @type {?} */ ((node.native)), /** @type {?} */ (beforeNode), true);\n                }\n                else {\n                    isProceduralRenderer(renderer) ? renderer.removeChild(/** @type {?} */ (parent), /** @type {?} */ ((node.native))) :\n                        parent.removeChild(/** @type {?} */ ((node.native)));\n                }\n                nextNode = node.next;\n            }\n            else if (node.type === 0 /* Container */) {\n                // if we get to a container, it must be a root node of a view because we are only\n                // propagating down into child views / containers and not child elements\n                var /** @type {?} */ childContainerData = (/** @type {?} */ (node)).data;\n                childContainerData.renderParent = parentNode;\n                nextNode = childContainerData.views.length ? childContainerData.views[0].child : null;\n            }\n            else if (node.type === 1 /* Projection */) {\n                nextNode = (/** @type {?} */ (node)).data.head;\n            }\n            else {\n                nextNode = (/** @type {?} */ (node)).child;\n            }\n            if (nextNode === null) {\n                node = getNextOrParentSiblingNode(node, rootNode);\n            }\n            else {\n                node = nextNode;\n            }\n        }\n    }\n}\n/**\n * Traverses the tree of component views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  \\@param rootView The view to destroy\n * @param {?} rootView\n * @return {?}\n */\nexport function destroyViewTree(rootView) {\n    var /** @type {?} */ viewOrContainer = rootView;\n    while (viewOrContainer) {\n        var /** @type {?} */ next = null;\n        if (viewOrContainer.views && viewOrContainer.views.length) {\n            next = viewOrContainer.views[0].data;\n        }\n        else if (viewOrContainer.child) {\n            next = viewOrContainer.child;\n        }\n        else if (viewOrContainer.next) {\n            cleanUpView(/** @type {?} */ (viewOrContainer));\n            next = viewOrContainer.next;\n        }\n        if (next == null) {\n            // If the viewOrContainer is the rootView, then the cleanup is done twice.\n            // Without this check, ngOnDestroy would be called twice for a directive on an element.\n            while (viewOrContainer && !/** @type {?} */ ((viewOrContainer)).next && viewOrContainer !== rootView) {\n                cleanUpView(/** @type {?} */ (viewOrContainer));\n                viewOrContainer = getParentState(viewOrContainer, rootView);\n            }\n            cleanUpView(/** @type {?} */ (viewOrContainer) || rootView);\n            next = viewOrContainer && viewOrContainer.next;\n        }\n        viewOrContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param {?} container The container into which the view should be inserted\n * @param {?} newView The view to insert\n * @param {?} index The index at which to insert the view\n * @return {?} The inserted view\n */\nexport function insertView(container, newView, index) {\n    var /** @type {?} */ state = container.data;\n    var /** @type {?} */ views = state.views;\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        setViewNext(views[index - 1], newView);\n    }\n    if (index < views.length) {\n        setViewNext(newView, views[index]);\n        views.splice(index, 0, newView);\n    }\n    else {\n        views.push(newView);\n    }\n    // If the container's renderParent is null, we know that it is a root node of its own parent view\n    // and we should wait until that parent processes its nodes (otherwise, we will insert this view's\n    // nodes twice - once now and once when its parent inserts its views).\n    if (container.data.renderParent !== null) {\n        var /** @type {?} */ beforeNode = findNextRNodeSibling(newView, container);\n        if (!beforeNode) {\n            var /** @type {?} */ containerNextNativeNode = container.native;\n            if (containerNextNativeNode === undefined) {\n                containerNextNativeNode = container.native = findNextRNodeSibling(container, null);\n            }\n            beforeNode = containerNextNativeNode;\n        }\n        addRemoveViewFromContainer(container, newView, true, beforeNode);\n    }\n    return newView;\n}\n/**\n * Removes a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM and conducts cleanup (e.g. removing\n * listeners, calling onDestroys).\n *\n * @param {?} container The container from which to remove a view\n * @param {?} removeIndex The index of the view to remove\n * @return {?} The removed view\n */\nexport function removeView(container, removeIndex) {\n    var /** @type {?} */ views = container.data.views;\n    var /** @type {?} */ viewNode = views[removeIndex];\n    if (removeIndex > 0) {\n        setViewNext(views[removeIndex - 1], viewNode.next);\n    }\n    views.splice(removeIndex, 1);\n    viewNode.next = null;\n    destroyViewTree(viewNode.data);\n    addRemoveViewFromContainer(container, viewNode, false);\n    // Notify query that view has been removed\n    container.data.queries && container.data.queries.removeView(removeIndex);\n    return viewNode;\n}\n/**\n * Sets a next on the view node, so views in for loops can easily jump from\n * one view to the next to add/remove elements. Also adds the LView (view.data)\n * to the view tree for easy traversal when cleaning up the view.\n *\n * @param {?} view The view to set up\n * @param {?} next The view's new next\n * @return {?}\n */\nexport function setViewNext(view, next) {\n    view.next = next;\n    view.data.next = next ? next.data : null;\n}\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param {?} state The LViewOrLContainer for which we need a parent state\n * @param {?} rootView The rootView, so we don't propagate too far up the view tree\n * @return {?} The correct parent LViewOrLContainer\n */\nexport function getParentState(state, rootView) {\n    var /** @type {?} */ node;\n    if ((node = /** @type {?} */ (((/** @type {?} */ (state)))).node) && node.type === 2 /* View */) {\n        // if it's an embedded view, the state needs to go up to the container, in case the\n        // container has a next\n        return /** @type {?} */ (((node.parent)).data);\n    }\n    else {\n        // otherwise, use parent view for containers or component views\n        return state.parent === rootView ? null : state.parent;\n    }\n}\n/**\n * Removes all listeners and call all onDestroys in a given view.\n *\n * @param {?} view The LView to clean up\n * @return {?}\n */\nfunction cleanUpView(view) {\n    removeListeners(view);\n    executeOnDestroys(view);\n    executePipeOnDestroys(view);\n}\n/**\n * Removes listeners and unsubscribes from output subscriptions\n * @param {?} view\n * @return {?}\n */\nfunction removeListeners(view) {\n    var /** @type {?} */ cleanup = /** @type {?} */ ((view.cleanup));\n    if (cleanup != null) {\n        for (var /** @type {?} */ i = 0; i < cleanup.length - 1; i += 2) {\n            if (typeof cleanup[i] === 'string') {\n                /** @type {?} */ ((cleanup))[i + 1].removeEventListener(cleanup[i], cleanup[i + 2], cleanup[i + 3]);\n                i += 2;\n            }\n            else {\n                cleanup[i].call(cleanup[i + 1]);\n            }\n        }\n        view.cleanup = null;\n    }\n}\n/**\n * Calls onDestroy hooks for this view\n * @param {?} view\n * @return {?}\n */\nfunction executeOnDestroys(view) {\n    var /** @type {?} */ tView = view.tView;\n    var /** @type {?} */ destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        callHooks(/** @type {?} */ ((view.directives)), destroyHooks);\n    }\n}\n/**\n * Calls pipe destroy hooks for this view\n * @param {?} view\n * @return {?}\n */\nfunction executePipeOnDestroys(view) {\n    var /** @type {?} */ pipeDestroyHooks = view.tView && view.tView.pipeDestroyHooks;\n    if (pipeDestroyHooks) {\n        callHooks(/** @type {?} */ ((view.data)), pipeDestroyHooks);\n    }\n}\n/**\n * Returns whether a native element should be inserted in the given parent.\n *\n * The native node can be inserted when its parent is:\n * - A regular element => Yes\n * - A component host element =>\n *    - if the `currentView` === the parent `view`: The element is in the content (vs the\n *      template)\n *      => don't add as the parent component will project if needed.\n *    - `currentView` !== the parent `view` => The element is in the template (vs the content),\n *      add it\n * - View element => delay insertion, will be done on `viewEnd()`\n *\n * @param {?} parent The parent in which to insert the child\n * @param {?} currentView The LView being processed\n * @return {?} boolean Whether the child element should be inserted.\n */\nexport function canInsertNativeNode(parent, currentView) {\n    var /** @type {?} */ parentIsElement = parent.type === 3 /* Element */;\n    return parentIsElement &&\n        (parent.view !== currentView || parent.data === null /* Regular Element. */);\n}\n/**\n * Appends the `child` element to the `parent`.\n *\n * The element insertion might be delayed {\\@link canInsertNativeNode}\n *\n * @param {?} parent The parent to which to append the child\n * @param {?} child The child that should be appended\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was appended\n */\nexport function appendChild(parent, child, currentView) {\n    if (child !== null && canInsertNativeNode(parent, currentView)) {\n        // We only add element if not in View or not projected.\n        var /** @type {?} */ renderer = currentView.renderer;\n        isProceduralRenderer(renderer) ? renderer.appendChild(/** @type {?} */ (((parent.native))), child) : /** @type {?} */ ((parent.native)).appendChild(child);\n        return true;\n    }\n    return false;\n}\n/**\n * Inserts the provided node before the correct element in the DOM.\n *\n * The element insertion might be delayed {\\@link canInsertNativeNode}\n *\n * @param {?} node Node to insert\n * @param {?} currentView Current LView\n * @return {?}\n */\nexport function insertChild(node, currentView) {\n    var /** @type {?} */ parent = /** @type {?} */ ((node.parent));\n    if (canInsertNativeNode(parent, currentView)) {\n        var /** @type {?} */ nativeSibling = findNextRNodeSibling(node, null);\n        var /** @type {?} */ renderer = currentView.renderer;\n        isProceduralRenderer(renderer) ?\n            renderer.insertBefore(/** @type {?} */ ((parent.native)), /** @type {?} */ ((node.native)), nativeSibling) : /** @type {?} */ ((parent.native)).insertBefore(/** @type {?} */ ((node.native)), nativeSibling, false);\n    }\n}\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param {?} node The node to process\n * @param {?} currentParent The last parent element to be processed\n * @param {?} currentView Current LView\n * @return {?}\n */\nexport function appendProjectedNode(node, currentParent, currentView) {\n    if (node.type !== 0 /* Container */) {\n        appendChild(currentParent, (/** @type {?} */ (node)).native, currentView);\n    }\n    else {\n        // The node we are adding is a Container and we are adding it to Element which\n        // is not a component (no more re-projection).\n        // Alternatively a container is projected at the root of a component's template\n        // and can't be re-projected (as not content of any component).\n        // Assignee the final projection location in those cases.\n        var /** @type {?} */ lContainer = (/** @type {?} */ (node)).data;\n        lContainer.renderParent = currentParent;\n        var /** @type {?} */ views = lContainer.views;\n        for (var /** @type {?} */ i = 0; i < views.length; i++) {\n            addRemoveViewFromContainer(/** @type {?} */ (node), views[i], true, null);\n        }\n    }\n    if (node.dynamicLContainerNode) {\n        node.dynamicLContainerNode.data.renderParent = currentParent;\n    }\n}\n//# sourceMappingURL=node_manipulation.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { assertEqual, assertLessThan, assertNotEqual, assertNotNull, assertNull, assertSame } from './assert';\nimport { NG_PROJECT_AS_ATTR_NAME } from './interfaces/projection';\nimport { assertNodeType } from './node_assert';\nimport { appendChild, insertChild, insertView, appendProjectedNode, removeView, canInsertNativeNode, createTextNode } from './node_manipulation';\nimport { isNodeMatchingSelectorList, matchingSelectorIndex } from './node_selector_matcher';\nimport { RendererStyleFlags3, isProceduralRenderer } from './interfaces/renderer';\nimport { isDifferent, stringify } from './util';\nimport { executeHooks, queueLifecycleHooks, queueInitHooks, executeInitHooks } from './hooks';\nimport { throwCyclicDependencyError, throwErrorIfNoChangesMode, throwMultipleComponentError } from './errors';\n/**\n * Directive (D) sets a property on all component instances using this constant as a key and the\n * component's host node (LElement) as the value. This is used in methods like detectChanges to\n * facilitate jumping from an instance to the host node.\n */\nexport var /** @type {?} */ NG_HOST_SYMBOL = '__ngHostLNode__';\n/**\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n */\nvar /** @type {?} */ _CLEAN_PROMISE = Promise.resolve(null);\n/**\n * Directive and element indices for top-level directive.\n *\n * Saved here to avoid re-instantiating an array on every change detection run.\n */\nexport var /** @type {?} */ _ROOT_DIRECTIVE_INDICES = [0, 0];\n/**\n * Token set in currentMatches while dependencies are being resolved.\n *\n * If we visit a directive that has a value set to CIRCULAR, we know we've\n * already seen it, and thus have a circular dependency.\n */\nexport var /** @type {?} */ CIRCULAR = '__CIRCULAR__';\n/**\n * This property gets set before entering a template.\n *\n * This renderer can be one of two varieties of Renderer3:\n *\n * - ObjectedOrientedRenderer3\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade (reducing payload\n * size).\n *\n * - ProceduralRenderer3\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the facade\n * that enables element manipulation. This also facilitates backwards compatibility with\n * Renderer2.\n */\nvar /** @type {?} */ renderer;\nvar /** @type {?} */ rendererFactory;\n/**\n * @return {?}\n */\nexport function getRenderer() {\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\n    return renderer;\n}\n/**\n * Used to set the parent property when nodes are created.\n */\nvar /** @type {?} */ previousOrParentNode;\n/**\n * @return {?}\n */\nexport function getPreviousOrParentNode() {\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\n    return previousOrParentNode;\n}\n/**\n * If `isParent` is:\n *  - `true`: then `previousOrParentNode` points to a parent node.\n *  - `false`: then `previousOrParentNode` points to previous node (sibling).\n */\nvar /** @type {?} */ isParent;\n/**\n * Static data that corresponds to the instance-specific data array on an LView.\n *\n * Each node's static data is stored in tData at the same index that it's stored\n * in the data array. Any nodes that do not have static data store a null value in\n * tData to avoid a sparse array.\n */\nvar /** @type {?} */ tData;\n/**\n * State of the current view being processed.\n *\n * NOTE: we cheat here and initialize it to `null` even thought the type does not\n * contain `null`. This is because we expect this value to be not `null` as soon\n * as we enter the view. Declaring the type as `null` would require us to place `!`\n * in most instructions since they all assume that `currentView` is defined.\n */\nvar /** @type {?} */ currentView = /** @type {?} */ ((null));\nvar /** @type {?} */ currentQueries;\n/**\n * @param {?} QueryType\n * @return {?}\n */\nexport function getCurrentQueries(QueryType) {\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\n    return currentQueries || (currentQueries = new QueryType());\n}\n/**\n * This property gets set before entering a template.\n */\nvar /** @type {?} */ creationMode;\n/**\n * @return {?}\n */\nexport function getCreationMode() {\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\n    return creationMode;\n}\n/**\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n */\nvar /** @type {?} */ data;\n/**\n * An array of directive instances in the current view.\n *\n * These must be stored separately from LNodes because their presence is\n * unknown at compile-time and thus space cannot be reserved in data[].\n */\nvar /** @type {?} */ directives;\n/**\n * When a view is destroyed, listeners need to be released and outputs need to be\n * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\n * and output data (in chunks of 2) for a particular view. Combining the arrays\n * saves on memory (70 bytes per array) and on a few bytes of code size (for two\n * separate for loops).\n *\n * If it's a listener being stored:\n * 1st index is: event name to remove\n * 2nd index is: native element\n * 3rd index is: listener function\n * 4th index is: useCapture boolean\n *\n * If it's an output subscription:\n * 1st index is: unsubscribe function\n * 2nd index is: context for function\n */\nvar /** @type {?} */ cleanup;\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n */\nvar /** @type {?} */ checkNoChangesMode = false;\n/**\n * Whether or not this is the first time the current view has been processed.\n */\nvar /** @type {?} */ firstTemplatePass = true;\n/** @enum {number} */\nvar BindingDirection = {\n    Input: 0,\n    Output: 1,\n};\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param {?} newView New state to become active\n * @param {?} host Element to which the View is a child of\n * @return {?} the previous state;\n */\nexport function enterView(newView, host) {\n    var /** @type {?} */ oldView = currentView;\n    data = newView && newView.data;\n    directives = newView && newView.directives;\n    tData = newView && newView.tView.data;\n    creationMode = newView && (newView.flags & 1 /* CreationMode */) === 1 /* CreationMode */;\n    firstTemplatePass = newView && newView.tView.firstTemplatePass;\n    cleanup = newView && newView.cleanup;\n    renderer = newView && newView.renderer;\n    if (newView && newView.bindingIndex < 0) {\n        newView.bindingIndex = newView.bindingStartIndex;\n    }\n    if (host != null) {\n        previousOrParentNode = host;\n        isParent = true;\n    }\n    currentView = newView;\n    currentQueries = newView && newView.queries;\n    return oldView;\n}\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n * @param {?} newView\n * @return {?}\n */\nexport function leaveView(newView) {\n    if (!checkNoChangesMode) {\n        executeHooks(/** @type {?} */ ((directives)), currentView.tView.viewHooks, currentView.tView.viewCheckHooks, creationMode);\n    }\n    // Views should be clean and in update mode after being checked, so these bits are cleared\n    currentView.flags &= ~(1 /* CreationMode */ | 4 /* Dirty */);\n    currentView.lifecycleStage = 1 /* INIT */;\n    currentView.bindingIndex = -1;\n    enterView(newView, null);\n}\n/**\n * Refreshes directives in this view and triggers any init/content hooks.\n * @return {?}\n */\nfunction refreshDirectives() {\n    executeInitAndContentHooks();\n    var /** @type {?} */ tView = currentView.tView;\n    // This needs to be set before children are processed to support recursive components\n    tView.firstTemplatePass = firstTemplatePass = false;\n    setHostBindings(tView.hostBindings);\n    refreshChildComponents(tView.components);\n}\n/**\n * Sets the host bindings for the current view.\n * @param {?} bindings\n * @return {?}\n */\nexport function setHostBindings(bindings) {\n    if (bindings != null) {\n        var /** @type {?} */ defs = /** @type {?} */ ((currentView.tView.directives));\n        for (var /** @type {?} */ i = 0; i < bindings.length; i += 2) {\n            var /** @type {?} */ dirIndex = bindings[i];\n            var /** @type {?} */ def = /** @type {?} */ (defs[dirIndex]);\n            def.hostBindings && def.hostBindings(dirIndex, bindings[i + 1]);\n        }\n    }\n}\n/**\n * Refreshes child components in the current view.\n * @param {?} components\n * @return {?}\n */\nfunction refreshChildComponents(components) {\n    if (components != null) {\n        for (var /** @type {?} */ i = 0; i < components.length; i += 2) {\n            componentRefresh(components[i], components[i + 1]);\n        }\n    }\n}\n/**\n * @return {?}\n */\nexport function executeInitAndContentHooks() {\n    if (!checkNoChangesMode) {\n        var /** @type {?} */ tView = currentView.tView;\n        executeInitHooks(currentView, tView, creationMode);\n        executeHooks(/** @type {?} */ ((directives)), tView.contentHooks, tView.contentCheckHooks, creationMode);\n    }\n}\n/**\n * @template T\n * @param {?} viewId\n * @param {?} renderer\n * @param {?} tView\n * @param {?} template\n * @param {?} context\n * @param {?} flags\n * @return {?}\n */\nexport function createLView(viewId, renderer, tView, template, context, flags) {\n    var /** @type {?} */ newView = {\n        parent: currentView,\n        id: viewId,\n        // -1 for component views\n        flags: flags | 1 /* CreationMode */ | 8 /* Attached */,\n        node: /** @type {?} */ ((null)),\n        // until we initialize it in createNode.\n        data: [],\n        directives: null,\n        tView: tView,\n        cleanup: null,\n        renderer: renderer,\n        child: null,\n        tail: null,\n        next: null,\n        bindingStartIndex: -1,\n        bindingIndex: -1,\n        template: template,\n        context: context,\n        dynamicViewCount: 0,\n        lifecycleStage: 1 /* INIT */,\n        queries: null,\n    };\n    return newView;\n}\n/**\n * Creation of LNode object is extracted to a separate function so we always create LNode object\n * with the same shape\n * (same properties assigned in the same order).\n * @param {?} type\n * @param {?} currentView\n * @param {?} parent\n * @param {?} native\n * @param {?} state\n * @param {?} queries\n * @return {?}\n */\nexport function createLNodeObject(type, currentView, parent, native, state, queries) {\n    return {\n        type: type,\n        native: /** @type {?} */ (native),\n        view: currentView,\n        parent: /** @type {?} */ (parent),\n        child: null,\n        next: null,\n        nodeInjector: parent ? parent.nodeInjector : null,\n        data: state,\n        queries: queries,\n        tNode: null,\n        pNextOrParent: null,\n        dynamicLContainerNode: null\n    };\n}\n/**\n * @param {?} index\n * @param {?} type\n * @param {?} native\n * @param {?=} state\n * @return {?}\n */\nexport function createLNode(index, type, native, state) {\n    var /** @type {?} */ parent = isParent ? previousOrParentNode :\n        previousOrParentNode && /** @type {?} */ (previousOrParentNode.parent);\n    var /** @type {?} */ queries = (isParent ? currentQueries : previousOrParentNode && previousOrParentNode.queries) ||\n        parent && parent.queries && parent.queries.child();\n    var /** @type {?} */ isState = state != null;\n    var /** @type {?} */ node = createLNodeObject(type, currentView, parent, native, isState ? /** @type {?} */ (state) : null, queries);\n    if ((type & 2 /* ViewOrElement */) === 2 /* ViewOrElement */ && isState) {\n        // Bit of a hack to bust through the readonly because there is a circular dep between\n        // LView and LNode.\n        ngDevMode && assertNull((/** @type {?} */ (state)).node, 'LView.node should not have been initialized');\n        (/** @type {?} */ ((state))).node = node;\n    }\n    if (index != null) {\n        // We are Element or Container\n        ngDevMode && assertDataNext(index);\n        data[index] = node;\n        // Every node adds a value to the static data array to avoid a sparse array\n        if (index >= tData.length) {\n            tData[index] = null;\n        }\n        else {\n            node.tNode = /** @type {?} */ (tData[index]);\n        }\n        // Now link ourselves into the tree.\n        if (isParent) {\n            currentQueries = null;\n            if (previousOrParentNode.view === currentView ||\n                previousOrParentNode.type === 2 /* View */) {\n                // We are in the same view, which means we are adding content node to the parent View.\n                ngDevMode && assertNull(previousOrParentNode.child, \"previousOrParentNode's child should not have been set.\");\n                previousOrParentNode.child = node;\n            }\n            else {\n                // We are adding component view, so we don't link parent node child to this node.\n            }\n        }\n        else if (previousOrParentNode) {\n            ngDevMode && assertNull(previousOrParentNode.next, \"previousOrParentNode's next property should not have been set \" + index + \".\");\n            previousOrParentNode.next = node;\n            if (previousOrParentNode.dynamicLContainerNode) {\n                previousOrParentNode.dynamicLContainerNode.next = node;\n            }\n        }\n    }\n    previousOrParentNode = node;\n    isParent = true;\n    return node;\n}\n/**\n * Resets the application state.\n * @return {?}\n */\nfunction resetApplicationState() {\n    isParent = false;\n    previousOrParentNode = /** @type {?} */ ((null));\n}\n/**\n *\n * @template T\n * @param {?} hostNode Existing node to render into.\n * @param {?} template Template function with the instructions.\n * @param {?} context to pass into the template.\n * @param {?} providedRendererFactory renderer factory to use\n * @param {?} host The host element node to use\n * @param {?=} directives Directive defs that should be used for matching\n * @param {?=} pipes Pipe defs that should be used for matching\n * @return {?}\n */\nexport function renderTemplate(hostNode, template, context, providedRendererFactory, host, directives, pipes) {\n    if (host == null) {\n        resetApplicationState();\n        rendererFactory = providedRendererFactory;\n        var /** @type {?} */ tView = getOrCreateTView(template, directives || null, pipes || null);\n        host = createLNode(null, 3 /* Element */, hostNode, createLView(-1, providedRendererFactory.createRenderer(null, null), tView, null, {}, 2 /* CheckAlways */));\n    }\n    var /** @type {?} */ hostView = /** @type {?} */ ((host.data));\n    ngDevMode && assertNotNull(hostView, 'Host node should have an LView defined in host.data.');\n    renderComponentOrTemplate(host, hostView, context, template);\n    return host;\n}\n/**\n * @template T\n * @param {?} viewNode\n * @param {?} template\n * @param {?} context\n * @param {?} renderer\n * @return {?}\n */\nexport function renderEmbeddedTemplate(viewNode, template, context, renderer) {\n    var /** @type {?} */ _isParent = isParent;\n    var /** @type {?} */ _previousOrParentNode = previousOrParentNode;\n    var /** @type {?} */ oldView;\n    try {\n        isParent = true;\n        previousOrParentNode = /** @type {?} */ ((null));\n        var /** @type {?} */ rf = 2 /* Update */;\n        if (viewNode == null) {\n            // TODO: revisit setting currentView when re-writing view containers\n            var /** @type {?} */ directives_1 = currentView && currentView.tView.directiveRegistry;\n            var /** @type {?} */ pipes = currentView && currentView.tView.pipeRegistry;\n            var /** @type {?} */ tView = getOrCreateTView(template, directives_1, pipes);\n            var /** @type {?} */ lView = createLView(-1, renderer, tView, template, context, 2 /* CheckAlways */);\n            viewNode = createLNode(null, 2 /* View */, null, lView);\n            rf = 1 /* Create */;\n        }\n        oldView = enterView(viewNode.data, viewNode);\n        template(rf, context);\n        refreshDirectives();\n        refreshDynamicChildren();\n    }\n    finally {\n        leaveView(/** @type {?} */ ((oldView)));\n        isParent = _isParent;\n        previousOrParentNode = _previousOrParentNode;\n    }\n    return viewNode;\n}\n/**\n * @template T\n * @param {?} node\n * @param {?} hostView\n * @param {?} componentOrContext\n * @param {?=} template\n * @return {?}\n */\nexport function renderComponentOrTemplate(node, hostView, componentOrContext, template) {\n    var /** @type {?} */ oldView = enterView(hostView, node);\n    try {\n        if (rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        if (template) {\n            template(getRenderFlags(hostView), /** @type {?} */ ((componentOrContext)));\n            refreshDynamicChildren();\n            refreshDirectives();\n        }\n        else {\n            executeInitAndContentHooks();\n            // Element was stored at 0 in data and directive was stored at 0 in directives\n            // in renderComponent()\n            setHostBindings(_ROOT_DIRECTIVE_INDICES);\n            componentRefresh(0, 0);\n        }\n    }\n    finally {\n        if (rendererFactory.end) {\n            rendererFactory.end();\n        }\n        leaveView(oldView);\n    }\n}\n/**\n * This function returns the default configuration of rendering flags depending on when the\n * template is in creation mode or update mode. By default, the update block is run with the\n * creation block when the view is in creation mode. Otherwise, the update block is run\n * alone.\n *\n * Dynamically created views do NOT use this configuration (update block and create block are\n * always run separately).\n * @param {?} view\n * @return {?}\n */\nfunction getRenderFlags(view) {\n    return view.flags & 1 /* CreationMode */ ? 1 /* Create */ | 2 /* Update */ :\n        2 /* Update */;\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param {?} index Index of the element in the data array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes to be written into the DOM element on creation.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n * @return {?}\n */\nexport function elementStart(index, name, attrs, localRefs) {\n    ngDevMode &&\n        assertEqual(currentView.bindingStartIndex, -1, 'elements should be created before any bindings');\n    var /** @type {?} */ native = renderer.createElement(name);\n    var /** @type {?} */ node = createLNode(index, 3 /* Element */, /** @type {?} */ ((native)), null);\n    if (attrs)\n        setUpAttributes(native, attrs);\n    appendChild(/** @type {?} */ ((node.parent)), native, currentView);\n    createDirectivesAndLocals(index, name, attrs, localRefs, null);\n    return native;\n}\n/**\n * @param {?} index\n * @param {?} name\n * @param {?} attrs\n * @param {?} localRefs\n * @param {?} containerData\n * @return {?}\n */\nfunction createDirectivesAndLocals(index, name, attrs, localRefs, containerData) {\n    var /** @type {?} */ node = previousOrParentNode;\n    if (firstTemplatePass) {\n        ngDevMode && assertDataInRange(index - 1);\n        node.tNode = tData[index] = createTNode(name, attrs || null, containerData);\n        cacheMatchingDirectivesForNode(node.tNode, currentView.tView, localRefs || null);\n    }\n    else {\n        instantiateDirectivesDirectly();\n    }\n    saveResolvedLocalsInData();\n}\n/**\n * On first template pass, we match each node against available directive selectors and save\n * the resulting defs in the correct instantiation order for subsequent change detection runs\n * (so dependencies are always created before the directives that inject them).\n * @param {?} tNode\n * @param {?} tView\n * @param {?} localRefs\n * @return {?}\n */\nfunction cacheMatchingDirectivesForNode(tNode, tView, localRefs) {\n    var /** @type {?} */ exportsMap = localRefs ? { '': -1 } : null;\n    var /** @type {?} */ matches = tView.currentMatches = findDirectiveMatches(tNode);\n    if (matches) {\n        for (var /** @type {?} */ i = 0; i < matches.length; i += 2) {\n            var /** @type {?} */ def = /** @type {?} */ (matches[i]);\n            var /** @type {?} */ valueIndex = i + 1;\n            resolveDirective(def, valueIndex, matches, tView);\n            saveNameToExportMap(/** @type {?} */ (matches[valueIndex]), def, exportsMap);\n        }\n    }\n    if (exportsMap)\n        cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n}\n/**\n * Matches the current node against all available selectors.\n * @param {?} tNode\n * @return {?}\n */\nfunction findDirectiveMatches(tNode) {\n    var /** @type {?} */ registry = currentView.tView.directiveRegistry;\n    var /** @type {?} */ matches = null;\n    if (registry) {\n        for (var /** @type {?} */ i = 0; i < registry.length; i++) {\n            var /** @type {?} */ def = registry[i];\n            if (isNodeMatchingSelectorList(tNode, /** @type {?} */ ((def.selectors)))) {\n                if ((/** @type {?} */ (def)).template) {\n                    if (tNode.flags & 1 /* Component */)\n                        throwMultipleComponentError(tNode);\n                    tNode.flags = 1 /* Component */;\n                }\n                if (def.diPublic)\n                    def.diPublic(def);\n                (matches || (matches = [])).push(def, null);\n            }\n        }\n    }\n    return /** @type {?} */ (matches);\n}\n/**\n * @param {?} def\n * @param {?} valueIndex\n * @param {?} matches\n * @param {?} tView\n * @return {?}\n */\nexport function resolveDirective(def, valueIndex, matches, tView) {\n    if (matches[valueIndex] === null) {\n        matches[valueIndex] = CIRCULAR;\n        var /** @type {?} */ instance = def.factory();\n        (tView.directives || (tView.directives = [])).push(def);\n        return directiveCreate(matches[valueIndex] = /** @type {?} */ ((tView.directives)).length - 1, instance, def);\n    }\n    else if (matches[valueIndex] === CIRCULAR) {\n        // If we revisit this directive before it's resolved, we know it's circular\n        throwCyclicDependencyError(def.type);\n    }\n    return null;\n}\n/**\n * Stores index of component's host element so it will be queued for view refresh during CD.\n * @param {?} dirIndex\n * @return {?}\n */\nfunction queueComponentIndexForCheck(dirIndex) {\n    if (firstTemplatePass) {\n        (currentView.tView.components || (currentView.tView.components = [])).push(dirIndex, data.length - 1);\n    }\n}\n/**\n * Stores index of directive and host element so it will be queued for binding refresh during CD.\n * @param {?} dirIndex\n * @return {?}\n */\nfunction queueHostBindingForCheck(dirIndex) {\n    ngDevMode &&\n        assertEqual(firstTemplatePass, true, 'Should only be called in first template pass.');\n    (currentView.tView.hostBindings || (currentView.tView.hostBindings = [])).push(dirIndex, data.length - 1);\n}\n/**\n * Sets the context for a ChangeDetectorRef to the given instance.\n * @param {?} injector\n * @param {?} instance\n * @param {?} view\n * @return {?}\n */\nexport function initChangeDetectorIfExisting(injector, instance, view) {\n    if (injector && injector.changeDetectorRef != null) {\n        (/** @type {?} */ (injector.changeDetectorRef))._setComponentContext(view, instance);\n    }\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function isComponent(tNode) {\n    return (tNode.flags & 1 /* Component */) === 1 /* Component */;\n}\n/**\n * This function instantiates the given directives.\n * @return {?}\n */\nfunction instantiateDirectivesDirectly() {\n    var /** @type {?} */ tNode = /** @type {?} */ ((previousOrParentNode.tNode));\n    var /** @type {?} */ size = (tNode.flags & 8190 /* SIZE_MASK */) >> 1 /* SIZE_SHIFT */;\n    if (size > 0) {\n        var /** @type {?} */ startIndex = tNode.flags >> 13 /* INDX_SHIFT */;\n        var /** @type {?} */ tDirectives = /** @type {?} */ ((currentView.tView.directives));\n        for (var /** @type {?} */ i = startIndex; i < startIndex + size; i++) {\n            var /** @type {?} */ def = /** @type {?} */ (tDirectives[i]);\n            directiveCreate(i, def.factory(), def);\n        }\n    }\n}\n/**\n * Caches local names and their matching directive indices for query and template lookups.\n * @param {?} tNode\n * @param {?} localRefs\n * @param {?} exportsMap\n * @return {?}\n */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        var /** @type {?} */ localNames = tNode.localNames = [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (var /** @type {?} */ i = 0; i < localRefs.length; i += 2) {\n            var /** @type {?} */ index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new Error(\"Export of name '\" + localRefs[i + 1] + \"' not found!\");\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n * @param {?} index\n * @param {?} def\n * @param {?} exportsMap\n * @return {?}\n */\nfunction saveNameToExportMap(index, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs)\n            exportsMap[def.exportAs] = index;\n        if ((/** @type {?} */ (def)).template)\n            exportsMap[''] = index;\n    }\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to data[] in the same order as they are loaded in the template with load().\n * @return {?}\n */\nfunction saveResolvedLocalsInData() {\n    var /** @type {?} */ localNames = /** @type {?} */ ((previousOrParentNode.tNode)).localNames;\n    if (localNames) {\n        for (var /** @type {?} */ i = 0; i < localNames.length; i += 2) {\n            var /** @type {?} */ index = /** @type {?} */ (localNames[i + 1]);\n            var /** @type {?} */ value = index === -1 ? previousOrParentNode.native : /** @type {?} */ ((directives))[index];\n            data.push(value);\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param {?} template The template from which to get static data\n * @param {?} directives Directive defs that should be saved on TView\n * @param {?} pipes Pipe defs that should be saved on TView\n * @return {?} TView\n */\nfunction getOrCreateTView(template, directives, pipes) {\n    return template.ngPrivateData ||\n        (template.ngPrivateData = /** @type {?} */ (createTView(directives, pipes)));\n}\n/**\n * Creates a TView instance\n * @param {?} defs\n * @param {?} pipes\n * @return {?}\n */\nexport function createTView(defs, pipes) {\n    return {\n        data: [],\n        directives: null,\n        firstTemplatePass: true,\n        initHooks: null,\n        checkHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        pipeDestroyHooks: null,\n        hostBindings: null,\n        components: null,\n        directiveRegistry: typeof defs === 'function' ? defs() : defs,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        currentMatches: null\n    };\n}\n/**\n * @param {?} native\n * @param {?} attrs\n * @return {?}\n */\nfunction setUpAttributes(native, attrs) {\n    ngDevMode && assertEqual(attrs.length % 2, 0, 'each attribute should have a key and a value');\n    var /** @type {?} */ isProc = isProceduralRenderer(renderer);\n    for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n        var /** @type {?} */ attrName = attrs[i];\n        if (attrName !== NG_PROJECT_AS_ATTR_NAME) {\n            var /** @type {?} */ attrVal = attrs[i + 1];\n            isProc ? (/** @type {?} */ (renderer)).setAttribute(native, attrName, attrVal) :\n                native.setAttribute(attrName, attrVal);\n        }\n    }\n}\n/**\n * @param {?} text\n * @param {?} token\n * @return {?}\n */\nexport function createError(text, token) {\n    return new Error(\"Renderer: \" + text + \" [\" + stringify(token) + \"]\");\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param {?} factory\n * @param {?} elementOrSelector Render element or CSS selector to locate the element.\n * @return {?}\n */\nexport function locateHostElement(factory, elementOrSelector) {\n    ngDevMode && assertDataInRange(-1);\n    rendererFactory = factory;\n    var /** @type {?} */ defaultRenderer = factory.createRenderer(null, null);\n    var /** @type {?} */ rNode = typeof elementOrSelector === 'string' ?\n        (isProceduralRenderer(defaultRenderer) ?\n            defaultRenderer.selectRootElement(elementOrSelector) :\n            defaultRenderer.querySelector(elementOrSelector)) :\n        elementOrSelector;\n    if (ngDevMode && !rNode) {\n        if (typeof elementOrSelector === 'string') {\n            throw createError('Host node with selector not found:', elementOrSelector);\n        }\n        else {\n            throw createError('Host node is required:', elementOrSelector);\n        }\n    }\n    return rNode;\n}\n/**\n * Creates the host LNode.\n *\n * @param {?} tag\n * @param {?} rNode Render host element.\n * @param {?} def ComponentDef\n *\n * @return {?} LElementNode created\n */\nexport function hostElement(tag, rNode, def) {\n    resetApplicationState();\n    var /** @type {?} */ node = createLNode(0, 3 /* Element */, rNode, createLView(-1, renderer, getOrCreateTView(def.template, def.directiveDefs, def.pipeDefs), null, null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */));\n    if (firstTemplatePass) {\n        node.tNode = createTNode(/** @type {?} */ (tag), null, null);\n        node.tNode.flags = 1 /* Component */;\n        if (def.diPublic)\n            def.diPublic(def);\n        currentView.tView.directives = [def];\n    }\n    return node;\n}\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener.\n * @return {?}\n */\nexport function listener(eventName, listenerFn, useCapture) {\n    if (useCapture === void 0) { useCapture = false; }\n    ngDevMode && assertPreviousIsParent();\n    var /** @type {?} */ node = previousOrParentNode;\n    var /** @type {?} */ native = /** @type {?} */ (node.native);\n    // In order to match current behavior, native DOM event listeners must be added for all\n    // events (including outputs).\n    var /** @type {?} */ cleanupFns = cleanup || (cleanup = currentView.cleanup = []);\n    if (isProceduralRenderer(renderer)) {\n        var /** @type {?} */ wrappedListener = wrapListenerWithDirtyLogic(currentView, listenerFn);\n        var /** @type {?} */ cleanupFn = renderer.listen(native, eventName, wrappedListener);\n        cleanupFns.push(cleanupFn, null);\n    }\n    else {\n        var /** @type {?} */ wrappedListener = wrapListenerWithDirtyAndDefault(currentView, listenerFn);\n        native.addEventListener(eventName, wrappedListener, useCapture);\n        cleanupFns.push(eventName, native, wrappedListener, useCapture);\n    }\n    var /** @type {?} */ tNode = /** @type {?} */ ((node.tNode));\n    if (tNode.outputs === undefined) {\n        // if we create TNode here, inputs must be undefined so we know they still need to be\n        // checked\n        tNode.outputs = generatePropertyAliases(/** @type {?} */ ((node.tNode)).flags, 1 /* Output */);\n    }\n    var /** @type {?} */ outputs = tNode.outputs;\n    var /** @type {?} */ outputData;\n    if (outputs && (outputData = outputs[eventName])) {\n        createOutput(outputData, listenerFn);\n    }\n}\n/**\n * Iterates through the outputs associated with a particular event name and subscribes to\n * each output.\n * @param {?} outputs\n * @param {?} listener\n * @return {?}\n */\nfunction createOutput(outputs, listener) {\n    for (var /** @type {?} */ i = 0; i < outputs.length; i += 2) {\n        ngDevMode && assertDataInRange(/** @type {?} */ (outputs[i]), /** @type {?} */ ((directives)));\n        var /** @type {?} */ subscription = /** @type {?} */ ((directives))[/** @type {?} */ (outputs[i])][outputs[i + 1]].subscribe(listener); /** @type {?} */\n        ((cleanup)).push(subscription.unsubscribe, subscription);\n    }\n}\n/**\n * Mark the end of the element.\n * @return {?}\n */\nexport function elementEnd() {\n    if (isParent) {\n        isParent = false;\n    }\n    else {\n        ngDevMode && assertHasParent();\n        previousOrParentNode = /** @type {?} */ ((previousOrParentNode.parent));\n    }\n    ngDevMode && assertNodeType(previousOrParentNode, 3 /* Element */);\n    var /** @type {?} */ queries = previousOrParentNode.queries;\n    queries && queries.addNode(previousOrParentNode);\n    queueLifecycleHooks(/** @type {?} */ ((previousOrParentNode.tNode)).flags, currentView);\n}\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * @param {?} index\n * @param {?} name name The name of the attribute.\n * @param {?} value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nexport function elementAttribute(index, name, value, sanitizer) {\n    if (value !== NO_CHANGE) {\n        var /** @type {?} */ element = data[index];\n        if (value == null) {\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element.native, name) :\n                element.native.removeAttribute(name);\n        }\n        else {\n            var /** @type {?} */ strValue = sanitizer == null ? stringify(value) : sanitizer(value);\n            isProceduralRenderer(renderer) ? renderer.setAttribute(element.native, name, strValue) :\n                element.native.setAttribute(name, strValue);\n        }\n    }\n}\n/**\n * Update a property on an Element.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\@Inputs don't have to be re-compiled.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nexport function elementProperty(index, propName, value, sanitizer) {\n    if (value === NO_CHANGE)\n        return;\n    var /** @type {?} */ node = /** @type {?} */ (data[index]);\n    var /** @type {?} */ tNode = /** @type {?} */ ((node.tNode));\n    // if tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n    // yet been checked\n    if (tNode && tNode.inputs === undefined) {\n        // mark inputs as checked\n        tNode.inputs = generatePropertyAliases(/** @type {?} */ ((node.tNode)).flags, 0 /* Input */);\n    }\n    var /** @type {?} */ inputData = tNode && tNode.inputs;\n    var /** @type {?} */ dataValue;\n    if (inputData && (dataValue = inputData[propName])) {\n        setInputsForProperty(dataValue, value);\n        markDirtyIfOnPush(node);\n    }\n    else {\n        // It is assumed that the sanitizer is only added when the compiler determines that the property\n        // is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? (/** @type {?} */ (sanitizer(value))) : value;\n        var /** @type {?} */ native = node.native;\n        isProceduralRenderer(renderer) ? renderer.setProperty(native, propName, value) :\n            (native.setProperty ? native.setProperty(propName, value) :\n                (/** @type {?} */ (native))[propName] = value);\n    }\n}\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param {?} tagName\n * @param {?} attrs\n * @param {?} data\n * @return {?} the TNode object\n */\nfunction createTNode(tagName, attrs, data) {\n    return {\n        flags: 0,\n        tagName: tagName,\n        attrs: attrs,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        data: data\n    };\n}\n/**\n * Given a list of directive indices and minified input names, sets the\n * input properties on the corresponding directives.\n * @param {?} inputs\n * @param {?} value\n * @return {?}\n */\nfunction setInputsForProperty(inputs, value) {\n    for (var /** @type {?} */ i = 0; i < inputs.length; i += 2) {\n        ngDevMode && assertDataInRange(/** @type {?} */ (inputs[i]), /** @type {?} */ ((directives))); /** @type {?} */\n        ((directives))[/** @type {?} */ (inputs[i])][inputs[i + 1]] = value;\n    }\n}\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param {?} tNodeFlags\n * @param {?} direction\n * @return {?} PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nfunction generatePropertyAliases(tNodeFlags, direction) {\n    var /** @type {?} */ size = (tNodeFlags & 8190 /* SIZE_MASK */) >> 1 /* SIZE_SHIFT */;\n    var /** @type {?} */ propStore = null;\n    if (size > 0) {\n        var /** @type {?} */ start = tNodeFlags >> 13 /* INDX_SHIFT */;\n        var /** @type {?} */ isInput = direction === 0 /* Input */;\n        var /** @type {?} */ defs = /** @type {?} */ ((currentView.tView.directives));\n        for (var /** @type {?} */ i = start, /** @type {?} */ ii = start + size; i < ii; i++) {\n            var /** @type {?} */ directiveDef = /** @type {?} */ (defs[i]);\n            var /** @type {?} */ propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n            for (var /** @type {?} */ publicName in propertyAliasMap) {\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\n                    propStore = propStore || {};\n                    var /** @type {?} */ internalName = propertyAliasMap[publicName];\n                    var /** @type {?} */ hasProperty = propStore.hasOwnProperty(publicName);\n                    hasProperty ? propStore[publicName].push(i, internalName) :\n                        (propStore[publicName] = [i, internalName]);\n                }\n            }\n        }\n    }\n    return propStore;\n}\n/**\n * Add or remove a class in a `classList` on a DOM element.\n *\n * This instruction is meant to handle the [class.foo]=\"exp\" case\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} className Name of class to toggle. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value A value indicating if a given class should be added or removed.\n * @return {?}\n */\nexport function elementClassNamed(index, className, value) {\n    if (value !== NO_CHANGE) {\n        var /** @type {?} */ lElement = /** @type {?} */ (data[index]);\n        if (value) {\n            isProceduralRenderer(renderer) ? renderer.addClass(lElement.native, className) :\n                lElement.native.classList.add(className);\n        }\n        else {\n            isProceduralRenderer(renderer) ? renderer.removeClass(lElement.native, className) :\n                lElement.native.classList.remove(className);\n        }\n    }\n}\n/**\n * Set the `className` property on a DOM element.\n *\n * This instruction is meant to handle the `[class]=\"exp\"` usage.\n *\n * `elementClass` instruction writes the value to the \"element's\" `className` property.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} value A value indicating a set of classes which should be applied. The method overrides\n *   any existing classes. The value is stringified (`toString`) before it is applied to the\n *   element.\n * @return {?}\n */\nexport function elementClass(index, value) {\n    if (value !== NO_CHANGE) {\n        // TODO: This is a naive implementation which simply writes value to the `className`. In the\n        // future\n        // we will add logic here which would work with the animation code.\n        var /** @type {?} */ lElement = data[index];\n        isProceduralRenderer(renderer) ? renderer.setProperty(lElement.native, 'className', value) :\n            lElement.native['className'] = stringify(value);\n    }\n}\n/**\n * @template T\n * @param {?} index\n * @param {?} styleName\n * @param {?} value\n * @param {?=} suffixOrSanitizer\n * @return {?}\n */\nexport function elementStyleNamed(index, styleName, value, suffixOrSanitizer) {\n    if (value !== NO_CHANGE) {\n        var /** @type {?} */ lElement = data[index];\n        if (value == null) {\n            isProceduralRenderer(renderer) ?\n                renderer.removeStyle(lElement.native, styleName, RendererStyleFlags3.DashCase) :\n                lElement.native['style'].removeProperty(styleName);\n        }\n        else {\n            var /** @type {?} */ strValue = typeof suffixOrSanitizer == 'function' ? suffixOrSanitizer(value) : stringify(value);\n            if (typeof suffixOrSanitizer == 'string')\n                strValue = strValue + suffixOrSanitizer;\n            isProceduralRenderer(renderer) ?\n                renderer.setStyle(lElement.native, styleName, strValue, RendererStyleFlags3.DashCase) :\n                lElement.native['style'].setProperty(styleName, strValue);\n        }\n    }\n}\n/**\n * Set the `style` property on a DOM element.\n *\n * This instruction is meant to handle the `[style]=\"exp\"` usage.\n *\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} value A value indicating if a given style should be added or removed.\n *   The expected shape of `value` is an object where keys are style names and the values\n *   are their corresponding values to set. If value is falsy than the style is remove. An absence\n *   of style does not cause that style to be removed. `NO_CHANGE` implies that no update should be\n *   performed.\n * @return {?}\n */\nexport function elementStyle(index, value) {\n    if (value !== NO_CHANGE) {\n        // TODO: This is a naive implementation which simply writes value to the `style`. In the future\n        // we will add logic here which would work with the animation code.\n        var /** @type {?} */ lElement = /** @type {?} */ (data[index]);\n        if (isProceduralRenderer(renderer)) {\n            renderer.setProperty(lElement.native, 'style', value);\n        }\n        else {\n            var /** @type {?} */ style = lElement.native['style'];\n            for (var /** @type {?} */ i = 0, /** @type {?} */ keys = Object.keys(value); i < keys.length; i++) {\n                var /** @type {?} */ styleName = keys[i];\n                var /** @type {?} */ styleValue = (/** @type {?} */ (value))[styleName];\n                styleValue == null ? style.removeProperty(styleName) :\n                    style.setProperty(styleName, styleValue);\n            }\n        }\n    }\n}\n/**\n * Create static text node\n *\n * @param {?} index Index of the node in the data array.\n * @param {?=} value Value to write. This value will be stringified.\n *   If value is not provided than the actual creation of the text node is delayed.\n * @return {?}\n */\nexport function text(index, value) {\n    ngDevMode &&\n        assertEqual(currentView.bindingStartIndex, -1, 'text nodes should be created before bindings');\n    var /** @type {?} */ textNode = value != null ? createTextNode(value, renderer) : null;\n    var /** @type {?} */ node = createLNode(index, 3 /* Element */, textNode);\n    // Text nodes are self closing.\n    isParent = false;\n    appendChild(/** @type {?} */ ((node.parent)), textNode, currentView);\n}\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper bind(1-8) method\n *\n * @template T\n * @param {?} index Index of the node in the data array.\n * @param {?} value Stringified value to write.\n * @return {?}\n */\nexport function textBinding(index, value) {\n    ngDevMode && assertDataInRange(index);\n    var /** @type {?} */ existingNode = /** @type {?} */ (data[index]);\n    ngDevMode && assertNotNull(existingNode, 'existing node');\n    if (existingNode.native) {\n        // If DOM node exists and value changed, update textContent\n        value !== NO_CHANGE &&\n            (isProceduralRenderer(renderer) ? renderer.setValue(existingNode.native, stringify(value)) :\n                existingNode.native.textContent = stringify(value));\n    }\n    else {\n        // Node was created but DOM node creation was delayed. Create and append now.\n        existingNode.native = createTextNode(value, renderer);\n        insertChild(existingNode, currentView);\n    }\n}\n/**\n * Create a directive.\n *\n * NOTE: directives can be created in order other than the index order. They can also\n *       be retrieved before they are created in which case the value will be null.\n *\n * @template T\n * @param {?} index\n * @param {?} directive The directive instance.\n * @param {?} directiveDef DirectiveDef object which contains information about the template.\n * @return {?}\n */\nexport function directiveCreate(index, directive, directiveDef) {\n    var /** @type {?} */ instance = baseDirectiveCreate(index, directive, directiveDef);\n    ngDevMode && assertNotNull(previousOrParentNode.tNode, 'previousOrParentNode.tNode');\n    var /** @type {?} */ tNode = /** @type {?} */ ((previousOrParentNode.tNode));\n    var /** @type {?} */ isComponent = (/** @type {?} */ (directiveDef)).template;\n    if (isComponent) {\n        addComponentLogic(index, directive, /** @type {?} */ (directiveDef));\n    }\n    if (firstTemplatePass) {\n        // Init hooks are queued now so ngOnInit is called in host components before\n        // any projected components.\n        queueInitHooks(index, directiveDef.onInit, directiveDef.doCheck, currentView.tView);\n        if (directiveDef.hostBindings)\n            queueHostBindingForCheck(index);\n    }\n    if (tNode && tNode.attrs) {\n        setInputsFromAttrs(index, instance, directiveDef.inputs, tNode);\n    }\n    return instance;\n}\n/**\n * @template T\n * @param {?} index\n * @param {?} instance\n * @param {?} def\n * @return {?}\n */\nfunction addComponentLogic(index, instance, def) {\n    var /** @type {?} */ tView = getOrCreateTView(def.template, def.directiveDefs, def.pipeDefs);\n    // Only component views should be added to the view tree directly. Embedded views are\n    // accessed through their containers because they may be removed / re-added later.\n    var /** @type {?} */ hostView = addToViewTree(currentView, createLView(-1, rendererFactory.createRenderer(/** @type {?} */ (previousOrParentNode.native), def.rendererType), tView, null, null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */));\n    (/** @type {?} */ (previousOrParentNode.data)) = hostView;\n    (/** @type {?} */ (hostView.node)) = previousOrParentNode;\n    initChangeDetectorIfExisting(previousOrParentNode.nodeInjector, instance, hostView);\n    if (firstTemplatePass)\n        queueComponentIndexForCheck(index);\n}\n/**\n * A lighter version of directiveCreate() that is used for the root component\n *\n * This version does not contain features that we don't already support at root in\n * current Angular. Example: local refs and inputs on root component.\n * @template T\n * @param {?} index\n * @param {?} directive\n * @param {?} directiveDef\n * @return {?}\n */\nexport function baseDirectiveCreate(index, directive, directiveDef) {\n    ngDevMode &&\n        assertEqual(currentView.bindingStartIndex, -1, 'directives should be created before any bindings');\n    ngDevMode && assertPreviousIsParent();\n    Object.defineProperty(directive, NG_HOST_SYMBOL, { enumerable: false, value: previousOrParentNode });\n    if (directives == null)\n        currentView.directives = directives = [];\n    ngDevMode && assertDataNext(index, directives);\n    directives[index] = directive;\n    if (firstTemplatePass) {\n        var /** @type {?} */ flags = /** @type {?} */ ((previousOrParentNode.tNode)).flags; /** @type {?} */\n        ((previousOrParentNode.tNode)).flags = (flags & 8190 /* SIZE_MASK */) === 0 ?\n            (index << 13 /* INDX_SHIFT */) | 2 /* SIZE_SKIP */ | flags & 1 /* Component */ :\n            flags + 2 /* SIZE_SKIP */;\n    }\n    else {\n        var /** @type {?} */ diPublic = /** @type {?} */ ((directiveDef)).diPublic;\n        if (diPublic)\n            diPublic(/** @type {?} */ ((directiveDef)));\n    }\n    if (/** @type {?} */ ((directiveDef)).attributes != null && previousOrParentNode.type == 3 /* Element */) {\n        setUpAttributes((/** @type {?} */ (previousOrParentNode)).native, /** @type {?} */ (((directiveDef)).attributes));\n    }\n    return directive;\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @template T\n * @param {?} directiveIndex Index of the directive in directives array\n * @param {?} instance Instance of the directive on which to set the initial inputs\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data for this node\n * @return {?}\n */\nfunction setInputsFromAttrs(directiveIndex, instance, inputs, tNode) {\n    var /** @type {?} */ initialInputData = /** @type {?} */ (tNode.initialInputs);\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n        initialInputData = generateInitialInputs(directiveIndex, inputs, tNode);\n    }\n    var /** @type {?} */ initialInputs = initialInputData[directiveIndex];\n    if (initialInputs) {\n        for (var /** @type {?} */ i = 0; i < initialInputs.length; i += 2) {\n            (/** @type {?} */ (instance))[initialInputs[i]] = initialInputs[i + 1];\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an \\@Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` \\@Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param {?} directiveIndex Index to store the initial input data\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data on this node\n * @return {?}\n */\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\n    var /** @type {?} */ initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\n    initialInputData[directiveIndex] = null;\n    var /** @type {?} */ attrs = /** @type {?} */ ((tNode.attrs));\n    for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n        var /** @type {?} */ attrName = attrs[i];\n        var /** @type {?} */ minifiedInputName = inputs[attrName];\n        if (minifiedInputName !== undefined) {\n            var /** @type {?} */ inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\n            inputsToStore.push(minifiedInputName, attrs[i + 1]);\n        }\n    }\n    return initialInputData;\n}\n/**\n * @param {?} parentLNode\n * @param {?} currentView\n * @param {?=} template\n * @return {?}\n */\nexport function createLContainer(parentLNode, currentView, template) {\n    ngDevMode && assertNotNull(parentLNode, 'containers should have a parent');\n    return /** @type {?} */ ({\n        views: [],\n        nextIndex: 0,\n        // If the direct parent of the container is a view, its views will need to be added\n        // through insertView() when its parent view is being inserted:\n        renderParent: canInsertNativeNode(parentLNode, currentView) ? parentLNode : null,\n        template: template == null ? null : template,\n        next: null,\n        parent: currentView,\n        dynamicViewCount: 0,\n        queries: null\n    });\n}\n/**\n * Creates an LContainerNode.\n *\n * Only `LViewNodes` can go into `LContainerNodes`.\n *\n * @param {?} index The index of the container in the data array\n * @param {?=} template Optional inline template\n * @param {?=} tagName The name of the container element, if applicable\n * @param {?=} attrs The attrs attached to the container, if applicable\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @return {?}\n */\nexport function container(index, template, tagName, attrs, localRefs) {\n    ngDevMode && assertEqual(currentView.bindingStartIndex, -1, 'container nodes should be created before any bindings');\n    var /** @type {?} */ currentParent = isParent ? previousOrParentNode : /** @type {?} */ ((previousOrParentNode.parent));\n    var /** @type {?} */ lContainer = createLContainer(currentParent, currentView, template);\n    var /** @type {?} */ node = createLNode(index, 0 /* Container */, undefined, lContainer);\n    // Containers are added to the current view tree instead of their embedded views\n    // because views can be removed and re-inserted.\n    addToViewTree(currentView, node.data);\n    createDirectivesAndLocals(index, tagName || null, attrs, localRefs, []);\n    isParent = false;\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\n    var /** @type {?} */ queries = node.queries;\n    if (queries) {\n        // check if a given container node matches\n        queries.addNode(node);\n        // prepare place for matching nodes from views inserted into a given container\n        lContainer.queries = queries.container();\n    }\n}\n/**\n * Sets a container up to receive views.\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nexport function containerRefreshStart(index) {\n    ngDevMode && assertDataInRange(index);\n    previousOrParentNode = /** @type {?} */ (data[index]);\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\n    isParent = true;\n    (/** @type {?} */ (previousOrParentNode)).data.nextIndex = 0;\n    ngDevMode && assertSame((/** @type {?} */ (previousOrParentNode)).native, undefined, \"the container's native element should not have been set yet.\");\n    if (!checkNoChangesMode) {\n        // We need to execute init hooks here so ngOnInit hooks are called in top level views\n        // before they are called in embedded views (for backwards compatibility).\n        executeInitHooks(currentView, currentView.tView, creationMode);\n    }\n}\n/**\n * Marks the end of the LContainerNode.\n *\n * Marking the end of LContainerNode is the time when to child Views get inserted or removed.\n * @return {?}\n */\nexport function containerRefreshEnd() {\n    if (isParent) {\n        isParent = false;\n    }\n    else {\n        ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\n        ngDevMode && assertHasParent();\n        previousOrParentNode = /** @type {?} */ ((previousOrParentNode.parent));\n    }\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\n    var /** @type {?} */ container = /** @type {?} */ (previousOrParentNode);\n    container.native = undefined;\n    ngDevMode && assertNodeType(container, 0 /* Container */);\n    var /** @type {?} */ nextIndex = container.data.nextIndex;\n    // remove extra views at the end of the container\n    while (nextIndex < container.data.views.length) {\n        removeView(container, nextIndex);\n    }\n}\n/**\n * @return {?}\n */\nfunction refreshDynamicChildren() {\n    for (var /** @type {?} */ current = currentView.child; current !== null; current = current.next) {\n        if (current.dynamicViewCount !== 0 && (/** @type {?} */ (current)).views) {\n            var /** @type {?} */ container_1 = /** @type {?} */ (current);\n            for (var /** @type {?} */ i = 0; i < container_1.views.length; i++) {\n                var /** @type {?} */ view = container_1.views[i];\n                renderEmbeddedTemplate(view, /** @type {?} */ ((view.data.template)), /** @type {?} */ ((view.data.context)), renderer);\n            }\n        }\n    }\n}\n/**\n * Looks for a view with a given view block id inside a provided LContainer.\n * Removes views that need to be deleted in the process.\n *\n * @param {?} containerNode where to search for views\n * @param {?} startIdx starting index in the views array to search from\n * @param {?} viewBlockId exact view block id to look for\n * @return {?} index of a found view or -1 if not found\n */\nfunction scanForView(containerNode, startIdx, viewBlockId) {\n    var /** @type {?} */ views = containerNode.data.views;\n    for (var /** @type {?} */ i = startIdx; i < views.length; i++) {\n        var /** @type {?} */ viewAtPositionId = views[i].data.id;\n        if (viewAtPositionId === viewBlockId) {\n            return views[i];\n        }\n        else if (viewAtPositionId < viewBlockId) {\n            // found a view that should not be at this position - remove\n            removeView(containerNode, i);\n        }\n        else {\n            // found a view with id grater than the one we are searching for\n            // which means that required view doesn't exist and can't be found at\n            // later positions in the views array - stop the search here\n            break;\n        }\n    }\n    return null;\n}\n/**\n * Marks the start of an embedded view.\n *\n * @param {?} viewBlockId The ID of this view\n * @return {?} boolean Whether or not this view is in creation mode\n */\nexport function embeddedViewStart(viewBlockId) {\n    var /** @type {?} */ container = /** @type {?} */ ((isParent ? previousOrParentNode : /** @type {?} */ ((previousOrParentNode.parent))));\n    ngDevMode && assertNodeType(container, 0 /* Container */);\n    var /** @type {?} */ lContainer = container.data;\n    var /** @type {?} */ viewNode = scanForView(container, lContainer.nextIndex, viewBlockId);\n    if (viewNode) {\n        previousOrParentNode = viewNode;\n        ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\n        isParent = true;\n        enterView(viewNode.data, viewNode);\n    }\n    else {\n        // When we create a new LView, we always reset the state of the instructions.\n        var /** @type {?} */ newView = createLView(viewBlockId, renderer, getOrCreateEmbeddedTView(viewBlockId, container), null, null, 2 /* CheckAlways */);\n        if (lContainer.queries) {\n            newView.queries = lContainer.queries.enterView(lContainer.nextIndex);\n        }\n        enterView(newView, viewNode = createLNode(null, 2 /* View */, null, newView));\n    }\n    return getRenderFlags(viewNode.data);\n}\n/**\n * Initialize the TView (e.g. static data) for the active embedded view.\n *\n * Each embedded view needs to set the global tData variable to the static data for\n * that view. Otherwise, the view's static data for a particular node would overwrite\n * the static data for a node in the view above it with the same index (since it's in the\n * same template).\n *\n * @param {?} viewIndex The index of the TView in TContainer\n * @param {?} parent The parent container in which to look for the view's static data\n * @return {?} TView\n */\nfunction getOrCreateEmbeddedTView(viewIndex, parent) {\n    ngDevMode && assertNodeType(parent, 0 /* Container */);\n    var /** @type {?} */ tContainer = (/** @type {?} */ (((parent)).tNode)).data;\n    if (viewIndex >= tContainer.length || tContainer[viewIndex] == null) {\n        var /** @type {?} */ tView = currentView.tView;\n        tContainer[viewIndex] = createTView(tView.directiveRegistry, tView.pipeRegistry);\n    }\n    return tContainer[viewIndex];\n}\n/**\n * Marks the end of an embedded view.\n * @return {?}\n */\nexport function embeddedViewEnd() {\n    refreshDirectives();\n    isParent = false;\n    var /** @type {?} */ viewNode = previousOrParentNode = /** @type {?} */ (currentView.node);\n    var /** @type {?} */ containerNode = /** @type {?} */ (previousOrParentNode.parent);\n    if (containerNode) {\n        ngDevMode && assertNodeType(viewNode, 2 /* View */);\n        ngDevMode && assertNodeType(containerNode, 0 /* Container */);\n        var /** @type {?} */ lContainer = containerNode.data;\n        if (creationMode) {\n            // When projected nodes are going to be inserted, the renderParent of the dynamic container\n            // used by the ViewContainerRef must be set.\n            setRenderParentInProjectedNodes(lContainer.renderParent, viewNode);\n            // it is a new view, insert it into collection of views for a given container\n            insertView(containerNode, viewNode, lContainer.nextIndex);\n        }\n        lContainer.nextIndex++;\n    }\n    leaveView(/** @type {?} */ ((/** @type {?} */ ((currentView)).parent)));\n    ngDevMode && assertEqual(isParent, false, 'isParent');\n    ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\n}\n/**\n * For nodes which are projected inside an embedded view, this function sets the renderParent\n * of their dynamic LContainerNode.\n * @param {?} renderParent the renderParent of the LContainer which contains the embedded view.\n * @param {?} viewNode the embedded view.\n * @return {?}\n */\nfunction setRenderParentInProjectedNodes(renderParent, viewNode) {\n    if (renderParent != null) {\n        var /** @type {?} */ node = viewNode.child;\n        while (node) {\n            if (node.type === 1 /* Projection */) {\n                var /** @type {?} */ nodeToProject = (/** @type {?} */ (node)).data.head;\n                var /** @type {?} */ lastNodeToProject = (/** @type {?} */ (node)).data.tail;\n                while (nodeToProject) {\n                    if (nodeToProject.dynamicLContainerNode) {\n                        nodeToProject.dynamicLContainerNode.data.renderParent = renderParent;\n                    }\n                    nodeToProject = nodeToProject === lastNodeToProject ? null : nodeToProject.pNextOrParent;\n                }\n            }\n            node = node.next;\n        }\n    }\n}\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @template T\n * @param {?} directiveIndex\n * @param {?} elementIndex\n * @return {?}\n */\nexport function componentRefresh(directiveIndex, elementIndex) {\n    ngDevMode && assertDataInRange(elementIndex);\n    var /** @type {?} */ element = /** @type {?} */ (((data))[elementIndex]);\n    ngDevMode && assertNodeType(element, 3 /* Element */);\n    ngDevMode && assertNotNull(element.data, \"Component's host node should have an LView attached.\");\n    var /** @type {?} */ hostView = /** @type {?} */ ((element.data));\n    // Only attached CheckAlways components or attached, dirty OnPush components should be checked\n    if (viewAttached(hostView) && hostView.flags & (2 /* CheckAlways */ | 4 /* Dirty */)) {\n        ngDevMode && assertDataInRange(directiveIndex, /** @type {?} */ ((directives)));\n        var /** @type {?} */ def = /** @type {?} */ (((currentView.tView.directives))[directiveIndex]);\n        detectChangesInternal(hostView, element, def, getDirectiveInstance(/** @type {?} */ ((directives))[directiveIndex]));\n    }\n}\n/**\n * Returns a boolean for whether the view is attached\n * @param {?} view\n * @return {?}\n */\nfunction viewAttached(view) {\n    return (view.flags & 8 /* Attached */) === 8 /* Attached */;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param {?} index\n * @param {?=} selectors A collection of parsed CSS selectors\n * @param {?=} textSelectors\n * @return {?}\n */\nexport function projectionDef(index, selectors, textSelectors) {\n    var /** @type {?} */ noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\n    var /** @type {?} */ distributedNodes = new Array(noOfNodeBuckets);\n    for (var /** @type {?} */ i = 0; i < noOfNodeBuckets; i++) {\n        distributedNodes[i] = [];\n    }\n    var /** @type {?} */ componentNode = findComponentHost(currentView);\n    var /** @type {?} */ componentChild = componentNode.child;\n    while (componentChild !== null) {\n        // execute selector matching logic if and only if:\n        // - there are selectors defined\n        // - a node has a tag name / attributes that can be matched\n        if (selectors && componentChild.tNode) {\n            var /** @type {?} */ matchedIdx = matchingSelectorIndex(componentChild.tNode, selectors, /** @type {?} */ ((textSelectors)));\n            distributedNodes[matchedIdx].push(componentChild);\n        }\n        else {\n            distributedNodes[0].push(componentChild);\n        }\n        componentChild = componentChild.next;\n    }\n    ngDevMode && assertDataNext(index);\n    data[index] = distributedNodes;\n}\n/**\n * Updates the linked list of a projection node, by appending another linked list.\n *\n * @param {?} projectionNode Projection node whose projected nodes linked list has to be updated\n * @param {?} appendedFirst First node of the linked list to append.\n * @param {?} appendedLast Last node of the linked list to append.\n * @return {?}\n */\nfunction appendToProjectionNode(projectionNode, appendedFirst, appendedLast) {\n    ngDevMode && assertEqual(!!appendedFirst, !!appendedLast, 'appendedFirst can be null if and only if appendedLast is also null');\n    if (!appendedLast) {\n        // nothing to append\n        return;\n    }\n    var /** @type {?} */ projectionNodeData = projectionNode.data;\n    if (projectionNodeData.tail) {\n        projectionNodeData.tail.pNextOrParent = appendedFirst;\n    }\n    else {\n        projectionNodeData.head = appendedFirst;\n    }\n    projectionNodeData.tail = appendedLast;\n    appendedLast.pNextOrParent = projectionNode;\n}\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param {?} nodeIndex\n * @param {?} localIndex - index under which distribution of projected nodes was memorized\n * @param {?=} selectorIndex - 0 means <ng-content> without any selector\n * @param {?=} attrs - attributes attached to the ng-content node, if present\n * @return {?}\n */\nexport function projection(nodeIndex, localIndex, selectorIndex, attrs) {\n    if (selectorIndex === void 0) { selectorIndex = 0; }\n    var /** @type {?} */ node = createLNode(nodeIndex, 1 /* Projection */, null, { head: null, tail: null });\n    if (node.tNode == null) {\n        node.tNode = createTNode(null, attrs || null, null);\n    }\n    isParent = false; // self closing\n    var /** @type {?} */ currentParent = node.parent;\n    // re-distribution of projectable nodes is memorized on a component's view level\n    var /** @type {?} */ componentNode = findComponentHost(currentView);\n    // make sure that nodes to project were memorized\n    var /** @type {?} */ nodesForSelector = /** @type {?} */ ((/** @type {?} */ ((componentNode.data)).data))[localIndex][selectorIndex];\n    // build the linked list of projected nodes:\n    for (var /** @type {?} */ i = 0; i < nodesForSelector.length; i++) {\n        var /** @type {?} */ nodeToProject = nodesForSelector[i];\n        if (nodeToProject.type === 1 /* Projection */) {\n            var /** @type {?} */ previouslyProjected = (/** @type {?} */ (nodeToProject)).data;\n            appendToProjectionNode(node, previouslyProjected.head, previouslyProjected.tail);\n        }\n        else {\n            appendToProjectionNode(node, /** @type {?} */ (nodeToProject), /** @type {?} */ (nodeToProject));\n        }\n    }\n    if (canInsertNativeNode(currentParent, currentView)) {\n        ngDevMode && assertNodeType(currentParent, 3 /* Element */);\n        // process each node in the list of projected nodes:\n        var /** @type {?} */ nodeToProject = node.data.head;\n        var /** @type {?} */ lastNodeToProject = node.data.tail;\n        while (nodeToProject) {\n            appendProjectedNode(/** @type {?} */ (nodeToProject), /** @type {?} */ (currentParent), currentView);\n            nodeToProject = nodeToProject === lastNodeToProject ? null : nodeToProject.pNextOrParent;\n        }\n    }\n}\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param {?} lView LView for which we want a host element node\n * @return {?} The host node\n */\nfunction findComponentHost(lView) {\n    var /** @type {?} */ viewRootLNode = lView.node;\n    while (viewRootLNode.type === 2 /* View */) {\n        ngDevMode && assertNotNull(lView.parent, 'lView.parent');\n        lView = /** @type {?} */ ((lView.parent));\n        viewRootLNode = lView.node;\n    }\n    ngDevMode && assertNodeType(viewRootLNode, 3 /* Element */);\n    ngDevMode && assertNotNull(viewRootLNode.data, 'node.data');\n    return /** @type {?} */ (viewRootLNode);\n}\n/**\n * Adds a LView or a LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @template T\n * @param {?} currentView The view where LView or LContainer should be added\n * @param {?} state The LView or LContainer to add to the view tree\n * @return {?} The state passed in\n */\nexport function addToViewTree(currentView, state) {\n    currentView.tail ? (currentView.tail.next = state) : (currentView.child = state);\n    currentView.tail = state;\n    return state;\n}\n/**\n * If node is an OnPush component, marks its LView dirty.\n * @param {?} node\n * @return {?}\n */\nexport function markDirtyIfOnPush(node) {\n    // Because data flows down the component tree, ancestors do not need to be marked dirty\n    if (node.data && !(node.data.flags & 2 /* CheckAlways */)) {\n        node.data.flags |= 4 /* Dirty */;\n    }\n}\n/**\n * Wraps an event listener so its host view and its ancestor views will be marked dirty\n * whenever the event fires. Necessary to support OnPush components.\n * @param {?} view\n * @param {?} listenerFn\n * @return {?}\n */\nexport function wrapListenerWithDirtyLogic(view, listenerFn) {\n    return function (e) {\n        markViewDirty(view);\n        return listenerFn(e);\n    };\n}\n/**\n * Wraps an event listener so its host view and its ancestor views will be marked dirty\n * whenever the event fires. Also wraps with preventDefault behavior.\n * @param {?} view\n * @param {?} listenerFn\n * @return {?}\n */\nexport function wrapListenerWithDirtyAndDefault(view, listenerFn) {\n    return function wrapListenerIn_markViewDirty(e) {\n        markViewDirty(view);\n        if (listenerFn(e) === false) {\n            e.preventDefault();\n            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n            e.returnValue = false;\n        }\n    };\n}\n/**\n * Marks current view and all ancestors dirty\n * @param {?} view\n * @return {?}\n */\nexport function markViewDirty(view) {\n    var /** @type {?} */ currentView = view;\n    while (currentView.parent != null) {\n        currentView.flags |= 4 /* Dirty */;\n        currentView = currentView.parent;\n    }\n    currentView.flags |= 4 /* Dirty */;\n    ngDevMode && assertNotNull(/** @type {?} */ ((currentView)).context, 'rootContext');\n    scheduleTick(/** @type {?} */ (((currentView)).context));\n}\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n * @template T\n * @param {?} rootContext\n * @return {?}\n */\nexport function scheduleTick(rootContext) {\n    if (rootContext.clean == _CLEAN_PROMISE) {\n        var /** @type {?} */ res_1;\n        rootContext.clean = new Promise(function (r) { return res_1 = r; });\n        rootContext.scheduler(function () {\n            tick(rootContext.component); /** @type {?} */\n            ((res_1))(null);\n            rootContext.clean = _CLEAN_PROMISE;\n        });\n    }\n}\n/**\n * Used to perform change detection on the whole application.\n *\n * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\n * executes lifecycle hooks and conditionally checks components based on their\n * `ChangeDetectionStrategy` and dirtiness.\n *\n * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\n * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\n * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\n * be changed when calling `renderComponent` and providing the `scheduler` option.\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function tick(component) {\n    var /** @type {?} */ rootView = getRootView(component);\n    var /** @type {?} */ rootComponent = (/** @type {?} */ (rootView.context)).component;\n    var /** @type {?} */ hostNode = _getComponentHostLElementNode(rootComponent);\n    ngDevMode && assertNotNull(hostNode.data, 'Component host node should be attached to an LView');\n    renderComponentOrTemplate(hostNode, rootView, rootComponent);\n}\n/**\n * Retrieve the root view from any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} component any component\n * @return {?}\n */\nexport function getRootView(component) {\n    ngDevMode && assertNotNull(component, 'component');\n    var /** @type {?} */ lElementNode = _getComponentHostLElementNode(component);\n    var /** @type {?} */ lView = lElementNode.view;\n    while (lView.parent) {\n        lView = lView.parent;\n    }\n    return lView;\n}\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {\\@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @template T\n * @param {?} component The component which the change detection should be performed on.\n * @return {?}\n */\nexport function detectChanges(component) {\n    var /** @type {?} */ hostNode = _getComponentHostLElementNode(component);\n    ngDevMode && assertNotNull(hostNode.data, 'Component host node should be attached to an LView');\n    var /** @type {?} */ componentIndex = /** @type {?} */ ((hostNode.tNode)).flags >> 13 /* INDX_SHIFT */;\n    var /** @type {?} */ def = /** @type {?} */ (((hostNode.view.tView.directives))[componentIndex]);\n    detectChangesInternal(/** @type {?} */ (hostNode.data), hostNode, def, component);\n}\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function checkNoChanges(component) {\n    checkNoChangesMode = true;\n    try {\n        detectChanges(component);\n    }\n    finally {\n        checkNoChangesMode = false;\n    }\n}\n/**\n * Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\n * @template T\n * @param {?} hostView\n * @param {?} hostNode\n * @param {?} def\n * @param {?} component\n * @return {?}\n */\nexport function detectChangesInternal(hostView, hostNode, def, component) {\n    var /** @type {?} */ oldView = enterView(hostView, hostNode);\n    var /** @type {?} */ template = def.template;\n    try {\n        template(getRenderFlags(hostView), component);\n        refreshDirectives();\n        refreshDynamicChildren();\n    }\n    finally {\n        leaveView(oldView);\n    }\n}\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * @template T\n * @param {?} component Component to mark as dirty.\n * @return {?}\n */\nexport function markDirty(component) {\n    ngDevMode && assertNotNull(component, 'component');\n    var /** @type {?} */ lElementNode = _getComponentHostLElementNode(component);\n    markViewDirty(lElementNode.view);\n}\n/**\n * A special value which designates that a value has not changed.\n */\nexport var /** @type {?} */ NO_CHANGE = /** @type {?} */ ({});\n/**\n *  Initializes the binding start index. Will get inlined.\n *\n *  This function must be called before any binding related function is called\n *  (ie `bind()`, `interpolationX()`, `pureFunctionX()`)\n * @return {?}\n */\nfunction initBindings() {\n    ngDevMode && assertEqual(currentView.bindingStartIndex, -1, 'Binding start index should only be set once, when null');\n    ngDevMode && assertEqual(currentView.bindingIndex, -1, 'Binding index should not yet be set ' + currentView.bindingIndex);\n    currentView.bindingIndex = currentView.bindingStartIndex = data.length;\n}\n/**\n * Creates a single value binding.\n *\n * @template T\n * @param {?} value Value to diff\n * @return {?}\n */\nexport function bind(value) {\n    if (currentView.bindingStartIndex < 0) {\n        initBindings();\n        return data[currentView.bindingIndex++] = value;\n    }\n    var /** @type {?} */ changed = value !== NO_CHANGE && isDifferent(data[currentView.bindingIndex], value);\n    if (changed) {\n        throwErrorIfNoChangesMode(creationMode, checkNoChangesMode, data[currentView.bindingIndex], value);\n        data[currentView.bindingIndex] = value;\n    }\n    currentView.bindingIndex++;\n    return changed ? value : NO_CHANGE;\n}\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n * @param {?} values\n * @return {?}\n */\nexport function interpolationV(values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    var /** @type {?} */ different = false;\n    for (var /** @type {?} */ i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        bindingUpdated(values[i]) && (different = true);\n    }\n    if (!different) {\n        return NO_CHANGE;\n    }\n    // Build the updated content\n    var /** @type {?} */ content = values[0];\n    for (var /** @type {?} */ i = 1; i < values.length; i += 2) {\n        content += stringify(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param {?} prefix static value used for concatenation only.\n * @param {?} v0 value checked for change.\n * @param {?} suffix static value used for concatenation only.\n * @return {?}\n */\nexport function interpolation1(prefix, v0, suffix) {\n    var /** @type {?} */ different = bindingUpdated(v0);\n    return different ? prefix + stringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation2(prefix, v0, i0, v1, suffix) {\n    var /** @type {?} */ different = bindingUpdated2(v0, v1);\n    return different ? prefix + stringify(v0) + i0 + stringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation bindings with 3 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\n    var /** @type {?} */ different = bindingUpdated2(v0, v1);\n    different = bindingUpdated(v2) || different;\n    return different ? prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + suffix :\n        NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) +\n            suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\n    different = bindingUpdated(v4) || different;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\n    different = bindingUpdated2(v4, v5) || different;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\n    different = bindingUpdated2(v4, v5) || different;\n    different = bindingUpdated(v6) || different;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + i5 + stringify(v6) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} i6\n * @param {?} v7\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\n    different = bindingUpdated4(v4, v5, v6, v7) || different;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + i5 + stringify(v6) + i6 + stringify(v7) + suffix :\n        NO_CHANGE;\n}\n/**\n * Store a value in the `data` at a given `index`.\n * @template T\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nexport function store(index, value) {\n    // We don't store any static data for local variables, so the first time\n    // we see the template, we should store as null to avoid a sparse array\n    if (index >= tData.length) {\n        tData[index] = null;\n    }\n    data[index] = value;\n}\n/**\n * Retrieves a value from the `data`.\n * @template T\n * @param {?} index\n * @return {?}\n */\nexport function load(index) {\n    ngDevMode && assertDataInRange(index);\n    return data[index];\n}\n/**\n * Retrieves a value from the `directives` array.\n * @template T\n * @param {?} index\n * @return {?}\n */\nexport function loadDirective(index) {\n    ngDevMode && assertNotNull(directives, 'Directives array should be defined if reading a dir.');\n    ngDevMode && assertDataInRange(index, /** @type {?} */ ((directives)));\n    return /** @type {?} */ ((directives))[index];\n}\n/**\n * Gets the current binding value and increments the binding index.\n * @return {?}\n */\nexport function consumeBinding() {\n    ngDevMode && assertDataInRange(currentView.bindingIndex);\n    ngDevMode &&\n        assertNotEqual(data[currentView.bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return data[currentView.bindingIndex++];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n * @param {?} value\n * @return {?}\n */\nexport function bindingUpdated(value) {\n    ngDevMode && assertNotEqual(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    if (currentView.bindingStartIndex < 0) {\n        initBindings();\n    }\n    else if (isDifferent(data[currentView.bindingIndex], value)) {\n        throwErrorIfNoChangesMode(creationMode, checkNoChangesMode, data[currentView.bindingIndex], value);\n    }\n    else {\n        currentView.bindingIndex++;\n        return false;\n    }\n    data[currentView.bindingIndex++] = value;\n    return true;\n}\n/**\n * Updates binding if changed, then returns the latest value.\n * @param {?} value\n * @return {?}\n */\nexport function checkAndUpdateBinding(value) {\n    bindingUpdated(value);\n    return value;\n}\n/**\n * Updates 2 bindings if changed, then returns whether either was updated.\n * @param {?} exp1\n * @param {?} exp2\n * @return {?}\n */\nexport function bindingUpdated2(exp1, exp2) {\n    var /** @type {?} */ different = bindingUpdated(exp1);\n    return bindingUpdated(exp2) || different;\n}\n/**\n * Updates 4 bindings if changed, then returns whether any was updated.\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @return {?}\n */\nexport function bindingUpdated4(exp1, exp2, exp3, exp4) {\n    var /** @type {?} */ different = bindingUpdated2(exp1, exp2);\n    return bindingUpdated2(exp3, exp4) || different;\n}\n/**\n * @return {?}\n */\nexport function getTView() {\n    return currentView.tView;\n}\n/**\n * @template T\n * @param {?} instanceOrArray\n * @return {?}\n */\nexport function getDirectiveInstance(instanceOrArray) {\n    // Directives with content queries store an array in directives[directiveIndex]\n    // with the instance as the first index\n    return Array.isArray(instanceOrArray) ? instanceOrArray[0] : instanceOrArray;\n}\n/**\n * @return {?}\n */\nexport function assertPreviousIsParent() {\n    assertEqual(isParent, true, 'previousOrParentNode should be a parent');\n}\n/**\n * @return {?}\n */\nfunction assertHasParent() {\n    assertNotNull(previousOrParentNode.parent, 'previousOrParentNode should have a parent');\n}\n/**\n * @param {?} index\n * @param {?=} arr\n * @return {?}\n */\nfunction assertDataInRange(index, arr) {\n    if (arr == null)\n        arr = data;\n    assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n/**\n * @param {?} index\n * @param {?=} arr\n * @return {?}\n */\nfunction assertDataNext(index, arr) {\n    if (arr == null)\n        arr = data;\n    assertEqual(arr.length, index, \"index \" + index + \" expected to be at the end of arr (length \" + arr.length + \")\");\n}\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function _getComponentHostLElementNode(component) {\n    ngDevMode && assertNotNull(component, 'expecting component got null');\n    var /** @type {?} */ lElementNode = /** @type {?} */ ((/** @type {?} */ (component))[NG_HOST_SYMBOL]);\n    ngDevMode && assertNotNull(component, 'object is not a component');\n    return lElementNode;\n}\nexport var /** @type {?} */ CLEAN_PROMISE = _CLEAN_PROMISE;\nexport var /** @type {?} */ ROOT_DIRECTIVE_INDICES = _ROOT_DIRECTIVE_INDICES;\n//# sourceMappingURL=instructions.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { checkNoChanges, detectChanges, markViewDirty } from './instructions';\nimport { notImplemented } from './util';\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nViewRef = /** @class */ (function () {\n    function ViewRef(_view, context) {\n        this._view = _view;\n        this.context = /** @type {?} */ ((context));\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} view\n     * @param {?} context\n     * @return {?}\n     */\n    ViewRef.prototype._setComponentContext = /**\n     * \\@internal\n     * @param {?} view\n     * @param {?} context\n     * @return {?}\n     */\n    function (view, context) {\n        this._view = view;\n        this.context = context;\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { notImplemented(); };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { notImplemented(); };\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-kx7rrw))\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     */\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-kx7rrw))\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.markForCheck = /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-kx7rrw))\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { markViewDirty(this._view); };\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     */\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.detach = /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { this._view.flags &= ~8 /* Attached */; };\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-ymgsxw))\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     */\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-ymgsxw))\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.reattach = /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-ymgsxw))\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { this._view.flags |= 8 /* Attached */; };\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {@link ChangeDetectorRef#detach detach} for more information.\n     */\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    ViewRef.prototype.detectChanges = /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    function () { detectChanges(this.context); };\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     */\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    ViewRef.prototype.checkNoChanges = /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    function () { checkNoChanges(this.context); };\n    return ViewRef;\n}());\n/**\n * @template T\n */\nexport { ViewRef };\nfunction ViewRef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewRef.prototype.context;\n    /** @type {?} */\n    ViewRef.prototype.rootNodes;\n    /** @type {?} */\n    ViewRef.prototype.destroyed;\n    /** @type {?} */\n    ViewRef.prototype._view;\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nEmbeddedViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(EmbeddedViewRef, _super);\n    function EmbeddedViewRef(viewNode, template, context) {\n        var _this = _super.call(this, viewNode.data, context) || this;\n        _this._lViewNode = viewNode;\n        return _this;\n    }\n    return EmbeddedViewRef;\n}(ViewRef));\n/**\n * @template T\n */\nexport { EmbeddedViewRef };\nfunction EmbeddedViewRef_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    EmbeddedViewRef.prototype._lViewNode;\n}\n/**\n * Creates a ViewRef bundled with destroy functionality.\n *\n * @template T\n * @param {?} view\n * @param {?} context The context for this view\n * @return {?} The ViewRef\n */\nexport function createViewRef(view, context) {\n    // TODO: add detectChanges back in when implementing ChangeDetectorRef.detectChanges\n    return addDestroyable(new ViewRef(/** @type {?} */ ((view)), context));\n}\n/**\n * Interface for destroy logic. Implemented by addDestroyable.\n * @record\n * @template T\n */\nexport function DestroyRef() { }\nfunction DestroyRef_tsickle_Closure_declarations() {\n    /**\n     * Whether or not this object has been destroyed\n     * @type {?}\n     */\n    DestroyRef.prototype.destroyed;\n    /**\n     * Destroy the instance and call all onDestroy callbacks.\n     * @type {?}\n     */\n    DestroyRef.prototype.destroy;\n    /**\n     * Register callbacks that should be called onDestroy\n     * @type {?}\n     */\n    DestroyRef.prototype.onDestroy;\n}\n/**\n * Decorates an object with destroy logic (implementing the DestroyRef interface)\n * and returns the enhanced object.\n *\n * @template T, C\n * @param {?} obj The object to decorate\n * @return {?} The object with destroy logic\n */\nexport function addDestroyable(obj) {\n    var /** @type {?} */ destroyFn = null;\n    obj.destroyed = false;\n    obj.destroy = function () {\n        destroyFn && destroyFn.forEach(function (fn) { return fn(); });\n        this.destroyed = true;\n    };\n    obj.onDestroy = function (fn) { return (destroyFn || (destroyFn = [])).push(fn); };\n    return obj;\n}\n//# sourceMappingURL=view_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertGreaterThan, assertLessThan, assertNotNull } from './assert';\nimport { addToViewTree, assertPreviousIsParent, createLContainer, createLNodeObject, getDirectiveInstance, getPreviousOrParentNode, getRenderer, isComponent, renderEmbeddedTemplate, resolveDirective } from './instructions';\nimport { assertNodeOfPossibleTypes, assertNodeType } from './node_assert';\nimport { insertView, removeView } from './node_manipulation';\nimport { notImplemented, stringify } from './util';\nimport { EmbeddedViewRef, addDestroyable, createViewRef } from './view_ref';\n/**\n * If a directive is diPublic, bloomAdd sets a property on the instance with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\nvar /** @type {?} */ NG_ELEMENT_ID = '__NG_ELEMENT_ID__';\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nvar /** @type {?} */ BLOOM_SIZE = 256;\n/**\n * Counter used to generate unique IDs for directives.\n */\nvar /** @type {?} */ nextNgElementId = 0;\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param {?} injector The node injector in which the directive should be registered\n * @param {?} type The directive to register\n * @return {?}\n */\nexport function bloomAdd(injector, type) {\n    var /** @type {?} */ id = (/** @type {?} */ (type))[NG_ELEMENT_ID];\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = (/** @type {?} */ (type))[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n    // This means that after 255, some directives will share slots, leading to some false positives\n    // when checking for a directive's presence.\n    var /** @type {?} */ bloomBit = id % BLOOM_SIZE;\n    // Create a mask that targets the specific bit associated with the directive.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    var /** @type {?} */ mask = 1 << bloomBit;\n    // Use the raw bloomBit number to determine which bloom filter bucket we should check\n    // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\n    if (bloomBit < 128) {\n        // Then use the mask to flip on the bit (0-31) associated with the directive in that bucket\n        bloomBit < 64 ? (bloomBit < 32 ? (injector.bf0 |= mask) : (injector.bf1 |= mask)) :\n            (bloomBit < 96 ? (injector.bf2 |= mask) : (injector.bf3 |= mask));\n    }\n    else {\n        bloomBit < 192 ? (bloomBit < 160 ? (injector.bf4 |= mask) : (injector.bf5 |= mask)) :\n            (bloomBit < 224 ? (injector.bf6 |= mask) : (injector.bf7 |= mask));\n    }\n}\n/**\n * @return {?}\n */\nexport function getOrCreateNodeInjector() {\n    ngDevMode && assertPreviousIsParent();\n    return getOrCreateNodeInjectorForNode(/** @type {?} */ (getPreviousOrParentNode()));\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param {?} node for which an injector should be retrieved / created.\n * @return {?} Node injector\n */\nexport function getOrCreateNodeInjectorForNode(node) {\n    var /** @type {?} */ nodeInjector = node.nodeInjector;\n    var /** @type {?} */ parentInjector = node.parent && node.parent.nodeInjector;\n    if (nodeInjector != parentInjector) {\n        return /** @type {?} */ ((nodeInjector));\n    }\n    return node.nodeInjector = {\n        parent: parentInjector,\n        node: node,\n        bf0: 0,\n        bf1: 0,\n        bf2: 0,\n        bf3: 0,\n        bf4: 0,\n        bf5: 0,\n        bf6: 0,\n        bf7: 0,\n        cbf0: parentInjector == null ? 0 : parentInjector.cbf0 | parentInjector.bf0,\n        cbf1: parentInjector == null ? 0 : parentInjector.cbf1 | parentInjector.bf1,\n        cbf2: parentInjector == null ? 0 : parentInjector.cbf2 | parentInjector.bf2,\n        cbf3: parentInjector == null ? 0 : parentInjector.cbf3 | parentInjector.bf3,\n        cbf4: parentInjector == null ? 0 : parentInjector.cbf4 | parentInjector.bf4,\n        cbf5: parentInjector == null ? 0 : parentInjector.cbf5 | parentInjector.bf5,\n        cbf6: parentInjector == null ? 0 : parentInjector.cbf6 | parentInjector.bf6,\n        cbf7: parentInjector == null ? 0 : parentInjector.cbf7 | parentInjector.bf7,\n        injector: null,\n        templateRef: null,\n        viewContainerRef: null,\n        elementRef: null,\n        changeDetectorRef: null\n    };\n}\n/** @enum {number} */\nvar InjectFlags = {\n    /** Dependency is not required. Null will be injected if there is no provider for the dependency.\n         */\n    Optional: 1,\n    /** When resolving a dependency, include the node that is requesting injection. */\n    CheckSelf: 2,\n    /** When resolving a dependency, include ancestors of the node requesting injection. */\n    CheckParent: 4,\n    /** Default injection options: required, checks both self and ancestors. */\n    Default: 6,\n};\nexport { InjectFlags };\n/**\n * Constructs an injection error with the given text and token.\n *\n * @param {?} text The text of the error\n * @param {?} token The token associated with the error\n * @return {?} The error that was created\n */\nfunction createInjectionError(text, token) {\n    return new Error(\"ElementInjector: \" + text + \" [\" + stringify(token) + \"]\");\n}\n/**\n * Makes a directive public to the DI system by adding it to an injector's bloom filter.\n *\n * @param {?} di The node injector in which a directive will be added\n * @param {?} def The definition of the directive to be made public\n * @return {?}\n */\nexport function diPublicInInjector(di, def) {\n    bloomAdd(di, def.type);\n}\n/**\n * Makes a directive public to the DI system by adding it to an injector's bloom filter.\n *\n * @param {?} def The definition of the directive to be made public\n * @return {?}\n */\nexport function diPublic(def) {\n    diPublicInInjector(getOrCreateNodeInjector(), def);\n}\n/**\n * Searches for an instance of the given type up the injector tree and returns\n * that instance if found.\n *\n * If not found, it will propagate up to the next parent injector until the token\n * is found or the top is reached.\n *\n * Usage example (in factory function):\n *\n * class SomeDirective {\n *   constructor(directive: DirectiveA) {}\n *\n *   static ngDirectiveDef = defineDirective({\n *     type: SomeDirective,\n *     factory: () => new SomeDirective(directiveInject(DirectiveA))\n *   });\n * }\n *\n * NOTE: use `directiveInject` with `\\@Directive`, `\\@Component`, and `\\@Pipe`. For\n * all other injection use `inject` which does not walk the DOM render tree.\n *\n * @template T\n * @param {?} token The directive type to search for\n * @param {?=} flags Injection flags (e.g. CheckParent)\n * @param {?=} defaultValue\n * @return {?} The instance found\n */\nexport function directiveInject(token, flags, defaultValue) {\n    return getOrCreateInjectable(getOrCreateNodeInjector(), token, flags, defaultValue);\n}\n/**\n * Creates an ElementRef and stores it on the injector.\n * Or, if the ElementRef already exists, retrieves the existing ElementRef.\n *\n * @return {?} The ElementRef instance to use\n */\nexport function injectElementRef() {\n    return getOrCreateElementRef(getOrCreateNodeInjector());\n}\n/**\n * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already\n * exists, retrieves the existing TemplateRef.\n *\n * @template T\n * @return {?} The TemplateRef instance to use\n */\nexport function injectTemplateRef() {\n    return getOrCreateTemplateRef(getOrCreateNodeInjector());\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @return {?} The ViewContainerRef instance to use\n */\nexport function injectViewContainerRef() {\n    return getOrCreateContainerRef(getOrCreateNodeInjector());\n}\n/**\n * Returns a ChangeDetectorRef (a.k.a. a ViewRef)\n * @return {?}\n */\nexport function injectChangeDetectorRef() {\n    return getOrCreateChangeDetectorRef(getOrCreateNodeInjector(), null);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * \\@Component(...)\n * class MyComponent {\n *   constructor(\\@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * \\@experimental\n * @param {?} attrName\n * @return {?}\n */\nexport function injectAttribute(attrName) {\n    ngDevMode && assertPreviousIsParent();\n    var /** @type {?} */ lElement = /** @type {?} */ (getPreviousOrParentNode());\n    ngDevMode && assertNodeType(lElement, 3 /* Element */);\n    var /** @type {?} */ tElement = /** @type {?} */ ((lElement.tNode));\n    ngDevMode && assertNotNull(tElement, 'expecting tNode');\n    var /** @type {?} */ attrs = tElement.attrs;\n    if (attrs) {\n        for (var /** @type {?} */ i = 0; i < attrs.length; i = i + 2) {\n            if (attrs[i] == attrName) {\n                return attrs[i + 1];\n            }\n        }\n    }\n    return undefined;\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n * Or, if it already exists, retrieves the existing instance.\n *\n * @param {?} di\n * @param {?} context\n * @return {?} The ChangeDetectorRef to use\n */\nexport function getOrCreateChangeDetectorRef(di, context) {\n    if (di.changeDetectorRef)\n        return di.changeDetectorRef;\n    var /** @type {?} */ currentNode = di.node;\n    if (isComponent(/** @type {?} */ ((currentNode.tNode)))) {\n        return di.changeDetectorRef = createViewRef(/** @type {?} */ (currentNode.data), context);\n    }\n    else if (currentNode.type === 3 /* Element */) {\n        return di.changeDetectorRef = getOrCreateHostChangeDetector(currentNode.view.node);\n    }\n    return /** @type {?} */ ((null));\n}\n/**\n * Gets or creates ChangeDetectorRef for the closest host component\n * @param {?} currentNode\n * @return {?}\n */\nfunction getOrCreateHostChangeDetector(currentNode) {\n    var /** @type {?} */ hostNode = getClosestComponentAncestor(currentNode);\n    var /** @type {?} */ hostInjector = hostNode.nodeInjector;\n    var /** @type {?} */ existingRef = hostInjector && hostInjector.changeDetectorRef;\n    return existingRef ?\n        existingRef :\n        createViewRef(/** @type {?} */ (hostNode.data), /** @type {?} */ ((hostNode.view.directives))[/** @type {?} */ ((hostNode.tNode)).flags >> 13 /* INDX_SHIFT */]);\n}\n/**\n * If the node is an embedded view, traverses up the view tree to return the closest\n * ancestor view that is attached to a component. If it's already a component node,\n * returns itself.\n * @param {?} node\n * @return {?}\n */\nfunction getClosestComponentAncestor(node) {\n    while (node.type === 2 /* View */) {\n        node = node.view.node;\n    }\n    return /** @type {?} */ (node);\n}\n/**\n * Searches for an instance of the given directive type up the injector tree and returns\n * that instance if found.\n *\n * Specifically, it gets the bloom filter bit associated with the directive (see bloomHashBit),\n * checks that bit against the bloom filter structure to identify an injector that might have\n * the directive (see bloomFindPossibleInjector), then searches the directives on that injector\n * for a match.\n *\n * If not found, it will propagate up to the next parent injector until the token\n * is found or the top is reached.\n *\n * @template T\n * @param {?} di Node injector where the search should start\n * @param {?} token The directive type to search for\n * @param {?=} flags Injection flags (e.g. CheckParent)\n * @param {?=} defaultValue\n * @return {?} The instance found\n */\nexport function getOrCreateInjectable(di, token, flags, defaultValue) {\n    var /** @type {?} */ bloomHash = bloomHashBit(token);\n    // If the token has a bloom hash, then it is a directive that is public to the injection system\n    // (diPublic). If there is no hash, fall back to the module injector.\n    if (bloomHash === null) {\n        var /** @type {?} */ moduleInjector = di.injector;\n        if (!moduleInjector) {\n            if (defaultValue != null) {\n                return defaultValue;\n            }\n            throw createInjectionError('NotFound', token);\n        }\n        moduleInjector.get(token);\n    }\n    else {\n        var /** @type {?} */ injector = di;\n        while (injector) {\n            // Get the closest potential matching injector (upwards in the injector tree) that\n            // *potentially* has the token.\n            injector = bloomFindPossibleInjector(injector, bloomHash);\n            // If no injector is found, we *know* that there is no ancestor injector that contains the\n            // token, so we abort.\n            if (!injector) {\n                break;\n            }\n            // At this point, we have an injector which *may* contain the token, so we step through the\n            // directives associated with the injector's corresponding node to get the directive instance.\n            var /** @type {?} */ node = injector.node;\n            // The size of the node's directive's list is stored in certain bits of the node's flags,\n            // so exact it with a mask and shift it back such that the bits reflect the real value.\n            var /** @type {?} */ flags_1 = /** @type {?} */ ((node.tNode)).flags;\n            var /** @type {?} */ size = (flags_1 & 8190 /* SIZE_MASK */) >> 1 /* SIZE_SHIFT */;\n            if (size !== 0) {\n                // The start index of the directives list is also part of the node's flags, but there is\n                // nothing to the \"left\" of it so it doesn't need a mask.\n                var /** @type {?} */ start = flags_1 >> 13 /* INDX_SHIFT */;\n                var /** @type {?} */ defs = /** @type {?} */ ((node.view.tView.directives));\n                for (var /** @type {?} */ i = start, /** @type {?} */ ii = start + size; i < ii; i++) {\n                    // Get the definition for the directive at this index and, if it is injectable (diPublic),\n                    // and matches the given token, return the directive instance.\n                    var /** @type {?} */ directiveDef = /** @type {?} */ (defs[i]);\n                    if (directiveDef.diPublic && directiveDef.type == token) {\n                        return getDirectiveInstance(/** @type {?} */ ((node.view.directives))[i]);\n                    }\n                }\n            }\n            // If we *didn't* find the directive for the token and we are searching the current node's\n            // injector, it's possible the directive is on this node and hasn't been created yet.\n            var /** @type {?} */ instance = void 0;\n            if (injector === di && (instance = searchMatchesQueuedForCreation(node, token))) {\n                return instance;\n            }\n            // The def wasn't found anywhere on this node, so it might be a false positive.\n            // Traverse up the tree and continue searching.\n            injector = injector.parent;\n        }\n    }\n    // No directive was found for the given token.\n    // TODO: implement optional, check-self, and check-parent.\n    throw createInjectionError('Not found', token);\n}\n/**\n * @template T\n * @param {?} node\n * @param {?} token\n * @return {?}\n */\nfunction searchMatchesQueuedForCreation(node, token) {\n    var /** @type {?} */ matches = node.view.tView.currentMatches;\n    if (matches) {\n        for (var /** @type {?} */ i = 0; i < matches.length; i += 2) {\n            var /** @type {?} */ def = /** @type {?} */ (matches[i]);\n            if (def.type === token) {\n                return resolveDirective(def, i + 1, matches, node.view.tView);\n            }\n        }\n    }\n    return null;\n}\n/**\n * Given a directive type, this function returns the bit in an injector's bloom filter\n * that should be used to determine whether or not the directive is present.\n *\n * When the directive was added to the bloom filter, it was given a unique ID that can be\n * retrieved on the class. Since there are only BLOOM_SIZE slots per bloom filter, the directive's\n * ID must be modulo-ed by BLOOM_SIZE to get the correct bloom bit (directives share slots after\n * BLOOM_SIZE is reached).\n *\n * @param {?} type The directive type\n * @return {?} The bloom bit to check for the directive\n */\nfunction bloomHashBit(type) {\n    var /** @type {?} */ id = (/** @type {?} */ (type))[NG_ELEMENT_ID];\n    return typeof id === 'number' ? id % BLOOM_SIZE : null;\n}\n/**\n * Finds the closest injector that might have a certain directive.\n *\n * Each directive corresponds to a bit in an injector's bloom filter. Given the bloom bit to\n * check and a starting injector, this function traverses up injectors until it finds an\n * injector that contains a 1 for that bit in its bloom filter. A 1 indicates that the\n * injector may have that directive. It only *may* have the directive because directives begin\n * to share bloom filter bits after the BLOOM_SIZE is reached, and it could correspond to a\n * different directive sharing the bit.\n *\n * Note: We can skip checking further injectors up the tree if an injector's cbf structure\n * has a 0 for that bloom bit. Since cbf contains the merged value of all the parent\n * injectors, a 0 in the bloom bit indicates that the parents definitely do not contain\n * the directive and do not need to be checked.\n *\n * @param {?} startInjector\n * @param {?} bloomBit The bit to check in each injector's bloom filter\n * @return {?} An injector that might have the directive\n */\nexport function bloomFindPossibleInjector(startInjector, bloomBit) {\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    var /** @type {?} */ mask = 1 << bloomBit;\n    // Traverse up the injector tree until we find a potential match or until we know there *isn't* a\n    // match.\n    var /** @type {?} */ injector = startInjector;\n    while (injector) {\n        // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\n        // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\n        // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\n        var /** @type {?} */ value = void 0;\n        if (bloomBit < 128) {\n            value = bloomBit < 64 ? (bloomBit < 32 ? injector.bf0 : injector.bf1) :\n                (bloomBit < 96 ? injector.bf2 : injector.bf3);\n        }\n        else {\n            value = bloomBit < 192 ? (bloomBit < 160 ? injector.bf4 : injector.bf5) :\n                (bloomBit < 224 ? injector.bf6 : injector.bf7);\n        }\n        // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n        // this injector is a potential match.\n        if ((value & mask) === mask) {\n            return injector;\n        }\n        // If the current injector does not have the directive, check the bloom filters for the ancestor\n        // injectors (cbf0 - cbf7). These filters capture *all* ancestor injectors.\n        if (bloomBit < 128) {\n            value = bloomBit < 64 ? (bloomBit < 32 ? injector.cbf0 : injector.cbf1) :\n                (bloomBit < 96 ? injector.cbf2 : injector.cbf3);\n        }\n        else {\n            value = bloomBit < 192 ? (bloomBit < 160 ? injector.cbf4 : injector.cbf5) :\n                (bloomBit < 224 ? injector.cbf6 : injector.cbf7);\n        }\n        // If the ancestor bloom filter value has the bit corresponding to the directive, traverse up to\n        // find the specific injector. If the ancestor bloom filter does not have the bit, we can abort.\n        injector = (value & mask) ? injector.parent : null;\n    }\n    return null;\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nReadFromInjectorFn = /** @class */ (function () {\n    function ReadFromInjectorFn(read) {\n        this.read = read;\n    }\n    return ReadFromInjectorFn;\n}());\n/**\n * @template T\n */\nexport { ReadFromInjectorFn };\nfunction ReadFromInjectorFn_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReadFromInjectorFn.prototype.read;\n}\n/**\n * Creates an ElementRef for a given node injector and stores it on the injector.\n * Or, if the ElementRef already exists, retrieves the existing ElementRef.\n *\n * @param {?} di The node injector where we should store a created ElementRef\n * @return {?} The ElementRef instance to use\n */\nexport function getOrCreateElementRef(di) {\n    return di.elementRef || (di.elementRef = new ElementRef(di.node.type === 0 /* Container */ ? null : di.node.native));\n}\nexport var /** @type {?} */ QUERY_READ_TEMPLATE_REF = /** @type {?} */ ((/** @type {?} */ (new ReadFromInjectorFn(function (injector) { return getOrCreateTemplateRef(injector); }))));\nexport var /** @type {?} */ QUERY_READ_CONTAINER_REF = /** @type {?} */ ((/** @type {?} */ (new ReadFromInjectorFn(function (injector) { return getOrCreateContainerRef(injector); }))));\nexport var /** @type {?} */ QUERY_READ_ELEMENT_REF = /** @type {?} */ ((/** @type {?} */ (new ReadFromInjectorFn(function (injector) { return getOrCreateElementRef(injector); }))));\nexport var /** @type {?} */ QUERY_READ_FROM_NODE = (/** @type {?} */ ((new ReadFromInjectorFn(function (injector, node, directiveIdx) {\n    ngDevMode && assertNodeOfPossibleTypes(node, 0 /* Container */, 3 /* Element */);\n    if (directiveIdx > -1) {\n        return /** @type {?} */ ((node.view.directives))[directiveIdx];\n    }\n    else if (node.type === 3 /* Element */) {\n        return getOrCreateElementRef(injector);\n    }\n    else if (node.type === 0 /* Container */) {\n        return getOrCreateTemplateRef(injector);\n    }\n    throw new Error('fail');\n}))));\n/**\n * A ref to a node's native element.\n */\nvar /**\n * A ref to a node's native element.\n */\nElementRef = /** @class */ (function () {\n    function ElementRef(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n    return ElementRef;\n}());\nfunction ElementRef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElementRef.prototype.nativeElement;\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @param {?} di\n * @return {?} The ViewContainerRef instance to use\n */\nexport function getOrCreateContainerRef(di) {\n    if (!di.viewContainerRef) {\n        var /** @type {?} */ vcRefHost = di.node;\n        ngDevMode && assertNodeOfPossibleTypes(vcRefHost, 0 /* Container */, 3 /* Element */);\n        var /** @type {?} */ lContainer = createLContainer(/** @type {?} */ ((vcRefHost.parent)), vcRefHost.view);\n        var /** @type {?} */ lContainerNode = createLNodeObject(0 /* Container */, vcRefHost.view, /** @type {?} */ ((vcRefHost.parent)), undefined, lContainer, null);\n        vcRefHost.dynamicLContainerNode = lContainerNode;\n        addToViewTree(vcRefHost.view, lContainer);\n        di.viewContainerRef = new ViewContainerRef(lContainerNode);\n    }\n    return di.viewContainerRef;\n}\n/**\n * A ref to a container that enables adding and removing views from that container\n * imperatively.\n */\nvar /**\n * A ref to a container that enables adding and removing views from that container\n * imperatively.\n */\nViewContainerRef = /** @class */ (function () {\n    function ViewContainerRef(_lContainerNode) {\n        this._lContainerNode = _lContainerNode;\n        this._viewRefs = [];\n    }\n    /**\n     * @return {?}\n     */\n    ViewContainerRef.prototype.clear = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ lContainer = this._lContainerNode.data;\n        while (lContainer.views.length) {\n            this.remove(0);\n        }\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.get = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) { return this._viewRefs[index] || null; };\n    Object.defineProperty(ViewContainerRef.prototype, \"length\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ lContainer = this._lContainerNode.data;\n            return lContainer.views.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.createEmbeddedView = /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    function (templateRef, context, index) {\n        var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context || /** @type {?} */ ({}));\n        this.insert(viewRef, index);\n        return viewRef;\n    };\n    /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ViewContainerRef.prototype.createComponent = /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (componentFactory, index, injector, projectableNodes, ngModule) {\n        throw notImplemented();\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.insert = /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    function (viewRef, index) {\n        var /** @type {?} */ lViewNode = (/** @type {?} */ (viewRef))._lViewNode;\n        var /** @type {?} */ adjustedIdx = this._adjustIndex(index);\n        insertView(this._lContainerNode, lViewNode, adjustedIdx);\n        // invalidate cache of next sibling RNode (we do similar operation in the containerRefreshEnd\n        // instruction)\n        this._lContainerNode.native = undefined;\n        this._viewRefs.splice(adjustedIdx, 0, viewRef);\n        (/** @type {?} */ (lViewNode)).parent = this._lContainerNode;\n        // If the view is dynamic (has a template), it needs to be counted both at the container\n        // level and at the node above the container.\n        if (lViewNode.data.template !== null) {\n            // Increment the container view count.\n            this._lContainerNode.data.dynamicViewCount++;\n            // Look for the parent node and increment its dynamic view count.\n            if (this._lContainerNode.parent !== null && this._lContainerNode.parent.data !== null) {\n                ngDevMode && assertNodeOfPossibleTypes(this._lContainerNode.parent, 2 /* View */, 3 /* Element */);\n                this._lContainerNode.parent.data.dynamicViewCount++;\n            }\n        }\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?} newIndex\n     * @return {?}\n     */\n    ViewContainerRef.prototype.move = /**\n     * @param {?} viewRef\n     * @param {?} newIndex\n     * @return {?}\n     */\n    function (viewRef, newIndex) {\n        var /** @type {?} */ index = this.indexOf(viewRef);\n        this.detach(index);\n        this.insert(viewRef, this._adjustIndex(newIndex));\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ViewContainerRef.prototype.indexOf = /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) { return this._viewRefs.indexOf(viewRef); };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.remove = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        this.detach(index);\n        // TODO(ml): proper destroy of the ViewRef, i.e. recursively destroy the LviewNode and its\n        // children, delete DOM nodes and QueryList, trigger hooks (onDestroy), destroy the renderer,\n        // detach projected nodes\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.detach = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        var /** @type {?} */ adjustedIdx = this._adjustIndex(index, -1);\n        removeView(this._lContainerNode, adjustedIdx);\n        return this._viewRefs.splice(adjustedIdx, 1)[0] || null;\n    };\n    /**\n     * @param {?=} index\n     * @param {?=} shift\n     * @return {?}\n     */\n    ViewContainerRef.prototype._adjustIndex = /**\n     * @param {?=} index\n     * @param {?=} shift\n     * @return {?}\n     */\n    function (index, shift) {\n        if (shift === void 0) { shift = 0; }\n        if (index == null) {\n            return this._lContainerNode.data.views.length + shift;\n        }\n        if (ngDevMode) {\n            assertGreaterThan(index, -1, 'index must be positive');\n            // +1 because it's legal to insert at the end.\n            assertLessThan(index, this._lContainerNode.data.views.length + 1 + shift, 'index');\n        }\n        return index;\n    };\n    return ViewContainerRef;\n}());\nfunction ViewContainerRef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewContainerRef.prototype._viewRefs;\n    /** @type {?} */\n    ViewContainerRef.prototype.element;\n    /** @type {?} */\n    ViewContainerRef.prototype.injector;\n    /** @type {?} */\n    ViewContainerRef.prototype.parentInjector;\n    /** @type {?} */\n    ViewContainerRef.prototype._lContainerNode;\n}\n/**\n * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already\n * exists, retrieves the existing TemplateRef.\n *\n * @template T\n * @param {?} di The node injector where we should store a created TemplateRef\n * @return {?} The TemplateRef instance to use\n */\nexport function getOrCreateTemplateRef(di) {\n    ngDevMode && assertNodeType(di.node, 0 /* Container */);\n    var /** @type {?} */ data = (/** @type {?} */ (di.node)).data;\n    return di.templateRef || (di.templateRef = new TemplateRef(getOrCreateElementRef(di), /** @type {?} */ ((data.template)), getRenderer()));\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nTemplateRef = /** @class */ (function () {\n    function TemplateRef(elementRef, template, _renderer) {\n        this._renderer = _renderer;\n        this.elementRef = elementRef;\n        this._template = template;\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateRef.prototype.createEmbeddedView = /**\n     * @param {?} context\n     * @return {?}\n     */\n    function (context) {\n        var /** @type {?} */ viewNode = renderEmbeddedTemplate(null, this._template, context, this._renderer);\n        return addDestroyable(new EmbeddedViewRef(viewNode, this._template, context));\n    };\n    return TemplateRef;\n}());\nfunction TemplateRef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateRef.prototype.elementRef;\n    /** @type {?} */\n    TemplateRef.prototype._template;\n    /** @type {?} */\n    TemplateRef.prototype._renderer;\n}\n//# sourceMappingURL=di.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Called when directives inject each other (creating a circular dependency)\n * @param {?} token\n * @return {?}\n */\nexport function throwCyclicDependencyError(token) {\n    throw new Error(\"Cannot instantiate cyclic dependency! \" + token);\n}\n/**\n * Called when there are multiple component selectors that match a given node\n * @param {?} tNode\n * @return {?}\n */\nexport function throwMultipleComponentError(tNode) {\n    throw new Error(\"Multiple components match node with tagname \" + tNode.tagName);\n}\n/**\n * Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on.\n * @param {?} creationMode\n * @param {?} checkNoChangesMode\n * @param {?} oldValue\n * @param {?} currValue\n * @return {?}\n */\nexport function throwErrorIfNoChangesMode(creationMode, checkNoChangesMode, oldValue, currValue) {\n    if (checkNoChangesMode) {\n        var /** @type {?} */ msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n        if (creationMode) {\n            msg +=\n                \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                    \" Has it been created in a change detection hook ?\";\n        }\n        // TODO: include debug context\n        throw new Error(msg);\n    }\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SimpleChange } from '../change_detection/change_detection_util';\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { resolveRendererType2 } from '../view/util';\nimport { diPublic } from './di';\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} componentDefinition\n * @return {?}\n */\nexport function defineComponent(componentDefinition) {\n    var /** @type {?} */ type = componentDefinition.type;\n    var /** @type {?} */ pipeTypes = /** @type {?} */ ((componentDefinition.pipes));\n    var /** @type {?} */ directiveTypes = /** @type {?} */ ((componentDefinition.directives));\n    var /** @type {?} */ def = /** @type {?} */ ({\n        type: type,\n        diPublic: null,\n        factory: componentDefinition.factory,\n        template: componentDefinition.template || /** @type {?} */ ((null)),\n        hostBindings: componentDefinition.hostBindings || null,\n        attributes: componentDefinition.attributes || null,\n        inputs: invertObject(componentDefinition.inputs),\n        outputs: invertObject(componentDefinition.outputs),\n        rendererType: resolveRendererType2(componentDefinition.rendererType) || null,\n        exportAs: componentDefinition.exportAs,\n        onInit: type.prototype.ngOnInit || null,\n        doCheck: type.prototype.ngDoCheck || null,\n        afterContentInit: type.prototype.ngAfterContentInit || null,\n        afterContentChecked: type.prototype.ngAfterContentChecked || null,\n        afterViewInit: type.prototype.ngAfterViewInit || null,\n        afterViewChecked: type.prototype.ngAfterViewChecked || null,\n        onDestroy: type.prototype.ngOnDestroy || null,\n        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n        directiveDefs: directiveTypes ?\n            function () {\n                return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                    .map(extractDirectiveDef);\n            } :\n            null,\n        pipeDefs: pipeTypes ?\n            function () { return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef); } :\n            null,\n        selectors: componentDefinition.selectors\n    });\n    var /** @type {?} */ feature = componentDefinition.features;\n    feature && feature.forEach(function (fn) { return fn(def); });\n    return def;\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extractDirectiveDef(type) {\n    var /** @type {?} */ def = type.ngComponentDef || type.ngDirectiveDef;\n    if (ngDevMode && !def) {\n        throw new Error(\"'\" + type.name + \"' is neither 'ComponentType' or 'DirectiveType'.\");\n    }\n    return def;\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extractPipeDef(type) {\n    var /** @type {?} */ def = type.ngPipeDef;\n    if (ngDevMode && !def) {\n        throw new Error(\"'\" + type.name + \"' is not a 'PipeType'.\");\n    }\n    return def;\n}\nvar /** @type {?} */ PRIVATE_PREFIX = '__ngOnChanges_';\n/**\n * Creates an NgOnChangesFeature function for a component's features list.\n *\n * It accepts an optional map of minified input property names to original property names,\n * if any input properties have a public alias.\n *\n * The NgOnChangesFeature function that is returned decorates a component with support for\n * the ngOnChanges lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature({name: 'name'})]\n * });\n * ```\n *\n * @param {?=} inputPropertyNames Map of input property names, if they are aliased\n * @return {?} DirectiveDefFeature\n */\nexport function NgOnChangesFeature(inputPropertyNames) {\n    return function (definition) {\n        var /** @type {?} */ inputs = definition.inputs;\n        var /** @type {?} */ proto = definition.type.prototype;\n        // Place where we will store SimpleChanges if there is a change\n        Object.defineProperty(proto, PRIVATE_PREFIX, { value: undefined, writable: true });\n        var _loop_1 = function (pubKey) {\n            var /** @type {?} */ minKey = inputs[pubKey];\n            var /** @type {?} */ propertyName = inputPropertyNames && inputPropertyNames[minKey] || pubKey;\n            var /** @type {?} */ privateMinKey = PRIVATE_PREFIX + minKey;\n            // Create a place where the actual value will be stored and make it non-enumerable\n            Object.defineProperty(proto, privateMinKey, { value: undefined, writable: true });\n            var /** @type {?} */ existingDesc = Object.getOwnPropertyDescriptor(proto, minKey);\n            // create a getter and setter for property\n            Object.defineProperty(proto, minKey, {\n                get: function () {\n                    return (existingDesc && existingDesc.get) ? existingDesc.get.call(this) :\n                        this[privateMinKey];\n                },\n                set: function (value) {\n                    var /** @type {?} */ simpleChanges = this[PRIVATE_PREFIX];\n                    var /** @type {?} */ isFirstChange = simpleChanges === undefined;\n                    if (simpleChanges == null) {\n                        simpleChanges = this[PRIVATE_PREFIX] = {};\n                    }\n                    simpleChanges[propertyName] = new SimpleChange(this[privateMinKey], value, isFirstChange);\n                    (existingDesc && existingDesc.set) ? existingDesc.set.call(this, value) :\n                        this[privateMinKey] = value;\n                }\n            });\n        };\n        for (var /** @type {?} */ pubKey in inputs) {\n            _loop_1(pubKey);\n        }\n        // If an onInit hook is defined, it will need to wrap the ngOnChanges call\n        // so the call order is changes-init-check in creation mode. In subsequent\n        // change detection runs, only the check wrapper will be called.\n        if (definition.onInit != null) {\n            definition.onInit = onChangesWrapper(definition.onInit);\n        }\n        definition.doCheck = onChangesWrapper(definition.doCheck);\n    };\n    /**\n     * @param {?} delegateHook\n     * @return {?}\n     */\n    function onChangesWrapper(delegateHook) {\n        return function () {\n            var /** @type {?} */ simpleChanges = this[PRIVATE_PREFIX];\n            if (simpleChanges != null) {\n                this.ngOnChanges(simpleChanges);\n                this[PRIVATE_PREFIX] = null;\n            }\n            delegateHook && delegateHook.apply(this);\n        };\n    }\n}\n/**\n * @template T\n * @param {?} definition\n * @return {?}\n */\nexport function PublicFeature(definition) {\n    definition.diPublic = diPublic;\n}\nvar /** @type {?} */ EMPTY = {};\n/**\n * Swaps the keys and values of an object.\n * @param {?} obj\n * @return {?}\n */\nfunction invertObject(obj) {\n    if (obj == null)\n        return EMPTY;\n    var /** @type {?} */ newObj = {};\n    for (var /** @type {?} */ minifiedKey in obj) {\n        newObj[obj[minifiedKey]] = minifiedKey;\n    }\n    return newObj;\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n */\nexport var /** @type {?} */ defineDirective = /** @type {?} */ ((defineComponent));\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} pipeDef Pipe definition generated by the compiler\n * @return {?}\n */\nexport function definePipe(pipeDef) {\n    return /** @type {?} */ ({\n        name: pipeDef.name,\n        n: pipeDef.factory,\n        pure: pipeDef.pure !== false,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    });\n}\n//# sourceMappingURL=definition.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\nimport { getSymbolIterator } from '../util';\nimport { assertEqual, assertNotNull } from './assert';\nimport { ReadFromInjectorFn, getOrCreateNodeInjectorForNode } from './di';\nimport { assertPreviousIsParent, getCurrentQueries, store } from './instructions';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/definition';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/injector';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused4 } from './interfaces/query';\nimport { flatten } from './util';\nvar /** @type {?} */ unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4;\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n * @record\n * @template T\n */\nexport function QueryPredicate() { }\nfunction QueryPredicate_tsickle_Closure_declarations() {\n    /**\n     * If looking for directives then it contains the directive type.\n     * @type {?}\n     */\n    QueryPredicate.prototype.type;\n    /**\n     * If selector then contains local names to query for.\n     * @type {?}\n     */\n    QueryPredicate.prototype.selector;\n    /**\n     * Indicates which token should be read from DI for this query.\n     * @type {?}\n     */\n    QueryPredicate.prototype.read;\n}\n/**\n * An object representing a query, which is a combination of:\n * - query predicate to determines if a given element/directive should be included in the query\n * - values collected based on a predicate\n * - `QueryList` to which collected values should be reported\n * @record\n * @template T\n */\nexport function LQuery() { }\nfunction LQuery_tsickle_Closure_declarations() {\n    /**\n     * Next query. Used when queries are stored as a linked list in `LQueries`.\n     * @type {?}\n     */\n    LQuery.prototype.next;\n    /**\n     * Destination to which the value should be added.\n     * @type {?}\n     */\n    LQuery.prototype.list;\n    /**\n     * A predicate which determines if a given element/directive should be included in the query\n     * results.\n     * @type {?}\n     */\n    LQuery.prototype.predicate;\n    /**\n     * Values which have been located.\n     *\n     * This is what builds up the `QueryList._valuesTree`.\n     * @type {?}\n     */\n    LQuery.prototype.values;\n}\nvar LQueries_ = /** @class */ (function () {\n    function LQueries_(deep) {\n        this.shallow = null;\n        this.deep = null;\n        this.deep = deep == null ? null : deep;\n    }\n    /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    LQueries_.prototype.track = /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    function (queryList, predicate, descend, read) {\n        // TODO(misko): This is not right. In case of inherited state, a calling track will incorrectly\n        // mutate parent.\n        if (descend) {\n            this.deep = createQuery(this.deep, queryList, predicate, read != null ? read : null);\n        }\n        else {\n            this.shallow = createQuery(this.shallow, queryList, predicate, read != null ? read : null);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.child = /**\n     * @return {?}\n     */\n    function () {\n        if (this.deep === null) {\n            // if we don't have any deep queries then no need to track anything more.\n            return null;\n        }\n        if (this.shallow === null) {\n            // DeepQuery: We can reuse the current state if the child state would be same as current\n            // state.\n            return this;\n        }\n        else {\n            // We need to create new state\n            return new LQueries_(this.deep);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.container = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ result = null;\n        var /** @type {?} */ query = this.deep;\n        while (query) {\n            var /** @type {?} */ containerValues = []; // prepare room for views\n            query.values.push(containerValues);\n            var /** @type {?} */ clonedQuery = { next: null, list: query.list, predicate: query.predicate, values: containerValues };\n            clonedQuery.next = result;\n            result = clonedQuery;\n            query = query.next;\n        }\n        return result ? new LQueries_(result) : null;\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    LQueries_.prototype.enterView = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        var /** @type {?} */ result = null;\n        var /** @type {?} */ query = this.deep;\n        while (query) {\n            var /** @type {?} */ viewValues = []; // prepare room for view nodes\n            query.values.splice(index, 0, viewValues);\n            var /** @type {?} */ clonedQuery = { next: null, list: query.list, predicate: query.predicate, values: viewValues };\n            clonedQuery.next = result;\n            result = clonedQuery;\n            query = query.next;\n        }\n        return result ? new LQueries_(result) : null;\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    LQueries_.prototype.addNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        add(this.shallow, node);\n        add(this.deep, node);\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    LQueries_.prototype.removeView = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        var /** @type {?} */ query = this.deep;\n        while (query) {\n            var /** @type {?} */ removed = query.values.splice(index, 1);\n            // mark a query as dirty only when removed view had matching modes\n            ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n            if (removed[0].length) {\n                query.list.setDirty();\n            }\n            query = query.next;\n        }\n    };\n    return LQueries_;\n}());\nexport { LQueries_ };\nfunction LQueries__tsickle_Closure_declarations() {\n    /** @type {?} */\n    LQueries_.prototype.shallow;\n    /** @type {?} */\n    LQueries_.prototype.deep;\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param {?} tNode static data of a node to check\n * @param {?} selector selector to match\n * @return {?} directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    var /** @type {?} */ localNames = tNode.localNames;\n    if (localNames) {\n        for (var /** @type {?} */ i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return /** @type {?} */ (localNames[i + 1]);\n            }\n        }\n    }\n    return null;\n}\n/**\n * Iterates over all the directives for a node and returns index of a directive for a given type.\n *\n * @param {?} node Node on which directives are present.\n * @param {?} type Type of a directive to look for.\n * @return {?} Index of a found directive or null when none found.\n */\nfunction geIdxOfMatchingDirective(node, type) {\n    var /** @type {?} */ defs = /** @type {?} */ ((node.view.tView.directives));\n    var /** @type {?} */ flags = /** @type {?} */ ((node.tNode)).flags;\n    var /** @type {?} */ size = (flags & 8190 /* SIZE_MASK */) >> 1 /* SIZE_SHIFT */;\n    for (var /** @type {?} */ i = flags >> 13 /* INDX_SHIFT */, /** @type {?} */ ii = i + size; i < ii; i++) {\n        var /** @type {?} */ def = /** @type {?} */ (defs[i]);\n        if (def.diPublic && def.type === type) {\n            return i;\n        }\n    }\n    return null;\n}\n/**\n * @param {?} nodeInjector\n * @param {?} node\n * @param {?} read\n * @param {?} directiveIdx\n * @return {?}\n */\nfunction readFromNodeInjector(nodeInjector, node, read, directiveIdx) {\n    if (read instanceof ReadFromInjectorFn) {\n        return read.read(nodeInjector, node, directiveIdx);\n    }\n    else {\n        var /** @type {?} */ matchingIdx = geIdxOfMatchingDirective(node, /** @type {?} */ (read));\n        if (matchingIdx !== null) {\n            return /** @type {?} */ ((node.view.directives))[matchingIdx];\n        }\n    }\n    return null;\n}\n/**\n * @param {?} query\n * @param {?} node\n * @return {?}\n */\nfunction add(query, node) {\n    var /** @type {?} */ nodeInjector = getOrCreateNodeInjectorForNode(/** @type {?} */ (node));\n    while (query) {\n        var /** @type {?} */ predicate = query.predicate;\n        var /** @type {?} */ type = predicate.type;\n        if (type) {\n            var /** @type {?} */ directiveIdx = geIdxOfMatchingDirective(node, type);\n            if (directiveIdx !== null) {\n                // a node is matching a predicate - determine what to read\n                // if read token and / or strategy is not specified, use type as read token\n                var /** @type {?} */ result = readFromNodeInjector(nodeInjector, node, predicate.read || type, directiveIdx);\n                if (result !== null) {\n                    addMatch(query, result);\n                }\n            }\n        }\n        else {\n            var /** @type {?} */ selector = /** @type {?} */ ((predicate.selector));\n            for (var /** @type {?} */ i = 0; i < selector.length; i++) {\n                ngDevMode && assertNotNull(node.tNode, 'node.tNode');\n                var /** @type {?} */ directiveIdx = getIdxOfMatchingSelector(/** @type {?} */ ((node.tNode)), selector[i]);\n                if (directiveIdx !== null) {\n                    // a node is matching a predicate - determine what to read\n                    // note that queries using name selector must specify read strategy\n                    ngDevMode && assertNotNull(predicate.read, 'the node should have a predicate');\n                    var /** @type {?} */ result = readFromNodeInjector(nodeInjector, node, /** @type {?} */ ((predicate.read)), directiveIdx);\n                    if (result !== null) {\n                        addMatch(query, result);\n                    }\n                }\n            }\n        }\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @param {?} matchingValue\n * @return {?}\n */\nfunction addMatch(query, matchingValue) {\n    query.values.push(matchingValue);\n    query.list.setDirty();\n}\n/**\n * @template T\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createPredicate(predicate, read) {\n    var /** @type {?} */ isArray = Array.isArray(predicate);\n    return {\n        type: isArray ? null : /** @type {?} */ (predicate),\n        selector: isArray ? /** @type {?} */ (predicate) : null,\n        read: read\n    };\n}\n/**\n * @template T\n * @param {?} previous\n * @param {?} queryList\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createQuery(previous, queryList, predicate, read) {\n    return {\n        next: previous,\n        list: queryList,\n        predicate: createPredicate(predicate, read),\n        values: (/** @type {?} */ ((queryList)))._valuesTree\n    };\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nQueryList_ = /** @class */ (function () {\n    function QueryList_() {\n        this.dirty = true;\n        this.changes = new EventEmitter();\n        this._values = [];\n        /**\n         * \\@internal\n         */\n        this._valuesTree = [];\n    }\n    Object.defineProperty(QueryList_.prototype, \"length\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._values.length; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryList_.prototype, \"first\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ values = this._values;\n            return values.length ? values[0] : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryList_.prototype, \"last\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ values = this._values;\n            return values.length ? values[values.length - 1] : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.map = /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return this._values.map(fn); };\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.filter = /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.filter(fn);\n    };\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.find = /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.find(fn);\n    };\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    QueryList_.prototype.reduce = /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    function (fn, init) {\n        return this._values.reduce(fn, init);\n    };\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.forEach = /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._values.forEach(fn); };\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.some = /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.some(fn);\n    };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.toArray = /**\n     * @return {?}\n     */\n    function () { return this._values.slice(0); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype[getSymbolIterator()] = /**\n     * @return {?}\n     */\n    function () { return (/** @type {?} */ (this._values))[getSymbolIterator()](); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this._values.toString(); };\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    QueryList_.prototype.reset = /**\n     * @param {?} res\n     * @return {?}\n     */\n    function (res) {\n        this._values = flatten(res);\n        (/** @type {?} */ (this)).dirty = false;\n    };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.notifyOnChanges = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this.changes)).emit(this); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.setDirty = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).dirty = true; };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this.changes)).complete();\n        (/** @type {?} */ (this.changes)).unsubscribe();\n    };\n    return QueryList_;\n}());\nfunction QueryList__tsickle_Closure_declarations() {\n    /** @type {?} */\n    QueryList_.prototype.dirty;\n    /** @type {?} */\n    QueryList_.prototype.changes;\n    /** @type {?} */\n    QueryList_.prototype._values;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    QueryList_.prototype._valuesTree;\n}\nexport var /** @type {?} */ QueryList = /** @type {?} */ (QueryList_);\n/**\n * Creates and returns a QueryList.\n *\n * @template T\n * @param {?} memoryIndex The index in memory where the QueryList should be saved. If null,\n * this is is a content query and the QueryList will be saved later through directiveCreate.\n * @param {?} predicate The type for which the query will search\n * @param {?=} descend Whether or not to descend into children\n * @param {?=} read What to save in the query\n * @return {?} QueryList<T>\n */\nexport function query(memoryIndex, predicate, descend, read) {\n    ngDevMode && assertPreviousIsParent();\n    var /** @type {?} */ queryList = new QueryList();\n    var /** @type {?} */ queries = getCurrentQueries(LQueries_);\n    queries.track(queryList, predicate, descend, read);\n    if (memoryIndex != null) {\n        store(memoryIndex, queryList);\n    }\n    return queryList;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n * Returns true if a query got dirty during change detection, false otherwise.\n * @param {?} queryList\n * @return {?}\n */\nexport function queryRefresh(queryList) {\n    var /** @type {?} */ queryListImpl = (/** @type {?} */ ((queryList)));\n    if (queryList.dirty) {\n        queryList.reset(queryListImpl._valuesTree);\n        queryList.notifyOnChanges();\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=query.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { AstPath, CssSelector, RecursiveTemplateAstVisitor, identifierName, templateVisitAll } from '@angular/compiler';\nimport * as ts from 'typescript';\nexport function isParseSourceSpan(value) {\n    return value && !!value.start;\n}\nexport function spanOf(span) {\n    if (!span)\n        return undefined;\n    if (isParseSourceSpan(span)) {\n        return { start: span.start.offset, end: span.end.offset };\n    }\n    else {\n        if (span.endSourceSpan) {\n            return { start: span.sourceSpan.start.offset, end: span.endSourceSpan.end.offset };\n        }\n        else if (span.children && span.children.length) {\n            return {\n                start: span.sourceSpan.start.offset,\n                end: spanOf(span.children[span.children.length - 1]).end\n            };\n        }\n        return { start: span.sourceSpan.start.offset, end: span.sourceSpan.end.offset };\n    }\n}\nexport function inSpan(position, span, exclusive) {\n    return span != null && (exclusive ? position >= span.start && position < span.end :\n        position >= span.start && position <= span.end);\n}\nexport function offsetSpan(span, amount) {\n    return { start: span.start + amount, end: span.end + amount };\n}\nexport function isNarrower(spanA, spanB) {\n    return spanA.start >= spanB.start && spanA.end <= spanB.end;\n}\nexport function hasTemplateReference(type) {\n    if (type.diDeps) {\n        for (var _i = 0, _a = type.diDeps; _i < _a.length; _i++) {\n            var diDep = _a[_i];\n            if (diDep.token && diDep.token.identifier &&\n                identifierName(diDep.token.identifier) == 'TemplateRef')\n                return true;\n        }\n    }\n    return false;\n}\nexport function getSelectors(info) {\n    var map = new Map();\n    var selectors = flatten(info.directives.map(function (directive) {\n        var selectors = CssSelector.parse(directive.selector);\n        selectors.forEach(function (selector) { return map.set(selector, directive); });\n        return selectors;\n    }));\n    return { selectors: selectors, map: map };\n}\nexport function flatten(a) {\n    return (_a = []).concat.apply(_a, a);\n    var _a;\n}\nexport function removeSuffix(value, suffix) {\n    if (value.endsWith(suffix))\n        return value.substring(0, value.length - suffix.length);\n    return value;\n}\nexport function uniqueByName(elements) {\n    if (elements) {\n        var result = [];\n        var set = new Set();\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            if (!set.has(element.name)) {\n                set.add(element.name);\n                result.push(element);\n            }\n        }\n        return result;\n    }\n}\nexport function isTypescriptVersion(low, high) {\n    var version = ts.version;\n    if (version.substring(0, low.length) < low)\n        return false;\n    if (high && (version.substring(0, high.length) > high))\n        return false;\n    return true;\n}\nexport function diagnosticInfoFromTemplateInfo(info) {\n    return {\n        fileName: info.fileName,\n        offset: info.template.span.start,\n        query: info.template.query,\n        members: info.template.members,\n        htmlAst: info.htmlAst,\n        templateAst: info.templateAst\n    };\n}\nexport function findTemplateAstAt(ast, position, allowWidening) {\n    if (allowWidening === void 0) { allowWidening = false; }\n    var path = [];\n    var visitor = new /** @class */ (function (_super) {\n        tslib_1.__extends(class_1, _super);\n        function class_1() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        class_1.prototype.visit = function (ast, context) {\n            var span = spanOf(ast);\n            if (inSpan(position, span)) {\n                var len = path.length;\n                if (!len || allowWidening || isNarrower(span, spanOf(path[len - 1]))) {\n                    path.push(ast);\n                }\n            }\n            else {\n                // Returning a value here will result in the children being skipped.\n                return true;\n            }\n        };\n        class_1.prototype.visitEmbeddedTemplate = function (ast, context) {\n            return this.visitChildren(context, function (visit) {\n                // Ignore reference, variable and providers\n                visit(ast.attrs);\n                visit(ast.directives);\n                visit(ast.children);\n            });\n        };\n        class_1.prototype.visitElement = function (ast, context) {\n            return this.visitChildren(context, function (visit) {\n                // Ingnore providers\n                visit(ast.attrs);\n                visit(ast.inputs);\n                visit(ast.outputs);\n                visit(ast.references);\n                visit(ast.directives);\n                visit(ast.children);\n            });\n        };\n        class_1.prototype.visitDirective = function (ast, context) {\n            // Ignore the host properties of a directive\n            var result = this.visitChildren(context, function (visit) { visit(ast.inputs); });\n            // We never care about the diretive itself, just its inputs.\n            if (path[path.length - 1] == ast) {\n                path.pop();\n            }\n            return result;\n        };\n        return class_1;\n    }(RecursiveTemplateAstVisitor));\n    templateVisitAll(visitor, ast);\n    return new AstPath(path, position);\n}\n//# sourceMappingURL=utils.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ASTWithSource, AstPath as AstPathBase, NullAstVisitor, visitAstChildren } from '@angular/compiler';\nimport { AstType } from '@angular/compiler-cli/src/language_services';\nimport { BuiltinType } from './types';\nimport { inSpan } from './utils';\nfunction findAstAt(ast, position, excludeEmpty) {\n    if (excludeEmpty === void 0) { excludeEmpty = false; }\n    var path = [];\n    var visitor = new /** @class */ (function (_super) {\n        tslib_1.__extends(class_1, _super);\n        function class_1() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        class_1.prototype.visit = function (ast) {\n            if ((!excludeEmpty || ast.span.start < ast.span.end) && inSpan(position, ast.span)) {\n                path.push(ast);\n                visitAstChildren(ast, this);\n            }\n        };\n        return class_1;\n    }(NullAstVisitor));\n    // We never care about the ASTWithSource node and its visit() method calls its ast's visit so\n    // the visit() method above would never see it.\n    if (ast instanceof ASTWithSource) {\n        ast = ast.ast;\n    }\n    visitor.visit(ast);\n    return new AstPathBase(path, position);\n}\nexport function getExpressionCompletions(scope, ast, position, query) {\n    var path = findAstAt(ast, position);\n    if (path.empty)\n        return undefined;\n    var tail = path.tail;\n    var result = scope;\n    function getType(ast) { return new AstType(scope, query, {}).getType(ast); }\n    // If the completion request is in a not in a pipe or property access then the global scope\n    // (that is the scope of the implicit receiver) is the right scope as the user is typing the\n    // beginning of an expression.\n    tail.visit({\n        visitBinary: function (ast) { },\n        visitChain: function (ast) { },\n        visitConditional: function (ast) { },\n        visitFunctionCall: function (ast) { },\n        visitImplicitReceiver: function (ast) { },\n        visitInterpolation: function (ast) { result = undefined; },\n        visitKeyedRead: function (ast) { },\n        visitKeyedWrite: function (ast) { },\n        visitLiteralArray: function (ast) { },\n        visitLiteralMap: function (ast) { },\n        visitLiteralPrimitive: function (ast) { },\n        visitMethodCall: function (ast) { },\n        visitPipe: function (ast) {\n            if (position >= ast.exp.span.end &&\n                (!ast.args || !ast.args.length || position < ast.args[0].span.start)) {\n                // We are in a position a pipe name is expected.\n                result = query.getPipes();\n            }\n        },\n        visitPrefixNot: function (ast) { },\n        visitNonNullAssert: function (ast) { },\n        visitPropertyRead: function (ast) {\n            var receiverType = getType(ast.receiver);\n            result = receiverType ? receiverType.members() : scope;\n        },\n        visitPropertyWrite: function (ast) {\n            var receiverType = getType(ast.receiver);\n            result = receiverType ? receiverType.members() : scope;\n        },\n        visitQuote: function (ast) {\n            // For a quote, return the members of any (if there are any).\n            result = query.getBuiltinType(BuiltinType.Any).members();\n        },\n        visitSafeMethodCall: function (ast) {\n            var receiverType = getType(ast.receiver);\n            result = receiverType ? receiverType.members() : scope;\n        },\n        visitSafePropertyRead: function (ast) {\n            var receiverType = getType(ast.receiver);\n            result = receiverType ? receiverType.members() : scope;\n        },\n    });\n    return result && result.values();\n}\nexport function getExpressionSymbol(scope, ast, position, query) {\n    var path = findAstAt(ast, position, /* excludeEmpty */ true);\n    if (path.empty)\n        return undefined;\n    var tail = path.tail;\n    function getType(ast) { return new AstType(scope, query, {}).getType(ast); }\n    var symbol = undefined;\n    var span = undefined;\n    // If the completion request is in a not in a pipe or property access then the global scope\n    // (that is the scope of the implicit receiver) is the right scope as the user is typing the\n    // beginning of an expression.\n    tail.visit({\n        visitBinary: function (ast) { },\n        visitChain: function (ast) { },\n        visitConditional: function (ast) { },\n        visitFunctionCall: function (ast) { },\n        visitImplicitReceiver: function (ast) { },\n        visitInterpolation: function (ast) { },\n        visitKeyedRead: function (ast) { },\n        visitKeyedWrite: function (ast) { },\n        visitLiteralArray: function (ast) { },\n        visitLiteralMap: function (ast) { },\n        visitLiteralPrimitive: function (ast) { },\n        visitMethodCall: function (ast) {\n            var receiverType = getType(ast.receiver);\n            symbol = receiverType && receiverType.members().get(ast.name);\n            span = ast.span;\n        },\n        visitPipe: function (ast) {\n            if (position >= ast.exp.span.end &&\n                (!ast.args || !ast.args.length || position < ast.args[0].span.start)) {\n                // We are in a position a pipe name is expected.\n                var pipes = query.getPipes();\n                if (pipes) {\n                    symbol = pipes.get(ast.name);\n                    span = ast.span;\n                }\n            }\n        },\n        visitPrefixNot: function (ast) { },\n        visitNonNullAssert: function (ast) { },\n        visitPropertyRead: function (ast) {\n            var receiverType = getType(ast.receiver);\n            symbol = receiverType && receiverType.members().get(ast.name);\n            span = ast.span;\n        },\n        visitPropertyWrite: function (ast) {\n            var receiverType = getType(ast.receiver);\n            symbol = receiverType && receiverType.members().get(ast.name);\n            span = ast.span;\n        },\n        visitQuote: function (ast) { },\n        visitSafeMethodCall: function (ast) {\n            var receiverType = getType(ast.receiver);\n            symbol = receiverType && receiverType.members().get(ast.name);\n            span = ast.span;\n        },\n        visitSafePropertyRead: function (ast) {\n            var receiverType = getType(ast.receiver);\n            symbol = receiverType && receiverType.members().get(ast.name);\n            span = ast.span;\n        },\n    });\n    if (symbol && span) {\n        return { symbol: symbol, span: span };\n    }\n}\n//# sourceMappingURL=expressions.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar values = [\n    'ID',\n    'CDATA',\n    'NAME',\n    ['ltr', 'rtl'],\n    ['rect', 'circle', 'poly', 'default'],\n    'NUMBER',\n    ['nohref'],\n    ['ismap'],\n    ['declare'],\n    ['DATA', 'REF', 'OBJECT'],\n    ['GET', 'POST'],\n    'IDREF',\n    ['TEXT', 'PASSWORD', 'CHECKBOX', 'RADIO', 'SUBMIT', 'RESET', 'FILE', 'HIDDEN', 'IMAGE', 'BUTTON'],\n    ['checked'],\n    ['disabled'],\n    ['readonly'],\n    ['multiple'],\n    ['selected'],\n    ['button', 'submit', 'reset'],\n    ['void', 'above', 'below', 'hsides', 'lhs', 'rhs', 'vsides', 'box', 'border'],\n    ['none', 'groups', 'rows', 'cols', 'all'],\n    ['left', 'center', 'right', 'justify', 'char'],\n    ['top', 'middle', 'bottom', 'baseline'],\n    'IDREFS',\n    ['row', 'col', 'rowgroup', 'colgroup'],\n    ['defer']\n];\nvar groups = [\n    { id: 0 },\n    {\n        onclick: 1,\n        ondblclick: 1,\n        onmousedown: 1,\n        onmouseup: 1,\n        onmouseover: 1,\n        onmousemove: 1,\n        onmouseout: 1,\n        onkeypress: 1,\n        onkeydown: 1,\n        onkeyup: 1\n    },\n    { lang: 2, dir: 3 },\n    { onload: 1, onunload: 1 },\n    { name: 1 },\n    { href: 1 },\n    { type: 1 },\n    { alt: 1 },\n    { tabindex: 5 },\n    { media: 1 },\n    { nohref: 6 },\n    { usemap: 1 },\n    { src: 1 },\n    { onfocus: 1, onblur: 1 },\n    { charset: 1 },\n    { declare: 8, classid: 1, codebase: 1, data: 1, codetype: 1, archive: 1, standby: 1 },\n    { title: 1 },\n    { value: 1 },\n    { cite: 1 },\n    { datetime: 1 },\n    { accept: 1 },\n    { shape: 4, coords: 1 },\n    { for: 11\n    },\n    { action: 1, method: 10, enctype: 1, onsubmit: 1, onreset: 1, 'accept-charset': 1 },\n    { valuetype: 9 },\n    { longdesc: 1 },\n    { width: 1 },\n    { disabled: 14 },\n    { readonly: 15, onselect: 1 },\n    { accesskey: 1 },\n    { size: 5, multiple: 16 },\n    { onchange: 1 },\n    { label: 1 },\n    { selected: 17 },\n    { type: 12, checked: 13, size: 1, maxlength: 5 },\n    { rows: 5, cols: 5 },\n    { type: 18 },\n    { height: 1 },\n    { summary: 1, border: 1, frame: 19, rules: 20, cellspacing: 1, cellpadding: 1, datapagesize: 1 },\n    { align: 21, char: 1, charoff: 1, valign: 22 },\n    { span: 5 },\n    { abbr: 1, axis: 1, headers: 23, scope: 24, rowspan: 5, colspan: 5 },\n    { profile: 1 },\n    { 'http-equiv': 2, name: 2, content: 1, scheme: 1 },\n    { class: 1, style: 1 },\n    { hreflang: 2, rel: 1, rev: 1 },\n    { ismap: 7 },\n    { defer: 25, event: 1, for: 1 }\n];\nvar elements = {\n    TT: [0, 1, 2, 16, 44],\n    I: [0, 1, 2, 16, 44],\n    B: [0, 1, 2, 16, 44],\n    BIG: [0, 1, 2, 16, 44],\n    SMALL: [0, 1, 2, 16, 44],\n    EM: [0, 1, 2, 16, 44],\n    STRONG: [0, 1, 2, 16, 44],\n    DFN: [0, 1, 2, 16, 44],\n    CODE: [0, 1, 2, 16, 44],\n    SAMP: [0, 1, 2, 16, 44],\n    KBD: [0, 1, 2, 16, 44],\n    VAR: [0, 1, 2, 16, 44],\n    CITE: [0, 1, 2, 16, 44],\n    ABBR: [0, 1, 2, 16, 44],\n    ACRONYM: [0, 1, 2, 16, 44],\n    SUB: [0, 1, 2, 16, 44],\n    SUP: [0, 1, 2, 16, 44],\n    SPAN: [0, 1, 2, 16, 44],\n    BDO: [0, 2, 16, 44],\n    BR: [0, 16, 44],\n    BODY: [0, 1, 2, 3, 16, 44],\n    ADDRESS: [0, 1, 2, 16, 44],\n    DIV: [0, 1, 2, 16, 44],\n    A: [0, 1, 2, 4, 5, 6, 8, 13, 14, 16, 21, 29, 44, 45],\n    MAP: [0, 1, 2, 4, 16, 44],\n    AREA: [0, 1, 2, 5, 7, 8, 10, 13, 16, 21, 29, 44],\n    LINK: [0, 1, 2, 5, 6, 9, 14, 16, 44, 45],\n    IMG: [0, 1, 2, 4, 7, 11, 12, 16, 25, 26, 37, 44, 46],\n    OBJECT: [0, 1, 2, 4, 6, 8, 11, 15, 16, 26, 37, 44],\n    PARAM: [0, 4, 6, 17, 24],\n    HR: [0, 1, 2, 16, 44],\n    P: [0, 1, 2, 16, 44],\n    H1: [0, 1, 2, 16, 44],\n    H2: [0, 1, 2, 16, 44],\n    H3: [0, 1, 2, 16, 44],\n    H4: [0, 1, 2, 16, 44],\n    H5: [0, 1, 2, 16, 44],\n    H6: [0, 1, 2, 16, 44],\n    PRE: [0, 1, 2, 16, 44],\n    Q: [0, 1, 2, 16, 18, 44],\n    BLOCKQUOTE: [0, 1, 2, 16, 18, 44],\n    INS: [0, 1, 2, 16, 18, 19, 44],\n    DEL: [0, 1, 2, 16, 18, 19, 44],\n    DL: [0, 1, 2, 16, 44],\n    DT: [0, 1, 2, 16, 44],\n    DD: [0, 1, 2, 16, 44],\n    OL: [0, 1, 2, 16, 44],\n    UL: [0, 1, 2, 16, 44],\n    LI: [0, 1, 2, 16, 44],\n    FORM: [0, 1, 2, 4, 16, 20, 23, 44],\n    LABEL: [0, 1, 2, 13, 16, 22, 29, 44],\n    INPUT: [0, 1, 2, 4, 7, 8, 11, 12, 13, 16, 17, 20, 27, 28, 29, 31, 34, 44, 46],\n    SELECT: [0, 1, 2, 4, 8, 13, 16, 27, 30, 31, 44],\n    OPTGROUP: [0, 1, 2, 16, 27, 32, 44],\n    OPTION: [0, 1, 2, 16, 17, 27, 32, 33, 44],\n    TEXTAREA: [0, 1, 2, 4, 8, 13, 16, 27, 28, 29, 31, 35, 44],\n    FIELDSET: [0, 1, 2, 16, 44],\n    LEGEND: [0, 1, 2, 16, 29, 44],\n    BUTTON: [0, 1, 2, 4, 8, 13, 16, 17, 27, 29, 36, 44],\n    TABLE: [0, 1, 2, 16, 26, 38, 44],\n    CAPTION: [0, 1, 2, 16, 44],\n    COLGROUP: [0, 1, 2, 16, 26, 39, 40, 44],\n    COL: [0, 1, 2, 16, 26, 39, 40, 44],\n    THEAD: [0, 1, 2, 16, 39, 44],\n    TBODY: [0, 1, 2, 16, 39, 44],\n    TFOOT: [0, 1, 2, 16, 39, 44],\n    TR: [0, 1, 2, 16, 39, 44],\n    TH: [0, 1, 2, 16, 39, 41, 44],\n    TD: [0, 1, 2, 16, 39, 41, 44],\n    HEAD: [2, 42],\n    TITLE: [2],\n    BASE: [5],\n    META: [2, 43],\n    STYLE: [2, 6, 9, 16],\n    SCRIPT: [6, 12, 14, 47],\n    NOSCRIPT: [0, 1, 2, 16, 44],\n    HTML: [2]\n};\nvar defaultAttributes = [0, 1, 2, 4];\nexport function elementNames() {\n    return Object.keys(elements).sort().map(function (v) { return v.toLowerCase(); });\n}\nfunction compose(indexes) {\n    var result = {};\n    if (indexes) {\n        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n            var index = indexes_1[_i];\n            var group = groups[index];\n            for (var name_1 in group)\n                if (group.hasOwnProperty(name_1))\n                    result[name_1] = values[group[name_1]];\n        }\n    }\n    return result;\n}\nexport function attributeNames(element) {\n    return Object.keys(compose(elements[element.toUpperCase()] || defaultAttributes)).sort();\n}\nexport function attributeType(element, attribute) {\n    return compose(elements[element.toUpperCase()] || defaultAttributes)[attribute.toLowerCase()];\n}\n// This section is describes the DOM property surface of a DOM element and is derivgulp formated\n// from\n// from the SCHEMA strings from the security context information. SCHEMA is copied here because\n// it would be an unnecessary risk to allow this array to be imported from the security context\n// schema registry.\nvar SCHEMA = [\n    '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop,slot' +\n        /* added manually to avoid breaking changes */\n        ',*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored',\n    '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n    'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n    'media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,src,%srcObject,#volume',\n    ':svg:^[HTMLElement]|*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',\n    ':svg:graphics^:svg:|',\n    ':svg:animation^:svg:|*begin,*end,*repeat',\n    ':svg:geometry^:svg:|',\n    ':svg:componentTransferFunction^:svg:|',\n    ':svg:gradient^:svg:|',\n    ':svg:textContent^:svg:graphics|',\n    ':svg:textPositioning^:svg:textContent|',\n    'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',\n    'area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,search,shape,target,username',\n    'audio^media|',\n    'br^[HTMLElement]|clear',\n    'base^[HTMLElement]|href,target',\n    'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',\n    'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',\n    'canvas^[HTMLElement]|#height,#width',\n    'content^[HTMLElement]|select',\n    'dl^[HTMLElement]|!compact',\n    'datalist^[HTMLElement]|',\n    'details^[HTMLElement]|!open',\n    'dialog^[HTMLElement]|!open,returnValue',\n    'dir^[HTMLElement]|!compact',\n    'div^[HTMLElement]|align',\n    'embed^[HTMLElement]|align,height,name,src,type,width',\n    'fieldset^[HTMLElement]|!disabled,name',\n    'font^[HTMLElement]|color,face,size',\n    'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',\n    'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',\n    'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',\n    'hr^[HTMLElement]|align,color,!noShade,size,width',\n    'head^[HTMLElement]|',\n    'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',\n    'html^[HTMLElement]|version',\n    'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',\n    'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',\n    'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',\n    'li^[HTMLElement]|type,#value',\n    'label^[HTMLElement]|htmlFor',\n    'legend^[HTMLElement]|align',\n    'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type',\n    'map^[HTMLElement]|name',\n    'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',\n    'menu^[HTMLElement]|!compact',\n    'meta^[HTMLElement]|content,httpEquiv,name,scheme',\n    'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',\n    'ins,del^[HTMLElement]|cite,dateTime',\n    'ol^[HTMLElement]|!compact,!reversed,#start,type',\n    'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',\n    'optgroup^[HTMLElement]|!disabled,label',\n    'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',\n    'output^[HTMLElement]|defaultValue,%htmlFor,name,value',\n    'p^[HTMLElement]|align',\n    'param^[HTMLElement]|name,type,value,valueType',\n    'picture^[HTMLElement]|',\n    'pre^[HTMLElement]|#width',\n    'progress^[HTMLElement]|#max,#value',\n    'q,blockquote,cite^[HTMLElement]|',\n    'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',\n    'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',\n    'shadow^[HTMLElement]|',\n    'slot^[HTMLElement]|name',\n    'source^[HTMLElement]|media,sizes,src,srcset,type',\n    'span^[HTMLElement]|',\n    'style^[HTMLElement]|!disabled,media,type',\n    'caption^[HTMLElement]|align',\n    'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',\n    'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',\n    'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',\n    'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',\n    'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',\n    'template^[HTMLElement]|',\n    'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',\n    'title^[HTMLElement]|text',\n    'track^[HTMLElement]|!default,kind,label,src,srclang',\n    'ul^[HTMLElement]|!compact,type',\n    'unknown^[HTMLElement]|',\n    'video^media|#height,poster,#width',\n    ':svg:a^:svg:graphics|',\n    ':svg:animate^:svg:animation|',\n    ':svg:animateMotion^:svg:animation|',\n    ':svg:animateTransform^:svg:animation|',\n    ':svg:circle^:svg:geometry|',\n    ':svg:clipPath^:svg:graphics|',\n    ':svg:defs^:svg:graphics|',\n    ':svg:desc^:svg:|',\n    ':svg:discard^:svg:|',\n    ':svg:ellipse^:svg:geometry|',\n    ':svg:feBlend^:svg:|',\n    ':svg:feColorMatrix^:svg:|',\n    ':svg:feComponentTransfer^:svg:|',\n    ':svg:feComposite^:svg:|',\n    ':svg:feConvolveMatrix^:svg:|',\n    ':svg:feDiffuseLighting^:svg:|',\n    ':svg:feDisplacementMap^:svg:|',\n    ':svg:feDistantLight^:svg:|',\n    ':svg:feDropShadow^:svg:|',\n    ':svg:feFlood^:svg:|',\n    ':svg:feFuncA^:svg:componentTransferFunction|',\n    ':svg:feFuncB^:svg:componentTransferFunction|',\n    ':svg:feFuncG^:svg:componentTransferFunction|',\n    ':svg:feFuncR^:svg:componentTransferFunction|',\n    ':svg:feGaussianBlur^:svg:|',\n    ':svg:feImage^:svg:|',\n    ':svg:feMerge^:svg:|',\n    ':svg:feMergeNode^:svg:|',\n    ':svg:feMorphology^:svg:|',\n    ':svg:feOffset^:svg:|',\n    ':svg:fePointLight^:svg:|',\n    ':svg:feSpecularLighting^:svg:|',\n    ':svg:feSpotLight^:svg:|',\n    ':svg:feTile^:svg:|',\n    ':svg:feTurbulence^:svg:|',\n    ':svg:filter^:svg:|',\n    ':svg:foreignObject^:svg:graphics|',\n    ':svg:g^:svg:graphics|',\n    ':svg:image^:svg:graphics|',\n    ':svg:line^:svg:geometry|',\n    ':svg:linearGradient^:svg:gradient|',\n    ':svg:mpath^:svg:|',\n    ':svg:marker^:svg:|',\n    ':svg:mask^:svg:|',\n    ':svg:metadata^:svg:|',\n    ':svg:path^:svg:geometry|',\n    ':svg:pattern^:svg:|',\n    ':svg:polygon^:svg:geometry|',\n    ':svg:polyline^:svg:geometry|',\n    ':svg:radialGradient^:svg:gradient|',\n    ':svg:rect^:svg:geometry|',\n    ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',\n    ':svg:script^:svg:|type',\n    ':svg:set^:svg:animation|',\n    ':svg:stop^:svg:|',\n    ':svg:style^:svg:|!disabled,media,title,type',\n    ':svg:switch^:svg:graphics|',\n    ':svg:symbol^:svg:|',\n    ':svg:tspan^:svg:textPositioning|',\n    ':svg:text^:svg:textPositioning|',\n    ':svg:textPath^:svg:textContent|',\n    ':svg:title^:svg:|',\n    ':svg:use^:svg:graphics|',\n    ':svg:view^:svg:|#zoomAndPan',\n    'data^[HTMLElement]|value',\n    'keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name',\n    'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',\n    'summary^[HTMLElement]|',\n    'time^[HTMLElement]|dateTime',\n    ':svg:cursor^:svg:|',\n];\nvar attrToPropMap = {\n    'class': 'className',\n    'formaction': 'formAction',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex'\n};\nvar EVENT = 'event';\nvar BOOLEAN = 'boolean';\nvar NUMBER = 'number';\nvar STRING = 'string';\nvar OBJECT = 'object';\nvar SchemaInformation = /** @class */ (function () {\n    function SchemaInformation() {\n        var _this = this;\n        this.schema = {};\n        SCHEMA.forEach(function (encodedType) {\n            var parts = encodedType.split('|');\n            var properties = parts[1].split(',');\n            var typeParts = (parts[0] + '^').split('^');\n            var typeName = typeParts[0];\n            var type = {};\n            typeName.split(',').forEach(function (tag) { return _this.schema[tag.toLowerCase()] = type; });\n            var superName = typeParts[1];\n            var superType = superName && _this.schema[superName.toLowerCase()];\n            if (superType) {\n                for (var key in superType) {\n                    type[key] = superType[key];\n                }\n            }\n            properties.forEach(function (property) {\n                if (property == '') {\n                }\n                else if (property.startsWith('*')) {\n                    type[property.substring(1)] = EVENT;\n                }\n                else if (property.startsWith('!')) {\n                    type[property.substring(1)] = BOOLEAN;\n                }\n                else if (property.startsWith('#')) {\n                    type[property.substring(1)] = NUMBER;\n                }\n                else if (property.startsWith('%')) {\n                    type[property.substring(1)] = OBJECT;\n                }\n                else {\n                    type[property] = STRING;\n                }\n            });\n        });\n    }\n    SchemaInformation.prototype.allKnownElements = function () { return Object.keys(this.schema); };\n    SchemaInformation.prototype.eventsOf = function (elementName) {\n        var elementType = this.schema[elementName.toLowerCase()] || {};\n        return Object.keys(elementType).filter(function (property) { return elementType[property] === EVENT; });\n    };\n    SchemaInformation.prototype.propertiesOf = function (elementName) {\n        var elementType = this.schema[elementName.toLowerCase()] || {};\n        return Object.keys(elementType).filter(function (property) { return elementType[property] !== EVENT; });\n    };\n    SchemaInformation.prototype.typeOf = function (elementName, property) {\n        return (this.schema[elementName.toLowerCase()] || {})[property];\n    };\n    Object.defineProperty(SchemaInformation, \"instance\", {\n        get: function () {\n            var result = SchemaInformation._instance;\n            if (!result) {\n                result = SchemaInformation._instance = new SchemaInformation();\n            }\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return SchemaInformation;\n}());\nexport { SchemaInformation };\nexport function eventNames(elementName) {\n    return SchemaInformation.instance.eventsOf(elementName);\n}\nexport function propertyNames(elementName) {\n    return SchemaInformation.instance.propertiesOf(elementName);\n}\nexport function propertyType(elementName, propertyName) {\n    return SchemaInformation.instance.typeOf(elementName, propertyName);\n}\n//# sourceMappingURL=html_info.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { CssSelector, Element, ImplicitReceiver, NAMED_ENTITIES, NullTemplateVisitor, ParseSpan, PropertyRead, SelectorMatcher, TagContentType, Text, findNode, getHtmlTagDefinition, splitNsName } from '@angular/compiler';\nimport { getExpressionScope } from '@angular/compiler-cli/src/language_services';\nimport { getExpressionCompletions } from './expressions';\nimport { attributeNames, elementNames, eventNames, propertyNames } from './html_info';\nimport { diagnosticInfoFromTemplateInfo, findTemplateAstAt, flatten, getSelectors, hasTemplateReference, inSpan, removeSuffix, spanOf, uniqueByName } from './utils';\nvar TEMPLATE_ATTR_PREFIX = '*';\nvar hiddenHtmlElements = {\n    html: true,\n    script: true,\n    noscript: true,\n    base: true,\n    body: true,\n    title: true,\n    head: true,\n    link: true,\n};\nexport function getTemplateCompletions(templateInfo) {\n    var result = undefined;\n    var htmlAst = templateInfo.htmlAst, templateAst = templateInfo.templateAst, template = templateInfo.template;\n    // The templateNode starts at the delimiter character so we add 1 to skip it.\n    if (templateInfo.position != null) {\n        var templatePosition_1 = templateInfo.position - template.span.start;\n        var path_1 = findNode(htmlAst, templatePosition_1);\n        var mostSpecific = path_1.tail;\n        if (path_1.empty || !mostSpecific) {\n            result = elementCompletions(templateInfo, path_1);\n        }\n        else {\n            var astPosition_1 = templatePosition_1 - mostSpecific.sourceSpan.start.offset;\n            mostSpecific.visit({\n                visitElement: function (ast) {\n                    var startTagSpan = spanOf(ast.sourceSpan);\n                    var tagLen = ast.name.length;\n                    if (templatePosition_1 <=\n                        startTagSpan.start + tagLen + 1 /* 1 for the opening angle bracked */) {\n                        // If we are in the tag then return the element completions.\n                        result = elementCompletions(templateInfo, path_1);\n                    }\n                    else if (templatePosition_1 < startTagSpan.end) {\n                        // We are in the attribute section of the element (but not in an attribute).\n                        // Return the attribute completions.\n                        result = attributeCompletions(templateInfo, path_1);\n                    }\n                },\n                visitAttribute: function (ast) {\n                    if (!ast.valueSpan || !inSpan(templatePosition_1, spanOf(ast.valueSpan))) {\n                        // We are in the name of an attribute. Show attribute completions.\n                        result = attributeCompletions(templateInfo, path_1);\n                    }\n                    else if (ast.valueSpan && inSpan(templatePosition_1, spanOf(ast.valueSpan))) {\n                        result = attributeValueCompletions(templateInfo, templatePosition_1, ast);\n                    }\n                },\n                visitText: function (ast) {\n                    // Check if we are in a entity.\n                    result = entityCompletions(getSourceText(template, spanOf(ast)), astPosition_1);\n                    if (result)\n                        return result;\n                    result = interpolationCompletions(templateInfo, templatePosition_1);\n                    if (result)\n                        return result;\n                    var element = path_1.first(Element);\n                    if (element) {\n                        var definition = getHtmlTagDefinition(element.name);\n                        if (definition.contentType === TagContentType.PARSABLE_DATA) {\n                            result = voidElementAttributeCompletions(templateInfo, path_1);\n                            if (!result) {\n                                // If the element can hold content Show element completions.\n                                result = elementCompletions(templateInfo, path_1);\n                            }\n                        }\n                    }\n                    else {\n                        // If no element container, implies parsable data so show elements.\n                        result = voidElementAttributeCompletions(templateInfo, path_1);\n                        if (!result) {\n                            result = elementCompletions(templateInfo, path_1);\n                        }\n                    }\n                },\n                visitComment: function (ast) { },\n                visitExpansion: function (ast) { },\n                visitExpansionCase: function (ast) { }\n            }, null);\n        }\n    }\n    return result;\n}\nfunction attributeCompletions(info, path) {\n    var item = path.tail instanceof Element ? path.tail : path.parentOf(path.tail);\n    if (item instanceof Element) {\n        return attributeCompletionsForElement(info, item.name, item);\n    }\n    return undefined;\n}\nfunction attributeCompletionsForElement(info, elementName, element) {\n    var attributes = getAttributeInfosForElement(info, elementName, element);\n    // Map all the attributes to a completion\n    return attributes.map(function (attr) { return ({\n        kind: attr.fromHtml ? 'html attribute' : 'attribute',\n        name: nameOfAttr(attr),\n        sort: attr.name\n    }); });\n}\nfunction getAttributeInfosForElement(info, elementName, element) {\n    var attributes = [];\n    // Add html attributes\n    var htmlAttributes = attributeNames(elementName) || [];\n    if (htmlAttributes) {\n        attributes.push.apply(attributes, htmlAttributes.map(function (name) { return ({ name: name, fromHtml: true }); }));\n    }\n    // Add html properties\n    var htmlProperties = propertyNames(elementName);\n    if (htmlProperties) {\n        attributes.push.apply(attributes, htmlProperties.map(function (name) { return ({ name: name, input: true }); }));\n    }\n    // Add html events\n    var htmlEvents = eventNames(elementName);\n    if (htmlEvents) {\n        attributes.push.apply(attributes, htmlEvents.map(function (name) { return ({ name: name, output: true }); }));\n    }\n    var _a = getSelectors(info), selectors = _a.selectors, selectorMap = _a.map;\n    if (selectors && selectors.length) {\n        // All the attributes that are selectable should be shown.\n        var applicableSelectors = selectors.filter(function (selector) { return !selector.element || selector.element == elementName; });\n        var selectorAndAttributeNames = applicableSelectors.map(function (selector) { return ({ selector: selector, attrs: selector.attrs.filter(function (a) { return !!a; }) }); });\n        var attrs_1 = flatten(selectorAndAttributeNames.map(function (selectorAndAttr) {\n            var directive = selectorMap.get(selectorAndAttr.selector);\n            var result = selectorAndAttr.attrs.map(function (name) { return ({ name: name, input: name in directive.inputs, output: name in directive.outputs }); });\n            return result;\n        }));\n        // Add template attribute if a directive contains a template reference\n        selectorAndAttributeNames.forEach(function (selectorAndAttr) {\n            var selector = selectorAndAttr.selector;\n            var directive = selectorMap.get(selector);\n            if (directive && hasTemplateReference(directive.type) && selector.attrs.length &&\n                selector.attrs[0]) {\n                attrs_1.push({ name: selector.attrs[0], template: true });\n            }\n        });\n        // All input and output properties of the matching directives should be added.\n        var elementSelector = element ?\n            createElementCssSelector(element) :\n            createElementCssSelector(new Element(elementName, [], [], null, null, null));\n        var matcher = new SelectorMatcher();\n        matcher.addSelectables(selectors);\n        matcher.match(elementSelector, function (selector) {\n            var directive = selectorMap.get(selector);\n            if (directive) {\n                attrs_1.push.apply(attrs_1, Object.keys(directive.inputs).map(function (name) { return ({ name: name, input: true }); }));\n                attrs_1.push.apply(attrs_1, Object.keys(directive.outputs).map(function (name) { return ({ name: name, output: true }); }));\n            }\n        });\n        // If a name shows up twice, fold it into a single value.\n        attrs_1 = foldAttrs(attrs_1);\n        // Now expand them back out to ensure that input/output shows up as well as input and\n        // output.\n        attributes.push.apply(attributes, flatten(attrs_1.map(expandedAttr)));\n    }\n    return attributes;\n}\nfunction attributeValueCompletions(info, position, attr) {\n    var path = findTemplateAstAt(info.templateAst, position);\n    var mostSpecific = path.tail;\n    var dinfo = diagnosticInfoFromTemplateInfo(info);\n    if (mostSpecific) {\n        var visitor = new ExpressionVisitor(info, position, attr, function () { return getExpressionScope(dinfo, path, false); });\n        mostSpecific.visit(visitor, null);\n        if (!visitor.result || !visitor.result.length) {\n            // Try allwoing widening the path\n            var widerPath_1 = findTemplateAstAt(info.templateAst, position, /* allowWidening */ true);\n            if (widerPath_1.tail) {\n                var widerVisitor = new ExpressionVisitor(info, position, attr, function () { return getExpressionScope(dinfo, widerPath_1, false); });\n                widerPath_1.tail.visit(widerVisitor, null);\n                return widerVisitor.result;\n            }\n        }\n        return visitor.result;\n    }\n}\nfunction elementCompletions(info, path) {\n    var htmlNames = elementNames().filter(function (name) { return !(name in hiddenHtmlElements); });\n    // Collect the elements referenced by the selectors\n    var directiveElements = getSelectors(info)\n        .selectors.map(function (selector) { return selector.element; })\n        .filter(function (name) { return !!name; });\n    var components = directiveElements.map(function (name) { return ({ kind: 'component', name: name, sort: name }); });\n    var htmlElements = htmlNames.map(function (name) { return ({ kind: 'element', name: name, sort: name }); });\n    // Return components and html elements\n    return uniqueByName(htmlElements.concat(components));\n}\nfunction entityCompletions(value, position) {\n    // Look for entity completions\n    var re = /&[A-Za-z]*;?(?!\\d)/g;\n    var found;\n    var result = undefined;\n    while (found = re.exec(value)) {\n        var len = found[0].length;\n        if (position >= found.index && position < (found.index + len)) {\n            result = Object.keys(NAMED_ENTITIES)\n                .map(function (name) { return ({ kind: 'entity', name: \"&\" + name + \";\", sort: name }); });\n            break;\n        }\n    }\n    return result;\n}\nfunction interpolationCompletions(info, position) {\n    // Look for an interpolation in at the position.\n    var templatePath = findTemplateAstAt(info.templateAst, position);\n    var mostSpecific = templatePath.tail;\n    if (mostSpecific) {\n        var visitor = new ExpressionVisitor(info, position, undefined, function () { return getExpressionScope(diagnosticInfoFromTemplateInfo(info), templatePath, false); });\n        mostSpecific.visit(visitor, null);\n        return uniqueByName(visitor.result);\n    }\n}\n// There is a special case of HTML where text that contains a unclosed tag is treated as\n// text. For exaple '<h1> Some <a text </h1>' produces a text nodes inside of the H1\n// element \"Some <a text\". We, however, want to treat this as if the user was requesting\n// the attributes of an \"a\" element, not requesting completion in the a text element. This\n// code checks for this case and returns element completions if it is detected or undefined\n// if it is not.\nfunction voidElementAttributeCompletions(info, path) {\n    var tail = path.tail;\n    if (tail instanceof Text) {\n        var match = tail.value.match(/<(\\w(\\w|\\d|-)*:)?(\\w(\\w|\\d|-)*)\\s/);\n        // The position must be after the match, otherwise we are still in a place where elements\n        // are expected (such as `<|a` or `<a|`; we only want attributes for `<a |` or after).\n        if (match &&\n            path.position >= (match.index || 0) + match[0].length + tail.sourceSpan.start.offset) {\n            return attributeCompletionsForElement(info, match[3]);\n        }\n    }\n}\nvar ExpressionVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(ExpressionVisitor, _super);\n    function ExpressionVisitor(info, position, attr, getExpressionScope) {\n        var _this = _super.call(this) || this;\n        _this.info = info;\n        _this.position = position;\n        _this.attr = attr;\n        _this.getExpressionScope = getExpressionScope || (function () { return info.template.members; });\n        return _this;\n    }\n    ExpressionVisitor.prototype.visitDirectiveProperty = function (ast) {\n        this.attributeValueCompletions(ast.value);\n    };\n    ExpressionVisitor.prototype.visitElementProperty = function (ast) {\n        this.attributeValueCompletions(ast.value);\n    };\n    ExpressionVisitor.prototype.visitEvent = function (ast) { this.attributeValueCompletions(ast.handler); };\n    ExpressionVisitor.prototype.visitElement = function (ast) {\n        var _this = this;\n        if (this.attr && getSelectors(this.info) && this.attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {\n            // The value is a template expression but the expression AST was not produced when the\n            // TemplateAst was produce so\n            // do that now.\n            var key_1 = this.attr.name.substr(TEMPLATE_ATTR_PREFIX.length);\n            // Find the selector\n            var selectorInfo = getSelectors(this.info);\n            var selectors = selectorInfo.selectors;\n            var selector_1 = selectors.filter(function (s) { return s.attrs.some(function (attr, i) { return i % 2 == 0 && attr == key_1; }); })[0];\n            var templateBindingResult = this.info.expressionParser.parseTemplateBindings(key_1, this.attr.value, null);\n            // find the template binding that contains the position\n            if (!this.attr.valueSpan)\n                return;\n            var valueRelativePosition_1 = this.position - this.attr.valueSpan.start.offset - 1;\n            var bindings = templateBindingResult.templateBindings;\n            var binding = bindings.find(function (binding) { return inSpan(valueRelativePosition_1, binding.span, /* exclusive */ true); }) ||\n                bindings.find(function (binding) { return inSpan(valueRelativePosition_1, binding.span); });\n            var keyCompletions = function () {\n                var keys = [];\n                if (selector_1) {\n                    var attrNames = selector_1.attrs.filter(function (_, i) { return i % 2 == 0; });\n                    keys = attrNames.filter(function (name) { return name.startsWith(key_1) && name != key_1; })\n                        .map(function (name) { return lowerName(name.substr(key_1.length)); });\n                }\n                keys.push('let');\n                _this.result = keys.map(function (key) { return ({ kind: 'key', name: key, sort: key }); });\n            };\n            if (!binding || (binding.key == key_1 && !binding.expression)) {\n                // We are in the root binding. We should return `let` and keys that are left in the\n                // selector.\n                keyCompletions();\n            }\n            else if (binding.keyIsVar) {\n                var equalLocation = this.attr.value.indexOf('=');\n                this.result = [];\n                if (equalLocation >= 0 && valueRelativePosition_1 >= equalLocation) {\n                    // We are after the '=' in a let clause. The valid values here are the members of the\n                    // template reference's type parameter.\n                    var directiveMetadata = selectorInfo.map.get(selector_1);\n                    if (directiveMetadata) {\n                        var contextTable = this.info.template.query.getTemplateContext(directiveMetadata.type.reference);\n                        if (contextTable) {\n                            this.result = this.symbolsToCompletions(contextTable.values());\n                        }\n                    }\n                }\n                else if (binding.key && valueRelativePosition_1 <= (binding.key.length - key_1.length)) {\n                    keyCompletions();\n                }\n            }\n            else {\n                // If the position is in the expression or after the key or there is no key, return the\n                // expression completions\n                if ((binding.expression && inSpan(valueRelativePosition_1, binding.expression.ast.span)) ||\n                    (binding.key &&\n                        valueRelativePosition_1 > binding.span.start + (binding.key.length - key_1.length)) ||\n                    !binding.key) {\n                    var span = new ParseSpan(0, this.attr.value.length);\n                    this.attributeValueCompletions(binding.expression ? binding.expression.ast :\n                        new PropertyRead(span, new ImplicitReceiver(span), ''), valueRelativePosition_1);\n                }\n                else {\n                    keyCompletions();\n                }\n            }\n        }\n    };\n    ExpressionVisitor.prototype.visitBoundText = function (ast) {\n        var expressionPosition = this.position - ast.sourceSpan.start.offset;\n        if (inSpan(expressionPosition, ast.value.span)) {\n            var completions = getExpressionCompletions(this.getExpressionScope(), ast.value, expressionPosition, this.info.template.query);\n            if (completions) {\n                this.result = this.symbolsToCompletions(completions);\n            }\n        }\n    };\n    ExpressionVisitor.prototype.attributeValueCompletions = function (value, position) {\n        var symbols = getExpressionCompletions(this.getExpressionScope(), value, position == null ? this.attributeValuePosition : position, this.info.template.query);\n        if (symbols) {\n            this.result = this.symbolsToCompletions(symbols);\n        }\n    };\n    ExpressionVisitor.prototype.symbolsToCompletions = function (symbols) {\n        return symbols.filter(function (s) { return !s.name.startsWith('__') && s.public; })\n            .map(function (symbol) { return ({ kind: symbol.kind, name: symbol.name, sort: symbol.name }); });\n    };\n    Object.defineProperty(ExpressionVisitor.prototype, \"attributeValuePosition\", {\n        get: function () {\n            if (this.attr && this.attr.valueSpan) {\n                return this.position - this.attr.valueSpan.start.offset - 1;\n            }\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ExpressionVisitor;\n}(NullTemplateVisitor));\nfunction getSourceText(template, span) {\n    return template.source.substring(span.start, span.end);\n}\nfunction nameOfAttr(attr) {\n    var name = attr.name;\n    if (attr.output) {\n        name = removeSuffix(name, 'Events');\n        name = removeSuffix(name, 'Changed');\n    }\n    var result = [name];\n    if (attr.input) {\n        result.unshift('[');\n        result.push(']');\n    }\n    if (attr.output) {\n        result.unshift('(');\n        result.push(')');\n    }\n    if (attr.template) {\n        result.unshift('*');\n    }\n    return result.join('');\n}\nvar templateAttr = /^(\\w+:)?(template$|^\\*)/;\nfunction createElementCssSelector(element) {\n    var cssSelector = new CssSelector();\n    var elNameNoNs = splitNsName(element.name)[1];\n    cssSelector.setElement(elNameNoNs);\n    for (var _i = 0, _a = element.attrs; _i < _a.length; _i++) {\n        var attr = _a[_i];\n        if (!attr.name.match(templateAttr)) {\n            var _b = splitNsName(attr.name), _ = _b[0], attrNameNoNs = _b[1];\n            cssSelector.addAttribute(attrNameNoNs, attr.value);\n            if (attr.name.toLowerCase() == 'class') {\n                var classes = attr.value.split(/s+/g);\n                classes.forEach(function (className) { return cssSelector.addClassName(className); });\n            }\n        }\n    }\n    return cssSelector;\n}\nfunction foldAttrs(attrs) {\n    var inputOutput = new Map();\n    var templates = new Map();\n    var result = [];\n    attrs.forEach(function (attr) {\n        if (attr.fromHtml) {\n            return attr;\n        }\n        if (attr.template) {\n            var duplicate = templates.get(attr.name);\n            if (!duplicate) {\n                result.push({ name: attr.name, template: true });\n                templates.set(attr.name, attr);\n            }\n        }\n        if (attr.input || attr.output) {\n            var duplicate = inputOutput.get(attr.name);\n            if (duplicate) {\n                duplicate.input = duplicate.input || attr.input;\n                duplicate.output = duplicate.output || attr.output;\n            }\n            else {\n                var cloneAttr = { name: attr.name };\n                if (attr.input)\n                    cloneAttr.input = true;\n                if (attr.output)\n                    cloneAttr.output = true;\n                result.push(cloneAttr);\n                inputOutput.set(attr.name, cloneAttr);\n            }\n        }\n    });\n    return result;\n}\nfunction expandedAttr(attr) {\n    if (attr.input && attr.output) {\n        return [\n            attr, { name: attr.name, input: true, output: false },\n            { name: attr.name, input: false, output: true }\n        ];\n    }\n    return [attr];\n}\nfunction lowerName(name) {\n    return name && (name[0].toLowerCase() + name.substr(1));\n}\n//# sourceMappingURL=completions.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Attribute, ElementAst, findNode, tokenReference } from '@angular/compiler';\nimport { getExpressionScope } from '@angular/compiler-cli/src/language_services';\nimport { getExpressionSymbol } from './expressions';\nimport { diagnosticInfoFromTemplateInfo, findTemplateAstAt, inSpan, offsetSpan, spanOf } from './utils';\nexport function locateSymbol(info) {\n    if (!info.position)\n        return undefined;\n    var templatePosition = info.position - info.template.span.start;\n    var path = findTemplateAstAt(info.templateAst, templatePosition);\n    if (path.tail) {\n        var symbol_1 = undefined;\n        var span_1 = undefined;\n        var attributeValueSymbol_1 = function (ast, inEvent) {\n            if (inEvent === void 0) { inEvent = false; }\n            var attribute = findAttribute(info);\n            if (attribute) {\n                if (inSpan(templatePosition, spanOf(attribute.valueSpan))) {\n                    var dinfo = diagnosticInfoFromTemplateInfo(info);\n                    var scope = getExpressionScope(dinfo, path, inEvent);\n                    if (attribute.valueSpan) {\n                        var expressionOffset = attribute.valueSpan.start.offset + 1;\n                        var result = getExpressionSymbol(scope, ast, templatePosition - expressionOffset, info.template.query);\n                        if (result) {\n                            symbol_1 = result.symbol;\n                            span_1 = offsetSpan(result.span, expressionOffset);\n                        }\n                    }\n                    return true;\n                }\n            }\n            return false;\n        };\n        path.tail.visit({\n            visitNgContent: function (ast) { },\n            visitEmbeddedTemplate: function (ast) { },\n            visitElement: function (ast) {\n                var component = ast.directives.find(function (d) { return d.directive.isComponent; });\n                if (component) {\n                    symbol_1 = info.template.query.getTypeSymbol(component.directive.type.reference);\n                    symbol_1 = symbol_1 && new OverrideKindSymbol(symbol_1, 'component');\n                    span_1 = spanOf(ast);\n                }\n                else {\n                    // Find a directive that matches the element name\n                    var directive = ast.directives.find(function (d) { return d.directive.selector != null && d.directive.selector.indexOf(ast.name) >= 0; });\n                    if (directive) {\n                        symbol_1 = info.template.query.getTypeSymbol(directive.directive.type.reference);\n                        symbol_1 = symbol_1 && new OverrideKindSymbol(symbol_1, 'directive');\n                        span_1 = spanOf(ast);\n                    }\n                }\n            },\n            visitReference: function (ast) {\n                symbol_1 = ast.value && info.template.query.getTypeSymbol(tokenReference(ast.value));\n                span_1 = spanOf(ast);\n            },\n            visitVariable: function (ast) { },\n            visitEvent: function (ast) {\n                if (!attributeValueSymbol_1(ast.handler, /* inEvent */ true)) {\n                    symbol_1 = findOutputBinding(info, path, ast);\n                    symbol_1 = symbol_1 && new OverrideKindSymbol(symbol_1, 'event');\n                    span_1 = spanOf(ast);\n                }\n            },\n            visitElementProperty: function (ast) { attributeValueSymbol_1(ast.value); },\n            visitAttr: function (ast) { },\n            visitBoundText: function (ast) {\n                var expressionPosition = templatePosition - ast.sourceSpan.start.offset;\n                if (inSpan(expressionPosition, ast.value.span)) {\n                    var dinfo = diagnosticInfoFromTemplateInfo(info);\n                    var scope = getExpressionScope(dinfo, path, /* includeEvent */ false);\n                    var result = getExpressionSymbol(scope, ast.value, expressionPosition, info.template.query);\n                    if (result) {\n                        symbol_1 = result.symbol;\n                        span_1 = offsetSpan(result.span, ast.sourceSpan.start.offset);\n                    }\n                }\n            },\n            visitText: function (ast) { },\n            visitDirective: function (ast) {\n                symbol_1 = info.template.query.getTypeSymbol(ast.directive.type.reference);\n                span_1 = spanOf(ast);\n            },\n            visitDirectiveProperty: function (ast) {\n                if (!attributeValueSymbol_1(ast.value)) {\n                    symbol_1 = findInputBinding(info, path, ast);\n                    span_1 = spanOf(ast);\n                }\n            }\n        }, null);\n        if (symbol_1 && span_1) {\n            return { symbol: symbol_1, span: offsetSpan(span_1, info.template.span.start) };\n        }\n    }\n}\nfunction findAttribute(info) {\n    if (info.position) {\n        var templatePosition = info.position - info.template.span.start;\n        var path = findNode(info.htmlAst, templatePosition);\n        return path.first(Attribute);\n    }\n}\nfunction findInputBinding(info, path, binding) {\n    var element = path.first(ElementAst);\n    if (element) {\n        for (var _i = 0, _a = element.directives; _i < _a.length; _i++) {\n            var directive = _a[_i];\n            var invertedInput = invertMap(directive.directive.inputs);\n            var fieldName = invertedInput[binding.templateName];\n            if (fieldName) {\n                var classSymbol = info.template.query.getTypeSymbol(directive.directive.type.reference);\n                if (classSymbol) {\n                    return classSymbol.members().get(fieldName);\n                }\n            }\n        }\n    }\n}\nfunction findOutputBinding(info, path, binding) {\n    var element = path.first(ElementAst);\n    if (element) {\n        for (var _i = 0, _a = element.directives; _i < _a.length; _i++) {\n            var directive = _a[_i];\n            var invertedOutputs = invertMap(directive.directive.outputs);\n            var fieldName = invertedOutputs[binding.name];\n            if (fieldName) {\n                var classSymbol = info.template.query.getTypeSymbol(directive.directive.type.reference);\n                if (classSymbol) {\n                    return classSymbol.members().get(fieldName);\n                }\n            }\n        }\n    }\n}\nfunction invertMap(obj) {\n    var result = {};\n    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {\n        var name_1 = _a[_i];\n        var v = obj[name_1];\n        result[v] = name_1;\n    }\n    return result;\n}\n/**\n * Wrap a symbol and change its kind to component.\n */\nvar OverrideKindSymbol = /** @class */ (function () {\n    function OverrideKindSymbol(sym, kindOverride) {\n        this.sym = sym;\n        this.kind = kindOverride;\n    }\n    Object.defineProperty(OverrideKindSymbol.prototype, \"name\", {\n        get: function () { return this.sym.name; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverrideKindSymbol.prototype, \"language\", {\n        get: function () { return this.sym.language; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverrideKindSymbol.prototype, \"type\", {\n        get: function () { return this.sym.type; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverrideKindSymbol.prototype, \"container\", {\n        get: function () { return this.sym.container; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverrideKindSymbol.prototype, \"public\", {\n        get: function () { return this.sym.public; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverrideKindSymbol.prototype, \"callable\", {\n        get: function () { return this.sym.callable; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverrideKindSymbol.prototype, \"nullable\", {\n        get: function () { return this.sym.nullable; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverrideKindSymbol.prototype, \"definition\", {\n        get: function () { return this.sym.definition; },\n        enumerable: true,\n        configurable: true\n    });\n    OverrideKindSymbol.prototype.members = function () { return this.sym.members(); };\n    OverrideKindSymbol.prototype.signatures = function () { return this.sym.signatures(); };\n    OverrideKindSymbol.prototype.selectSignature = function (types) { return this.sym.selectSignature(types); };\n    OverrideKindSymbol.prototype.indexed = function (argument) { return this.sym.indexed(argument); };\n    return OverrideKindSymbol;\n}());\n//# sourceMappingURL=locate_symbol.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompilerConfig, DomElementSchemaRegistry, HtmlParser, I18NHtmlParser, Lexer, Parser, TemplateParser } from '@angular/compiler';\nimport { getTemplateCompletions } from './completions';\nimport { getDefinition } from './definitions';\nimport { getDeclarationDiagnostics, getTemplateDiagnostics } from './diagnostics';\nimport { getHover } from './hover';\nimport { DiagnosticKind } from './types';\n/**\n * Create an instance of an Angular `LanguageService`.\n *\n * @experimental\n */\nexport function createLanguageService(host) {\n    return new LanguageServiceImpl(host);\n}\nvar LanguageServiceImpl = /** @class */ (function () {\n    function LanguageServiceImpl(host) {\n        this.host = host;\n    }\n    Object.defineProperty(LanguageServiceImpl.prototype, \"metadataResolver\", {\n        get: function () { return this.host.resolver; },\n        enumerable: true,\n        configurable: true\n    });\n    LanguageServiceImpl.prototype.getTemplateReferences = function () { return this.host.getTemplateReferences(); };\n    LanguageServiceImpl.prototype.getDiagnostics = function (fileName) {\n        var results = [];\n        var templates = this.host.getTemplates(fileName);\n        if (templates && templates.length) {\n            results.push.apply(results, getTemplateDiagnostics(fileName, this, templates));\n        }\n        var declarations = this.host.getDeclarations(fileName);\n        if (declarations && declarations.length) {\n            var summary = this.host.getAnalyzedModules();\n            results.push.apply(results, getDeclarationDiagnostics(declarations, summary));\n        }\n        return uniqueBySpan(results);\n    };\n    LanguageServiceImpl.prototype.getPipesAt = function (fileName, position) {\n        var templateInfo = this.getTemplateAstAtPosition(fileName, position);\n        if (templateInfo) {\n            return templateInfo.pipes;\n        }\n        return [];\n    };\n    LanguageServiceImpl.prototype.getCompletionsAt = function (fileName, position) {\n        var templateInfo = this.getTemplateAstAtPosition(fileName, position);\n        if (templateInfo) {\n            return getTemplateCompletions(templateInfo);\n        }\n    };\n    LanguageServiceImpl.prototype.getDefinitionAt = function (fileName, position) {\n        var templateInfo = this.getTemplateAstAtPosition(fileName, position);\n        if (templateInfo) {\n            return getDefinition(templateInfo);\n        }\n    };\n    LanguageServiceImpl.prototype.getHoverAt = function (fileName, position) {\n        var templateInfo = this.getTemplateAstAtPosition(fileName, position);\n        if (templateInfo) {\n            return getHover(templateInfo);\n        }\n    };\n    LanguageServiceImpl.prototype.getTemplateAstAtPosition = function (fileName, position) {\n        var template = this.host.getTemplateAt(fileName, position);\n        if (template) {\n            var astResult = this.getTemplateAst(template, fileName);\n            if (astResult && astResult.htmlAst && astResult.templateAst && astResult.directive &&\n                astResult.directives && astResult.pipes && astResult.expressionParser)\n                return {\n                    position: position,\n                    fileName: fileName,\n                    template: template,\n                    htmlAst: astResult.htmlAst,\n                    directive: astResult.directive,\n                    directives: astResult.directives,\n                    pipes: astResult.pipes,\n                    templateAst: astResult.templateAst,\n                    expressionParser: astResult.expressionParser\n                };\n        }\n        return undefined;\n    };\n    LanguageServiceImpl.prototype.getTemplateAst = function (template, contextFile) {\n        var _this = this;\n        var result = undefined;\n        try {\n            var resolvedMetadata = this.metadataResolver.getNonNormalizedDirectiveMetadata(template.type);\n            var metadata = resolvedMetadata && resolvedMetadata.metadata;\n            if (metadata) {\n                var rawHtmlParser = new HtmlParser();\n                var htmlParser = new I18NHtmlParser(rawHtmlParser);\n                var expressionParser = new Parser(new Lexer());\n                var config = new CompilerConfig();\n                var parser = new TemplateParser(config, this.host.resolver.getReflector(), expressionParser, new DomElementSchemaRegistry(), htmlParser, null, []);\n                var htmlResult = htmlParser.parse(template.source, '', true);\n                var analyzedModules = this.host.getAnalyzedModules();\n                var errors = undefined;\n                var ngModule = analyzedModules.ngModuleByPipeOrDirective.get(template.type);\n                if (!ngModule) {\n                    // Reported by the the declaration diagnostics.\n                    ngModule = findSuitableDefaultModule(analyzedModules);\n                }\n                if (ngModule) {\n                    var resolvedDirectives = ngModule.transitiveModule.directives.map(function (d) { return _this.host.resolver.getNonNormalizedDirectiveMetadata(d.reference); });\n                    var directives = removeMissing(resolvedDirectives).map(function (d) { return d.metadata.toSummary(); });\n                    var pipes = ngModule.transitiveModule.pipes.map(function (p) { return _this.host.resolver.getOrLoadPipeMetadata(p.reference).toSummary(); });\n                    var schemas = ngModule.schemas;\n                    var parseResult = parser.tryParseHtml(htmlResult, metadata, directives, pipes, schemas);\n                    result = {\n                        htmlAst: htmlResult.rootNodes,\n                        templateAst: parseResult.templateAst,\n                        directive: metadata, directives: directives, pipes: pipes,\n                        parseErrors: parseResult.errors, expressionParser: expressionParser, errors: errors\n                    };\n                }\n            }\n        }\n        catch (e) {\n            var span = template.span;\n            if (e.fileName == contextFile) {\n                span = template.query.getSpanAt(e.line, e.column) || span;\n            }\n            result = { errors: [{ kind: DiagnosticKind.Error, message: e.message, span: span }] };\n        }\n        return result || {};\n    };\n    return LanguageServiceImpl;\n}());\nfunction removeMissing(values) {\n    return values.filter(function (e) { return !!e; });\n}\nfunction uniqueBySpan(elements) {\n    if (elements) {\n        var result = [];\n        var map = new Map();\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            var span = element.span;\n            var set = map.get(span.start);\n            if (!set) {\n                set = new Set();\n                map.set(span.start, set);\n            }\n            if (!set.has(span.end)) {\n                set.add(span.end);\n                result.push(element);\n            }\n        }\n        return result;\n    }\n}\nfunction findSuitableDefaultModule(modules) {\n    var result = undefined;\n    var resultSize = 0;\n    for (var _i = 0, _a = modules.ngModules; _i < _a.length; _i++) {\n        var module_1 = _a[_i];\n        var moduleSize = module_1.transitiveModule.directives.length;\n        if (moduleSize > resultSize) {\n            result = module_1;\n            resultSize = moduleSize;\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=language_service.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getTemplateExpressionDiagnostics } from '@angular/compiler-cli/src/language_services';\nimport { DiagnosticKind } from './types';\nimport { offsetSpan, spanOf } from './utils';\nexport function getTemplateDiagnostics(fileName, astProvider, templates) {\n    var results = [];\n    var _loop_1 = function (template) {\n        var ast = astProvider.getTemplateAst(template, fileName);\n        if (ast) {\n            if (ast.parseErrors && ast.parseErrors.length) {\n                results.push.apply(results, ast.parseErrors.map(function (e) { return ({\n                    kind: DiagnosticKind.Error,\n                    span: offsetSpan(spanOf(e.span), template.span.start),\n                    message: e.msg\n                }); }));\n            }\n            else if (ast.templateAst && ast.htmlAst) {\n                var info = {\n                    templateAst: ast.templateAst,\n                    htmlAst: ast.htmlAst,\n                    offset: template.span.start,\n                    query: template.query,\n                    members: template.members\n                };\n                var expressionDiagnostics = getTemplateExpressionDiagnostics(info);\n                results.push.apply(results, expressionDiagnostics);\n            }\n            if (ast.errors) {\n                results.push.apply(results, ast.errors.map(function (e) { return ({ kind: e.kind, span: e.span || template.span, message: e.message }); }));\n            }\n        }\n    };\n    for (var _i = 0, templates_1 = templates; _i < templates_1.length; _i++) {\n        var template = templates_1[_i];\n        _loop_1(template);\n    }\n    return results;\n}\nexport function getDeclarationDiagnostics(declarations, modules) {\n    var results = [];\n    var directives = undefined;\n    var _loop_2 = function (declaration) {\n        var report = function (message, span) {\n            results.push({\n                kind: DiagnosticKind.Error,\n                span: span || declaration.declarationSpan, message: message\n            });\n        };\n        for (var _i = 0, _a = declaration.errors; _i < _a.length; _i++) {\n            var error = _a[_i];\n            report(error.message, error.span);\n        }\n        if (declaration.metadata) {\n            if (declaration.metadata.isComponent) {\n                if (!modules.ngModuleByPipeOrDirective.has(declaration.type)) {\n                    report(\"Component '\" + declaration.type.name + \"' is not included in a module and will not be available inside a template. Consider adding it to a NgModule declaration\");\n                }\n                var _b = declaration.metadata.template, template = _b.template, templateUrl = _b.templateUrl;\n                if (template === null && !templateUrl) {\n                    report(\"Component '\" + declaration.type.name + \"' must have a template or templateUrl\");\n                }\n                else if (template && templateUrl) {\n                    report(\"Component '\" + declaration.type.name + \"' must not have both template and templateUrl\");\n                }\n            }\n            else {\n                if (!directives) {\n                    directives = new Set();\n                    modules.ngModules.forEach(function (module) {\n                        module.declaredDirectives.forEach(function (directive) { directives.add(directive.reference); });\n                    });\n                }\n                if (!directives.has(declaration.type)) {\n                    report(\"Directive '\" + declaration.type.name + \"' is not included in a module and will not be available inside a template. Consider adding it to a NgModule declaration\");\n                }\n            }\n        }\n    };\n    for (var _i = 0, declarations_1 = declarations; _i < declarations_1.length; _i++) {\n        var declaration = declarations_1[_i];\n        _loop_2(declaration);\n    }\n    return results;\n}\n//# sourceMappingURL=diagnostics.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { locateSymbol } from './locate_symbol';\nexport function getHover(info) {\n    var result = locateSymbol(info);\n    if (result) {\n        return { text: hoverTextOf(result.symbol), span: result.span };\n    }\n}\nfunction hoverTextOf(symbol) {\n    var result = [{ text: symbol.kind }, { text: ' ' }, { text: symbol.name, language: symbol.language }];\n    var container = symbol.container;\n    if (container) {\n        result.push({ text: ' of ' }, { text: container.name, language: container.language });\n    }\n    return result;\n}\n//# sourceMappingURL=hover.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MetadataCollector, createMetadataReaderCache, readMetadata } from '@angular/compiler-cli/src/language_services';\nimport * as path from 'path';\nimport * as ts from 'typescript';\nvar ReflectorModuleModuleResolutionHost = /** @class */ (function () {\n    function ReflectorModuleModuleResolutionHost(host, getProgram) {\n        var _this = this;\n        this.host = host;\n        this.getProgram = getProgram;\n        // Note: verboseInvalidExpressions is important so that\n        // the collector will collect errors instead of throwing\n        this.metadataCollector = new MetadataCollector({ verboseInvalidExpression: true });\n        if (host.directoryExists)\n            this.directoryExists = function (directoryName) { return _this.host.directoryExists(directoryName); };\n    }\n    ReflectorModuleModuleResolutionHost.prototype.fileExists = function (fileName) { return !!this.host.getScriptSnapshot(fileName); };\n    ReflectorModuleModuleResolutionHost.prototype.readFile = function (fileName) {\n        var snapshot = this.host.getScriptSnapshot(fileName);\n        if (snapshot) {\n            return snapshot.getText(0, snapshot.getLength());\n        }\n        // Typescript readFile() declaration should be `readFile(fileName: string): string | undefined\n        return undefined;\n    };\n    ReflectorModuleModuleResolutionHost.prototype.getSourceFileMetadata = function (fileName) {\n        var sf = this.getProgram().getSourceFile(fileName);\n        return sf ? this.metadataCollector.getMetadata(sf) : undefined;\n    };\n    ReflectorModuleModuleResolutionHost.prototype.cacheMetadata = function (fileName) {\n        // Don't cache the metadata for .ts files as they might change in the editor!\n        return fileName.endsWith('.d.ts');\n    };\n    return ReflectorModuleModuleResolutionHost;\n}());\nvar ReflectorHost = /** @class */ (function () {\n    function ReflectorHost(getProgram, serviceHost, options) {\n        this.options = options;\n        this.metadataReaderCache = createMetadataReaderCache();\n        this.hostAdapter = new ReflectorModuleModuleResolutionHost(serviceHost, getProgram);\n        this.moduleResolutionCache =\n            ts.createModuleResolutionCache(serviceHost.getCurrentDirectory(), function (s) { return s; });\n    }\n    ReflectorHost.prototype.getMetadataFor = function (modulePath) {\n        return readMetadata(modulePath, this.hostAdapter, this.metadataReaderCache);\n    };\n    ReflectorHost.prototype.moduleNameToFileName = function (moduleName, containingFile) {\n        if (!containingFile) {\n            if (moduleName.indexOf('.') === 0) {\n                throw new Error('Resolution of relative paths requires a containing file.');\n            }\n            // Any containing file gives the same result for absolute imports\n            containingFile = path.join(this.options.basePath, 'index.ts').replace(/\\\\/g, '/');\n        }\n        var resolved = ts.resolveModuleName(moduleName, containingFile, this.options, this.hostAdapter)\n            .resolvedModule;\n        return resolved ? resolved.resolvedFileName : null;\n    };\n    ReflectorHost.prototype.getOutputName = function (filePath) { return filePath; };\n    return ReflectorHost;\n}());\nexport { ReflectorHost };\n//# sourceMappingURL=reflector_host.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { AotSummaryResolver, CompileMetadataResolver, CompilerConfig, DEFAULT_INTERPOLATION_CONFIG, DirectiveNormalizer, DirectiveResolver, DomElementSchemaRegistry, HtmlParser, JitSummaryResolver, NgModuleResolver, ParseTreeResult, PipeResolver, ResourceLoader, StaticReflector, StaticSymbolCache, StaticSymbolResolver, analyzeNgModules, createOfflineCompileUrlResolver, isFormattedError } from '@angular/compiler';\nimport { getClassMembersFromDeclaration, getPipesTable, getSymbolQuery } from '@angular/compiler-cli/src/language_services';\nimport { ViewEncapsulation, ɵConsole as Console } from '@angular/core';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\nimport { createLanguageService } from './language_service';\nimport { ReflectorHost } from './reflector_host';\n/**\n * Create a `LanguageServiceHost`\n */\nexport function createLanguageServiceFromTypescript(host, service) {\n    var ngHost = new TypeScriptServiceHost(host, service);\n    var ngServer = createLanguageService(ngHost);\n    ngHost.setSite(ngServer);\n    return ngServer;\n}\n/**\n * The language service never needs the normalized versions of the metadata. To avoid parsing\n * the content and resolving references, return an empty file. This also allows normalizing\n * template that are syntatically incorrect which is required to provide completions in\n * syntactically incorrect templates.\n */\nvar DummyHtmlParser = /** @class */ (function (_super) {\n    tslib_1.__extends(DummyHtmlParser, _super);\n    function DummyHtmlParser() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DummyHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {\n        if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        return new ParseTreeResult([], []);\n    };\n    return DummyHtmlParser;\n}(HtmlParser));\nexport { DummyHtmlParser };\n/**\n * Avoid loading resources in the language servcie by using a dummy loader.\n */\nvar DummyResourceLoader = /** @class */ (function (_super) {\n    tslib_1.__extends(DummyResourceLoader, _super);\n    function DummyResourceLoader() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DummyResourceLoader.prototype.get = function (url) { return Promise.resolve(''); };\n    return DummyResourceLoader;\n}(ResourceLoader));\nexport { DummyResourceLoader };\n/**\n * An implementation of a `LanguageServiceHost` for a TypeScript project.\n *\n * The `TypeScriptServiceHost` implements the Angular `LanguageServiceHost` using\n * the TypeScript language services.\n *\n * @experimental\n */\nvar TypeScriptServiceHost = /** @class */ (function () {\n    function TypeScriptServiceHost(host, tsService) {\n        this.host = host;\n        this.tsService = tsService;\n        this._staticSymbolCache = new StaticSymbolCache();\n        this._typeCache = [];\n        this.modulesOutOfDate = true;\n        this.fileVersions = new Map();\n    }\n    TypeScriptServiceHost.prototype.setSite = function (service) { this.service = service; };\n    Object.defineProperty(TypeScriptServiceHost.prototype, \"resolver\", {\n        /**\n         * Angular LanguageServiceHost implementation\n         */\n        get: function () {\n            var _this = this;\n            this.validate();\n            var result = this._resolver;\n            if (!result) {\n                var moduleResolver = new NgModuleResolver(this.reflector);\n                var directiveResolver = new DirectiveResolver(this.reflector);\n                var pipeResolver = new PipeResolver(this.reflector);\n                var elementSchemaRegistry = new DomElementSchemaRegistry();\n                var resourceLoader = new DummyResourceLoader();\n                var urlResolver = createOfflineCompileUrlResolver();\n                var htmlParser = new DummyHtmlParser();\n                // This tracks the CompileConfig in codegen.ts. Currently these options\n                // are hard-coded.\n                var config = new CompilerConfig({ defaultEncapsulation: ViewEncapsulation.Emulated, useJit: false });\n                var directiveNormalizer = new DirectiveNormalizer(resourceLoader, urlResolver, htmlParser, config);\n                result = this._resolver = new CompileMetadataResolver(config, htmlParser, moduleResolver, directiveResolver, pipeResolver, new JitSummaryResolver(), elementSchemaRegistry, directiveNormalizer, new Console(), this._staticSymbolCache, this.reflector, function (error, type) { return _this.collectError(error, type && type.filePath); });\n            }\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TypeScriptServiceHost.prototype.getTemplateReferences = function () {\n        this.ensureTemplateMap();\n        return this.templateReferences || [];\n    };\n    TypeScriptServiceHost.prototype.getTemplateAt = function (fileName, position) {\n        var sourceFile = this.getSourceFile(fileName);\n        if (sourceFile) {\n            this.context = sourceFile.fileName;\n            var node = this.findNode(sourceFile, position);\n            if (node) {\n                return this.getSourceFromNode(fileName, this.host.getScriptVersion(sourceFile.fileName), node);\n            }\n        }\n        else {\n            this.ensureTemplateMap();\n            // TODO: Cannocalize the file?\n            var componentType = this.fileToComponent.get(fileName);\n            if (componentType) {\n                return this.getSourceFromType(fileName, this.host.getScriptVersion(fileName), componentType);\n            }\n        }\n        return undefined;\n    };\n    TypeScriptServiceHost.prototype.getAnalyzedModules = function () {\n        this.updateAnalyzedModules();\n        return this.ensureAnalyzedModules();\n    };\n    TypeScriptServiceHost.prototype.ensureAnalyzedModules = function () {\n        var analyzedModules = this.analyzedModules;\n        if (!analyzedModules) {\n            if (this.host.getScriptFileNames().length === 0) {\n                analyzedModules = {\n                    files: [],\n                    ngModuleByPipeOrDirective: new Map(),\n                    ngModules: [],\n                };\n            }\n            else {\n                var analyzeHost = { isSourceFile: function (filePath) { return true; } };\n                var programFiles = this.program.getSourceFiles().map(function (sf) { return sf.fileName; });\n                analyzedModules =\n                    analyzeNgModules(programFiles, analyzeHost, this.staticSymbolResolver, this.resolver);\n            }\n            this.analyzedModules = analyzedModules;\n        }\n        return analyzedModules;\n    };\n    TypeScriptServiceHost.prototype.getTemplates = function (fileName) {\n        var _this = this;\n        this.ensureTemplateMap();\n        var componentType = this.fileToComponent.get(fileName);\n        if (componentType) {\n            var templateSource = this.getTemplateAt(fileName, 0);\n            if (templateSource) {\n                return [templateSource];\n            }\n        }\n        else {\n            var version_1 = this.host.getScriptVersion(fileName);\n            var result_1 = [];\n            // Find each template string in the file\n            var visit_1 = function (child) {\n                var templateSource = _this.getSourceFromNode(fileName, version_1, child);\n                if (templateSource) {\n                    result_1.push(templateSource);\n                }\n                else {\n                    ts.forEachChild(child, visit_1);\n                }\n            };\n            var sourceFile = this.getSourceFile(fileName);\n            if (sourceFile) {\n                this.context = sourceFile.path || sourceFile.fileName;\n                ts.forEachChild(sourceFile, visit_1);\n            }\n            return result_1.length ? result_1 : undefined;\n        }\n    };\n    TypeScriptServiceHost.prototype.getDeclarations = function (fileName) {\n        var _this = this;\n        var result = [];\n        var sourceFile = this.getSourceFile(fileName);\n        if (sourceFile) {\n            var visit_2 = function (child) {\n                var declaration = _this.getDeclarationFromNode(sourceFile, child);\n                if (declaration) {\n                    result.push(declaration);\n                }\n                else {\n                    ts.forEachChild(child, visit_2);\n                }\n            };\n            ts.forEachChild(sourceFile, visit_2);\n        }\n        return result;\n    };\n    TypeScriptServiceHost.prototype.getSourceFile = function (fileName) {\n        return this.tsService.getProgram().getSourceFile(fileName);\n    };\n    TypeScriptServiceHost.prototype.updateAnalyzedModules = function () {\n        this.validate();\n        if (this.modulesOutOfDate) {\n            this.analyzedModules = null;\n            this._reflector = null;\n            this.templateReferences = null;\n            this.fileToComponent = null;\n            this.ensureAnalyzedModules();\n            this.modulesOutOfDate = false;\n        }\n    };\n    Object.defineProperty(TypeScriptServiceHost.prototype, \"program\", {\n        get: function () { return this.tsService.getProgram(); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TypeScriptServiceHost.prototype, \"checker\", {\n        get: function () {\n            var checker = this._checker;\n            if (!checker) {\n                checker = this._checker = this.program.getTypeChecker();\n            }\n            return checker;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TypeScriptServiceHost.prototype.validate = function () {\n        var _this = this;\n        var program = this.program;\n        if (this.lastProgram !== program) {\n            // Invalidate file that have changed in the static symbol resolver\n            var invalidateFile = function (fileName) {\n                return _this._staticSymbolResolver.invalidateFile(fileName);\n            };\n            this.clearCaches();\n            var seen_1 = new Set();\n            for (var _i = 0, _a = this.program.getSourceFiles(); _i < _a.length; _i++) {\n                var sourceFile = _a[_i];\n                var fileName = sourceFile.fileName;\n                seen_1.add(fileName);\n                var version = this.host.getScriptVersion(fileName);\n                var lastVersion = this.fileVersions.get(fileName);\n                if (version != lastVersion) {\n                    this.fileVersions.set(fileName, version);\n                    if (this._staticSymbolResolver) {\n                        invalidateFile(fileName);\n                    }\n                }\n            }\n            // Remove file versions that are no longer in the file and invalidate them.\n            var missing = Array.from(this.fileVersions.keys()).filter(function (f) { return !seen_1.has(f); });\n            missing.forEach(function (f) { return _this.fileVersions.delete(f); });\n            if (this._staticSymbolResolver) {\n                missing.forEach(invalidateFile);\n            }\n            this.lastProgram = program;\n        }\n    };\n    TypeScriptServiceHost.prototype.clearCaches = function () {\n        this._checker = null;\n        this._typeCache = [];\n        this._resolver = null;\n        this.collectedErrors = null;\n        this.modulesOutOfDate = true;\n    };\n    TypeScriptServiceHost.prototype.ensureTemplateMap = function () {\n        if (!this.fileToComponent || !this.templateReferences) {\n            var fileToComponent = new Map();\n            var templateReference = [];\n            var ngModuleSummary = this.getAnalyzedModules();\n            var urlResolver = createOfflineCompileUrlResolver();\n            for (var _i = 0, _a = ngModuleSummary.ngModules; _i < _a.length; _i++) {\n                var module_1 = _a[_i];\n                for (var _b = 0, _c = module_1.declaredDirectives; _b < _c.length; _b++) {\n                    var directive = _c[_b];\n                    var metadata = this.resolver.getNonNormalizedDirectiveMetadata(directive.reference).metadata;\n                    if (metadata.isComponent && metadata.template && metadata.template.templateUrl) {\n                        var templateName = urlResolver.resolve(this.reflector.componentModuleUrl(directive.reference), metadata.template.templateUrl);\n                        fileToComponent.set(templateName, directive.reference);\n                        templateReference.push(templateName);\n                    }\n                }\n            }\n            this.fileToComponent = fileToComponent;\n            this.templateReferences = templateReference;\n        }\n    };\n    TypeScriptServiceHost.prototype.getSourceFromDeclaration = function (fileName, version, source, span, type, declaration, node, sourceFile) {\n        var queryCache = undefined;\n        var t = this;\n        if (declaration) {\n            return {\n                version: version,\n                source: source,\n                span: span,\n                type: type,\n                get members() {\n                    return getClassMembersFromDeclaration(t.program, t.checker, sourceFile, declaration);\n                },\n                get query() {\n                    if (!queryCache) {\n                        var pipes_1 = t.service.getPipesAt(fileName, node.getStart());\n                        queryCache = getSymbolQuery(t.program, t.checker, sourceFile, function () { return getPipesTable(sourceFile, t.program, t.checker, pipes_1); });\n                    }\n                    return queryCache;\n                }\n            };\n        }\n    };\n    TypeScriptServiceHost.prototype.getSourceFromNode = function (fileName, version, node) {\n        var result = undefined;\n        var t = this;\n        switch (node.kind) {\n            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n            case ts.SyntaxKind.StringLiteral:\n                var _a = this.getTemplateClassDeclFromNode(node), declaration = _a[0], decorator = _a[1];\n                if (declaration && declaration.name) {\n                    var sourceFile = this.getSourceFile(fileName);\n                    if (sourceFile) {\n                        return this.getSourceFromDeclaration(fileName, version, this.stringOf(node) || '', shrink(spanOf(node)), this.reflector.getStaticSymbol(sourceFile.fileName, declaration.name.text), declaration, node, sourceFile);\n                    }\n                }\n                break;\n        }\n        return result;\n    };\n    TypeScriptServiceHost.prototype.getSourceFromType = function (fileName, version, type) {\n        var result = undefined;\n        var declaration = this.getTemplateClassFromStaticSymbol(type);\n        if (declaration) {\n            var snapshot = this.host.getScriptSnapshot(fileName);\n            if (snapshot) {\n                var source = snapshot.getText(0, snapshot.getLength());\n                result = this.getSourceFromDeclaration(fileName, version, source, { start: 0, end: source.length }, type, declaration, declaration, declaration.getSourceFile());\n            }\n        }\n        return result;\n    };\n    Object.defineProperty(TypeScriptServiceHost.prototype, \"reflectorHost\", {\n        get: function () {\n            var _this = this;\n            var result = this._reflectorHost;\n            if (!result) {\n                if (!this.context) {\n                    // Make up a context by finding the first script and using that as the base dir.\n                    var scriptFileNames = this.host.getScriptFileNames();\n                    if (0 === scriptFileNames.length) {\n                        throw new Error('Internal error: no script file names found');\n                    }\n                    this.context = scriptFileNames[0];\n                }\n                // Use the file context's directory as the base directory.\n                // The host's getCurrentDirectory() is not reliable as it is always \"\" in\n                // tsserver. We don't need the exact base directory, just one that contains\n                // a source file.\n                var source = this.tsService.getProgram().getSourceFile(this.context);\n                if (!source) {\n                    throw new Error('Internal error: no context could be determined');\n                }\n                var tsConfigPath = findTsConfig(source.fileName);\n                var basePath = path.dirname(tsConfigPath || this.context);\n                var options = { basePath: basePath, genDir: basePath };\n                var compilerOptions = this.host.getCompilationSettings();\n                if (compilerOptions && compilerOptions.baseUrl) {\n                    options.baseUrl = compilerOptions.baseUrl;\n                }\n                if (compilerOptions && compilerOptions.paths) {\n                    options.paths = compilerOptions.paths;\n                }\n                result = this._reflectorHost =\n                    new ReflectorHost(function () { return _this.tsService.getProgram(); }, this.host, options);\n            }\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TypeScriptServiceHost.prototype.collectError = function (error, filePath) {\n        if (filePath) {\n            var errorMap = this.collectedErrors;\n            if (!errorMap || !this.collectedErrors) {\n                errorMap = this.collectedErrors = new Map();\n            }\n            var errors = errorMap.get(filePath);\n            if (!errors) {\n                errors = [];\n                this.collectedErrors.set(filePath, errors);\n            }\n            errors.push(error);\n        }\n    };\n    Object.defineProperty(TypeScriptServiceHost.prototype, \"staticSymbolResolver\", {\n        get: function () {\n            var _this = this;\n            var result = this._staticSymbolResolver;\n            if (!result) {\n                this._summaryResolver = new AotSummaryResolver({\n                    loadSummary: function (filePath) { return null; },\n                    isSourceFile: function (sourceFilePath) { return true; },\n                    toSummaryFileName: function (sourceFilePath) { return sourceFilePath; },\n                    fromSummaryFileName: function (filePath) { return filePath; },\n                }, this._staticSymbolCache);\n                result = this._staticSymbolResolver = new StaticSymbolResolver(this.reflectorHost, this._staticSymbolCache, this._summaryResolver, function (e, filePath) { return _this.collectError(e, filePath); });\n            }\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TypeScriptServiceHost.prototype, \"reflector\", {\n        get: function () {\n            var _this = this;\n            var result = this._reflector;\n            if (!result) {\n                var ssr = this.staticSymbolResolver;\n                result = this._reflector = new StaticReflector(this._summaryResolver, ssr, [], [], function (e, filePath) { return _this.collectError(e, filePath); });\n            }\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TypeScriptServiceHost.prototype.getTemplateClassFromStaticSymbol = function (type) {\n        var source = this.getSourceFile(type.filePath);\n        if (source) {\n            var declarationNode = ts.forEachChild(source, function (child) {\n                if (child.kind === ts.SyntaxKind.ClassDeclaration) {\n                    var classDeclaration = child;\n                    if (classDeclaration.name != null && classDeclaration.name.text === type.name) {\n                        return classDeclaration;\n                    }\n                }\n            });\n            return declarationNode;\n        }\n        return undefined;\n    };\n    /**\n     * Given a template string node, see if it is an Angular template string, and if so return the\n     * containing class.\n     */\n    TypeScriptServiceHost.prototype.getTemplateClassDeclFromNode = function (currentToken) {\n        // Verify we are in a 'template' property assignment, in an object literal, which is an call\n        // arg, in a decorator\n        var parentNode = currentToken.parent; // PropertyAssignment\n        if (!parentNode) {\n            return TypeScriptServiceHost.missingTemplate;\n        }\n        if (parentNode.kind !== ts.SyntaxKind.PropertyAssignment) {\n            return TypeScriptServiceHost.missingTemplate;\n        }\n        else {\n            // TODO: Is this different for a literal, i.e. a quoted property name like \"template\"?\n            if (parentNode.name.text !== 'template') {\n                return TypeScriptServiceHost.missingTemplate;\n            }\n        }\n        parentNode = parentNode.parent; // ObjectLiteralExpression\n        if (!parentNode || parentNode.kind !== ts.SyntaxKind.ObjectLiteralExpression) {\n            return TypeScriptServiceHost.missingTemplate;\n        }\n        parentNode = parentNode.parent; // CallExpression\n        if (!parentNode || parentNode.kind !== ts.SyntaxKind.CallExpression) {\n            return TypeScriptServiceHost.missingTemplate;\n        }\n        var callTarget = parentNode.expression;\n        var decorator = parentNode.parent; // Decorator\n        if (!decorator || decorator.kind !== ts.SyntaxKind.Decorator) {\n            return TypeScriptServiceHost.missingTemplate;\n        }\n        var declaration = decorator.parent; // ClassDeclaration\n        if (!declaration || declaration.kind !== ts.SyntaxKind.ClassDeclaration) {\n            return TypeScriptServiceHost.missingTemplate;\n        }\n        return [declaration, callTarget];\n    };\n    TypeScriptServiceHost.prototype.getCollectedErrors = function (defaultSpan, sourceFile) {\n        var errors = (this.collectedErrors && this.collectedErrors.get(sourceFile.fileName));\n        return (errors && errors.map(function (e) {\n            var line = e.line || (e.position && e.position.line);\n            var column = e.column || (e.position && e.position.column);\n            var span = spanAt(sourceFile, line, column) || defaultSpan;\n            if (isFormattedError(e)) {\n                return errorToDiagnosticWithChain(e, span);\n            }\n            return { message: e.message, span: span };\n        })) ||\n            [];\n    };\n    TypeScriptServiceHost.prototype.getDeclarationFromNode = function (sourceFile, node) {\n        if (node.kind == ts.SyntaxKind.ClassDeclaration && node.decorators &&\n            node.name) {\n            for (var _i = 0, _a = node.decorators; _i < _a.length; _i++) {\n                var decorator = _a[_i];\n                if (decorator.expression && decorator.expression.kind == ts.SyntaxKind.CallExpression) {\n                    var classDeclaration = node;\n                    if (classDeclaration.name) {\n                        var call = decorator.expression;\n                        var target = call.expression;\n                        var type = this.checker.getTypeAtLocation(target);\n                        if (type) {\n                            var staticSymbol = this.reflector.getStaticSymbol(sourceFile.fileName, classDeclaration.name.text);\n                            try {\n                                if (this.resolver.isDirective(staticSymbol)) {\n                                    var metadata = this.resolver.getNonNormalizedDirectiveMetadata(staticSymbol).metadata;\n                                    var declarationSpan = spanOf(target);\n                                    return {\n                                        type: staticSymbol,\n                                        declarationSpan: declarationSpan,\n                                        metadata: metadata,\n                                        errors: this.getCollectedErrors(declarationSpan, sourceFile)\n                                    };\n                                }\n                            }\n                            catch (e) {\n                                if (e.message) {\n                                    this.collectError(e, sourceFile.fileName);\n                                    var declarationSpan = spanOf(target);\n                                    return {\n                                        type: staticSymbol,\n                                        declarationSpan: declarationSpan,\n                                        errors: this.getCollectedErrors(declarationSpan, sourceFile)\n                                    };\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    TypeScriptServiceHost.prototype.stringOf = function (node) {\n        switch (node.kind) {\n            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n                return node.text;\n            case ts.SyntaxKind.StringLiteral:\n                return node.text;\n        }\n    };\n    TypeScriptServiceHost.prototype.findNode = function (sourceFile, position) {\n        function find(node) {\n            if (position >= node.getStart() && position < node.getEnd()) {\n                return ts.forEachChild(node, find) || node;\n            }\n        }\n        return find(sourceFile);\n    };\n    TypeScriptServiceHost.missingTemplate = [undefined, undefined];\n    return TypeScriptServiceHost;\n}());\nexport { TypeScriptServiceHost };\nfunction findTsConfig(fileName) {\n    var dir = path.dirname(fileName);\n    while (fs.existsSync(dir)) {\n        var candidate = path.join(dir, 'tsconfig.json');\n        if (fs.existsSync(candidate))\n            return candidate;\n        var parentDir = path.dirname(dir);\n        if (parentDir === dir)\n            break;\n        dir = parentDir;\n    }\n}\nfunction spanOf(node) {\n    return { start: node.getStart(), end: node.getEnd() };\n}\nfunction shrink(span, offset) {\n    if (offset == null)\n        offset = 1;\n    return { start: span.start + offset, end: span.end - offset };\n}\nfunction spanAt(sourceFile, line, column) {\n    if (line != null && column != null) {\n        var position_1 = ts.getPositionOfLineAndCharacter(sourceFile, line, column);\n        var findChild = function findChild(node) {\n            if (node.kind > ts.SyntaxKind.LastToken && node.pos <= position_1 && node.end > position_1) {\n                var betterNode = ts.forEachChild(node, findChild);\n                return betterNode || node;\n            }\n        };\n        var node = ts.forEachChild(sourceFile, findChild);\n        if (node) {\n            return { start: node.getStart(), end: node.getEnd() };\n        }\n    }\n}\nfunction chainedMessage(chain, indent) {\n    if (indent === void 0) { indent = ''; }\n    return indent + chain.message + (chain.next ? chainedMessage(chain.next, indent + '  ') : '');\n}\nvar DiagnosticMessageChainImpl = /** @class */ (function () {\n    function DiagnosticMessageChainImpl(message, next) {\n        this.message = message;\n        this.next = next;\n    }\n    DiagnosticMessageChainImpl.prototype.toString = function () { return chainedMessage(this); };\n    return DiagnosticMessageChainImpl;\n}());\nfunction convertChain(chain) {\n    return { message: chain.message, next: chain.next ? convertChain(chain.next) : undefined };\n}\nfunction errorToDiagnosticWithChain(error, span) {\n    return { message: error.chain ? convertChain(error.chain) : error.message, span: span };\n}\n//# sourceMappingURL=typescript_host.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ts from 'typescript';\nimport { createLanguageService } from './language_service';\nimport { TypeScriptServiceHost } from './typescript_host';\nvar projectHostMap = new WeakMap();\nexport function getExternalFiles(project) {\n    var host = projectHostMap.get(project);\n    if (host) {\n        return host.getTemplateReferences();\n    }\n}\nexport function create(info /* ts.server.PluginCreateInfo */) {\n    // Create the proxy\n    var proxy = Object.create(null);\n    var oldLS = info.languageService;\n    function tryCall(fileName, callback) {\n        if (fileName && !oldLS.getProgram().getSourceFile(fileName)) {\n            return undefined;\n        }\n        try {\n            return callback();\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    function tryFilenameCall(m) {\n        return function (fileName) { return tryCall(fileName, function () { return (m.call(ls, fileName)); }); };\n    }\n    function tryFilenameOneCall(m) {\n        return function (fileName, p) { return tryCall(fileName, function () { return (m.call(ls, fileName, p)); }); };\n    }\n    function tryFilenameTwoCall(m) {\n        return function (fileName, p1, p2) { return tryCall(fileName, function () { return (m.call(ls, fileName, p1, p2)); }); };\n    }\n    function tryFilenameThreeCall(m) {\n        return function (fileName, p1, p2, p3) { return tryCall(fileName, function () { return (m.call(ls, fileName, p1, p2, p3)); }); };\n    }\n    function tryFilenameFourCall(m) {\n        return function (fileName, p1, p2, p3, p4) {\n            return tryCall(fileName, function () { return (m.call(ls, fileName, p1, p2, p3, p4)); });\n        };\n    }\n    function typescriptOnly(ls) {\n        return {\n            cleanupSemanticCache: function () { return ls.cleanupSemanticCache(); },\n            getSyntacticDiagnostics: tryFilenameCall(ls.getSyntacticDiagnostics),\n            getSemanticDiagnostics: tryFilenameCall(ls.getSemanticDiagnostics),\n            getCompilerOptionsDiagnostics: function () { return ls.getCompilerOptionsDiagnostics(); },\n            getSyntacticClassifications: tryFilenameOneCall(ls.getSemanticClassifications),\n            getSemanticClassifications: tryFilenameOneCall(ls.getSemanticClassifications),\n            getEncodedSyntacticClassifications: tryFilenameOneCall(ls.getEncodedSyntacticClassifications),\n            getEncodedSemanticClassifications: tryFilenameOneCall(ls.getEncodedSemanticClassifications),\n            getCompletionsAtPosition: tryFilenameTwoCall(ls.getCompletionsAtPosition),\n            getCompletionEntryDetails: tryFilenameFourCall(ls.getCompletionEntryDetails),\n            getCompletionEntrySymbol: tryFilenameThreeCall(ls.getCompletionEntrySymbol),\n            getQuickInfoAtPosition: tryFilenameOneCall(ls.getQuickInfoAtPosition),\n            getNameOrDottedNameSpan: tryFilenameTwoCall(ls.getNameOrDottedNameSpan),\n            getBreakpointStatementAtPosition: tryFilenameOneCall(ls.getBreakpointStatementAtPosition),\n            getSignatureHelpItems: tryFilenameOneCall(ls.getSignatureHelpItems),\n            getRenameInfo: tryFilenameOneCall(ls.getRenameInfo),\n            findRenameLocations: tryFilenameThreeCall(ls.findRenameLocations),\n            getDefinitionAtPosition: tryFilenameOneCall(ls.getDefinitionAtPosition),\n            getTypeDefinitionAtPosition: tryFilenameOneCall(ls.getTypeDefinitionAtPosition),\n            getImplementationAtPosition: tryFilenameOneCall(ls.getImplementationAtPosition),\n            getReferencesAtPosition: tryFilenameOneCall(ls.getReferencesAtPosition),\n            findReferences: tryFilenameOneCall(ls.findReferences),\n            getDocumentHighlights: tryFilenameTwoCall(ls.getDocumentHighlights),\n            /** @deprecated */\n            getOccurrencesAtPosition: tryFilenameOneCall(ls.getOccurrencesAtPosition),\n            getNavigateToItems: function (searchValue, maxResultCount, fileName, excludeDtsFiles) { return tryCall(fileName, function () { return ls.getNavigateToItems(searchValue, maxResultCount, fileName, excludeDtsFiles); }); },\n            getNavigationBarItems: tryFilenameCall(ls.getNavigationBarItems),\n            getNavigationTree: tryFilenameCall(ls.getNavigationTree),\n            getOutliningSpans: tryFilenameCall(ls.getOutliningSpans),\n            getTodoComments: tryFilenameOneCall(ls.getTodoComments),\n            getBraceMatchingAtPosition: tryFilenameOneCall(ls.getBraceMatchingAtPosition),\n            getIndentationAtPosition: tryFilenameTwoCall(ls.getIndentationAtPosition),\n            getFormattingEditsForRange: tryFilenameThreeCall(ls.getFormattingEditsForRange),\n            getFormattingEditsForDocument: tryFilenameOneCall(ls.getFormattingEditsForDocument),\n            getFormattingEditsAfterKeystroke: tryFilenameThreeCall(ls.getFormattingEditsAfterKeystroke),\n            getDocCommentTemplateAtPosition: tryFilenameOneCall(ls.getDocCommentTemplateAtPosition),\n            isValidBraceCompletionAtPosition: tryFilenameTwoCall(ls.isValidBraceCompletionAtPosition),\n            getSpanOfEnclosingComment: tryFilenameTwoCall(ls.getSpanOfEnclosingComment),\n            getCodeFixesAtPosition: tryFilenameFourCall(ls.getCodeFixesAtPosition),\n            applyCodeActionCommand: (function (action) { return tryCall(undefined, function () { return ls.applyCodeActionCommand(action); }); }),\n            getEmitOutput: tryFilenameCall(ls.getEmitOutput),\n            getProgram: function () { return ls.getProgram(); },\n            dispose: function () { return ls.dispose(); },\n            getApplicableRefactors: tryFilenameOneCall(ls.getApplicableRefactors),\n            getEditsForRefactor: tryFilenameFourCall(ls.getEditsForRefactor),\n            getDefinitionAndBoundSpan: tryFilenameOneCall(ls.getDefinitionAndBoundSpan),\n            getCombinedCodeFix: function (scope, fixId, formatOptions) {\n                return tryCall(undefined, function () { return ls.getCombinedCodeFix(scope, fixId, formatOptions); });\n            }\n        };\n    }\n    oldLS = typescriptOnly(oldLS);\n    var _loop_1 = function (k) {\n        proxy[k] = function () { return oldLS[k].apply(oldLS, arguments); };\n    };\n    for (var k in oldLS) {\n        _loop_1(k);\n    }\n    function completionToEntry(c) {\n        return {\n            // TODO: remove any and fix type error.\n            kind: c.kind,\n            name: c.name,\n            sortText: c.sort,\n            kindModifiers: ''\n        };\n    }\n    function diagnosticChainToDiagnosticChain(chain) {\n        return {\n            messageText: chain.message,\n            category: ts.DiagnosticCategory.Error,\n            code: 0,\n            next: chain.next ? diagnosticChainToDiagnosticChain(chain.next) : undefined\n        };\n    }\n    function diagnosticMessageToDiagnosticMessageText(message) {\n        if (typeof message === 'string') {\n            return message;\n        }\n        return diagnosticChainToDiagnosticChain(message);\n    }\n    function diagnosticToDiagnostic(d, file) {\n        var result = {\n            file: file,\n            start: d.span.start,\n            length: d.span.end - d.span.start,\n            messageText: diagnosticMessageToDiagnosticMessageText(d.message),\n            category: ts.DiagnosticCategory.Error,\n            code: 0,\n            source: 'ng'\n        };\n        return result;\n    }\n    function tryOperation(attempting, callback) {\n        try {\n            return callback();\n        }\n        catch (e) {\n            info.project.projectService.logger.info(\"Failed to \" + attempting + \": \" + e.toString());\n            info.project.projectService.logger.info(\"Stack trace: \" + e.stack);\n            return null;\n        }\n    }\n    var serviceHost = new TypeScriptServiceHost(info.languageServiceHost, info.languageService);\n    var ls = createLanguageService(serviceHost);\n    serviceHost.setSite(ls);\n    projectHostMap.set(info.project, serviceHost);\n    proxy.getCompletionsAtPosition = function (fileName, position, options) {\n        var base = oldLS.getCompletionsAtPosition(fileName, position, options) || {\n            isGlobalCompletion: false,\n            isMemberCompletion: false,\n            isNewIdentifierLocation: false,\n            entries: []\n        };\n        tryOperation('get completions', function () {\n            var results = ls.getCompletionsAt(fileName, position);\n            if (results && results.length) {\n                if (base === undefined) {\n                    base = {\n                        isGlobalCompletion: false,\n                        isMemberCompletion: false,\n                        isNewIdentifierLocation: false,\n                        entries: []\n                    };\n                }\n                for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {\n                    var entry = results_1[_i];\n                    base.entries.push(completionToEntry(entry));\n                }\n            }\n        });\n        return base;\n    };\n    proxy.getQuickInfoAtPosition = function (fileName, position) {\n        var base = oldLS.getQuickInfoAtPosition(fileName, position);\n        // TODO(vicb): the tags property has been removed in TS 2.2\n        tryOperation('get quick info', function () {\n            var ours = ls.getHoverAt(fileName, position);\n            if (ours) {\n                var displayParts = [];\n                for (var _i = 0, _a = ours.text; _i < _a.length; _i++) {\n                    var part = _a[_i];\n                    displayParts.push({ kind: part.language || 'angular', text: part.text });\n                }\n                var tags = base && base.tags;\n                base = {\n                    displayParts: displayParts,\n                    documentation: [],\n                    kind: 'angular',\n                    kindModifiers: 'what does this do?',\n                    textSpan: { start: ours.span.start, length: ours.span.end - ours.span.start },\n                };\n                if (tags) {\n                    base.tags = tags;\n                }\n            }\n        });\n        return base;\n    };\n    proxy.getSemanticDiagnostics = function (fileName) {\n        var result = oldLS.getSemanticDiagnostics(fileName);\n        var base = result || [];\n        tryOperation('get diagnostics', function () {\n            info.project.projectService.logger.info(\"Computing Angular semantic diagnostics...\");\n            var ours = ls.getDiagnostics(fileName);\n            if (ours && ours.length) {\n                var file_1 = oldLS.getProgram().getSourceFile(fileName);\n                if (file_1) {\n                    base.push.apply(base, ours.map(function (d) { return diagnosticToDiagnostic(d, file_1); }));\n                }\n            }\n        });\n        return base;\n    };\n    proxy.getDefinitionAtPosition = function (fileName, position) {\n        var base = oldLS.getDefinitionAtPosition(fileName, position);\n        if (base && base.length) {\n            return base;\n        }\n        return tryOperation('get definition', function () {\n            var ours = ls.getDefinitionAt(fileName, position);\n            if (ours && ours.length) {\n                base = base || [];\n                for (var _i = 0, ours_1 = ours; _i < ours_1.length; _i++) {\n                    var loc = ours_1[_i];\n                    base.push({\n                        fileName: loc.fileName,\n                        textSpan: { start: loc.span.start, length: loc.span.end - loc.span.start },\n                        name: '',\n                        // TODO: remove any and fix type error.\n                        kind: 'definition',\n                        containerName: loc.fileName,\n                        containerKind: 'file',\n                    });\n                }\n            }\n            return base;\n        }) || [];\n    };\n    return proxy;\n}\n//# sourceMappingURL=ts_plugin.js.map"]}