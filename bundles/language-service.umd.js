
var $deferred, $resolved, $provided;
function $getModule(name) { return $provided[name] || require(name); }
function define(modules, cb) { $deferred = { modules: modules, cb: cb }; }
module.exports = function(provided) {
  if ($resolved) return $resolved;
  var result = {};
  $provided = Object.assign({}, provided || {}, { exports: result });
  $deferred.cb.apply(this, $deferred.modules.map($getModule));
  $resolved = result;
  return result;
}

define(['exports', 'typescript', 'fs', 'path', 'reflect-metadata'], function (exports, ts, fs, path, reflectMetadata) { 'use strict';

  ts = 'default' in ts ? ts['default'] : ts;

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Creates a token that can be used in a DI Provider.
   *
   * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
   *
   * ```typescript
   * var t = new OpaqueToken("value");
   *
   * var injector = Injector.resolveAndCreate([
   *   {provide: t, useValue: "bindingValue"}
   * ]);
   *
   * expect(injector.get(t)).toEqual("bindingValue");
   * ```
   *
   * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
   * caused by multiple providers using the same string as two different tokens.
   *
   * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
   * error messages.
   * @deprecated since v4.0.0 because it does not support type information, use `InjectionToken<?>`
   * instead.
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ class OpaqueToken {
      constructor(_desc) {
          this._desc = _desc;
      }
      toString() { return `Token ${this._desc}`; }
  }
  /**
   * Creates a token that can be used in a DI Provider.
   *
   * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
   * runtime representation) such as when injecting an interface, callable type, array or
   * parametrized type.
   *
   * `InjectionToken` is parametrize on `T` which is the type of object which will be returned by the
   * `Injector`. This provides additional level of type safety.
   *
   * ```
   * interface MyInterface {...}
   * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
   * // myInterface is inferred to be MyInterface.
   * ```
   *
   * ### Example
   *
   * {@example core/di/ts/injector_spec.ts region='Injector'}
   *
   * @stable
   */
  class InjectionToken extends OpaqueToken {
      constructor(desc) { super(desc); }
      toString() { return `InjectionToken ${this._desc}`; }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  let globalScope;
  if (typeof window === 'undefined') {
      if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
          // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
          globalScope = self;
      }
      else {
          globalScope = global;
      }
  }
  else {
      globalScope = window;
  }
  function scheduleMicroTask(fn) {
      Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
  }
  // Need to declare a new variable for global here since TypeScript
  // exports the original value of the symbol.
  const global$1 = globalScope;
  function getTypeNameForDebugging(type) {
      return type['name'] || typeof type;
  }
  // TODO: remove calls to assert in production environment
  // Note: Can't just export this and import in in other files
  // as `assert` is a reserved keyword in Dart
  global$1.assert = function assert(condition) {
      // TODO: to be fixed properly via #2830, noop for now
  };
  function isPresent(obj) {
      return obj != null;
  }
  function isBlank(obj) {
      return obj == null;
  }
  function stringify(token) {
      if (typeof token === 'string') {
          return token;
      }
      if (token == null) {
          return '' + token;
      }
      if (token.overriddenName) {
          return `${token.overriddenName}`;
      }
      if (token.name) {
          return `${token.name}`;
      }
      const res = token.toString();
      const newLineIndex = res.indexOf('\n');
      return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  // JS has NaN !== NaN
  function looseIdentical(a, b) {
      return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
  }
  function isJsObject(o) {
      return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  function print(obj) {
      // tslint:disable-next-line:no-console
      console.log(obj);
  }
  function warn(obj) {
      console.warn(obj);
  }
  let _symbolIterator = null;
  function getSymbolIterator() {
      if (!_symbolIterator) {
          if (globalScope.Symbol && Symbol.iterator) {
              _symbolIterator = Symbol.iterator;
          }
          else {
              // es6-shim specific logic
              const keys = Object.getOwnPropertyNames(Map.prototype);
              for (let i = 0; i < keys.length; ++i) {
                  const key = keys[i];
                  if (key !== 'entries' && key !== 'size' &&
                      Map.prototype[key] === Map.prototype['entries']) {
                      _symbolIterator = key;
                  }
              }
          }
      }
      return _symbolIterator;
  }
  function isPrimitive(obj) {
      return !isJsObject(obj);
  }

  let _nextClassId = 0;
  const Reflect = global$1.Reflect;
  function extractAnnotation(annotation) {
      if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
          // it is a decorator, extract annotation
          annotation = annotation.annotation;
      }
      return annotation;
  }
  function applyParams(fnOrArray, key) {
      if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
          fnOrArray === Number || fnOrArray === Array) {
          throw new Error(`Can not use native ${stringify(fnOrArray)} as constructor`);
      }
      if (typeof fnOrArray === 'function') {
          return fnOrArray;
      }
      if (Array.isArray(fnOrArray)) {
          const annotations = fnOrArray;
          const annoLength = annotations.length - 1;
          const fn = fnOrArray[annoLength];
          if (typeof fn !== 'function') {
              throw new Error(`Last position of Class method array must be Function in key ${key} was '${stringify(fn)}'`);
          }
          if (annoLength != fn.length) {
              throw new Error(`Number of annotations (${annoLength}) does not match number of arguments (${fn.length}) in the function: ${stringify(fn)}`);
          }
          const paramsAnnotations = [];
          for (let i = 0, ii = annotations.length - 1; i < ii; i++) {
              const paramAnnotations = [];
              paramsAnnotations.push(paramAnnotations);
              const annotation = annotations[i];
              if (Array.isArray(annotation)) {
                  for (let j = 0; j < annotation.length; j++) {
                      paramAnnotations.push(extractAnnotation(annotation[j]));
                  }
              }
              else if (typeof annotation === 'function') {
                  paramAnnotations.push(extractAnnotation(annotation));
              }
              else {
                  paramAnnotations.push(annotation);
              }
          }
          Reflect.defineMetadata('parameters', paramsAnnotations, fn);
          return fn;
      }
      throw new Error(`Only Function or Array is supported in Class definition for key '${key}' is '${stringify(fnOrArray)}'`);
  }
  /**
   * Provides a way for expressing ES6 classes with parameter annotations in ES5.
   *
   * ## Basic Example
   *
   * ```
   * var Greeter = ng.Class({
   *   constructor: function(name) {
   *     this.name = name;
   *   },
   *
   *   greet: function() {
   *     alert('Hello ' + this.name + '!');
   *   }
   * });
   * ```
   *
   * is equivalent to ES6:
   *
   * ```
   * class Greeter {
   *   constructor(name) {
   *     this.name = name;
   *   }
   *
   *   greet() {
   *     alert('Hello ' + this.name + '!');
   *   }
   * }
   * ```
   *
   * or equivalent to ES5:
   *
   * ```
   * var Greeter = function (name) {
   *   this.name = name;
   * }
   *
   * Greeter.prototype.greet = function () {
   *   alert('Hello ' + this.name + '!');
   * }
   * ```
   *
   * ### Example with parameter annotations
   *
   * ```
   * var MyService = ng.Class({
   *   constructor: [String, [new Optional(), Service], function(name, myService) {
   *     ...
   *   }]
   * });
   * ```
   *
   * is equivalent to ES6:
   *
   * ```
   * class MyService {
   *   constructor(name: string, @Optional() myService: Service) {
   *     ...
   *   }
   * }
   * ```
   *
   * ### Example with inheritance
   *
   * ```
   * var Shape = ng.Class({
   *   constructor: (color) {
   *     this.color = color;
   *   }
   * });
   *
   * var Square = ng.Class({
   *   extends: Shape,
   *   constructor: function(color, size) {
   *     Shape.call(this, color);
   *     this.size = size;
   *   }
   * });
   * ```
   * @suppress {globalThis}
   * @stable
   */
  function Class(clsDef) {
      const constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
      let proto = constructor.prototype;
      if (clsDef.hasOwnProperty('extends')) {
          if (typeof clsDef.extends === 'function') {
              constructor.prototype = proto =
                  Object.create(clsDef.extends.prototype);
          }
          else {
              throw new Error(`Class definition 'extends' property must be a constructor function was: ${stringify(clsDef.extends)}`);
          }
      }
      for (const key in clsDef) {
          if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
              proto[key] = applyParams(clsDef[key], key);
          }
      }
      if (this && this.annotations instanceof Array) {
          Reflect.defineMetadata('annotations', this.annotations, constructor);
      }
      const constructorName = constructor['name'];
      if (!constructorName || constructorName === 'constructor') {
          constructor['overriddenName'] = `class${_nextClassId++}`;
      }
      return constructor;
  }
  /**
   * @suppress {globalThis}
   */
  function makeDecorator(name, props, parentClass, chainFn = null) {
      const metaCtor = makeMetadataCtor([props]);
      function DecoratorFactory(objOrType) {
          if (!(Reflect && Reflect.getOwnMetadata)) {
              throw 'reflect-metadata shim is required when using class decorators';
          }
          if (this instanceof DecoratorFactory) {
              metaCtor.call(this, objOrType);
              return this;
          }
          const annotationInstance = new DecoratorFactory(objOrType);
          const chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
          chainAnnotation.push(annotationInstance);
          const TypeDecorator = function TypeDecorator(cls) {
              const annotations = Reflect.getOwnMetadata('annotations', cls) || [];
              annotations.push(annotationInstance);
              Reflect.defineMetadata('annotations', annotations, cls);
              return cls;
          };
          TypeDecorator.annotations = chainAnnotation;
          TypeDecorator.Class = Class;
          if (chainFn)
              chainFn(TypeDecorator);
          return TypeDecorator;
      }
      if (parentClass) {
          DecoratorFactory.prototype = Object.create(parentClass.prototype);
      }
      DecoratorFactory.prototype.toString = () => `@${name}`;
      DecoratorFactory.annotationCls = DecoratorFactory;
      return DecoratorFactory;
  }
  function makeMetadataCtor(props) {
      return function ctor(...args) {
          props.forEach((prop, i) => {
              const argVal = args[i];
              if (Array.isArray(prop)) {
                  // plain parameter
                  this[prop[0]] = argVal === undefined ? prop[1] : argVal;
              }
              else {
                  for (const propName in prop) {
                      this[propName] =
                          argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
                  }
              }
          });
      };
  }
  function makeParamDecorator(name, props, parentClass) {
      const metaCtor = makeMetadataCtor(props);
      function ParamDecoratorFactory(...args) {
          if (this instanceof ParamDecoratorFactory) {
              metaCtor.apply(this, args);
              return this;
          }
          const annotationInstance = new ParamDecoratorFactory(...args);
          ParamDecorator.annotation = annotationInstance;
          return ParamDecorator;
          function ParamDecorator(cls, unusedKey, index) {
              const parameters = Reflect.getOwnMetadata('parameters', cls) || [];
              // there might be gaps if some in between parameters do not have annotations.
              // we pad with nulls.
              while (parameters.length <= index) {
                  parameters.push(null);
              }
              parameters[index] = parameters[index] || [];
              parameters[index].push(annotationInstance);
              Reflect.defineMetadata('parameters', parameters, cls);
              return cls;
          }
      }
      if (parentClass) {
          ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
      }
      ParamDecoratorFactory.prototype.toString = () => `@${name}`;
      ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
      return ParamDecoratorFactory;
  }
  function makePropDecorator(name, props, parentClass) {
      const metaCtor = makeMetadataCtor(props);
      function PropDecoratorFactory(...args) {
          if (this instanceof PropDecoratorFactory) {
              metaCtor.apply(this, args);
              return this;
          }
          const decoratorInstance = new PropDecoratorFactory(...args);
          return function PropDecorator(target, name) {
              const meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
              meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
              meta[name].unshift(decoratorInstance);
              Reflect.defineMetadata('propMetadata', meta, target.constructor);
          };
      }
      if (parentClass) {
          PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
      }
      PropDecoratorFactory.prototype.toString = () => `@${name}`;
      PropDecoratorFactory.annotationCls = PropDecoratorFactory;
      return PropDecoratorFactory;
  }

  /**
   * This token can be used to create a virtual provider that will populate the
   * `entryComponents` fields of components and ng modules based on its `useValue`.
   * All components that are referenced in the `useValue` value (either directly
   * or in a nested array or map) will be added to the `entryComponents` property.
   *
   * ### Example
   * The following example shows how the router can populate the `entryComponents`
   * field of an NgModule based on the router configuration which refers
   * to components.
   *
   * ```typescript
   * // helper function inside the router
   * function provideRoutes(routes) {
   *   return [
   *     {provide: ROUTES, useValue: routes},
   *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
   *   ];
   * }
   *
   * // user code
   * let routes = [
   *   {path: '/root', component: RootComp},
   *   {path: '/teams', component: TeamsComp}
   * ];
   *
   * @NgModule({
   *   providers: [provideRoutes(routes)]
   * })
   * class ModuleWithRoutes {}
   * ```
   *
   * @experimental
   */
  const ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');
  /**
   * Attribute decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
  /**
   * Base class for query metadata.
   *
   * See {@link ContentChildren}, {@link ContentChild}, {@link ViewChildren}, {@link ViewChild} for
   * more information.
   *
   * @stable
   */
  class Query {
  }
  /**
   * ContentChildren decorator and metadata.
   *
   *  @stable
   *  @Annotation
   */
  const ContentChildren = makePropDecorator('ContentChildren', [
      ['selector', undefined], {
          first: false,
          isViewQuery: false,
          descendants: false,
          read: undefined,
      }
  ], Query);
  /**
   * ContentChild decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const ContentChild = makePropDecorator('ContentChild', [
      ['selector', undefined], {
          first: true,
          isViewQuery: false,
          descendants: true,
          read: undefined,
      }
  ], Query);
  /**
   * ViewChildren decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const ViewChildren = makePropDecorator('ViewChildren', [
      ['selector', undefined], {
          first: false,
          isViewQuery: true,
          descendants: true,
          read: undefined,
      }
  ], Query);
  /**
   * ViewChild decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const ViewChild = makePropDecorator('ViewChild', [
      ['selector', undefined], {
          first: true,
          isViewQuery: true,
          descendants: true,
          read: undefined,
      }
  ], Query);

  /**
   * Describes within the change detector which strategy will be used the next time change
   * detection is triggered.
   * @stable
   */
  var ChangeDetectionStrategy;
  (function (ChangeDetectionStrategy) {
      /**
       * `OnPush` means that the change detector's mode will be set to `CheckOnce` during hydration.
       */
      ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
      /**
       * `Default` means that the change detector's mode will be set to `CheckAlways` during hydration.
       */
      ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
  })(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
  /**
   * Describes the status of the detector.
   */
  var ChangeDetectorStatus;
  (function (ChangeDetectorStatus) {
      /**
       * `CheckOnce` means that after calling detectChanges the mode of the change detector
       * will become `Checked`.
       */
      ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
      /**
       * `Checked` means that the change detector should be skipped until its mode changes to
       * `CheckOnce`.
       */
      ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
      /**
       * `CheckAlways` means that after calling detectChanges the mode of the change detector
       * will remain `CheckAlways`.
       */
      ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
      /**
       * `Detached` means that the change detector sub tree is not a part of the main tree and
       * should be skipped.
       */
      ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
      /**
       * `Errored` means that the change detector encountered an error checking a binding
       * or calling a directive lifecycle method and is now in an inconsistent state. Change
       * detectors in this state will no longer detect changes.
       */
      ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
      /**
       * `Destroyed` means that the change detector is destroyed.
       */
      ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
  })(ChangeDetectorStatus || (ChangeDetectorStatus = {}));
  function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
      return isBlank(changeDetectionStrategy) ||
          changeDetectionStrategy === ChangeDetectionStrategy.Default;
  }

  /**
   * Directive decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const Directive = makeDecorator('Directive', {
      selector: undefined,
      inputs: undefined,
      outputs: undefined,
      host: undefined,
      providers: undefined,
      exportAs: undefined,
      queries: undefined
  });
  /**
   * Component decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const Component = makeDecorator('Component', {
      selector: undefined,
      inputs: undefined,
      outputs: undefined,
      host: undefined,
      exportAs: undefined,
      moduleId: undefined,
      providers: undefined,
      viewProviders: undefined,
      changeDetection: ChangeDetectionStrategy.Default,
      queries: undefined,
      templateUrl: undefined,
      template: undefined,
      styleUrls: undefined,
      styles: undefined,
      animations: undefined,
      encapsulation: undefined,
      interpolation: undefined,
      entryComponents: undefined
  }, Directive);
  /**
   * Pipe decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const Pipe = makeDecorator('Pipe', {
      name: undefined,
      pure: true,
  });
  /**
   * Input decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
  /**
   * Output decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
  /**
   * HostBinding decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
  /**
   * HostListener decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);

  /**
   * Defines a schema that will allow:
   * - any non-Angular elements with a `-` in their name,
   * - any properties on elements with a `-` in their name which is the common rule for custom
   * elements.
   *
   * @stable
   */
  const CUSTOM_ELEMENTS_SCHEMA = {
      name: 'custom-elements'
  };
  /**
   * Defines a schema that will allow any property on any element.
   *
   * @experimental
   */
  const NO_ERRORS_SCHEMA = {
      name: 'no-errors-schema'
  };
  /**
   * NgModule decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const NgModule = makeDecorator('NgModule', {
      providers: undefined,
      declarations: undefined,
      imports: undefined,
      exports: undefined,
      entryComponents: undefined,
      bootstrap: undefined,
      schemas: undefined,
      id: undefined,
  });

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Defines template and style encapsulation options available for Component's {@link Component}.
   *
   * See {@link ViewMetadata#encapsulation}.
   * @stable
   */
  var ViewEncapsulation;
  (function (ViewEncapsulation) {
      /**
       * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
       * Element and pre-processing the style rules provided via
       * {@link ViewMetadata#styles} or {@link ViewMetadata#stylesUrls}, and adding the new Host Element
       * attribute to all selectors.
       *
       * This is the default option.
       */
      ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
      /**
       * Use the native encapsulation mechanism of the renderer.
       *
       * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
       * creating a ShadowRoot for Component's Host Element.
       */
      ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
      /**
       * Don't provide any template or style encapsulation.
       */
      ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
  })(ViewEncapsulation || (ViewEncapsulation = {}));

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * @whatItDoes Represents the version of Angular
   *
   * @stable
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ class Version {
      constructor(full) {
          this.full = full;
      }
      get major() { return this.full.split('.')[0]; }
      get minor() { return this.full.split('.')[1]; }
      get patch() { return this.full.split('.').slice(2).join('.'); }
  }
  /**
   * @stable
   */
  const VERSION$1 = new Version('4.0.0-beta.8-1f3198c');

  /**
   * Inject decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const Inject = makeParamDecorator('Inject', [['token', undefined]]);
  /**
   * Optional decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const Optional = makeParamDecorator('Optional', []);
  /**
   * Injectable decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const Injectable = makeDecorator('Injectable', []);
  /**
   * Self decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const Self = makeParamDecorator('Self', []);
  /**
   * SkipSelf decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const SkipSelf = makeParamDecorator('SkipSelf', []);
  /**
   * Host decorator and metadata.
   *
   * @stable
   * @Annotation
   */
  const Host = makeParamDecorator('Host', []);

  /**
   * Allows to refer to references which are not yet defined.
   *
   * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
   * DI is declared,
   * but not yet defined. It is also used when the `token` which we use when creating a query is not
   * yet defined.
   *
   * ### Example
   * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
   * @experimental
   */
  function forwardRef(forwardRefFn) {
      forwardRefFn.__forward_ref__ = forwardRef;
      forwardRefFn.toString = function () { return stringify(this()); };
      return forwardRefFn;
  }
  /**
   * Lazily retrieves the reference value from a forwardRef.
   *
   * Acts as the identity function when given a non-forward-ref value.
   *
   * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
   *
   * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
   *
   * See: {@link forwardRef}
   * @experimental
   */
  function resolveForwardRef(type) {
      if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
          type.__forward_ref__ === forwardRef) {
          return type();
      }
      else {
          return type;
      }
  }

  const _THROW_IF_NOT_FOUND = new Object();
  const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
  class _NullInjector {
      get(token, notFoundValue = _THROW_IF_NOT_FOUND) {
          if (notFoundValue === _THROW_IF_NOT_FOUND) {
              throw new Error(`No provider for ${stringify(token)}!`);
          }
          return notFoundValue;
      }
  }
  /**
   * @whatItDoes Injector interface
   * @howToUse
   * ```
   * const injector: Injector = ...;
   * injector.get(...);
   * ```
   *
   * @description
   * For more details, see the {@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
   *
   * ### Example
   *
   * {@example core/di/ts/injector_spec.ts region='Injector'}
   *
   * `Injector` returns itself when given `Injector` as a token:
   * {@example core/di/ts/injector_spec.ts region='injectInjector'}
   *
   * @stable
   */
  class Injector {
  }
  Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
  Injector.NULL = new _NullInjector();

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const ERROR_TYPE = 'ngType';
  const ɵERROR_COMPONENT_TYPE = 'ngComponentType';
  const ERROR_DEBUG_CONTEXT = 'ngDebugContext';
  const ERROR_ORIGINAL_ERROR = 'ngOriginalError';
  function getType(error) {
      return error[ERROR_TYPE];
  }
  function getDebugContext(error) {
      return error[ERROR_DEBUG_CONTEXT];
  }
  function getOriginalError(error) {
      return error[ERROR_ORIGINAL_ERROR];
  }

  /**
   * @whatItDoes Provides a hook for centralized exception handling.
   *
   * @description
   *
   * The default implementation of `ErrorHandler` prints error messages to the `console`. To
   * intercept error handling, write a custom exception handler that replaces this default as
   * appropriate for your app.
   *
   * ### Example
   *
   * ```
   * class MyErrorHandler implements ErrorHandler {
   *   handleError(error) {
   *     // do something with the exception
   *   }
   * }
   *
   * @NgModule({
   *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
   * })
   * class MyModule {}
   * ```
   *
   * @stable
   */
  class ErrorHandler {
      constructor(rethrowError = true) {
          /**
           * @internal
           */
          this._console = console;
          this.rethrowError = rethrowError;
      }
      handleError(error) {
          this._console.error(`EXCEPTION: ${this._extractMessage(error)}`);
          if (error instanceof Error) {
              const originalError = this._findOriginalError(error);
              const originalStack = this._findOriginalStack(error);
              const context = this._findContext(error);
              if (originalError) {
                  this._console.error(`ORIGINAL EXCEPTION: ${this._extractMessage(originalError)}`);
              }
              if (originalStack) {
                  this._console.error('ORIGINAL STACKTRACE:');
                  this._console.error(originalStack);
              }
              if (context) {
                  this._console.error('ERROR CONTEXT:');
                  this._console.error(context);
              }
          }
          // We rethrow exceptions, so operations like 'bootstrap' will result in an error
          // when an error happens. If we do not rethrow, bootstrap will always succeed.
          if (this.rethrowError)
              throw error;
      }
      /** @internal */
      _extractMessage(error) {
          return error instanceof Error ? error.message : error.toString();
      }
      /** @internal */
      _findContext(error) {
          if (error) {
              return getDebugContext(error) ? getDebugContext(error) :
                  this._findContext(getOriginalError(error));
          }
          return null;
      }
      /** @internal */
      _findOriginalError(error) {
          let e = getOriginalError(error);
          while (e && getOriginalError(e)) {
              e = getOriginalError(e);
          }
          return e;
      }
      /** @internal */
      _findOriginalStack(error) {
          let e = error;
          let stack = e.stack;
          while (e instanceof Error && getOriginalError(e)) {
              e = getOriginalError(e);
              if (e instanceof Error && e.stack) {
                  stack = e.stack;
              }
          }
          return stack;
      }
  }
  function wrappedError(message, originalError) {
      const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;
      const error = Error(msg);
      error[ERROR_ORIGINAL_ERROR] = originalError;
      return error;
  }

  function findFirstClosedCycle(keys) {
      const res = [];
      for (let i = 0; i < keys.length; ++i) {
          if (res.indexOf(keys[i]) > -1) {
              res.push(keys[i]);
              return res;
          }
          res.push(keys[i]);
      }
      return res;
  }
  function constructResolvingPath(keys) {
      if (keys.length > 1) {
          const reversed = findFirstClosedCycle(keys.slice().reverse());
          const tokenStrs = reversed.map(k => stringify(k.token));
          return ' (' + tokenStrs.join(' -> ') + ')';
      }
      return '';
  }
  function injectionError(injector, key, constructResolvingMessage, originalError) {
      const error = (originalError ? wrappedError('', originalError) : Error());
      error.addKey = addKey;
      error.keys = [key];
      error.injectors = [injector];
      error.constructResolvingMessage = constructResolvingMessage;
      error.message = error.constructResolvingMessage();
      error[ERROR_ORIGINAL_ERROR] = originalError;
      return error;
  }
  function addKey(injector, key) {
      this.injectors.push(injector);
      this.keys.push(key);
      this.message = this.constructResolvingMessage();
  }
  /**
   * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the
   * {@link Injector} does not have a {@link Provider} for the given key.
   *
   * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
   *
   * ```typescript
   * class A {
   *   constructor(b:B) {}
   * }
   *
   * expect(() => Injector.resolveAndCreate([A])).toThrowError();
   * ```
   */
  function noProviderError(injector, key) {
      return injectionError(injector, key, function () {
          const first = stringify(this.keys[0].token);
          return `No provider for ${first}!${constructResolvingPath(this.keys)}`;
      });
  }
  /**
   * Thrown when dependencies form a cycle.
   *
   * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
   *
   * ```typescript
   * var injector = Injector.resolveAndCreate([
   *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
   *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
   * ]);
   *
   * expect(() => injector.get("one")).toThrowError();
   * ```
   *
   * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
   */
  function cyclicDependencyError(injector, key) {
      return injectionError(injector, key, function () {
          return `Cannot instantiate cyclic dependency!${constructResolvingPath(this.keys)}`;
      });
  }
  /**
   * Thrown when a constructing type returns with an Error.
   *
   * The `InstantiationError` class contains the original error plus the dependency graph which caused
   * this object to be instantiated.
   *
   * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
   *
   * ```typescript
   * class A {
   *   constructor() {
   *     throw new Error('message');
   *   }
   * }
   *
   * var injector = Injector.resolveAndCreate([A]);

   * try {
   *   injector.get(A);
   * } catch (e) {
   *   expect(e instanceof InstantiationError).toBe(true);
   *   expect(e.originalException.message).toEqual("message");
   *   expect(e.originalStack).toBeDefined();
   * }
   * ```
   */
  function instantiationError(injector, originalException, originalStack, key) {
      return injectionError(injector, key, function () {
          const first = stringify(this.keys[0].token);
          return `${getOriginalError(this).message}: Error during instantiation of ${first}!${constructResolvingPath(this.keys)}.`;
      }, originalException);
  }
  /**
   * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
   * creation.
   *
   * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
   *
   * ```typescript
   * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
   * ```
   */
  function invalidProviderError(provider) {
      return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);
  }
  /**
   * Thrown when the class has no annotation information.
   *
   * Lack of annotation information prevents the {@link Injector} from determining which dependencies
   * need to be injected into the constructor.
   *
   * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
   *
   * ```typescript
   * class A {
   *   constructor(b) {}
   * }
   *
   * expect(() => Injector.resolveAndCreate([A])).toThrowError();
   * ```
   *
   * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
   *
   * ```typescript
   * class B {}
   *
   * class A {
   *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
   * }
   *
   * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
   * ```
   * @stable
   */
  function noAnnotationError(typeOrFunc, params) {
      const signature = [];
      for (let i = 0, ii = params.length; i < ii; i++) {
          const parameter = params[i];
          if (!parameter || parameter.length == 0) {
              signature.push('?');
          }
          else {
              signature.push(parameter.map(stringify).join(' '));
          }
      }
      return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
          signature.join(', ') + '). ' +
          'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
          stringify(typeOrFunc) + '\' is decorated with Injectable.');
  }
  /**
   * Thrown when getting an object by index.
   *
   * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
   *
   * ```typescript
   * class A {}
   *
   * var injector = Injector.resolveAndCreate([A]);
   *
   * expect(() => injector.getAt(100)).toThrowError();
   * ```
   * @stable
   */
  function outOfBoundsError(index) {
      return Error(`Index ${index} is out-of-bounds.`);
  }
  // TODO: add a working example after alpha38 is released
  /**
   * Thrown when a multi provider and a regular provider are bound to the same token.
   *
   * ### Example
   *
   * ```typescript
   * expect(() => Injector.resolveAndCreate([
   *   { provide: "Strings", useValue: "string1", multi: true},
   *   { provide: "Strings", useValue: "string2", multi: false}
   * ])).toThrowError();
   * ```
   */
  function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
      return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);
  }

  /**
   * A unique object used for retrieving items from the {@link ReflectiveInjector}.
   *
   * Keys have:
   * - a system-wide unique `id`.
   * - a `token`.
   *
   * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
   * the
   * injector to store created objects in a more efficient way.
   *
   * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
   * resolving
   * providers.
   * @experimental
   */
  class ReflectiveKey {
      /**
       * Private
       */
      constructor(token, id) {
          this.token = token;
          this.id = id;
          if (!token) {
              throw new Error('Token must be defined!');
          }
      }
      /**
       * Returns a stringified token.
       */
      get displayName() { return stringify(this.token); }
      /**
       * Retrieves a `Key` for a token.
       */
      static get(token) {
          return _globalKeyRegistry.get(resolveForwardRef(token));
      }
      /**
       * @returns the number of keys registered in the system.
       */
      static get numberOfKeys() { return _globalKeyRegistry.numberOfKeys; }
  }
  /**
   * @internal
   */
  class KeyRegistry {
      constructor() {
          this._allKeys = new Map();
      }
      get(token) {
          if (token instanceof ReflectiveKey)
              return token;
          if (this._allKeys.has(token)) {
              return this._allKeys.get(token);
          }
          const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
          this._allKeys.set(token, newKey);
          return newKey;
      }
      get numberOfKeys() { return this._allKeys.size; }
  }
  const _globalKeyRegistry = new KeyRegistry();

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * @whatItDoes Represents a type that a Component or other object is instances of.
   *
   * @description
   *
   * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
   * the `MyCustomComponent` constructor function.
   *
   * @stable
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ const Type = Function;
  function isType(v) {
      return typeof v === 'function';
  }

  /**
   * Attention: This regex has to hold even if the code is minified!
   */
  const DELEGATE_CTOR = /^function\s+\S+\(\)\s*{\s*("use strict";)?\s*(return\s+)?(\S+\s+!==\s+null\s+&&\s+)?\S+\.apply\(this,\s*arguments\)/;
  class ReflectionCapabilities {
      constructor(reflect) { this._reflect = reflect || global$1.Reflect; }
      isReflectionEnabled() { return true; }
      factory(t) { return (...args) => new t(...args); }
      /** @internal */
      _zipTypesAndAnnotations(paramTypes, paramAnnotations) {
          let result;
          if (typeof paramTypes === 'undefined') {
              result = new Array(paramAnnotations.length);
          }
          else {
              result = new Array(paramTypes.length);
          }
          for (let i = 0; i < result.length; i++) {
              // TS outputs Object for parameters without types, while Traceur omits
              // the annotations. For now we preserve the Traceur behavior to aid
              // migration, but this can be revisited.
              if (typeof paramTypes === 'undefined') {
                  result[i] = [];
              }
              else if (paramTypes[i] != Object) {
                  result[i] = [paramTypes[i]];
              }
              else {
                  result[i] = [];
              }
              if (paramAnnotations && isPresent(paramAnnotations[i])) {
                  result[i] = result[i].concat(paramAnnotations[i]);
              }
          }
          return result;
      }
      _ownParameters(type, parentCtor) {
          // If we have no decorators, we only have function.length as metadata.
          // In that case, to detect whether a child class declared an own constructor or not,
          // we need to look inside of that constructor to check whether it is
          // just calling the parent.
          // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
          // that sets 'design:paramtypes' to []
          // if a class inherits from another class but has no ctor declared itself.
          if (DELEGATE_CTOR.exec(type.toString())) {
              return null;
          }
          // Prefer the direct API.
          if (type.parameters && type.parameters !== parentCtor.parameters) {
              return type.parameters;
          }
          // API of tsickle for lowering decorators to properties on the class.
          const tsickleCtorParams = type.ctorParameters;
          if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
              // Newer tsickle uses a function closure
              // Retain the non-function case for compatibility with older tsickle
              const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
              const paramTypes = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);
              const paramAnnotations = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));
              return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
          }
          // API for metadata created by invoking the decorators.
          if (isPresent(this._reflect) && isPresent(this._reflect.getOwnMetadata)) {
              const paramAnnotations = this._reflect.getOwnMetadata('parameters', type);
              const paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);
              if (paramTypes || paramAnnotations) {
                  return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
              }
          }
          // If a class has no decorators, at least create metadata
          // based on function.length.
          // Note: We know that this is a real constructor as we checked
          // the content of the constructor above.
          return new Array(type.length).fill(undefined);
      }
      parameters(type) {
          // Note: only report metadata if we have at least one class decorator
          // to stay in sync with the static reflector.
          if (!isType(type)) {
              return [];
          }
          const parentCtor = getParentCtor(type);
          let parameters = this._ownParameters(type, parentCtor);
          if (!parameters && parentCtor !== Object) {
              parameters = this.parameters(parentCtor);
          }
          return parameters || [];
      }
      _ownAnnotations(typeOrFunc, parentCtor) {
          // Prefer the direct API.
          if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
              let annotations = typeOrFunc.annotations;
              if (typeof annotations === 'function' && annotations.annotations) {
                  annotations = annotations.annotations;
              }
              return annotations;
          }
          // API of tsickle for lowering decorators to properties on the class.
          if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
              return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
          }
          // API for metadata created by invoking the decorators.
          if (this._reflect && this._reflect.getOwnMetadata) {
              return this._reflect.getOwnMetadata('annotations', typeOrFunc);
          }
      }
      annotations(typeOrFunc) {
          if (!isType(typeOrFunc)) {
              return [];
          }
          const parentCtor = getParentCtor(typeOrFunc);
          const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
          const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
          return parentAnnotations.concat(ownAnnotations);
      }
      _ownPropMetadata(typeOrFunc, parentCtor) {
          // Prefer the direct API.
          if (typeOrFunc.propMetadata &&
              typeOrFunc.propMetadata !== parentCtor.propMetadata) {
              let propMetadata = typeOrFunc.propMetadata;
              if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
                  propMetadata = propMetadata.propMetadata;
              }
              return propMetadata;
          }
          // API of tsickle for lowering decorators to properties on the class.
          if (typeOrFunc.propDecorators &&
              typeOrFunc.propDecorators !== parentCtor.propDecorators) {
              const propDecorators = typeOrFunc.propDecorators;
              const propMetadata = {};
              Object.keys(propDecorators).forEach(prop => {
                  propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);
              });
              return propMetadata;
          }
          // API for metadata created by invoking the decorators.
          if (this._reflect && this._reflect.getOwnMetadata) {
              return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);
          }
      }
      propMetadata(typeOrFunc) {
          if (!isType(typeOrFunc)) {
              return {};
          }
          const parentCtor = getParentCtor(typeOrFunc);
          const propMetadata = {};
          if (parentCtor !== Object) {
              const parentPropMetadata = this.propMetadata(parentCtor);
              Object.keys(parentPropMetadata).forEach((propName) => {
                  propMetadata[propName] = parentPropMetadata[propName];
              });
          }
          const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
          if (ownPropMetadata) {
              Object.keys(ownPropMetadata).forEach((propName) => {
                  const decorators = [];
                  if (propMetadata.hasOwnProperty(propName)) {
                      decorators.push(...propMetadata[propName]);
                  }
                  decorators.push(...ownPropMetadata[propName]);
                  propMetadata[propName] = decorators;
              });
          }
          return propMetadata;
      }
      hasLifecycleHook(type, lcProperty) {
          return type instanceof Type && lcProperty in type.prototype;
      }
      getter(name) { return new Function('o', 'return o.' + name + ';'); }
      setter(name) {
          return new Function('o', 'v', 'return o.' + name + ' = v;');
      }
      method(name) {
          const functionBody = `if (!o.${name}) throw new Error('"${name}" is undefined');
        return o.${name}.apply(o, args);`;
          return new Function('o', 'args', functionBody);
      }
      // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
      importUri(type) {
          // StaticSymbol
          if (typeof type === 'object' && type['filePath']) {
              return type['filePath'];
          }
          // Runtime type
          return `./${stringify(type)}`;
      }
      resolveIdentifier(name, moduleUrl, members, runtime) {
          return runtime;
      }
      resolveEnum(enumIdentifier, name) { return enumIdentifier[name]; }
  }
  function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
      if (!decoratorInvocations) {
          return [];
      }
      return decoratorInvocations.map(decoratorInvocation => {
          const decoratorType = decoratorInvocation.type;
          const annotationCls = decoratorType.annotationCls;
          const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
          return new annotationCls(...annotationArgs);
      });
  }
  function getParentCtor(ctor) {
      const parentProto = Object.getPrototypeOf(ctor.prototype);
      const parentCtor = parentProto ? parentProto.constructor : null;
      // Note: We always use `Object` as the null value
      // to simplify checking later on.
      return parentCtor || Object;
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Provides read-only access to reflection data about symbols. Used internally by Angular
   * to power dependency injection and compilation.
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ class ReflectorReader {
  }

  /**
   * Provides access to reflection data about symbols. Used internally by Angular
   * to power dependency injection and compilation.
   */
  class Reflector extends ReflectorReader {
      constructor(reflectionCapabilities) {
          super();
          this.reflectionCapabilities = reflectionCapabilities;
      }
      updateCapabilities(caps) { this.reflectionCapabilities = caps; }
      factory(type) { return this.reflectionCapabilities.factory(type); }
      parameters(typeOrFunc) {
          return this.reflectionCapabilities.parameters(typeOrFunc);
      }
      annotations(typeOrFunc) {
          return this.reflectionCapabilities.annotations(typeOrFunc);
      }
      propMetadata(typeOrFunc) {
          return this.reflectionCapabilities.propMetadata(typeOrFunc);
      }
      hasLifecycleHook(type, lcProperty) {
          return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
      }
      getter(name) { return this.reflectionCapabilities.getter(name); }
      setter(name) { return this.reflectionCapabilities.setter(name); }
      method(name) { return this.reflectionCapabilities.method(name); }
      importUri(type) { return this.reflectionCapabilities.importUri(type); }
      resolveIdentifier(name, moduleUrl, members, runtime) {
          return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
      }
      resolveEnum(identifier, name) {
          return this.reflectionCapabilities.resolveEnum(identifier, name);
      }
  }

  /**
   * The {@link Reflector} used internally in Angular to access metadata
   * about symbols.
   */
  const reflector = new Reflector(new ReflectionCapabilities());

  /**
   * `Dependency` is used by the framework to extend DI.
   * This is internal to Angular and should not be used directly.
   */
  class ReflectiveDependency {
      constructor(key, optional, visibility) {
          this.key = key;
          this.optional = optional;
          this.visibility = visibility;
      }
      static fromKey(key) {
          return new ReflectiveDependency(key, false, null);
      }
  }
  const _EMPTY_LIST = [];
  class ResolvedReflectiveProvider_ {
      constructor(key, resolvedFactories, multiProvider) {
          this.key = key;
          this.resolvedFactories = resolvedFactories;
          this.multiProvider = multiProvider;
      }
      get resolvedFactory() { return this.resolvedFactories[0]; }
  }
  /**
   * An internal resolved representation of a factory function created by resolving {@link
   * Provider}.
   * @experimental
   */
  class ResolvedReflectiveFactory {
      constructor(
          /**
           * Factory function which can return an instance of an object represented by a key.
           */
          factory, 
          /**
           * Arguments (dependencies) to the `factory` function.
           */
          dependencies) {
          this.factory = factory;
          this.dependencies = dependencies;
      }
  }
  /**
   * Resolve a single provider.
   */
  function resolveReflectiveFactory(provider) {
      let factoryFn;
      let resolvedDeps;
      if (provider.useClass) {
          const useClass = resolveForwardRef(provider.useClass);
          factoryFn = reflector.factory(useClass);
          resolvedDeps = _dependenciesFor(useClass);
      }
      else if (provider.useExisting) {
          factoryFn = (aliasInstance) => aliasInstance;
          resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
      }
      else if (provider.useFactory) {
          factoryFn = provider.useFactory;
          resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
      }
      else {
          factoryFn = () => provider.useValue;
          resolvedDeps = _EMPTY_LIST;
      }
      return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
  }
  /**
   * Converts the {@link Provider} into {@link ResolvedProvider}.
   *
   * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains
   * convenience provider syntax.
   */
  function resolveReflectiveProvider(provider) {
      return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
  }
  /**
   * Resolve a list of Providers.
   */
  function resolveReflectiveProviders(providers) {
      const normalized = _normalizeProviders(providers, []);
      const resolved = normalized.map(resolveReflectiveProvider);
      const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
      return Array.from(resolvedProviderMap.values());
  }
  /**
   * Merges a list of ResolvedProviders into a list where
   * each key is contained exactly once and multi providers
   * have been merged.
   */
  function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
      for (let i = 0; i < providers.length; i++) {
          const provider = providers[i];
          const existing = normalizedProvidersMap.get(provider.key.id);
          if (existing) {
              if (provider.multiProvider !== existing.multiProvider) {
                  throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
              }
              if (provider.multiProvider) {
                  for (let j = 0; j < provider.resolvedFactories.length; j++) {
                      existing.resolvedFactories.push(provider.resolvedFactories[j]);
                  }
              }
              else {
                  normalizedProvidersMap.set(provider.key.id, provider);
              }
          }
          else {
              let resolvedProvider;
              if (provider.multiProvider) {
                  resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
              }
              else {
                  resolvedProvider = provider;
              }
              normalizedProvidersMap.set(provider.key.id, resolvedProvider);
          }
      }
      return normalizedProvidersMap;
  }
  function _normalizeProviders(providers, res) {
      providers.forEach(b => {
          if (b instanceof Type) {
              res.push({ provide: b, useClass: b });
          }
          else if (b && typeof b == 'object' && b.provide !== undefined) {
              res.push(b);
          }
          else if (b instanceof Array) {
              _normalizeProviders(b, res);
          }
          else {
              throw invalidProviderError(b);
          }
      });
      return res;
  }
  function constructDependencies(typeOrFunc, dependencies) {
      if (!dependencies) {
          return _dependenciesFor(typeOrFunc);
      }
      else {
          const params = dependencies.map(t => [t]);
          return dependencies.map(t => _extractToken(typeOrFunc, t, params));
      }
  }
  function _dependenciesFor(typeOrFunc) {
      const params = reflector.parameters(typeOrFunc);
      if (!params)
          return [];
      if (params.some(p => p == null)) {
          throw noAnnotationError(typeOrFunc, params);
      }
      return params.map(p => _extractToken(typeOrFunc, p, params));
  }
  function _extractToken(typeOrFunc, metadata, params) {
      let token = null;
      let optional = false;
      if (!Array.isArray(metadata)) {
          if (metadata instanceof Inject) {
              return _createDependency(metadata['token'], optional, null);
          }
          else {
              return _createDependency(metadata, optional, null);
          }
      }
      let visibility = null;
      for (let i = 0; i < metadata.length; ++i) {
          const paramMetadata = metadata[i];
          if (paramMetadata instanceof Type) {
              token = paramMetadata;
          }
          else if (paramMetadata instanceof Inject) {
              token = paramMetadata['token'];
          }
          else if (paramMetadata instanceof Optional) {
              optional = true;
          }
          else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
              visibility = paramMetadata;
          }
          else if (paramMetadata instanceof InjectionToken) {
              token = paramMetadata;
          }
      }
      token = resolveForwardRef(token);
      if (token != null) {
          return _createDependency(token, optional, visibility);
      }
      else {
          throw noAnnotationError(typeOrFunc, params);
      }
  }
  function _createDependency(token, optional, visibility) {
      return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
  }

  // Threshold for the dynamic version
  const UNDEFINED = new Object();
  /**
   * A ReflectiveDependency injection container used for instantiating objects and resolving
   * dependencies.
   *
   * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
   * constructor dependencies.
   *
   * In typical use, application code asks for the dependencies in the constructor and they are
   * resolved by the `Injector`.
   *
   * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
   *
   * The following example creates an `Injector` configured to create `Engine` and `Car`.
   *
   * ```typescript
   * @Injectable()
   * class Engine {
   * }
   *
   * @Injectable()
   * class Car {
   *   constructor(public engine:Engine) {}
   * }
   *
   * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
   * var car = injector.get(Car);
   * expect(car instanceof Car).toBe(true);
   * expect(car.engine instanceof Engine).toBe(true);
   * ```
   *
   * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
   * resolve all of the object's dependencies automatically.
   *
   * @stable
   */
  class ReflectiveInjector {
      /**
       * Turns an array of provider definitions into an array of resolved providers.
       *
       * A resolution is a process of flattening multiple nested arrays and converting individual
       * providers into an array of {@link ResolvedReflectiveProvider}s.
       *
       * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
       *
       * ```typescript
       * @Injectable()
       * class Engine {
       * }
       *
       * @Injectable()
       * class Car {
       *   constructor(public engine:Engine) {}
       * }
       *
       * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
       *
       * expect(providers.length).toEqual(2);
       *
       * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
       * expect(providers[0].key.displayName).toBe("Car");
       * expect(providers[0].dependencies.length).toEqual(1);
       * expect(providers[0].factory).toBeDefined();
       *
       * expect(providers[1].key.displayName).toBe("Engine");
       * });
       * ```
       *
       * See {@link ReflectiveInjector#fromResolvedProviders} for more info.
       */
      static resolve(providers) {
          return resolveReflectiveProviders(providers);
      }
      /**
       * Resolves an array of providers and creates an injector from those providers.
       *
       * The passed-in providers can be an array of `Type`, {@link Provider},
       * or a recursive array of more providers.
       *
       * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
       *
       * ```typescript
       * @Injectable()
       * class Engine {
       * }
       *
       * @Injectable()
       * class Car {
       *   constructor(public engine:Engine) {}
       * }
       *
       * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
       * expect(injector.get(Car) instanceof Car).toBe(true);
       * ```
       *
       * This function is slower than the corresponding `fromResolvedProviders`
       * because it needs to resolve the passed-in providers first.
       * See {@link Injector#resolve} and {@link Injector#fromResolvedProviders}.
       */
      static resolveAndCreate(providers, parent = null) {
          const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
          return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
      }
      /**
       * Creates an injector from previously resolved providers.
       *
       * This API is the recommended way to construct injectors in performance-sensitive parts.
       *
       * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
       *
       * ```typescript
       * @Injectable()
       * class Engine {
       * }
       *
       * @Injectable()
       * class Car {
       *   constructor(public engine:Engine) {}
       * }
       *
       * var providers = ReflectiveInjector.resolve([Car, Engine]);
       * var injector = ReflectiveInjector.fromResolvedProviders(providers);
       * expect(injector.get(Car) instanceof Car).toBe(true);
       * ```
       * @experimental
       */
      static fromResolvedProviders(providers, parent = null) {
          return new ReflectiveInjector_(providers, parent);
      }
  }
  class ReflectiveInjector_ {
      /**
       * Private
       */
      constructor(_providers, _parent = null) {
          /** @internal */
          this._constructionCounter = 0;
          this._providers = _providers;
          this._parent = _parent;
          const len = _providers.length;
          this.keyIds = new Array(len);
          this.objs = new Array(len);
          for (let i = 0; i < len; i++) {
              this.keyIds[i] = _providers[i].key.id;
              this.objs[i] = UNDEFINED;
          }
      }
      get(token, notFoundValue = THROW_IF_NOT_FOUND) {
          return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
      }
      get parent() { return this._parent; }
      resolveAndCreateChild(providers) {
          const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
          return this.createChildFromResolved(ResolvedReflectiveProviders);
      }
      createChildFromResolved(providers) {
          const inj = new ReflectiveInjector_(providers);
          inj._parent = this;
          return inj;
      }
      resolveAndInstantiate(provider) {
          return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
      }
      instantiateResolved(provider) {
          return this._instantiateProvider(provider);
      }
      getProviderAtIndex(index) {
          if (index < 0 || index >= this._providers.length) {
              throw outOfBoundsError(index);
          }
          return this._providers[index];
      }
      /** @internal */
      _new(provider) {
          if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
              throw cyclicDependencyError(this, provider.key);
          }
          return this._instantiateProvider(provider);
      }
      _getMaxNumberOfObjects() { return this.objs.length; }
      _instantiateProvider(provider) {
          if (provider.multiProvider) {
              const res = new Array(provider.resolvedFactories.length);
              for (let i = 0; i < provider.resolvedFactories.length; ++i) {
                  res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
              }
              return res;
          }
          else {
              return this._instantiate(provider, provider.resolvedFactories[0]);
          }
      }
      _instantiate(provider, ResolvedReflectiveFactory) {
          const factory = ResolvedReflectiveFactory.factory;
          let deps;
          try {
              deps =
                  ResolvedReflectiveFactory.dependencies.map(dep => this._getByReflectiveDependency(dep));
          }
          catch (e) {
              if (e.addKey) {
                  e.addKey(this, provider.key);
              }
              throw e;
          }
          let obj;
          try {
              obj = factory(...deps);
          }
          catch (e) {
              throw instantiationError(this, e, e.stack, provider.key);
          }
          return obj;
      }
      _getByReflectiveDependency(dep) {
          return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
      }
      _getByKey(key, visibility, notFoundValue) {
          if (key === INJECTOR_KEY) {
              return this;
          }
          if (visibility instanceof Self) {
              return this._getByKeySelf(key, notFoundValue);
          }
          else {
              return this._getByKeyDefault(key, notFoundValue, visibility);
          }
      }
      _getObjByKeyId(keyId) {
          for (let i = 0; i < this.keyIds.length; i++) {
              if (this.keyIds[i] === keyId) {
                  if (this.objs[i] === UNDEFINED) {
                      this.objs[i] = this._new(this._providers[i]);
                  }
                  return this.objs[i];
              }
          }
          return UNDEFINED;
      }
      /** @internal */
      _throwOrNull(key, notFoundValue) {
          if (notFoundValue !== THROW_IF_NOT_FOUND) {
              return notFoundValue;
          }
          else {
              throw noProviderError(this, key);
          }
      }
      /** @internal */
      _getByKeySelf(key, notFoundValue) {
          const obj = this._getObjByKeyId(key.id);
          return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
      }
      /** @internal */
      _getByKeyDefault(key, notFoundValue, visibility) {
          let inj;
          if (visibility instanceof SkipSelf) {
              inj = this._parent;
          }
          else {
              inj = this;
          }
          while (inj instanceof ReflectiveInjector_) {
              const inj_ = inj;
              const obj = inj_._getObjByKeyId(key.id);
              if (obj !== UNDEFINED)
                  return obj;
              inj = inj_._parent;
          }
          if (inj !== null) {
              return inj.get(key.token, notFoundValue);
          }
          else {
              return this._throwOrNull(key, notFoundValue);
          }
      }
      get displayName() {
          const providers = _mapProviders(this, (b) => ' "' + b.key.displayName + '" ')
              .join(', ');
          return `ReflectiveInjector(providers: [${providers}])`;
      }
      toString() { return this.displayName; }
  }
  const INJECTOR_KEY = ReflectiveKey.get(Injector);
  function _mapProviders(injector, fn) {
      const res = new Array(injector._providers.length);
      for (let i = 0; i < injector._providers.length; ++i) {
          res[i] = fn(injector.getProviderAtIndex(i));
      }
      return res;
  }

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var __moduleExports$1 = createCommonjsModule(function (module, exports) {
  "use strict";
  /**
   * window: browser in DOM main thread
   * self: browser in WebWorker
   * global: Node.js/other
   */
  exports.root = (typeof window == 'object' && window.window === window && window
      || typeof self == 'object' && self.self === self && self
      || typeof commonjsGlobal == 'object' && commonjsGlobal.global === commonjsGlobal && commonjsGlobal);
  if (!exports.root) {
      throw new Error('RxJS could not find any global context (window, self, global)');
  }
  });

  var root_1$1 = __moduleExports$1.root;

  function isFunction(x) {
      return typeof x === 'function';
  }
  var isFunction_2 = isFunction;

  var __moduleExports$4 = {
  	isFunction: isFunction_2
  };

  var isArray_1$1 = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });

  var __moduleExports$6 = {
  	isArray: isArray_1$1
  };

  function isObject(x) {
      return x != null && typeof x === 'object';
  }
  var isObject_2 = isObject;

  var __moduleExports$7 = {
  	isObject: isObject_2
  };

  // typeof any so that it we don't have to cast when comparing a result to the error object
  var errorObject_1$2 = { e: {} };

  var __moduleExports$9 = {
  	errorObject: errorObject_1$2
  };

  var errorObject_1$1 = __moduleExports$9;
  var tryCatchTarget;
  function tryCatcher() {
      try {
          return tryCatchTarget.apply(this, arguments);
      }
      catch (e) {
          errorObject_1$1.errorObject.e = e;
          return errorObject_1$1.errorObject;
      }
  }
  function tryCatch(fn) {
      tryCatchTarget = fn;
      return tryCatcher;
  }
  var tryCatch_2 = tryCatch;
  ;

  var __moduleExports$8 = {
  	tryCatch: tryCatch_2
  };

  var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  /**
   * An error thrown when one or more errors have occurred during the
   * `unsubscribe` of a {@link Subscription}.
   */
  var UnsubscriptionError = (function (_super) {
      __extends$1(UnsubscriptionError, _super);
      function UnsubscriptionError(errors) {
          _super.call(this);
          this.errors = errors;
          var err = Error.call(this, errors ?
              errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
          this.name = err.name = 'UnsubscriptionError';
          this.stack = err.stack;
          this.message = err.message;
      }
      return UnsubscriptionError;
  }(Error));
  var UnsubscriptionError_2 = UnsubscriptionError;

  var __moduleExports$10 = {
  	UnsubscriptionError: UnsubscriptionError_2
  };

  var isArray_1 = __moduleExports$6;
  var isObject_1 = __moduleExports$7;
  var isFunction_1$1 = __moduleExports$4;
  var tryCatch_1 = __moduleExports$8;
  var errorObject_1 = __moduleExports$9;
  var UnsubscriptionError_1 = __moduleExports$10;
  /**
   * Represents a disposable resource, such as the execution of an Observable. A
   * Subscription has one important method, `unsubscribe`, that takes no argument
   * and just disposes the resource held by the subscription.
   *
   * Additionally, subscriptions may be grouped together through the `add()`
   * method, which will attach a child Subscription to the current Subscription.
   * When a Subscription is unsubscribed, all its children (and its grandchildren)
   * will be unsubscribed as well.
   *
   * @class Subscription
   */
  var Subscription = (function () {
      /**
       * @param {function(): void} [unsubscribe] A function describing how to
       * perform the disposal of resources when the `unsubscribe` method is called.
       */
      function Subscription(unsubscribe) {
          /**
           * A flag to indicate whether this Subscription has already been unsubscribed.
           * @type {boolean}
           */
          this.closed = false;
          if (unsubscribe) {
              this._unsubscribe = unsubscribe;
          }
      }
      /**
       * Disposes the resources held by the subscription. May, for instance, cancel
       * an ongoing Observable execution or cancel any other type of work that
       * started when the Subscription was created.
       * @return {void}
       */
      Subscription.prototype.unsubscribe = function () {
          var hasErrors = false;
          var errors;
          if (this.closed) {
              return;
          }
          this.closed = true;
          var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
          this._subscriptions = null;
          if (isFunction_1$1.isFunction(_unsubscribe)) {
              var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
              if (trial === errorObject_1.errorObject) {
                  hasErrors = true;
                  (errors = errors || []).push(errorObject_1.errorObject.e);
              }
          }
          if (isArray_1.isArray(_subscriptions)) {
              var index = -1;
              var len = _subscriptions.length;
              while (++index < len) {
                  var sub = _subscriptions[index];
                  if (isObject_1.isObject(sub)) {
                      var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                      if (trial === errorObject_1.errorObject) {
                          hasErrors = true;
                          errors = errors || [];
                          var err = errorObject_1.errorObject.e;
                          if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                              errors = errors.concat(err.errors);
                          }
                          else {
                              errors.push(err);
                          }
                      }
                  }
              }
          }
          if (hasErrors) {
              throw new UnsubscriptionError_1.UnsubscriptionError(errors);
          }
      };
      /**
       * Adds a tear down to be called during the unsubscribe() of this
       * Subscription.
       *
       * If the tear down being added is a subscription that is already
       * unsubscribed, is the same reference `add` is being called on, or is
       * `Subscription.EMPTY`, it will not be added.
       *
       * If this subscription is already in an `closed` state, the passed
       * tear down logic will be executed immediately.
       *
       * @param {TeardownLogic} teardown The additional logic to execute on
       * teardown.
       * @return {Subscription} Returns the Subscription used or created to be
       * added to the inner subscriptions list. This Subscription can be used with
       * `remove()` to remove the passed teardown logic from the inner subscriptions
       * list.
       */
      Subscription.prototype.add = function (teardown) {
          if (!teardown || (teardown === Subscription.EMPTY)) {
              return Subscription.EMPTY;
          }
          if (teardown === this) {
              return this;
          }
          var sub = teardown;
          switch (typeof teardown) {
              case 'function':
                  sub = new Subscription(teardown);
              case 'object':
                  if (sub.closed || typeof sub.unsubscribe !== 'function') {
                      break;
                  }
                  else if (this.closed) {
                      sub.unsubscribe();
                  }
                  else {
                      (this._subscriptions || (this._subscriptions = [])).push(sub);
                  }
                  break;
              default:
                  throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
          }
          return sub;
      };
      /**
       * Removes a Subscription from the internal list of subscriptions that will
       * unsubscribe during the unsubscribe process of this Subscription.
       * @param {Subscription} subscription The subscription to remove.
       * @return {void}
       */
      Subscription.prototype.remove = function (subscription) {
          // HACK: This might be redundant because of the logic in `add()`
          if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {
              return;
          }
          var subscriptions = this._subscriptions;
          if (subscriptions) {
              var subscriptionIndex = subscriptions.indexOf(subscription);
              if (subscriptionIndex !== -1) {
                  subscriptions.splice(subscriptionIndex, 1);
              }
          }
      };
      Subscription.EMPTY = (function (empty) {
          empty.closed = true;
          return empty;
      }(new Subscription()));
      return Subscription;
  }());
  var Subscription_2 = Subscription;

  var __moduleExports$5 = {
  	Subscription: Subscription_2
  };

  var empty = {
      closed: true,
      next: function (value) { },
      error: function (err) { throw err; },
      complete: function () { }
  };

  var __moduleExports$11 = {
  	empty: empty
  };

  var root_1$2 = __moduleExports$1;
  var Symbol$1 = root_1$2.root.Symbol;
  var $$rxSubscriber = (typeof Symbol$1 === 'function' && typeof Symbol$1.for === 'function') ?
      Symbol$1.for('rxSubscriber') : '@@rxSubscriber';

  var __moduleExports$12 = {
  	$$rxSubscriber: $$rxSubscriber
  };

  var __extends = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var isFunction_1 = __moduleExports$4;
  var Subscription_1 = __moduleExports$5;
  var Observer_1$1 = __moduleExports$11;
  var rxSubscriber_1$1 = __moduleExports$12;
  /**
   * Implements the {@link Observer} interface and extends the
   * {@link Subscription} class. While the {@link Observer} is the public API for
   * consuming the values of an {@link Observable}, all Observers get converted to
   * a Subscriber, in order to provide Subscription-like capabilities such as
   * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
   * implementing operators, but it is rarely used as a public API.
   *
   * @class Subscriber<T>
   */
  var Subscriber = (function (_super) {
      __extends(Subscriber, _super);
      /**
       * @param {Observer|function(value: T): void} [destinationOrNext] A partially
       * defined Observer or a `next` callback function.
       * @param {function(e: ?any): void} [error] The `error` callback of an
       * Observer.
       * @param {function(): void} [complete] The `complete` callback of an
       * Observer.
       */
      function Subscriber(destinationOrNext, error, complete) {
          _super.call(this);
          this.syncErrorValue = null;
          this.syncErrorThrown = false;
          this.syncErrorThrowable = false;
          this.isStopped = false;
          switch (arguments.length) {
              case 0:
                  this.destination = Observer_1$1.empty;
                  break;
              case 1:
                  if (!destinationOrNext) {
                      this.destination = Observer_1$1.empty;
                      break;
                  }
                  if (typeof destinationOrNext === 'object') {
                      if (destinationOrNext instanceof Subscriber) {
                          this.destination = destinationOrNext;
                          this.destination.add(this);
                      }
                      else {
                          this.syncErrorThrowable = true;
                          this.destination = new SafeSubscriber(this, destinationOrNext);
                      }
                      break;
                  }
              default:
                  this.syncErrorThrowable = true;
                  this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                  break;
          }
      }
      Subscriber.prototype[rxSubscriber_1$1.$$rxSubscriber] = function () { return this; };
      /**
       * A static factory for a Subscriber, given a (potentially partial) definition
       * of an Observer.
       * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
       * @param {function(e: ?any): void} [error] The `error` callback of an
       * Observer.
       * @param {function(): void} [complete] The `complete` callback of an
       * Observer.
       * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
       * Observer represented by the given arguments.
       */
      Subscriber.create = function (next, error, complete) {
          var subscriber = new Subscriber(next, error, complete);
          subscriber.syncErrorThrowable = false;
          return subscriber;
      };
      /**
       * The {@link Observer} callback to receive notifications of type `next` from
       * the Observable, with a value. The Observable may call this method 0 or more
       * times.
       * @param {T} [value] The `next` value.
       * @return {void}
       */
      Subscriber.prototype.next = function (value) {
          if (!this.isStopped) {
              this._next(value);
          }
      };
      /**
       * The {@link Observer} callback to receive notifications of type `error` from
       * the Observable, with an attached {@link Error}. Notifies the Observer that
       * the Observable has experienced an error condition.
       * @param {any} [err] The `error` exception.
       * @return {void}
       */
      Subscriber.prototype.error = function (err) {
          if (!this.isStopped) {
              this.isStopped = true;
              this._error(err);
          }
      };
      /**
       * The {@link Observer} callback to receive a valueless notification of type
       * `complete` from the Observable. Notifies the Observer that the Observable
       * has finished sending push-based notifications.
       * @return {void}
       */
      Subscriber.prototype.complete = function () {
          if (!this.isStopped) {
              this.isStopped = true;
              this._complete();
          }
      };
      Subscriber.prototype.unsubscribe = function () {
          if (this.closed) {
              return;
          }
          this.isStopped = true;
          _super.prototype.unsubscribe.call(this);
      };
      Subscriber.prototype._next = function (value) {
          this.destination.next(value);
      };
      Subscriber.prototype._error = function (err) {
          this.destination.error(err);
          this.unsubscribe();
      };
      Subscriber.prototype._complete = function () {
          this.destination.complete();
          this.unsubscribe();
      };
      return Subscriber;
  }(Subscription_1.Subscription));
  var Subscriber_2 = Subscriber;
  /**
   * We need this JSDoc comment for affecting ESDoc.
   * @ignore
   * @extends {Ignored}
   */
  var SafeSubscriber = (function (_super) {
      __extends(SafeSubscriber, _super);
      function SafeSubscriber(_parent, observerOrNext, error, complete) {
          _super.call(this);
          this._parent = _parent;
          var next;
          var context = this;
          if (isFunction_1.isFunction(observerOrNext)) {
              next = observerOrNext;
          }
          else if (observerOrNext) {
              context = observerOrNext;
              next = observerOrNext.next;
              error = observerOrNext.error;
              complete = observerOrNext.complete;
              if (isFunction_1.isFunction(context.unsubscribe)) {
                  this.add(context.unsubscribe.bind(context));
              }
              context.unsubscribe = this.unsubscribe.bind(this);
          }
          this._context = context;
          this._next = next;
          this._error = error;
          this._complete = complete;
      }
      SafeSubscriber.prototype.next = function (value) {
          if (!this.isStopped && this._next) {
              var _parent = this._parent;
              if (!_parent.syncErrorThrowable) {
                  this.__tryOrUnsub(this._next, value);
              }
              else if (this.__tryOrSetError(_parent, this._next, value)) {
                  this.unsubscribe();
              }
          }
      };
      SafeSubscriber.prototype.error = function (err) {
          if (!this.isStopped) {
              var _parent = this._parent;
              if (this._error) {
                  if (!_parent.syncErrorThrowable) {
                      this.__tryOrUnsub(this._error, err);
                      this.unsubscribe();
                  }
                  else {
                      this.__tryOrSetError(_parent, this._error, err);
                      this.unsubscribe();
                  }
              }
              else if (!_parent.syncErrorThrowable) {
                  this.unsubscribe();
                  throw err;
              }
              else {
                  _parent.syncErrorValue = err;
                  _parent.syncErrorThrown = true;
                  this.unsubscribe();
              }
          }
      };
      SafeSubscriber.prototype.complete = function () {
          if (!this.isStopped) {
              var _parent = this._parent;
              if (this._complete) {
                  if (!_parent.syncErrorThrowable) {
                      this.__tryOrUnsub(this._complete);
                      this.unsubscribe();
                  }
                  else {
                      this.__tryOrSetError(_parent, this._complete);
                      this.unsubscribe();
                  }
              }
              else {
                  this.unsubscribe();
              }
          }
      };
      SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
          try {
              fn.call(this._context, value);
          }
          catch (err) {
              this.unsubscribe();
              throw err;
          }
      };
      SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
          try {
              fn.call(this._context, value);
          }
          catch (err) {
              parent.syncErrorValue = err;
              parent.syncErrorThrown = true;
              return true;
          }
          return false;
      };
      SafeSubscriber.prototype._unsubscribe = function () {
          var _parent = this._parent;
          this._context = null;
          this._parent = null;
          _parent.unsubscribe();
      };
      return SafeSubscriber;
  }(Subscriber));

  var __moduleExports$3 = {
  	Subscriber: Subscriber_2
  };

  var Subscriber_1 = __moduleExports$3;
  var rxSubscriber_1 = __moduleExports$12;
  var Observer_1 = __moduleExports$11;
  function toSubscriber(nextOrObserver, error, complete) {
      if (nextOrObserver) {
          if (nextOrObserver instanceof Subscriber_1.Subscriber) {
              return nextOrObserver;
          }
          if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
              return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
          }
      }
      if (!nextOrObserver && !error && !complete) {
          return new Subscriber_1.Subscriber(Observer_1.empty);
      }
      return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
  }
  var toSubscriber_2 = toSubscriber;

  var __moduleExports$2 = {
  	toSubscriber: toSubscriber_2
  };

  var root_1$3 = __moduleExports$1;
  function getSymbolObservable(context) {
      var $$observable;
      var Symbol = context.Symbol;
      if (typeof Symbol === 'function') {
          if (Symbol.observable) {
              $$observable = Symbol.observable;
          }
          else {
              $$observable = Symbol('observable');
              Symbol.observable = $$observable;
          }
      }
      else {
          $$observable = '@@observable';
      }
      return $$observable;
  }
  var getSymbolObservable_1 = getSymbolObservable;
  var symbolObservable = getSymbolObservable(root_1$3.root);

  var __moduleExports$13 = {
  	getSymbolObservable: getSymbolObservable_1,
  	$$observable: symbolObservable
  };

  var root_1 = __moduleExports$1;
  var toSubscriber_1 = __moduleExports$2;
  var observable_1 = __moduleExports$13;
  /**
   * A representation of any set of values over any amount of time. This the most basic building block
   * of RxJS.
   *
   * @class Observable<T>
   */
  var Observable = (function () {
      /**
       * @constructor
       * @param {Function} subscribe the function that is  called when the Observable is
       * initially subscribed to. This function is given a Subscriber, to which new values
       * can be `next`ed, or an `error` method can be called to raise an error, or
       * `complete` can be called to notify of a successful completion.
       */
      function Observable(subscribe) {
          this._isScalar = false;
          if (subscribe) {
              this._subscribe = subscribe;
          }
      }
      /**
       * Creates a new Observable, with this Observable as the source, and the passed
       * operator defined as the new observable's operator.
       * @method lift
       * @param {Operator} operator the operator defining the operation to take on the observable
       * @return {Observable} a new observable with the Operator applied
       */
      Observable.prototype.lift = function (operator) {
          var observable = new Observable();
          observable.source = this;
          observable.operator = operator;
          return observable;
      };
      Observable.prototype.subscribe = function (observerOrNext, error, complete) {
          var operator = this.operator;
          var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
          if (operator) {
              operator.call(sink, this.source);
          }
          else {
              sink.add(this._subscribe(sink));
          }
          if (sink.syncErrorThrowable) {
              sink.syncErrorThrowable = false;
              if (sink.syncErrorThrown) {
                  throw sink.syncErrorValue;
              }
          }
          return sink;
      };
      /**
       * @method forEach
       * @param {Function} next a handler for each value emitted by the observable
       * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
       * @return {Promise} a promise that either resolves on observable completion or
       *  rejects with the handled error
       */
      Observable.prototype.forEach = function (next, PromiseCtor) {
          var _this = this;
          if (!PromiseCtor) {
              if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                  PromiseCtor = root_1.root.Rx.config.Promise;
              }
              else if (root_1.root.Promise) {
                  PromiseCtor = root_1.root.Promise;
              }
          }
          if (!PromiseCtor) {
              throw new Error('no Promise impl found');
          }
          return new PromiseCtor(function (resolve, reject) {
              var subscription = _this.subscribe(function (value) {
                  if (subscription) {
                      // if there is a subscription, then we can surmise
                      // the next handling is asynchronous. Any errors thrown
                      // need to be rejected explicitly and unsubscribe must be
                      // called manually
                      try {
                          next(value);
                      }
                      catch (err) {
                          reject(err);
                          subscription.unsubscribe();
                      }
                  }
                  else {
                      // if there is NO subscription, then we're getting a nexted
                      // value synchronously during subscription. We can just call it.
                      // If it errors, Observable's `subscribe` will ensure the
                      // unsubscription logic is called, then synchronously rethrow the error.
                      // After that, Promise will trap the error and send it
                      // down the rejection path.
                      next(value);
                  }
              }, reject, resolve);
          });
      };
      Observable.prototype._subscribe = function (subscriber) {
          return this.source.subscribe(subscriber);
      };
      /**
       * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
       * @method Symbol.observable
       * @return {Observable} this instance of the observable
       */
      Observable.prototype[observable_1.$$observable] = function () {
          return this;
      };
      // HACK: Since TypeScript inherits static properties too, we have to
      // fight against TypeScript here so Subject can have a different static create signature
      /**
       * Creates a new cold Observable by calling the Observable constructor
       * @static true
       * @owner Observable
       * @method create
       * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
       * @return {Observable} a new cold observable
       */
      Observable.create = function (subscribe) {
          return new Observable(subscribe);
      };
      return Observable;
  }());
  var Observable_2 = Observable;

  var __moduleExports = {
  	Observable: Observable_2
  };

  var __extends$3 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1$1 = __moduleExports;
  /**
   * We need this JSDoc comment for affecting ESDoc.
   * @extends {Ignored}
   * @hide true
   */
  var ScalarObservable = (function (_super) {
      __extends$3(ScalarObservable, _super);
      function ScalarObservable(value, scheduler) {
          _super.call(this);
          this.value = value;
          this.scheduler = scheduler;
          this._isScalar = true;
          if (scheduler) {
              this._isScalar = false;
          }
      }
      ScalarObservable.create = function (value, scheduler) {
          return new ScalarObservable(value, scheduler);
      };
      ScalarObservable.dispatch = function (state) {
          var done = state.done, value = state.value, subscriber = state.subscriber;
          if (done) {
              subscriber.complete();
              return;
          }
          subscriber.next(value);
          if (subscriber.closed) {
              return;
          }
          state.done = true;
          this.schedule(state);
      };
      ScalarObservable.prototype._subscribe = function (subscriber) {
          var value = this.value;
          var scheduler = this.scheduler;
          if (scheduler) {
              return scheduler.schedule(ScalarObservable.dispatch, 0, {
                  done: false, value: value, subscriber: subscriber
              });
          }
          else {
              subscriber.next(value);
              if (!subscriber.closed) {
                  subscriber.complete();
              }
          }
      };
      return ScalarObservable;
  }(Observable_1$1.Observable));
  var ScalarObservable_2 = ScalarObservable;

  var __moduleExports$16 = {
  	ScalarObservable: ScalarObservable_2
  };

  var __extends$4 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1$2 = __moduleExports;
  /**
   * We need this JSDoc comment for affecting ESDoc.
   * @extends {Ignored}
   * @hide true
   */
  var EmptyObservable = (function (_super) {
      __extends$4(EmptyObservable, _super);
      function EmptyObservable(scheduler) {
          _super.call(this);
          this.scheduler = scheduler;
      }
      /**
       * Creates an Observable that emits no items to the Observer and immediately
       * emits a complete notification.
       *
       * <span class="informal">Just emits 'complete', and nothing else.
       * </span>
       *
       * <img src="./img/empty.png" width="100%">
       *
       * This static operator is useful for creating a simple Observable that only
       * emits the complete notification. It can be used for composing with other
       * Observables, such as in a {@link mergeMap}.
       *
       * @example <caption>Emit the number 7, then complete.</caption>
       * var result = Rx.Observable.empty().startWith(7);
       * result.subscribe(x => console.log(x));
       *
       * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
       * var interval = Rx.Observable.interval(1000);
       * var result = interval.mergeMap(x =>
       *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
       * );
       * result.subscribe(x => console.log(x));
       *
       * // Results in the following to the console:
       * // x is equal to the count on the interval eg(0,1,2,3,...)
       * // x will occur every 1000ms
       * // if x % 2 is equal to 1 print abc
       * // if x % 2 is not equal to 1 nothing will be output
       *
       * @see {@link create}
       * @see {@link never}
       * @see {@link of}
       * @see {@link throw}
       *
       * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
       * the emission of the complete notification.
       * @return {Observable} An "empty" Observable: emits only the complete
       * notification.
       * @static true
       * @name empty
       * @owner Observable
       */
      EmptyObservable.create = function (scheduler) {
          return new EmptyObservable(scheduler);
      };
      EmptyObservable.dispatch = function (arg) {
          var subscriber = arg.subscriber;
          subscriber.complete();
      };
      EmptyObservable.prototype._subscribe = function (subscriber) {
          var scheduler = this.scheduler;
          if (scheduler) {
              return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
          }
          else {
              subscriber.complete();
          }
      };
      return EmptyObservable;
  }(Observable_1$2.Observable));
  var EmptyObservable_2 = EmptyObservable;

  var __moduleExports$17 = {
  	EmptyObservable: EmptyObservable_2
  };

  function isScheduler(value) {
      return value && typeof value.schedule === 'function';
  }
  var isScheduler_2 = isScheduler;

  var __moduleExports$18 = {
  	isScheduler: isScheduler_2
  };

  var __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = __moduleExports;
  var ScalarObservable_1 = __moduleExports$16;
  var EmptyObservable_1 = __moduleExports$17;
  var isScheduler_1$1 = __moduleExports$18;
  /**
   * We need this JSDoc comment for affecting ESDoc.
   * @extends {Ignored}
   * @hide true
   */
  var ArrayObservable = (function (_super) {
      __extends$2(ArrayObservable, _super);
      function ArrayObservable(array, scheduler) {
          _super.call(this);
          this.array = array;
          this.scheduler = scheduler;
          if (!scheduler && array.length === 1) {
              this._isScalar = true;
              this.value = array[0];
          }
      }
      ArrayObservable.create = function (array, scheduler) {
          return new ArrayObservable(array, scheduler);
      };
      /**
       * Creates an Observable that emits some values you specify as arguments,
       * immediately one after the other, and then emits a complete notification.
       *
       * <span class="informal">Emits the arguments you provide, then completes.
       * </span>
       *
       * <img src="./img/of.png" width="100%">
       *
       * This static operator is useful for creating a simple Observable that only
       * emits the arguments given, and the complete notification thereafter. It can
       * be used for composing with other Observables, such as with {@link concat}.
       * By default, it uses a `null` Scheduler, which means the `next`
       * notifications are sent synchronously, although with a different Scheduler
       * it is possible to determine when those notifications will be delivered.
       *
       * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
       * var numbers = Rx.Observable.of(10, 20, 30);
       * var letters = Rx.Observable.of('a', 'b', 'c');
       * var interval = Rx.Observable.interval(1000);
       * var result = numbers.concat(letters).concat(interval);
       * result.subscribe(x => console.log(x));
       *
       * @see {@link create}
       * @see {@link empty}
       * @see {@link never}
       * @see {@link throw}
       *
       * @param {...T} values Arguments that represent `next` values to be emitted.
       * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
       * the emissions of the `next` notifications.
       * @return {Observable<T>} An Observable that emits each given input value.
       * @static true
       * @name of
       * @owner Observable
       */
      ArrayObservable.of = function () {
          var array = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              array[_i - 0] = arguments[_i];
          }
          var scheduler = array[array.length - 1];
          if (isScheduler_1$1.isScheduler(scheduler)) {
              array.pop();
          }
          else {
              scheduler = null;
          }
          var len = array.length;
          if (len > 1) {
              return new ArrayObservable(array, scheduler);
          }
          else if (len === 1) {
              return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
          }
          else {
              return new EmptyObservable_1.EmptyObservable(scheduler);
          }
      };
      ArrayObservable.dispatch = function (state) {
          var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
          if (index >= count) {
              subscriber.complete();
              return;
          }
          subscriber.next(array[index]);
          if (subscriber.closed) {
              return;
          }
          state.index = index + 1;
          this.schedule(state);
      };
      ArrayObservable.prototype._subscribe = function (subscriber) {
          var index = 0;
          var array = this.array;
          var count = array.length;
          var scheduler = this.scheduler;
          if (scheduler) {
              return scheduler.schedule(ArrayObservable.dispatch, 0, {
                  array: array, index: index, count: count, subscriber: subscriber
              });
          }
          else {
              for (var i = 0; i < count && !subscriber.closed; i++) {
                  subscriber.next(array[i]);
              }
              subscriber.complete();
          }
      };
      return ArrayObservable;
  }(Observable_1.Observable));
  var ArrayObservable_2 = ArrayObservable;

  var __moduleExports$15 = {
  	ArrayObservable: ArrayObservable_2
  };

  var __extends$6 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1$1 = __moduleExports$3;
  /**
   * We need this JSDoc comment for affecting ESDoc.
   * @ignore
   * @extends {Ignored}
   */
  var OuterSubscriber = (function (_super) {
      __extends$6(OuterSubscriber, _super);
      function OuterSubscriber() {
          _super.apply(this, arguments);
      }
      OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.destination.next(innerValue);
      };
      OuterSubscriber.prototype.notifyError = function (error, innerSub) {
          this.destination.error(error);
      };
      OuterSubscriber.prototype.notifyComplete = function (innerSub) {
          this.destination.complete();
      };
      return OuterSubscriber;
  }(Subscriber_1$1.Subscriber));
  var OuterSubscriber_2 = OuterSubscriber;

  var __moduleExports$20 = {
  	OuterSubscriber: OuterSubscriber_2
  };

  function isPromise(value) {
      return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
  }
  var isPromise_2 = isPromise;

  var __moduleExports$22 = {
  	isPromise: isPromise_2
  };

  var root_1$5 = __moduleExports$1;
  function symbolIteratorPonyfill(root) {
      var Symbol = root.Symbol;
      if (typeof Symbol === 'function') {
          if (!Symbol.iterator) {
              Symbol.iterator = Symbol('iterator polyfill');
          }
          return Symbol.iterator;
      }
      else {
          // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
          var Set_1 = root.Set;
          if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
              return '@@iterator';
          }
          var Map_1 = root.Map;
          // required for compatability with es6-shim
          if (Map_1) {
              var keys = Object.getOwnPropertyNames(Map_1.prototype);
              for (var i = 0; i < keys.length; ++i) {
                  var key = keys[i];
                  // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
                  if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
                      return key;
                  }
              }
          }
          return '@@iterator';
      }
  }
  var symbolIteratorPonyfill_1 = symbolIteratorPonyfill;
  var $$iterator = symbolIteratorPonyfill(root_1$5.root);

  var __moduleExports$23 = {
  	symbolIteratorPonyfill: symbolIteratorPonyfill_1,
  	$$iterator: $$iterator
  };

  var __extends$7 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscriber_1$2 = __moduleExports$3;
  /**
   * We need this JSDoc comment for affecting ESDoc.
   * @ignore
   * @extends {Ignored}
   */
  var InnerSubscriber = (function (_super) {
      __extends$7(InnerSubscriber, _super);
      function InnerSubscriber(parent, outerValue, outerIndex) {
          _super.call(this);
          this.parent = parent;
          this.outerValue = outerValue;
          this.outerIndex = outerIndex;
          this.index = 0;
      }
      InnerSubscriber.prototype._next = function (value) {
          this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
      };
      InnerSubscriber.prototype._error = function (error) {
          this.parent.notifyError(error, this);
          this.unsubscribe();
      };
      InnerSubscriber.prototype._complete = function () {
          this.parent.notifyComplete(this);
          this.unsubscribe();
      };
      return InnerSubscriber;
  }(Subscriber_1$2.Subscriber));
  var InnerSubscriber_2 = InnerSubscriber;

  var __moduleExports$24 = {
  	InnerSubscriber: InnerSubscriber_2
  };

  var root_1$4 = __moduleExports$1;
  var isArray_1$2 = __moduleExports$6;
  var isPromise_1 = __moduleExports$22;
  var isObject_1$1 = __moduleExports$7;
  var Observable_1$3 = __moduleExports;
  var iterator_1 = __moduleExports$23;
  var InnerSubscriber_1 = __moduleExports$24;
  var observable_1$1 = __moduleExports$13;
  function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
      var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
      if (destination.closed) {
          return null;
      }
      if (result instanceof Observable_1$3.Observable) {
          if (result._isScalar) {
              destination.next(result.value);
              destination.complete();
              return null;
          }
          else {
              return result.subscribe(destination);
          }
      }
      else if (isArray_1$2.isArray(result)) {
          for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
              destination.next(result[i]);
          }
          if (!destination.closed) {
              destination.complete();
          }
      }
      else if (isPromise_1.isPromise(result)) {
          result.then(function (value) {
              if (!destination.closed) {
                  destination.next(value);
                  destination.complete();
              }
          }, function (err) { return destination.error(err); })
              .then(null, function (err) {
              // Escaping the Promise trap: globally throw unhandled errors
              root_1$4.root.setTimeout(function () { throw err; });
          });
          return destination;
      }
      else if (result && typeof result[iterator_1.$$iterator] === 'function') {
          var iterator = result[iterator_1.$$iterator]();
          do {
              var item = iterator.next();
              if (item.done) {
                  destination.complete();
                  break;
              }
              destination.next(item.value);
              if (destination.closed) {
                  break;
              }
          } while (true);
      }
      else if (result && typeof result[observable_1$1.$$observable] === 'function') {
          var obs = result[observable_1$1.$$observable]();
          if (typeof obs.subscribe !== 'function') {
              destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
          }
          else {
              return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
          }
      }
      else {
          var value = isObject_1$1.isObject(result) ? 'an invalid object' : "'" + result + "'";
          var msg = ("You provided " + value + " where a stream was expected.")
              + ' You can provide an Observable, Promise, Array, or Iterable.';
          destination.error(new TypeError(msg));
      }
      return null;
  }
  var subscribeToResult_2 = subscribeToResult;

  var __moduleExports$21 = {
  	subscribeToResult: subscribeToResult_2
  };

  var __extends$5 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var OuterSubscriber_1 = __moduleExports$20;
  var subscribeToResult_1 = __moduleExports$21;
  /**
   * Converts a higher-order Observable into a first-order Observable which
   * concurrently delivers all values that are emitted on the inner Observables.
   *
   * <span class="informal">Flattens an Observable-of-Observables.</span>
   *
   * <img src="./img/mergeAll.png" width="100%">
   *
   * `mergeAll` subscribes to an Observable that emits Observables, also known as
   * a higher-order Observable. Each time it observes one of these emitted inner
   * Observables, it subscribes to that and delivers all the values from the
   * inner Observable on the output Observable. The output Observable only
   * completes once all inner Observables have completed. Any error delivered by
   * a inner Observable will be immediately emitted on the output Observable.
   *
   * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
   * var firstOrder = higherOrder.mergeAll();
   * firstOrder.subscribe(x => console.log(x));
   *
   * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
   * var firstOrder = higherOrder.mergeAll(2);
   * firstOrder.subscribe(x => console.log(x));
   *
   * @see {@link combineAll}
   * @see {@link concatAll}
   * @see {@link exhaust}
   * @see {@link merge}
   * @see {@link mergeMap}
   * @see {@link mergeMapTo}
   * @see {@link mergeScan}
   * @see {@link switch}
   * @see {@link zipAll}
   *
   * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
   * Observables being subscribed to concurrently.
   * @return {Observable} An Observable that emits values coming from all the
   * inner Observables emitted by the source Observable.
   * @method mergeAll
   * @owner Observable
   */
  function mergeAll(concurrent) {
      if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
      return this.lift(new MergeAllOperator(concurrent));
  }
  var mergeAll_2 = mergeAll;
  var MergeAllOperator = (function () {
      function MergeAllOperator(concurrent) {
          this.concurrent = concurrent;
      }
      MergeAllOperator.prototype.call = function (observer, source) {
          return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));
      };
      return MergeAllOperator;
  }());
  var MergeAllOperator_1 = MergeAllOperator;
  /**
   * We need this JSDoc comment for affecting ESDoc.
   * @ignore
   * @extends {Ignored}
   */
  var MergeAllSubscriber = (function (_super) {
      __extends$5(MergeAllSubscriber, _super);
      function MergeAllSubscriber(destination, concurrent) {
          _super.call(this, destination);
          this.concurrent = concurrent;
          this.hasCompleted = false;
          this.buffer = [];
          this.active = 0;
      }
      MergeAllSubscriber.prototype._next = function (observable) {
          if (this.active < this.concurrent) {
              this.active++;
              this.add(subscribeToResult_1.subscribeToResult(this, observable));
          }
          else {
              this.buffer.push(observable);
          }
      };
      MergeAllSubscriber.prototype._complete = function () {
          this.hasCompleted = true;
          if (this.active === 0 && this.buffer.length === 0) {
              this.destination.complete();
          }
      };
      MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
          var buffer = this.buffer;
          this.remove(innerSub);
          this.active--;
          if (buffer.length > 0) {
              this._next(buffer.shift());
          }
          else if (this.active === 0 && this.hasCompleted) {
              this.destination.complete();
          }
      };
      return MergeAllSubscriber;
  }(OuterSubscriber_1.OuterSubscriber));
  var MergeAllSubscriber_1 = MergeAllSubscriber;

  var __moduleExports$19 = {
  	mergeAll: mergeAll_2,
  	MergeAllOperator: MergeAllOperator_1,
  	MergeAllSubscriber: MergeAllSubscriber_1
  };

  var ArrayObservable_1 = __moduleExports$15;
  var mergeAll_1 = __moduleExports$19;
  var isScheduler_1 = __moduleExports$18;
  /* tslint:disable:max-line-length */
  /**
   * Creates an output Observable which concurrently emits all values from every
   * given input Observable.
   *
   * <span class="informal">Flattens multiple Observables together by blending
   * their values into one Observable.</span>
   *
   * <img src="./img/merge.png" width="100%">
   *
   * `merge` subscribes to each given input Observable (either the source or an
   * Observable given as argument), and simply forwards (without doing any
   * transformation) all the values from all the input Observables to the output
   * Observable. The output Observable only completes once all input Observables
   * have completed. Any error delivered by an input Observable will be immediately
   * emitted on the output Observable.
   *
   * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var timer = Rx.Observable.interval(1000);
   * var clicksOrTimer = clicks.merge(timer);
   * clicksOrTimer.subscribe(x => console.log(x));
   *
   * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
   * var timer1 = Rx.Observable.interval(1000).take(10);
   * var timer2 = Rx.Observable.interval(2000).take(6);
   * var timer3 = Rx.Observable.interval(500).take(10);
   * var concurrent = 2; // the argument
   * var merged = timer1.merge(timer2, timer3, concurrent);
   * merged.subscribe(x => console.log(x));
   *
   * @see {@link mergeAll}
   * @see {@link mergeMap}
   * @see {@link mergeMapTo}
   * @see {@link mergeScan}
   *
   * @param {Observable} other An input Observable to merge with the source
   * Observable. More than one input Observables may be given as argument.
   * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
   * Observables being subscribed to concurrently.
   * @param {Scheduler} [scheduler=null] The Scheduler to use for managing
   * concurrency of input Observables.
   * @return {Observable} an Observable that emits items that are the result of
   * every input Observable.
   * @method merge
   * @owner Observable
   */
  function merge$1() {
      var observables = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i - 0] = arguments[_i];
      }
      return this.lift.call(mergeStatic.apply(void 0, [this].concat(observables)));
  }
  var merge_2$1 = merge$1;
  /* tslint:enable:max-line-length */
  /**
   * Creates an output Observable which concurrently emits all values from every
   * given input Observable.
   *
   * <span class="informal">Flattens multiple Observables together by blending
   * their values into one Observable.</span>
   *
   * <img src="./img/merge.png" width="100%">
   *
   * `merge` subscribes to each given input Observable (as arguments), and simply
   * forwards (without doing any transformation) all the values from all the input
   * Observables to the output Observable. The output Observable only completes
   * once all input Observables have completed. Any error delivered by an input
   * Observable will be immediately emitted on the output Observable.
   *
   * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var timer = Rx.Observable.interval(1000);
   * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
   * clicksOrTimer.subscribe(x => console.log(x));
   *
   * // Results in the following:
   * // timer will emit ascending values, one every second(1000ms) to console
   * // clicks logs MouseEvents to console everytime the "document" is clicked
   * // Since the two streams are merged you see these happening
   * // as they occur.
   *
   * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
   * var timer1 = Rx.Observable.interval(1000).take(10);
   * var timer2 = Rx.Observable.interval(2000).take(6);
   * var timer3 = Rx.Observable.interval(500).take(10);
   * var concurrent = 2; // the argument
   * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
   * merged.subscribe(x => console.log(x));
   *
   * // Results in the following:
   * // - First timer1 and timer2 will run concurrently
   * // - timer1 will emit a value every 1000ms for 10 iterations
   * // - timer2 will emit a value every 2000ms for 6 iterations
   * // - after timer1 hits it's max iteration, timer2 will
   * //   continue, and timer3 will start to run concurrently with timer2
   * // - when timer2 hits it's max iteration it terminates, and
   * //   timer3 will continue to emit a value every 500ms until it is complete
   *
   * @see {@link mergeAll}
   * @see {@link mergeMap}
   * @see {@link mergeMapTo}
   * @see {@link mergeScan}
   *
   * @param {...Observable} observables Input Observables to merge together.
   * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
   * Observables being subscribed to concurrently.
   * @param {Scheduler} [scheduler=null] The Scheduler to use for managing
   * concurrency of input Observables.
   * @return {Observable} an Observable that emits items that are the result of
   * every input Observable.
   * @static true
   * @name merge
   * @owner Observable
   */
  function mergeStatic() {
      var observables = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i - 0] = arguments[_i];
      }
      var concurrent = Number.POSITIVE_INFINITY;
      var scheduler = null;
      var last = observables[observables.length - 1];
      if (isScheduler_1.isScheduler(last)) {
          scheduler = observables.pop();
          if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
              concurrent = observables.pop();
          }
      }
      else if (typeof last === 'number') {
          concurrent = observables.pop();
      }
      if (scheduler === null && observables.length === 1) {
          return observables[0];
      }
      return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
  }
  var mergeStatic_1 = mergeStatic;

  var __moduleExports$14 = {
  	merge: merge_2$1,
  	mergeStatic: mergeStatic_1
  };

  var merge_1 = __moduleExports$14;
  var merge_2 = merge_1.mergeStatic;

  var merge = {
  	merge: merge_2
  };

  var __extends$10 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  /**
   * An error thrown when an action is invalid because the object has been
   * unsubscribed.
   *
   * @see {@link Subject}
   * @see {@link BehaviorSubject}
   *
   * @class ObjectUnsubscribedError
   */
  var ObjectUnsubscribedError = (function (_super) {
      __extends$10(ObjectUnsubscribedError, _super);
      function ObjectUnsubscribedError() {
          var err = _super.call(this, 'object unsubscribed');
          this.name = err.name = 'ObjectUnsubscribedError';
          this.stack = err.stack;
          this.message = err.message;
      }
      return ObjectUnsubscribedError;
  }(Error));
  var ObjectUnsubscribedError_2 = ObjectUnsubscribedError;

  var __moduleExports$28 = {
  	ObjectUnsubscribedError: ObjectUnsubscribedError_2
  };

  var __extends$11 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscription_1$3 = __moduleExports$5;
  /**
   * We need this JSDoc comment for affecting ESDoc.
   * @ignore
   * @extends {Ignored}
   */
  var SubjectSubscription = (function (_super) {
      __extends$11(SubjectSubscription, _super);
      function SubjectSubscription(subject, subscriber) {
          _super.call(this);
          this.subject = subject;
          this.subscriber = subscriber;
          this.closed = false;
      }
      SubjectSubscription.prototype.unsubscribe = function () {
          if (this.closed) {
              return;
          }
          this.closed = true;
          var subject = this.subject;
          var observers = subject.observers;
          this.subject = null;
          if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
              return;
          }
          var subscriberIndex = observers.indexOf(this.subscriber);
          if (subscriberIndex !== -1) {
              observers.splice(subscriberIndex, 1);
          }
      };
      return SubjectSubscription;
  }(Subscription_1$3.Subscription));
  var SubjectSubscription_2 = SubjectSubscription;

  var __moduleExports$29 = {
  	SubjectSubscription: SubjectSubscription_2
  };

  var __extends$9 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1$5 = __moduleExports;
  var Subscriber_1$4 = __moduleExports$3;
  var Subscription_1$2 = __moduleExports$5;
  var ObjectUnsubscribedError_1 = __moduleExports$28;
  var SubjectSubscription_1 = __moduleExports$29;
  var rxSubscriber_1$2 = __moduleExports$12;
  /**
   * @class SubjectSubscriber<T>
   */
  var SubjectSubscriber = (function (_super) {
      __extends$9(SubjectSubscriber, _super);
      function SubjectSubscriber(destination) {
          _super.call(this, destination);
          this.destination = destination;
      }
      return SubjectSubscriber;
  }(Subscriber_1$4.Subscriber));
  var SubjectSubscriber_1 = SubjectSubscriber;
  /**
   * @class Subject<T>
   */
  var Subject = (function (_super) {
      __extends$9(Subject, _super);
      function Subject() {
          _super.call(this);
          this.observers = [];
          this.closed = false;
          this.isStopped = false;
          this.hasError = false;
          this.thrownError = null;
      }
      Subject.prototype[rxSubscriber_1$2.$$rxSubscriber] = function () {
          return new SubjectSubscriber(this);
      };
      Subject.prototype.lift = function (operator) {
          var subject = new AnonymousSubject(this, this);
          subject.operator = operator;
          return subject;
      };
      Subject.prototype.next = function (value) {
          if (this.closed) {
              throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
          }
          if (!this.isStopped) {
              var observers = this.observers;
              var len = observers.length;
              var copy = observers.slice();
              for (var i = 0; i < len; i++) {
                  copy[i].next(value);
              }
          }
      };
      Subject.prototype.error = function (err) {
          if (this.closed) {
              throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
          }
          this.hasError = true;
          this.thrownError = err;
          this.isStopped = true;
          var observers = this.observers;
          var len = observers.length;
          var copy = observers.slice();
          for (var i = 0; i < len; i++) {
              copy[i].error(err);
          }
          this.observers.length = 0;
      };
      Subject.prototype.complete = function () {
          if (this.closed) {
              throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
          }
          this.isStopped = true;
          var observers = this.observers;
          var len = observers.length;
          var copy = observers.slice();
          for (var i = 0; i < len; i++) {
              copy[i].complete();
          }
          this.observers.length = 0;
      };
      Subject.prototype.unsubscribe = function () {
          this.isStopped = true;
          this.closed = true;
          this.observers = null;
      };
      Subject.prototype._subscribe = function (subscriber) {
          if (this.closed) {
              throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
          }
          else if (this.hasError) {
              subscriber.error(this.thrownError);
              return Subscription_1$2.Subscription.EMPTY;
          }
          else if (this.isStopped) {
              subscriber.complete();
              return Subscription_1$2.Subscription.EMPTY;
          }
          else {
              this.observers.push(subscriber);
              return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
          }
      };
      Subject.prototype.asObservable = function () {
          var observable = new Observable_1$5.Observable();
          observable.source = this;
          return observable;
      };
      Subject.create = function (destination, source) {
          return new AnonymousSubject(destination, source);
      };
      return Subject;
  }(Observable_1$5.Observable));
  var Subject$1 = Subject;
  /**
   * @class AnonymousSubject<T>
   */
  var AnonymousSubject = (function (_super) {
      __extends$9(AnonymousSubject, _super);
      function AnonymousSubject(destination, source) {
          _super.call(this);
          this.destination = destination;
          this.source = source;
      }
      AnonymousSubject.prototype.next = function (value) {
          var destination = this.destination;
          if (destination && destination.next) {
              destination.next(value);
          }
      };
      AnonymousSubject.prototype.error = function (err) {
          var destination = this.destination;
          if (destination && destination.error) {
              this.destination.error(err);
          }
      };
      AnonymousSubject.prototype.complete = function () {
          var destination = this.destination;
          if (destination && destination.complete) {
              this.destination.complete();
          }
      };
      AnonymousSubject.prototype._subscribe = function (subscriber) {
          var source = this.source;
          if (source) {
              return this.source.subscribe(subscriber);
          }
          else {
              return Subscription_1$2.Subscription.EMPTY;
          }
      };
      return AnonymousSubject;
  }(Subject));
  var AnonymousSubject_1 = AnonymousSubject;

  var __moduleExports$27 = {
  	SubjectSubscriber: SubjectSubscriber_1,
  	Subject: Subject$1,
  	AnonymousSubject: AnonymousSubject_1
  };

  var __extends$8 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subject_1$1 = __moduleExports$27;
  var Observable_1$4 = __moduleExports;
  var Subscriber_1$3 = __moduleExports$3;
  var Subscription_1$1 = __moduleExports$5;
  /**
   * @class ConnectableObservable<T>
   */
  var ConnectableObservable = (function (_super) {
      __extends$8(ConnectableObservable, _super);
      function ConnectableObservable(source, subjectFactory) {
          _super.call(this);
          this.source = source;
          this.subjectFactory = subjectFactory;
          this._refCount = 0;
      }
      ConnectableObservable.prototype._subscribe = function (subscriber) {
          return this.getSubject().subscribe(subscriber);
      };
      ConnectableObservable.prototype.getSubject = function () {
          var subject = this._subject;
          if (!subject || subject.isStopped) {
              this._subject = this.subjectFactory();
          }
          return this._subject;
      };
      ConnectableObservable.prototype.connect = function () {
          var connection = this._connection;
          if (!connection) {
              connection = this._connection = new Subscription_1$1.Subscription();
              connection.add(this.source
                  .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
              if (connection.closed) {
                  this._connection = null;
                  connection = Subscription_1$1.Subscription.EMPTY;
              }
              else {
                  this._connection = connection;
              }
          }
          return connection;
      };
      ConnectableObservable.prototype.refCount = function () {
          return this.lift(new RefCountOperator(this));
      };
      return ConnectableObservable;
  }(Observable_1$4.Observable));
  var ConnectableObservable_2 = ConnectableObservable;
  var connectableObservableDescriptor = {
      operator: { value: null },
      _refCount: { value: 0, writable: true },
      _subscribe: { value: ConnectableObservable.prototype._subscribe },
      getSubject: { value: ConnectableObservable.prototype.getSubject },
      connect: { value: ConnectableObservable.prototype.connect },
      refCount: { value: ConnectableObservable.prototype.refCount }
  };
  var ConnectableSubscriber = (function (_super) {
      __extends$8(ConnectableSubscriber, _super);
      function ConnectableSubscriber(destination, connectable) {
          _super.call(this, destination);
          this.connectable = connectable;
      }
      ConnectableSubscriber.prototype._error = function (err) {
          this._unsubscribe();
          _super.prototype._error.call(this, err);
      };
      ConnectableSubscriber.prototype._complete = function () {
          this._unsubscribe();
          _super.prototype._complete.call(this);
      };
      ConnectableSubscriber.prototype._unsubscribe = function () {
          var connectable = this.connectable;
          if (connectable) {
              this.connectable = null;
              var connection = connectable._connection;
              connectable._refCount = 0;
              connectable._subject = null;
              connectable._connection = null;
              if (connection) {
                  connection.unsubscribe();
              }
          }
      };
      return ConnectableSubscriber;
  }(Subject_1$1.SubjectSubscriber));
  var RefCountOperator = (function () {
      function RefCountOperator(connectable) {
          this.connectable = connectable;
      }
      RefCountOperator.prototype.call = function (subscriber, source) {
          var connectable = this.connectable;
          connectable._refCount++;
          var refCounter = new RefCountSubscriber(subscriber, connectable);
          var subscription = source.subscribe(refCounter);
          if (!refCounter.closed) {
              refCounter.connection = connectable.connect();
          }
          return subscription;
      };
      return RefCountOperator;
  }());
  var RefCountSubscriber = (function (_super) {
      __extends$8(RefCountSubscriber, _super);
      function RefCountSubscriber(destination, connectable) {
          _super.call(this, destination);
          this.connectable = connectable;
      }
      RefCountSubscriber.prototype._unsubscribe = function () {
          var connectable = this.connectable;
          if (!connectable) {
              this.connection = null;
              return;
          }
          this.connectable = null;
          var refCount = connectable._refCount;
          if (refCount <= 0) {
              this.connection = null;
              return;
          }
          connectable._refCount = refCount - 1;
          if (refCount > 1) {
              this.connection = null;
              return;
          }
          ///
          // Compare the local RefCountSubscriber's connection Subscription to the
          // connection Subscription on the shared ConnectableObservable. In cases
          // where the ConnectableObservable source synchronously emits values, and
          // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
          // execution continues to here before the RefCountOperator has a chance to
          // supply the RefCountSubscriber with the shared connection Subscription.
          // For example:
          // ```
          // Observable.range(0, 10)
          //   .publish()
          //   .refCount()
          //   .take(5)
          //   .subscribe();
          // ```
          // In order to account for this case, RefCountSubscriber should only dispose
          // the ConnectableObservable's shared connection Subscription if the
          // connection Subscription exists, *and* either:
          //   a. RefCountSubscriber doesn't have a reference to the shared connection
          //      Subscription yet, or,
          //   b. RefCountSubscriber's connection Subscription reference is identical
          //      to the shared connection Subscription
          ///
          var connection = this.connection;
          var sharedConnection = connectable._connection;
          this.connection = null;
          if (sharedConnection && (!connection || sharedConnection === connection)) {
              sharedConnection.unsubscribe();
          }
      };
      return RefCountSubscriber;
  }(Subscriber_1$3.Subscriber));

  var __moduleExports$26 = {
  	ConnectableObservable: ConnectableObservable_2,
  	connectableObservableDescriptor: connectableObservableDescriptor
  };

  var ConnectableObservable_1 = __moduleExports$26;
  /* tslint:disable:max-line-length */
  /**
   * Returns an Observable that emits the results of invoking a specified selector on items
   * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
   *
   * <img src="./img/multicast.png" width="100%">
   *
   * @param {Function|Subject} Factory function to create an intermediate subject through
   * which the source sequence's elements will be multicast to the selector function
   * or Subject to push source elements into.
   * @param {Function} Optional selector function that can use the multicasted source stream
   * as many times as needed, without causing multiple subscriptions to the source stream.
   * Subscribers to the given source will receive all notifications of the source from the
   * time of the subscription forward.
   * @return {Observable} an Observable that emits the results of invoking the selector
   * on the items emitted by a `ConnectableObservable` that shares a single subscription to
   * the underlying stream.
   * @method multicast
   * @owner Observable
   */
  function multicast(subjectOrSubjectFactory, selector) {
      var subjectFactory;
      if (typeof subjectOrSubjectFactory === 'function') {
          subjectFactory = subjectOrSubjectFactory;
      }
      else {
          subjectFactory = function subjectFactory() {
              return subjectOrSubjectFactory;
          };
      }
      if (typeof selector === 'function') {
          return this.lift(new MulticastOperator(subjectFactory, selector));
      }
      var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
      connectable.source = this;
      connectable.subjectFactory = subjectFactory;
      return connectable;
  }
  var multicast_2 = multicast;
  var MulticastOperator = (function () {
      function MulticastOperator(subjectFactory, selector) {
          this.subjectFactory = subjectFactory;
          this.selector = selector;
      }
      MulticastOperator.prototype.call = function (subscriber, source) {
          var selector = this.selector;
          var subject = this.subjectFactory();
          var subscription = selector(subject).subscribe(subscriber);
          subscription.add(source.subscribe(subject));
          return subscription;
      };
      return MulticastOperator;
  }());
  var MulticastOperator_1 = MulticastOperator;

  var __moduleExports$25 = {
  	multicast: multicast_2,
  	MulticastOperator: MulticastOperator_1
  };

  var multicast_1 = __moduleExports$25;
  var Subject_1 = __moduleExports$27;
  function shareSubjectFactory() {
      return new Subject_1.Subject();
  }
  /**
   * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
   * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
   * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
   * This is an alias for .publish().refCount().
   *
   * <img src="./img/share.png" width="100%">
   *
   * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers
   * @method share
   * @owner Observable
   */
  function share() {
      return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
  }
  var share_2 = share;
  ;

  var share_1 = {
  	share: share_2
  };

  /**
   * Wraps Javascript Objects
   */
  class StringMapWrapper {
      static merge(m1, m2) {
          const m = {};
          for (const k of Object.keys(m1)) {
              m[k] = m1[k];
          }
          for (const k of Object.keys(m2)) {
              m[k] = m2[k];
          }
          return m;
      }
      static equals(m1, m2) {
          const k1 = Object.keys(m1);
          const k2 = Object.keys(m2);
          if (k1.length != k2.length) {
              return false;
          }
          for (let i = 0; i < k1.length; i++) {
              const key = k1[i];
              if (m1[key] !== m2[key]) {
                  return false;
              }
          }
          return true;
      }
  }
  class ListWrapper {
      static findLast(arr, condition) {
          for (let i = arr.length - 1; i >= 0; i--) {
              if (condition(arr[i])) {
                  return arr[i];
              }
          }
          return null;
      }
      static removeAll(list, items) {
          for (let i = 0; i < items.length; ++i) {
              const index = list.indexOf(items[i]);
              if (index > -1) {
                  list.splice(index, 1);
              }
          }
      }
      static remove(list, el) {
          const index = list.indexOf(el);
          if (index > -1) {
              list.splice(index, 1);
              return true;
          }
          return false;
      }
      static equals(a, b) {
          if (a.length != b.length)
              return false;
          for (let i = 0; i < a.length; ++i) {
              if (a[i] !== b[i])
                  return false;
          }
          return true;
      }
      static flatten(list) {
          return list.reduce((flat, item) => {
              const flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
              return flat.concat(flatItem);
          }, []);
      }
  }
  function isListLikeIterable(obj) {
      if (!isJsObject(obj))
          return false;
      return Array.isArray(obj) ||
          (!(obj instanceof Map) &&
              getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
  }
  function areIterablesEqual(a, b, comparator) {
      const iterator1 = a[getSymbolIterator()]();
      const iterator2 = b[getSymbolIterator()]();
      while (true) {
          const item1 = iterator1.next();
          const item2 = iterator2.next();
          if (item1.done && item2.done)
              return true;
          if (item1.done || item2.done)
              return false;
          if (!comparator(item1.value, item2.value))
              return false;
      }
  }
  function iterateListLike(obj, fn) {
      if (Array.isArray(obj)) {
          for (let i = 0; i < obj.length; i++) {
              fn(obj[i]);
          }
      }
      else {
          const iterator = obj[getSymbolIterator()]();
          let item;
          while (!((item = iterator.next()).done)) {
              fn(item.value);
          }
      }
  }

  /**
   * Determine if the argument is shaped like a Promise
   */
  function isPromise$1(obj) {
      // allow any Promise/A+ compliant thenable.
      // It's up to the caller to ensure that obj.then conforms to the spec
      return !!obj && typeof obj.then === 'function';
  }

  /**
   * A function that will be executed when an application is initialized.
   * @experimental
   */
  const APP_INITIALIZER = new InjectionToken('Application Initializer');
  /**
   * A class that reflects the state of running {@link APP_INITIALIZER}s.
   *
   * @experimental
   */
  class ApplicationInitStatus {
      constructor(appInits) {
          this._done = false;
          const asyncInitPromises = [];
          if (appInits) {
              for (let i = 0; i < appInits.length; i++) {
                  const initResult = appInits[i]();
                  if (isPromise$1(initResult)) {
                      asyncInitPromises.push(initResult);
                  }
              }
          }
          this._donePromise = Promise.all(asyncInitPromises).then(() => { this._done = true; });
          if (asyncInitPromises.length === 0) {
              this._done = true;
          }
      }
      get done() { return this._done; }
      get donePromise() { return this._donePromise; }
  }
  ApplicationInitStatus.decorators = [
      { type: Injectable },
  ];
  /** @nocollapse */
  ApplicationInitStatus.ctorParameters = () => [
      { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
  ];

  /**
   * A DI Token representing a unique string id assigned to the application by Angular and used
   * primarily for prefixing application attributes and CSS styles when
   * {@link ViewEncapsulation#Emulated} is being used.
   *
   * If you need to avoid randomly generated value to be used as an application id, you can provide
   * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
   * using this token.
   * @experimental
   */
  const APP_ID = new InjectionToken('AppId');
  function _appIdRandomProviderFactory() {
      return `${_randomChar()}${_randomChar()}${_randomChar()}`;
  }
  /**
   * Providers that will generate a random APP_ID_TOKEN.
   * @experimental
   */
  const APP_ID_RANDOM_PROVIDER = {
      provide: APP_ID,
      useFactory: _appIdRandomProviderFactory,
      deps: [],
  };
  function _randomChar() {
      return String.fromCharCode(97 + Math.floor(Math.random() * 25));
  }
  /**
   * A function that will be executed when a platform is initialized.
   * @experimental
   */
  const PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
  /**
   * A token that indicates an opaque platform id.
   * @experimental
   */
  const PLATFORM_ID = new InjectionToken('Platform ID');
  /**
   * All callbacks provided via this token will be called for every component that is bootstrapped.
   * Signature of the callback:
   *
   * `(componentRef: ComponentRef) => void`.
   *
   * @experimental
   */
  const APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
  /**
   * A token which indicates the root directory of the application
   * @experimental
   */
  const PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');

  class Console {
      log(message) { print(message); }
      // Note: for reporting errors use `DOM.logError()` as it is platform specific
      warn(message) { warn(message); }
  }
  Console.decorators = [
      { type: Injectable },
  ];
  /** @nocollapse */
  Console.ctorParameters = () => [];

  /**
   * Combination of NgModuleFactory and ComponentFactorys.
   *
   * @experimental
   */
  class ModuleWithComponentFactories {
      constructor(ngModuleFactory, componentFactories) {
          this.ngModuleFactory = ngModuleFactory;
          this.componentFactories = componentFactories;
      }
  }
  function _throwError() {
      throw new Error(`Runtime compiler is not loaded`);
  }
  /**
   * Low-level service for running the angular compiler during runtime
   * to create {@link ComponentFactory}s, which
   * can later be used to create and render a Component instance.
   *
   * Each `@NgModule` provides an own `Compiler` to its injector,
   * that will use the directives/pipes of the ng module for compilation
   * of components.
   * @stable
   */
  class Compiler {
      /**
       * Compiles the given NgModule and all of its components. All templates of the components listed
       * in `entryComponents` have to be inlined.
       */
      compileModuleSync(moduleType) { throw _throwError(); }
      /**
       * Compiles the given NgModule and all of its components
       */
      compileModuleAsync(moduleType) { throw _throwError(); }
      /**
       * Same as {@link compileModuleSync} but also creates ComponentFactories for all components.
       */
      compileModuleAndAllComponentsSync(moduleType) {
          throw _throwError();
      }
      /**
       * Same as {@link compileModuleAsync} but also creates ComponentFactories for all components.
       */
      compileModuleAndAllComponentsAsync(moduleType) {
          throw _throwError();
      }
      /**
       * Exposes the CSS-style selectors that have been used in `ngContent` directives within
       * the template of the given component.
       * This is used by the `upgrade` library to compile the appropriate transclude content
       * in the AngularJS wrapper component.
       */
      getNgContentSelectors(component) { throw _throwError(); }
      /**
       * Clears all caches.
       */
      clearCache() { }
      /**
       * Clears the cache for the given component/ngModule.
       */
      clearCacheFor(type) { }
  }
  Compiler.decorators = [
      { type: Injectable },
  ];
  /** @nocollapse */
  Compiler.ctorParameters = () => [];
  /**
   * Token to provide CompilerOptions in the platform injector.
   *
   * @experimental
   */
  const COMPILER_OPTIONS = new InjectionToken('compilerOptions');
  /**
   * A factory for creating a Compiler
   *
   * @experimental
   */
  class CompilerFactory {
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * A wrapper around a native element inside of a View.
   *
   * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
   * element.
   *
   * @security Permitting direct access to the DOM can make your application more vulnerable to
   * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
   * [Security Guide](http://g.co/ng/security).
   *
   * @stable
   */
  // Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
  // i.e. users have to ask for what they need. With that, we can build better analysis tools
  // and could do better codegen in the future.
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ class ElementRef {
      constructor(nativeElement) { this.nativeElement = nativeElement; }
  }

  /**
   * Use by directives and components to emit custom Events.
   *
   * ### Examples
   *
   * In the following example, `Zippy` alternatively emits `open` and `close` events when its
   * title gets clicked:
   *
   * ```
   * @Component({
   *   selector: 'zippy',
   *   template: `
   *   <div class="zippy">
   *     <div (click)="toggle()">Toggle</div>
   *     <div [hidden]="!visible">
   *       <ng-content></ng-content>
   *     </div>
   *  </div>`})
   * export class Zippy {
   *   visible: boolean = true;
   *   @Output() open: EventEmitter<any> = new EventEmitter();
   *   @Output() close: EventEmitter<any> = new EventEmitter();
   *
   *   toggle() {
   *     this.visible = !this.visible;
   *     if (this.visible) {
   *       this.open.emit(null);
   *     } else {
   *       this.close.emit(null);
   *     }
   *   }
   * }
   * ```
   *
   * The events payload can be accessed by the parameter `$event` on the components output event
   * handler:
   *
   * ```
   * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
   * ```
   *
   * Uses Rx.Observable but provides an adapter to make it work as specified here:
   * https://github.com/jhusain/observable-spec
   *
   * Once a reference implementation of the spec is available, switch to it.
   * @stable
   */
  class EventEmitter extends Subject$1 {
      /**
       * Creates an instance of [EventEmitter], which depending on [isAsync],
       * delivers events synchronously or asynchronously.
       */
      constructor(isAsync = false) {
          super();
          this.__isAsync = isAsync;
      }
      emit(value) { super.next(value); }
      subscribe(generatorOrNext, error, complete) {
          let schedulerFn;
          let errorFn = (err) => null;
          let completeFn = () => null;
          if (generatorOrNext && typeof generatorOrNext === 'object') {
              schedulerFn = this.__isAsync ? (value) => {
                  setTimeout(() => generatorOrNext.next(value));
              } : (value) => { generatorOrNext.next(value); };
              if (generatorOrNext.error) {
                  errorFn = this.__isAsync ? (err) => { setTimeout(() => generatorOrNext.error(err)); } :
                      (err) => { generatorOrNext.error(err); };
              }
              if (generatorOrNext.complete) {
                  completeFn = this.__isAsync ? () => { setTimeout(() => generatorOrNext.complete()); } :
                      () => { generatorOrNext.complete(); };
              }
          }
          else {
              schedulerFn = this.__isAsync ? (value) => { setTimeout(() => generatorOrNext(value)); } :
                  (value) => { generatorOrNext(value); };
              if (error) {
                  errorFn =
                      this.__isAsync ? (err) => { setTimeout(() => error(err)); } : (err) => { error(err); };
              }
              if (complete) {
                  completeFn =
                      this.__isAsync ? () => { setTimeout(() => complete()); } : () => { complete(); };
              }
          }
          return super.subscribe(schedulerFn, errorFn, completeFn);
      }
  }

  /**
   * An injectable service for executing work inside or outside of the Angular zone.
   *
   * The most common use of this service is to optimize performance when starting a work consisting of
   * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
   * Angular. Such tasks can be kicked off via {@link runOutsideAngular} and if needed, these tasks
   * can reenter the Angular zone via {@link run}.
   *
   * <!-- TODO: add/fix links to:
   *   - docs explaining zones and the use of zones in Angular and change-detection
   *   - link to runOutsideAngular/run (throughout this file!)
   *   -->
   *
   * ### Example
   *
   * ```
   * import {Component, NgZone} from '@angular/core';
   * import {NgIf} from '@angular/common';
   *
   * @Component({
   *   selector: 'ng-zone-demo'.
   *   template: `
   *     <h2>Demo: NgZone</h2>
   *
   *     <p>Progress: {{progress}}%</p>
   *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
   *
   *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
   *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
   *   `,
   * })
   * export class NgZoneDemo {
   *   progress: number = 0;
   *   label: string;
   *
   *   constructor(private _ngZone: NgZone) {}
   *
   *   // Loop inside the Angular zone
   *   // so the UI DOES refresh after each setTimeout cycle
   *   processWithinAngularZone() {
   *     this.label = 'inside';
   *     this.progress = 0;
   *     this._increaseProgress(() => console.log('Inside Done!'));
   *   }
   *
   *   // Loop outside of the Angular zone
   *   // so the UI DOES NOT refresh after each setTimeout cycle
   *   processOutsideOfAngularZone() {
   *     this.label = 'outside';
   *     this.progress = 0;
   *     this._ngZone.runOutsideAngular(() => {
   *       this._increaseProgress(() => {
   *       // reenter the Angular zone and display done
   *       this._ngZone.run(() => {console.log('Outside Done!') });
   *     }}));
   *   }
   *
   *   _increaseProgress(doneCallback: () => void) {
   *     this.progress += 1;
   *     console.log(`Current progress: ${this.progress}%`);
   *
   *     if (this.progress < 100) {
   *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
   *     } else {
   *       doneCallback();
   *     }
   *   }
   * }
   * ```
   *
   * @experimental
   */
  class NgZone {
      constructor({ enableLongStackTrace = false }) {
          this._hasPendingMicrotasks = false;
          this._hasPendingMacrotasks = false;
          this._isStable = true;
          this._nesting = 0;
          this._onUnstable = new EventEmitter(false);
          this._onMicrotaskEmpty = new EventEmitter(false);
          this._onStable = new EventEmitter(false);
          this._onErrorEvents = new EventEmitter(false);
          if (typeof Zone == 'undefined') {
              throw new Error('Angular requires Zone.js prolyfill.');
          }
          Zone.assertZonePatched();
          this.outer = this.inner = Zone.current;
          if (Zone['wtfZoneSpec']) {
              this.inner = this.inner.fork(Zone['wtfZoneSpec']);
          }
          if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
              this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
          }
          this.forkInnerZoneWithAngularBehavior();
      }
      static isInAngularZone() { return Zone.current.get('isAngularZone') === true; }
      static assertInAngularZone() {
          if (!NgZone.isInAngularZone()) {
              throw new Error('Expected to be in Angular Zone, but it is not!');
          }
      }
      static assertNotInAngularZone() {
          if (NgZone.isInAngularZone()) {
              throw new Error('Expected to not be in Angular Zone, but it is!');
          }
      }
      /**
       * Executes the `fn` function synchronously within the Angular zone and returns value returned by
       * the function.
       *
       * Running functions via `run` allows you to reenter Angular zone from a task that was executed
       * outside of the Angular zone (typically started via {@link runOutsideAngular}).
       *
       * Any future tasks or microtasks scheduled from within this function will continue executing from
       * within the Angular zone.
       *
       * If a synchronous error happens it will be rethrown and not reported via `onError`.
       */
      run(fn) { return this.inner.run(fn); }
      /**
       * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
       * rethrown.
       */
      runGuarded(fn) { return this.inner.runGuarded(fn); }
      /**
       * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
       * the function.
       *
       * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
       * doesn't trigger Angular change-detection or is subject to Angular's error handling.
       *
       * Any future tasks or microtasks scheduled from within this function will continue executing from
       * outside of the Angular zone.
       *
       * Use {@link run} to reenter the Angular zone and do work that updates the application model.
       */
      runOutsideAngular(fn) { return this.outer.run(fn); }
      /**
       * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
       */
      get onUnstable() { return this._onUnstable; }
      /**
       * Notifies when there is no more microtasks enqueue in the current VM Turn.
       * This is a hint for Angular to do change detection, which may enqueue more microtasks.
       * For this reason this event can fire multiple times per VM Turn.
       */
      get onMicrotaskEmpty() { return this._onMicrotaskEmpty; }
      /**
       * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
       * implies we are about to relinquish VM turn.
       * This event gets called just once.
       */
      get onStable() { return this._onStable; }
      /**
       * Notify that an error has been delivered.
       */
      get onError() { return this._onErrorEvents; }
      /**
       * Whether there are no outstanding microtasks or macrotasks.
       */
      get isStable() { return this._isStable; }
      get hasPendingMicrotasks() { return this._hasPendingMicrotasks; }
      get hasPendingMacrotasks() { return this._hasPendingMacrotasks; }
      checkStable() {
          if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
              try {
                  this._nesting++;
                  this._onMicrotaskEmpty.emit(null);
              }
              finally {
                  this._nesting--;
                  if (!this._hasPendingMicrotasks) {
                      try {
                          this.runOutsideAngular(() => this._onStable.emit(null));
                      }
                      finally {
                          this._isStable = true;
                      }
                  }
              }
          }
      }
      forkInnerZoneWithAngularBehavior() {
          this.inner = this.inner.fork({
              name: 'angular',
              properties: { 'isAngularZone': true },
              onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {
                  try {
                      this.onEnter();
                      return delegate.invokeTask(target, task, applyThis, applyArgs);
                  }
                  finally {
                      this.onLeave();
                  }
              },
              onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {
                  try {
                      this.onEnter();
                      return delegate.invoke(target, callback, applyThis, applyArgs, source);
                  }
                  finally {
                      this.onLeave();
                  }
              },
              onHasTask: (delegate, current, target, hasTaskState) => {
                  delegate.hasTask(target, hasTaskState);
                  if (current === target) {
                      // We are only interested in hasTask events which originate from our zone
                      // (A child hasTask event is not interesting to us)
                      if (hasTaskState.change == 'microTask') {
                          this.setHasMicrotask(hasTaskState.microTask);
                      }
                      else if (hasTaskState.change == 'macroTask') {
                          this.setHasMacrotask(hasTaskState.macroTask);
                      }
                  }
              },
              onHandleError: (delegate, current, target, error) => {
                  delegate.handleError(target, error);
                  this.triggerError(error);
                  return false;
              }
          });
      }
      onEnter() {
          this._nesting++;
          if (this._isStable) {
              this._isStable = false;
              this._onUnstable.emit(null);
          }
      }
      onLeave() {
          this._nesting--;
          this.checkStable();
      }
      setHasMicrotask(hasMicrotasks) {
          this._hasPendingMicrotasks = hasMicrotasks;
          this.checkStable();
      }
      setHasMacrotask(hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; }
      triggerError(error) { this._onErrorEvents.emit(error); }
  }

  class AnimationQueue {
      constructor(_zone) {
          this._zone = _zone;
          this.entries = [];
      }
      enqueue(player) { this.entries.push(player); }
      flush() {
          // given that each animation player may set aside
          // microtasks and rely on DOM-based events, this
          // will cause Angular to run change detection after
          // each request. This sidesteps the issue. If a user
          // hooks into an animation via (@anim.start) or (@anim.done)
          // then those methods will automatically trigger change
          // detection by wrapping themselves inside of a zone
          if (this.entries.length) {
              this._zone.runOutsideAngular(() => {
                  // this code is wrapped into a single promise such that the
                  // onStart and onDone player callbacks are triggered outside
                  // of the digest cycle of animations
                  Promise.resolve(null).then(() => this._triggerAnimations());
              });
          }
      }
      _triggerAnimations() {
          NgZone.assertNotInAngularZone();
          while (this.entries.length) {
              const player = this.entries.shift();
              // in the event that an animation throws an error then we do
              // not want to re-run animations on any previous animations
              // if they have already been kicked off beforehand
              if (!player.hasStarted()) {
                  player.play();
              }
          }
      }
  }
  AnimationQueue.decorators = [
      { type: Injectable },
  ];
  /** @nocollapse */
  AnimationQueue.ctorParameters = () => [
      { type: NgZone, },
  ];

  class DefaultIterableDifferFactory {
      constructor() { }
      supports(obj) { return isListLikeIterable(obj); }
      /**
       * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
       */
      create(cdRefOrTrackBy, trackByFn) {
          return new DefaultIterableDiffer(trackByFn || cdRefOrTrackBy);
      }
  }
  const trackByIdentity = (index, item) => item;
  /**
   * @deprecated v4.0.0 - Should not be part of public API.
   */
  class DefaultIterableDiffer {
      constructor(_trackByFn) {
          this._trackByFn = _trackByFn;
          this._length = null;
          this._collection = null;
          // Keeps track of the used records at any point in time (during & across `_check()` calls)
          this._linkedRecords = null;
          // Keeps track of the removed records at any point in time during `_check()` calls.
          this._unlinkedRecords = null;
          this._previousItHead = null;
          this._itHead = null;
          this._itTail = null;
          this._additionsHead = null;
          this._additionsTail = null;
          this._movesHead = null;
          this._movesTail = null;
          this._removalsHead = null;
          this._removalsTail = null;
          // Keeps track of records where custom track by is the same, but item identity has changed
          this._identityChangesHead = null;
          this._identityChangesTail = null;
          this._trackByFn = this._trackByFn || trackByIdentity;
      }
      get collection() { return this._collection; }
      get length() { return this._length; }
      forEachItem(fn) {
          let record;
          for (record = this._itHead; record !== null; record = record._next) {
              fn(record);
          }
      }
      forEachOperation(fn) {
          let nextIt = this._itHead;
          let nextRemove = this._removalsHead;
          let addRemoveOffset = 0;
          let moveOffsets = null;
          while (nextIt || nextRemove) {
              // Figure out which is the next record to process
              // Order: remove, add, move
              const record = !nextRemove ||
                  nextIt &&
                      nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?
                  nextIt :
                  nextRemove;
              const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
              const currentIndex = record.currentIndex;
              // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
              if (record === nextRemove) {
                  addRemoveOffset--;
                  nextRemove = nextRemove._nextRemoved;
              }
              else {
                  nextIt = nextIt._next;
                  if (record.previousIndex == null) {
                      addRemoveOffset++;
                  }
                  else {
                      // INVARIANT:  currentIndex < previousIndex
                      if (!moveOffsets)
                          moveOffsets = [];
                      const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                      const localCurrentIndex = currentIndex - addRemoveOffset;
                      if (localMovePreviousIndex != localCurrentIndex) {
                          for (let i = 0; i < localMovePreviousIndex; i++) {
                              const offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
                              const index = offset + i;
                              if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                                  moveOffsets[i] = offset + 1;
                              }
                          }
                          const previousIndex = record.previousIndex;
                          moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                      }
                  }
              }
              if (adjPreviousIndex !== currentIndex) {
                  fn(record, adjPreviousIndex, currentIndex);
              }
          }
      }
      forEachPreviousItem(fn) {
          let record;
          for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
              fn(record);
          }
      }
      forEachAddedItem(fn) {
          let record;
          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
              fn(record);
          }
      }
      forEachMovedItem(fn) {
          let record;
          for (record = this._movesHead; record !== null; record = record._nextMoved) {
              fn(record);
          }
      }
      forEachRemovedItem(fn) {
          let record;
          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
              fn(record);
          }
      }
      forEachIdentityChange(fn) {
          let record;
          for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
              fn(record);
          }
      }
      diff(collection) {
          if (isBlank(collection))
              collection = [];
          if (!isListLikeIterable(collection)) {
              throw new Error(`Error trying to diff '${collection}'`);
          }
          if (this.check(collection)) {
              return this;
          }
          else {
              return null;
          }
      }
      onDestroy() { }
      // todo(vicb): optim for UnmodifiableListView (frozen arrays)
      check(collection) {
          this._reset();
          let record = this._itHead;
          let mayBeDirty = false;
          let index;
          let item;
          let itemTrackBy;
          if (Array.isArray(collection)) {
              this._length = collection.length;
              for (let index = 0; index < this._length; index++) {
                  item = collection[index];
                  itemTrackBy = this._trackByFn(index, item);
                  if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                      record = this._mismatch(record, item, itemTrackBy, index);
                      mayBeDirty = true;
                  }
                  else {
                      if (mayBeDirty) {
                          // TODO(misko): can we limit this to duplicates only?
                          record = this._verifyReinsertion(record, item, itemTrackBy, index);
                      }
                      if (!looseIdentical(record.item, item))
                          this._addIdentityChange(record, item);
                  }
                  record = record._next;
              }
          }
          else {
              index = 0;
              iterateListLike(collection, (item) => {
                  itemTrackBy = this._trackByFn(index, item);
                  if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                      record = this._mismatch(record, item, itemTrackBy, index);
                      mayBeDirty = true;
                  }
                  else {
                      if (mayBeDirty) {
                          // TODO(misko): can we limit this to duplicates only?
                          record = this._verifyReinsertion(record, item, itemTrackBy, index);
                      }
                      if (!looseIdentical(record.item, item))
                          this._addIdentityChange(record, item);
                  }
                  record = record._next;
                  index++;
              });
              this._length = index;
          }
          this._truncate(record);
          this._collection = collection;
          return this.isDirty;
      }
      /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
       * changes.
       */
      get isDirty() {
          return this._additionsHead !== null || this._movesHead !== null ||
              this._removalsHead !== null || this._identityChangesHead !== null;
      }
      /**
       * Reset the state of the change objects to show no changes. This means set previousKey to
       * currentKey, and clear all of the queues (additions, moves, removals).
       * Set the previousIndexes of moved and added items to their currentIndexes
       * Reset the list of additions, moves and removals
       *
       * @internal
       */
      _reset() {
          if (this.isDirty) {
              let record;
              let nextRecord;
              for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                  record._nextPrevious = record._next;
              }
              for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                  record.previousIndex = record.currentIndex;
              }
              this._additionsHead = this._additionsTail = null;
              for (record = this._movesHead; record !== null; record = nextRecord) {
                  record.previousIndex = record.currentIndex;
                  nextRecord = record._nextMoved;
              }
              this._movesHead = this._movesTail = null;
              this._removalsHead = this._removalsTail = null;
              this._identityChangesHead = this._identityChangesTail = null;
          }
      }
      /**
       * This is the core function which handles differences between collections.
       *
       * - `record` is the record which we saw at this position last time. If null then it is a new
       *   item.
       * - `item` is the current item in the collection
       * - `index` is the position of the item in the collection
       *
       * @internal
       */
      _mismatch(record, item, itemTrackBy, index) {
          // The previous record after which we will append the current one.
          let previousRecord;
          if (record === null) {
              previousRecord = this._itTail;
          }
          else {
              previousRecord = record._prev;
              // Remove the record from the collection since we know it does not match the item.
              this._remove(record);
          }
          // Attempt to see if we have seen the item before.
          record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
          if (record !== null) {
              // We have seen this before, we need to move it forward in the collection.
              // But first we need to check if identity changed, so we can update in view if necessary
              if (!looseIdentical(record.item, item))
                  this._addIdentityChange(record, item);
              this._moveAfter(record, previousRecord, index);
          }
          else {
              // Never seen it, check evicted list.
              record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
              if (record !== null) {
                  // It is an item which we have evicted earlier: reinsert it back into the list.
                  // But first we need to check if identity changed, so we can update in view if necessary
                  if (!looseIdentical(record.item, item))
                      this._addIdentityChange(record, item);
                  this._reinsertAfter(record, previousRecord, index);
              }
              else {
                  // It is a new item: add it.
                  record =
                      this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
              }
          }
          return record;
      }
      /**
       * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
       *
       * Use case: `[a, a]` => `[b, a, a]`
       *
       * If we did not have this check then the insertion of `b` would:
       *   1) evict first `a`
       *   2) insert `b` at `0` index.
       *   3) leave `a` at index `1` as is. <-- this is wrong!
       *   3) reinsert `a` at index 2. <-- this is wrong!
       *
       * The correct behavior is:
       *   1) evict first `a`
       *   2) insert `b` at `0` index.
       *   3) reinsert `a` at index 1.
       *   3) move `a` at from `1` to `2`.
       *
       *
       * Double check that we have not evicted a duplicate item. We need to check if the item type may
       * have already been removed:
       * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
       * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
       * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
       * at the end.
       *
       * @internal
       */
      _verifyReinsertion(record, item, itemTrackBy, index) {
          let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
          if (reinsertRecord !== null) {
              record = this._reinsertAfter(reinsertRecord, record._prev, index);
          }
          else if (record.currentIndex != index) {
              record.currentIndex = index;
              this._addToMoves(record, index);
          }
          return record;
      }
      /**
       * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
       *
       * - `record` The first excess {@link IterableChangeRecord_}.
       *
       * @internal
       */
      _truncate(record) {
          // Anything after that needs to be removed;
          while (record !== null) {
              const nextRecord = record._next;
              this._addToRemovals(this._unlink(record));
              record = nextRecord;
          }
          if (this._unlinkedRecords !== null) {
              this._unlinkedRecords.clear();
          }
          if (this._additionsTail !== null) {
              this._additionsTail._nextAdded = null;
          }
          if (this._movesTail !== null) {
              this._movesTail._nextMoved = null;
          }
          if (this._itTail !== null) {
              this._itTail._next = null;
          }
          if (this._removalsTail !== null) {
              this._removalsTail._nextRemoved = null;
          }
          if (this._identityChangesTail !== null) {
              this._identityChangesTail._nextIdentityChange = null;
          }
      }
      /** @internal */
      _reinsertAfter(record, prevRecord, index) {
          if (this._unlinkedRecords !== null) {
              this._unlinkedRecords.remove(record);
          }
          const prev = record._prevRemoved;
          const next = record._nextRemoved;
          if (prev === null) {
              this._removalsHead = next;
          }
          else {
              prev._nextRemoved = next;
          }
          if (next === null) {
              this._removalsTail = prev;
          }
          else {
              next._prevRemoved = prev;
          }
          this._insertAfter(record, prevRecord, index);
          this._addToMoves(record, index);
          return record;
      }
      /** @internal */
      _moveAfter(record, prevRecord, index) {
          this._unlink(record);
          this._insertAfter(record, prevRecord, index);
          this._addToMoves(record, index);
          return record;
      }
      /** @internal */
      _addAfter(record, prevRecord, index) {
          this._insertAfter(record, prevRecord, index);
          if (this._additionsTail === null) {
              // todo(vicb)
              // assert(this._additionsHead === null);
              this._additionsTail = this._additionsHead = record;
          }
          else {
              // todo(vicb)
              // assert(_additionsTail._nextAdded === null);
              // assert(record._nextAdded === null);
              this._additionsTail = this._additionsTail._nextAdded = record;
          }
          return record;
      }
      /** @internal */
      _insertAfter(record, prevRecord, index) {
          // todo(vicb)
          // assert(record != prevRecord);
          // assert(record._next === null);
          // assert(record._prev === null);
          const next = prevRecord === null ? this._itHead : prevRecord._next;
          // todo(vicb)
          // assert(next != record);
          // assert(prevRecord != record);
          record._next = next;
          record._prev = prevRecord;
          if (next === null) {
              this._itTail = record;
          }
          else {
              next._prev = record;
          }
          if (prevRecord === null) {
              this._itHead = record;
          }
          else {
              prevRecord._next = record;
          }
          if (this._linkedRecords === null) {
              this._linkedRecords = new _DuplicateMap();
          }
          this._linkedRecords.put(record);
          record.currentIndex = index;
          return record;
      }
      /** @internal */
      _remove(record) {
          return this._addToRemovals(this._unlink(record));
      }
      /** @internal */
      _unlink(record) {
          if (this._linkedRecords !== null) {
              this._linkedRecords.remove(record);
          }
          const prev = record._prev;
          const next = record._next;
          // todo(vicb)
          // assert((record._prev = null) === null);
          // assert((record._next = null) === null);
          if (prev === null) {
              this._itHead = next;
          }
          else {
              prev._next = next;
          }
          if (next === null) {
              this._itTail = prev;
          }
          else {
              next._prev = prev;
          }
          return record;
      }
      /** @internal */
      _addToMoves(record, toIndex) {
          // todo(vicb)
          // assert(record._nextMoved === null);
          if (record.previousIndex === toIndex) {
              return record;
          }
          if (this._movesTail === null) {
              // todo(vicb)
              // assert(_movesHead === null);
              this._movesTail = this._movesHead = record;
          }
          else {
              // todo(vicb)
              // assert(_movesTail._nextMoved === null);
              this._movesTail = this._movesTail._nextMoved = record;
          }
          return record;
      }
      _addToRemovals(record) {
          if (this._unlinkedRecords === null) {
              this._unlinkedRecords = new _DuplicateMap();
          }
          this._unlinkedRecords.put(record);
          record.currentIndex = null;
          record._nextRemoved = null;
          if (this._removalsTail === null) {
              // todo(vicb)
              // assert(_removalsHead === null);
              this._removalsTail = this._removalsHead = record;
              record._prevRemoved = null;
          }
          else {
              // todo(vicb)
              // assert(_removalsTail._nextRemoved === null);
              // assert(record._nextRemoved === null);
              record._prevRemoved = this._removalsTail;
              this._removalsTail = this._removalsTail._nextRemoved = record;
          }
          return record;
      }
      /** @internal */
      _addIdentityChange(record, item) {
          record.item = item;
          if (this._identityChangesTail === null) {
              this._identityChangesTail = this._identityChangesHead = record;
          }
          else {
              this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
          }
          return record;
      }
      toString() {
          const list = [];
          this.forEachItem((record) => list.push(record));
          const previous = [];
          this.forEachPreviousItem((record) => previous.push(record));
          const additions = [];
          this.forEachAddedItem((record) => additions.push(record));
          const moves = [];
          this.forEachMovedItem((record) => moves.push(record));
          const removals = [];
          this.forEachRemovedItem((record) => removals.push(record));
          const identityChanges = [];
          this.forEachIdentityChange((record) => identityChanges.push(record));
          return 'collection: ' + list.join(', ') + '\n' +
              'previous: ' + previous.join(', ') + '\n' +
              'additions: ' + additions.join(', ') + '\n' +
              'moves: ' + moves.join(', ') + '\n' +
              'removals: ' + removals.join(', ') + '\n' +
              'identityChanges: ' + identityChanges.join(', ') + '\n';
      }
  }
  /**
   * @stable
   */
  class IterableChangeRecord_ {
      constructor(item, trackById) {
          this.item = item;
          this.trackById = trackById;
          this.currentIndex = null;
          this.previousIndex = null;
          /** @internal */
          this._nextPrevious = null;
          /** @internal */
          this._prev = null;
          /** @internal */
          this._next = null;
          /** @internal */
          this._prevDup = null;
          /** @internal */
          this._nextDup = null;
          /** @internal */
          this._prevRemoved = null;
          /** @internal */
          this._nextRemoved = null;
          /** @internal */
          this._nextAdded = null;
          /** @internal */
          this._nextMoved = null;
          /** @internal */
          this._nextIdentityChange = null;
      }
      toString() {
          return this.previousIndex === this.currentIndex ? stringify(this.item) :
              stringify(this.item) + '[' +
                  stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
      }
  }
  // A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item
  class _DuplicateItemRecordList {
      constructor() {
          /** @internal */
          this._head = null;
          /** @internal */
          this._tail = null;
      }
      /**
       * Append the record to the list of duplicates.
       *
       * Note: by design all records in the list of duplicates hold the same value in record.item.
       */
      add(record) {
          if (this._head === null) {
              this._head = this._tail = record;
              record._nextDup = null;
              record._prevDup = null;
          }
          else {
              // todo(vicb)
              // assert(record.item ==  _head.item ||
              //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
              this._tail._nextDup = record;
              record._prevDup = this._tail;
              record._nextDup = null;
              this._tail = record;
          }
      }
      // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
      // IterableChangeRecord_.currentIndex >= afterIndex
      get(trackById, afterIndex) {
          let record;
          for (record = this._head; record !== null; record = record._nextDup) {
              if ((afterIndex === null || afterIndex < record.currentIndex) &&
                  looseIdentical(record.trackById, trackById)) {
                  return record;
              }
          }
          return null;
      }
      /**
       * Remove one {@link IterableChangeRecord_} from the list of duplicates.
       *
       * Returns whether the list of duplicates is empty.
       */
      remove(record) {
          // todo(vicb)
          // assert(() {
          //  // verify that the record being removed is in the list.
          //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
          //    if (identical(cursor, record)) return true;
          //  }
          //  return false;
          //});
          const prev = record._prevDup;
          const next = record._nextDup;
          if (prev === null) {
              this._head = next;
          }
          else {
              prev._nextDup = next;
          }
          if (next === null) {
              this._tail = prev;
          }
          else {
              next._prevDup = prev;
          }
          return this._head === null;
      }
  }
  class _DuplicateMap {
      constructor() {
          this.map = new Map();
      }
      put(record) {
          const key = record.trackById;
          let duplicates = this.map.get(key);
          if (!duplicates) {
              duplicates = new _DuplicateItemRecordList();
              this.map.set(key, duplicates);
          }
          duplicates.add(record);
      }
      /**
       * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
       * have already iterated over, we use the afterIndex to pretend it is not there.
       *
       * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
       * have any more `a`s needs to return the last `a` not the first or second.
       */
      get(trackById, afterIndex = null) {
          const key = trackById;
          const recordList = this.map.get(key);
          return recordList ? recordList.get(trackById, afterIndex) : null;
      }
      /**
       * Removes a {@link IterableChangeRecord_} from the list of duplicates.
       *
       * The list of duplicates also is removed from the map if it gets empty.
       */
      remove(record) {
          const key = record.trackById;
          const recordList = this.map.get(key);
          // Remove the list of duplicates when it gets empty
          if (recordList.remove(record)) {
              this.map.delete(key);
          }
          return record;
      }
      get isEmpty() { return this.map.size === 0; }
      clear() { this.map.clear(); }
      toString() { return '_DuplicateMap(' + stringify(this.map) + ')'; }
  }
  function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
      const previousIndex = item.previousIndex;
      if (previousIndex === null)
          return previousIndex;
      let moveOffset = 0;
      if (moveOffsets && previousIndex < moveOffsets.length) {
          moveOffset = moveOffsets[previousIndex];
      }
      return previousIndex + addRemoveOffset + moveOffset;
  }

  class DefaultKeyValueDifferFactory {
      constructor() { }
      supports(obj) { return obj instanceof Map || isJsObject(obj); }
      /**
       * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
       */
      create(cd) {
          return new DefaultKeyValueDiffer();
      }
  }
  class DefaultKeyValueDiffer {
      constructor() {
          this._records = new Map();
          this._mapHead = null;
          this._previousMapHead = null;
          this._changesHead = null;
          this._changesTail = null;
          this._additionsHead = null;
          this._additionsTail = null;
          this._removalsHead = null;
          this._removalsTail = null;
      }
      get isDirty() {
          return this._additionsHead !== null || this._changesHead !== null ||
              this._removalsHead !== null;
      }
      forEachItem(fn) {
          let record;
          for (record = this._mapHead; record !== null; record = record._next) {
              fn(record);
          }
      }
      forEachPreviousItem(fn) {
          let record;
          for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
              fn(record);
          }
      }
      forEachChangedItem(fn) {
          let record;
          for (record = this._changesHead; record !== null; record = record._nextChanged) {
              fn(record);
          }
      }
      forEachAddedItem(fn) {
          let record;
          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
              fn(record);
          }
      }
      forEachRemovedItem(fn) {
          let record;
          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
              fn(record);
          }
      }
      diff(map) {
          if (!map) {
              map = new Map();
          }
          else if (!(map instanceof Map || isJsObject(map))) {
              throw new Error(`Error trying to diff '${map}'`);
          }
          return this.check(map) ? this : null;
      }
      onDestroy() { }
      check(map) {
          this._reset();
          const records = this._records;
          let oldSeqRecord = this._mapHead;
          let lastOldSeqRecord = null;
          let lastNewSeqRecord = null;
          let seqChanged = false;
          this._forEach(map, (value, key) => {
              let newSeqRecord;
              if (oldSeqRecord && key === oldSeqRecord.key) {
                  newSeqRecord = oldSeqRecord;
                  this._maybeAddToChanges(newSeqRecord, value);
              }
              else {
                  seqChanged = true;
                  if (oldSeqRecord !== null) {
                      this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
                      this._addToRemovals(oldSeqRecord);
                  }
                  if (records.has(key)) {
                      newSeqRecord = records.get(key);
                      this._maybeAddToChanges(newSeqRecord, value);
                  }
                  else {
                      newSeqRecord = new KeyValueChangeRecord_(key);
                      records.set(key, newSeqRecord);
                      newSeqRecord.currentValue = value;
                      this._addToAdditions(newSeqRecord);
                  }
              }
              if (seqChanged) {
                  if (this._isInRemovals(newSeqRecord)) {
                      this._removeFromRemovals(newSeqRecord);
                  }
                  if (lastNewSeqRecord == null) {
                      this._mapHead = newSeqRecord;
                  }
                  else {
                      lastNewSeqRecord._next = newSeqRecord;
                  }
              }
              lastOldSeqRecord = oldSeqRecord;
              lastNewSeqRecord = newSeqRecord;
              oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
          });
          this._truncate(lastOldSeqRecord, oldSeqRecord);
          return this.isDirty;
      }
      /** @internal */
      _reset() {
          if (this.isDirty) {
              let record;
              // Record the state of the mapping
              for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
                  record._nextPrevious = record._next;
              }
              for (record = this._changesHead; record !== null; record = record._nextChanged) {
                  record.previousValue = record.currentValue;
              }
              for (record = this._additionsHead; record != null; record = record._nextAdded) {
                  record.previousValue = record.currentValue;
              }
              this._changesHead = this._changesTail = null;
              this._additionsHead = this._additionsTail = null;
              this._removalsHead = this._removalsTail = null;
          }
      }
      _truncate(lastRecord, record) {
          while (record !== null) {
              if (lastRecord === null) {
                  this._mapHead = null;
              }
              else {
                  lastRecord._next = null;
              }
              const nextRecord = record._next;
              this._addToRemovals(record);
              lastRecord = record;
              record = nextRecord;
          }
          for (let rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
              rec.previousValue = rec.currentValue;
              rec.currentValue = null;
              this._records.delete(rec.key);
          }
      }
      _maybeAddToChanges(record, newValue) {
          if (!looseIdentical(newValue, record.currentValue)) {
              record.previousValue = record.currentValue;
              record.currentValue = newValue;
              this._addToChanges(record);
          }
      }
      _isInRemovals(record) {
          return record === this._removalsHead || record._nextRemoved !== null ||
              record._prevRemoved !== null;
      }
      _addToRemovals(record) {
          if (this._removalsHead === null) {
              this._removalsHead = this._removalsTail = record;
          }
          else {
              this._removalsTail._nextRemoved = record;
              record._prevRemoved = this._removalsTail;
              this._removalsTail = record;
          }
      }
      _removeFromSeq(prev, record) {
          const next = record._next;
          if (prev === null) {
              this._mapHead = next;
          }
          else {
              prev._next = next;
          }
          record._next = null;
      }
      _removeFromRemovals(record) {
          const prev = record._prevRemoved;
          const next = record._nextRemoved;
          if (prev === null) {
              this._removalsHead = next;
          }
          else {
              prev._nextRemoved = next;
          }
          if (next === null) {
              this._removalsTail = prev;
          }
          else {
              next._prevRemoved = prev;
          }
          record._prevRemoved = record._nextRemoved = null;
      }
      _addToAdditions(record) {
          if (this._additionsHead === null) {
              this._additionsHead = this._additionsTail = record;
          }
          else {
              this._additionsTail._nextAdded = record;
              this._additionsTail = record;
          }
      }
      _addToChanges(record) {
          if (this._changesHead === null) {
              this._changesHead = this._changesTail = record;
          }
          else {
              this._changesTail._nextChanged = record;
              this._changesTail = record;
          }
      }
      toString() {
          const items = [];
          const previous = [];
          const changes = [];
          const additions = [];
          const removals = [];
          let record;
          for (record = this._mapHead; record !== null; record = record._next) {
              items.push(stringify(record));
          }
          for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
              previous.push(stringify(record));
          }
          for (record = this._changesHead; record !== null; record = record._nextChanged) {
              changes.push(stringify(record));
          }
          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
              additions.push(stringify(record));
          }
          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
              removals.push(stringify(record));
          }
          return 'map: ' + items.join(', ') + '\n' +
              'previous: ' + previous.join(', ') + '\n' +
              'additions: ' + additions.join(', ') + '\n' +
              'changes: ' + changes.join(', ') + '\n' +
              'removals: ' + removals.join(', ') + '\n';
      }
      /** @internal */
      _forEach(obj, fn) {
          if (obj instanceof Map) {
              obj.forEach(fn);
          }
          else {
              Object.keys(obj).forEach(k => fn(obj[k], k));
          }
      }
  }
  /**
   * @stable
   */
  class KeyValueChangeRecord_ {
      constructor(key) {
          this.key = key;
          this.previousValue = null;
          this.currentValue = null;
          /** @internal */
          this._nextPrevious = null;
          /** @internal */
          this._next = null;
          /** @internal */
          this._nextAdded = null;
          /** @internal */
          this._nextRemoved = null;
          /** @internal */
          this._prevRemoved = null;
          /** @internal */
          this._nextChanged = null;
      }
      toString() {
          return looseIdentical(this.previousValue, this.currentValue) ?
              stringify(this.key) :
              (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +
                  stringify(this.currentValue) + ']');
      }
  }

  /**
   * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
   * @stable
   */
  class IterableDiffers {
      constructor(factories) { this.factories = factories; }
      static create(factories, parent) {
          if (isPresent(parent)) {
              const copied = parent.factories.slice();
              factories = factories.concat(copied);
              return new IterableDiffers(factories);
          }
          else {
              return new IterableDiffers(factories);
          }
      }
      /**
       * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
       * inherited {@link IterableDiffers} instance with the provided factories and return a new
       * {@link IterableDiffers} instance.
       *
       * The following example shows how to extend an existing list of factories,
       * which will only be applied to the injector for this component and its children.
       * This step is all that's required to make a new {@link IterableDiffer} available.
       *
       * ### Example
       *
       * ```
       * @Component({
       *   viewProviders: [
       *     IterableDiffers.extend([new ImmutableListDiffer()])
       *   ]
       * })
       * ```
       */
      static extend(factories) {
          return {
              provide: IterableDiffers,
              useFactory: (parent) => {
                  if (!parent) {
                      // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
                      // to
                      // bootstrap(), which would override default pipes instead of extending them.
                      throw new Error('Cannot extend IterableDiffers without a parent injector');
                  }
                  return IterableDiffers.create(factories, parent);
              },
              // Dependency technically isn't optional, but we can provide a better error message this way.
              deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
          };
      }
      find(iterable) {
          const factory = this.factories.find(f => f.supports(iterable));
          if (isPresent(factory)) {
              return factory;
          }
          else {
              throw new Error(`Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);
          }
      }
  }

  /**
   * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
   * @stable
   */
  class KeyValueDiffers {
      constructor(factories) { this.factories = factories; }
      static create(factories, parent) {
          if (parent) {
              const copied = parent.factories.slice();
              factories = factories.concat(copied);
          }
          return new KeyValueDiffers(factories);
      }
      /**
       * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
       * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
       * {@link KeyValueDiffers} instance.
       *
       * The following example shows how to extend an existing list of factories,
             * which will only be applied to the injector for this component and its children.
             * This step is all that's required to make a new {@link KeyValueDiffer} available.
       *
       * ### Example
       *
       * ```
       * @Component({
       *   viewProviders: [
       *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
       *   ]
       * })
       * ```
       */
      static extend(factories) {
          return {
              provide: KeyValueDiffers,
              useFactory: (parent) => {
                  if (!parent) {
                      // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
                      // to bootstrap(), which would override default pipes instead of extending them.
                      throw new Error('Cannot extend KeyValueDiffers without a parent injector');
                  }
                  return KeyValueDiffers.create(factories, parent);
              },
              // Dependency technically isn't optional, but we can provide a better error message this way.
              deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
          };
      }
      find(kv) {
          const factory = this.factories.find(f => f.supports(kv));
          if (factory) {
              return factory;
          }
          throw new Error(`Cannot find a differ supporting object '${kv}'`);
      }
  }

  function ɵdevModeEqual(a, b) {
      if (isListLikeIterable(a) && isListLikeIterable(b)) {
          return areIterablesEqual(a, b, ɵdevModeEqual);
      }
      else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
          return true;
      }
      else {
          return looseIdentical(a, b);
      }
  }
  /**
   * Indicates that the result of a {@link Pipe} transformation has changed even though the
   * reference
   * has not changed.
   *
   * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
   *
   * Example:
   *
   * ```
   * if (this._latestValue === this._latestReturnedValue) {
   *    return this._latestReturnedValue;
   *  } else {
   *    this._latestReturnedValue = this._latestValue;
   *    return WrappedValue.wrap(this._latestValue); // this will force update
   *  }
   * ```
   * @stable
   */
  class WrappedValue {
      constructor(wrapped) {
          this.wrapped = wrapped;
      }
      static wrap(value) { return new WrappedValue(value); }
  }
  /**
   * Helper class for unwrapping WrappedValue s
   */
  class ɵValueUnwrapper {
      constructor() {
          this.hasWrappedValue = false;
      }
      unwrap(value) {
          if (value instanceof WrappedValue) {
              this.hasWrappedValue = true;
              return value.wrapped;
          }
          return value;
      }
      reset() { this.hasWrappedValue = false; }
  }
  /**
   * Represents a basic change from a previous to a new value.
   * @stable
   */
  class SimpleChange {
      constructor(previousValue, currentValue, firstChange) {
          this.previousValue = previousValue;
          this.currentValue = currentValue;
          this.firstChange = firstChange;
      }
      /**
       * Check whether the new value is the first value assigned.
       */
      isFirstChange() { return this.firstChange; }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * @stable
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ class ChangeDetectorRef {
  }

  /**
   * Structural diffing for `Object`s and `Map`s.
   */
  const keyValDiff = [new DefaultKeyValueDifferFactory()];
  /**
   * Structural diffing for `Iterable` types such as `Array`s.
   */
  const iterableDiff = [new DefaultIterableDifferFactory()];
  const defaultIterableDiffers = new IterableDiffers(iterableDiff);
  const defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);

  /**
   * @deprecated Use `RendererTypeV2` (and `RendererV2`) instead.
   */
  class RenderComponentType {
      constructor(id, templateUrl, slotCount, encapsulation, styles, animations) {
          this.id = id;
          this.templateUrl = templateUrl;
          this.slotCount = slotCount;
          this.encapsulation = encapsulation;
          this.styles = styles;
          this.animations = animations;
      }
  }
  /**
   * @deprecated Use the `RendererV2` instead.
   */
  class Renderer {
  }
  const RendererV2Interceptor = new InjectionToken('RendererV2Interceptor');
  /**
   * Injectable service that provides a low-level interface for modifying the UI.
   *
   * Use this service to bypass Angular's templating and make custom UI changes that can't be
   * expressed declaratively. For example if you need to set a property or an attribute whose name is
   * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}
   * respectively.
   *
   * If you are implementing a custom renderer, you must implement this interface.
   *
   * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
   *
   * @deprecated Use `RendererFactoryV2` instead.
   */
  class RootRenderer {
  }
  /**
   * @experimental
   */
  class RendererFactoryV2 {
  }
  /**
   * @experimental
   */
  class RendererV2 {
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
   * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
   * handled.
   *
   * See DomSanitizer for more details on security in Angular applications.
   *
   * @stable
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ var SecurityContext;
  (function (SecurityContext) {
      SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
      SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
      SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
      SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
      SecurityContext[SecurityContext["URL"] = 4] = "URL";
      SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
  })(SecurityContext || (SecurityContext = {}));
  /**
   * Sanitizer is used by the views to sanitize potentially dangerous values.
   *
   * @stable
   */
  class Sanitizer {
  }

  /**
   * An error thrown if application changes model breaking the top-down data flow.
   *
   * This exception is only thrown in dev mode.
   *
   * <!-- TODO: Add a link once the dev mode option is configurable -->
   *
   * ### Example
   *
   * ```typescript
   * @Component({
   *   selector: 'parent',
   *   template: '<child [prop]="parentProp"></child>',
   * })
   * class Parent {
   *   parentProp = 'init';
   * }
   *
   * @Directive({selector: 'child', inputs: ['prop']})
   * class Child {
   *   constructor(public parent: Parent) {}
   *
   *   set prop(v) {
   *     // this updates the parent property, which is disallowed during change detection
   *     // this will result in ExpressionChangedAfterItHasBeenCheckedError
   *     this.parent.parentProp = 'updated';
   *   }
   * }
   * ```
   */
  function expressionChangedAfterItHasBeenCheckedError(oldValue, currValue, isFirstCheck) {
      let msg = `Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;
      if (isFirstCheck) {
          msg +=
              ` It seems like the view has been created after its parent and its children have been dirty checked.` +
                  ` Has it been created in a change detection hook ?`;
      }
      const error = Error(msg);
      error[ERROR_TYPE] = expressionChangedAfterItHasBeenCheckedError;
      return error;
  }
  /**
   * Thrown when an exception was raised during view creation, change detection or destruction.
   *
   * This error wraps the original exception to attach additional contextual information that can
   * be useful for debugging.
   */
  function viewWrappedError(originalError, context) {
      const error = wrappedError(`Error in ${context.source}`, originalError);
      error[ERROR_DEBUG_CONTEXT] = context;
      error[ERROR_TYPE] = viewWrappedError;
      return error;
  }
  /**
  * Thrown when a destroyed view is used.
  *
  * This error indicates a bug in the framework.
  *
  * This is an internal Angular error.
  */
  function viewDestroyedError(details) {
      return Error(`Attempt to use a destroyed view: ${details}`);
  }

  class ɵViewUtils {
      constructor(_renderer, sanitizer, animationQueue) {
          this._renderer = _renderer;
          this.animationQueue = animationQueue;
          this.sanitizer = sanitizer;
      }
      /** @internal */
      renderComponent(renderComponentType) {
          return this._renderer.renderComponent(renderComponentType);
      }
  }
  ɵViewUtils.decorators = [
      { type: Injectable },
  ];
  /** @nocollapse */
  ɵViewUtils.ctorParameters = () => [
      { type: RootRenderer, },
      { type: Sanitizer, },
      { type: AnimationQueue, },
  ];
  let nextRenderComponentTypeId = 0;
  function ɵcreateRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {
      return new RenderComponentType(`${nextRenderComponentTypeId++}`, templateUrl, slotCount, encapsulation, styles, animations);
  }
  function addToArray(e, array) {
      array.push(e);
  }
  function ɵinterpolate(valueCount, constAndInterp) {
      let result = '';
      for (let i = 0; i < valueCount * 2; i = i + 2) {
          result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
      }
      return result + constAndInterp[valueCount * 2];
  }
  function ɵinlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
      switch (valueCount) {
          case 1:
              return c0 + _toStringWithNull(a1) + c1;
          case 2:
              return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
          case 3:
              return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                  c3;
          case 4:
              return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                  c3 + _toStringWithNull(a4) + c4;
          case 5:
              return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                  c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
          case 6:
              return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                  c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
          case 7:
              return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                  c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                  c6 + _toStringWithNull(a7) + c7;
          case 8:
              return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                  c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                  c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
          case 9:
              return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                  c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                  c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
          default:
              throw new Error(`Does not support more than 9 expressions`);
      }
  }
  function _toStringWithNull(v) {
      return v != null ? v.toString() : '';
  }
  function ɵcheckBinding(view, oldValue, newValue, forceUpdate) {
      const isFirstCheck = view.numberOfChecks === 0;
      if (view.throwOnChange) {
          if (isFirstCheck || !ɵdevModeEqual(oldValue, newValue)) {
              throw expressionChangedAfterItHasBeenCheckedError(oldValue, newValue, isFirstCheck);
          }
          return false;
      }
      else {
          return isFirstCheck || forceUpdate || !looseIdentical(oldValue, newValue);
      }
  }
  function ɵcheckBindingChange(view, oldValue, newValue, forceUpdate) {
      if (ɵcheckBinding(view, oldValue, newValue, forceUpdate)) {
          return new SimpleChange(oldValue, newValue, view.numberOfChecks === 0);
      }
  }
  function ɵcheckRenderText(view, renderElement, oldValue, newValue, forceUpdate) {
      if (ɵcheckBinding(view, oldValue, newValue, forceUpdate)) {
          view.renderer.setText(renderElement, newValue);
      }
  }
  function ɵcheckRenderProperty(view, renderElement, propName, oldValue, newValue, forceUpdate, securityContext) {
      if (ɵcheckBinding(view, oldValue, newValue, forceUpdate)) {
          let renderValue = securityContext ? view.viewUtils.sanitizer.sanitize(securityContext, newValue) : newValue;
          view.renderer.setElementProperty(renderElement, propName, renderValue);
      }
  }
  function ɵcheckRenderAttribute(view, renderElement, attrName, oldValue, newValue, forceUpdate, securityContext) {
      if (ɵcheckBinding(view, oldValue, newValue, forceUpdate)) {
          let renderValue = securityContext ? view.viewUtils.sanitizer.sanitize(securityContext, newValue) : newValue;
          renderValue = renderValue != null ? renderValue.toString() : null;
          view.renderer.setElementAttribute(renderElement, attrName, renderValue);
      }
  }
  function ɵcheckRenderClass(view, renderElement, className, oldValue, newValue, forceUpdate) {
      if (ɵcheckBinding(view, oldValue, newValue, forceUpdate)) {
          view.renderer.setElementClass(renderElement, className, newValue);
      }
  }
  function ɵcheckRenderStyle(view, renderElement, styleName, unit, oldValue, newValue, forceUpdate, securityContext) {
      if (ɵcheckBinding(view, oldValue, newValue, forceUpdate)) {
          let renderValue = securityContext ? view.viewUtils.sanitizer.sanitize(securityContext, newValue) : newValue;
          if (renderValue != null) {
              renderValue = renderValue.toString();
              if (unit != null) {
                  renderValue = renderValue + unit;
              }
          }
          else {
              renderValue = null;
          }
          view.renderer.setElementStyle(renderElement, styleName, renderValue);
      }
  }
  function ɵcastByValue(input, value) {
      return input;
  }
  const ɵEMPTY_ARRAY = [];
  const ɵEMPTY_MAP = {};
  function ɵpureProxy1(fn) {
      let numberOfChecks = 0;
      let result;
      let v0;
      return (p0) => {
          if (!numberOfChecks++ || !looseIdentical(v0, p0)) {
              v0 = p0;
              result = fn(p0);
          }
          return result;
      };
  }
  function ɵpureProxy2(fn) {
      let numberOfChecks = 0;
      let result;
      let v0;
      let v1;
      return (p0, p1) => {
          if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
              v0 = p0;
              v1 = p1;
              result = fn(p0, p1);
          }
          return result;
      };
  }
  function ɵpureProxy3(fn) {
      let numberOfChecks = 0;
      let result;
      let v0;
      let v1;
      let v2;
      return (p0, p1, p2) => {
          if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) ||
              !looseIdentical(v2, p2)) {
              v0 = p0;
              v1 = p1;
              v2 = p2;
              result = fn(p0, p1, p2);
          }
          return result;
      };
  }
  function ɵpureProxy4(fn) {
      let numberOfChecks = 0;
      let result;
      let v0, v1, v2, v3;
      v0 = v1 = v2 = v3;
      return (p0, p1, p2, p3) => {
          if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) ||
              !looseIdentical(v2, p2) || !looseIdentical(v3, p3)) {
              v0 = p0;
              v1 = p1;
              v2 = p2;
              v3 = p3;
              result = fn(p0, p1, p2, p3);
          }
          return result;
      };
  }
  function ɵpureProxy5(fn) {
      let numberOfChecks = 0;
      let result;
      let v0, v1, v2, v3, v4;
      v0 = v1 = v2 = v3 = v4;
      return (p0, p1, p2, p3, p4) => {
          if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) ||
              !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
              v0 = p0;
              v1 = p1;
              v2 = p2;
              v3 = p3;
              v4 = p4;
              result = fn(p0, p1, p2, p3, p4);
          }
          return result;
      };
  }
  function ɵpureProxy6(fn) {
      let numberOfChecks = 0;
      let result;
      let v0, v1, v2, v3, v4, v5;
      v0 = v1 = v2 = v3 = v4 = v5;
      return (p0, p1, p2, p3, p4, p5) => {
          if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) ||
              !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) ||
              !looseIdentical(v5, p5)) {
              v0 = p0;
              v1 = p1;
              v2 = p2;
              v3 = p3;
              v4 = p4;
              v5 = p5;
              result = fn(p0, p1, p2, p3, p4, p5);
          }
          return result;
      };
  }
  function ɵpureProxy7(fn) {
      let numberOfChecks = 0;
      let result;
      let v0, v1, v2, v3, v4, v5, v6;
      v0 = v1 = v2 = v3 = v4 = v5 = v6;
      return (p0, p1, p2, p3, p4, p5, p6) => {
          if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) ||
              !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) ||
              !looseIdentical(v5, p5) || !looseIdentical(v6, p6)) {
              v0 = p0;
              v1 = p1;
              v2 = p2;
              v3 = p3;
              v4 = p4;
              v5 = p5;
              v6 = p6;
              result = fn(p0, p1, p2, p3, p4, p5, p6);
          }
          return result;
      };
  }
  function ɵpureProxy8(fn) {
      let numberOfChecks = 0;
      let result;
      let v0, v1, v2, v3, v4, v5, v6, v7;
      v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7;
      return (p0, p1, p2, p3, p4, p5, p6, p7) => {
          if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) ||
              !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) ||
              !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
              v0 = p0;
              v1 = p1;
              v2 = p2;
              v3 = p3;
              v4 = p4;
              v5 = p5;
              v6 = p6;
              v7 = p7;
              result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
          }
          return result;
      };
  }
  function ɵpureProxy9(fn) {
      let numberOfChecks = 0;
      let result;
      let v0, v1, v2, v3, v4, v5, v6, v7, v8;
      v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8;
      return (p0, p1, p2, p3, p4, p5, p6, p7, p8) => {
          if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) ||
              !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) ||
              !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) ||
              !looseIdentical(v8, p8)) {
              v0 = p0;
              v1 = p1;
              v2 = p2;
              v3 = p3;
              v4 = p4;
              v5 = p5;
              v6 = p6;
              v7 = p7;
              v8 = p8;
              result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
          }
          return result;
      };
  }
  function ɵpureProxy10(fn) {
      let numberOfChecks = 0;
      let result;
      let v0, v1, v2, v3, v4, v5, v6, v7, v8, v9;
      v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9;
      return (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) => {
          if (!numberOfChecks++ || !looseIdentical(v0, p0) || !looseIdentical(v1, p1) ||
              !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) ||
              !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) ||
              !looseIdentical(v8, p8) || !looseIdentical(v9, p9)) {
              v0 = p0;
              v1 = p1;
              v2 = p2;
              v3 = p3;
              v4 = p4;
              v5 = p5;
              v6 = p6;
              v7 = p7;
              v8 = p8;
              v9 = p9;
              result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
          }
          return result;
      };
  }
  function ɵsetBindingDebugInfoForChanges(renderer, el, changes) {
      Object.keys(changes).forEach((propName) => {
          ɵsetBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);
      });
  }
  function ɵsetBindingDebugInfo(renderer, el, propName, value) {
      try {
          renderer.setBindingDebugInfo(el, `ng-reflect-${camelCaseToDashCase(propName)}`, value ? value.toString() : null);
      }
      catch (e) {
          renderer.setBindingDebugInfo(el, `ng-reflect-${camelCaseToDashCase(propName)}`, '[ERROR] Exception while trying to serialize the value');
      }
  }
  const CAMEL_CASE_REGEXP = /([A-Z])/g;
  function camelCaseToDashCase(input) {
      return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());
  }
  function ɵcreateRenderElement(renderer, parentElement, name, attrs, debugInfo) {
      const el = renderer.createElement(parentElement, name, debugInfo);
      for (let i = 0; i < attrs.length; i += 2) {
          renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));
      }
      return el;
  }
  function ɵselectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {
      let hostElement;
      if (isPresent(rootSelectorOrNode)) {
          hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);
          for (let i = 0; i < attrs.length; i += 2) {
              renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));
          }
          renderer.setElementAttribute(hostElement, 'ng-version', VERSION$1.full);
      }
      else {
          hostElement = ɵcreateRenderElement(renderer, null, elementName, attrs, debugInfo);
      }
      return hostElement;
  }
  function ɵsubscribeToRenderElement(view, element, eventNamesAndTargets, listener) {
      const disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);
      for (let i = 0; i < eventNamesAndTargets.length; i += 2) {
          const eventName = eventNamesAndTargets.get(i);
          const eventTarget = eventNamesAndTargets.get(i + 1);
          let disposable;
          if (eventTarget) {
              disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, `${eventTarget}:${eventName}`));
          }
          else {
              disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));
          }
          disposables.set(i / 2, disposable);
      }
      return disposeInlineArray.bind(null, disposables);
  }
  function disposeInlineArray(disposables) {
      for (let i = 0; i < disposables.length; i++) {
          disposables.get(i)();
      }
  }
  function ɵnoop() { }
  function createEmptyInlineArray(length) {
      let ctor;
      if (length <= 2) {
          ctor = ɵInlineArray2;
      }
      else if (length <= 4) {
          ctor = ɵInlineArray4;
      }
      else if (length <= 8) {
          ctor = ɵInlineArray8;
      }
      else if (length <= 16) {
          ctor = ɵInlineArray16;
      }
      else {
          ctor = ɵInlineArrayDynamic;
      }
      return new ctor(length);
  }
  class InlineArray0 {
      constructor() {
          this.length = 0;
      }
      get(index) { return undefined; }
      set(index, value) { }
  }
  class ɵInlineArray2 {
      constructor(length, _v0, _v1) {
          this.length = length;
          this._v0 = _v0;
          this._v1 = _v1;
      }
      get(index) {
          switch (index) {
              case 0:
                  return this._v0;
              case 1:
                  return this._v1;
              default:
                  return undefined;
          }
      }
      set(index, value) {
          switch (index) {
              case 0:
                  this._v0 = value;
                  break;
              case 1:
                  this._v1 = value;
                  break;
          }
      }
  }
  class ɵInlineArray4 {
      constructor(length, _v0, _v1, _v2, _v3) {
          this.length = length;
          this._v0 = _v0;
          this._v1 = _v1;
          this._v2 = _v2;
          this._v3 = _v3;
      }
      get(index) {
          switch (index) {
              case 0:
                  return this._v0;
              case 1:
                  return this._v1;
              case 2:
                  return this._v2;
              case 3:
                  return this._v3;
              default:
                  return undefined;
          }
      }
      set(index, value) {
          switch (index) {
              case 0:
                  this._v0 = value;
                  break;
              case 1:
                  this._v1 = value;
                  break;
              case 2:
                  this._v2 = value;
                  break;
              case 3:
                  this._v3 = value;
                  break;
          }
      }
  }
  class ɵInlineArray8 {
      constructor(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
          this.length = length;
          this._v0 = _v0;
          this._v1 = _v1;
          this._v2 = _v2;
          this._v3 = _v3;
          this._v4 = _v4;
          this._v5 = _v5;
          this._v6 = _v6;
          this._v7 = _v7;
      }
      get(index) {
          switch (index) {
              case 0:
                  return this._v0;
              case 1:
                  return this._v1;
              case 2:
                  return this._v2;
              case 3:
                  return this._v3;
              case 4:
                  return this._v4;
              case 5:
                  return this._v5;
              case 6:
                  return this._v6;
              case 7:
                  return this._v7;
              default:
                  return undefined;
          }
      }
      set(index, value) {
          switch (index) {
              case 0:
                  this._v0 = value;
                  break;
              case 1:
                  this._v1 = value;
                  break;
              case 2:
                  this._v2 = value;
                  break;
              case 3:
                  this._v3 = value;
                  break;
              case 4:
                  this._v4 = value;
                  break;
              case 5:
                  this._v5 = value;
                  break;
              case 6:
                  this._v6 = value;
                  break;
              case 7:
                  this._v7 = value;
                  break;
          }
      }
  }
  class ɵInlineArray16 {
      constructor(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {
          this.length = length;
          this._v0 = _v0;
          this._v1 = _v1;
          this._v2 = _v2;
          this._v3 = _v3;
          this._v4 = _v4;
          this._v5 = _v5;
          this._v6 = _v6;
          this._v7 = _v7;
          this._v8 = _v8;
          this._v9 = _v9;
          this._v10 = _v10;
          this._v11 = _v11;
          this._v12 = _v12;
          this._v13 = _v13;
          this._v14 = _v14;
          this._v15 = _v15;
      }
      get(index) {
          switch (index) {
              case 0:
                  return this._v0;
              case 1:
                  return this._v1;
              case 2:
                  return this._v2;
              case 3:
                  return this._v3;
              case 4:
                  return this._v4;
              case 5:
                  return this._v5;
              case 6:
                  return this._v6;
              case 7:
                  return this._v7;
              case 8:
                  return this._v8;
              case 9:
                  return this._v9;
              case 10:
                  return this._v10;
              case 11:
                  return this._v11;
              case 12:
                  return this._v12;
              case 13:
                  return this._v13;
              case 14:
                  return this._v14;
              case 15:
                  return this._v15;
              default:
                  return undefined;
          }
      }
      set(index, value) {
          switch (index) {
              case 0:
                  this._v0 = value;
                  break;
              case 1:
                  this._v1 = value;
                  break;
              case 2:
                  this._v2 = value;
                  break;
              case 3:
                  this._v3 = value;
                  break;
              case 4:
                  this._v4 = value;
                  break;
              case 5:
                  this._v5 = value;
                  break;
              case 6:
                  this._v6 = value;
                  break;
              case 7:
                  this._v7 = value;
                  break;
              case 8:
                  this._v8 = value;
                  break;
              case 9:
                  this._v9 = value;
                  break;
              case 10:
                  this._v10 = value;
                  break;
              case 11:
                  this._v11 = value;
                  break;
              case 12:
                  this._v12 = value;
                  break;
              case 13:
                  this._v13 = value;
                  break;
              case 14:
                  this._v14 = value;
                  break;
              case 15:
                  this._v15 = value;
                  break;
          }
      }
  }
  class ɵInlineArrayDynamic {
      // Note: We still take the length argument so this class can be created
      // in the same ways as the other classes!
      constructor(length, ...values) {
          this.length = length;
          this._values = values;
      }
      get(index) { return this._values[index]; }
      set(index, value) { this._values[index] = value; }
  }
  const ɵEMPTY_INLINE_ARRAY = new InlineArray0();
  /**
   * This is a private API only used by the compiler to read the view class.
   */
  function getComponentFactoryViewClass(componentFactory) {
      return componentFactory._viewClass;
  }

  /**
   * Represents an instance of a Component created via a {@link ComponentFactory}.
   *
   * `ComponentRef` provides access to the Component Instance as well other objects related to this
   * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
   * method.
   * @stable
   */
  class ComponentRef {
  }
  /**
   * workaround https://github.com/angular/tsickle/issues/350
   * @suppress {checkTypes}
   */
  class ɵComponentRef_ extends ComponentRef {
      constructor(_index, _parentView, _nativeElement, _component) {
          super();
          this._index = _index;
          this._parentView = _parentView;
          this._nativeElement = _nativeElement;
          this._component = _component;
      }
      get location() { return new ElementRef(this._nativeElement); }
      get injector() { return this._parentView.injector(this._index); }
      get instance() { return this._component; }
      ;
      get hostView() { return this._parentView.ref; }
      ;
      get changeDetectorRef() { return this._parentView.ref; }
      ;
      get componentType() { return this._component.constructor; }
      destroy() { this._parentView.detachAndDestroy(); }
      onDestroy(callback) { this.hostView.onDestroy(callback); }
  }
  /**
   * @stable
   */
  class ComponentFactory {
      constructor(selector, _viewClass, componentType) {
          this.selector = selector;
          this.componentType = componentType;
          this._viewClass = _viewClass;
      }
      /**
       * Creates a new component.
       */
      create(injector, projectableNodes = null, rootSelectorOrNode = null) {
          const vu = injector.get(ɵViewUtils);
          if (!projectableNodes) {
              projectableNodes = [];
          }
          const hostView = new this._viewClass(vu, null, null, null);
          return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);
      }
  }

  function noComponentFactoryError(component) {
      const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);
      error[ERROR_COMPONENT] = component;
      return error;
  }
  const ERROR_COMPONENT = 'ngComponent';
  class _NullComponentFactoryResolver {
      resolveComponentFactory(component) {
          throw noComponentFactoryError(component);
      }
  }
  /**
   * @stable
   */
  class ComponentFactoryResolver {
  }
  ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
  class ɵCodegenComponentFactoryResolver {
      constructor(factories, _parent) {
          this._parent = _parent;
          this._factories = new Map();
          for (let i = 0; i < factories.length; i++) {
              const factory = factories[i];
              this._factories.set(factory.componentType, factory);
          }
      }
      resolveComponentFactory(component) {
          let result = this._factories.get(component);
          if (!result) {
              result = this._parent.resolveComponentFactory(component);
          }
          return result;
      }
  }

  let trace;
  let events;
  function detectWTF() {
      const wtf = global$1 /** TODO #9100 */['wtf'];
      if (wtf) {
          trace = wtf['trace'];
          if (trace) {
              events = trace['events'];
              return true;
          }
      }
      return false;
  }
  function createScope(signature, flags = null) {
      return events.createScope(signature, flags);
  }
  function leave(scope, returnValue) {
      trace.leaveScope(scope, returnValue);
      return returnValue;
  }

  /**
   * True if WTF is enabled.
   */
  const wtfEnabled = detectWTF();
  function noopScope(arg0, arg1) {
      return null;
  }
  /**
   * Create trace scope.
   *
   * Scopes must be strictly nested and are analogous to stack frames, but
   * do not have to follow the stack frames. Instead it is recommended that they follow logical
   * nesting. You may want to use
   * [Event
   * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
   * as they are defined in WTF.
   *
   * Used to mark scope entry. The return value is used to leave the scope.
   *
   *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
   *
   *     someMethod() {
   *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
   *        // DO SOME WORK HERE
   *        return wtfLeave(s, 123); // Return value 123
   *     }
   *
   * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
   * negatively impact the performance of your application. For this reason we recommend that
   * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
   * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
   * exception, will produce incorrect trace, but presence of exception signifies logic error which
   * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
   * an exception is expected during normal execution while profiling.
   *
   * @experimental
   */
  const wtfCreateScope = wtfEnabled ? createScope : (signature, flags) => noopScope;
  /**
   * Used to mark end of Scope.
   *
   * - `scope` to end.
   * - `returnValue` (optional) to be passed to the WTF.
   *
   * Returns the `returnValue for easy chaining.
   * @experimental
   */
  const wtfLeave = wtfEnabled ? leave : (s, r) => r;

  /**
   * The Testability service provides testing hooks that can be accessed from
   * the browser and by services such as Protractor. Each bootstrapped Angular
   * application on the page will have an instance of Testability.
   * @experimental
   */
  class Testability {
      constructor(_ngZone) {
          this._ngZone = _ngZone;
          /** @internal */
          this._pendingCount = 0;
          /** @internal */
          this._isZoneStable = true;
          /**
           * Whether any work was done since the last 'whenStable' callback. This is
           * useful to detect if this could have potentially destabilized another
           * component while it is stabilizing.
           * @internal
           */
          this._didWork = false;
          /** @internal */
          this._callbacks = [];
          this._watchAngularEvents();
      }
      /** @internal */
      _watchAngularEvents() {
          this._ngZone.onUnstable.subscribe({
              next: () => {
                  this._didWork = true;
                  this._isZoneStable = false;
              }
          });
          this._ngZone.runOutsideAngular(() => {
              this._ngZone.onStable.subscribe({
                  next: () => {
                      NgZone.assertNotInAngularZone();
                      scheduleMicroTask(() => {
                          this._isZoneStable = true;
                          this._runCallbacksIfReady();
                      });
                  }
              });
          });
      }
      increasePendingRequestCount() {
          this._pendingCount += 1;
          this._didWork = true;
          return this._pendingCount;
      }
      decreasePendingRequestCount() {
          this._pendingCount -= 1;
          if (this._pendingCount < 0) {
              throw new Error('pending async requests below zero');
          }
          this._runCallbacksIfReady();
          return this._pendingCount;
      }
      isStable() {
          return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
      }
      /** @internal */
      _runCallbacksIfReady() {
          if (this.isStable()) {
              // Schedules the call backs in a new frame so that it is always async.
              scheduleMicroTask(() => {
                  while (this._callbacks.length !== 0) {
                      (this._callbacks.pop())(this._didWork);
                  }
                  this._didWork = false;
              });
          }
          else {
              // Not Ready
              this._didWork = true;
          }
      }
      whenStable(callback) {
          this._callbacks.push(callback);
          this._runCallbacksIfReady();
      }
      getPendingRequestCount() { return this._pendingCount; }
      /** @deprecated use findProviders */
      findBindings(using, provider, exactMatch) {
          // TODO(juliemr): implement.
          return [];
      }
      findProviders(using, provider, exactMatch) {
          // TODO(juliemr): implement.
          return [];
      }
  }
  Testability.decorators = [
      { type: Injectable },
  ];
  /** @nocollapse */
  Testability.ctorParameters = () => [
      { type: NgZone, },
  ];
  /**
   * A global registry of {@link Testability} instances for specific elements.
   * @experimental
   */
  class TestabilityRegistry {
      constructor() {
          /** @internal */
          this._applications = new Map();
          _testabilityGetter.addToWindow(this);
      }
      registerApplication(token, testability) {
          this._applications.set(token, testability);
      }
      getTestability(elem) { return this._applications.get(elem); }
      getAllTestabilities() { return Array.from(this._applications.values()); }
      getAllRootElements() { return Array.from(this._applications.keys()); }
      findTestabilityInTree(elem, findInAncestors = true) {
          return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
      }
  }
  TestabilityRegistry.decorators = [
      { type: Injectable },
  ];
  /** @nocollapse */
  TestabilityRegistry.ctorParameters = () => [];
  class _NoopGetTestability {
      addToWindow(registry) { }
      findTestabilityInTree(registry, elem, findInAncestors) {
          return null;
      }
  }
  let _testabilityGetter = new _NoopGetTestability();

  let _devMode = true;
  let _runModeLocked = false;
  let _platform;
  const ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
  /**
   * Returns whether Angular is in development mode. After called once,
   * the value is locked and won't change any more.
   *
   * By default, this is true, unless a user calls `enableProdMode` before calling this.
   *
   * @experimental APIs related to application bootstrap are currently under review.
   */
  function isDevMode() {
      _runModeLocked = true;
      return _devMode;
  }
  /**
   * Creates a platform.
   * Platforms have to be eagerly created via this function.
   *
   * @experimental APIs related to application bootstrap are currently under review.
   */
  function createPlatform(injector) {
      if (_platform && !_platform.destroyed &&
          !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
          throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
      }
      _platform = injector.get(PlatformRef);
      const inits = injector.get(PLATFORM_INITIALIZER, null);
      if (inits)
          inits.forEach(init => init());
      return _platform;
  }
  /**
   * Creates a factory for a platform
   *
   * @experimental APIs related to application bootstrap are currently under review.
   */
  function createPlatformFactory(parentPlatformFactory, name, providers = []) {
      const marker = new InjectionToken(`Platform: ${name}`);
      return (extraProviders = []) => {
          let platform = getPlatform();
          if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
              if (parentPlatformFactory) {
                  parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
              }
              else {
                  createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
              }
          }
          return assertPlatform(marker);
      };
  }
  /**
   * Checks that there currently is a platform which contains the given token as a provider.
   *
   * @experimental APIs related to application bootstrap are currently under review.
   */
  function assertPlatform(requiredToken) {
      const platform = getPlatform();
      if (!platform) {
          throw new Error('No platform exists!');
      }
      if (!platform.injector.get(requiredToken, null)) {
          throw new Error('A platform with a different configuration has been created. Please destroy it first.');
      }
      return platform;
  }
  /**
   * Returns the current platform.
   *
   * @experimental APIs related to application bootstrap are currently under review.
   */
  function getPlatform() {
      return _platform && !_platform.destroyed ? _platform : null;
  }
  /**
   * The Angular platform is the entry point for Angular on a web page. Each page
   * has exactly one platform, and services (such as reflection) which are common
   * to every Angular application running on the page are bound in its scope.
   *
   * A page's platform is initialized implicitly when {@link bootstrap}() is called, or
   * explicitly by calling {@link createPlatform}().
   *
   * @stable
   */
  class PlatformRef {
  }
  function _callAndReportToErrorHandler(errorHandler, callback) {
      try {
          const result = callback();
          if (isPromise$1(result)) {
              return result.catch((e) => {
                  errorHandler.handleError(e);
                  // rethrow as the exception handler might not do it
                  throw e;
              });
          }
          return result;
      }
      catch (e) {
          errorHandler.handleError(e);
          // rethrow as the exception handler might not do it
          throw e;
      }
  }
  /**
   * workaround https://github.com/angular/tsickle/issues/350
   * @suppress {checkTypes}
   */
  class PlatformRef_ extends PlatformRef {
      constructor(_injector) {
          super();
          this._injector = _injector;
          this._modules = [];
          this._destroyListeners = [];
          this._destroyed = false;
      }
      onDestroy(callback) { this._destroyListeners.push(callback); }
      get injector() { return this._injector; }
      get destroyed() { return this._destroyed; }
      destroy() {
          if (this._destroyed) {
              throw new Error('The platform has already been destroyed!');
          }
          this._modules.slice().forEach(module => module.destroy());
          this._destroyListeners.forEach(listener => listener());
          this._destroyed = true;
      }
      bootstrapModuleFactory(moduleFactory) {
          return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
      }
      _bootstrapModuleFactoryWithZone(moduleFactory, ngZone) {
          // Note: We need to create the NgZone _before_ we instantiate the module,
          // as instantiating the module creates some providers eagerly.
          // So we create a mini parent injector that just contains the new NgZone and
          // pass that as parent to the NgModuleFactory.
          if (!ngZone)
              ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
          // Attention: Don't use ApplicationRef.run here,
          // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
          return ngZone.run(() => {
              const ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], this.injector);
              const moduleRef = moduleFactory.create(ngZoneInjector);
              const exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
              if (!exceptionHandler) {
                  throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
              }
              moduleRef.onDestroy(() => ListWrapper.remove(this._modules, moduleRef));
              ngZone.onError.subscribe({ next: (error) => { exceptionHandler.handleError(error); } });
              return _callAndReportToErrorHandler(exceptionHandler, () => {
                  const initStatus = moduleRef.injector.get(ApplicationInitStatus);
                  return initStatus.donePromise.then(() => {
                      this._moduleDoBootstrap(moduleRef);
                      return moduleRef;
                  });
              });
          });
      }
      bootstrapModule(moduleType, compilerOptions = []) {
          return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
      }
      _bootstrapModuleWithZone(moduleType, compilerOptions = [], ngZone = null) {
          const compilerFactory = this.injector.get(CompilerFactory);
          const compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
          return compiler.compileModuleAsync(moduleType)
              .then((moduleFactory) => this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone));
      }
      _moduleDoBootstrap(moduleRef) {
          const appRef = moduleRef.injector.get(ApplicationRef);
          if (moduleRef.bootstrapFactories.length > 0) {
              moduleRef.bootstrapFactories.forEach((compFactory) => appRef.bootstrap(compFactory));
          }
          else if (moduleRef.instance.ngDoBootstrap) {
              moduleRef.instance.ngDoBootstrap(appRef);
          }
          else {
              throw new Error(`The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. ` +
                  `Please define one of these.`);
          }
          this._modules.push(moduleRef);
      }
  }
  PlatformRef_.decorators = [
      { type: Injectable },
  ];
  /** @nocollapse */
  PlatformRef_.ctorParameters = () => [
      { type: Injector, },
  ];
  /**
   * A reference to an Angular application running on a page.
   *
   * For more about Angular applications, see the documentation for {@link bootstrap}.
   *
   * @stable
   */
  class ApplicationRef {
  }
  /**
   * workaround https://github.com/angular/tsickle/issues/350
   * @suppress {checkTypes}
   */
  class ApplicationRef_ extends ApplicationRef {
      constructor(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
          super();
          this._zone = _zone;
          this._console = _console;
          this._injector = _injector;
          this._exceptionHandler = _exceptionHandler;
          this._componentFactoryResolver = _componentFactoryResolver;
          this._initStatus = _initStatus;
          this._testabilityRegistry = _testabilityRegistry;
          this._testability = _testability;
          this._bootstrapListeners = [];
          this._rootComponents = [];
          this._rootComponentTypes = [];
          this._views = [];
          this._runningTick = false;
          this._enforceNoNewChanges = false;
          this._stable = true;
          this._enforceNoNewChanges = isDevMode();
          this._zone.onMicrotaskEmpty.subscribe({ next: () => { this._zone.run(() => { this.tick(); }); } });
          const isCurrentlyStable = new Observable_2((observer) => {
              this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&
                  !this._zone.hasPendingMicrotasks;
              this._zone.runOutsideAngular(() => {
                  observer.next(this._stable);
                  observer.complete();
              });
          });
          const isStable = new Observable_2((observer) => {
              const stableSub = this._zone.onStable.subscribe(() => {
                  NgZone.assertNotInAngularZone();
                  // Check whether there are no pending macro/micro tasks in the next tick
                  // to allow for NgZone to update the state.
                  scheduleMicroTask(() => {
                      if (!this._stable && !this._zone.hasPendingMacrotasks &&
                          !this._zone.hasPendingMicrotasks) {
                          this._stable = true;
                          observer.next(true);
                      }
                  });
              });
              const unstableSub = this._zone.onUnstable.subscribe(() => {
                  NgZone.assertInAngularZone();
                  if (this._stable) {
                      this._stable = false;
                      this._zone.runOutsideAngular(() => { observer.next(false); });
                  }
              });
              return () => {
                  stableSub.unsubscribe();
                  unstableSub.unsubscribe();
              };
          });
          this._isStable = merge_2(isCurrentlyStable, share_2.call(isStable));
      }
      attachView(viewRef) {
          const view = viewRef;
          this._views.push(view);
          view.attachToAppRef(this);
      }
      detachView(viewRef) {
          const view = viewRef;
          ListWrapper.remove(this._views, view);
          view.detachFromAppRef();
      }
      bootstrap(componentOrFactory) {
          if (!this._initStatus.done) {
              throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
          }
          let componentFactory;
          if (componentOrFactory instanceof ComponentFactory) {
              componentFactory = componentOrFactory;
          }
          else {
              componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
          }
          this._rootComponentTypes.push(componentFactory.componentType);
          const compRef = componentFactory.create(this._injector, [], componentFactory.selector);
          compRef.onDestroy(() => { this._unloadComponent(compRef); });
          const testability = compRef.injector.get(Testability, null);
          if (testability) {
              compRef.injector.get(TestabilityRegistry)
                  .registerApplication(compRef.location.nativeElement, testability);
          }
          this._loadComponent(compRef);
          if (isDevMode()) {
              this._console.log(`Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);
          }
          return compRef;
      }
      _loadComponent(componentRef) {
          this.attachView(componentRef.hostView);
          this.tick();
          this._rootComponents.push(componentRef);
          // Get the listeners lazily to prevent DI cycles.
          const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
          listeners.forEach((listener) => listener(componentRef));
      }
      _unloadComponent(componentRef) {
          this.detachView(componentRef.hostView);
          ListWrapper.remove(this._rootComponents, componentRef);
      }
      tick() {
          if (this._runningTick) {
              throw new Error('ApplicationRef.tick is called recursively');
          }
          const scope = ApplicationRef_._tickScope();
          try {
              this._runningTick = true;
              this._views.forEach((view) => view.detectChanges());
              if (this._enforceNoNewChanges) {
                  this._views.forEach((view) => view.checkNoChanges());
              }
          }
          finally {
              this._runningTick = false;
              wtfLeave(scope);
          }
      }
      ngOnDestroy() {
          // TODO(alxhub): Dispose of the NgZone.
          this._views.slice().forEach((view) => view.destroy());
      }
      get viewCount() { return this._views.length; }
      get componentTypes() { return this._rootComponentTypes; }
      get components() { return this._rootComponents; }
      get isStable() { return this._isStable; }
  }
  /** @internal */
  ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
  ApplicationRef_.decorators = [
      { type: Injectable },
  ];
  /** @nocollapse */
  ApplicationRef_.ctorParameters = () => [
      { type: NgZone, },
      { type: Console, },
      { type: Injector, },
      { type: ErrorHandler, },
      { type: ComponentFactoryResolver, },
      { type: ApplicationInitStatus, },
      { type: TestabilityRegistry, decorators: [{ type: Optional },] },
      { type: Testability, decorators: [{ type: Optional },] },
  ];

  /**
   * @experimental
   */
  class NgModuleFactory {
      constructor(_injectorClass, _moduleType) {
          this._injectorClass = _injectorClass;
          this._moduleType = _moduleType;
      }
      get moduleType() { return this._moduleType; }
      create(parentInjector) {
          if (!parentInjector) {
              parentInjector = Injector.NULL;
          }
          const instance = new this._injectorClass(parentInjector);
          instance.create();
          return instance;
      }
  }
  const _UNDEFINED = new Object();
  class ɵNgModuleInjector extends ɵCodegenComponentFactoryResolver {
      constructor(parent, factories, bootstrapFactories) {
          super(factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
          this.parent = parent;
          this.bootstrapFactories = bootstrapFactories;
          this._destroyListeners = [];
          this._destroyed = false;
      }
      create() { this.instance = this.createInternal(); }
      get(token, notFoundValue = THROW_IF_NOT_FOUND) {
          if (token === Injector || token === ComponentFactoryResolver) {
              return this;
          }
          const result = this.getInternal(token, _UNDEFINED);
          return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
      }
      get injector() { return this; }
      get componentFactoryResolver() { return this; }
      destroy() {
          if (this._destroyed) {
              throw new Error(`The ng module ${stringify(this.instance.constructor)} has already been destroyed.`);
          }
          this._destroyed = true;
          this.destroyInternal();
          this._destroyListeners.forEach((listener) => listener());
      }
      onDestroy(callback) { this._destroyListeners.push(callback); }
  }

  let moduleFactories = new Map();
  /**
   * Registers a loaded module. Should only be called from generated NgModuleFactory code.
   * @experimental
   */
  function ɵregisterModuleFactory(id, factory) {
      const existing = moduleFactories.get(id);
      if (existing) {
          throw new Error(`Duplicate module registered for ${id} - ${existing.moduleType.name} vs ${factory.moduleType.name}`);
      }
      moduleFactories.set(id, factory);
  }

  /**
   * An unmodifiable list of items that Angular keeps up to date when the state
   * of the application changes.
   *
   * The type of object that {@link Query} and {@link ViewQueryMetadata} provide.
   *
   * Implements an iterable interface, therefore it can be used in both ES6
   * javascript `for (var i of items)` loops as well as in Angular templates with
   * `*ngFor="let i of myList"`.
   *
   * Changes can be observed by subscribing to the changes `Observable`.
   *
   * NOTE: In the future this class will implement an `Observable` interface.
   *
   * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
   * ```typescript
   * @Component({...})
   * class Container {
   *   @ViewChildren(Item) items:QueryList<Item>;
   * }
   * ```
   * @stable
   */
  class QueryList {
      constructor() {
          this._dirty = true;
          this._results = [];
          this._emitter = new EventEmitter();
      }
      get changes() { return this._emitter; }
      get length() { return this._results.length; }
      get first() { return this._results[0]; }
      get last() { return this._results[this.length - 1]; }
      /**
       * See
       * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
       */
      map(fn) { return this._results.map(fn); }
      /**
       * See
       * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
       */
      filter(fn) {
          return this._results.filter(fn);
      }
      /**
       * See
       * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
       */
      find(fn) { return this._results.find(fn); }
      /**
       * See
       * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
       */
      reduce(fn, init) {
          return this._results.reduce(fn, init);
      }
      /**
       * See
       * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
       */
      forEach(fn) { this._results.forEach(fn); }
      /**
       * See
       * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
       */
      some(fn) {
          return this._results.some(fn);
      }
      toArray() { return this._results.slice(); }
      [getSymbolIterator()]() { return this._results[getSymbolIterator()](); }
      toString() { return this._results.toString(); }
      reset(res) {
          this._results = ListWrapper.flatten(res);
          this._dirty = false;
      }
      notifyOnChanges() { this._emitter.emit(this); }
      /** internal */
      setDirty() { this._dirty = true; }
      /** internal */
      get dirty() { return this._dirty; }
  }

  /**
   * Represents an Embedded Template that can be used to instantiate Embedded Views.
   *
   * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element
   * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into
   * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for
   * the `TemplateRef` from a Component or a Directive via {@link Query}.
   *
   * To instantiate Embedded Views based on a Template, use
   * {@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
   * View Container.
   * @stable
   */
  class TemplateRef {
  }
  /**
   * workaround https://github.com/angular/tsickle/issues/350
   * @suppress {checkTypes}
   */
  class ɵTemplateRef_ extends TemplateRef {
      constructor(_parentView, _nodeIndex, _nativeElement) {
          super();
          this._parentView = _parentView;
          this._nodeIndex = _nodeIndex;
          this._nativeElement = _nativeElement;
      }
      createEmbeddedView(context) {
          const view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);
          view.create(context || {});
          return view.ref;
      }
      get elementRef() { return new ElementRef(this._nativeElement); }
  }

  /**
   * Represents a container where one or more Views can be attached.
   *
   * The container can contain two kinds of Views. Host Views, created by instantiating a
   * {@link Component} via {@link #createComponent}, and Embedded Views, created by instantiating an
   * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.
   *
   * The location of the View Container within the containing View is specified by the Anchor
   * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
   * have a single View Container.
   *
   * Root elements of Views attached to this container become siblings of the Anchor Element in
   * the Rendered View.
   *
   * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected
   * with `ViewContainerRef` on the Element, or you obtain it via a {@link ViewChild} query.
   * @stable
   */
  class ViewContainerRef {
  }
  class ViewContainerRef_ {
      constructor(_element) {
          this._element = _element;
          /** @internal */
          this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');
          /** @internal */
          this._insertScope = wtfCreateScope('ViewContainerRef#insert()');
          /** @internal */
          this._removeScope = wtfCreateScope('ViewContainerRef#remove()');
          /** @internal */
          this._detachScope = wtfCreateScope('ViewContainerRef#detach()');
      }
      get(index) { return this._element.nestedViews[index].ref; }
      get length() {
          const views = this._element.nestedViews;
          return views ? views.length : 0;
      }
      get element() { return this._element.elementRef; }
      get injector() { return this._element.injector; }
      get parentInjector() { return this._element.parentInjector; }
      // TODO(rado): profile and decide whether bounds checks should be added
      // to the methods below.
      createEmbeddedView(templateRef, context = null, index = -1) {
          const viewRef = templateRef.createEmbeddedView(context);
          this.insert(viewRef, index);
          return viewRef;
      }
      createComponent(componentFactory, index = -1, injector = null, projectableNodes = null) {
          const s = this._createComponentInContainerScope();
          const contextInjector = injector || this._element.parentInjector;
          const componentRef = componentFactory.create(contextInjector, projectableNodes);
          this.insert(componentRef.hostView, index);
          return wtfLeave(s, componentRef);
      }
      // TODO(i): refactor insert+remove into move
      insert(viewRef, index = -1) {
          const s = this._insertScope();
          if (index == -1)
              index = this.length;
          const viewRef_ = viewRef;
          this._element.attachView(viewRef_.internalView, index);
          return wtfLeave(s, viewRef_);
      }
      move(viewRef, currentIndex) {
          const s = this._insertScope();
          if (currentIndex == -1)
              return;
          const viewRef_ = viewRef;
          this._element.moveView(viewRef_.internalView, currentIndex);
          return wtfLeave(s, viewRef_);
      }
      indexOf(viewRef) {
          return this.length ? this._element.nestedViews.indexOf(viewRef.internalView) :
              -1;
      }
      // TODO(i): rename to destroy
      remove(index = -1) {
          const s = this._removeScope();
          if (index == -1)
              index = this.length - 1;
          const view = this._element.detachView(index);
          view.destroy();
          // view is intentionally not returned to the client.
          wtfLeave(s);
      }
      // TODO(i): refactor insert+remove into move
      detach(index = -1) {
          const s = this._detachScope();
          if (index == -1)
              index = this.length - 1;
          const view = this._element.detachView(index);
          return wtfLeave(s, view.ref);
      }
      clear() {
          for (let i = this.length - 1; i >= 0; i--) {
              this.remove(i);
          }
      }
  }

  class ViewRef_ {
      constructor(_view, animationQueue) {
          this._view = _view;
          this.animationQueue = animationQueue;
          this._view = _view;
          this._originalMode = this._view.cdMode;
      }
      get internalView() { return this._view; }
      get rootNodes() { return this._view.flatRootNodes; }
      get context() { return this._view.context; }
      get destroyed() { return this._view.destroyed; }
      markForCheck() { this._view.markPathToRootAsCheckOnce(); }
      detach() { this._view.cdMode = ChangeDetectorStatus.Detached; }
      detectChanges() {
          this._view.detectChanges(false);
          this.animationQueue.flush();
      }
      checkNoChanges() { this._view.detectChanges(true); }
      reattach() {
          this._view.cdMode = this._originalMode;
          this.markForCheck();
      }
      onDestroy(callback) {
          if (!this._view.disposables) {
              this._view.disposables = [];
          }
          this._view.disposables.push(callback);
      }
      destroy() { this._view.detachAndDestroy(); }
      detachFromAppRef() { this._view.detach(); }
      attachToAppRef(appRef) { this._view.attachToAppRef(appRef); }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  class EventListener {
      constructor(name, callback) {
          this.name = name;
          this.callback = callback;
      }
      ;
  }
  /**
   * @experimental All debugging apis are currently experimental.
   */
  class DebugNode {
      constructor(nativeNode, parent, _debugInfo) {
          this._debugInfo = _debugInfo;
          this.nativeNode = nativeNode;
          if (parent && parent instanceof DebugElement) {
              parent.addChild(this);
          }
          else {
              this.parent = null;
          }
          this.listeners = [];
      }
      get injector() { return this._debugInfo ? this._debugInfo.injector : null; }
      get componentInstance() { return this._debugInfo ? this._debugInfo.component : null; }
      get context() { return this._debugInfo ? this._debugInfo.context : null; }
      get references() {
          return this._debugInfo ? this._debugInfo.references : null;
      }
      get providerTokens() { return this._debugInfo ? this._debugInfo.providerTokens : null; }
      get source() { return this._debugInfo ? this._debugInfo.source : null; }
  }
  /**
   * @experimental All debugging apis are currently experimental.
   */
  class DebugElement extends DebugNode {
      constructor(nativeNode, parent, _debugInfo) {
          super(nativeNode, parent, _debugInfo);
          this.properties = {};
          this.attributes = {};
          this.classes = {};
          this.styles = {};
          this.childNodes = [];
          this.nativeElement = nativeNode;
      }
      addChild(child) {
          if (child) {
              this.childNodes.push(child);
              child.parent = this;
          }
      }
      removeChild(child) {
          const childIndex = this.childNodes.indexOf(child);
          if (childIndex !== -1) {
              child.parent = null;
              this.childNodes.splice(childIndex, 1);
          }
      }
      insertChildrenAfter(child, newChildren) {
          const siblingIndex = this.childNodes.indexOf(child);
          if (siblingIndex !== -1) {
              this.childNodes.splice(siblingIndex + 1, 0, ...newChildren);
              newChildren.forEach(c => {
                  if (c.parent) {
                      c.parent.removeChild(c);
                  }
                  c.parent = this;
              });
          }
      }
      insertBefore(refChild, newChild) {
          const refIndex = this.childNodes.indexOf(refChild);
          if (refIndex === -1) {
              this.addChild(newChild);
          }
          else {
              if (newChild.parent) {
                  newChild.parent.removeChild(newChild);
              }
              newChild.parent = this;
              this.childNodes.splice(refIndex, 0, newChild);
          }
      }
      query(predicate) {
          const results = this.queryAll(predicate);
          return results[0] || null;
      }
      queryAll(predicate) {
          const matches = [];
          _queryElementChildren(this, predicate, matches);
          return matches;
      }
      queryAllNodes(predicate) {
          const matches = [];
          _queryNodeChildren(this, predicate, matches);
          return matches;
      }
      get children() {
          return this.childNodes.filter((node) => node instanceof DebugElement);
      }
      triggerEventHandler(eventName, eventObj) {
          this.listeners.forEach((listener) => {
              if (listener.name == eventName) {
                  listener.callback(eventObj);
              }
          });
      }
  }
  function _queryElementChildren(element, predicate, matches) {
      element.childNodes.forEach(node => {
          if (node instanceof DebugElement) {
              if (predicate(node)) {
                  matches.push(node);
              }
              _queryElementChildren(node, predicate, matches);
          }
      });
  }
  function _queryNodeChildren(parentNode, predicate, matches) {
      if (parentNode instanceof DebugElement) {
          parentNode.childNodes.forEach(node => {
              if (predicate(node)) {
                  matches.push(node);
              }
              if (node instanceof DebugElement) {
                  _queryNodeChildren(node, predicate, matches);
              }
          });
      }
  }
  // Need to keep the nodes in a global Map so that multiple angular apps are supported.
  const _nativeNodeToDebugNode = new Map();
  /**
   * @experimental
   */
  function getDebugNode(nativeNode) {
      return _nativeNodeToDebugNode.get(nativeNode);
  }
  function indexDebugNode(node) {
      _nativeNodeToDebugNode.set(node.nativeNode, node);
  }
  function removeDebugNodeFromIndex(node) {
      _nativeNodeToDebugNode.delete(node.nativeNode);
  }

  function _reflector() {
      return reflector;
  }
  const _CORE_PLATFORM_PROVIDERS = [
      // Set a default platform name for platforms that don't set it explicitly.
      { provide: PLATFORM_ID, useValue: 'unknown' },
      PlatformRef_,
      { provide: PlatformRef, useExisting: PlatformRef_ },
      { provide: Reflector, useFactory: _reflector, deps: [] },
      { provide: ReflectorReader, useExisting: Reflector },
      TestabilityRegistry,
      Console,
  ];
  /**
   * This platform has to be included in any other platform
   *
   * @experimental
   */
  const platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);

  /**
   * @experimental i18n support is experimental.
   */
  const LOCALE_ID = new InjectionToken('LocaleId');
  /**
   * @experimental i18n support is experimental.
   */
  const TRANSLATIONS = new InjectionToken('Translations');
  /**
   * @experimental i18n support is experimental.
   */
  const TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
  /**
   * @experimental i18n support is experimental.
   */
  var MissingTranslationStrategy;
  (function (MissingTranslationStrategy) {
      MissingTranslationStrategy[MissingTranslationStrategy["Error"] = 0] = "Error";
      MissingTranslationStrategy[MissingTranslationStrategy["Warning"] = 1] = "Warning";
      MissingTranslationStrategy[MissingTranslationStrategy["Ignore"] = 2] = "Ignore";
  })(MissingTranslationStrategy || (MissingTranslationStrategy = {}));

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var ArgumentType;
  (function (ArgumentType) {
      ArgumentType[ArgumentType["Inline"] = 0] = "Inline";
      ArgumentType[ArgumentType["Dynamic"] = 1] = "Dynamic";
  })(ArgumentType || (ArgumentType = {}));
  /**
   * Bitmask for ViewDefintion.flags.
   */
  var ViewFlags;
  (function (ViewFlags) {
      ViewFlags[ViewFlags["None"] = 0] = "None";
      ViewFlags[ViewFlags["OnPush"] = 2] = "OnPush";
  })(ViewFlags || (ViewFlags = {}));
  var NodeType;
  (function (NodeType) {
      NodeType[NodeType["Element"] = 0] = "Element";
      NodeType[NodeType["Text"] = 1] = "Text";
      NodeType[NodeType["Directive"] = 2] = "Directive";
      NodeType[NodeType["Provider"] = 3] = "Provider";
      NodeType[NodeType["Pipe"] = 4] = "Pipe";
      NodeType[NodeType["PureExpression"] = 5] = "PureExpression";
      NodeType[NodeType["Query"] = 6] = "Query";
      NodeType[NodeType["NgContent"] = 7] = "NgContent";
  })(NodeType || (NodeType = {}));
  /**
   * Bitmask for NodeDef.flags.
   */
  var NodeFlags;
  (function (NodeFlags) {
      NodeFlags[NodeFlags["None"] = 0] = "None";
      NodeFlags[NodeFlags["OnInit"] = 1] = "OnInit";
      NodeFlags[NodeFlags["OnDestroy"] = 2] = "OnDestroy";
      NodeFlags[NodeFlags["DoCheck"] = 4] = "DoCheck";
      NodeFlags[NodeFlags["OnChanges"] = 8] = "OnChanges";
      NodeFlags[NodeFlags["AfterContentInit"] = 16] = "AfterContentInit";
      NodeFlags[NodeFlags["AfterContentChecked"] = 32] = "AfterContentChecked";
      NodeFlags[NodeFlags["AfterViewInit"] = 64] = "AfterViewInit";
      NodeFlags[NodeFlags["AfterViewChecked"] = 128] = "AfterViewChecked";
      NodeFlags[NodeFlags["HasEmbeddedViews"] = 256] = "HasEmbeddedViews";
      NodeFlags[NodeFlags["HasComponent"] = 512] = "HasComponent";
      NodeFlags[NodeFlags["IsComponent"] = 1024] = "IsComponent";
      NodeFlags[NodeFlags["HasContentQuery"] = 2048] = "HasContentQuery";
      NodeFlags[NodeFlags["HasStaticQuery"] = 4096] = "HasStaticQuery";
      NodeFlags[NodeFlags["HasDynamicQuery"] = 8192] = "HasDynamicQuery";
      NodeFlags[NodeFlags["HasViewQuery"] = 16384] = "HasViewQuery";
      NodeFlags[NodeFlags["LazyProvider"] = 32768] = "LazyProvider";
      NodeFlags[NodeFlags["PrivateProvider"] = 65536] = "PrivateProvider";
  })(NodeFlags || (NodeFlags = {}));
  var BindingType;
  (function (BindingType) {
      BindingType[BindingType["ElementAttribute"] = 0] = "ElementAttribute";
      BindingType[BindingType["ElementClass"] = 1] = "ElementClass";
      BindingType[BindingType["ElementStyle"] = 2] = "ElementStyle";
      BindingType[BindingType["ElementProperty"] = 3] = "ElementProperty";
      BindingType[BindingType["ComponentHostProperty"] = 4] = "ComponentHostProperty";
      BindingType[BindingType["DirectiveProperty"] = 5] = "DirectiveProperty";
      BindingType[BindingType["TextInterpolation"] = 6] = "TextInterpolation";
      BindingType[BindingType["PureExpressionProperty"] = 7] = "PureExpressionProperty";
  })(BindingType || (BindingType = {}));
  var OutputType;
  (function (OutputType) {
      OutputType[OutputType["ElementOutput"] = 0] = "ElementOutput";
      OutputType[OutputType["DirectiveOutput"] = 1] = "DirectiveOutput";
  })(OutputType || (OutputType = {}));
  var QueryValueType;
  (function (QueryValueType) {
      QueryValueType[QueryValueType["ElementRef"] = 0] = "ElementRef";
      QueryValueType[QueryValueType["RenderElement"] = 1] = "RenderElement";
      QueryValueType[QueryValueType["TemplateRef"] = 2] = "TemplateRef";
      QueryValueType[QueryValueType["ViewContainerRef"] = 3] = "ViewContainerRef";
      QueryValueType[QueryValueType["Provider"] = 4] = "Provider";
  })(QueryValueType || (QueryValueType = {}));
  var ProviderType;
  (function (ProviderType) {
      ProviderType[ProviderType["Value"] = 0] = "Value";
      ProviderType[ProviderType["Class"] = 1] = "Class";
      ProviderType[ProviderType["Factory"] = 2] = "Factory";
      ProviderType[ProviderType["UseExisting"] = 3] = "UseExisting";
  })(ProviderType || (ProviderType = {}));
  /**
   * Bitmask for DI flags
   */
  var DepFlags;
  (function (DepFlags) {
      DepFlags[DepFlags["None"] = 0] = "None";
      DepFlags[DepFlags["SkipSelf"] = 1] = "SkipSelf";
      DepFlags[DepFlags["Optional"] = 2] = "Optional";
      DepFlags[DepFlags["Value"] = 8] = "Value";
  })(DepFlags || (DepFlags = {}));
  var PureExpressionType;
  (function (PureExpressionType) {
      PureExpressionType[PureExpressionType["Array"] = 0] = "Array";
      PureExpressionType[PureExpressionType["Object"] = 1] = "Object";
      PureExpressionType[PureExpressionType["Pipe"] = 2] = "Pipe";
  })(PureExpressionType || (PureExpressionType = {}));
  var QueryBindingType;
  (function (QueryBindingType) {
      QueryBindingType[QueryBindingType["First"] = 0] = "First";
      QueryBindingType[QueryBindingType["All"] = 1] = "All";
  })(QueryBindingType || (QueryBindingType = {}));
  /**
   * Bitmask of states
   */
  var ViewState;
  (function (ViewState) {
      ViewState[ViewState["FirstCheck"] = 1] = "FirstCheck";
      ViewState[ViewState["ChecksEnabled"] = 2] = "ChecksEnabled";
      ViewState[ViewState["Errored"] = 4] = "Errored";
      ViewState[ViewState["Destroyed"] = 8] = "Destroyed";
  })(ViewState || (ViewState = {}));
  /**
   * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
   */
  function asTextData(view, index) {
      return view.nodes[index];
  }
  /**
   * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
   */
  function asElementData(view, index) {
      return view.nodes[index];
  }
  /**
   * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
   */
  function asProviderData(view, index) {
      return view.nodes[index];
  }
  /**
   * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
   */
  function asPureExpressionData(view, index) {
      return view.nodes[index];
  }
  /**
   * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
   */
  function asQueryList(view, index) {
      return view.nodes[index];
  }
  // -------------------------------------
  // Other
  // -------------------------------------
  var CheckType;
  (function (CheckType) {
      CheckType[CheckType["CheckAndUpdate"] = 0] = "CheckAndUpdate";
      CheckType[CheckType["CheckNoChanges"] = 1] = "CheckNoChanges";
  })(CheckType || (CheckType = {}));
  /**
   * This object is used to prevent cycles in the source files and to have a place where
   * debug mode can hook it. It is lazily filled when `isDevMode` is known.
   */
  const Services = {
      setCurrentNode: undefined,
      createRootView: undefined,
      createEmbeddedView: undefined,
      checkAndUpdateView: undefined,
      checkNoChangesView: undefined,
      destroyView: undefined,
      resolveDep: undefined,
      createDebugContext: undefined,
      handleEvent: undefined,
      updateDirectives: undefined,
      updateRenderer: undefined,
      dirtyParentQueries: undefined,
  };

  function expressionChangedAfterItHasBeenCheckedError$1(context, oldValue, currValue, isFirstCheck) {
      let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;
      if (isFirstCheck) {
          msg +=
              ` It seems like the view has been created after its parent and its children have been dirty checked.` +
                  ` Has it been created in a change detection hook ?`;
      }
      return viewDebugError(msg, context);
  }
  function viewWrappedDebugError(originalError, context) {
      const err = viewDebugError(originalError.message, context);
      err[ERROR_ORIGINAL_ERROR] = originalError;
      return err;
  }
  function viewDebugError(msg, context) {
      const err = new Error(msg);
      err[ERROR_DEBUG_CONTEXT] = context;
      err.stack = context.source;
      return err;
  }
  function isViewDebugError(err) {
      return !!getDebugContext(err);
  }
  function viewDestroyedError$1(action) {
      return new Error(`ViewDestroyedError: Attempt to use a destroyed view: ${action}`);
  }

  const _tokenKeyCache = new Map();
  function tokenKey(token) {
      let key = _tokenKeyCache.get(token);
      if (!key) {
          key = stringify(token) + '_' + _tokenKeyCache.size;
          _tokenKeyCache.set(token, key);
      }
      return key;
  }
  let unwrapCounter = 0;
  function ɵunwrapValue(value) {
      if (value instanceof WrappedValue) {
          value = value.wrapped;
          unwrapCounter++;
      }
      return value;
  }
  let _renderCompCount = 0;
  function ɵcreateRendererTypeV2(values) {
      const isFilled = values && (values.encapsulation !== ViewEncapsulation.None ||
          values.styles.length || Object.keys(values.data).length);
      if (isFilled) {
          const id = `c${_renderCompCount++}`;
          return { id: id, styles: values.styles, encapsulation: values.encapsulation, data: values.data };
      }
      else {
          return null;
      }
  }
  function checkBinding(view, def, bindingIdx, value) {
      const oldValues = view.oldValues;
      if (unwrapCounter > 0 || !!(view.state & ViewState.FirstCheck) ||
          !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {
          unwrapCounter = 0;
          return true;
      }
      return false;
  }
  function checkAndUpdateBinding(view, def, bindingIdx, value) {
      if (checkBinding(view, def, bindingIdx, value)) {
          view.oldValues[def.bindingIndex + bindingIdx] = value;
          return true;
      }
      return false;
  }
  function checkBindingNoChanges(view, def, bindingIdx, value) {
      const oldValue = view.oldValues[def.bindingIndex + bindingIdx];
      if (unwrapCounter || (view.state & ViewState.FirstCheck) || !ɵdevModeEqual(oldValue, value)) {
          unwrapCounter = 0;
          throw expressionChangedAfterItHasBeenCheckedError$1(Services.createDebugContext(view, def.index), oldValue, value, (view.state & ViewState.FirstCheck) !== 0);
      }
  }
  function markParentViewsForCheck(view) {
      let currView = view;
      while (currView) {
          if (currView.def.flags & ViewFlags.OnPush) {
              currView.state |= ViewState.ChecksEnabled;
          }
          currView = currView.viewContainerParent || currView.parent;
      }
  }
  function dispatchEvent(view, nodeIndex, eventName, event) {
      markParentViewsForCheck(view);
      return Services.handleEvent(view, nodeIndex, eventName, event);
  }
  function declaredViewContainer(view) {
      if (view.parent) {
          const parentView = view.parent;
          return asElementData(parentView, view.parentNodeDef.index);
      }
      return undefined;
  }
  /**
   * for component views, this is the host element.
   * for embedded views, this is the index of the parent node
   * that contains the view container.
   */
  function viewParentEl(view) {
      const parentView = view.parent;
      if (parentView) {
          return view.parentNodeDef.parent;
      }
      else {
          return null;
      }
  }
  function renderNode(view, def) {
      switch (def.type) {
          case NodeType.Element:
              return asElementData(view, def.index).renderElement;
          case NodeType.Text:
              return asTextData(view, def.index).renderText;
      }
  }
  function elementEventFullName(target, name) {
      return target ? `${target}:${name}` : name;
  }
  function isComponentView(view) {
      return view.component === view.context && !!view.parent;
  }
  function isEmbeddedView(view) {
      return view.component !== view.context && !!view.parent;
  }
  function filterQueryId(queryId) {
      return 1 << (queryId % 32);
  }
  function splitMatchedQueriesDsl(matchedQueriesDsl) {
      const matchedQueries = {};
      let matchedQueryIds = 0;
      const references = {};
      if (matchedQueriesDsl) {
          matchedQueriesDsl.forEach(([queryId, valueType]) => {
              if (typeof queryId === 'number') {
                  matchedQueries[queryId] = valueType;
                  matchedQueryIds |= filterQueryId(queryId);
              }
              else {
                  references[queryId] = valueType;
              }
          });
      }
      return { matchedQueries, references, matchedQueryIds };
  }
  function getParentRenderElement(view, renderHost, def) {
      let renderParent = def.renderParent;
      if (renderParent) {
          if (renderParent.type !== NodeType.Element ||
              (renderParent.flags & NodeFlags.HasComponent) === 0 ||
              (renderParent.element.componentRendererType &&
                  renderParent.element.componentRendererType.encapsulation === ViewEncapsulation.Native)) {
              // only children of non components, or children of components with native encapsulation should
              // be attached.
              return asElementData(view, def.renderParent.index).renderElement;
          }
      }
      else {
          return renderHost;
      }
  }
  const VIEW_DEFINITION_CACHE = new WeakMap();
  function resolveViewDefinition(factory) {
      let value = VIEW_DEFINITION_CACHE.get(factory);
      if (!value) {
          value = factory();
          VIEW_DEFINITION_CACHE.set(factory, value);
      }
      return value;
  }
  function sliceErrorStack(start, end) {
      let err;
      try {
          throw new Error();
      }
      catch (e) {
          err = e;
      }
      const stack = err.stack || '';
      const lines = stack.split('\n');
      if (lines[0].startsWith('Error')) {
          // Chrome always adds the message to the stack as well...
          start++;
          end++;
      }
      return lines.slice(start, end).join('\n');
  }
  function rootRenderNodes(view) {
      const renderNodes = [];
      visitRootRenderNodes(view, RenderNodeAction.Collect, undefined, undefined, renderNodes);
      return renderNodes;
  }
  var RenderNodeAction;
  (function (RenderNodeAction) {
      RenderNodeAction[RenderNodeAction["Collect"] = 0] = "Collect";
      RenderNodeAction[RenderNodeAction["AppendChild"] = 1] = "AppendChild";
      RenderNodeAction[RenderNodeAction["InsertBefore"] = 2] = "InsertBefore";
      RenderNodeAction[RenderNodeAction["RemoveChild"] = 3] = "RemoveChild";
  })(RenderNodeAction || (RenderNodeAction = {}));
  function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
      // We need to re-compute the parent node in case the nodes have been moved around manually
      if (action === RenderNodeAction.RemoveChild) {
          parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));
      }
      visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
  }
  function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
      for (let i = startIndex; i <= endIndex; i++) {
          const nodeDef = view.def.nodes[i];
          if (nodeDef.type === NodeType.Element || nodeDef.type === NodeType.Text ||
              nodeDef.type === NodeType.NgContent) {
              visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
          }
          // jump to next sibling
          i += nodeDef.childCount;
      }
  }
  function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
      let compView = view;
      while (compView && !isComponentView(compView)) {
          compView = compView.parent;
      }
      const hostView = compView.parent;
      const hostElDef = viewParentEl(compView);
      const startIndex = hostElDef.index + 1;
      const endIndex = hostElDef.index + hostElDef.childCount;
      for (let i = startIndex; i <= endIndex; i++) {
          const nodeDef = hostView.def.nodes[i];
          if (nodeDef.ngContentIndex === ngContentIndex) {
              visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);
          }
          // jump to next sibling
          i += nodeDef.childCount;
      }
      if (!hostView.parent) {
          // a root view
          const projectedNodes = view.root.projectableNodes[ngContentIndex];
          if (projectedNodes) {
              for (let i = 0; i < projectedNodes.length; i++) {
                  execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);
              }
          }
      }
  }
  function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
      if (nodeDef.type === NodeType.NgContent) {
          visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);
      }
      else {
          const rn = renderNode(view, nodeDef);
          execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
          if (nodeDef.flags & NodeFlags.HasEmbeddedViews) {
              const embeddedViews = asElementData(view, nodeDef.index).embeddedViews;
              if (embeddedViews) {
                  for (let k = 0; k < embeddedViews.length; k++) {
                      visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
                  }
              }
          }
          if (nodeDef.type === NodeType.Element && !nodeDef.element.name) {
              visitSiblingRenderNodes(view, action, nodeDef.index + 1, nodeDef.index + nodeDef.childCount, parentNode, nextSibling, target);
          }
      }
  }
  function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
      const renderer = view.renderer;
      switch (action) {
          case RenderNodeAction.AppendChild:
              renderer.appendChild(parentNode, renderNode);
              break;
          case RenderNodeAction.InsertBefore:
              renderer.insertBefore(parentNode, renderNode, nextSibling);
              break;
          case RenderNodeAction.RemoveChild:
              renderer.removeChild(parentNode, renderNode);
              break;
          case RenderNodeAction.Collect:
              target.push(renderNode);
              break;
      }
  }
  const NS_PREFIX_RE = /^:([^:]+):(.+)$/;
  function splitNamespace(name) {
      if (name[0] === ':') {
          const match = name.match(NS_PREFIX_RE);
          return [match[1], match[2]];
      }
      return ['', name];
  }

  const NOOP = () => { };
  function ɵanchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
      if (!handleEvent) {
          handleEvent = NOOP;
      }
      const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);
      // skip the call to sliceErrorStack itself + the call to this function.
      const source = isDevMode() ? sliceErrorStack(2, 3) : '';
      const template = templateFactory ? resolveViewDefinition(templateFactory) : null;
      return {
          type: NodeType.Element,
          // will bet set by the view definition
          index: undefined,
          reverseChildIndex: undefined,
          parent: undefined,
          renderParent: undefined,
          bindingIndex: undefined,
          outputIndex: undefined,
          // regular values
          flags,
          childFlags: 0,
          childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,
          bindings: [],
          outputs: [],
          element: {
              ns: undefined,
              name: undefined,
              attrs: undefined, template, source,
              componentProvider: undefined,
              componentView: undefined,
              componentRendererType: undefined,
              publicProviders: undefined,
              allProviders: undefined, handleEvent
          },
          provider: undefined,
          text: undefined,
          pureExpression: undefined,
          query: undefined,
          ngContent: undefined
      };
  }
  function ɵelementDef(flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs = [], bindings, outputs, handleEvent, componentView, componentRendererType) {
      if (!handleEvent) {
          handleEvent = NOOP;
      }
      // skip the call to sliceErrorStack itself + the call to this function.
      const source = isDevMode() ? sliceErrorStack(2, 3) : '';
      const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);
      let ns;
      let name;
      if (namespaceAndName) {
          [ns, name] = splitNamespace(namespaceAndName);
      }
      bindings = bindings || [];
      const bindingDefs = new Array(bindings.length);
      for (let i = 0; i < bindings.length; i++) {
          const entry = bindings[i];
          let bindingDef;
          const bindingType = entry[0];
          const [ns, name] = splitNamespace(entry[1]);
          let securityContext;
          let suffix;
          switch (bindingType) {
              case BindingType.ElementStyle:
                  suffix = entry[2];
                  break;
              case BindingType.ElementAttribute:
              case BindingType.ElementProperty:
              case BindingType.ComponentHostProperty:
                  securityContext = entry[2];
                  break;
          }
          bindingDefs[i] = { type: bindingType, ns, name, nonMinifiedName: name, securityContext, suffix };
      }
      outputs = outputs || [];
      const outputDefs = new Array(outputs.length);
      for (let i = 0; i < outputs.length; i++) {
          const [target, eventName] = outputs[i];
          outputDefs[i] = {
              type: OutputType.ElementOutput,
              target: target, eventName,
              propName: undefined
          };
      }
      fixedAttrs = fixedAttrs || [];
      const attrs = fixedAttrs.map(([namespaceAndName, value]) => {
          const [ns, name] = splitNamespace(namespaceAndName);
          return [ns, name, value];
      });
      // This is needed as the jit compiler always uses an empty hash as default RendererTypeV2,
      // which is not filled for host views.
      if (componentRendererType && componentRendererType.encapsulation == null) {
          componentRendererType = null;
      }
      if (componentView) {
          flags |= NodeFlags.HasComponent;
      }
      return {
          type: NodeType.Element,
          // will bet set by the view definition
          index: undefined,
          reverseChildIndex: undefined,
          parent: undefined,
          renderParent: undefined,
          bindingIndex: undefined,
          outputIndex: undefined,
          // regular values
          flags,
          childFlags: 0,
          childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,
          bindings: bindingDefs,
          outputs: outputDefs,
          element: {
              ns,
              name,
              attrs,
              source,
              template: undefined,
              // will bet set by the view definition
              componentProvider: undefined, componentView, componentRendererType,
              publicProviders: undefined,
              allProviders: undefined, handleEvent,
          },
          provider: undefined,
          text: undefined,
          pureExpression: undefined,
          query: undefined,
          ngContent: undefined
      };
  }
  function createElement(view, renderHost, def) {
      const elDef = def.element;
      const rootSelectorOrNode = view.root.selectorOrNode;
      const renderer = view.renderer;
      let el;
      if (view.parent || !rootSelectorOrNode) {
          if (elDef.name) {
              el = renderer.createElement(elDef.name, elDef.ns);
          }
          else {
              el = renderer.createComment('');
          }
          const parentEl = getParentRenderElement(view, renderHost, def);
          if (parentEl) {
              renderer.appendChild(parentEl, el);
          }
      }
      else {
          el = renderer.selectRootElement(rootSelectorOrNode);
      }
      if (elDef.attrs) {
          for (let i = 0; i < elDef.attrs.length; i++) {
              const [ns, name, value] = elDef.attrs[i];
              renderer.setAttribute(el, name, value, ns);
          }
      }
      return el;
  }
  function listenToElementOutputs(view, compView, def, el) {
      for (let i = 0; i < def.outputs.length; i++) {
          const output = def.outputs[i];
          const handleEventClosure = renderEventHandlerClosure(view, def.index, elementEventFullName(output.target, output.eventName));
          let listenTarget = output.target;
          let listenerView = view;
          if (output.target === 'component') {
              listenTarget = null;
              listenerView = compView;
          }
          const disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);
          view.disposables[def.outputIndex + i] = disposable;
      }
  }
  function renderEventHandlerClosure(view, index, eventName) {
      return (event) => dispatchEvent(view, index, eventName, event);
  }
  function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      const bindLen = def.bindings.length;
      let changed = false;
      if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))
          changed = true;
      if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))
          changed = true;
      if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))
          changed = true;
      if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))
          changed = true;
      if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))
          changed = true;
      if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))
          changed = true;
      if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))
          changed = true;
      if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))
          changed = true;
      if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))
          changed = true;
      if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))
          changed = true;
      return changed;
  }
  function checkAndUpdateElementDynamic(view, def, values) {
      let changed = false;
      for (let i = 0; i < values.length; i++) {
          if (checkAndUpdateElementValue(view, def, i, values[i]))
              changed = true;
      }
      return changed;
  }
  function checkAndUpdateElementValue(view, def, bindingIdx, value) {
      if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
          return false;
      }
      const binding = def.bindings[bindingIdx];
      const elData = asElementData(view, def.index);
      const renderNode = elData.renderElement;
      const name = binding.name;
      switch (binding.type) {
          case BindingType.ElementAttribute:
              setElementAttribute(view, binding, renderNode, binding.ns, name, value);
              break;
          case BindingType.ElementClass:
              setElementClass(view, renderNode, name, value);
              break;
          case BindingType.ElementStyle:
              setElementStyle(view, binding, renderNode, name, value);
              break;
          case BindingType.ElementProperty:
              setElementProperty(view, binding, renderNode, name, value);
              break;
          case BindingType.ComponentHostProperty:
              setElementProperty(elData.componentView, binding, renderNode, name, value);
              break;
      }
      return true;
  }
  function setElementAttribute(view, binding, renderNode, ns, name, value) {
      const securityContext = binding.securityContext;
      let renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
      renderValue = renderValue != null ? renderValue.toString() : null;
      const renderer = view.renderer;
      if (value != null) {
          renderer.setAttribute(renderNode, name, renderValue, ns);
      }
      else {
          renderer.removeAttribute(renderNode, name, ns);
      }
  }
  function setElementClass(view, renderNode, name, value) {
      const renderer = view.renderer;
      if (value) {
          renderer.addClass(renderNode, name);
      }
      else {
          renderer.removeClass(renderNode, name);
      }
  }
  function setElementStyle(view, binding, renderNode, name, value) {
      let renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);
      if (renderValue != null) {
          renderValue = renderValue.toString();
          const unit = binding.suffix;
          if (unit != null) {
              renderValue = renderValue + unit;
          }
      }
      else {
          renderValue = null;
      }
      const renderer = view.renderer;
      if (renderValue != null) {
          renderer.setStyle(renderNode, name, renderValue, false, false);
      }
      else {
          renderer.removeStyle(renderNode, name, false);
      }
  }
  function setElementProperty(view, binding, renderNode, name, value) {
      const securityContext = binding.securityContext;
      let renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
      view.renderer.setProperty(renderNode, name, renderValue);
  }

  function ɵngContentDef(ngContentIndex, index) {
      return {
          type: NodeType.NgContent,
          // will bet set by the view definition
          index: undefined,
          reverseChildIndex: undefined,
          parent: undefined,
          renderParent: undefined,
          bindingIndex: undefined,
          outputIndex: undefined,
          // regular values
          flags: 0,
          childFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {}, ngContentIndex,
          childCount: 0,
          bindings: [],
          outputs: [],
          element: undefined,
          provider: undefined,
          text: undefined,
          pureExpression: undefined,
          query: undefined,
          ngContent: { index }
      };
  }
  function appendNgContent(view, renderHost, def) {
      const parentEl = getParentRenderElement(view, renderHost, def);
      if (!parentEl) {
          // Nothing to do if there is no parent element.
          return;
      }
      const ngContentIndex = def.ngContent.index;
      visitProjectedRenderNodes(view, ngContentIndex, RenderNodeAction.AppendChild, parentEl, undefined, undefined);
  }

  class ɵNoOpAnimationPlayer {
      constructor() {
          this._onDoneFns = [];
          this._onStartFns = [];
          this._onDestroyFns = [];
          this._started = false;
          this._destroyed = false;
          this._finished = false;
          this.parentPlayer = null;
          scheduleMicroTask(() => this._onFinish());
      }
      _onFinish() {
          if (!this._finished) {
              this._finished = true;
              this._onDoneFns.forEach(fn => fn());
              this._onDoneFns = [];
          }
      }
      onStart(fn) { this._onStartFns.push(fn); }
      onDone(fn) { this._onDoneFns.push(fn); }
      onDestroy(fn) { this._onDestroyFns.push(fn); }
      hasStarted() { return this._started; }
      init() { }
      play() {
          if (!this.hasStarted()) {
              this._onStartFns.forEach(fn => fn());
              this._onStartFns = [];
          }
          this._started = true;
      }
      pause() { }
      restart() { }
      finish() { this._onFinish(); }
      destroy() {
          if (!this._destroyed) {
              this._destroyed = true;
              this.finish();
              this._onDestroyFns.forEach(fn => fn());
              this._onDestroyFns = [];
          }
      }
      reset() { }
      setPosition(p) { }
      getPosition() { return 0; }
  }

  function attachEmbeddedView(parentView, elementData, viewIndex, view) {
      let embeddedViews = elementData.embeddedViews;
      if (viewIndex == null) {
          viewIndex = embeddedViews.length;
      }
      view.viewContainerParent = parentView;
      addToArray$1(embeddedViews, viewIndex, view);
      const dvcElementData = declaredViewContainer(view);
      if (dvcElementData && dvcElementData !== elementData) {
          let projectedViews = dvcElementData.projectedViews;
          if (!projectedViews) {
              projectedViews = dvcElementData.projectedViews = [];
          }
          projectedViews.push(view);
      }
      Services.dirtyParentQueries(view);
      const prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;
      renderAttachEmbeddedView(elementData, prevView, view);
  }
  function detachEmbeddedView(elementData, viewIndex) {
      const embeddedViews = elementData.embeddedViews;
      if (viewIndex == null || viewIndex >= embeddedViews.length) {
          viewIndex = embeddedViews.length - 1;
      }
      if (viewIndex < 0) {
          return null;
      }
      const view = embeddedViews[viewIndex];
      view.viewContainerParent = undefined;
      removeFromArray(embeddedViews, viewIndex);
      const dvcElementData = declaredViewContainer(view);
      if (dvcElementData && dvcElementData !== elementData) {
          const projectedViews = dvcElementData.projectedViews;
          removeFromArray(projectedViews, projectedViews.indexOf(view));
      }
      Services.dirtyParentQueries(view);
      renderDetachView(view);
      return view;
  }
  function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
      const embeddedViews = elementData.embeddedViews;
      const view = embeddedViews[oldViewIndex];
      removeFromArray(embeddedViews, oldViewIndex);
      if (newViewIndex == null) {
          newViewIndex = embeddedViews.length;
      }
      addToArray$1(embeddedViews, newViewIndex, view);
      // Note: Don't need to change projectedViews as the order in there
      // as always invalid...
      Services.dirtyParentQueries(view);
      renderDetachView(view);
      const prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
      renderAttachEmbeddedView(elementData, prevView, view);
      return view;
  }
  function renderAttachEmbeddedView(elementData, prevView, view) {
      const prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) : elementData.renderElement;
      const parentNode = view.renderer.parentNode(prevRenderNode);
      const nextSibling = view.renderer.nextSibling(prevRenderNode);
      // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
      // However, browsers automatically do `appendChild` when there is no `nextSibling`.
      visitRootRenderNodes(view, RenderNodeAction.InsertBefore, parentNode, nextSibling, undefined);
  }
  function renderDetachView(view) {
      visitRootRenderNodes(view, RenderNodeAction.RemoveChild, null, null, undefined);
  }
  function addToArray$1(arr, index, value) {
      // perf: array.push is faster than array.splice!
      if (index >= arr.length) {
          arr.push(value);
      }
      else {
          arr.splice(index, 0, value);
      }
  }
  function removeFromArray(arr, index) {
      // perf: array.pop is faster than array.splice!
      if (index >= arr.length - 1) {
          arr.pop();
      }
      else {
          arr.splice(index, 1);
      }
  }

  const EMPTY_CONTEXT = new Object();
  function createComponentFactory(selector, componentType, viewDefFactory) {
      return new ComponentFactory_(selector, componentType, viewDefFactory);
  }
  class ComponentFactory_ extends ComponentFactory {
      constructor(selector, componentType, viewDefFactory) {
          super(selector, viewDefFactory, componentType);
      }
      /**
       * Creates a new component.
       */
      create(injector, projectableNodes = null, rootSelectorOrNode = null) {
          const viewDef = resolveViewDefinition(this._viewClass);
          const componentNodeIndex = viewDef.nodes[0].element.componentProvider.index;
          const view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, EMPTY_CONTEXT);
          const component = asProviderData(view, componentNodeIndex).instance;
          view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION$1.full);
          return new ComponentRef_(view, new ViewRef_$1(view), component);
      }
  }
  class ComponentRef_ extends ComponentRef {
      constructor(_view, _viewRef, _component) {
          super();
          this._view = _view;
          this._viewRef = _viewRef;
          this._component = _component;
          this._elDef = this._view.def.nodes[0];
      }
      get location() {
          return new ElementRef(asElementData(this._view, this._elDef.index).renderElement);
      }
      get injector() { return new Injector_(this._view, this._elDef); }
      get instance() { return this._component; }
      ;
      get hostView() { return this._viewRef; }
      ;
      get changeDetectorRef() { return this._viewRef; }
      ;
      get componentType() { return this._component.constructor; }
      destroy() { this._viewRef.destroy(); }
      onDestroy(callback) { this._viewRef.onDestroy(callback); }
  }
  function createViewContainerRef(view, elDef) {
      return new ViewContainerRef_$1(view, elDef);
  }
  class ViewContainerRef_$1 {
      constructor(_view, _elDef) {
          this._view = _view;
          this._elDef = _elDef;
          this._data = asElementData(_view, _elDef.index);
      }
      get element() { return new ElementRef(this._data.renderElement); }
      get injector() { return new Injector_(this._view, this._elDef); }
      get parentInjector() {
          let view = this._view;
          let elDef = this._elDef.parent;
          while (!elDef && view) {
              elDef = viewParentEl(view);
              view = view.parent;
          }
          return view ? new Injector_(view, elDef) : this._view.root.injector;
      }
      clear() {
          const len = this._data.embeddedViews.length;
          for (let i = len - 1; i >= 0; i--) {
              const view = detachEmbeddedView(this._data, i);
              Services.destroyView(view);
          }
      }
      get(index) {
          const view = this._data.embeddedViews[index];
          if (view) {
              const ref = new ViewRef_$1(view);
              ref.attachToViewContainerRef(this);
              return ref;
          }
          return null;
      }
      get length() { return this._data.embeddedViews.length; }
      ;
      createEmbeddedView(templateRef, context, index) {
          const viewRef = templateRef.createEmbeddedView(context || {});
          this.insert(viewRef, index);
          return viewRef;
      }
      createComponent(componentFactory, index, injector, projectableNodes) {
          const contextInjector = injector || this.parentInjector;
          const componentRef = componentFactory.create(contextInjector, projectableNodes);
          this.insert(componentRef.hostView, index);
          return componentRef;
      }
      insert(viewRef, index) {
          const viewRef_ = viewRef;
          const viewData = viewRef_._view;
          attachEmbeddedView(this._view, this._data, index, viewData);
          viewRef_.attachToViewContainerRef(this);
          return viewRef;
      }
      move(viewRef, currentIndex) {
          const previousIndex = this._data.embeddedViews.indexOf(viewRef._view);
          moveEmbeddedView(this._data, previousIndex, currentIndex);
          return viewRef;
      }
      indexOf(viewRef) {
          return this._data.embeddedViews.indexOf(viewRef._view);
      }
      remove(index) {
          const viewData = detachEmbeddedView(this._data, index);
          if (viewData) {
              Services.destroyView(viewData);
          }
      }
      detach(index) {
          const view = detachEmbeddedView(this._data, index);
          return view ? new ViewRef_$1(view) : null;
      }
  }
  function createChangeDetectorRef(view) {
      return new ViewRef_$1(view);
  }
  class ViewRef_$1 {
      constructor(_view) {
          this._view = _view;
          this._viewContainerRef = null;
          this._appRef = null;
      }
      get rootNodes() { return rootRenderNodes(this._view); }
      get context() { return this._view.context; }
      get destroyed() { return (this._view.state & ViewState.Destroyed) !== 0; }
      markForCheck() { markParentViewsForCheck(this._view); }
      detach() { this._view.state &= ~ViewState.ChecksEnabled; }
      detectChanges() { Services.checkAndUpdateView(this._view); }
      checkNoChanges() { Services.checkNoChangesView(this._view); }
      reattach() { this._view.state |= ViewState.ChecksEnabled; }
      onDestroy(callback) {
          if (!this._view.disposables) {
              this._view.disposables = [];
          }
          this._view.disposables.push(callback);
      }
      destroy() {
          if (this._appRef) {
              this._appRef.detachView(this);
          }
          else if (this._viewContainerRef) {
              this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
          }
          Services.destroyView(this._view);
      }
      detachFromAppRef() {
          this._appRef = null;
          renderDetachView(this._view);
          Services.dirtyParentQueries(this._view);
      }
      attachToAppRef(appRef) {
          if (this._viewContainerRef) {
              throw new Error('This view is already attached to a ViewContainer!');
          }
          this._appRef = appRef;
      }
      attachToViewContainerRef(vcRef) {
          if (this._appRef) {
              throw new Error('This view is already attached directly to the ApplicationRef!');
          }
          this._viewContainerRef = vcRef;
      }
  }
  function createTemplateRef(view, def) {
      return new TemplateRef_(view, def);
  }
  class TemplateRef_ extends TemplateRef {
      constructor(_parentView, _def) {
          super();
          this._parentView = _parentView;
          this._def = _def;
      }
      createEmbeddedView(context) {
          return new ViewRef_$1(Services.createEmbeddedView(this._parentView, this._def, context));
      }
      get elementRef() {
          return new ElementRef(asElementData(this._parentView, this._def.index).renderElement);
      }
  }
  function createInjector(view, elDef) {
      return new Injector_(view, elDef);
  }
  class Injector_ {
      constructor(view, elDef) {
          this.view = view;
          this.elDef = elDef;
      }
      get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND) {
          const allowPrivateServices = (this.elDef.flags & NodeFlags.HasComponent) !== 0;
          return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: DepFlags.None, token, tokenKey: tokenKey(token) }, notFoundValue);
      }
  }
  function ɵnodeValue(view, index) {
      const def = view.def.nodes[index];
      switch (def.type) {
          case NodeType.Element:
              if (def.element.template) {
                  return createTemplateRef(view, def);
              }
              else {
                  return asElementData(view, def.index).renderElement;
              }
          case NodeType.Text:
              return asTextData(view, def.index).renderText;
          case NodeType.Directive:
          case NodeType.Pipe:
          case NodeType.Provider:
              return asProviderData(view, def.index).instance;
      }
      return undefined;
  }
  function createRendererV1(view) {
      return new RendererAdapter(view.renderer);
  }
  class RendererAdapter {
      constructor(delegate) {
          this.delegate = delegate;
      }
      selectRootElement(selectorOrNode) {
          return this.delegate.selectRootElement(selectorOrNode);
      }
      createElement(parent, namespaceAndName) {
          const [ns, name] = splitNamespace(namespaceAndName);
          const el = this.delegate.createElement(name, ns);
          if (parent) {
              this.delegate.appendChild(parent, el);
          }
          return el;
      }
      createViewRoot(hostElement) { return hostElement; }
      createTemplateAnchor(parentElement) {
          const comment = this.delegate.createComment('');
          if (parentElement) {
              this.delegate.appendChild(parentElement, comment);
          }
          return comment;
      }
      createText(parentElement, value) {
          const node = this.delegate.createText(value);
          if (parentElement) {
              this.delegate.appendChild(parentElement, node);
          }
          return node;
      }
      projectNodes(parentElement, nodes) {
          for (let i = 0; i < nodes.length; i++) {
              this.delegate.appendChild(parentElement, nodes[i]);
          }
      }
      attachViewAfter(node, viewRootNodes) {
          const parentElement = this.delegate.parentNode(node);
          const nextSibling = this.delegate.nextSibling(node);
          for (let i = 0; i < viewRootNodes.length; i++) {
              this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);
          }
      }
      detachView(viewRootNodes) {
          for (let i = 0; i < viewRootNodes.length; i++) {
              const node = viewRootNodes[i];
              const parentElement = this.delegate.parentNode(node);
              this.delegate.removeChild(parentElement, node);
          }
      }
      destroyView(hostElement, viewAllNodes) {
          for (let i = 0; i < viewAllNodes.length; i++) {
              this.delegate.destroyNode(viewAllNodes[i]);
          }
      }
      listen(renderElement, name, callback) {
          return this.delegate.listen(renderElement, name, callback);
      }
      listenGlobal(target, name, callback) {
          return this.delegate.listen(target, name, callback);
      }
      setElementProperty(renderElement, propertyName, propertyValue) {
          this.delegate.setProperty(renderElement, propertyName, propertyValue);
      }
      setElementAttribute(renderElement, namespaceAndName, attributeValue) {
          const [ns, name] = splitNamespace(namespaceAndName);
          if (attributeValue != null) {
              this.delegate.setAttribute(renderElement, name, attributeValue, ns);
          }
          else {
              this.delegate.removeAttribute(renderElement, name, ns);
          }
      }
      setBindingDebugInfo(renderElement, propertyName, propertyValue) { }
      setElementClass(renderElement, className, isAdd) {
          if (isAdd) {
              this.delegate.addClass(renderElement, className);
          }
          else {
              this.delegate.removeClass(renderElement, className);
          }
      }
      setElementStyle(renderElement, styleName, styleValue) {
          if (styleValue != null) {
              this.delegate.setStyle(renderElement, styleName, styleValue, false, false);
          }
          else {
              this.delegate.removeStyle(renderElement, styleName, false);
          }
      }
      invokeElementMethod(renderElement, methodName, args) {
          renderElement[methodName].apply(renderElement, args);
      }
      setText(renderNode, text) { this.delegate.setValue(renderNode, text); }
      animate() { return new ɵNoOpAnimationPlayer(); }
  }

  const RendererV1TokenKey = tokenKey(Renderer);
  const RendererV2TokenKey = tokenKey(RendererV2);
  const ElementRefTokenKey = tokenKey(ElementRef);
  const ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
  const TemplateRefTokenKey = tokenKey(TemplateRef);
  const ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
  const InjectorRefTokenKey = tokenKey(Injector);
  const NOT_CREATED = new Object();
  function ɵdirectiveDef(flags, matchedQueries, childCount, ctor, deps, props, outputs) {
      const bindings = [];
      if (props) {
          for (let prop in props) {
              const [bindingIndex, nonMinifiedName] = props[prop];
              bindings[bindingIndex] = {
                  type: BindingType.DirectiveProperty,
                  name: prop, nonMinifiedName,
                  ns: undefined,
                  securityContext: undefined,
                  suffix: undefined
              };
          }
      }
      const outputDefs = [];
      if (outputs) {
          for (let propName in outputs) {
              outputDefs.push({ type: OutputType.DirectiveOutput, propName, target: null, eventName: outputs[propName] });
          }
      }
      return _def(NodeType.Directive, flags, matchedQueries, childCount, ProviderType.Class, ctor, ctor, deps, bindings, outputDefs);
  }
  function ɵpipeDef(flags, ctor, deps) {
      return _def(NodeType.Pipe, flags, null, 0, ProviderType.Class, ctor, ctor, deps);
  }
  function ɵproviderDef(flags, matchedQueries, type, token, value, deps) {
      return _def(NodeType.Provider, flags, matchedQueries, 0, type, token, value, deps);
  }
  function _def(type, flags, matchedQueriesDsl, childCount, providerType, token, value, deps, bindings, outputs) {
      const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);
      if (!outputs) {
          outputs = [];
      }
      if (!bindings) {
          bindings = [];
      }
      const depDefs = deps.map(value => {
          let token;
          let flags;
          if (Array.isArray(value)) {
              [flags, token] = value;
          }
          else {
              flags = DepFlags.None;
              token = value;
          }
          return { flags, token, tokenKey: tokenKey(token) };
      });
      return {
          type,
          // will bet set by the view definition
          index: undefined,
          reverseChildIndex: undefined,
          parent: undefined,
          renderParent: undefined,
          bindingIndex: undefined,
          outputIndex: undefined,
          // regular values
          flags,
          childFlags: 0,
          childMatchedQueries: 0, matchedQueries, matchedQueryIds, references,
          ngContentIndex: undefined, childCount, bindings, outputs,
          element: undefined,
          provider: { type: providerType, token, tokenKey: tokenKey(token), value, deps: depDefs },
          text: undefined,
          pureExpression: undefined,
          query: undefined,
          ngContent: undefined
      };
  }
  function createProviderInstance(view, def) {
      return def.flags & NodeFlags.LazyProvider ? NOT_CREATED : _createProviderInstance(view, def);
  }
  function createPipeInstance(view, def) {
      // deps are looked up from component.
      let compView = view;
      while (compView.parent && !isComponentView(compView)) {
          compView = compView.parent;
      }
      // pipes can see the private services of the component
      const allowPrivateServices = true;
      // pipes are always eager and classes!
      return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);
  }
  function createDirectiveInstance(view, def) {
      // components can see other private services, other directives can't.
      const allowPrivateServices = (def.flags & NodeFlags.IsComponent) > 0;
      const providerDef = def.provider;
      // directives are always eager and classes!
      const instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);
      if (def.outputs.length) {
          for (let i = 0; i < def.outputs.length; i++) {
              const output = def.outputs[i];
              const subscription = instance[output.propName].subscribe(eventHandlerClosure(view, def.parent.index, output.eventName));
              view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
          }
      }
      return instance;
  }
  function eventHandlerClosure(view, index, eventName) {
      return (event) => dispatchEvent(view, index, eventName, event);
  }
  function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      const providerData = asProviderData(view, def.index);
      const directive = providerData.instance;
      let changed = false;
      let changes;
      const bindLen = def.bindings.length;
      if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
          changed = true;
          changes = updateProp(view, providerData, def, 0, v0, changes);
      }
      ;
      if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
          changed = true;
          changes = updateProp(view, providerData, def, 1, v1, changes);
      }
      ;
      if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
          changed = true;
          changes = updateProp(view, providerData, def, 2, v2, changes);
      }
      ;
      if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
          changed = true;
          changes = updateProp(view, providerData, def, 3, v3, changes);
      }
      ;
      if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
          changed = true;
          changes = updateProp(view, providerData, def, 4, v4, changes);
      }
      ;
      if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
          changed = true;
          changes = updateProp(view, providerData, def, 5, v5, changes);
      }
      ;
      if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
          changed = true;
          changes = updateProp(view, providerData, def, 6, v6, changes);
      }
      ;
      if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
          changed = true;
          changes = updateProp(view, providerData, def, 7, v7, changes);
      }
      ;
      if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
          changed = true;
          changes = updateProp(view, providerData, def, 8, v8, changes);
      }
      ;
      if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
          changed = true;
          changes = updateProp(view, providerData, def, 9, v9, changes);
      }
      ;
      if (changes) {
          directive.ngOnChanges(changes);
      }
      if ((view.state & ViewState.FirstCheck) && (def.flags & NodeFlags.OnInit)) {
          directive.ngOnInit();
      }
      if (def.flags & NodeFlags.DoCheck) {
          directive.ngDoCheck();
      }
      return changed;
  }
  function checkAndUpdateDirectiveDynamic(view, def, values) {
      const providerData = asProviderData(view, def.index);
      const directive = providerData.instance;
      let changed = false;
      let changes;
      for (let i = 0; i < values.length; i++) {
          if (checkBinding(view, def, i, values[i])) {
              changed = true;
              changes = updateProp(view, providerData, def, i, values[i], changes);
          }
      }
      if (changes) {
          directive.ngOnChanges(changes);
      }
      if ((view.state & ViewState.FirstCheck) && (def.flags & NodeFlags.OnInit)) {
          directive.ngOnInit();
      }
      if (def.flags & NodeFlags.DoCheck) {
          directive.ngDoCheck();
      }
      return changed;
  }
  function _createProviderInstance(view, def) {
      // private services can see other private services
      const allowPrivateServices = (def.flags & NodeFlags.PrivateProvider) > 0;
      const providerDef = def.provider;
      let injectable;
      switch (providerDef.type) {
          case ProviderType.Class:
              injectable =
                  createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);
              break;
          case ProviderType.Factory:
              injectable =
                  callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);
              break;
          case ProviderType.UseExisting:
              injectable = resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);
              break;
          case ProviderType.Value:
              injectable = providerDef.value;
              break;
      }
      return injectable;
  }
  function createClass(view, elDef, allowPrivateServices, ctor, deps) {
      const len = deps.length;
      let injectable;
      switch (len) {
          case 0:
              injectable = new ctor();
              break;
          case 1:
              injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));
              break;
          case 2:
              injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
              break;
          case 3:
              injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
              break;
          default:
              const depValues = new Array(len);
              for (let i = 0; i < len; i++) {
                  depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
              }
              injectable = new ctor(...depValues);
      }
      return injectable;
  }
  function callFactory(view, elDef, allowPrivateServices, factory, deps) {
      const len = deps.length;
      let injectable;
      switch (len) {
          case 0:
              injectable = factory();
              break;
          case 1:
              injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));
              break;
          case 2:
              injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
              break;
          case 3:
              injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
              break;
          default:
              const depValues = Array(len);
              for (let i = 0; i < len; i++) {
                  depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
              }
              injectable = factory(...depValues);
      }
      return injectable;
  }
  function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {
      if (depDef.flags & DepFlags.Value) {
          return depDef.token;
      }
      const startView = view;
      if (depDef.flags & DepFlags.Optional) {
          notFoundValue = null;
      }
      const tokenKey = depDef.tokenKey;
      if (depDef.flags & DepFlags.SkipSelf) {
          allowPrivateServices = false;
          elDef = elDef.parent;
      }
      while (view) {
          if (elDef) {
              switch (tokenKey) {
                  case RendererV1TokenKey: {
                      const compView = findCompView(view, elDef, allowPrivateServices);
                      return createRendererV1(compView);
                  }
                  case RendererV2TokenKey: {
                      const compView = findCompView(view, elDef, allowPrivateServices);
                      return compView.renderer;
                  }
                  case ElementRefTokenKey:
                      return new ElementRef(asElementData(view, elDef.index).renderElement);
                  case ViewContainerRefTokenKey:
                      return createViewContainerRef(view, elDef);
                  case TemplateRefTokenKey: {
                      if (elDef.element.template) {
                          return createTemplateRef(view, elDef);
                      }
                      break;
                  }
                  case ChangeDetectorRefTokenKey: {
                      let cdView = findCompView(view, elDef, allowPrivateServices);
                      return createChangeDetectorRef(cdView);
                  }
                  case InjectorRefTokenKey:
                      return createInjector(view, elDef);
                  default:
                      const providerDef = (allowPrivateServices ? elDef.element.allProviders :
                          elDef.element.publicProviders)[tokenKey];
                      if (providerDef) {
                          const providerData = asProviderData(view, providerDef.index);
                          if (providerData.instance === NOT_CREATED) {
                              providerData.instance = _createProviderInstance(view, providerDef);
                          }
                          return providerData.instance;
                      }
              }
          }
          allowPrivateServices = isComponentView(view);
          elDef = viewParentEl(view);
          view = view.parent;
      }
      return startView.root.injector.get(depDef.token, notFoundValue);
  }
  function findCompView(view, elDef, allowPrivateServices) {
      let compView;
      if (allowPrivateServices) {
          compView = asElementData(view, elDef.index).componentView;
      }
      else {
          compView = view;
          while (compView.parent && !isComponentView(compView)) {
              compView = compView.parent;
          }
      }
      return compView;
  }
  function updateProp(view, providerData, def, bindingIdx, value, changes) {
      if (def.flags & NodeFlags.IsComponent) {
          const compView = asElementData(view, def.parent.index).componentView;
          if (compView.def.flags & ViewFlags.OnPush) {
              compView.state |= ViewState.ChecksEnabled;
          }
      }
      const binding = def.bindings[bindingIdx];
      const propName = binding.name;
      // Note: This is still safe with Closure Compiler as
      // the user passed in the property name as an object has to `providerDef`,
      // so Closure Compiler will have renamed the property correctly already.
      providerData.instance[propName] = value;
      if (def.flags & NodeFlags.OnChanges) {
          changes = changes || {};
          const oldValue = view.oldValues[def.bindingIndex + bindingIdx];
          const binding = def.bindings[bindingIdx];
          changes[binding.nonMinifiedName] =
              new SimpleChange(oldValue, value, (view.state & ViewState.FirstCheck) !== 0);
      }
      view.oldValues[def.bindingIndex + bindingIdx] = value;
      return changes;
  }
  function callLifecycleHooksChildrenFirst(view, lifecycles) {
      if (!(view.def.nodeFlags & lifecycles)) {
          return;
      }
      const len = view.def.nodes.length;
      for (let i = 0; i < len; i++) {
          // We use the reverse child oreder to call providers of children first.
          const nodeDef = view.def.reverseChildNodes[i];
          const nodeIndex = nodeDef.index;
          if (nodeDef.flags & lifecycles) {
              // a leaf
              Services.setCurrentNode(view, nodeIndex);
              callProviderLifecycles(asProviderData(view, nodeIndex).instance, nodeDef.flags & lifecycles);
          }
          else if ((nodeDef.childFlags & lifecycles) === 0) {
              // a parent with leafs
              // no child matches one of the lifecycles,
              // then skip the children
              i += nodeDef.childCount;
          }
      }
  }
  function callProviderLifecycles(provider, lifecycles) {
      if (lifecycles & NodeFlags.AfterContentInit) {
          provider.ngAfterContentInit();
      }
      if (lifecycles & NodeFlags.AfterContentChecked) {
          provider.ngAfterContentChecked();
      }
      if (lifecycles & NodeFlags.AfterViewInit) {
          provider.ngAfterViewInit();
      }
      if (lifecycles & NodeFlags.AfterViewChecked) {
          provider.ngAfterViewChecked();
      }
      if (lifecycles & NodeFlags.OnDestroy) {
          provider.ngOnDestroy();
      }
  }

  function ɵpurePipeDef(argCount) {
      // argCount + 1 to include the pipe as first arg
      return _pureExpressionDef(PureExpressionType.Pipe, new Array(argCount + 1));
  }
  function ɵpureArrayDef(argCount) {
      return _pureExpressionDef(PureExpressionType.Array, new Array(argCount));
  }
  function ɵpureObjectDef(propertyNames) {
      return _pureExpressionDef(PureExpressionType.Object, propertyNames);
  }
  function _pureExpressionDef(type, propertyNames) {
      const bindings = new Array(propertyNames.length);
      for (let i = 0; i < propertyNames.length; i++) {
          const prop = propertyNames[i];
          bindings[i] = {
              type: BindingType.PureExpressionProperty,
              name: prop,
              ns: undefined,
              nonMinifiedName: prop,
              securityContext: undefined,
              suffix: undefined
          };
      }
      return {
          type: NodeType.PureExpression,
          // will bet set by the view definition
          index: undefined,
          reverseChildIndex: undefined,
          parent: undefined,
          renderParent: undefined,
          bindingIndex: undefined,
          outputIndex: undefined,
          // regular values
          flags: 0,
          childFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {},
          ngContentIndex: undefined,
          childCount: 0, bindings,
          outputs: [],
          element: undefined,
          provider: undefined,
          text: undefined,
          pureExpression: { type },
          query: undefined,
          ngContent: undefined
      };
  }
  function createPureExpression(view, def) {
      return { value: undefined };
  }
  function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      const bindings = def.bindings;
      let changed = false;
      const bindLen = bindings.length;
      if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
          changed = true;
      if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
          changed = true;
      if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
          changed = true;
      if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
          changed = true;
      if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
          changed = true;
      if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
          changed = true;
      if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
          changed = true;
      if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
          changed = true;
      if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
          changed = true;
      if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
          changed = true;
      if (changed) {
          const data = asPureExpressionData(view, def.index);
          let value;
          switch (def.pureExpression.type) {
              case PureExpressionType.Array:
                  value = new Array(bindings.length);
                  if (bindLen > 0)
                      value[0] = v0;
                  if (bindLen > 1)
                      value[1] = v1;
                  if (bindLen > 2)
                      value[2] = v2;
                  if (bindLen > 3)
                      value[3] = v3;
                  if (bindLen > 4)
                      value[4] = v4;
                  if (bindLen > 5)
                      value[5] = v5;
                  if (bindLen > 6)
                      value[6] = v6;
                  if (bindLen > 7)
                      value[7] = v7;
                  if (bindLen > 8)
                      value[8] = v8;
                  if (bindLen > 9)
                      value[9] = v9;
                  break;
              case PureExpressionType.Object:
                  value = {};
                  if (bindLen > 0)
                      value[bindings[0].name] = v0;
                  if (bindLen > 1)
                      value[bindings[1].name] = v1;
                  if (bindLen > 2)
                      value[bindings[2].name] = v2;
                  if (bindLen > 3)
                      value[bindings[3].name] = v3;
                  if (bindLen > 4)
                      value[bindings[4].name] = v4;
                  if (bindLen > 5)
                      value[bindings[5].name] = v5;
                  if (bindLen > 6)
                      value[bindings[6].name] = v6;
                  if (bindLen > 7)
                      value[bindings[7].name] = v7;
                  if (bindLen > 8)
                      value[bindings[8].name] = v8;
                  if (bindLen > 9)
                      value[bindings[9].name] = v9;
                  break;
              case PureExpressionType.Pipe:
                  const pipe = v0;
                  switch (bindLen) {
                      case 1:
                          value = pipe.transform(v0);
                          break;
                      case 2:
                          value = pipe.transform(v1);
                          break;
                      case 3:
                          value = pipe.transform(v1, v2);
                          break;
                      case 4:
                          value = pipe.transform(v1, v2, v3);
                          break;
                      case 5:
                          value = pipe.transform(v1, v2, v3, v4);
                          break;
                      case 6:
                          value = pipe.transform(v1, v2, v3, v4, v5);
                          break;
                      case 7:
                          value = pipe.transform(v1, v2, v3, v4, v5, v6);
                          break;
                      case 8:
                          value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
                          break;
                      case 9:
                          value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
                          break;
                      case 10:
                          value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
                          break;
                  }
                  break;
          }
          data.value = value;
      }
      return changed;
  }
  function checkAndUpdatePureExpressionDynamic(view, def, values) {
      const bindings = def.bindings;
      let changed = false;
      for (let i = 0; i < values.length; i++) {
          // Note: We need to loop over all values, so that
          // the old values are updates as well!
          if (checkAndUpdateBinding(view, def, i, values[i])) {
              changed = true;
          }
      }
      if (changed) {
          const data = asPureExpressionData(view, def.index);
          let value;
          switch (def.pureExpression.type) {
              case PureExpressionType.Array:
                  value = values;
                  break;
              case PureExpressionType.Object:
                  value = {};
                  for (let i = 0; i < values.length; i++) {
                      value[bindings[i].name] = values[i];
                  }
                  break;
              case PureExpressionType.Pipe:
                  const pipe = values[0];
                  const params = values.slice(1);
                  value = pipe.transform(...params);
                  break;
          }
          data.value = value;
      }
      return changed;
  }

  function ɵqueryDef(flags, id, bindings) {
      let bindingDefs = [];
      for (let propName in bindings) {
          const bindingType = bindings[propName];
          bindingDefs.push({ propName, bindingType });
      }
      return {
          type: NodeType.Query,
          // will bet set by the view definition
          index: undefined,
          reverseChildIndex: undefined,
          parent: undefined,
          renderParent: undefined,
          bindingIndex: undefined,
          outputIndex: undefined,
          // regular values
          flags,
          childFlags: 0,
          childMatchedQueries: 0,
          ngContentIndex: undefined,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {},
          childCount: 0,
          bindings: [],
          outputs: [],
          element: undefined,
          provider: undefined,
          text: undefined,
          pureExpression: undefined,
          query: { id, filterId: filterQueryId(id), bindings: bindingDefs },
          ngContent: undefined
      };
  }
  function createQuery() {
      return new QueryList();
  }
  function dirtyParentQueries(view) {
      const queryIds = view.def.nodeMatchedQueries;
      while (view.parent && isEmbeddedView(view)) {
          let tplDef = view.parentNodeDef;
          view = view.parent;
          // content queries
          const end = tplDef.index + tplDef.childCount;
          for (let i = 0; i <= end; i++) {
              const nodeDef = view.def.nodes[i];
              if ((nodeDef.flags & NodeFlags.HasContentQuery) &&
                  (nodeDef.flags & NodeFlags.HasDynamicQuery) &&
                  (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {
                  asQueryList(view, i).setDirty();
              }
              if ((nodeDef.type === NodeType.Element && i + nodeDef.childCount < tplDef.index) ||
                  !(nodeDef.childFlags & NodeFlags.HasContentQuery) ||
                  !(nodeDef.childFlags & NodeFlags.HasDynamicQuery)) {
                  // skip elements that don't contain the template element or no query.
                  i += nodeDef.childCount;
              }
          }
      }
      // view queries
      if (view.def.nodeFlags & NodeFlags.HasViewQuery) {
          for (let i = 0; i < view.def.nodes.length; i++) {
              const nodeDef = view.def.nodes[i];
              if ((nodeDef.flags & NodeFlags.HasViewQuery) && (nodeDef.flags & NodeFlags.HasDynamicQuery)) {
                  asQueryList(view, i).setDirty();
              }
              // only visit the root nodes
              i += nodeDef.childCount;
          }
      }
  }
  function checkAndUpdateQuery(view, nodeDef) {
      const queryList = asQueryList(view, nodeDef.index);
      if (!queryList.dirty) {
          return;
      }
      let directiveInstance;
      let newValues;
      if (nodeDef.flags & NodeFlags.HasContentQuery) {
          const elementDef = nodeDef.parent.parent;
          newValues = calcQueryValues(view, elementDef.index, elementDef.index + elementDef.childCount, nodeDef.query, []);
          directiveInstance = asProviderData(view, nodeDef.parent.index).instance;
      }
      else if (nodeDef.flags & NodeFlags.HasViewQuery) {
          newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);
          directiveInstance = view.component;
      }
      queryList.reset(newValues);
      const bindings = nodeDef.query.bindings;
      let notify = false;
      for (let i = 0; i < bindings.length; i++) {
          const binding = bindings[i];
          let boundValue;
          switch (binding.bindingType) {
              case QueryBindingType.First:
                  boundValue = queryList.first;
                  break;
              case QueryBindingType.All:
                  boundValue = queryList;
                  notify = true;
                  break;
          }
          directiveInstance[binding.propName] = boundValue;
      }
      if (notify) {
          queryList.notifyOnChanges();
      }
  }
  function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
      for (let i = startIndex; i <= endIndex; i++) {
          const nodeDef = view.def.nodes[i];
          const valueType = nodeDef.matchedQueries[queryDef.id];
          if (valueType != null) {
              values.push(getQueryValue(view, nodeDef, valueType));
          }
          if (nodeDef.type === NodeType.Element && nodeDef.element.template &&
              (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) === queryDef.filterId) {
              // check embedded views that were attached at the place of their template.
              const elementData = asElementData(view, i);
              const embeddedViews = elementData.embeddedViews;
              if (embeddedViews) {
                  for (let k = 0; k < embeddedViews.length; k++) {
                      const embeddedView = embeddedViews[k];
                      const dvc = declaredViewContainer(embeddedView);
                      if (dvc && dvc === elementData) {
                          calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
                      }
                  }
              }
              const projectedViews = elementData.projectedViews;
              if (projectedViews) {
                  for (let k = 0; k < projectedViews.length; k++) {
                      const projectedView = projectedViews[k];
                      calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
                  }
              }
          }
          if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
              // if no child matches the query, skip the children.
              i += nodeDef.childCount;
          }
      }
      return values;
  }
  function getQueryValue(view, nodeDef, queryValueType) {
      if (queryValueType != null) {
          // a match
          let value;
          switch (queryValueType) {
              case QueryValueType.RenderElement:
                  value = asElementData(view, nodeDef.index).renderElement;
                  break;
              case QueryValueType.ElementRef:
                  value = new ElementRef(asElementData(view, nodeDef.index).renderElement);
                  break;
              case QueryValueType.TemplateRef:
                  value = createTemplateRef(view, nodeDef);
                  break;
              case QueryValueType.ViewContainerRef:
                  value = createViewContainerRef(view, nodeDef);
                  break;
              case QueryValueType.Provider:
                  value = asProviderData(view, nodeDef.index).instance;
                  break;
          }
          return value;
      }
  }

  function ɵtextDef(ngContentIndex, constants) {
      // skip the call to sliceErrorStack itself + the call to this function.
      const source = isDevMode() ? sliceErrorStack(2, 3) : '';
      const bindings = new Array(constants.length - 1);
      for (let i = 1; i < constants.length; i++) {
          bindings[i - 1] = {
              type: BindingType.TextInterpolation,
              name: undefined,
              ns: undefined,
              nonMinifiedName: undefined,
              securityContext: undefined,
              suffix: constants[i]
          };
      }
      return {
          type: NodeType.Text,
          // will bet set by the view definition
          index: undefined,
          reverseChildIndex: undefined,
          parent: undefined,
          renderParent: undefined,
          bindingIndex: undefined,
          outputIndex: undefined,
          // regular values
          flags: 0,
          childFlags: 0,
          childMatchedQueries: 0,
          matchedQueries: {},
          matchedQueryIds: 0,
          references: {}, ngContentIndex,
          childCount: 0, bindings,
          outputs: [],
          element: undefined,
          provider: undefined,
          text: { prefix: constants[0], source },
          pureExpression: undefined,
          query: undefined,
          ngContent: undefined
      };
  }
  function createText(view, renderHost, def) {
      let renderNode;
      const renderer = view.renderer;
      renderNode = renderer.createText(def.text.prefix);
      const parentEl = getParentRenderElement(view, renderHost, def);
      if (parentEl) {
          renderer.appendChild(parentEl, renderNode);
      }
      return { renderText: renderNode };
  }
  function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      let changed = false;
      const bindings = def.bindings;
      const bindLen = bindings.length;
      if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
          changed = true;
      if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
          changed = true;
      if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
          changed = true;
      if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
          changed = true;
      if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
          changed = true;
      if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
          changed = true;
      if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
          changed = true;
      if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
          changed = true;
      if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
          changed = true;
      if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
          changed = true;
      if (changed) {
          let value = def.text.prefix;
          if (bindLen > 0)
              value += _addInterpolationPart(v0, bindings[0]);
          if (bindLen > 1)
              value += _addInterpolationPart(v1, bindings[1]);
          if (bindLen > 2)
              value += _addInterpolationPart(v2, bindings[2]);
          if (bindLen > 3)
              value += _addInterpolationPart(v3, bindings[3]);
          if (bindLen > 4)
              value += _addInterpolationPart(v4, bindings[4]);
          if (bindLen > 5)
              value += _addInterpolationPart(v5, bindings[5]);
          if (bindLen > 6)
              value += _addInterpolationPart(v6, bindings[6]);
          if (bindLen > 7)
              value += _addInterpolationPart(v7, bindings[7]);
          if (bindLen > 8)
              value += _addInterpolationPart(v8, bindings[8]);
          if (bindLen > 9)
              value += _addInterpolationPart(v9, bindings[9]);
          const renderNode = asTextData(view, def.index).renderText;
          view.renderer.setValue(renderNode, value);
      }
      return changed;
  }
  function checkAndUpdateTextDynamic(view, def, values) {
      const bindings = def.bindings;
      let changed = false;
      for (let i = 0; i < values.length; i++) {
          // Note: We need to loop over all values, so that
          // the old values are updates as well!
          if (checkAndUpdateBinding(view, def, i, values[i])) {
              changed = true;
          }
      }
      if (changed) {
          let value = '';
          for (let i = 0; i < values.length; i++) {
              value = value + _addInterpolationPart(values[i], bindings[i]);
          }
          value = def.text.prefix + value;
          const renderNode = asTextData(view, def.index).renderText;
          view.renderer.setValue(renderNode, value);
      }
      return changed;
  }
  function _addInterpolationPart(value, binding) {
      const valueStr = value != null ? value.toString() : '';
      return valueStr + binding.suffix;
  }

  const NOOP$1 = () => undefined;
  function ɵviewDef(flags, nodes, updateDirectives, updateRenderer) {
      // clone nodes and set auto calculated values
      if (nodes.length === 0) {
          throw new Error(`Illegal State: Views without nodes are not allowed!`);
      }
      const reverseChildNodes = new Array(nodes.length);
      let viewBindingCount = 0;
      let viewDisposableCount = 0;
      let viewNodeFlags = 0;
      let viewMatchedQueries = 0;
      let currentParent = null;
      let currentElementHasPublicProviders = false;
      let currentElementHasPrivateProviders = false;
      let lastRenderRootNode = null;
      for (let i = 0; i < nodes.length; i++) {
          while (currentParent && i > currentParent.index + currentParent.childCount) {
              const newParent = currentParent.parent;
              if (newParent) {
                  newParent.childFlags |= currentParent.childFlags;
                  newParent.childMatchedQueries |= currentParent.childMatchedQueries;
              }
              currentParent = newParent;
          }
          const node = nodes[i];
          node.index = i;
          node.parent = currentParent;
          node.bindingIndex = viewBindingCount;
          node.outputIndex = viewDisposableCount;
          node.reverseChildIndex =
              calculateReverseChildIndex(currentParent, i, node.childCount, nodes.length);
          // renderParent needs to account for ng-container!
          let currentRenderParent;
          if (currentParent && currentParent.type === NodeType.Element && !currentParent.element.name) {
              currentRenderParent = currentParent.renderParent;
          }
          else {
              currentRenderParent = currentParent;
          }
          node.renderParent = currentRenderParent;
          if (node.element) {
              const elDef = node.element;
              elDef.publicProviders =
                  currentParent ? currentParent.element.publicProviders : Object.create(null);
              elDef.allProviders = elDef.publicProviders;
              // Note: We assume that all providers of an element are before any child element!
              currentElementHasPublicProviders = false;
              currentElementHasPrivateProviders = false;
          }
          reverseChildNodes[node.reverseChildIndex] = node;
          validateNode(currentParent, node, nodes.length);
          viewNodeFlags |= node.flags;
          viewMatchedQueries |= node.matchedQueryIds;
          if (node.element && node.element.template) {
              viewMatchedQueries |= node.element.template.nodeMatchedQueries;
          }
          if (currentParent) {
              currentParent.childFlags |= node.flags;
              currentParent.childMatchedQueries |= node.matchedQueryIds;
              if (node.element && node.element.template) {
                  currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
              }
          }
          viewBindingCount += node.bindings.length;
          viewDisposableCount += node.outputs.length;
          if (!currentRenderParent && (node.type === NodeType.Element || node.type === NodeType.Text)) {
              lastRenderRootNode = node;
          }
          if (node.type === NodeType.Provider || node.type === NodeType.Directive) {
              if (!currentElementHasPublicProviders) {
                  currentElementHasPublicProviders = true;
                  // Use protoypical inheritance to not get O(n^2) complexity...
                  currentParent.element.publicProviders =
                      Object.create(currentParent.element.publicProviders);
                  currentParent.element.allProviders = currentParent.element.publicProviders;
              }
              const isPrivateService = (node.flags & NodeFlags.PrivateProvider) !== 0;
              const isComponent = (node.flags & NodeFlags.IsComponent) !== 0;
              if (!isPrivateService || isComponent) {
                  currentParent.element.publicProviders[node.provider.tokenKey] = node;
              }
              else {
                  if (!currentElementHasPrivateProviders) {
                      currentElementHasPrivateProviders = true;
                      // Use protoypical inheritance to not get O(n^2) complexity...
                      currentParent.element.allProviders = Object.create(currentParent.element.publicProviders);
                  }
                  currentParent.element.allProviders[node.provider.tokenKey] = node;
              }
              if (isComponent) {
                  currentParent.element.componentProvider = node;
              }
          }
          if (node.childCount) {
              currentParent = node;
          }
      }
      while (currentParent) {
          const newParent = currentParent.parent;
          if (newParent) {
              newParent.childFlags |= currentParent.childFlags;
              newParent.childMatchedQueries |= currentParent.childMatchedQueries;
          }
          currentParent = newParent;
      }
      const handleEvent = (view, nodeIndex, eventName, event) => nodes[nodeIndex].element.handleEvent(view, eventName, event);
      return {
          nodeFlags: viewNodeFlags,
          nodeMatchedQueries: viewMatchedQueries, flags,
          nodes: nodes, reverseChildNodes,
          updateDirectives: updateDirectives || NOOP$1,
          updateRenderer: updateRenderer || NOOP$1,
          handleEvent: handleEvent || NOOP$1,
          bindingCount: viewBindingCount,
          outputCount: viewDisposableCount, lastRenderRootNode
      };
  }
  function calculateReverseChildIndex(currentParent, i, childCount, nodeCount) {
      // Notes about reverse child order:
      // - Every node is directly before its children, in dfs and reverse child order.
      // - node.childCount contains all children, in dfs and reverse child order.
      // - In dfs order, every node is before its first child
      // - In reverse child order, every node is before its last child
      // Algorithm, main idea:
      // - In reverse child order, the ranges for each child + its transitive children are mirrored
      //   regarding their position inside of their parent
      // Visualization:
      // Given the following tree:
      // Nodes: n0
      //             n1         n2
      //                n11 n12    n21 n22
      // dfs:    0   1   2   3  4   5   6
      // result: 0   4   6   5  1   3   2
      //
      // Example:
      // Current node = 1
      // 1) lastChildIndex = 3
      // 2) lastChildOffsetRelativeToParentInDfsOrder = 2
      // 3) parentEndIndexInReverseChildOrder = 6
      // 4) result = 4
      let lastChildOffsetRelativeToParentInDfsOrder;
      let parentEndIndexInReverseChildOrder;
      if (currentParent) {
          const lastChildIndex = i + childCount;
          lastChildOffsetRelativeToParentInDfsOrder = lastChildIndex - currentParent.index - 1;
          parentEndIndexInReverseChildOrder = currentParent.reverseChildIndex + currentParent.childCount;
      }
      else {
          lastChildOffsetRelativeToParentInDfsOrder = i + childCount;
          parentEndIndexInReverseChildOrder = nodeCount - 1;
      }
      return parentEndIndexInReverseChildOrder - lastChildOffsetRelativeToParentInDfsOrder;
  }
  function validateNode(parent, node, nodeCount) {
      const template = node.element && node.element.template;
      if (template) {
          if (template.lastRenderRootNode &&
              template.lastRenderRootNode.flags & NodeFlags.HasEmbeddedViews) {
              throw new Error(`Illegal State: Last root node of a template can't have embedded views, at index ${node.index}!`);
          }
      }
      if (node.type === NodeType.Provider || node.type === NodeType.Directive) {
          const parentType = parent ? parent.type : null;
          if (parentType !== NodeType.Element) {
              throw new Error(`Illegal State: Provider/Directive nodes need to be children of elements or anchors, at index ${node.index}!`);
          }
      }
      if (node.query) {
          if (node.flags & NodeFlags.HasContentQuery && (!parent || parent.type !== NodeType.Directive)) {
              throw new Error(`Illegal State: Content Query nodes need to be children of directives, at index ${node.index}!`);
          }
          if (node.flags & NodeFlags.HasViewQuery && parent) {
              throw new Error(`Illegal State: View Query nodes have to be top level nodes, at index ${node.index}!`);
          }
      }
      if (node.childCount) {
          const parentEnd = parent ? parent.index + parent.childCount : nodeCount - 1;
          if (node.index <= parentEnd && node.index + node.childCount > parentEnd) {
              throw new Error(`Illegal State: childCount of node leads outside of parent, at index ${node.index}!`);
          }
      }
  }
  function createEmbeddedView(parent, anchorDef, context) {
      // embedded views are seen as siblings to the anchor, so we need
      // to get the parent of the anchor and use it as parentIndex.
      const view = createView(parent.root, parent.renderer, parent, anchorDef, anchorDef.element.template);
      initView(view, parent.component, context);
      createViewNodes(view);
      return view;
  }
  function createRootView(root, def, context) {
      const view = createView(root, root.renderer, null, null, def);
      initView(view, context, context);
      createViewNodes(view);
      return view;
  }
  function createView(root, renderer, parent, parentNodeDef, def) {
      const nodes = new Array(def.nodes.length);
      const disposables = def.outputCount ? new Array(def.outputCount) : undefined;
      const view = {
          def,
          parent,
          viewContainerParent: undefined, parentNodeDef,
          context: undefined,
          component: undefined, nodes,
          state: ViewState.FirstCheck | ViewState.ChecksEnabled, root, renderer,
          oldValues: new Array(def.bindingCount), disposables
      };
      return view;
  }
  function initView(view, component, context) {
      view.component = component;
      view.context = context;
  }
  function createViewNodes(view) {
      let renderHost;
      if (isComponentView(view)) {
          const hostDef = view.parentNodeDef;
          renderHost = asElementData(view.parent, hostDef.parent.index).renderElement;
      }
      const def = view.def;
      const nodes = view.nodes;
      for (let i = 0; i < def.nodes.length; i++) {
          const nodeDef = def.nodes[i];
          Services.setCurrentNode(view, i);
          let nodeData;
          switch (nodeDef.type) {
              case NodeType.Element:
                  const el = createElement(view, renderHost, nodeDef);
                  let componentView;
                  if (nodeDef.flags & NodeFlags.HasComponent) {
                      const compViewDef = resolveViewDefinition(nodeDef.element.componentView);
                      const rendererType = nodeDef.element.componentRendererType;
                      let compRenderer;
                      if (!rendererType) {
                          compRenderer = view.root.renderer;
                      }
                      else {
                          compRenderer = view.root.rendererFactory.createRenderer(el, rendererType);
                      }
                      componentView = createView(view.root, compRenderer, view, nodeDef.element.componentProvider, compViewDef);
                  }
                  listenToElementOutputs(view, componentView, nodeDef, el);
                  nodeData = {
                      renderElement: el,
                      componentView,
                      embeddedViews: (nodeDef.flags & NodeFlags.HasEmbeddedViews) ? [] : undefined,
                      projectedViews: undefined
                  };
                  break;
              case NodeType.Text:
                  nodeData = createText(view, renderHost, nodeDef);
                  break;
              case NodeType.Provider: {
                  const instance = createProviderInstance(view, nodeDef);
                  nodeData = { instance };
                  break;
              }
              case NodeType.Pipe: {
                  const instance = createPipeInstance(view, nodeDef);
                  nodeData = { instance };
                  break;
              }
              case NodeType.Directive: {
                  const instance = createDirectiveInstance(view, nodeDef);
                  nodeData = { instance };
                  if (nodeDef.flags & NodeFlags.IsComponent) {
                      const compView = asElementData(view, nodeDef.parent.index).componentView;
                      initView(componentView, instance, instance);
                  }
                  break;
              }
              case NodeType.PureExpression:
                  nodeData = createPureExpression(view, nodeDef);
                  break;
              case NodeType.Query:
                  nodeData = createQuery();
                  break;
              case NodeType.NgContent:
                  appendNgContent(view, renderHost, nodeDef);
                  // no runtime data needed for NgContent...
                  nodeData = undefined;
                  break;
          }
          nodes[i] = nodeData;
      }
      // Create the ViewData.nodes of component views after we created everything else,
      // so that e.g. ng-content works
      execComponentViewsAction(view, ViewAction.CreateViewNodes);
      // fill static content and view queries
      execQueriesAction(view, NodeFlags.HasContentQuery | NodeFlags.HasViewQuery, NodeFlags.HasStaticQuery, CheckType.CheckAndUpdate);
  }
  function checkNoChangesView(view) {
      Services.updateDirectives(view, CheckType.CheckNoChanges);
      execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
      execQueriesAction(view, NodeFlags.HasContentQuery, NodeFlags.HasDynamicQuery, CheckType.CheckNoChanges);
      Services.updateRenderer(view, CheckType.CheckNoChanges);
      execComponentViewsAction(view, ViewAction.CheckNoChanges);
      execQueriesAction(view, NodeFlags.HasViewQuery, NodeFlags.HasDynamicQuery, CheckType.CheckNoChanges);
  }
  function checkAndUpdateView(view) {
      Services.updateDirectives(view, CheckType.CheckAndUpdate);
      execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
      execQueriesAction(view, NodeFlags.HasContentQuery, NodeFlags.HasDynamicQuery, CheckType.CheckAndUpdate);
      callLifecycleHooksChildrenFirst(view, NodeFlags.AfterContentChecked |
          (view.state & ViewState.FirstCheck ? NodeFlags.AfterContentInit : 0));
      Services.updateRenderer(view, CheckType.CheckAndUpdate);
      execComponentViewsAction(view, ViewAction.CheckAndUpdate);
      execQueriesAction(view, NodeFlags.HasViewQuery, NodeFlags.HasDynamicQuery, CheckType.CheckAndUpdate);
      callLifecycleHooksChildrenFirst(view, NodeFlags.AfterViewChecked |
          (view.state & ViewState.FirstCheck ? NodeFlags.AfterViewInit : 0));
      if (view.def.flags & ViewFlags.OnPush) {
          view.state &= ~ViewState.ChecksEnabled;
      }
      view.state &= ~ViewState.FirstCheck;
  }
  function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      if (argStyle === ArgumentType.Inline) {
          return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
      }
      else {
          return checkAndUpdateNodeDynamic(view, nodeDef, v0);
      }
  }
  function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      let changed = false;
      switch (nodeDef.type) {
          case NodeType.Element:
              changed = checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
              break;
          case NodeType.Text:
              changed = checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
              break;
          case NodeType.Directive:
              changed =
                  checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
              break;
          case NodeType.PureExpression:
              changed =
                  checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
              break;
      }
      return changed;
  }
  function checkAndUpdateNodeDynamic(view, nodeDef, values) {
      let changed = false;
      switch (nodeDef.type) {
          case NodeType.Element:
              changed = checkAndUpdateElementDynamic(view, nodeDef, values);
              break;
          case NodeType.Text:
              changed = checkAndUpdateTextDynamic(view, nodeDef, values);
              break;
          case NodeType.Directive:
              changed = checkAndUpdateDirectiveDynamic(view, nodeDef, values);
              break;
          case NodeType.PureExpression:
              changed = checkAndUpdatePureExpressionDynamic(view, nodeDef, values);
              break;
      }
      if (changed) {
          // Update oldValues after all bindings have been updated,
          // as a setter for a property might update other properties.
          const bindLen = nodeDef.bindings.length;
          const bindingStart = nodeDef.bindingIndex;
          const oldValues = view.oldValues;
          for (let i = 0; i < bindLen; i++) {
              oldValues[bindingStart + i] = values[i];
          }
      }
      return changed;
  }
  function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      if (argStyle === ArgumentType.Inline) {
          checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
      }
      else {
          checkNoChangesNodeDynamic(view, nodeDef, v0);
      }
      // Returning false is ok here as we would have thrown in case of a change.
      return false;
  }
  function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      const bindLen = nodeDef.bindings.length;
      if (bindLen > 0)
          checkBindingNoChanges(view, nodeDef, 0, v0);
      if (bindLen > 1)
          checkBindingNoChanges(view, nodeDef, 1, v1);
      if (bindLen > 2)
          checkBindingNoChanges(view, nodeDef, 2, v2);
      if (bindLen > 3)
          checkBindingNoChanges(view, nodeDef, 3, v3);
      if (bindLen > 4)
          checkBindingNoChanges(view, nodeDef, 4, v4);
      if (bindLen > 5)
          checkBindingNoChanges(view, nodeDef, 5, v5);
      if (bindLen > 6)
          checkBindingNoChanges(view, nodeDef, 6, v6);
      if (bindLen > 7)
          checkBindingNoChanges(view, nodeDef, 7, v7);
      if (bindLen > 8)
          checkBindingNoChanges(view, nodeDef, 8, v8);
      if (bindLen > 9)
          checkBindingNoChanges(view, nodeDef, 9, v9);
  }
  function checkNoChangesNodeDynamic(view, nodeDef, values) {
      for (let i = 0; i < values.length; i++) {
          checkBindingNoChanges(view, nodeDef, i, values[i]);
      }
  }
  function checkNoChangesQuery(view, nodeDef) {
      const queryList = asQueryList(view, nodeDef.index);
      if (queryList.dirty) {
          throw expressionChangedAfterItHasBeenCheckedError$1(Services.createDebugContext(view, nodeDef.index), `Query ${nodeDef.query.id} not dirty`, `Query ${nodeDef.query.id} dirty`, (view.state & ViewState.FirstCheck) !== 0);
      }
  }
  function destroyView(view) {
      if (view.state & ViewState.Destroyed) {
          return;
      }
      execEmbeddedViewsAction(view, ViewAction.Destroy);
      execComponentViewsAction(view, ViewAction.Destroy);
      callLifecycleHooksChildrenFirst(view, NodeFlags.OnDestroy);
      if (view.disposables) {
          for (let i = 0; i < view.disposables.length; i++) {
              view.disposables[i]();
          }
      }
      if (view.renderer.destroyNode) {
          destroyViewNodes(view);
      }
      if (isComponentView(view)) {
          view.renderer.destroy();
      }
      view.state |= ViewState.Destroyed;
  }
  function destroyViewNodes(view) {
      const len = view.def.nodes.length;
      for (let i = 0; i < len; i++) {
          const def = view.def.nodes[i];
          if (def.type === NodeType.Element) {
              view.renderer.destroyNode(asElementData(view, i).renderElement);
          }
          else if (def.type === NodeType.Text) {
              view.renderer.destroyNode(asTextData(view, i).renderText);
          }
      }
  }
  var ViewAction;
  (function (ViewAction) {
      ViewAction[ViewAction["CreateViewNodes"] = 0] = "CreateViewNodes";
      ViewAction[ViewAction["CheckNoChanges"] = 1] = "CheckNoChanges";
      ViewAction[ViewAction["CheckAndUpdate"] = 2] = "CheckAndUpdate";
      ViewAction[ViewAction["Destroy"] = 3] = "Destroy";
  })(ViewAction || (ViewAction = {}));
  function execComponentViewsAction(view, action) {
      const def = view.def;
      if (!(def.nodeFlags & NodeFlags.HasComponent)) {
          return;
      }
      for (let i = 0; i < def.nodes.length; i++) {
          const nodeDef = def.nodes[i];
          if (nodeDef.flags & NodeFlags.HasComponent) {
              // a leaf
              callViewAction(asElementData(view, i).componentView, action);
          }
          else if ((nodeDef.childFlags & NodeFlags.HasComponent) === 0) {
              // a parent with leafs
              // no child is a component,
              // then skip the children
              i += nodeDef.childCount;
          }
      }
  }
  function execEmbeddedViewsAction(view, action) {
      const def = view.def;
      if (!(def.nodeFlags & NodeFlags.HasEmbeddedViews)) {
          return;
      }
      for (let i = 0; i < def.nodes.length; i++) {
          const nodeDef = def.nodes[i];
          if (nodeDef.flags & NodeFlags.HasEmbeddedViews) {
              // a leaf
              const embeddedViews = asElementData(view, i).embeddedViews;
              if (embeddedViews) {
                  for (let k = 0; k < embeddedViews.length; k++) {
                      callViewAction(embeddedViews[k], action);
                  }
              }
          }
          else if ((nodeDef.childFlags & NodeFlags.HasEmbeddedViews) === 0) {
              // a parent with leafs
              // no child is a component,
              // then skip the children
              i += nodeDef.childCount;
          }
      }
  }
  function callViewAction(view, action) {
      const viewState = view.state;
      switch (action) {
          case ViewAction.CheckNoChanges:
              if ((viewState & ViewState.ChecksEnabled) &&
                  (viewState & (ViewState.Errored | ViewState.Destroyed)) === 0) {
                  checkNoChangesView(view);
              }
              break;
          case ViewAction.CheckAndUpdate:
              if ((viewState & ViewState.ChecksEnabled) &&
                  (viewState & (ViewState.Errored | ViewState.Destroyed)) === 0) {
                  checkAndUpdateView(view);
              }
              break;
          case ViewAction.Destroy:
              destroyView(view);
              break;
          case ViewAction.CreateViewNodes:
              createViewNodes(view);
              break;
      }
  }
  function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
      if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
          return;
      }
      const nodeCount = view.def.nodes.length;
      for (let i = 0; i < nodeCount; i++) {
          const nodeDef = view.def.nodes[i];
          if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {
              Services.setCurrentNode(view, nodeDef.index);
              switch (checkType) {
                  case CheckType.CheckAndUpdate:
                      checkAndUpdateQuery(view, nodeDef);
                      break;
                  case CheckType.CheckNoChanges:
                      checkNoChangesQuery(view, nodeDef);
                      break;
              }
          }
          if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
              // no child has a matching query
              // then skip the children
              i += nodeDef.childCount;
          }
      }
  }

  let initialized = false;
  function initServicesIfNeeded() {
      if (initialized) {
          return;
      }
      initialized = true;
      const services = isDevMode() ? createDebugServices() : createProdServices();
      Services.setCurrentNode = services.setCurrentNode;
      Services.createRootView = services.createRootView;
      Services.createEmbeddedView = services.createEmbeddedView;
      Services.checkAndUpdateView = services.checkAndUpdateView;
      Services.checkNoChangesView = services.checkNoChangesView;
      Services.destroyView = services.destroyView;
      Services.resolveDep = resolveDep;
      Services.createDebugContext = services.createDebugContext;
      Services.handleEvent = services.handleEvent;
      Services.updateDirectives = services.updateDirectives;
      Services.updateRenderer = services.updateRenderer;
      Services.dirtyParentQueries = dirtyParentQueries;
  }
  function createProdServices() {
      return {
          setCurrentNode: () => { },
          createRootView: createProdRootView,
          createEmbeddedView: createEmbeddedView,
          checkAndUpdateView: checkAndUpdateView,
          checkNoChangesView: checkNoChangesView,
          destroyView: destroyView,
          createDebugContext: (view, nodeIndex) => new DebugContext_(view, nodeIndex),
          handleEvent: (view, nodeIndex, eventName, event) => view.def.handleEvent(view, nodeIndex, eventName, event),
          updateDirectives: (view, checkType) => view.def.updateDirectives(checkType === CheckType.CheckAndUpdate ? prodCheckAndUpdateNode :
              prodCheckNoChangesNode, view),
          updateRenderer: (view, checkType) => view.def.updateRenderer(checkType === CheckType.CheckAndUpdate ? prodCheckAndUpdateNode :
              prodCheckNoChangesNode, view),
      };
  }
  function createDebugServices() {
      return {
          setCurrentNode: debugSetCurrentNode,
          createRootView: debugCreateRootView,
          createEmbeddedView: debugCreateEmbeddedView,
          checkAndUpdateView: debugCheckAndUpdateView,
          checkNoChangesView: debugCheckNoChangesView,
          destroyView: debugDestroyView,
          createDebugContext: (view, nodeIndex) => new DebugContext_(view, nodeIndex),
          handleEvent: debugHandleEvent,
          updateDirectives: debugUpdateDirectives,
          updateRenderer: debugUpdateRenderer
      };
  }
  function createProdRootView(injector, projectableNodes, rootSelectorOrNode, def, context) {
      const rendererFactory = injector.get(RendererFactoryV2);
      return createRootView(createRootData(injector, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
  }
  function debugCreateRootView(injector, projectableNodes, rootSelectorOrNode, def, context) {
      const rendererFactory = injector.get(RendererFactoryV2);
      const root = createRootData(injector, new DebugRendererFactoryV2(rendererFactory), projectableNodes, rootSelectorOrNode);
      return callWithDebugContext(DebugAction.create, createRootView, null, [root, def, context]);
  }
  function createRootData(injector, rendererFactory, projectableNodes, rootSelectorOrNode) {
      const sanitizer = injector.get(Sanitizer);
      const renderer = rendererFactory.createRenderer(null, null);
      return {
          injector,
          projectableNodes,
          selectorOrNode: rootSelectorOrNode, sanitizer, rendererFactory, renderer
      };
  }
  function prodCheckAndUpdateNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      const nodeDef = view.def.nodes[nodeIndex];
      checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
      return (nodeDef.type === NodeType.PureExpression) ? asPureExpressionData(view, nodeIndex).value :
          undefined;
  }
  function prodCheckNoChangesNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      const nodeDef = view.def.nodes[nodeIndex];
      checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
      return (nodeDef.type === NodeType.PureExpression) ? asPureExpressionData(view, nodeIndex).value :
          undefined;
  }
  function debugCreateEmbeddedView(parent, anchorDef, context) {
      return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parent, anchorDef, context]);
  }
  function debugCheckAndUpdateView(view) {
      return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
  }
  function debugCheckNoChangesView(view) {
      return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
  }
  function debugDestroyView(view) {
      return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
  }
  var DebugAction;
  (function (DebugAction) {
      DebugAction[DebugAction["create"] = 0] = "create";
      DebugAction[DebugAction["detectChanges"] = 1] = "detectChanges";
      DebugAction[DebugAction["checkNoChanges"] = 2] = "checkNoChanges";
      DebugAction[DebugAction["destroy"] = 3] = "destroy";
      DebugAction[DebugAction["handleEvent"] = 4] = "handleEvent";
  })(DebugAction || (DebugAction = {}));
  let _currentAction;
  let _currentView;
  let _currentNodeIndex;
  function debugSetCurrentNode(view, nodeIndex) {
      _currentView = view;
      _currentNodeIndex = nodeIndex;
  }
  function debugHandleEvent(view, nodeIndex, eventName, event) {
      debugSetCurrentNode(view, nodeIndex);
      return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
  }
  function debugUpdateDirectives(view, checkType) {
      if (view.state & ViewState.Destroyed) {
          throw viewDestroyedError$1(DebugAction[_currentAction]);
      }
      debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
      return view.def.updateDirectives(debugCheckDirectivesFn, view);
      function debugCheckDirectivesFn(view, nodeIndex, argStyle, ...values) {
          const nodeDef = view.def.nodes[nodeIndex];
          if (checkType === CheckType.CheckAndUpdate) {
              debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
          }
          else {
              debugCheckNoChangesNode(view, nodeDef, argStyle, values);
          }
          if (nodeDef.type === NodeType.Directive) {
              debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
          }
          return (nodeDef.type === NodeType.PureExpression) ?
              asPureExpressionData(view, nodeDef.index).value :
              undefined;
      }
      ;
  }
  function debugUpdateRenderer(view, checkType) {
      if (view.state & ViewState.Destroyed) {
          throw viewDestroyedError$1(DebugAction[_currentAction]);
      }
      debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
      return view.def.updateRenderer(debugCheckRenderNodeFn, view);
      function debugCheckRenderNodeFn(view, nodeIndex, argStyle, ...values) {
          const nodeDef = view.def.nodes[nodeIndex];
          if (checkType === CheckType.CheckAndUpdate) {
              debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
          }
          else {
              debugCheckNoChangesNode(view, nodeDef, argStyle, values);
          }
          if (nodeDef.type === NodeType.Element || nodeDef.type === NodeType.Text) {
              debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
          }
          return (nodeDef.type === NodeType.PureExpression) ?
              asPureExpressionData(view, nodeDef.index).value :
              undefined;
      }
  }
  function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
      const changed = checkAndUpdateNode(view, nodeDef, argStyle, ...givenValues);
      if (changed) {
          const values = argStyle === ArgumentType.Dynamic ? givenValues[0] : givenValues;
          if (nodeDef.type === NodeType.Directive || nodeDef.type === NodeType.Element) {
              const bindingValues = {};
              for (let i = 0; i < nodeDef.bindings.length; i++) {
                  const binding = nodeDef.bindings[i];
                  const value = values[i];
                  if ((binding.type === BindingType.ElementProperty ||
                      binding.type === BindingType.ComponentHostProperty ||
                      binding.type === BindingType.DirectiveProperty)) {
                      bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] =
                          normalizeDebugBindingValue(value);
                  }
              }
              const elDef = nodeDef.type === NodeType.Directive ? nodeDef.parent : nodeDef;
              const el = asElementData(view, elDef.index).renderElement;
              if (!elDef.element.name) {
                  // a comment.
                  view.renderer.setValue(el, `bindings=${JSON.stringify(bindingValues, null, 2)}`);
              }
              else {
                  // a regular element.
                  for (let attr in bindingValues) {
                      const value = bindingValues[attr];
                      if (value != null) {
                          view.renderer.setAttribute(el, attr, value);
                      }
                      else {
                          view.renderer.removeAttribute(el, attr);
                      }
                  }
              }
          }
      }
  }
  function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
      checkNoChangesNode(view, nodeDef, argStyle, ...values);
  }
  function normalizeDebugBindingName(name) {
      // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
      name = camelCaseToDashCase$1(name.replace(/[$@]/g, '_'));
      return `ng-reflect-${name}`;
  }
  const CAMEL_CASE_REGEXP$1 = /([A-Z])/g;
  function camelCaseToDashCase$1(input) {
      return input.replace(CAMEL_CASE_REGEXP$1, (...m) => '-' + m[1].toLowerCase());
  }
  function normalizeDebugBindingValue(value) {
      try {
          // Limit the size of the value as otherwise the DOM just gets polluted.
          return value ? value.toString().slice(0, 30) : value;
      }
      catch (e) {
          return '[ERROR] Exception while trying to serialize the value';
      }
  }
  function nextDirectiveWithBinding(view, nodeIndex) {
      for (let i = nodeIndex; i < view.def.nodes.length; i++) {
          const nodeDef = view.def.nodes[i];
          if (nodeDef.type === NodeType.Directive && nodeDef.bindings && nodeDef.bindings.length) {
              return i;
          }
      }
      return undefined;
  }
  function nextRenderNodeWithBinding(view, nodeIndex) {
      for (let i = nodeIndex; i < view.def.nodes.length; i++) {
          const nodeDef = view.def.nodes[i];
          if ((nodeDef.type === NodeType.Element || nodeDef.type === NodeType.Text) && nodeDef.bindings &&
              nodeDef.bindings.length) {
              return i;
          }
      }
      return undefined;
  }
  class DebugContext_ {
      constructor(view, nodeIndex) {
          this.view = view;
          this.nodeIndex = nodeIndex;
          if (nodeIndex == null) {
              this.nodeIndex = nodeIndex = 0;
          }
          this.nodeDef = view.def.nodes[nodeIndex];
          let elDef = this.nodeDef;
          let elView = view;
          while (elDef && elDef.type !== NodeType.Element) {
              elDef = elDef.parent;
          }
          if (!elDef) {
              while (!elDef && elView) {
                  elDef = viewParentEl(elView);
                  elView = elView.parent;
              }
          }
          this.elDef = elDef;
          this.elView = elView;
      }
      get elOrCompView() {
          // Has to be done lazily as we use the DebugContext also during creation of elements...
          return asElementData(this.elView, this.elDef.index).componentView || this.view;
      }
      get injector() { return createInjector(this.elView, this.elDef); }
      get component() { return this.elOrCompView.component; }
      get context() { return this.elOrCompView.context; }
      get providerTokens() {
          const tokens = [];
          if (this.elDef) {
              for (let i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
                  const childDef = this.elView.def.nodes[i];
                  if (childDef.type === NodeType.Provider || childDef.type === NodeType.Directive) {
                      tokens.push(childDef.provider.token);
                  }
                  i += childDef.childCount;
              }
          }
          return tokens;
      }
      get references() {
          const references = {};
          if (this.elDef) {
              collectReferences(this.elView, this.elDef, references);
              for (let i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
                  const childDef = this.elView.def.nodes[i];
                  if (childDef.type === NodeType.Provider || childDef.type === NodeType.Directive) {
                      collectReferences(this.elView, childDef, references);
                  }
                  i += childDef.childCount;
              }
          }
          return references;
      }
      get source() {
          if (this.nodeDef.type === NodeType.Text) {
              return this.nodeDef.text.source;
          }
          else {
              return this.elDef.element.source;
          }
      }
      get componentRenderElement() {
          const elData = findHostElement(this.elOrCompView);
          return elData ? elData.renderElement : undefined;
      }
      get renderNode() {
          return this.nodeDef.type === NodeType.Text ? renderNode(this.view, this.nodeDef) :
              renderNode(this.elView, this.elDef);
      }
  }
  function findHostElement(view) {
      while (view && !isComponentView(view)) {
          view = view.parent;
      }
      if (view.parent) {
          return asElementData(view.parent, viewParentEl(view).index);
      }
      return undefined;
  }
  function collectReferences(view, nodeDef, references) {
      for (let refName in nodeDef.references) {
          references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
      }
  }
  function callWithDebugContext(action, fn, self, args) {
      const oldAction = _currentAction;
      const oldView = _currentView;
      const oldNodeIndex = _currentNodeIndex;
      try {
          _currentAction = action;
          const result = fn.apply(self, args);
          _currentView = oldView;
          _currentNodeIndex = oldNodeIndex;
          _currentAction = oldAction;
          return result;
      }
      catch (e) {
          if (isViewDebugError(e) || !_currentView) {
              throw e;
          }
          _currentView.state |= ViewState.Errored;
          throw viewWrappedDebugError(e, getCurrentDebugContext());
      }
  }
  function getCurrentDebugContext() {
      return new DebugContext_(_currentView, _currentNodeIndex);
  }
  class DebugRendererFactoryV2 {
      constructor(delegate) {
          this.delegate = delegate;
      }
      createRenderer(element, renderData) {
          return new DebugRendererV2(this.delegate.createRenderer(element, renderData));
      }
  }
  class DebugRendererV2 {
      constructor(delegate) {
          this.delegate = delegate;
      }
      destroyNode(node) {
          removeDebugNodeFromIndex(getDebugNode(node));
          if (this.delegate.destroyNode) {
              this.delegate.destroyNode(node);
          }
      }
      destroy() { this.delegate.destroy(); }
      createElement(name, namespace) {
          const el = this.delegate.createElement(name, namespace);
          const debugEl = new DebugElement(el, null, getCurrentDebugContext());
          debugEl.name = name;
          indexDebugNode(debugEl);
          return el;
      }
      createComment(value) {
          const comment = this.delegate.createComment(value);
          const debugEl = new DebugNode(comment, null, getCurrentDebugContext());
          indexDebugNode(debugEl);
          return comment;
      }
      createText(value) {
          const text = this.delegate.createText(value);
          const debugEl = new DebugNode(text, null, getCurrentDebugContext());
          indexDebugNode(debugEl);
          return text;
      }
      appendChild(parent, newChild) {
          const debugEl = getDebugNode(parent);
          const debugChildEl = getDebugNode(newChild);
          if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
              debugEl.addChild(debugChildEl);
          }
          this.delegate.appendChild(parent, newChild);
      }
      insertBefore(parent, newChild, refChild) {
          const debugEl = getDebugNode(parent);
          const debugChildEl = getDebugNode(newChild);
          const debugRefEl = getDebugNode(refChild);
          if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
              debugEl.insertBefore(debugRefEl, debugChildEl);
          }
          this.delegate.insertBefore(parent, newChild, refChild);
      }
      removeChild(parent, oldChild) {
          const debugEl = getDebugNode(parent);
          const debugChildEl = getDebugNode(oldChild);
          if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
              debugEl.removeChild(debugChildEl);
          }
          this.delegate.removeChild(parent, oldChild);
      }
      selectRootElement(selectorOrNode) {
          const el = this.delegate.selectRootElement(selectorOrNode);
          const debugEl = new DebugElement(el, null, getCurrentDebugContext());
          indexDebugNode(debugEl);
          return el;
      }
      setAttribute(el, name, value, namespace) {
          const debugEl = getDebugNode(el);
          if (debugEl && debugEl instanceof DebugElement) {
              const fullName = namespace ? namespace + ':' + name : name;
              debugEl.attributes[fullName] = value;
          }
          this.delegate.setAttribute(el, name, value, namespace);
      }
      removeAttribute(el, name, namespace) {
          const debugEl = getDebugNode(el);
          if (debugEl && debugEl instanceof DebugElement) {
              const fullName = namespace ? namespace + ':' + name : name;
              debugEl.attributes[fullName] = null;
          }
          this.delegate.removeAttribute(el, name, namespace);
      }
      addClass(el, name) {
          const debugEl = getDebugNode(el);
          if (debugEl && debugEl instanceof DebugElement) {
              debugEl.classes[name] = true;
          }
          this.delegate.addClass(el, name);
      }
      removeClass(el, name) {
          const debugEl = getDebugNode(el);
          if (debugEl && debugEl instanceof DebugElement) {
              debugEl.classes[name] = false;
          }
          this.delegate.removeClass(el, name);
      }
      setStyle(el, style, value, hasVendorPrefix, hasImportant) {
          const debugEl = getDebugNode(el);
          if (debugEl && debugEl instanceof DebugElement) {
              debugEl.styles[style] = value;
          }
          this.delegate.setStyle(el, style, value, hasVendorPrefix, hasImportant);
      }
      removeStyle(el, style, hasVendorPrefix) {
          const debugEl = getDebugNode(el);
          if (debugEl && debugEl instanceof DebugElement) {
              debugEl.styles[style] = null;
          }
          this.delegate.removeStyle(el, style, hasVendorPrefix);
      }
      setProperty(el, name, value) {
          const debugEl = getDebugNode(el);
          if (debugEl && debugEl instanceof DebugElement) {
              debugEl.properties[name] = value;
          }
          this.delegate.setProperty(el, name, value);
      }
      listen(target, eventName, callback) {
          if (typeof target !== 'string') {
              const debugEl = getDebugNode(target);
              if (debugEl) {
                  debugEl.listeners.push(new EventListener(eventName, callback));
              }
          }
          return this.delegate.listen(target, eventName, callback);
      }
      parentNode(node) { return this.delegate.parentNode(node); }
      nextSibling(node) { return this.delegate.nextSibling(node); }
      setValue(node, value) { return this.delegate.setValue(node, value); }
  }

  function _iterableDiffersFactory() {
      return defaultIterableDiffers;
  }
  function _keyValueDiffersFactory() {
      return defaultKeyValueDiffers;
  }
  function _localeFactory(locale) {
      return locale || 'en-US';
  }
  function _initViewEngine() {
      initServicesIfNeeded();
  }
  /**
   * This module includes the providers of @angular/core that are needed
   * to bootstrap components via `ApplicationRef`.
   *
   * @experimental
   */
  class ApplicationModule {
  }
  ApplicationModule.decorators = [
      { type: NgModule, args: [{
                  providers: [
                      ApplicationRef_,
                      { provide: ApplicationRef, useExisting: ApplicationRef_ },
                      ApplicationInitStatus,
                      Compiler,
                      APP_ID_RANDOM_PROVIDER,
                      ɵViewUtils,
                      AnimationQueue,
                      { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
                      { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
                      {
                          provide: LOCALE_ID,
                          useFactory: _localeFactory,
                          deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]
                      },
                      { provide: APP_INITIALIZER, useValue: _initViewEngine, multi: true },
                  ]
              },] },
  ];
  /** @nocollapse */
  ApplicationModule.ctorParameters = () => [];

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ const ɵFILL_STYLE_FLAG = 'true'; // TODO (matsko): change to boolean
  // TODO (matsko): change to boolean
  const ɵANY_STATE = '*';
  const ɵDEFAULT_STATE = '*';
  const ɵEMPTY_STATE = 'void';

  class ɵAnimationGroupPlayer {
      constructor(_players) {
          this._players = _players;
          this._onDoneFns = [];
          this._onStartFns = [];
          this._finished = false;
          this._started = false;
          this._destroyed = false;
          this._onDestroyFns = [];
          this.parentPlayer = null;
          let count = 0;
          const total = this._players.length;
          if (total == 0) {
              scheduleMicroTask(() => this._onFinish());
          }
          else {
              this._players.forEach(player => {
                  player.parentPlayer = this;
                  player.onDone(() => {
                      if (++count >= total) {
                          this._onFinish();
                      }
                  });
              });
          }
      }
      _onFinish() {
          if (!this._finished) {
              this._finished = true;
              this._onDoneFns.forEach(fn => fn());
              this._onDoneFns = [];
          }
      }
      init() { this._players.forEach(player => player.init()); }
      onStart(fn) { this._onStartFns.push(fn); }
      onDone(fn) { this._onDoneFns.push(fn); }
      onDestroy(fn) { this._onDestroyFns.push(fn); }
      hasStarted() { return this._started; }
      play() {
          if (!isPresent(this.parentPlayer)) {
              this.init();
          }
          if (!this.hasStarted()) {
              this._onStartFns.forEach(fn => fn());
              this._onStartFns = [];
              this._started = true;
          }
          this._players.forEach(player => player.play());
      }
      pause() { this._players.forEach(player => player.pause()); }
      restart() { this._players.forEach(player => player.restart()); }
      finish() {
          this._onFinish();
          this._players.forEach(player => player.finish());
      }
      destroy() {
          if (!this._destroyed) {
              this._onFinish();
              this._players.forEach(player => player.destroy());
              this._destroyed = true;
              this._onDestroyFns.forEach(fn => fn());
              this._onDestroyFns = [];
          }
      }
      reset() {
          this._players.forEach(player => player.reset());
          this._destroyed = false;
          this._finished = false;
          this._started = false;
      }
      setPosition(p) {
          this._players.forEach(player => { player.setPosition(p); });
      }
      getPosition() {
          let min = 0;
          this._players.forEach(player => {
              const p = player.getPosition();
              min = Math.min(p, min);
          });
          return min;
      }
      get players() { return this._players; }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * `AnimationKeyframe` consists of a series of styles (contained within {@link AnimationStyles
   * `AnimationStyles`})
   * and an offset value indicating when those styles are applied within the `duration/delay/easing`
   * timings.
   * `AnimationKeyframe` is mostly an internal class which is designed to be used alongside {@link
   * Renderer#animate-anchor `Renderer.animate`}.
   *
   * @experimental Animation support is experimental
   */
  class ɵAnimationKeyframe {
      constructor(offset, styles) {
          this.offset = offset;
          this.styles = styles;
      }
  }

  class ɵAnimationSequencePlayer {
      constructor(_players) {
          this._players = _players;
          this._currentIndex = 0;
          this._onDoneFns = [];
          this._onStartFns = [];
          this._onDestroyFns = [];
          this._finished = false;
          this._started = false;
          this._destroyed = false;
          this.parentPlayer = null;
          this._players.forEach(player => { player.parentPlayer = this; });
          this._onNext(false);
      }
      _onNext(start) {
          if (this._finished)
              return;
          if (this._players.length == 0) {
              this._activePlayer = new ɵNoOpAnimationPlayer();
              scheduleMicroTask(() => this._onFinish());
          }
          else if (this._currentIndex >= this._players.length) {
              this._activePlayer = new ɵNoOpAnimationPlayer();
              this._onFinish();
          }
          else {
              const player = this._players[this._currentIndex++];
              player.onDone(() => this._onNext(true));
              this._activePlayer = player;
              if (start) {
                  player.play();
              }
          }
      }
      _onFinish() {
          if (!this._finished) {
              this._finished = true;
              this._onDoneFns.forEach(fn => fn());
              this._onDoneFns = [];
          }
      }
      init() { this._players.forEach(player => player.init()); }
      onStart(fn) { this._onStartFns.push(fn); }
      onDone(fn) { this._onDoneFns.push(fn); }
      onDestroy(fn) { this._onDestroyFns.push(fn); }
      hasStarted() { return this._started; }
      play() {
          if (!isPresent(this.parentPlayer)) {
              this.init();
          }
          if (!this.hasStarted()) {
              this._onStartFns.forEach(fn => fn());
              this._onStartFns = [];
              this._started = true;
          }
          this._activePlayer.play();
      }
      pause() { this._activePlayer.pause(); }
      restart() {
          this.reset();
          if (this._players.length > 0) {
              this._players[0].restart();
          }
      }
      reset() {
          this._players.forEach(player => player.reset());
          this._destroyed = false;
          this._finished = false;
          this._started = false;
      }
      finish() {
          this._onFinish();
          this._players.forEach(player => player.finish());
      }
      destroy() {
          if (!this._destroyed) {
              this._onFinish();
              this._players.forEach(player => player.destroy());
              this._destroyed = true;
              this._activePlayer = new ɵNoOpAnimationPlayer();
              this._onDestroyFns.forEach(fn => fn());
              this._onDestroyFns = [];
          }
      }
      setPosition(p) { this._players[0].setPosition(p); }
      getPosition() { return this._players[0].getPosition(); }
      get players() { return this._players; }
  }

  /**
   * @experimental Animation support is experimental.
   */
  const AUTO_STYLE = '*';

  function ɵprepareFinalAnimationStyles(previousStyles, newStyles, nullValue = null) {
      const finalStyles = {};
      Object.keys(newStyles).forEach(prop => {
          const value = newStyles[prop];
          finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
      });
      Object.keys(previousStyles).forEach(prop => {
          if (!isPresent(finalStyles[prop])) {
              finalStyles[prop] = nullValue;
          }
      });
      return finalStyles;
  }
  function ɵbalanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
      const limit = keyframes.length - 1;
      const firstKeyframe = keyframes[0];
      // phase 1: copy all the styles from the first keyframe into the lookup map
      const flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
      const extraFirstKeyframeStyles = {};
      let hasExtraFirstStyles = false;
      Object.keys(collectedStyles).forEach(prop => {
          const value = collectedStyles[prop];
          // if the style is already defined in the first keyframe then
          // we do not replace it.
          if (!flatenedFirstKeyframeStyles[prop]) {
              flatenedFirstKeyframeStyles[prop] = value;
              extraFirstKeyframeStyles[prop] = value;
              hasExtraFirstStyles = true;
          }
      });
      const keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
      // phase 2: normalize the final keyframe
      const finalKeyframe = keyframes[limit];
      finalKeyframe.styles.styles.unshift(finalStateStyles);
      const flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
      const extraFinalKeyframeStyles = {};
      let hasExtraFinalStyles = false;
      Object.keys(keyframeCollectedStyles).forEach(prop => {
          if (!isPresent(flatenedFinalKeyframeStyles[prop])) {
              extraFinalKeyframeStyles[prop] = AUTO_STYLE;
              hasExtraFinalStyles = true;
          }
      });
      if (hasExtraFinalStyles) {
          finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
      }
      Object.keys(flatenedFinalKeyframeStyles).forEach(prop => {
          if (!isPresent(flatenedFirstKeyframeStyles[prop])) {
              extraFirstKeyframeStyles[prop] = AUTO_STYLE;
              hasExtraFirstStyles = true;
          }
      });
      if (hasExtraFirstStyles) {
          firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
      }
      ɵcollectAndResolveStyles(collectedStyles, [finalStateStyles]);
      return keyframes;
  }
  function ɵclearStyles(styles) {
      const finalStyles = {};
      Object.keys(styles).forEach(key => { finalStyles[key] = null; });
      return finalStyles;
  }
  function ɵcollectAndResolveStyles(collection, styles) {
      return styles.map(entry => {
          const stylesObj = {};
          Object.keys(entry).forEach(prop => {
              let value = entry[prop];
              if (value == ɵFILL_STYLE_FLAG) {
                  value = collection[prop];
                  if (!isPresent(value)) {
                      value = AUTO_STYLE;
                  }
              }
              collection[prop] = value;
              stylesObj[prop] = value;
          });
          return stylesObj;
      });
  }
  function ɵrenderStyles(element, renderer, styles) {
      Object.keys(styles).forEach(prop => { renderer.setElementStyle(element, prop, styles[prop]); });
  }
  function flattenStyles(styles) {
      const finalStyles = {};
      styles.forEach(entry => {
          Object.keys(entry).forEach(prop => { finalStyles[prop] = entry[prop]; });
      });
      return finalStyles;
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * `AnimationStyles` consists of a collection of key/value maps containing CSS-based style data
   * that can either be used as initial styling data or apart of a series of keyframes within an
   * animation.
   * This class is mostly internal, and it is designed to be used alongside
   * {@link AnimationKeyframe `AnimationKeyframe`} and {@link Renderer#animate-anchor
   * `Renderer.animate`}.
   *
   * @experimental Animation support is experimental
   */
  class ɵAnimationStyles {
      constructor(styles) {
          this.styles = styles;
      }
  }

  /**
   * An instance of this class is returned as an event parameter when an animation
   * callback is captured for an animation either during the start or done phase.
   *
   * ```typescript
   * @Component({
   *   host: {
   *     '[@myAnimationTrigger]': 'someExpression',
   *     '(@myAnimationTrigger.start)': 'captureStartEvent($event)',
   *     '(@myAnimationTrigger.done)': 'captureDoneEvent($event)',
   *   },
   *   animations: [
   *     trigger("myAnimationTrigger", [
   *        // ...
   *     ])
   *   ]
   * })
   * class MyComponent {
   *   someExpression: any = false;
   *   captureStartEvent(event: AnimationTransitionEvent) {
   *     // the toState, fromState and totalTime data is accessible from the event variable
   *   }
   *
   *   captureDoneEvent(event: AnimationTransitionEvent) {
   *     // the toState, fromState and totalTime data is accessible from the event variable
   *   }
   * }
   * ```
   *
   * @experimental Animation support is experimental.
   */
  class AnimationTransitionEvent {
      constructor({ fromState, toState, totalTime, phaseName, element, triggerName }) {
          this.fromState = fromState;
          this.toState = toState;
          this.totalTime = totalTime;
          this.phaseName = phaseName;
          this.element = new ElementRef(element);
          this.triggerName = triggerName;
      }
  }

  class ɵAnimationTransition {
      constructor(_player, _element, _triggerName, _fromState, _toState, _totalTime) {
          this._player = _player;
          this._element = _element;
          this._triggerName = _triggerName;
          this._fromState = _fromState;
          this._toState = _toState;
          this._totalTime = _totalTime;
      }
      _createEvent(phaseName) {
          return new AnimationTransitionEvent({
              fromState: this._fromState,
              toState: this._toState,
              totalTime: this._totalTime,
              phaseName: phaseName,
              element: this._element,
              triggerName: this._triggerName
          });
      }
      onStart(callback) {
          const fn = Zone.current.wrap(() => callback(this._createEvent('start')), 'player.onStart');
          this._player.onStart(fn);
      }
      onDone(callback) {
          const fn = Zone.current.wrap(() => callback(this._createEvent('done')), 'player.onDone');
          this._player.onDone(fn);
      }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ var ViewType;
  (function (ViewType) {
      // A view that contains the host element with bound component directive.
      // Contains a COMPONENT view
      ViewType[ViewType["HOST"] = 0] = "HOST";
      // The view of the component can contain 0 to n EMBEDDED views
      ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
      // A view is embedded into another View via a <ng-template> element inside of a COMPONENT view
      ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
  })(ViewType || (ViewType = {}));

  class ɵStaticNodeDebugInfo {
      constructor(providerTokens, componentToken, refTokens) {
          this.providerTokens = providerTokens;
          this.componentToken = componentToken;
          this.refTokens = refTokens;
      }
  }
  class ɵDebugContext {
      constructor(_view, _nodeIndex, _tplRow, _tplCol) {
          this._view = _view;
          this._nodeIndex = _nodeIndex;
          this._tplRow = _tplRow;
          this._tplCol = _tplCol;
      }
      get _staticNodeInfo() {
          return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
      }
      get context() { return this._view.context; }
      get component() {
          const staticNodeInfo = this._staticNodeInfo;
          if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {
              return this.injector.get(staticNodeInfo.componentToken);
          }
          return null;
      }
      get componentRenderElement() {
          let componentView = this._view;
          while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {
              componentView = componentView.parentView;
          }
          return componentView.parentElement;
      }
      get injector() { return this._view.injector(this._nodeIndex); }
      get renderNode() {
          if (isPresent(this._nodeIndex) && this._view.allNodes) {
              return this._view.allNodes[this._nodeIndex];
          }
          else {
              return null;
          }
      }
      get providerTokens() {
          const staticNodeInfo = this._staticNodeInfo;
          return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
      }
      get source() {
          return `${this._view.componentType.templateUrl}:${this._tplRow}:${this._tplCol}`;
      }
      get references() {
          const varValues = {};
          const staticNodeInfo = this._staticNodeInfo;
          if (isPresent(staticNodeInfo)) {
              const refs = staticNodeInfo.refTokens;
              Object.keys(refs).forEach(refName => {
                  const refToken = refs[refName];
                  let varValue;
                  if (isBlank(refToken)) {
                      varValue = this._view.allNodes ? this._view.allNodes[this._nodeIndex] : null;
                  }
                  else {
                      varValue = this._view.injectorGet(refToken, this._nodeIndex, null);
                  }
                  varValues[refName] = varValue;
              });
          }
          return varValues;
      }
  }

  class ViewAnimationMap {
      constructor() {
          this._map = new Map();
          this._allPlayers = [];
      }
      find(element, animationName) {
          const playersByAnimation = this._map.get(element);
          if (isPresent(playersByAnimation)) {
              return playersByAnimation[animationName];
          }
      }
      findAllPlayersByElement(element) {
          const el = this._map.get(element);
          return el ? Object.keys(el).map(k => el[k]) : [];
      }
      set(element, animationName, player) {
          let playersByAnimation = this._map.get(element);
          if (!isPresent(playersByAnimation)) {
              playersByAnimation = {};
          }
          const existingEntry = playersByAnimation[animationName];
          if (isPresent(existingEntry)) {
              this.remove(element, animationName);
          }
          playersByAnimation[animationName] = player;
          this._allPlayers.push(player);
          this._map.set(element, playersByAnimation);
      }
      getAllPlayers() { return this._allPlayers; }
      remove(element, animationName, targetPlayer = null) {
          const playersByAnimation = this._map.get(element);
          if (playersByAnimation) {
              const player = playersByAnimation[animationName];
              if (!targetPlayer || player === targetPlayer) {
                  delete playersByAnimation[animationName];
                  const index = this._allPlayers.indexOf(player);
                  this._allPlayers.splice(index, 1);
                  if (Object.keys(playersByAnimation).length === 0) {
                      this._map.delete(element);
                  }
              }
          }
      }
  }

  class AnimationViewContext {
      constructor(_animationQueue) {
          this._animationQueue = _animationQueue;
          this._players = new ViewAnimationMap();
      }
      onAllActiveAnimationsDone(callback) {
          const activeAnimationPlayers = this._players.getAllPlayers();
          // we check for the length to avoid having GroupAnimationPlayer
          // issue an unnecessary microtask when zero players are passed in
          if (activeAnimationPlayers.length) {
              new ɵAnimationGroupPlayer(activeAnimationPlayers).onDone(() => callback());
          }
          else {
              callback();
          }
      }
      queueAnimation(element, animationName, player) {
          this._animationQueue.enqueue(player);
          this._players.set(element, animationName, player);
          player.onDone(() => this._players.remove(element, animationName, player));
      }
      getAnimationPlayers(element, animationName = null) {
          const players = [];
          if (animationName) {
              const currentPlayer = this._players.find(element, animationName);
              if (currentPlayer) {
                  _recursePlayers(currentPlayer, players);
              }
          }
          else {
              this._players.findAllPlayersByElement(element).forEach(player => _recursePlayers(player, players));
          }
          return players;
      }
  }
  function _recursePlayers(player, collectedPlayers) {
      if ((player instanceof ɵAnimationGroupPlayer) || (player instanceof ɵAnimationSequencePlayer)) {
          player.players.forEach(player => _recursePlayers(player, collectedPlayers));
      }
      else {
          collectedPlayers.push(player);
      }
  }

  class ElementInjector extends Injector {
      constructor(_view, _nodeIndex) {
          super();
          this._view = _view;
          this._nodeIndex = _nodeIndex;
      }
      get(token, notFoundValue = THROW_IF_NOT_FOUND) {
          return this._view.injectorGet(token, this._nodeIndex, notFoundValue);
      }
  }

  const _scope_check = wtfCreateScope(`AppView#check(ascii id)`);
  /**
   * @experimental
   */
  const EMPTY_CONTEXT$1 = new Object();
  const UNDEFINED$1 = new Object();
  /**
   * Cost of making objects: http://jsperf.com/instantiate-size-of-object
   *
   */
  class ɵAppView {
      constructor(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer = null) {
          this.clazz = clazz;
          this.componentType = componentType;
          this.type = type;
          this.viewUtils = viewUtils;
          this.parentView = parentView;
          this.parentIndex = parentIndex;
          this.parentElement = parentElement;
          this.cdMode = cdMode;
          this.declaredViewContainer = declaredViewContainer;
          this.numberOfChecks = 0;
          this.throwOnChange = false;
          this.ref = new ViewRef_(this, viewUtils.animationQueue);
          if (type === ViewType.COMPONENT || type === ViewType.HOST) {
              this.renderer = viewUtils.renderComponent(componentType);
          }
          else {
              this.renderer = parentView.renderer;
          }
          this._directRenderer = this.renderer.directRenderer;
      }
      get animationContext() {
          if (!this._animationContext) {
              this._animationContext = new AnimationViewContext(this.viewUtils.animationQueue);
          }
          return this._animationContext;
      }
      get destroyed() { return this.cdMode === ChangeDetectorStatus.Destroyed; }
      create(context) {
          this.context = context;
          return this.createInternal(null);
      }
      createHostView(rootSelectorOrNode, hostInjector, projectableNodes) {
          this.context = EMPTY_CONTEXT$1;
          this._hasExternalHostElement = isPresent(rootSelectorOrNode);
          this._hostInjector = hostInjector;
          this._hostProjectableNodes = projectableNodes;
          return this.createInternal(rootSelectorOrNode);
      }
      /**
       * Overwritten by implementations.
       * Returns the ComponentRef for the host element for ViewType.HOST.
       */
      createInternal(rootSelectorOrNode) { return null; }
      /**
       * Overwritten by implementations.
       */
      createEmbeddedViewInternal(templateNodeIndex) { return null; }
      init(lastRootNode, allNodes, disposables) {
          this.lastRootNode = lastRootNode;
          this.allNodes = allNodes;
          this.disposables = disposables;
          if (this.type === ViewType.COMPONENT) {
              this.dirtyParentQueriesInternal();
          }
      }
      injectorGet(token, nodeIndex, notFoundValue = THROW_IF_NOT_FOUND) {
          let result = UNDEFINED$1;
          let view = this;
          while (result === UNDEFINED$1) {
              if (isPresent(nodeIndex)) {
                  result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);
              }
              if (result === UNDEFINED$1 && view.type === ViewType.HOST) {
                  result = view._hostInjector.get(token, notFoundValue);
              }
              nodeIndex = view.parentIndex;
              view = view.parentView;
          }
          return result;
      }
      /**
       * Overwritten by implementations
       */
      injectorGetInternal(token, nodeIndex, notFoundResult) {
          return notFoundResult;
      }
      injector(nodeIndex) { return new ElementInjector(this, nodeIndex); }
      detachAndDestroy() {
          if (this.viewContainer) {
              this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));
          }
          else if (this.appRef) {
              this.appRef.detachView(this.ref);
          }
          else if (this._hasExternalHostElement) {
              this.detach();
          }
          this.destroy();
      }
      destroy() {
          if (this.cdMode === ChangeDetectorStatus.Destroyed) {
              return;
          }
          const hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;
          if (this.disposables) {
              for (let i = 0; i < this.disposables.length; i++) {
                  this.disposables[i]();
              }
          }
          this.destroyInternal();
          this.dirtyParentQueriesInternal();
          if (this._animationContext) {
              this._animationContext.onAllActiveAnimationsDone(() => this.renderer.destroyView(hostElement, this.allNodes));
          }
          else {
              this.renderer.destroyView(hostElement, this.allNodes);
          }
          this.cdMode = ChangeDetectorStatus.Destroyed;
      }
      /**
       * Overwritten by implementations
       */
      destroyInternal() { }
      /**
       * Overwritten by implementations
       */
      detachInternal() { }
      detach() {
          this.detachInternal();
          if (this._animationContext) {
              this._animationContext.onAllActiveAnimationsDone(() => this._renderDetach());
          }
          else {
              this._renderDetach();
          }
          if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer &&
              this.declaredViewContainer.projectedViews) {
              const projectedViews = this.declaredViewContainer.projectedViews;
              const index = projectedViews.indexOf(this);
              // perf: pop is faster than splice!
              if (index >= projectedViews.length - 1) {
                  projectedViews.pop();
              }
              else {
                  projectedViews.splice(index, 1);
              }
          }
          this.appRef = null;
          this.viewContainer = null;
          this.dirtyParentQueriesInternal();
      }
      _renderDetach() {
          if (this._directRenderer) {
              this.visitRootNodesInternal(this._directRenderer.remove, null);
          }
          else {
              this.renderer.detachView(this.flatRootNodes);
          }
      }
      attachToAppRef(appRef) {
          if (this.viewContainer) {
              throw new Error('This view is already attached to a ViewContainer!');
          }
          this.appRef = appRef;
          this.dirtyParentQueriesInternal();
      }
      attachAfter(viewContainer, prevView) {
          if (this.appRef) {
              throw new Error('This view is already attached directly to the ApplicationRef!');
          }
          this._renderAttach(viewContainer, prevView);
          this.viewContainer = viewContainer;
          if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {
              if (!this.declaredViewContainer.projectedViews) {
                  this.declaredViewContainer.projectedViews = [];
              }
              this.declaredViewContainer.projectedViews.push(this);
          }
          this.dirtyParentQueriesInternal();
      }
      moveAfter(viewContainer, prevView) {
          this._renderAttach(viewContainer, prevView);
          this.dirtyParentQueriesInternal();
      }
      _renderAttach(viewContainer, prevView) {
          const prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;
          if (this._directRenderer) {
              const nextSibling = this._directRenderer.nextSibling(prevNode);
              if (nextSibling) {
                  this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);
              }
              else {
                  const parentElement = this._directRenderer.parentElement(prevNode);
                  if (parentElement) {
                      this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);
                  }
              }
          }
          else {
              this.renderer.attachViewAfter(prevNode, this.flatRootNodes);
          }
      }
      get changeDetectorRef() { return this.ref; }
      get flatRootNodes() {
          const nodes = [];
          this.visitRootNodesInternal(addToArray, nodes);
          return nodes;
      }
      projectNodes(parentElement, ngContentIndex) {
          if (this._directRenderer) {
              this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);
          }
          else {
              const nodes = [];
              this.visitProjectedNodes(ngContentIndex, addToArray, nodes);
              this.renderer.projectNodes(parentElement, nodes);
          }
      }
      visitProjectedNodes(ngContentIndex, cb, c) {
          switch (this.type) {
              case ViewType.EMBEDDED:
                  this.parentView.visitProjectedNodes(ngContentIndex, cb, c);
                  break;
              case ViewType.COMPONENT:
                  if (this.parentView.type === ViewType.HOST) {
                      const nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];
                      for (let i = 0; i < nodes.length; i++) {
                          cb(nodes[i], c);
                      }
                  }
                  else {
                      this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);
                  }
                  break;
          }
      }
      /**
       * Overwritten by implementations
       */
      visitRootNodesInternal(cb, c) { }
      /**
       * Overwritten by implementations
       */
      visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, c) { }
      /**
       * Overwritten by implementations
       */
      dirtyParentQueriesInternal() { }
      internalDetectChanges(throwOnChange) {
          if (this.cdMode !== ChangeDetectorStatus.Detached) {
              this.detectChanges(throwOnChange);
          }
      }
      detectChanges(throwOnChange) {
          const s = _scope_check(this.clazz);
          if (this.cdMode === ChangeDetectorStatus.Checked ||
              this.cdMode === ChangeDetectorStatus.Errored)
              return;
          if (this.cdMode === ChangeDetectorStatus.Destroyed) {
              this.throwDestroyedError('detectChanges');
          }
          this.throwOnChange = throwOnChange;
          this.detectChangesInternal();
          if (this.cdMode === ChangeDetectorStatus.CheckOnce)
              this.cdMode = ChangeDetectorStatus.Checked;
          this.numberOfChecks++;
          wtfLeave(s);
      }
      /**
       * Overwritten by implementations
       */
      detectChangesInternal() { }
      markAsCheckOnce() { this.cdMode = ChangeDetectorStatus.CheckOnce; }
      markPathToRootAsCheckOnce() {
          let c = this;
          while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
              if (c.cdMode === ChangeDetectorStatus.Checked) {
                  c.cdMode = ChangeDetectorStatus.CheckOnce;
              }
              if (c.type === ViewType.COMPONENT) {
                  c = c.parentView;
              }
              else {
                  c = c.viewContainer ? c.viewContainer.parentView : null;
              }
          }
      }
      eventHandler(cb) {
          return cb;
      }
      throwDestroyedError(details) { throw viewDestroyedError(details); }
  }
  class ɵDebugAppView extends ɵAppView {
      constructor(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer = null) {
          super(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);
          this.staticNodeDebugInfos = staticNodeDebugInfos;
          this._currentDebugContext = null;
      }
      create(context) {
          this._resetDebug();
          try {
              return super.create(context);
          }
          catch (e) {
              this._rethrowWithContext(e);
              throw e;
          }
      }
      createHostView(rootSelectorOrNode, injector, projectableNodes = null) {
          this._resetDebug();
          try {
              return super.createHostView(rootSelectorOrNode, injector, projectableNodes);
          }
          catch (e) {
              this._rethrowWithContext(e);
              throw e;
          }
      }
      injectorGet(token, nodeIndex, notFoundResult) {
          this._resetDebug();
          try {
              return super.injectorGet(token, nodeIndex, notFoundResult);
          }
          catch (e) {
              this._rethrowWithContext(e);
              throw e;
          }
      }
      detach() {
          this._resetDebug();
          try {
              super.detach();
          }
          catch (e) {
              this._rethrowWithContext(e);
              throw e;
          }
      }
      destroy() {
          this._resetDebug();
          try {
              super.destroy();
          }
          catch (e) {
              this._rethrowWithContext(e);
              throw e;
          }
      }
      detectChanges(throwOnChange) {
          this._resetDebug();
          try {
              super.detectChanges(throwOnChange);
          }
          catch (e) {
              this._rethrowWithContext(e);
              throw e;
          }
      }
      _resetDebug() { this._currentDebugContext = null; }
      debug(nodeIndex, rowNum, colNum) {
          return this._currentDebugContext = new ɵDebugContext(this, nodeIndex, rowNum, colNum);
      }
      _rethrowWithContext(e) {
          if (!(getType(e) == viewWrappedError)) {
              if (!(getType(e) == expressionChangedAfterItHasBeenCheckedError)) {
                  this.cdMode = ChangeDetectorStatus.Errored;
              }
              if (isPresent(this._currentDebugContext)) {
                  throw viewWrappedError(e, this._currentDebugContext);
              }
          }
      }
      eventHandler(cb) {
          const superHandler = super.eventHandler(cb);
          return (eventName, event) => {
              this._resetDebug();
              try {
                  return superHandler.call(this, eventName, event);
              }
              catch (e) {
                  this._rethrowWithContext(e);
                  throw e;
              }
          };
      }
  }

  /**
   * A ViewContainer is created for elements that have a ViewContainerRef
   * to keep track of the nested views.
   */
  class ɵViewContainer {
      constructor(index, parentIndex, parentView, nativeElement) {
          this.index = index;
          this.parentIndex = parentIndex;
          this.parentView = parentView;
          this.nativeElement = nativeElement;
      }
      get elementRef() { return new ElementRef(this.nativeElement); }
      get vcRef() { return new ViewContainerRef_(this); }
      get parentInjector() { return this.parentView.injector(this.parentIndex); }
      get injector() { return this.parentView.injector(this.index); }
      detectChangesInNestedViews(throwOnChange) {
          if (this.nestedViews) {
              for (let i = 0; i < this.nestedViews.length; i++) {
                  this.nestedViews[i].detectChanges(throwOnChange);
              }
          }
      }
      destroyNestedViews() {
          if (this.nestedViews) {
              for (let i = 0; i < this.nestedViews.length; i++) {
                  this.nestedViews[i].destroy();
              }
          }
      }
      visitNestedViewRootNodes(cb, c) {
          if (this.nestedViews) {
              for (let i = 0; i < this.nestedViews.length; i++) {
                  this.nestedViews[i].visitRootNodesInternal(cb, c);
              }
          }
      }
      mapNestedViews(nestedViewClass, callback) {
          const result = [];
          if (this.nestedViews) {
              for (let i = 0; i < this.nestedViews.length; i++) {
                  const nestedView = this.nestedViews[i];
                  if (nestedView.clazz === nestedViewClass) {
                      result.push(callback(nestedView));
                  }
              }
          }
          if (this.projectedViews) {
              for (let i = 0; i < this.projectedViews.length; i++) {
                  const projectedView = this.projectedViews[i];
                  if (projectedView.clazz === nestedViewClass) {
                      result.push(callback(projectedView));
                  }
              }
          }
          return result;
      }
      moveView(view, toIndex) {
          const fromIndex = this.nestedViews.indexOf(view);
          if (view.type === ViewType.COMPONENT) {
              throw new Error(`Component views can't be moved!`);
          }
          let nestedViews = this.nestedViews;
          if (nestedViews == null) {
              nestedViews = [];
              this.nestedViews = nestedViews;
          }
          nestedViews.splice(fromIndex, 1);
          nestedViews.splice(toIndex, 0, view);
          const prevView = toIndex > 0 ? nestedViews[toIndex - 1] : null;
          view.moveAfter(this, prevView);
      }
      attachView(view, viewIndex) {
          if (view.type === ViewType.COMPONENT) {
              throw new Error(`Component views can't be moved!`);
          }
          let nestedViews = this.nestedViews;
          if (nestedViews == null) {
              nestedViews = [];
              this.nestedViews = nestedViews;
          }
          // perf: array.push is faster than array.splice!
          if (viewIndex >= nestedViews.length) {
              nestedViews.push(view);
          }
          else {
              nestedViews.splice(viewIndex, 0, view);
          }
          const prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;
          view.attachAfter(this, prevView);
      }
      detachView(viewIndex) {
          const view = this.nestedViews[viewIndex];
          // perf: array.pop is faster than array.splice!
          if (viewIndex >= this.nestedViews.length - 1) {
              this.nestedViews.pop();
          }
          else {
              this.nestedViews.splice(viewIndex, 1);
          }
          if (view.type === ViewType.COMPONENT) {
              throw new Error(`Component views can't be moved!`);
          }
          view.detach();
          return view;
      }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * @stable
   */
  var LifecycleHooks;
  (function (LifecycleHooks) {
      LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
      LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
      LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
      LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
      LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
      LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
      LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
      LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
  })(LifecycleHooks || (LifecycleHooks = {}));
  const ɵLIFECYCLE_HOOKS_VALUES = [
      LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,
      LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,
      LifecycleHooks.AfterViewChecked
  ];

  /**
   * `trigger` is an animation-specific function that is designed to be used inside of Angular2's
   animation DSL language. If this information is new, please navigate to the {@link
   Component#animations-anchor component animations metadata page} to gain a better understanding of
   how animations in Angular2 are used.
   *
   * `trigger` Creates an animation trigger which will a list of {@link state state} and {@link
   transition transition} entries that will be evaluated when the expression bound to the trigger
   changes.
   *
   * Triggers are registered within the component annotation data under the {@link
   Component#animations-anchor animations section}. An animation trigger can be placed on an element
   within a template by referencing the name of the trigger followed by the expression value that the
   trigger is bound to (in the form of `[@triggerName]="expression"`.
   *
   * ### Usage
   *
   * `trigger` will create an animation trigger reference based on the provided `name` value. The
   provided `animation` value is expected to be an array consisting of {@link state state} and {@link
   transition transition} declarations.
   *
   * ```typescript
   * @Component({
   *   selector: 'my-component',
   *   templateUrl: 'my-component-tpl.html',
   *   animations: [
   *     trigger("myAnimationTrigger", [
   *       state(...),
   *       state(...),
   *       transition(...),
   *       transition(...)
   *     ])
   *   ]
   * })
   * class MyComponent {
   *   myStatusExp = "something";
   * }
   * ```
   *
   * The template associated with this component will make use of the `myAnimationTrigger` animation
   trigger by binding to an element within its template code.
   *
   * ```html
   * <!-- somewhere inside of my-component-tpl.html -->
   * <div [@myAnimationTrigger]="myStatusExp">...</div>
   tools/gulp-tasks/validate-commit-message.js ```
   *
   * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * @experimental Animation support is experimental.
   */
  function trigger$2(name, definitions) {
      return { name, definitions };
  }
  /**
   * `animate` is an animation-specific function that is designed to be used inside of Angular2's
   * animation DSL language. If this information is new, please navigate to the {@link
   * Component#animations-anchor component animations metadata page} to gain a better understanding of
   * how animations in Angular2 are used.
   *
   * `animate` specifies an animation step that will apply the provided `styles` data for a given
   * amount of time based on the provided `timing` expression value. Calls to `animate` are expected
   * to be used within {@link sequence an animation sequence}, {@link group group}, or {@link
   * transition transition}.
   *
   * ### Usage
   *
   * The `animate` function accepts two input parameters: `timing` and `styles`:
   *
   * - `timing` is a string based value that can be a combination of a duration with optional delay
   * and easing values. The format for the expression breaks down to `duration delay easing`
   * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
   * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the
   * `duration` value in millisecond form.
   * - `styles` is the style input data which can either be a call to {@link style style} or {@link
   * keyframes keyframes}. If left empty then the styles from the destination state will be collected
   * and used (this is useful when describing an animation step that will complete an animation by
   * {@link transition#the-final-animate-call animating to the final state}).
   *
   * ```typescript
   * // various functions for specifying timing data
   * animate(500, style(...))
   * animate("1s", style(...))
   * animate("100ms 0.5s", style(...))
   * animate("5s ease", style(...))
   * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
   *
   * // either style() of keyframes() can be used
   * animate(500, style({ background: "red" }))
   * animate(500, keyframes([
   *   style({ background: "blue" })),
   *   style({ background: "red" }))
   * ])
   * ```
   *
   * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * @experimental Animation support is experimental.
   */
  function animate$2(timings, styles = null) {
      return { type: 4 /* Animate */, styles: styles, timings: timings };
  }
  /**
   * `group` is an animation-specific function that is designed to be used inside of Angular2's
   * animation DSL language. If this information is new, please navigate to the {@link
   * Component#animations-anchor component animations metadata page} to gain a better understanding of
   * how animations in Angular2 are used.
   *
   * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are
   * useful when a series of styles must be animated/closed off at different statrting/ending times.
   *
   * The `group` function can either be used within a {@link sequence sequence} or a {@link transition
   * transition} and it will only continue to the next instruction once all of the inner animation
   * steps have completed.
   *
   * ### Usage
   *
   * The `steps` data that is passed into the `group` animation function can either consist of {@link
   * style style} or {@link animate animate} function calls. Each call to `style()` or `animate()`
   * within a group will be executed instantly (use {@link keyframes keyframes} or a {@link
   * animate#usage animate() with a delay value} to offset styles to be applied at a later time).
   *
   * ```typescript
   * group([
   *   animate("1s", { background: "black" }))
   *   animate("2s", { color: "white" }))
   * ])
   * ```
   *
   * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * @experimental Animation support is experimental.
   */
  function group$2(steps) {
      return { type: 3 /* Group */, steps: steps };
  }
  /**
   * `sequence` is an animation-specific function that is designed to be used inside of Angular2's
   * animation DSL language. If this information is new, please navigate to the {@link
   * Component#animations-anchor component animations metadata page} to gain a better understanding of
   * how animations in Angular2 are used.
   *
   * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by
   * default when an array is passed as animation data into {@link transition transition}.)
   *
   * The `sequence` function can either be used within a {@link group group} or a {@link transition
   * transition} and it will only continue to the next instruction once each of the inner animation
   * steps have completed.
   *
   * To perform animation styling in parallel with other animation steps then have a look at the
   * {@link group group} animation function.
   *
   * ### Usage
   *
   * The `steps` data that is passed into the `sequence` animation function can either consist of
   * {@link style style} or {@link animate animate} function calls. A call to `style()` will apply the
   * provided styling data immediately while a call to `animate()` will apply its styling data over a
   * given time depending on its timing data.
   *
   * ```typescript
   * sequence([
   *   style({ opacity: 0 })),
   *   animate("1s", { opacity: 1 }))
   * ])
   * ```
   *
   * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * @experimental Animation support is experimental.
   */
  function sequence$2(steps) {
      return { type: 2 /* Sequence */, steps: steps };
  }
  /**
   * `style` is an animation-specific function that is designed to be used inside of Angular2's
   * animation DSL language. If this information is new, please navigate to the {@link
   * Component#animations-anchor component animations metadata page} to gain a better understanding of
   * how animations in Angular2 are used.
   *
   * `style` declares a key/value object containing CSS properties/styles that can then be used for
   * {@link state animation states}, within an {@link sequence animation sequence}, or as styling data
   * for both {@link animate animate} and {@link keyframes keyframes}.
   *
   * ### Usage
   *
   * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs
   * to be defined.
   *
   * ```typescript
   * // string values are used for css properties
   * style({ background: "red", color: "blue" })
   *
   * // numerical (pixel) values are also supported
   * style({ width: 100, height: 0 })
   * ```
   *
   * #### Auto-styles (using `*`)
   *
   * When an asterix (`*`) character is used as a value then it will be detected from the element
   * being animated and applied as animation data when the animation starts.
   *
   * This feature proves useful for a state depending on layout and/or environment factors; in such
   * cases the styles are calculated just before the animation starts.
   *
   * ```typescript
   * // the steps below will animate from 0 to the
   * // actual height of the element
   * style({ height: 0 }),
   * animate("1s", style({ height: "*" }))
   * ```
   *
   * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * @experimental Animation support is experimental.
   */
  function style$2(tokens) {
      let input;
      let offset = null;
      if (Array.isArray(tokens)) {
          input = tokens;
      }
      else {
          input = [tokens];
      }
      input.forEach(entry => {
          const entryOffset = entry['offset'];
          if (entryOffset != null) {
              offset = offset == null ? parseFloat(entryOffset) : offset;
          }
      });
      return _style(offset, input);
  }
  function _style(offset, styles) {
      return { type: 6 /* Style */, styles: styles, offset: offset };
  }
  /**
   * `state` is an animation-specific function that is designed to be used inside of Angular2's
   * animation DSL language. If this information is new, please navigate to the {@link
   * Component#animations-anchor component animations metadata page} to gain a better understanding of
   * how animations in Angular2 are used.
   *
   * `state` declares an animation state within the given trigger. When a state is active within a
   * component then its associated styles will persist on the element that the trigger is attached to
   * (even when the animation ends).
   *
   * To animate between states, have a look at the animation {@link transition transition} DSL
   * function. To register states to an animation trigger please have a look at the {@link trigger
   * trigger} function.
   *
   * #### The `void` state
   *
   * The `void` state value is a reserved word that angular uses to determine when the element is not
   * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
   * associated element is void).
   *
   * #### The `*` (default) state
   *
   * The `*` state (when styled) is a fallback state that will be used if the state that is being
   * animated is not declared within the trigger.
   *
   * ### Usage
   *
   * `state` will declare an animation state with its associated styles
   * within the given trigger.
   *
   * - `stateNameExpr` can be one or more state names separated by commas.
   * - `styles` refers to the {@link style styling data} that will be persisted on the element once
   * the state has been reached.
   *
   * ```typescript
   * // "void" is a reserved name for a state and is used to represent
   * // the state in which an element is detached from from the application.
   * state("void", style({ height: 0 }))
   *
   * // user-defined states
   * state("closed", style({ height: 0 }))
   * state("open, visible", style({ height: "*" }))
   * ```
   *
   * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * @experimental Animation support is experimental.
   */
  function state$2(name, styles) {
      return { type: 0 /* State */, name: name, styles: styles };
  }
  /**
   * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's
   * animation DSL language. If this information is new, please navigate to the {@link
   * Component#animations-anchor component animations metadata page} to gain a better understanding of
   * how animations in Angular2 are used.
   *
   * `keyframes` specifies a collection of {@link style style} entries each optionally characterized
   * by an `offset` value.
   *
   * ### Usage
   *
   * The `keyframes` animation function is designed to be used alongside the {@link animate animate}
   * animation function. Instead of applying animations from where they are currently to their
   * destination, keyframes can describe how each style entry is applied and at what point within the
   * animation arc (much like CSS Keyframe Animations do).
   *
   * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what
   * percentage of the animate time the styles will be applied.
   *
   * ```typescript
   * // the provided offset values describe when each backgroundColor value is applied.
   * animate("5s", keyframes([
   *   style({ backgroundColor: "red", offset: 0 }),
   *   style({ backgroundColor: "blue", offset: 0.2 }),
   *   style({ backgroundColor: "orange", offset: 0.3 }),
   *   style({ backgroundColor: "black", offset: 1 })
   * ]))
   * ```
   *
   * Alternatively, if there are no `offset` values used within the style entries then the offsets
   * will be calculated automatically.
   *
   * ```typescript
   * animate("5s", keyframes([
   *   style({ backgroundColor: "red" }) // offset = 0
   *   style({ backgroundColor: "blue" }) // offset = 0.33
   *   style({ backgroundColor: "orange" }) // offset = 0.66
   *   style({ backgroundColor: "black" }) // offset = 1
   * ]))
   * ```
   *
   * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * @experimental Animation support is experimental.
   */
  function keyframes$2(steps) {
      return { type: 5 /* KeyframeSequence */, steps: steps };
  }
  /**
   * `transition` is an animation-specific function that is designed to be used inside of Angular2's
   * animation DSL language. If this information is new, please navigate to the {@link
   * Component#animations-anchor component animations metadata page} to gain a better understanding of
   * how animations in Angular2 are used.
   *
   * `transition` declares the {@link sequence sequence of animation steps} that will be run when the
   * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>
   * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting
   * and/or ending state).
   *
   * A function can also be provided as the `stateChangeExpr` argument for a transition and this
   * function will be executed each time a state change occurs. If the value returned within the
   * function is true then the associated animation will be run.
   *
   * Animation transitions are placed within an {@link trigger animation trigger}. For an transition
   * to animate to a state value and persist its styles then one or more {@link state animation
   * states} is expected to be defined.
   *
   * ### Usage
   *
   * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
   * what the previous state is and what the current state has become. In other words, if a transition
   * is defined that matches the old/current state criteria then the associated animation will be
   * triggered.
   *
   * ```typescript
   * // all transition/state changes are defined within an animation trigger
   * trigger("myAnimationTrigger", [
   *   // if a state is defined then its styles will be persisted when the
   *   // animation has fully completed itself
   *   state("on", style({ background: "green" })),
   *   state("off", style({ background: "grey" })),
   *
   *   // a transition animation that will be kicked off when the state value
   *   // bound to "myAnimationTrigger" changes from "on" to "off"
   *   transition("on => off", animate(500)),
   *
   *   // it is also possible to do run the same animation for both directions
   *   transition("on <=> off", animate(500)),
   *
   *   // or to define multiple states pairs separated by commas
   *   transition("on => off, off => void", animate(500)),
   *
   *   // this is a catch-all state change for when an element is inserted into
   *   // the page and the destination state is unknown
   *   transition("void => *", [
   *     style({ opacity: 0 }),
   *     animate(500)
   *   ]),
   *
   *   // this will capture a state change between any states
   *   transition("* => *", animate("1s 0s")),
   *
   *   // you can also go full out and include a function
   *   transition((fromState, toState) => {
   *     // when `true` then it will allow the animation below to be invoked
   *     return fromState == "off" && toState == "on";
   *   }, animate("1s 0s"))
   * ])
   * ```
   *
   * The template associated with this component will make use of the `myAnimationTrigger` animation
   * trigger by binding to an element within its template code.
   *
   * ```html
   * <!-- somewhere inside of my-component-tpl.html -->
   * <div [@myAnimationTrigger]="myStatusExp">...</div>
   * ```
   *
   * #### The final `animate` call
   *
   * If the final step within the transition steps is a call to `animate()` that **only** uses a
   * timing value with **no style data** then it will be automatically used as the final animation arc
   * for the element to animate itself to the final state. This involves an automatic mix of
   * adding/removing CSS styles so that the element will be in the exact state it should be for the
   * applied state to be presented correctly.
   *
   * ```
   * // start off by hiding the element, but make sure that it animates properly to whatever state
   * // is currently active for "myAnimationTrigger"
   * transition("void => *", [
   *   style({ opacity: 0 }),
   *   animate(500)
   * ])
   * ```
   *
   * ### Transition Aliases (`:enter` and `:leave`)
   *
   * Given that enter (insertion) and leave (removal) animations are so common, the `transition`
   * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*
   * => void` state changes.
   *
   * ```
   * transition(":enter", [
   *   style({ opacity: 0 }),
   *   animate(500, style({ opacity: 1 }))
   * ])
   * transition(":leave", [
   *   animate(500, style({ opacity: 0 }))
   * ])
   * ```
   *
   * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * @experimental Animation support is experimental.
   */
  function transition$2(stateChangeExpr, steps) {
      return {
          type: 1 /* Transition */,
          expr: stateChangeExpr,
          animation: Array.isArray(steps) ? sequence$2(steps) : steps
      };
  }

  /**
   * @deprecated This symbol has moved. Please Import from @angular/animations instead!
   */
  function trigger$1(name, definitions) {
      return trigger$2(name, definitions);
  }
  /**
   * @deprecated This symbol has moved. Please Import from @angular/animations instead!
   */
  function animate$1(timings, styles = null) {
      return animate$2(timings, styles);
  }
  /**
   * @deprecated This symbol has moved. Please Import from @angular/animations instead!
   */
  function group$1(steps) {
      return group$2(steps);
  }
  /**
   * @deprecated This symbol has moved. Please Import from @angular/animations instead!
   */
  function sequence$1(steps) {
      return sequence$2(steps);
  }
  /**
   * @deprecated This symbol has moved. Please Import from @angular/animations instead!
   */
  function style$1(tokens) {
      return style$2(tokens);
  }
  /**
   * @deprecated This symbol has moved. Please Import from @angular/animations instead!
   */
  function state$1(name, styles) {
      return state$2(name, styles);
  }
  /**
   * @deprecated This symbol has moved. Please Import from @angular/animations instead!
   */
  function keyframes$1(steps) {
      return keyframes$2(steps);
  }
  /**
   * @deprecated This symbol has moved. Please Import from @angular/animations instead!
   */
  function transition$1(stateChangeExpr, steps) {
      return transition$2(stateChangeExpr, steps);
  }

  /**
   * @stable
   */
  const VERSION = new Version('4.0.0-beta.8-1f3198c');

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * A segment of text within the template.
   */
  class TextAst {
      constructor(value, ngContentIndex, sourceSpan) {
          this.value = value;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) { return visitor.visitText(this, context); }
  }
  /**
   * A bound expression within the text of a template.
   */
  class BoundTextAst {
      constructor(value, ngContentIndex, sourceSpan) {
          this.value = value;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) {
          return visitor.visitBoundText(this, context);
      }
  }
  /**
   * A plain attribute on an element.
   */
  class AttrAst {
      constructor(name, value, sourceSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) { return visitor.visitAttr(this, context); }
  }
  /**
   * A binding for an element property (e.g. `[property]="expression"`) or an animation trigger (e.g.
   * `[@trigger]="stateExp"`)
   */
  class BoundElementPropertyAst {
      constructor(name, type, securityContext, needsRuntimeSecurityContext, value, unit, sourceSpan) {
          this.name = name;
          this.type = type;
          this.securityContext = securityContext;
          this.needsRuntimeSecurityContext = needsRuntimeSecurityContext;
          this.value = value;
          this.unit = unit;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) {
          return visitor.visitElementProperty(this, context);
      }
      get isAnimation() { return this.type === PropertyBindingType.Animation; }
  }
  /**
   * A binding for an element event (e.g. `(event)="handler()"`) or an animation trigger event (e.g.
   * `(@trigger.phase)="callback($event)"`).
   */
  class BoundEventAst {
      constructor(name, target, phase, handler, sourceSpan) {
          this.name = name;
          this.target = target;
          this.phase = phase;
          this.handler = handler;
          this.sourceSpan = sourceSpan;
      }
      static calcFullName(name, target, phase) {
          if (target) {
              return `${target}:${name}`;
          }
          else if (phase) {
              return `@${name}.${phase}`;
          }
          else {
              return name;
          }
      }
      visit(visitor, context) {
          return visitor.visitEvent(this, context);
      }
      get fullName() { return BoundEventAst.calcFullName(this.name, this.target, this.phase); }
      get isAnimation() { return !!this.phase; }
  }
  /**
   * A reference declaration on an element (e.g. `let someName="expression"`).
   */
  class ReferenceAst {
      constructor(name, value, sourceSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) {
          return visitor.visitReference(this, context);
      }
  }
  /**
   * A variable declaration on a <ng-template> (e.g. `var-someName="someLocalName"`).
   */
  class VariableAst {
      constructor(name, value, sourceSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) {
          return visitor.visitVariable(this, context);
      }
  }
  /**
   * An element declaration in a template.
   */
  class ElementAst {
      constructor(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan, endSourceSpan) {
          this.name = name;
          this.attrs = attrs;
          this.inputs = inputs;
          this.outputs = outputs;
          this.references = references;
          this.directives = directives;
          this.providers = providers;
          this.hasViewContainer = hasViewContainer;
          this.queryMatches = queryMatches;
          this.children = children;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
          this.endSourceSpan = endSourceSpan;
      }
      visit(visitor, context) {
          return visitor.visitElement(this, context);
      }
  }
  /**
   * A `<ng-template>` element included in an Angular template.
   */
  class EmbeddedTemplateAst {
      constructor(attrs, outputs, references, variables, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan) {
          this.attrs = attrs;
          this.outputs = outputs;
          this.references = references;
          this.variables = variables;
          this.directives = directives;
          this.providers = providers;
          this.hasViewContainer = hasViewContainer;
          this.queryMatches = queryMatches;
          this.children = children;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) {
          return visitor.visitEmbeddedTemplate(this, context);
      }
  }
  /**
   * A directive property with a bound value (e.g. `*ngIf="condition").
   */
  class BoundDirectivePropertyAst {
      constructor(directiveName, templateName, value, sourceSpan) {
          this.directiveName = directiveName;
          this.templateName = templateName;
          this.value = value;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) {
          return visitor.visitDirectiveProperty(this, context);
      }
  }
  /**
   * A directive declared on an element.
   */
  class DirectiveAst {
      constructor(directive, inputs, hostProperties, hostEvents, contentQueryStartId, sourceSpan) {
          this.directive = directive;
          this.inputs = inputs;
          this.hostProperties = hostProperties;
          this.hostEvents = hostEvents;
          this.contentQueryStartId = contentQueryStartId;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) {
          return visitor.visitDirective(this, context);
      }
  }
  /**
   * A provider declared on an element
   */
  class ProviderAst {
      constructor(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
          this.token = token;
          this.multiProvider = multiProvider;
          this.eager = eager;
          this.providers = providers;
          this.providerType = providerType;
          this.lifecycleHooks = lifecycleHooks;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) {
          // No visit method in the visitor for now...
          return null;
      }
  }
  var ProviderAstType;
  (function (ProviderAstType) {
      ProviderAstType[ProviderAstType["PublicService"] = 0] = "PublicService";
      ProviderAstType[ProviderAstType["PrivateService"] = 1] = "PrivateService";
      ProviderAstType[ProviderAstType["Component"] = 2] = "Component";
      ProviderAstType[ProviderAstType["Directive"] = 3] = "Directive";
      ProviderAstType[ProviderAstType["Builtin"] = 4] = "Builtin";
  })(ProviderAstType || (ProviderAstType = {}));
  /**
   * Position where content is to be projected (instance of `<ng-content>` in a template).
   */
  class NgContentAst {
      constructor(index, ngContentIndex, sourceSpan) {
          this.index = index;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) {
          return visitor.visitNgContent(this, context);
      }
  }
  /**
   * Enumeration of types of property bindings.
   */
  var PropertyBindingType;
  (function (PropertyBindingType) {
      /**
       * A normal binding to a property (e.g. `[property]="expression"`).
       */
      PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
      /**
       * A binding to an element attribute (e.g. `[attr.name]="expression"`).
       */
      PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
      /**
       * A binding to a CSS class (e.g. `[class.name]="condition"`).
       */
      PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
      /**
       * A binding to a style rule (e.g. `[style.rule]="expression"`).
       */
      PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
      /**
       * A binding to an animation reference (e.g. `[animate.key]="expression"`).
       */
      PropertyBindingType[PropertyBindingType["Animation"] = 4] = "Animation";
  })(PropertyBindingType || (PropertyBindingType = {}));
  /**
   * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.
   */
  function templateVisitAll(visitor, asts, context = null) {
      const result = [];
      const visit = visitor.visit ?
          (ast) => visitor.visit(ast, context) || ast.visit(visitor, context) :
          (ast) => ast.visit(visitor, context);
      asts.forEach(ast => {
          const astResult = visit(ast);
          if (astResult) {
              result.push(astResult);
          }
      });
      return result;
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * A token representing the a reference to a static type.
   *
   * This token is unique for a filePath and name and can be used as a hash table key.
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ class StaticSymbol {
      constructor(filePath, name, members) {
          this.filePath = filePath;
          this.name = name;
          this.members = members;
      }
      assertNoMembers() {
          if (this.members.length) {
              throw new Error(`Illegal state: symbol without members expected, but got ${JSON.stringify(this)}.`);
          }
      }
  }
  /**
   * A cache of static symbol used by the StaticReflector to return the same symbol for the
   * same symbol values.
   */
  class StaticSymbolCache {
      constructor() {
          this.cache = new Map();
      }
      get(declarationFile, name, members) {
          members = members || [];
          const memberSuffix = members.length ? `.${members.join('.')}` : '';
          const key = `"${declarationFile}".${name}${memberSuffix}`;
          let result = this.cache.get(key);
          if (!result) {
              result = new StaticSymbol(declarationFile, name, members);
              this.cache.set(key, result);
          }
          return result;
      }
  }

  function isPresent$1(obj) {
      return obj != null;
  }
  function isBlank$1(obj) {
      return obj == null;
  }
  const STRING_MAP_PROTO$1 = Object.getPrototypeOf({});
  function isStrictStringMap$1(obj) {
      return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO$1;
  }
  function stringify$1(token) {
      if (typeof token === 'string') {
          return token;
      }
      if (token == null) {
          return '' + token;
      }
      if (token.overriddenName) {
          return `${token.overriddenName}`;
      }
      if (token.name) {
          return `${token.name}`;
      }
      const res = token.toString();
      const newLineIndex = res.indexOf('\n');
      return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  class NumberWrapper$1 {
      static parseIntAutoRadix(text) {
          const result = parseInt(text);
          if (isNaN(result)) {
              throw new Error('Invalid integer literal when parsing ' + text);
          }
          return result;
      }
      static isNumeric(value) { return !isNaN(value - parseFloat(value)); }
  }
  function isJsObject$1(o) {
      return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  function isPrimitive$1(obj) {
      return !isJsObject$1(obj);
  }
  function escapeRegExp$1(s) {
      return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }

  /**
   * Wraps Javascript Objects
   */
  class StringMapWrapper$1 {
      static merge(m1, m2) {
          const m = {};
          for (const k of Object.keys(m1)) {
              m[k] = m1[k];
          }
          for (const k of Object.keys(m2)) {
              m[k] = m2[k];
          }
          return m;
      }
      static equals(m1, m2) {
          const k1 = Object.keys(m1);
          const k2 = Object.keys(m2);
          if (k1.length != k2.length) {
              return false;
          }
          for (let i = 0; i < k1.length; i++) {
              const key = k1[i];
              if (m1[key] !== m2[key]) {
                  return false;
              }
          }
          return true;
      }
  }
  class ListWrapper$1 {
      static findLast(arr, condition) {
          for (let i = arr.length - 1; i >= 0; i--) {
              if (condition(arr[i])) {
                  return arr[i];
              }
          }
          return null;
      }
      static removeAll(list, items) {
          for (let i = 0; i < items.length; ++i) {
              const index = list.indexOf(items[i]);
              if (index > -1) {
                  list.splice(index, 1);
              }
          }
      }
      static remove(list, el) {
          const index = list.indexOf(el);
          if (index > -1) {
              list.splice(index, 1);
              return true;
          }
          return false;
      }
      static equals(a, b) {
          if (a.length != b.length)
              return false;
          for (let i = 0; i < a.length; ++i) {
              if (a[i] !== b[i])
                  return false;
          }
          return true;
      }
      static flatten(list) {
          return list.reduce((flat, item) => {
              const flatItem = Array.isArray(item) ? ListWrapper$1.flatten(item) : item;
              return flat.concat(flatItem);
          }, []);
      }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ var TagContentType;
  (function (TagContentType) {
      TagContentType[TagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
      TagContentType[TagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
      TagContentType[TagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
  })(TagContentType || (TagContentType = {}));
  function splitNsName(elementName) {
      if (elementName[0] != ':') {
          return [null, elementName];
      }
      const colonIndex = elementName.indexOf(':', 1);
      if (colonIndex == -1) {
          throw new Error(`Unsupported format "${elementName}" expecting ":namespace:name"`);
      }
      return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
  }
  function getNsPrefix(fullName) {
      return fullName === null ? null : splitNsName(fullName)[0];
  }
  function mergeNsAndName(prefix, localName) {
      return prefix ? `:${prefix}:${localName}` : localName;
  }
  // see http://www.w3.org/TR/html51/syntax.html#named-character-references
  // see https://html.spec.whatwg.org/multipage/entities.json
  // This list is not exhaustive to keep the compiler footprint low.
  // The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.
  const NAMED_ENTITIES = {
      'Aacute': '\u00C1',
      'aacute': '\u00E1',
      'Acirc': '\u00C2',
      'acirc': '\u00E2',
      'acute': '\u00B4',
      'AElig': '\u00C6',
      'aelig': '\u00E6',
      'Agrave': '\u00C0',
      'agrave': '\u00E0',
      'alefsym': '\u2135',
      'Alpha': '\u0391',
      'alpha': '\u03B1',
      'amp': '&',
      'and': '\u2227',
      'ang': '\u2220',
      'apos': '\u0027',
      'Aring': '\u00C5',
      'aring': '\u00E5',
      'asymp': '\u2248',
      'Atilde': '\u00C3',
      'atilde': '\u00E3',
      'Auml': '\u00C4',
      'auml': '\u00E4',
      'bdquo': '\u201E',
      'Beta': '\u0392',
      'beta': '\u03B2',
      'brvbar': '\u00A6',
      'bull': '\u2022',
      'cap': '\u2229',
      'Ccedil': '\u00C7',
      'ccedil': '\u00E7',
      'cedil': '\u00B8',
      'cent': '\u00A2',
      'Chi': '\u03A7',
      'chi': '\u03C7',
      'circ': '\u02C6',
      'clubs': '\u2663',
      'cong': '\u2245',
      'copy': '\u00A9',
      'crarr': '\u21B5',
      'cup': '\u222A',
      'curren': '\u00A4',
      'dagger': '\u2020',
      'Dagger': '\u2021',
      'darr': '\u2193',
      'dArr': '\u21D3',
      'deg': '\u00B0',
      'Delta': '\u0394',
      'delta': '\u03B4',
      'diams': '\u2666',
      'divide': '\u00F7',
      'Eacute': '\u00C9',
      'eacute': '\u00E9',
      'Ecirc': '\u00CA',
      'ecirc': '\u00EA',
      'Egrave': '\u00C8',
      'egrave': '\u00E8',
      'empty': '\u2205',
      'emsp': '\u2003',
      'ensp': '\u2002',
      'Epsilon': '\u0395',
      'epsilon': '\u03B5',
      'equiv': '\u2261',
      'Eta': '\u0397',
      'eta': '\u03B7',
      'ETH': '\u00D0',
      'eth': '\u00F0',
      'Euml': '\u00CB',
      'euml': '\u00EB',
      'euro': '\u20AC',
      'exist': '\u2203',
      'fnof': '\u0192',
      'forall': '\u2200',
      'frac12': '\u00BD',
      'frac14': '\u00BC',
      'frac34': '\u00BE',
      'frasl': '\u2044',
      'Gamma': '\u0393',
      'gamma': '\u03B3',
      'ge': '\u2265',
      'gt': '>',
      'harr': '\u2194',
      'hArr': '\u21D4',
      'hearts': '\u2665',
      'hellip': '\u2026',
      'Iacute': '\u00CD',
      'iacute': '\u00ED',
      'Icirc': '\u00CE',
      'icirc': '\u00EE',
      'iexcl': '\u00A1',
      'Igrave': '\u00CC',
      'igrave': '\u00EC',
      'image': '\u2111',
      'infin': '\u221E',
      'int': '\u222B',
      'Iota': '\u0399',
      'iota': '\u03B9',
      'iquest': '\u00BF',
      'isin': '\u2208',
      'Iuml': '\u00CF',
      'iuml': '\u00EF',
      'Kappa': '\u039A',
      'kappa': '\u03BA',
      'Lambda': '\u039B',
      'lambda': '\u03BB',
      'lang': '\u27E8',
      'laquo': '\u00AB',
      'larr': '\u2190',
      'lArr': '\u21D0',
      'lceil': '\u2308',
      'ldquo': '\u201C',
      'le': '\u2264',
      'lfloor': '\u230A',
      'lowast': '\u2217',
      'loz': '\u25CA',
      'lrm': '\u200E',
      'lsaquo': '\u2039',
      'lsquo': '\u2018',
      'lt': '<',
      'macr': '\u00AF',
      'mdash': '\u2014',
      'micro': '\u00B5',
      'middot': '\u00B7',
      'minus': '\u2212',
      'Mu': '\u039C',
      'mu': '\u03BC',
      'nabla': '\u2207',
      'nbsp': '\u00A0',
      'ndash': '\u2013',
      'ne': '\u2260',
      'ni': '\u220B',
      'not': '\u00AC',
      'notin': '\u2209',
      'nsub': '\u2284',
      'Ntilde': '\u00D1',
      'ntilde': '\u00F1',
      'Nu': '\u039D',
      'nu': '\u03BD',
      'Oacute': '\u00D3',
      'oacute': '\u00F3',
      'Ocirc': '\u00D4',
      'ocirc': '\u00F4',
      'OElig': '\u0152',
      'oelig': '\u0153',
      'Ograve': '\u00D2',
      'ograve': '\u00F2',
      'oline': '\u203E',
      'Omega': '\u03A9',
      'omega': '\u03C9',
      'Omicron': '\u039F',
      'omicron': '\u03BF',
      'oplus': '\u2295',
      'or': '\u2228',
      'ordf': '\u00AA',
      'ordm': '\u00BA',
      'Oslash': '\u00D8',
      'oslash': '\u00F8',
      'Otilde': '\u00D5',
      'otilde': '\u00F5',
      'otimes': '\u2297',
      'Ouml': '\u00D6',
      'ouml': '\u00F6',
      'para': '\u00B6',
      'permil': '\u2030',
      'perp': '\u22A5',
      'Phi': '\u03A6',
      'phi': '\u03C6',
      'Pi': '\u03A0',
      'pi': '\u03C0',
      'piv': '\u03D6',
      'plusmn': '\u00B1',
      'pound': '\u00A3',
      'prime': '\u2032',
      'Prime': '\u2033',
      'prod': '\u220F',
      'prop': '\u221D',
      'Psi': '\u03A8',
      'psi': '\u03C8',
      'quot': '\u0022',
      'radic': '\u221A',
      'rang': '\u27E9',
      'raquo': '\u00BB',
      'rarr': '\u2192',
      'rArr': '\u21D2',
      'rceil': '\u2309',
      'rdquo': '\u201D',
      'real': '\u211C',
      'reg': '\u00AE',
      'rfloor': '\u230B',
      'Rho': '\u03A1',
      'rho': '\u03C1',
      'rlm': '\u200F',
      'rsaquo': '\u203A',
      'rsquo': '\u2019',
      'sbquo': '\u201A',
      'Scaron': '\u0160',
      'scaron': '\u0161',
      'sdot': '\u22C5',
      'sect': '\u00A7',
      'shy': '\u00AD',
      'Sigma': '\u03A3',
      'sigma': '\u03C3',
      'sigmaf': '\u03C2',
      'sim': '\u223C',
      'spades': '\u2660',
      'sub': '\u2282',
      'sube': '\u2286',
      'sum': '\u2211',
      'sup': '\u2283',
      'sup1': '\u00B9',
      'sup2': '\u00B2',
      'sup3': '\u00B3',
      'supe': '\u2287',
      'szlig': '\u00DF',
      'Tau': '\u03A4',
      'tau': '\u03C4',
      'there4': '\u2234',
      'Theta': '\u0398',
      'theta': '\u03B8',
      'thetasym': '\u03D1',
      'thinsp': '\u2009',
      'THORN': '\u00DE',
      'thorn': '\u00FE',
      'tilde': '\u02DC',
      'times': '\u00D7',
      'trade': '\u2122',
      'Uacute': '\u00DA',
      'uacute': '\u00FA',
      'uarr': '\u2191',
      'uArr': '\u21D1',
      'Ucirc': '\u00DB',
      'ucirc': '\u00FB',
      'Ugrave': '\u00D9',
      'ugrave': '\u00F9',
      'uml': '\u00A8',
      'upsih': '\u03D2',
      'Upsilon': '\u03A5',
      'upsilon': '\u03C5',
      'Uuml': '\u00DC',
      'uuml': '\u00FC',
      'weierp': '\u2118',
      'Xi': '\u039E',
      'xi': '\u03BE',
      'Yacute': '\u00DD',
      'yacute': '\u00FD',
      'yen': '\u00A5',
      'yuml': '\u00FF',
      'Yuml': '\u0178',
      'Zeta': '\u0396',
      'zeta': '\u03B6',
      'zwj': '\u200D',
      'zwnj': '\u200C',
  };

  class HtmlTagDefinition {
      constructor({ closedByChildren, requiredParents, implicitNamespacePrefix, contentType = TagContentType.PARSABLE_DATA, closedByParent = false, isVoid = false, ignoreFirstLf = false } = {}) {
          this.closedByChildren = {};
          this.closedByParent = false;
          this.canSelfClose = false;
          if (closedByChildren && closedByChildren.length > 0) {
              closedByChildren.forEach(tagName => this.closedByChildren[tagName] = true);
          }
          this.isVoid = isVoid;
          this.closedByParent = closedByParent || isVoid;
          if (requiredParents && requiredParents.length > 0) {
              this.requiredParents = {};
              // The first parent is the list is automatically when none of the listed parents are present
              this.parentToAdd = requiredParents[0];
              requiredParents.forEach(tagName => this.requiredParents[tagName] = true);
          }
          this.implicitNamespacePrefix = implicitNamespacePrefix;
          this.contentType = contentType;
          this.ignoreFirstLf = ignoreFirstLf;
      }
      requireExtraParent(currentParent) {
          if (!this.requiredParents) {
              return false;
          }
          if (!currentParent) {
              return true;
          }
          const lcParent = currentParent.toLowerCase();
          const isParentTemplate = lcParent === 'template' || currentParent === 'ng-template';
          return !isParentTemplate && this.requiredParents[lcParent] != true;
      }
      isClosedByChild(name) {
          return this.isVoid || name.toLowerCase() in this.closedByChildren;
      }
  }
  // see http://www.w3.org/TR/html51/syntax.html#optional-tags
  // This implementation does not fully conform to the HTML5 spec.
  const TAG_DEFINITIONS = {
      'base': new HtmlTagDefinition({ isVoid: true }),
      'meta': new HtmlTagDefinition({ isVoid: true }),
      'area': new HtmlTagDefinition({ isVoid: true }),
      'embed': new HtmlTagDefinition({ isVoid: true }),
      'link': new HtmlTagDefinition({ isVoid: true }),
      'img': new HtmlTagDefinition({ isVoid: true }),
      'input': new HtmlTagDefinition({ isVoid: true }),
      'param': new HtmlTagDefinition({ isVoid: true }),
      'hr': new HtmlTagDefinition({ isVoid: true }),
      'br': new HtmlTagDefinition({ isVoid: true }),
      'source': new HtmlTagDefinition({ isVoid: true }),
      'track': new HtmlTagDefinition({ isVoid: true }),
      'wbr': new HtmlTagDefinition({ isVoid: true }),
      'p': new HtmlTagDefinition({
          closedByChildren: [
              'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',
              'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',
              'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'
          ],
          closedByParent: true
      }),
      'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
      'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
      'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
      'tr': new HtmlTagDefinition({
          closedByChildren: ['tr'],
          requiredParents: ['tbody', 'tfoot', 'thead'],
          closedByParent: true
      }),
      'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
      'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
      'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),
      'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
      'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
      'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
      'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
      'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
      'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
      'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
      'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
      'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
      'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
      'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
      'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
      'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
      'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
      'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
      'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),
      'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),
  };
  const _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
  function getHtmlTagDefinition(tagName) {
      return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
  }

  const _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' +
      '([-\\w]+)|' +
      '(?:\\.([-\\w]+))|' +
      // "-" should appear first in the regexp below as FF31 parses "[.-\w]" as a range
      '(?:\\[([-.\\w*]+)(?:=([^\\]]*))?\\])|' +
      '(\\))|' +
      '(\\s*,\\s*)', // ","
  'g');
  /**
   * A css selector contains an element name,
   * css classes and attribute/value pairs with the purpose
   * of selecting subsets out of them.
   */
  class CssSelector {
      constructor() {
          this.element = null;
          this.classNames = [];
          this.attrs = [];
          this.notSelectors = [];
      }
      static parse(selector) {
          const results = [];
          const _addResult = (res, cssSel) => {
              if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&
                  cssSel.attrs.length == 0) {
                  cssSel.element = '*';
              }
              res.push(cssSel);
          };
          let cssSelector = new CssSelector();
          let match;
          let current = cssSelector;
          let inNot = false;
          _SELECTOR_REGEXP.lastIndex = 0;
          while (match = _SELECTOR_REGEXP.exec(selector)) {
              if (match[1]) {
                  if (inNot) {
                      throw new Error('Nesting :not is not allowed in a selector');
                  }
                  inNot = true;
                  current = new CssSelector();
                  cssSelector.notSelectors.push(current);
              }
              if (match[2]) {
                  current.setElement(match[2]);
              }
              if (match[3]) {
                  current.addClassName(match[3]);
              }
              if (match[4]) {
                  current.addAttribute(match[4], match[5]);
              }
              if (match[6]) {
                  inNot = false;
                  current = cssSelector;
              }
              if (match[7]) {
                  if (inNot) {
                      throw new Error('Multiple selectors in :not are not supported');
                  }
                  _addResult(results, cssSelector);
                  cssSelector = current = new CssSelector();
              }
          }
          _addResult(results, cssSelector);
          return results;
      }
      isElementSelector() {
          return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&
              this.notSelectors.length === 0;
      }
      hasElementSelector() { return !!this.element; }
      setElement(element = null) { this.element = element; }
      /** Gets a template string for an element that matches the selector. */
      getMatchingElementTemplate() {
          const tagName = this.element || 'div';
          const classAttr = this.classNames.length > 0 ? ` class="${this.classNames.join(' ')}"` : '';
          let attrs = '';
          for (let i = 0; i < this.attrs.length; i += 2) {
              const attrName = this.attrs[i];
              const attrValue = this.attrs[i + 1] !== '' ? `="${this.attrs[i + 1]}"` : '';
              attrs += ` ${attrName}${attrValue}`;
          }
          return getHtmlTagDefinition(tagName).isVoid ? `<${tagName}${classAttr}${attrs}/>` :
              `<${tagName}${classAttr}${attrs}></${tagName}>`;
      }
      addAttribute(name, value = '') {
          this.attrs.push(name, value && value.toLowerCase() || '');
      }
      addClassName(name) { this.classNames.push(name.toLowerCase()); }
      toString() {
          let res = this.element || '';
          if (this.classNames) {
              this.classNames.forEach(klass => res += `.${klass}`);
          }
          if (this.attrs) {
              for (let i = 0; i < this.attrs.length; i += 2) {
                  const name = this.attrs[i];
                  const value = this.attrs[i + 1];
                  res += `[${name}${value ? '=' + value : ''}]`;
              }
          }
          this.notSelectors.forEach(notSelector => res += `:not(${notSelector})`);
          return res;
      }
  }
  /**
   * Reads a list of CssSelectors and allows to calculate which ones
   * are contained in a given CssSelector.
   */
  class SelectorMatcher {
      constructor() {
          this._elementMap = new Map();
          this._elementPartialMap = new Map();
          this._classMap = new Map();
          this._classPartialMap = new Map();
          this._attrValueMap = new Map();
          this._attrValuePartialMap = new Map();
          this._listContexts = [];
      }
      static createNotMatcher(notSelectors) {
          const notMatcher = new SelectorMatcher();
          notMatcher.addSelectables(notSelectors, null);
          return notMatcher;
      }
      addSelectables(cssSelectors, callbackCtxt) {
          let listContext = null;
          if (cssSelectors.length > 1) {
              listContext = new SelectorListContext(cssSelectors);
              this._listContexts.push(listContext);
          }
          for (let i = 0; i < cssSelectors.length; i++) {
              this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
          }
      }
      /**
       * Add an object that can be found later on by calling `match`.
       * @param cssSelector A css selector
       * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
       */
      _addSelectable(cssSelector, callbackCtxt, listContext) {
          let matcher = this;
          const element = cssSelector.element;
          const classNames = cssSelector.classNames;
          const attrs = cssSelector.attrs;
          const selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
          if (element) {
              const isTerminal = attrs.length === 0 && classNames.length === 0;
              if (isTerminal) {
                  this._addTerminal(matcher._elementMap, element, selectable);
              }
              else {
                  matcher = this._addPartial(matcher._elementPartialMap, element);
              }
          }
          if (classNames) {
              for (let i = 0; i < classNames.length; i++) {
                  const isTerminal = attrs.length === 0 && i === classNames.length - 1;
                  const className = classNames[i];
                  if (isTerminal) {
                      this._addTerminal(matcher._classMap, className, selectable);
                  }
                  else {
                      matcher = this._addPartial(matcher._classPartialMap, className);
                  }
              }
          }
          if (attrs) {
              for (let i = 0; i < attrs.length; i += 2) {
                  const isTerminal = i === attrs.length - 2;
                  const name = attrs[i];
                  const value = attrs[i + 1];
                  if (isTerminal) {
                      const terminalMap = matcher._attrValueMap;
                      let terminalValuesMap = terminalMap.get(name);
                      if (!terminalValuesMap) {
                          terminalValuesMap = new Map();
                          terminalMap.set(name, terminalValuesMap);
                      }
                      this._addTerminal(terminalValuesMap, value, selectable);
                  }
                  else {
                      const partialMap = matcher._attrValuePartialMap;
                      let partialValuesMap = partialMap.get(name);
                      if (!partialValuesMap) {
                          partialValuesMap = new Map();
                          partialMap.set(name, partialValuesMap);
                      }
                      matcher = this._addPartial(partialValuesMap, value);
                  }
              }
          }
      }
      _addTerminal(map, name, selectable) {
          let terminalList = map.get(name);
          if (!terminalList) {
              terminalList = [];
              map.set(name, terminalList);
          }
          terminalList.push(selectable);
      }
      _addPartial(map, name) {
          let matcher = map.get(name);
          if (!matcher) {
              matcher = new SelectorMatcher();
              map.set(name, matcher);
          }
          return matcher;
      }
      /**
       * Find the objects that have been added via `addSelectable`
       * whose css selector is contained in the given css selector.
       * @param cssSelector A css selector
       * @param matchedCallback This callback will be called with the object handed into `addSelectable`
       * @return boolean true if a match was found
      */
      match(cssSelector, matchedCallback) {
          let result = false;
          const element = cssSelector.element;
          const classNames = cssSelector.classNames;
          const attrs = cssSelector.attrs;
          for (let i = 0; i < this._listContexts.length; i++) {
              this._listContexts[i].alreadyMatched = false;
          }
          result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
          result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
              result;
          if (classNames) {
              for (let i = 0; i < classNames.length; i++) {
                  const className = classNames[i];
                  result =
                      this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
                  result =
                      this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
                          result;
              }
          }
          if (attrs) {
              for (let i = 0; i < attrs.length; i += 2) {
                  const name = attrs[i];
                  const value = attrs[i + 1];
                  const terminalValuesMap = this._attrValueMap.get(name);
                  if (value) {
                      result =
                          this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
                  }
                  result =
                      this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
                  const partialValuesMap = this._attrValuePartialMap.get(name);
                  if (value) {
                      result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
                  }
                  result =
                      this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
              }
          }
          return result;
      }
      /** @internal */
      _matchTerminal(map, name, cssSelector, matchedCallback) {
          if (!map || typeof name !== 'string') {
              return false;
          }
          let selectables = map.get(name) || [];
          const starSelectables = map.get('*');
          if (starSelectables) {
              selectables = selectables.concat(starSelectables);
          }
          if (selectables.length === 0) {
              return false;
          }
          let selectable;
          let result = false;
          for (let i = 0; i < selectables.length; i++) {
              selectable = selectables[i];
              result = selectable.finalize(cssSelector, matchedCallback) || result;
          }
          return result;
      }
      /** @internal */
      _matchPartial(map, name, cssSelector, matchedCallback) {
          if (!map || typeof name !== 'string') {
              return false;
          }
          const nestedSelector = map.get(name);
          if (!nestedSelector) {
              return false;
          }
          // TODO(perf): get rid of recursion and measure again
          // TODO(perf): don't pass the whole selector into the recursion,
          // but only the not processed parts
          return nestedSelector.match(cssSelector, matchedCallback);
      }
  }
  class SelectorListContext {
      constructor(selectors) {
          this.selectors = selectors;
          this.alreadyMatched = false;
      }
  }
  // Store context to pass back selector and context when a selector is matched
  class SelectorContext {
      constructor(selector, cbContext, listContext) {
          this.selector = selector;
          this.cbContext = cbContext;
          this.listContext = listContext;
          this.notSelectors = selector.notSelectors;
      }
      finalize(cssSelector, callback) {
          let result = true;
          if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
              const notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
              result = !notMatcher.match(cssSelector, null);
          }
          if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
              if (this.listContext) {
                  this.listContext.alreadyMatched = true;
              }
              callback(this.selector, this.cbContext);
          }
          return result;
      }
  }

  const MODULE_SUFFIX = '';
  const DASH_CASE_REGEXP = /-+([a-z0-9])/g;
  function dashCaseToCamelCase(input) {
      return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());
  }
  function splitAtColon(input, defaultValues) {
      return _splitAt(input, ':', defaultValues);
  }
  function splitAtPeriod(input, defaultValues) {
      return _splitAt(input, '.', defaultValues);
  }
  function _splitAt(input, character, defaultValues) {
      const characterIndex = input.indexOf(character);
      if (characterIndex == -1)
          return defaultValues;
      return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
  }
  function visitValue(value, visitor, context) {
      if (Array.isArray(value)) {
          return visitor.visitArray(value, context);
      }
      if (isStrictStringMap$1(value)) {
          return visitor.visitStringMap(value, context);
      }
      if (value == null || isPrimitive$1(value)) {
          return visitor.visitPrimitive(value, context);
      }
      return visitor.visitOther(value, context);
  }
  class ValueTransformer {
      visitArray(arr, context) {
          return arr.map(value => visitValue(value, this, context));
      }
      visitStringMap(map, context) {
          const result = {};
          Object.keys(map).forEach(key => { result[key] = visitValue(map[key], this, context); });
          return result;
      }
      visitPrimitive(value, context) { return value; }
      visitOther(value, context) { return value; }
  }
  class SyncAsyncResult {
      constructor(syncResult, asyncResult = null) {
          this.syncResult = syncResult;
          this.asyncResult = asyncResult;
          if (!asyncResult) {
              this.asyncResult = Promise.resolve(syncResult);
          }
      }
  }
  function syntaxError(msg) {
      const error = Error(msg);
      error[ERROR_SYNTAX_ERROR] = true;
      return error;
  }
  const ERROR_SYNTAX_ERROR = 'ngSyntaxError';

  // group 0: "[prop] or (event) or @trigger"
  // group 1: "prop" from "[prop]"
  // group 2: "event" from "(event)"
  // group 3: "@trigger" from "@trigger"
  const HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
  class CompileAnimationStateMetadata {
  }
  class CompileAnimationStateDeclarationMetadata extends CompileAnimationStateMetadata {
      constructor(stateNameExpr, styles) {
          super();
          this.stateNameExpr = stateNameExpr;
          this.styles = styles;
      }
  }
  class CompileAnimationMetadata {
  }
  class CompileAnimationKeyframesSequenceMetadata extends CompileAnimationMetadata {
      constructor(steps = []) {
          super();
          this.steps = steps;
      }
  }
  class CompileAnimationStyleMetadata extends CompileAnimationMetadata {
      constructor(offset, styles = null) {
          super();
          this.offset = offset;
          this.styles = styles;
      }
  }
  class CompileAnimationAnimateMetadata extends CompileAnimationMetadata {
      constructor(timings = 0, styles = null) {
          super();
          this.timings = timings;
          this.styles = styles;
      }
  }
  class CompileAnimationWithStepsMetadata extends CompileAnimationMetadata {
      constructor(steps = null) {
          super();
          this.steps = steps;
      }
  }
  class CompileAnimationSequenceMetadata extends CompileAnimationWithStepsMetadata {
      constructor(steps = null) { super(steps); }
  }
  class CompileAnimationGroupMetadata extends CompileAnimationWithStepsMetadata {
      constructor(steps = null) { super(steps); }
  }
  function _sanitizeIdentifier(name) {
      return name.replace(/\W/g, '_');
  }
  let _anonymousTypeIndex = 0;
  function identifierName(compileIdentifier) {
      if (!compileIdentifier || !compileIdentifier.reference) {
          return null;
      }
      const ref = compileIdentifier.reference;
      if (ref instanceof StaticSymbol) {
          return ref.name;
      }
      if (ref['__anonymousType']) {
          return ref['__anonymousType'];
      }
      let identifier = stringify$1(ref);
      if (identifier.indexOf('(') >= 0) {
          // case: anonymous functions!
          identifier = `anonymous_${_anonymousTypeIndex++}`;
          ref['__anonymousType'] = identifier;
      }
      else {
          identifier = _sanitizeIdentifier(identifier);
      }
      return identifier;
  }
  function identifierModuleUrl(compileIdentifier) {
      const ref = compileIdentifier.reference;
      if (ref instanceof StaticSymbol) {
          return ref.filePath;
      }
      return reflector.importUri(ref);
  }
  function viewClassName(compType, embeddedTemplateIndex) {
      return `View_${identifierName({ reference: compType })}_${embeddedTemplateIndex}`;
  }
  function rendererTypeName(compType) {
      return `RenderType_${identifierName({ reference: compType })}`;
  }
  function hostViewClassName(compType) {
      return `HostView_${identifierName({ reference: compType })}`;
  }
  function dirWrapperClassName(dirType) {
      return `Wrapper_${identifierName({ reference: dirType })}`;
  }
  function componentFactoryName(compType) {
      return `${identifierName({ reference: compType })}NgFactory`;
  }
  var CompileSummaryKind;
  (function (CompileSummaryKind) {
      CompileSummaryKind[CompileSummaryKind["Pipe"] = 0] = "Pipe";
      CompileSummaryKind[CompileSummaryKind["Directive"] = 1] = "Directive";
      CompileSummaryKind[CompileSummaryKind["NgModule"] = 2] = "NgModule";
      CompileSummaryKind[CompileSummaryKind["Injectable"] = 3] = "Injectable";
  })(CompileSummaryKind || (CompileSummaryKind = {}));
  function tokenName(token) {
      return isPresent$1(token.value) ? _sanitizeIdentifier(token.value) :
          identifierName(token.identifier);
  }
  function tokenReference(token) {
      if (isPresent$1(token.identifier)) {
          return token.identifier.reference;
      }
      else {
          return token.value;
      }
  }
  /**
   * Metadata about a stylesheet
   */
  class CompileStylesheetMetadata {
      constructor({ moduleUrl, styles, styleUrls } = {}) {
          this.moduleUrl = moduleUrl;
          this.styles = _normalizeArray(styles);
          this.styleUrls = _normalizeArray(styleUrls);
      }
  }
  /**
   * Metadata regarding compilation of a template.
   */
  class CompileTemplateMetadata {
      constructor({ encapsulation, template, templateUrl, styles, styleUrls, externalStylesheets, animations, ngContentSelectors, interpolation } = {}) {
          this.encapsulation = encapsulation;
          this.template = template;
          this.templateUrl = templateUrl;
          this.styles = _normalizeArray(styles);
          this.styleUrls = _normalizeArray(styleUrls);
          this.externalStylesheets = _normalizeArray(externalStylesheets);
          this.animations = animations ? ListWrapper$1.flatten(animations) : [];
          this.ngContentSelectors = ngContentSelectors || [];
          if (interpolation && interpolation.length != 2) {
              throw new Error(`'interpolation' should have a start and an end symbol.`);
          }
          this.interpolation = interpolation;
      }
      toSummary() {
          return {
              animations: this.animations.map(anim => anim.name),
              ngContentSelectors: this.ngContentSelectors,
              encapsulation: this.encapsulation,
          };
      }
  }
  /**
   * Metadata regarding compilation of a directive.
   */
  class CompileDirectiveMetadata {
      static create({ isHost, type, isComponent, selector, exportAs, changeDetection, inputs, outputs, host, providers, viewProviders, queries, viewQueries, entryComponents, template, wrapperType, componentViewType, rendererType, componentFactory } = {}) {
          const hostListeners = {};
          const hostProperties = {};
          const hostAttributes = {};
          if (isPresent$1(host)) {
              Object.keys(host).forEach(key => {
                  const value = host[key];
                  const matches = key.match(HOST_REG_EXP);
                  if (matches === null) {
                      hostAttributes[key] = value;
                  }
                  else if (isPresent$1(matches[1])) {
                      hostProperties[matches[1]] = value;
                  }
                  else if (isPresent$1(matches[2])) {
                      hostListeners[matches[2]] = value;
                  }
              });
          }
          const inputsMap = {};
          if (isPresent$1(inputs)) {
              inputs.forEach((bindConfig) => {
                  // canonical syntax: `dirProp: elProp`
                  // if there is no `:`, use dirProp = elProp
                  const parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
                  inputsMap[parts[0]] = parts[1];
              });
          }
          const outputsMap = {};
          if (isPresent$1(outputs)) {
              outputs.forEach((bindConfig) => {
                  // canonical syntax: `dirProp: elProp`
                  // if there is no `:`, use dirProp = elProp
                  const parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
                  outputsMap[parts[0]] = parts[1];
              });
          }
          return new CompileDirectiveMetadata({
              isHost,
              type,
              isComponent: !!isComponent, selector, exportAs, changeDetection,
              inputs: inputsMap,
              outputs: outputsMap,
              hostListeners,
              hostProperties,
              hostAttributes,
              providers,
              viewProviders,
              queries,
              viewQueries,
              entryComponents,
              template,
              wrapperType,
              componentViewType,
              rendererType,
              componentFactory,
          });
      }
      constructor({ isHost, type, isComponent, selector, exportAs, changeDetection, inputs, outputs, hostListeners, hostProperties, hostAttributes, providers, viewProviders, queries, viewQueries, entryComponents, template, wrapperType, componentViewType, rendererType, componentFactory } = {}) {
          this.isHost = !!isHost;
          this.type = type;
          this.isComponent = isComponent;
          this.selector = selector;
          this.exportAs = exportAs;
          this.changeDetection = changeDetection;
          this.inputs = inputs;
          this.outputs = outputs;
          this.hostListeners = hostListeners;
          this.hostProperties = hostProperties;
          this.hostAttributes = hostAttributes;
          this.providers = _normalizeArray(providers);
          this.viewProviders = _normalizeArray(viewProviders);
          this.queries = _normalizeArray(queries);
          this.viewQueries = _normalizeArray(viewQueries);
          this.entryComponents = _normalizeArray(entryComponents);
          this.template = template;
          this.wrapperType = wrapperType;
          this.componentViewType = componentViewType;
          this.rendererType = rendererType;
          this.componentFactory = componentFactory;
      }
      toSummary() {
          return {
              summaryKind: CompileSummaryKind.Directive,
              type: this.type,
              isComponent: this.isComponent,
              selector: this.selector,
              exportAs: this.exportAs,
              inputs: this.inputs,
              outputs: this.outputs,
              hostListeners: this.hostListeners,
              hostProperties: this.hostProperties,
              hostAttributes: this.hostAttributes,
              providers: this.providers,
              viewProviders: this.viewProviders,
              queries: this.queries,
              viewQueries: this.viewQueries,
              entryComponents: this.entryComponents,
              changeDetection: this.changeDetection,
              template: this.template && this.template.toSummary(),
              wrapperType: this.wrapperType,
              componentViewType: this.componentViewType,
              rendererType: this.rendererType,
              componentFactory: this.componentFactory
          };
      }
  }
  /**
   * Construct {@link CompileDirectiveMetadata} from {@link ComponentTypeMetadata} and a selector.
   */
  function createHostComponentMeta(hostTypeReference, compMeta, hostViewType) {
      const template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
      return CompileDirectiveMetadata.create({
          isHost: true,
          type: { reference: hostTypeReference, diDeps: [], lifecycleHooks: [] },
          template: new CompileTemplateMetadata({
              encapsulation: ViewEncapsulation.None,
              template: template,
              templateUrl: '',
              styles: [],
              styleUrls: [],
              ngContentSelectors: [],
              animations: []
          }),
          changeDetection: ChangeDetectionStrategy.Default,
          inputs: [],
          outputs: [],
          host: {},
          isComponent: true,
          selector: '*',
          providers: [],
          viewProviders: [],
          queries: [],
          viewQueries: [],
          componentViewType: hostViewType,
          rendererType: { id: '__Host__', encapsulation: ViewEncapsulation.None, styles: [], data: {} }
      });
  }
  class CompilePipeMetadata {
      constructor({ type, name, pure } = {}) {
          this.type = type;
          this.name = name;
          this.pure = !!pure;
      }
      toSummary() {
          return {
              summaryKind: CompileSummaryKind.Pipe,
              type: this.type,
              name: this.name,
              pure: this.pure
          };
      }
  }
  /**
   * Metadata regarding compilation of a module.
   */
  class CompileNgModuleMetadata {
      constructor({ type, providers, declaredDirectives, exportedDirectives, declaredPipes, exportedPipes, entryComponents, bootstrapComponents, importedModules, exportedModules, schemas, transitiveModule, id } = {}) {
          this.type = type;
          this.declaredDirectives = _normalizeArray(declaredDirectives);
          this.exportedDirectives = _normalizeArray(exportedDirectives);
          this.declaredPipes = _normalizeArray(declaredPipes);
          this.exportedPipes = _normalizeArray(exportedPipes);
          this.providers = _normalizeArray(providers);
          this.entryComponents = _normalizeArray(entryComponents);
          this.bootstrapComponents = _normalizeArray(bootstrapComponents);
          this.importedModules = _normalizeArray(importedModules);
          this.exportedModules = _normalizeArray(exportedModules);
          this.schemas = _normalizeArray(schemas);
          this.id = id;
          this.transitiveModule = transitiveModule;
      }
      toSummary() {
          return {
              summaryKind: CompileSummaryKind.NgModule,
              type: this.type,
              entryComponents: this.transitiveModule.entryComponents,
              providers: this.transitiveModule.providers,
              modules: this.transitiveModule.modules,
              exportedDirectives: this.transitiveModule.exportedDirectives,
              exportedPipes: this.transitiveModule.exportedPipes
          };
      }
  }
  class TransitiveCompileNgModuleMetadata {
      constructor() {
          this.directivesSet = new Set();
          this.directives = [];
          this.exportedDirectivesSet = new Set();
          this.exportedDirectives = [];
          this.pipesSet = new Set();
          this.pipes = [];
          this.exportedPipesSet = new Set();
          this.exportedPipes = [];
          this.modulesSet = new Set();
          this.modules = [];
          this.entryComponentsSet = new Set();
          this.entryComponents = [];
          this.providers = [];
      }
      addProvider(provider, module) {
          this.providers.push({ provider: provider, module: module });
      }
      addDirective(id) {
          if (!this.directivesSet.has(id.reference)) {
              this.directivesSet.add(id.reference);
              this.directives.push(id);
          }
      }
      addExportedDirective(id) {
          if (!this.exportedDirectivesSet.has(id.reference)) {
              this.exportedDirectivesSet.add(id.reference);
              this.exportedDirectives.push(id);
          }
      }
      addPipe(id) {
          if (!this.pipesSet.has(id.reference)) {
              this.pipesSet.add(id.reference);
              this.pipes.push(id);
          }
      }
      addExportedPipe(id) {
          if (!this.exportedPipesSet.has(id.reference)) {
              this.exportedPipesSet.add(id.reference);
              this.exportedPipes.push(id);
          }
      }
      addModule(id) {
          if (!this.modulesSet.has(id.reference)) {
              this.modulesSet.add(id.reference);
              this.modules.push(id);
          }
      }
      addEntryComponent(ec) {
          if (!this.entryComponentsSet.has(ec.componentType)) {
              this.entryComponentsSet.add(ec.componentType);
              this.entryComponents.push(ec);
          }
      }
  }
  function _normalizeArray(obj) {
      return obj || [];
  }
  class ProviderMeta {
      constructor(token, { useClass, useValue, useExisting, useFactory, deps, multi }) {
          this.token = token;
          this.useClass = useClass;
          this.useValue = useValue;
          this.useExisting = useExisting;
          this.useFactory = useFactory;
          this.dependencies = deps;
          this.multi = !!multi;
      }
  }

  const CORE = assetUrl('core');
  const VIEW_UTILS_MODULE_URL = assetUrl('core', 'linker/view_utils');
  class Identifiers {
  }
  Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
      name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
      moduleUrl: CORE,
      runtime: ANALYZE_FOR_ENTRY_COMPONENTS
  };
  Identifiers.ViewUtils = { name: 'ɵViewUtils', moduleUrl: CORE, runtime: ɵViewUtils };
  Identifiers.AppView = { name: 'ɵAppView', moduleUrl: CORE, runtime: ɵAppView };
  Identifiers.DebugAppView = { name: 'ɵDebugAppView', moduleUrl: CORE, runtime: ɵDebugAppView };
  Identifiers.ViewContainer = { name: 'ɵViewContainer', moduleUrl: CORE, runtime: ɵViewContainer };
  Identifiers.ElementRef = { name: 'ElementRef', moduleUrl: CORE, runtime: ElementRef };
  Identifiers.ViewContainerRef = { name: 'ViewContainerRef', moduleUrl: CORE, runtime: ViewContainerRef };
  Identifiers.ChangeDetectorRef = { name: 'ChangeDetectorRef', moduleUrl: CORE, runtime: ChangeDetectorRef };
  Identifiers.RenderComponentType = { name: 'RenderComponentType', moduleUrl: CORE, runtime: RenderComponentType };
  Identifiers.QueryList = { name: 'QueryList', moduleUrl: CORE, runtime: QueryList };
  Identifiers.TemplateRef = { name: 'TemplateRef', moduleUrl: CORE, runtime: TemplateRef };
  Identifiers.TemplateRef_ = { name: 'ɵTemplateRef_', moduleUrl: CORE, runtime: ɵTemplateRef_ };
  Identifiers.CodegenComponentFactoryResolver = {
      name: 'ɵCodegenComponentFactoryResolver',
      moduleUrl: CORE,
      runtime: ɵCodegenComponentFactoryResolver
  };
  Identifiers.ComponentFactoryResolver = {
      name: 'ComponentFactoryResolver',
      moduleUrl: CORE,
      runtime: ComponentFactoryResolver
  };
  Identifiers.ComponentFactory = { name: 'ComponentFactory', moduleUrl: CORE, runtime: ComponentFactory };
  Identifiers.ComponentRef_ = {
      name: 'ɵComponentRef_',
      moduleUrl: CORE,
      runtime: ɵComponentRef_,
  };
  Identifiers.ComponentRef = { name: 'ComponentRef', moduleUrl: CORE, runtime: ComponentRef };
  Identifiers.NgModuleFactory = { name: 'NgModuleFactory', moduleUrl: CORE, runtime: NgModuleFactory };
  Identifiers.NgModuleInjector = {
      name: 'ɵNgModuleInjector',
      moduleUrl: CORE,
      runtime: ɵNgModuleInjector,
  };
  Identifiers.RegisterModuleFactoryFn = {
      name: 'ɵregisterModuleFactory',
      moduleUrl: CORE,
      runtime: ɵregisterModuleFactory,
  };
  Identifiers.ValueUnwrapper = { name: 'ɵValueUnwrapper', moduleUrl: CORE, runtime: ɵValueUnwrapper };
  Identifiers.Injector = { name: 'Injector', moduleUrl: CORE, runtime: Injector };
  Identifiers.ViewEncapsulation = { name: 'ViewEncapsulation', moduleUrl: CORE, runtime: ViewEncapsulation };
  Identifiers.ViewType = { name: 'ɵViewType', moduleUrl: CORE, runtime: ViewType };
  Identifiers.ChangeDetectionStrategy = {
      name: 'ChangeDetectionStrategy',
      moduleUrl: CORE,
      runtime: ChangeDetectionStrategy
  };
  Identifiers.StaticNodeDebugInfo = {
      name: 'ɵStaticNodeDebugInfo',
      moduleUrl: CORE,
      runtime: ɵStaticNodeDebugInfo
  };
  Identifiers.DebugContext = { name: 'ɵDebugContext', moduleUrl: CORE, runtime: ɵDebugContext };
  Identifiers.Renderer = { name: 'Renderer', moduleUrl: CORE, runtime: Renderer };
  Identifiers.SimpleChange = { name: 'SimpleChange', moduleUrl: CORE, runtime: SimpleChange };
  Identifiers.ChangeDetectorStatus = {
      name: 'ɵChangeDetectorStatus',
      moduleUrl: CORE,
      runtime: ChangeDetectorStatus
  };
  Identifiers.checkBinding = { name: 'ɵcheckBinding', moduleUrl: CORE, runtime: ɵcheckBinding };
  Identifiers.checkBindingChange = { name: 'ɵcheckBindingChange', moduleUrl: CORE, runtime: ɵcheckBindingChange };
  Identifiers.checkRenderText = { name: 'ɵcheckRenderText', moduleUrl: CORE, runtime: ɵcheckRenderText };
  Identifiers.checkRenderProperty = {
      name: 'ɵcheckRenderProperty',
      moduleUrl: CORE,
      runtime: ɵcheckRenderProperty
  };
  Identifiers.checkRenderAttribute = {
      name: 'ɵcheckRenderAttribute',
      moduleUrl: CORE,
      runtime: ɵcheckRenderAttribute
  };
  Identifiers.checkRenderClass = { name: 'ɵcheckRenderClass', moduleUrl: CORE, runtime: ɵcheckRenderClass };
  Identifiers.checkRenderStyle = { name: 'ɵcheckRenderStyle', moduleUrl: CORE, runtime: ɵcheckRenderStyle };
  Identifiers.devModeEqual = { name: 'ɵdevModeEqual', moduleUrl: CORE, runtime: ɵdevModeEqual };
  Identifiers.inlineInterpolate = { name: 'ɵinlineInterpolate', moduleUrl: CORE, runtime: ɵinlineInterpolate };
  Identifiers.interpolate = { name: 'ɵinterpolate', moduleUrl: CORE, runtime: ɵinterpolate };
  Identifiers.castByValue = { name: 'ɵcastByValue', moduleUrl: CORE, runtime: ɵcastByValue };
  Identifiers.EMPTY_ARRAY = { name: 'ɵEMPTY_ARRAY', moduleUrl: CORE, runtime: ɵEMPTY_ARRAY };
  Identifiers.EMPTY_MAP = { name: 'ɵEMPTY_MAP', moduleUrl: CORE, runtime: ɵEMPTY_MAP };
  Identifiers.createRenderElement = {
      name: 'ɵcreateRenderElement',
      moduleUrl: CORE,
      runtime: ɵcreateRenderElement
  };
  Identifiers.selectOrCreateRenderHostElement = {
      name: 'ɵselectOrCreateRenderHostElement',
      moduleUrl: CORE,
      runtime: ɵselectOrCreateRenderHostElement
  };
  Identifiers.pureProxies = [
      null,
      { name: 'ɵpureProxy1', moduleUrl: CORE, runtime: ɵpureProxy1 },
      { name: 'ɵpureProxy2', moduleUrl: CORE, runtime: ɵpureProxy2 },
      { name: 'ɵpureProxy3', moduleUrl: CORE, runtime: ɵpureProxy3 },
      { name: 'ɵpureProxy4', moduleUrl: CORE, runtime: ɵpureProxy4 },
      { name: 'ɵpureProxy5', moduleUrl: CORE, runtime: ɵpureProxy5 },
      { name: 'ɵpureProxy6', moduleUrl: CORE, runtime: ɵpureProxy6 },
      { name: 'ɵpureProxy7', moduleUrl: CORE, runtime: ɵpureProxy7 },
      { name: 'ɵpureProxy8', moduleUrl: CORE, runtime: ɵpureProxy8 },
      { name: 'ɵpureProxy9', moduleUrl: CORE, runtime: ɵpureProxy9 },
      { name: 'ɵpureProxy10', moduleUrl: CORE, runtime: ɵpureProxy10 },
  ];
  Identifiers.SecurityContext = {
      name: 'SecurityContext',
      moduleUrl: CORE,
      runtime: SecurityContext,
  };
  Identifiers.AnimationKeyframe = { name: 'ɵAnimationKeyframe', moduleUrl: CORE, runtime: ɵAnimationKeyframe };
  Identifiers.AnimationStyles = { name: 'ɵAnimationStyles', moduleUrl: CORE, runtime: ɵAnimationStyles };
  Identifiers.NoOpAnimationPlayer = {
      name: 'ɵNoOpAnimationPlayer',
      moduleUrl: CORE,
      runtime: ɵNoOpAnimationPlayer
  };
  Identifiers.AnimationGroupPlayer = {
      name: 'ɵAnimationGroupPlayer',
      moduleUrl: CORE,
      runtime: ɵAnimationGroupPlayer
  };
  Identifiers.AnimationSequencePlayer = {
      name: 'ɵAnimationSequencePlayer',
      moduleUrl: CORE,
      runtime: ɵAnimationSequencePlayer
  };
  Identifiers.prepareFinalAnimationStyles = {
      name: 'ɵprepareFinalAnimationStyles',
      moduleUrl: CORE,
      runtime: ɵprepareFinalAnimationStyles
  };
  Identifiers.balanceAnimationKeyframes = {
      name: 'ɵbalanceAnimationKeyframes',
      moduleUrl: CORE,
      runtime: ɵbalanceAnimationKeyframes
  };
  Identifiers.clearStyles = { name: 'ɵclearStyles', moduleUrl: CORE, runtime: ɵclearStyles };
  Identifiers.renderStyles = { name: 'ɵrenderStyles', moduleUrl: CORE, runtime: ɵrenderStyles };
  Identifiers.collectAndResolveStyles = {
      name: 'ɵcollectAndResolveStyles',
      moduleUrl: CORE,
      runtime: ɵcollectAndResolveStyles
  };
  Identifiers.LOCALE_ID = { name: 'LOCALE_ID', moduleUrl: CORE, runtime: LOCALE_ID };
  Identifiers.TRANSLATIONS_FORMAT = { name: 'TRANSLATIONS_FORMAT', moduleUrl: CORE, runtime: TRANSLATIONS_FORMAT };
  Identifiers.setBindingDebugInfo = {
      name: 'ɵsetBindingDebugInfo',
      moduleUrl: CORE,
      runtime: ɵsetBindingDebugInfo
  };
  Identifiers.setBindingDebugInfoForChanges = {
      name: 'ɵsetBindingDebugInfoForChanges',
      moduleUrl: CORE,
      runtime: ɵsetBindingDebugInfoForChanges
  };
  Identifiers.AnimationTransition = {
      name: 'ɵAnimationTransition',
      moduleUrl: CORE,
      runtime: ɵAnimationTransition
  };
  // This is just the interface!
  Identifiers.InlineArray = { name: 'InlineArray', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: null };
  Identifiers.inlineArrays = [
      { name: 'ɵInlineArray2', moduleUrl: CORE, runtime: ɵInlineArray2 },
      { name: 'ɵInlineArray2', moduleUrl: CORE, runtime: ɵInlineArray2 },
      { name: 'ɵInlineArray4', moduleUrl: CORE, runtime: ɵInlineArray4 },
      { name: 'ɵInlineArray8', moduleUrl: CORE, runtime: ɵInlineArray8 },
      { name: 'ɵInlineArray16', moduleUrl: CORE, runtime: ɵInlineArray16 },
  ];
  Identifiers.EMPTY_INLINE_ARRAY = { name: 'ɵEMPTY_INLINE_ARRAY', moduleUrl: CORE, runtime: ɵEMPTY_INLINE_ARRAY };
  Identifiers.InlineArrayDynamic = { name: 'ɵInlineArrayDynamic', moduleUrl: CORE, runtime: ɵInlineArrayDynamic };
  Identifiers.subscribeToRenderElement = {
      name: 'ɵsubscribeToRenderElement',
      moduleUrl: CORE,
      runtime: ɵsubscribeToRenderElement
  };
  Identifiers.createRenderComponentType = {
      name: 'ɵcreateRenderComponentType',
      moduleUrl: CORE,
      runtime: ɵcreateRenderComponentType
  };
  Identifiers.noop = { name: 'ɵnoop', moduleUrl: CORE, runtime: ɵnoop };
  Identifiers.viewDef = { name: 'ɵviewDef', moduleUrl: CORE, runtime: ɵviewDef };
  Identifiers.elementDef = { name: 'ɵelementDef', moduleUrl: CORE, runtime: ɵelementDef };
  Identifiers.anchorDef = { name: 'ɵanchorDef', moduleUrl: CORE, runtime: ɵanchorDef };
  Identifiers.textDef = { name: 'ɵtextDef', moduleUrl: CORE, runtime: ɵtextDef };
  Identifiers.directiveDef = { name: 'ɵdirectiveDef', moduleUrl: CORE, runtime: ɵdirectiveDef };
  Identifiers.providerDef = { name: 'ɵproviderDef', moduleUrl: CORE, runtime: ɵproviderDef };
  Identifiers.queryDef = { name: 'ɵqueryDef', moduleUrl: CORE, runtime: ɵqueryDef };
  Identifiers.pureArrayDef = { name: 'ɵpureArrayDef', moduleUrl: CORE, runtime: ɵpureArrayDef };
  Identifiers.pureObjectDef = { name: 'ɵpureObjectDef', moduleUrl: CORE, runtime: ɵpureObjectDef };
  Identifiers.purePipeDef = { name: 'ɵpurePipeDef', moduleUrl: CORE, runtime: ɵpurePipeDef };
  Identifiers.pipeDef = { name: 'ɵpipeDef', moduleUrl: CORE, runtime: ɵpipeDef };
  Identifiers.nodeValue = { name: 'ɵnodeValue', moduleUrl: CORE, runtime: ɵnodeValue };
  Identifiers.ngContentDef = { name: 'ɵngContentDef', moduleUrl: CORE, runtime: ɵngContentDef };
  Identifiers.unwrapValue = { name: 'ɵunwrapValue', moduleUrl: CORE, runtime: ɵunwrapValue };
  Identifiers.createRendererTypeV2 = {
      name: 'ɵcreateRendererTypeV2',
      moduleUrl: CORE,
      runtime: ɵcreateRendererTypeV2
  };
  Identifiers.RendererTypeV2 = {
      name: 'RendererTypeV2',
      moduleUrl: CORE,
      // type only
      runtime: null
  };
  Identifiers.ViewDefinition = {
      name: 'ɵViewDefinition',
      moduleUrl: CORE,
      // type only
      runtime: null
  };
  Identifiers.createComponentFactory = {
      name: 'ɵcreateComponentFactory',
      moduleUrl: CORE,
      runtime: createComponentFactory
  };
  function assetUrl(pkg, path = null, type = 'src') {
      if (path == null) {
          return `@angular/${pkg}`;
      }
      else {
          return `@angular/${pkg}/${type}/${path}`;
      }
  }
  function resolveIdentifier(identifier) {
      let name = identifier.name;
      return reflector.resolveIdentifier(name, identifier.moduleUrl, null, identifier.runtime);
  }
  function createIdentifier(identifier) {
      return { reference: resolveIdentifier(identifier) };
  }
  function identifierToken(identifier) {
      return { identifier: identifier };
  }
  function createIdentifierToken(identifier) {
      return identifierToken(createIdentifier(identifier));
  }
  function createEnumIdentifier(enumType, name) {
      const resolvedEnum = reflector.resolveEnum(resolveIdentifier(enumType), name);
      return { reference: resolvedEnum };
  }

  /**
   * Temporal switch for the compiler to use the new view engine,
   * until it is fully integrated.
   *
   * Only works in Jit for now.
   */
  const USE_VIEW_ENGINE = new InjectionToken('UseViewEngine');
  class CompilerConfig {
      constructor({ renderTypes = new DefaultRenderTypes(), defaultEncapsulation = ViewEncapsulation.Emulated, genDebugInfo, logBindingUpdate, useJit = true, missingTranslation, useViewEngine, enableLegacyTemplate } = {}) {
          this.renderTypes = renderTypes;
          this.defaultEncapsulation = defaultEncapsulation;
          this._genDebugInfo = genDebugInfo;
          this._logBindingUpdate = logBindingUpdate;
          this.useJit = useJit;
          this.missingTranslation = missingTranslation;
          this.useViewEngine = true;
          this.enableLegacyTemplate = enableLegacyTemplate !== false;
      }
      get genDebugInfo() {
          return this._genDebugInfo === void 0 ? isDevMode() : this._genDebugInfo;
      }
      get logBindingUpdate() {
          return this._logBindingUpdate === void 0 ? isDevMode() : this._logBindingUpdate;
      }
  }
  class DefaultRenderTypes {
      constructor() {
          this.renderText = null;
          this.renderElement = null;
          this.renderComment = null;
          this.renderNode = null;
          this.renderEvent = null;
      }
      get renderer() { return createIdentifier(Identifiers.Renderer); }
      ;
  }

  class ParserError {
      constructor(message, input, errLocation, ctxLocation) {
          this.input = input;
          this.errLocation = errLocation;
          this.ctxLocation = ctxLocation;
          this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;
      }
  }
  class ParseSpan {
      constructor(start, end) {
          this.start = start;
          this.end = end;
      }
  }
  class AST {
      constructor(span) {
          this.span = span;
      }
      visit(visitor, context = null) { return null; }
      toString() { return 'AST'; }
  }
  /**
   * Represents a quoted expression of the form:
   *
   * quote = prefix `:` uninterpretedExpression
   * prefix = identifier
   * uninterpretedExpression = arbitrary string
   *
   * A quoted expression is meant to be pre-processed by an AST transformer that
   * converts it into another AST that no longer contains quoted expressions.
   * It is meant to allow third-party developers to extend Angular template
   * expression language. The `uninterpretedExpression` part of the quote is
   * therefore not interpreted by the Angular's own expression parser.
   */
  class Quote extends AST {
      constructor(span, prefix, uninterpretedExpression, location) {
          super(span);
          this.prefix = prefix;
          this.uninterpretedExpression = uninterpretedExpression;
          this.location = location;
      }
      visit(visitor, context = null) { return visitor.visitQuote(this, context); }
      toString() { return 'Quote'; }
  }
  class EmptyExpr extends AST {
      visit(visitor, context = null) {
          // do nothing
      }
  }
  class ImplicitReceiver extends AST {
      visit(visitor, context = null) {
          return visitor.visitImplicitReceiver(this, context);
      }
  }
  /**
   * Multiple expressions separated by a semicolon.
   */
  class Chain extends AST {
      constructor(span, expressions) {
          super(span);
          this.expressions = expressions;
      }
      visit(visitor, context = null) { return visitor.visitChain(this, context); }
  }
  class Conditional extends AST {
      constructor(span, condition, trueExp, falseExp) {
          super(span);
          this.condition = condition;
          this.trueExp = trueExp;
          this.falseExp = falseExp;
      }
      visit(visitor, context = null) {
          return visitor.visitConditional(this, context);
      }
  }
  class PropertyRead extends AST {
      constructor(span, receiver, name) {
          super(span);
          this.receiver = receiver;
          this.name = name;
      }
      visit(visitor, context = null) {
          return visitor.visitPropertyRead(this, context);
      }
  }
  class PropertyWrite extends AST {
      constructor(span, receiver, name, value) {
          super(span);
          this.receiver = receiver;
          this.name = name;
          this.value = value;
      }
      visit(visitor, context = null) {
          return visitor.visitPropertyWrite(this, context);
      }
  }
  class SafePropertyRead extends AST {
      constructor(span, receiver, name) {
          super(span);
          this.receiver = receiver;
          this.name = name;
      }
      visit(visitor, context = null) {
          return visitor.visitSafePropertyRead(this, context);
      }
  }
  class KeyedRead extends AST {
      constructor(span, obj, key) {
          super(span);
          this.obj = obj;
          this.key = key;
      }
      visit(visitor, context = null) {
          return visitor.visitKeyedRead(this, context);
      }
  }
  class KeyedWrite extends AST {
      constructor(span, obj, key, value) {
          super(span);
          this.obj = obj;
          this.key = key;
          this.value = value;
      }
      visit(visitor, context = null) {
          return visitor.visitKeyedWrite(this, context);
      }
  }
  class BindingPipe extends AST {
      constructor(span, exp, name, args) {
          super(span);
          this.exp = exp;
          this.name = name;
          this.args = args;
      }
      visit(visitor, context = null) { return visitor.visitPipe(this, context); }
  }
  class LiteralPrimitive extends AST {
      constructor(span, value) {
          super(span);
          this.value = value;
      }
      visit(visitor, context = null) {
          return visitor.visitLiteralPrimitive(this, context);
      }
  }
  class LiteralArray extends AST {
      constructor(span, expressions) {
          super(span);
          this.expressions = expressions;
      }
      visit(visitor, context = null) {
          return visitor.visitLiteralArray(this, context);
      }
  }
  class LiteralMap extends AST {
      constructor(span, keys, values) {
          super(span);
          this.keys = keys;
          this.values = values;
      }
      visit(visitor, context = null) {
          return visitor.visitLiteralMap(this, context);
      }
  }
  class Interpolation extends AST {
      constructor(span, strings, expressions) {
          super(span);
          this.strings = strings;
          this.expressions = expressions;
      }
      visit(visitor, context = null) {
          return visitor.visitInterpolation(this, context);
      }
  }
  class Binary extends AST {
      constructor(span, operation, left, right) {
          super(span);
          this.operation = operation;
          this.left = left;
          this.right = right;
      }
      visit(visitor, context = null) {
          return visitor.visitBinary(this, context);
      }
  }
  class PrefixNot extends AST {
      constructor(span, expression) {
          super(span);
          this.expression = expression;
      }
      visit(visitor, context = null) {
          return visitor.visitPrefixNot(this, context);
      }
  }
  class MethodCall extends AST {
      constructor(span, receiver, name, args) {
          super(span);
          this.receiver = receiver;
          this.name = name;
          this.args = args;
      }
      visit(visitor, context = null) {
          return visitor.visitMethodCall(this, context);
      }
  }
  class SafeMethodCall extends AST {
      constructor(span, receiver, name, args) {
          super(span);
          this.receiver = receiver;
          this.name = name;
          this.args = args;
      }
      visit(visitor, context = null) {
          return visitor.visitSafeMethodCall(this, context);
      }
  }
  class FunctionCall extends AST {
      constructor(span, target, args) {
          super(span);
          this.target = target;
          this.args = args;
      }
      visit(visitor, context = null) {
          return visitor.visitFunctionCall(this, context);
      }
  }
  class ASTWithSource extends AST {
      constructor(ast, source, location, errors) {
          super(new ParseSpan(0, isBlank$1(source) ? 0 : source.length));
          this.ast = ast;
          this.source = source;
          this.location = location;
          this.errors = errors;
      }
      visit(visitor, context = null) { return this.ast.visit(visitor, context); }
      toString() { return `${this.source} in ${this.location}`; }
  }
  class TemplateBinding {
      constructor(span, key, keyIsVar, name, expression) {
          this.span = span;
          this.key = key;
          this.keyIsVar = keyIsVar;
          this.name = name;
          this.expression = expression;
      }
  }
  class RecursiveAstVisitor {
      visitBinary(ast, context) {
          ast.left.visit(this);
          ast.right.visit(this);
          return null;
      }
      visitChain(ast, context) { return this.visitAll(ast.expressions, context); }
      visitConditional(ast, context) {
          ast.condition.visit(this);
          ast.trueExp.visit(this);
          ast.falseExp.visit(this);
          return null;
      }
      visitPipe(ast, context) {
          ast.exp.visit(this);
          this.visitAll(ast.args, context);
          return null;
      }
      visitFunctionCall(ast, context) {
          ast.target.visit(this);
          this.visitAll(ast.args, context);
          return null;
      }
      visitImplicitReceiver(ast, context) { return null; }
      visitInterpolation(ast, context) {
          return this.visitAll(ast.expressions, context);
      }
      visitKeyedRead(ast, context) {
          ast.obj.visit(this);
          ast.key.visit(this);
          return null;
      }
      visitKeyedWrite(ast, context) {
          ast.obj.visit(this);
          ast.key.visit(this);
          ast.value.visit(this);
          return null;
      }
      visitLiteralArray(ast, context) {
          return this.visitAll(ast.expressions, context);
      }
      visitLiteralMap(ast, context) { return this.visitAll(ast.values, context); }
      visitLiteralPrimitive(ast, context) { return null; }
      visitMethodCall(ast, context) {
          ast.receiver.visit(this);
          return this.visitAll(ast.args, context);
      }
      visitPrefixNot(ast, context) {
          ast.expression.visit(this);
          return null;
      }
      visitPropertyRead(ast, context) {
          ast.receiver.visit(this);
          return null;
      }
      visitPropertyWrite(ast, context) {
          ast.receiver.visit(this);
          ast.value.visit(this);
          return null;
      }
      visitSafePropertyRead(ast, context) {
          ast.receiver.visit(this);
          return null;
      }
      visitSafeMethodCall(ast, context) {
          ast.receiver.visit(this);
          return this.visitAll(ast.args, context);
      }
      visitAll(asts, context) {
          asts.forEach(ast => ast.visit(this, context));
          return null;
      }
      visitQuote(ast, context) { return null; }
  }
  class AstTransformer {
      visitImplicitReceiver(ast, context) { return ast; }
      visitInterpolation(ast, context) {
          return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));
      }
      visitLiteralPrimitive(ast, context) {
          return new LiteralPrimitive(ast.span, ast.value);
      }
      visitPropertyRead(ast, context) {
          return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);
      }
      visitPropertyWrite(ast, context) {
          return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value);
      }
      visitSafePropertyRead(ast, context) {
          return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);
      }
      visitMethodCall(ast, context) {
          return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
      }
      visitSafeMethodCall(ast, context) {
          return new SafeMethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
      }
      visitFunctionCall(ast, context) {
          return new FunctionCall(ast.span, ast.target.visit(this), this.visitAll(ast.args));
      }
      visitLiteralArray(ast, context) {
          return new LiteralArray(ast.span, this.visitAll(ast.expressions));
      }
      visitLiteralMap(ast, context) {
          return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));
      }
      visitBinary(ast, context) {
          return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));
      }
      visitPrefixNot(ast, context) {
          return new PrefixNot(ast.span, ast.expression.visit(this));
      }
      visitConditional(ast, context) {
          return new Conditional(ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
      }
      visitPipe(ast, context) {
          return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));
      }
      visitKeyedRead(ast, context) {
          return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));
      }
      visitKeyedWrite(ast, context) {
          return new KeyedWrite(ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
      }
      visitAll(asts) {
          const res = new Array(asts.length);
          for (let i = 0; i < asts.length; ++i) {
              res[i] = asts[i].visit(this);
          }
          return res;
      }
      visitChain(ast, context) {
          return new Chain(ast.span, this.visitAll(ast.expressions));
      }
      visitQuote(ast, context) {
          return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);
      }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ const $EOF = 0;
  const $TAB = 9;
  const $LF = 10;
  const $VTAB = 11;
  const $FF = 12;
  const $CR = 13;
  const $SPACE = 32;
  const $BANG = 33;
  const $DQ = 34;
  const $HASH = 35;
  const $$ = 36;
  const $PERCENT = 37;
  const $AMPERSAND = 38;
  const $SQ = 39;
  const $LPAREN = 40;
  const $RPAREN = 41;
  const $STAR = 42;
  const $PLUS = 43;
  const $COMMA = 44;
  const $MINUS = 45;
  const $PERIOD = 46;
  const $SLASH = 47;
  const $COLON = 58;
  const $SEMICOLON = 59;
  const $LT = 60;
  const $EQ = 61;
  const $GT = 62;
  const $QUESTION = 63;
  const $0 = 48;
  const $9 = 57;
  const $A = 65;
  const $E = 69;
  const $F = 70;
  const $X = 88;
  const $Z = 90;
  const $LBRACKET = 91;
  const $BACKSLASH = 92;
  const $RBRACKET = 93;
  const $CARET = 94;
  const $_ = 95;
  const $a = 97;
  const $e = 101;
  const $f = 102;
  const $n = 110;
  const $r = 114;
  const $t = 116;
  const $u = 117;
  const $v = 118;
  const $x = 120;
  const $z = 122;
  const $LBRACE = 123;
  const $BAR = 124;
  const $RBRACE = 125;
  const $NBSP = 160;
  const $BT = 96;
  function isWhitespace(code) {
      return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
  }
  function isDigit(code) {
      return $0 <= code && code <= $9;
  }
  function isAsciiLetter(code) {
      return code >= $a && code <= $z || code >= $A && code <= $Z;
  }
  function isAsciiHexDigit(code) {
      return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * A replacement for @Injectable to be used in the compiler, so that
   * we don't try to evaluate the metadata in the compiler during AoT.
   * This decorator is enough to make the compiler work with the ReflectiveInjector though.
   * @Annotation
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ function CompilerInjectable() {
      return (x) => x;
  }

  function assertArrayOfStrings(identifier, value) {
      if (!isDevMode() || isBlank$1(value)) {
          return;
      }
      if (!Array.isArray(value)) {
          throw new Error(`Expected '${identifier}' to be an array of strings.`);
      }
      for (let i = 0; i < value.length; i += 1) {
          if (typeof value[i] !== 'string') {
              throw new Error(`Expected '${identifier}' to be an array of strings.`);
          }
      }
  }
  const INTERPOLATION_BLACKLIST_REGEXPS = [
      /^\s*$/,
      /[<>]/,
      /^[{}]$/,
      /&(#|[a-z])/i,
      /^\/\//,
  ];
  function assertInterpolationSymbols(identifier, value) {
      if (isPresent$1(value) && !(Array.isArray(value) && value.length == 2)) {
          throw new Error(`Expected '${identifier}' to be an array, [start, end].`);
      }
      else if (isDevMode() && !isBlank$1(value)) {
          const start = value[0];
          const end = value[1];
          // black list checking
          INTERPOLATION_BLACKLIST_REGEXPS.forEach(regexp => {
              if (regexp.test(start) || regexp.test(end)) {
                  throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);
              }
          });
      }
  }

  class InterpolationConfig {
      constructor(start, end) {
          this.start = start;
          this.end = end;
      }
      static fromArray(markers) {
          if (!markers) {
              return DEFAULT_INTERPOLATION_CONFIG;
          }
          assertInterpolationSymbols('interpolation', markers);
          return new InterpolationConfig(markers[0], markers[1]);
      }
      ;
  }
  const DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');

  var TokenType;
  (function (TokenType) {
      TokenType[TokenType["Character"] = 0] = "Character";
      TokenType[TokenType["Identifier"] = 1] = "Identifier";
      TokenType[TokenType["Keyword"] = 2] = "Keyword";
      TokenType[TokenType["String"] = 3] = "String";
      TokenType[TokenType["Operator"] = 4] = "Operator";
      TokenType[TokenType["Number"] = 5] = "Number";
      TokenType[TokenType["Error"] = 6] = "Error";
  })(TokenType || (TokenType = {}));
  const KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
  class Lexer {
      tokenize(text) {
          const scanner = new _Scanner(text);
          const tokens = [];
          let token = scanner.scanToken();
          while (token != null) {
              tokens.push(token);
              token = scanner.scanToken();
          }
          return tokens;
      }
  }
  Lexer.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  Lexer.ctorParameters = () => [];
  class Token {
      constructor(index, type, numValue, strValue) {
          this.index = index;
          this.type = type;
          this.numValue = numValue;
          this.strValue = strValue;
      }
      isCharacter(code) {
          return this.type == TokenType.Character && this.numValue == code;
      }
      isNumber() { return this.type == TokenType.Number; }
      isString() { return this.type == TokenType.String; }
      isOperator(operater) {
          return this.type == TokenType.Operator && this.strValue == operater;
      }
      isIdentifier() { return this.type == TokenType.Identifier; }
      isKeyword() { return this.type == TokenType.Keyword; }
      isKeywordLet() { return this.type == TokenType.Keyword && this.strValue == 'let'; }
      isKeywordNull() { return this.type == TokenType.Keyword && this.strValue == 'null'; }
      isKeywordUndefined() {
          return this.type == TokenType.Keyword && this.strValue == 'undefined';
      }
      isKeywordTrue() { return this.type == TokenType.Keyword && this.strValue == 'true'; }
      isKeywordFalse() { return this.type == TokenType.Keyword && this.strValue == 'false'; }
      isKeywordThis() { return this.type == TokenType.Keyword && this.strValue == 'this'; }
      isError() { return this.type == TokenType.Error; }
      toNumber() { return this.type == TokenType.Number ? this.numValue : -1; }
      toString() {
          switch (this.type) {
              case TokenType.Character:
              case TokenType.Identifier:
              case TokenType.Keyword:
              case TokenType.Operator:
              case TokenType.String:
              case TokenType.Error:
                  return this.strValue;
              case TokenType.Number:
                  return this.numValue.toString();
              default:
                  return null;
          }
      }
  }
  function newCharacterToken(index, code) {
      return new Token(index, TokenType.Character, code, String.fromCharCode(code));
  }
  function newIdentifierToken(index, text) {
      return new Token(index, TokenType.Identifier, 0, text);
  }
  function newKeywordToken(index, text) {
      return new Token(index, TokenType.Keyword, 0, text);
  }
  function newOperatorToken(index, text) {
      return new Token(index, TokenType.Operator, 0, text);
  }
  function newStringToken(index, text) {
      return new Token(index, TokenType.String, 0, text);
  }
  function newNumberToken(index, n) {
      return new Token(index, TokenType.Number, n, '');
  }
  function newErrorToken(index, message) {
      return new Token(index, TokenType.Error, 0, message);
  }
  const EOF = new Token(-1, TokenType.Character, 0, '');
  class _Scanner {
      constructor(input) {
          this.input = input;
          this.peek = 0;
          this.index = -1;
          this.length = input.length;
          this.advance();
      }
      advance() {
          this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
      }
      scanToken() {
          const input = this.input, length = this.length;
          let peek = this.peek, index = this.index;
          // Skip whitespace.
          while (peek <= $SPACE) {
              if (++index >= length) {
                  peek = $EOF;
                  break;
              }
              else {
                  peek = input.charCodeAt(index);
              }
          }
          this.peek = peek;
          this.index = index;
          if (index >= length) {
              return null;
          }
          // Handle identifiers and numbers.
          if (isIdentifierStart(peek))
              return this.scanIdentifier();
          if (isDigit(peek))
              return this.scanNumber(index);
          const start = index;
          switch (peek) {
              case $PERIOD:
                  this.advance();
                  return isDigit(this.peek) ? this.scanNumber(start) :
                      newCharacterToken(start, $PERIOD);
              case $LPAREN:
              case $RPAREN:
              case $LBRACE:
              case $RBRACE:
              case $LBRACKET:
              case $RBRACKET:
              case $COMMA:
              case $COLON:
              case $SEMICOLON:
                  return this.scanCharacter(start, peek);
              case $SQ:
              case $DQ:
                  return this.scanString();
              case $HASH:
              case $PLUS:
              case $MINUS:
              case $STAR:
              case $SLASH:
              case $PERCENT:
              case $CARET:
                  return this.scanOperator(start, String.fromCharCode(peek));
              case $QUESTION:
                  return this.scanComplexOperator(start, '?', $PERIOD, '.');
              case $LT:
              case $GT:
                  return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');
              case $BANG:
              case $EQ:
                  return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');
              case $AMPERSAND:
                  return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
              case $BAR:
                  return this.scanComplexOperator(start, '|', $BAR, '|');
              case $NBSP:
                  while (isWhitespace(this.peek))
                      this.advance();
                  return this.scanToken();
          }
          this.advance();
          return this.error(`Unexpected character [${String.fromCharCode(peek)}]`, 0);
      }
      scanCharacter(start, code) {
          this.advance();
          return newCharacterToken(start, code);
      }
      scanOperator(start, str) {
          this.advance();
          return newOperatorToken(start, str);
      }
      /**
       * Tokenize a 2/3 char long operator
       *
       * @param start start index in the expression
       * @param one first symbol (always part of the operator)
       * @param twoCode code point for the second symbol
       * @param two second symbol (part of the operator when the second code point matches)
       * @param threeCode code point for the third symbol
       * @param three third symbol (part of the operator when provided and matches source expression)
       * @returns {Token}
       */
      scanComplexOperator(start, one, twoCode, two, threeCode, three) {
          this.advance();
          let str = one;
          if (this.peek == twoCode) {
              this.advance();
              str += two;
          }
          if (threeCode != null && this.peek == threeCode) {
              this.advance();
              str += three;
          }
          return newOperatorToken(start, str);
      }
      scanIdentifier() {
          const start = this.index;
          this.advance();
          while (isIdentifierPart(this.peek))
              this.advance();
          const str = this.input.substring(start, this.index);
          return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :
              newIdentifierToken(start, str);
      }
      scanNumber(start) {
          let simple = (this.index === start);
          this.advance(); // Skip initial digit.
          while (true) {
              if (isDigit(this.peek)) {
              }
              else if (this.peek == $PERIOD) {
                  simple = false;
              }
              else if (isExponentStart(this.peek)) {
                  this.advance();
                  if (isExponentSign(this.peek))
                      this.advance();
                  if (!isDigit(this.peek))
                      return this.error('Invalid exponent', -1);
                  simple = false;
              }
              else {
                  break;
              }
              this.advance();
          }
          const str = this.input.substring(start, this.index);
          const value = simple ? NumberWrapper$1.parseIntAutoRadix(str) : parseFloat(str);
          return newNumberToken(start, value);
      }
      scanString() {
          const start = this.index;
          const quote = this.peek;
          this.advance(); // Skip initial quote.
          let buffer = '';
          let marker = this.index;
          const input = this.input;
          while (this.peek != quote) {
              if (this.peek == $BACKSLASH) {
                  buffer += input.substring(marker, this.index);
                  this.advance();
                  let unescapedCode;
                  // Workaround for TS2.1-introduced type strictness
                  this.peek = this.peek;
                  if (this.peek == $u) {
                      // 4 character hex code for unicode character.
                      const hex = input.substring(this.index + 1, this.index + 5);
                      if (/^[0-9a-f]+$/i.test(hex)) {
                          unescapedCode = parseInt(hex, 16);
                      }
                      else {
                          return this.error(`Invalid unicode escape [\\u${hex}]`, 0);
                      }
                      for (let i = 0; i < 5; i++) {
                          this.advance();
                      }
                  }
                  else {
                      unescapedCode = unescape(this.peek);
                      this.advance();
                  }
                  buffer += String.fromCharCode(unescapedCode);
                  marker = this.index;
              }
              else if (this.peek == $EOF) {
                  return this.error('Unterminated quote', 0);
              }
              else {
                  this.advance();
              }
          }
          const last = input.substring(marker, this.index);
          this.advance(); // Skip terminating quote.
          return newStringToken(start, buffer + last);
      }
      error(message, offset) {
          const position = this.index + offset;
          return newErrorToken(position, `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);
      }
  }
  function isIdentifierStart(code) {
      return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||
          (code == $_) || (code == $$);
  }
  function isIdentifier(input) {
      if (input.length == 0)
          return false;
      const scanner = new _Scanner(input);
      if (!isIdentifierStart(scanner.peek))
          return false;
      scanner.advance();
      while (scanner.peek !== $EOF) {
          if (!isIdentifierPart(scanner.peek))
              return false;
          scanner.advance();
      }
      return true;
  }
  function isIdentifierPart(code) {
      return isAsciiLetter(code) || isDigit(code) || (code == $_) ||
          (code == $$);
  }
  function isExponentStart(code) {
      return code == $e || code == $E;
  }
  function isExponentSign(code) {
      return code == $MINUS || code == $PLUS;
  }
  function isQuote(code) {
      return code === $SQ || code === $DQ || code === $BT;
  }
  function unescape(code) {
      switch (code) {
          case $n:
              return $LF;
          case $f:
              return $FF;
          case $r:
              return $CR;
          case $t:
              return $TAB;
          case $v:
              return $VTAB;
          default:
              return code;
      }
  }

  class SplitInterpolation {
      constructor(strings, expressions, offsets) {
          this.strings = strings;
          this.expressions = expressions;
          this.offsets = offsets;
      }
  }
  class TemplateBindingParseResult {
      constructor(templateBindings, warnings, errors) {
          this.templateBindings = templateBindings;
          this.warnings = warnings;
          this.errors = errors;
      }
  }
  function _createInterpolateRegExp(config) {
      const pattern = escapeRegExp$1(config.start) + '([\\s\\S]*?)' + escapeRegExp$1(config.end);
      return new RegExp(pattern, 'g');
  }
  class Parser {
      constructor(_lexer) {
          this._lexer = _lexer;
          this.errors = [];
      }
      parseAction(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
          this._checkNoInterpolation(input, location, interpolationConfig);
          const sourceToLex = this._stripComments(input);
          const tokens = this._lexer.tokenize(this._stripComments(input));
          const ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)
              .parseChain();
          return new ASTWithSource(ast, input, location, this.errors);
      }
      parseBinding(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
          const ast = this._parseBindingAst(input, location, interpolationConfig);
          return new ASTWithSource(ast, input, location, this.errors);
      }
      parseSimpleBinding(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
          const ast = this._parseBindingAst(input, location, interpolationConfig);
          const errors = SimpleExpressionChecker.check(ast);
          if (errors.length > 0) {
              this._reportError(`Host binding expression cannot contain ${errors.join(' ')}`, input, location);
          }
          return new ASTWithSource(ast, input, location, this.errors);
      }
      _reportError(message, input, errLocation, ctxLocation) {
          this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
      }
      _parseBindingAst(input, location, interpolationConfig) {
          // Quotes expressions use 3rd-party expression language. We don't want to use
          // our lexer or parser for that, so we check for that ahead of time.
          const quote = this._parseQuote(input, location);
          if (isPresent$1(quote)) {
              return quote;
          }
          this._checkNoInterpolation(input, location, interpolationConfig);
          const sourceToLex = this._stripComments(input);
          const tokens = this._lexer.tokenize(sourceToLex);
          return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)
              .parseChain();
      }
      _parseQuote(input, location) {
          if (isBlank$1(input))
              return null;
          const prefixSeparatorIndex = input.indexOf(':');
          if (prefixSeparatorIndex == -1)
              return null;
          const prefix = input.substring(0, prefixSeparatorIndex).trim();
          if (!isIdentifier(prefix))
              return null;
          const uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
          return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
      }
      parseTemplateBindings(prefixToken, input, location) {
          const tokens = this._lexer.tokenize(input);
          if (prefixToken) {
              // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).
              const prefixTokens = this._lexer.tokenize(prefixToken).map(t => {
                  t.index = 0;
                  return t;
              });
              tokens.unshift(...prefixTokens);
          }
          return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0)
              .parseTemplateBindings();
      }
      parseInterpolation(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
          const split = this.splitInterpolation(input, location, interpolationConfig);
          if (split == null)
              return null;
          const expressions = [];
          for (let i = 0; i < split.expressions.length; ++i) {
              const expressionText = split.expressions[i];
              const sourceToLex = this._stripComments(expressionText);
              const tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
              const ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length))
                  .parseChain();
              expressions.push(ast);
          }
          return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank$1(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
      }
      splitInterpolation(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
          const regexp = _createInterpolateRegExp(interpolationConfig);
          const parts = input.split(regexp);
          if (parts.length <= 1) {
              return null;
          }
          const strings = [];
          const expressions = [];
          const offsets = [];
          let offset = 0;
          for (let i = 0; i < parts.length; i++) {
              const part = parts[i];
              if (i % 2 === 0) {
                  // fixed string
                  strings.push(part);
                  offset += part.length;
              }
              else if (part.trim().length > 0) {
                  offset += interpolationConfig.start.length;
                  expressions.push(part);
                  offsets.push(offset);
                  offset += part.length + interpolationConfig.end.length;
              }
              else {
                  this._reportError('Blank expressions are not allowed in interpolated strings', input, `at column ${this._findInterpolationErrorColumn(parts, i, interpolationConfig)} in`, location);
                  expressions.push('$implict');
                  offsets.push(offset);
              }
          }
          return new SplitInterpolation(strings, expressions, offsets);
      }
      wrapLiteralPrimitive(input, location) {
          return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank$1(input) ? 0 : input.length), input), input, location, this.errors);
      }
      _stripComments(input) {
          const i = this._commentStart(input);
          return isPresent$1(i) ? input.substring(0, i).trim() : input;
      }
      _commentStart(input) {
          let outerQuote = null;
          for (let i = 0; i < input.length - 1; i++) {
              const char = input.charCodeAt(i);
              const nextChar = input.charCodeAt(i + 1);
              if (char === $SLASH && nextChar == $SLASH && isBlank$1(outerQuote))
                  return i;
              if (outerQuote === char) {
                  outerQuote = null;
              }
              else if (isBlank$1(outerQuote) && isQuote(char)) {
                  outerQuote = char;
              }
          }
          return null;
      }
      _checkNoInterpolation(input, location, interpolationConfig) {
          const regexp = _createInterpolateRegExp(interpolationConfig);
          const parts = input.split(regexp);
          if (parts.length > 1) {
              this._reportError(`Got interpolation (${interpolationConfig.start}${interpolationConfig.end}) where expression was expected`, input, `at column ${this._findInterpolationErrorColumn(parts, 1, interpolationConfig)} in`, location);
          }
      }
      _findInterpolationErrorColumn(parts, partInErrIdx, interpolationConfig) {
          let errLocation = '';
          for (let j = 0; j < partInErrIdx; j++) {
              errLocation += j % 2 === 0 ?
                  parts[j] :
                  `${interpolationConfig.start}${parts[j]}${interpolationConfig.end}`;
          }
          return errLocation.length;
      }
  }
  Parser.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  Parser.ctorParameters = () => [
      { type: Lexer, },
  ];
  class _ParseAST {
      constructor(input, location, tokens, inputLength, parseAction, errors, offset) {
          this.input = input;
          this.location = location;
          this.tokens = tokens;
          this.inputLength = inputLength;
          this.parseAction = parseAction;
          this.errors = errors;
          this.offset = offset;
          this.rparensExpected = 0;
          this.rbracketsExpected = 0;
          this.rbracesExpected = 0;
          this.index = 0;
      }
      peek(offset) {
          const i = this.index + offset;
          return i < this.tokens.length ? this.tokens[i] : EOF;
      }
      get next() { return this.peek(0); }
      get inputIndex() {
          return (this.index < this.tokens.length) ? this.next.index + this.offset :
              this.inputLength + this.offset;
      }
      span(start) { return new ParseSpan(start, this.inputIndex); }
      advance() { this.index++; }
      optionalCharacter(code) {
          if (this.next.isCharacter(code)) {
              this.advance();
              return true;
          }
          else {
              return false;
          }
      }
      peekKeywordLet() { return this.next.isKeywordLet(); }
      expectCharacter(code) {
          if (this.optionalCharacter(code))
              return;
          this.error(`Missing expected ${String.fromCharCode(code)}`);
      }
      optionalOperator(op) {
          if (this.next.isOperator(op)) {
              this.advance();
              return true;
          }
          else {
              return false;
          }
      }
      expectOperator(operator) {
          if (this.optionalOperator(operator))
              return;
          this.error(`Missing expected operator ${operator}`);
      }
      expectIdentifierOrKeyword() {
          const n = this.next;
          if (!n.isIdentifier() && !n.isKeyword()) {
              this.error(`Unexpected token ${n}, expected identifier or keyword`);
              return '';
          }
          this.advance();
          return n.toString();
      }
      expectIdentifierOrKeywordOrString() {
          const n = this.next;
          if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
              this.error(`Unexpected token ${n}, expected identifier, keyword, or string`);
              return '';
          }
          this.advance();
          return n.toString();
      }
      parseChain() {
          const exprs = [];
          const start = this.inputIndex;
          while (this.index < this.tokens.length) {
              const expr = this.parsePipe();
              exprs.push(expr);
              if (this.optionalCharacter($SEMICOLON)) {
                  if (!this.parseAction) {
                      this.error('Binding expression cannot contain chained expression');
                  }
                  while (this.optionalCharacter($SEMICOLON)) {
                  } // read all semicolons
              }
              else if (this.index < this.tokens.length) {
                  this.error(`Unexpected token '${this.next}'`);
              }
          }
          if (exprs.length == 0)
              return new EmptyExpr(this.span(start));
          if (exprs.length == 1)
              return exprs[0];
          return new Chain(this.span(start), exprs);
      }
      parsePipe() {
          let result = this.parseExpression();
          if (this.optionalOperator('|')) {
              if (this.parseAction) {
                  this.error('Cannot have a pipe in an action expression');
              }
              do {
                  const name = this.expectIdentifierOrKeyword();
                  const args = [];
                  while (this.optionalCharacter($COLON)) {
                      args.push(this.parseExpression());
                  }
                  result = new BindingPipe(this.span(result.span.start), result, name, args);
              } while (this.optionalOperator('|'));
          }
          return result;
      }
      parseExpression() { return this.parseConditional(); }
      parseConditional() {
          const start = this.inputIndex;
          const result = this.parseLogicalOr();
          if (this.optionalOperator('?')) {
              const yes = this.parsePipe();
              let no;
              if (!this.optionalCharacter($COLON)) {
                  const end = this.inputIndex;
                  const expression = this.input.substring(start, end);
                  this.error(`Conditional expression ${expression} requires all 3 expressions`);
                  no = new EmptyExpr(this.span(start));
              }
              else {
                  no = this.parsePipe();
              }
              return new Conditional(this.span(start), result, yes, no);
          }
          else {
              return result;
          }
      }
      parseLogicalOr() {
          // '||'
          let result = this.parseLogicalAnd();
          while (this.optionalOperator('||')) {
              const right = this.parseLogicalAnd();
              result = new Binary(this.span(result.span.start), '||', result, right);
          }
          return result;
      }
      parseLogicalAnd() {
          // '&&'
          let result = this.parseEquality();
          while (this.optionalOperator('&&')) {
              const right = this.parseEquality();
              result = new Binary(this.span(result.span.start), '&&', result, right);
          }
          return result;
      }
      parseEquality() {
          // '==','!=','===','!=='
          let result = this.parseRelational();
          while (this.next.type == TokenType.Operator) {
              const operator = this.next.strValue;
              switch (operator) {
                  case '==':
                  case '===':
                  case '!=':
                  case '!==':
                      this.advance();
                      const right = this.parseRelational();
                      result = new Binary(this.span(result.span.start), operator, result, right);
                      continue;
              }
              break;
          }
          return result;
      }
      parseRelational() {
          // '<', '>', '<=', '>='
          let result = this.parseAdditive();
          while (this.next.type == TokenType.Operator) {
              const operator = this.next.strValue;
              switch (operator) {
                  case '<':
                  case '>':
                  case '<=':
                  case '>=':
                      this.advance();
                      const right = this.parseAdditive();
                      result = new Binary(this.span(result.span.start), operator, result, right);
                      continue;
              }
              break;
          }
          return result;
      }
      parseAdditive() {
          // '+', '-'
          let result = this.parseMultiplicative();
          while (this.next.type == TokenType.Operator) {
              const operator = this.next.strValue;
              switch (operator) {
                  case '+':
                  case '-':
                      this.advance();
                      let right = this.parseMultiplicative();
                      result = new Binary(this.span(result.span.start), operator, result, right);
                      continue;
              }
              break;
          }
          return result;
      }
      parseMultiplicative() {
          // '*', '%', '/'
          let result = this.parsePrefix();
          while (this.next.type == TokenType.Operator) {
              const operator = this.next.strValue;
              switch (operator) {
                  case '*':
                  case '%':
                  case '/':
                      this.advance();
                      let right = this.parsePrefix();
                      result = new Binary(this.span(result.span.start), operator, result, right);
                      continue;
              }
              break;
          }
          return result;
      }
      parsePrefix() {
          if (this.next.type == TokenType.Operator) {
              const start = this.inputIndex;
              const operator = this.next.strValue;
              let result;
              switch (operator) {
                  case '+':
                      this.advance();
                      return this.parsePrefix();
                  case '-':
                      this.advance();
                      result = this.parsePrefix();
                      return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
                  case '!':
                      this.advance();
                      result = this.parsePrefix();
                      return new PrefixNot(this.span(start), result);
              }
          }
          return this.parseCallChain();
      }
      parseCallChain() {
          let result = this.parsePrimary();
          while (true) {
              if (this.optionalCharacter($PERIOD)) {
                  result = this.parseAccessMemberOrMethodCall(result, false);
              }
              else if (this.optionalOperator('?.')) {
                  result = this.parseAccessMemberOrMethodCall(result, true);
              }
              else if (this.optionalCharacter($LBRACKET)) {
                  this.rbracketsExpected++;
                  const key = this.parsePipe();
                  this.rbracketsExpected--;
                  this.expectCharacter($RBRACKET);
                  if (this.optionalOperator('=')) {
                      const value = this.parseConditional();
                      result = new KeyedWrite(this.span(result.span.start), result, key, value);
                  }
                  else {
                      result = new KeyedRead(this.span(result.span.start), result, key);
                  }
              }
              else if (this.optionalCharacter($LPAREN)) {
                  this.rparensExpected++;
                  const args = this.parseCallArguments();
                  this.rparensExpected--;
                  this.expectCharacter($RPAREN);
                  result = new FunctionCall(this.span(result.span.start), result, args);
              }
              else {
                  return result;
              }
          }
      }
      parsePrimary() {
          const start = this.inputIndex;
          if (this.optionalCharacter($LPAREN)) {
              this.rparensExpected++;
              const result = this.parsePipe();
              this.rparensExpected--;
              this.expectCharacter($RPAREN);
              return result;
          }
          else if (this.next.isKeywordNull()) {
              this.advance();
              return new LiteralPrimitive(this.span(start), null);
          }
          else if (this.next.isKeywordUndefined()) {
              this.advance();
              return new LiteralPrimitive(this.span(start), void 0);
          }
          else if (this.next.isKeywordTrue()) {
              this.advance();
              return new LiteralPrimitive(this.span(start), true);
          }
          else if (this.next.isKeywordFalse()) {
              this.advance();
              return new LiteralPrimitive(this.span(start), false);
          }
          else if (this.next.isKeywordThis()) {
              this.advance();
              return new ImplicitReceiver(this.span(start));
          }
          else if (this.optionalCharacter($LBRACKET)) {
              this.rbracketsExpected++;
              const elements = this.parseExpressionList($RBRACKET);
              this.rbracketsExpected--;
              this.expectCharacter($RBRACKET);
              return new LiteralArray(this.span(start), elements);
          }
          else if (this.next.isCharacter($LBRACE)) {
              return this.parseLiteralMap();
          }
          else if (this.next.isIdentifier()) {
              return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
          }
          else if (this.next.isNumber()) {
              const value = this.next.toNumber();
              this.advance();
              return new LiteralPrimitive(this.span(start), value);
          }
          else if (this.next.isString()) {
              const literalValue = this.next.toString();
              this.advance();
              return new LiteralPrimitive(this.span(start), literalValue);
          }
          else if (this.index >= this.tokens.length) {
              this.error(`Unexpected end of expression: ${this.input}`);
              return new EmptyExpr(this.span(start));
          }
          else {
              this.error(`Unexpected token ${this.next}`);
              return new EmptyExpr(this.span(start));
          }
      }
      parseExpressionList(terminator) {
          const result = [];
          if (!this.next.isCharacter(terminator)) {
              do {
                  result.push(this.parsePipe());
              } while (this.optionalCharacter($COMMA));
          }
          return result;
      }
      parseLiteralMap() {
          const keys = [];
          const values = [];
          const start = this.inputIndex;
          this.expectCharacter($LBRACE);
          if (!this.optionalCharacter($RBRACE)) {
              this.rbracesExpected++;
              do {
                  const key = this.expectIdentifierOrKeywordOrString();
                  keys.push(key);
                  this.expectCharacter($COLON);
                  values.push(this.parsePipe());
              } while (this.optionalCharacter($COMMA));
              this.rbracesExpected--;
              this.expectCharacter($RBRACE);
          }
          return new LiteralMap(this.span(start), keys, values);
      }
      parseAccessMemberOrMethodCall(receiver, isSafe = false) {
          const start = receiver.span.start;
          const id = this.expectIdentifierOrKeyword();
          if (this.optionalCharacter($LPAREN)) {
              this.rparensExpected++;
              const args = this.parseCallArguments();
              this.expectCharacter($RPAREN);
              this.rparensExpected--;
              const span = this.span(start);
              return isSafe ? new SafeMethodCall(span, receiver, id, args) :
                  new MethodCall(span, receiver, id, args);
          }
          else {
              if (isSafe) {
                  if (this.optionalOperator('=')) {
                      this.error('The \'?.\' operator cannot be used in the assignment');
                      return new EmptyExpr(this.span(start));
                  }
                  else {
                      return new SafePropertyRead(this.span(start), receiver, id);
                  }
              }
              else {
                  if (this.optionalOperator('=')) {
                      if (!this.parseAction) {
                          this.error('Bindings cannot contain assignments');
                          return new EmptyExpr(this.span(start));
                      }
                      const value = this.parseConditional();
                      return new PropertyWrite(this.span(start), receiver, id, value);
                  }
                  else {
                      return new PropertyRead(this.span(start), receiver, id);
                  }
              }
          }
      }
      parseCallArguments() {
          if (this.next.isCharacter($RPAREN))
              return [];
          const positionals = [];
          do {
              positionals.push(this.parsePipe());
          } while (this.optionalCharacter($COMMA));
          return positionals;
      }
      /**
       * An identifier, a keyword, a string with an optional `-` inbetween.
       */
      expectTemplateBindingKey() {
          let result = '';
          let operatorFound = false;
          do {
              result += this.expectIdentifierOrKeywordOrString();
              operatorFound = this.optionalOperator('-');
              if (operatorFound) {
                  result += '-';
              }
          } while (operatorFound);
          return result.toString();
      }
      parseTemplateBindings() {
          const bindings = [];
          let prefix = null;
          const warnings = [];
          while (this.index < this.tokens.length) {
              const start = this.inputIndex;
              const keyIsVar = this.peekKeywordLet();
              if (keyIsVar) {
                  this.advance();
              }
              let key = this.expectTemplateBindingKey();
              if (!keyIsVar) {
                  if (prefix == null) {
                      prefix = key;
                  }
                  else {
                      key = prefix + key[0].toUpperCase() + key.substring(1);
                  }
              }
              this.optionalCharacter($COLON);
              let name = null;
              let expression = null;
              if (keyIsVar) {
                  if (this.optionalOperator('=')) {
                      name = this.expectTemplateBindingKey();
                  }
                  else {
                      name = '\$implicit';
                  }
              }
              else if (this.next !== EOF && !this.peekKeywordLet()) {
                  const start = this.inputIndex;
                  const ast = this.parsePipe();
                  const source = this.input.substring(start - this.offset, this.inputIndex - this.offset);
                  expression = new ASTWithSource(ast, source, this.location, this.errors);
              }
              bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name, expression));
              if (!this.optionalCharacter($SEMICOLON)) {
                  this.optionalCharacter($COMMA);
              }
          }
          return new TemplateBindingParseResult(bindings, warnings, this.errors);
      }
      error(message, index = null) {
          this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
          this.skip();
      }
      locationText(index = null) {
          if (isBlank$1(index))
              index = this.index;
          return (index < this.tokens.length) ? `at column ${this.tokens[index].index + 1} in` :
              `at the end of the expression`;
      }
      // Error recovery should skip tokens until it encounters a recovery point. skip() treats
      // the end of input and a ';' as unconditionally a recovery point. It also treats ')',
      // '}' and ']' as conditional recovery points if one of calling productions is expecting
      // one of these symbols. This allows skip() to recover from errors such as '(a.) + 1' allowing
      // more of the AST to be retained (it doesn't skip any tokens as the ')' is retained because
      // of the '(' begins an '(' <expr> ')' production). The recovery points of grouping symbols
      // must be conditional as they must be skipped if none of the calling productions are not
      // expecting the closing token else we will never make progress in the case of an
      // extraneous group closing symbol (such as a stray ')'). This is not the case for ';' because
      // parseChain() is always the root production and it expects a ';'.
      // If a production expects one of these token it increments the corresponding nesting count,
      // and then decrements it just prior to checking if the token is in the input.
      skip() {
          let n = this.next;
          while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&
              (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&
              (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&
              (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
              if (this.next.isError()) {
                  this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
              }
              this.advance();
              n = this.next;
          }
      }
  }
  class SimpleExpressionChecker {
      constructor() {
          this.errors = [];
      }
      static check(ast) {
          const s = new SimpleExpressionChecker();
          ast.visit(s);
          return s.errors;
      }
      visitImplicitReceiver(ast, context) { }
      visitInterpolation(ast, context) { }
      visitLiteralPrimitive(ast, context) { }
      visitPropertyRead(ast, context) { }
      visitPropertyWrite(ast, context) { }
      visitSafePropertyRead(ast, context) { }
      visitMethodCall(ast, context) { }
      visitSafeMethodCall(ast, context) { }
      visitFunctionCall(ast, context) { }
      visitLiteralArray(ast, context) { this.visitAll(ast.expressions); }
      visitLiteralMap(ast, context) { this.visitAll(ast.values); }
      visitBinary(ast, context) { }
      visitPrefixNot(ast, context) { }
      visitConditional(ast, context) { }
      visitPipe(ast, context) { this.errors.push('pipes'); }
      visitKeyedRead(ast, context) { }
      visitKeyedWrite(ast, context) { }
      visitAll(asts) { return asts.map(node => node.visit(this)); }
      visitChain(ast, context) { }
      visitQuote(ast, context) { }
  }

  class ParseLocation {
      constructor(file, offset, line, col) {
          this.file = file;
          this.offset = offset;
          this.line = line;
          this.col = col;
      }
      toString() {
          return isPresent$1(this.offset) ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;
      }
      moveBy(delta) {
          const source = this.file.content;
          const len = source.length;
          let offset = this.offset;
          let line = this.line;
          let col = this.col;
          while (offset > 0 && delta < 0) {
              offset--;
              delta++;
              const ch = source.charCodeAt(offset);
              if (ch == $LF) {
                  line--;
                  const priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
                  col = priorLine > 0 ? offset - priorLine : offset;
              }
              else {
                  col--;
              }
          }
          while (offset < len && delta > 0) {
              const ch = source.charCodeAt(offset);
              offset++;
              delta--;
              if (ch == $LF) {
                  line++;
                  col = 0;
              }
              else {
                  col++;
              }
          }
          return new ParseLocation(this.file, offset, line, col);
      }
      // Return the source around the location
      // Up to `maxChars` or `maxLines` on each side of the location
      getContext(maxChars, maxLines) {
          const content = this.file.content;
          let startOffset = this.offset;
          if (isPresent$1(startOffset)) {
              if (startOffset > content.length - 1) {
                  startOffset = content.length - 1;
              }
              let endOffset = startOffset;
              let ctxChars = 0;
              let ctxLines = 0;
              while (ctxChars < maxChars && startOffset > 0) {
                  startOffset--;
                  ctxChars++;
                  if (content[startOffset] == '\n') {
                      if (++ctxLines == maxLines) {
                          break;
                      }
                  }
              }
              ctxChars = 0;
              ctxLines = 0;
              while (ctxChars < maxChars && endOffset < content.length - 1) {
                  endOffset++;
                  ctxChars++;
                  if (content[endOffset] == '\n') {
                      if (++ctxLines == maxLines) {
                          break;
                      }
                  }
              }
              return {
                  before: content.substring(startOffset, this.offset),
                  after: content.substring(this.offset, endOffset + 1),
              };
          }
          return null;
      }
  }
  class ParseSourceFile {
      constructor(content, url) {
          this.content = content;
          this.url = url;
      }
  }
  class ParseSourceSpan {
      constructor(start, end, details = null) {
          this.start = start;
          this.end = end;
          this.details = details;
      }
      toString() {
          return this.start.file.content.substring(this.start.offset, this.end.offset);
      }
  }
  var ParseErrorLevel;
  (function (ParseErrorLevel) {
      ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
      ParseErrorLevel[ParseErrorLevel["FATAL"] = 1] = "FATAL";
  })(ParseErrorLevel || (ParseErrorLevel = {}));
  class ParseError {
      constructor(span, msg, level = ParseErrorLevel.FATAL) {
          this.span = span;
          this.msg = msg;
          this.level = level;
      }
      toString() {
          const ctx = this.span.start.getContext(100, 3);
          const contextStr = ctx ? ` ("${ctx.before}[ERROR ->]${ctx.after}")` : '';
          const details = this.span.details ? `, ${this.span.details}` : '';
          return `${this.msg}${contextStr}: ${this.span.start}${details}`;
      }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  class Text {
      constructor(value, sourceSpan) {
          this.value = value;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) { return visitor.visitText(this, context); }
  }
  class Expansion {
      constructor(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
          this.switchValue = switchValue;
          this.type = type;
          this.cases = cases;
          this.sourceSpan = sourceSpan;
          this.switchValueSourceSpan = switchValueSourceSpan;
      }
      visit(visitor, context) { return visitor.visitExpansion(this, context); }
  }
  class ExpansionCase {
      constructor(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
          this.value = value;
          this.expression = expression;
          this.sourceSpan = sourceSpan;
          this.valueSourceSpan = valueSourceSpan;
          this.expSourceSpan = expSourceSpan;
      }
      visit(visitor, context) { return visitor.visitExpansionCase(this, context); }
  }
  class Attribute$1 {
      constructor(name, value, sourceSpan, valueSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
          this.valueSpan = valueSpan;
      }
      visit(visitor, context) { return visitor.visitAttribute(this, context); }
  }
  class Element$1 {
      constructor(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
          this.name = name;
          this.attrs = attrs;
          this.children = children;
          this.sourceSpan = sourceSpan;
          this.startSourceSpan = startSourceSpan;
          this.endSourceSpan = endSourceSpan;
      }
      visit(visitor, context) { return visitor.visitElement(this, context); }
  }
  class Comment {
      constructor(value, sourceSpan) {
          this.value = value;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) { return visitor.visitComment(this, context); }
  }
  function visitAll(visitor, nodes, context = null) {
      const result = [];
      const visit = visitor.visit ?
          (ast) => visitor.visit(ast, context) || ast.visit(visitor, context) :
          (ast) => ast.visit(visitor, context);
      nodes.forEach(ast => {
          const astResult = visit(ast);
          if (astResult) {
              result.push(astResult);
          }
      });
      return result;
  }

  var TokenType$1;
  (function (TokenType) {
      TokenType[TokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
      TokenType[TokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
      TokenType[TokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
      TokenType[TokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
      TokenType[TokenType["TEXT"] = 4] = "TEXT";
      TokenType[TokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
      TokenType[TokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
      TokenType[TokenType["COMMENT_START"] = 7] = "COMMENT_START";
      TokenType[TokenType["COMMENT_END"] = 8] = "COMMENT_END";
      TokenType[TokenType["CDATA_START"] = 9] = "CDATA_START";
      TokenType[TokenType["CDATA_END"] = 10] = "CDATA_END";
      TokenType[TokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
      TokenType[TokenType["ATTR_VALUE"] = 12] = "ATTR_VALUE";
      TokenType[TokenType["DOC_TYPE"] = 13] = "DOC_TYPE";
      TokenType[TokenType["EXPANSION_FORM_START"] = 14] = "EXPANSION_FORM_START";
      TokenType[TokenType["EXPANSION_CASE_VALUE"] = 15] = "EXPANSION_CASE_VALUE";
      TokenType[TokenType["EXPANSION_CASE_EXP_START"] = 16] = "EXPANSION_CASE_EXP_START";
      TokenType[TokenType["EXPANSION_CASE_EXP_END"] = 17] = "EXPANSION_CASE_EXP_END";
      TokenType[TokenType["EXPANSION_FORM_END"] = 18] = "EXPANSION_FORM_END";
      TokenType[TokenType["EOF"] = 19] = "EOF";
  })(TokenType$1 || (TokenType$1 = {}));
  class Token$1 {
      constructor(type, parts, sourceSpan) {
          this.type = type;
          this.parts = parts;
          this.sourceSpan = sourceSpan;
      }
  }
  class TokenError extends ParseError {
      constructor(errorMsg, tokenType, span) {
          super(span, errorMsg);
          this.tokenType = tokenType;
      }
  }
  class TokenizeResult {
      constructor(tokens, errors) {
          this.tokens = tokens;
          this.errors = errors;
      }
  }
  function tokenize(source, url, getTagDefinition, tokenizeExpansionForms = false, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
      return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig)
          .tokenize();
  }
  const _CR_OR_CRLF_REGEXP = /\r\n?/g;
  function _unexpectedCharacterErrorMsg(charCode) {
      const char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
      return `Unexpected character "${char}"`;
  }
  function _unknownEntityErrorMsg(entitySrc) {
      return `Unknown entity "${entitySrc}" - use the "&#<decimal>;" or  "&#x<hex>;" syntax`;
  }
  class _ControlFlowError {
      constructor(error) {
          this.error = error;
      }
  }
  // See http://www.w3.org/TR/html51/syntax.html#writing
  class _Tokenizer {
      /**
       * @param _file The html source
       * @param _getTagDefinition
       * @param _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)
       * @param _interpolationConfig
       */
      constructor(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
          this._file = _file;
          this._getTagDefinition = _getTagDefinition;
          this._tokenizeIcu = _tokenizeIcu;
          this._interpolationConfig = _interpolationConfig;
          // Note: this is always lowercase!
          this._peek = -1;
          this._nextPeek = -1;
          this._index = -1;
          this._line = 0;
          this._column = -1;
          this._expansionCaseStack = [];
          this._inInterpolation = false;
          this.tokens = [];
          this.errors = [];
          this._input = _file.content;
          this._length = _file.content.length;
          this._advance();
      }
      _processCarriageReturns(content) {
          // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
          // In order to keep the original position in the source, we can not
          // pre-process it.
          // Instead CRs are processed right before instantiating the tokens.
          return content.replace(_CR_OR_CRLF_REGEXP, '\n');
      }
      tokenize() {
          while (this._peek !== $EOF) {
              const start = this._getLocation();
              try {
                  if (this._attemptCharCode($LT)) {
                      if (this._attemptCharCode($BANG)) {
                          if (this._attemptCharCode($LBRACKET)) {
                              this._consumeCdata(start);
                          }
                          else if (this._attemptCharCode($MINUS)) {
                              this._consumeComment(start);
                          }
                          else {
                              this._consumeDocType(start);
                          }
                      }
                      else if (this._attemptCharCode($SLASH)) {
                          this._consumeTagClose(start);
                      }
                      else {
                          this._consumeTagOpen(start);
                      }
                  }
                  else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
                      this._consumeText();
                  }
              }
              catch (e) {
                  if (e instanceof _ControlFlowError) {
                      this.errors.push(e.error);
                  }
                  else {
                      throw e;
                  }
              }
          }
          this._beginToken(TokenType$1.EOF);
          this._endToken([]);
          return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
      }
      /**
       * @returns {boolean} whether an ICU token has been created
       * @internal
       */
      _tokenizeExpansionForm() {
          if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
              this._consumeExpansionFormStart();
              return true;
          }
          if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
              this._consumeExpansionCaseStart();
              return true;
          }
          if (this._peek === $RBRACE) {
              if (this._isInExpansionCase()) {
                  this._consumeExpansionCaseEnd();
                  return true;
              }
              if (this._isInExpansionForm()) {
                  this._consumeExpansionFormEnd();
                  return true;
              }
          }
          return false;
      }
      _getLocation() {
          return new ParseLocation(this._file, this._index, this._line, this._column);
      }
      _getSpan(start = this._getLocation(), end = this._getLocation()) {
          return new ParseSourceSpan(start, end);
      }
      _beginToken(type, start = this._getLocation()) {
          this._currentTokenStart = start;
          this._currentTokenType = type;
      }
      _endToken(parts, end = this._getLocation()) {
          const token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
          this.tokens.push(token);
          this._currentTokenStart = null;
          this._currentTokenType = null;
          return token;
      }
      _createError(msg, span) {
          if (this._isInExpansionForm()) {
              msg += ` (Do you have an unescaped "{" in your template? Use "{{ '{' }}") to escape it.)`;
          }
          const error = new TokenError(msg, this._currentTokenType, span);
          this._currentTokenStart = null;
          this._currentTokenType = null;
          return new _ControlFlowError(error);
      }
      _advance() {
          if (this._index >= this._length) {
              throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
          }
          if (this._peek === $LF) {
              this._line++;
              this._column = 0;
          }
          else if (this._peek !== $LF && this._peek !== $CR) {
              this._column++;
          }
          this._index++;
          this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
          this._nextPeek =
              this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
      }
      _attemptCharCode(charCode) {
          if (this._peek === charCode) {
              this._advance();
              return true;
          }
          return false;
      }
      _attemptCharCodeCaseInsensitive(charCode) {
          if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
              this._advance();
              return true;
          }
          return false;
      }
      _requireCharCode(charCode) {
          const location = this._getLocation();
          if (!this._attemptCharCode(charCode)) {
              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
          }
      }
      _attemptStr(chars) {
          const len = chars.length;
          if (this._index + len > this._length) {
              return false;
          }
          const initialPosition = this._savePosition();
          for (let i = 0; i < len; i++) {
              if (!this._attemptCharCode(chars.charCodeAt(i))) {
                  // If attempting to parse the string fails, we want to reset the parser
                  // to where it was before the attempt
                  this._restorePosition(initialPosition);
                  return false;
              }
          }
          return true;
      }
      _attemptStrCaseInsensitive(chars) {
          for (let i = 0; i < chars.length; i++) {
              if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
                  return false;
              }
          }
          return true;
      }
      _requireStr(chars) {
          const location = this._getLocation();
          if (!this._attemptStr(chars)) {
              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
          }
      }
      _attemptCharCodeUntilFn(predicate) {
          while (!predicate(this._peek)) {
              this._advance();
          }
      }
      _requireCharCodeUntilFn(predicate, len) {
          const start = this._getLocation();
          this._attemptCharCodeUntilFn(predicate);
          if (this._index - start.offset < len) {
              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
          }
      }
      _attemptUntilChar(char) {
          while (this._peek !== char) {
              this._advance();
          }
      }
      _readChar(decodeEntities) {
          if (decodeEntities && this._peek === $AMPERSAND) {
              return this._decodeEntity();
          }
          else {
              const index = this._index;
              this._advance();
              return this._input[index];
          }
      }
      _decodeEntity() {
          const start = this._getLocation();
          this._advance();
          if (this._attemptCharCode($HASH)) {
              const isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
              const numberStart = this._getLocation().offset;
              this._attemptCharCodeUntilFn(isDigitEntityEnd);
              if (this._peek != $SEMICOLON) {
                  throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
              }
              this._advance();
              const strNum = this._input.substring(numberStart, this._index - 1);
              try {
                  const charCode = parseInt(strNum, isHex ? 16 : 10);
                  return String.fromCharCode(charCode);
              }
              catch (e) {
                  const entity = this._input.substring(start.offset + 1, this._index - 1);
                  throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
              }
          }
          else {
              const startPosition = this._savePosition();
              this._attemptCharCodeUntilFn(isNamedEntityEnd);
              if (this._peek != $SEMICOLON) {
                  this._restorePosition(startPosition);
                  return '&';
              }
              this._advance();
              const name = this._input.substring(start.offset + 1, this._index - 1);
              const char = NAMED_ENTITIES[name];
              if (!char) {
                  throw this._createError(_unknownEntityErrorMsg(name), this._getSpan(start));
              }
              return char;
          }
      }
      _consumeRawText(decodeEntities, firstCharOfEnd, attemptEndRest) {
          let tagCloseStart;
          const textStart = this._getLocation();
          this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
          const parts = [];
          while (true) {
              tagCloseStart = this._getLocation();
              if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
                  break;
              }
              if (this._index > tagCloseStart.offset) {
                  // add the characters consumed by the previous if statement to the output
                  parts.push(this._input.substring(tagCloseStart.offset, this._index));
              }
              while (this._peek !== firstCharOfEnd) {
                  parts.push(this._readChar(decodeEntities));
              }
          }
          return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
      }
      _consumeComment(start) {
          this._beginToken(TokenType$1.COMMENT_START, start);
          this._requireCharCode($MINUS);
          this._endToken([]);
          const textToken = this._consumeRawText(false, $MINUS, () => this._attemptStr('->'));
          this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
          this._endToken([]);
      }
      _consumeCdata(start) {
          this._beginToken(TokenType$1.CDATA_START, start);
          this._requireStr('CDATA[');
          this._endToken([]);
          const textToken = this._consumeRawText(false, $RBRACKET, () => this._attemptStr(']>'));
          this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
          this._endToken([]);
      }
      _consumeDocType(start) {
          this._beginToken(TokenType$1.DOC_TYPE, start);
          this._attemptUntilChar($GT);
          this._advance();
          this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
      }
      _consumePrefixAndName() {
          const nameOrPrefixStart = this._index;
          let prefix = null;
          while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
              this._advance();
          }
          let nameStart;
          if (this._peek === $COLON) {
              this._advance();
              prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
              nameStart = this._index;
          }
          else {
              nameStart = nameOrPrefixStart;
          }
          this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
          const name = this._input.substring(nameStart, this._index);
          return [prefix, name];
      }
      _consumeTagOpen(start) {
          const savedPos = this._savePosition();
          let tagName;
          let lowercaseTagName;
          try {
              if (!isAsciiLetter(this._peek)) {
                  throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
              }
              const nameStart = this._index;
              this._consumeTagOpenStart(start);
              tagName = this._input.substring(nameStart, this._index);
              lowercaseTagName = tagName.toLowerCase();
              this._attemptCharCodeUntilFn(isNotWhitespace);
              while (this._peek !== $SLASH && this._peek !== $GT) {
                  this._consumeAttributeName();
                  this._attemptCharCodeUntilFn(isNotWhitespace);
                  if (this._attemptCharCode($EQ)) {
                      this._attemptCharCodeUntilFn(isNotWhitespace);
                      this._consumeAttributeValue();
                  }
                  this._attemptCharCodeUntilFn(isNotWhitespace);
              }
              this._consumeTagOpenEnd();
          }
          catch (e) {
              if (e instanceof _ControlFlowError) {
                  // When the start tag is invalid, assume we want a "<"
                  this._restorePosition(savedPos);
                  // Back to back text tokens are merged at the end
                  this._beginToken(TokenType$1.TEXT, start);
                  this._endToken(['<']);
                  return;
              }
              throw e;
          }
          const contentTokenType = this._getTagDefinition(tagName).contentType;
          if (contentTokenType === TagContentType.RAW_TEXT) {
              this._consumeRawTextWithTagClose(lowercaseTagName, false);
          }
          else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
              this._consumeRawTextWithTagClose(lowercaseTagName, true);
          }
      }
      _consumeRawTextWithTagClose(lowercaseTagName, decodeEntities) {
          const textToken = this._consumeRawText(decodeEntities, $LT, () => {
              if (!this._attemptCharCode($SLASH))
                  return false;
              this._attemptCharCodeUntilFn(isNotWhitespace);
              if (!this._attemptStrCaseInsensitive(lowercaseTagName))
                  return false;
              this._attemptCharCodeUntilFn(isNotWhitespace);
              return this._attemptCharCode($GT);
          });
          this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
          this._endToken([null, lowercaseTagName]);
      }
      _consumeTagOpenStart(start) {
          this._beginToken(TokenType$1.TAG_OPEN_START, start);
          const parts = this._consumePrefixAndName();
          this._endToken(parts);
      }
      _consumeAttributeName() {
          this._beginToken(TokenType$1.ATTR_NAME);
          const prefixAndName = this._consumePrefixAndName();
          this._endToken(prefixAndName);
      }
      _consumeAttributeValue() {
          this._beginToken(TokenType$1.ATTR_VALUE);
          let value;
          if (this._peek === $SQ || this._peek === $DQ) {
              const quoteChar = this._peek;
              this._advance();
              const parts = [];
              while (this._peek !== quoteChar) {
                  parts.push(this._readChar(true));
              }
              value = parts.join('');
              this._advance();
          }
          else {
              const valueStart = this._index;
              this._requireCharCodeUntilFn(isNameEnd, 1);
              value = this._input.substring(valueStart, this._index);
          }
          this._endToken([this._processCarriageReturns(value)]);
      }
      _consumeTagOpenEnd() {
          const tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
          this._beginToken(tokenType);
          this._requireCharCode($GT);
          this._endToken([]);
      }
      _consumeTagClose(start) {
          this._beginToken(TokenType$1.TAG_CLOSE, start);
          this._attemptCharCodeUntilFn(isNotWhitespace);
          const prefixAndName = this._consumePrefixAndName();
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._requireCharCode($GT);
          this._endToken(prefixAndName);
      }
      _consumeExpansionFormStart() {
          this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
          this._requireCharCode($LBRACE);
          this._endToken([]);
          this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
          this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
          const condition = this._readUntil($COMMA);
          this._endToken([condition], this._getLocation());
          this._requireCharCode($COMMA);
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
          const type = this._readUntil($COMMA);
          this._endToken([type], this._getLocation());
          this._requireCharCode($COMMA);
          this._attemptCharCodeUntilFn(isNotWhitespace);
      }
      _consumeExpansionCaseStart() {
          this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
          const value = this._readUntil($LBRACE).trim();
          this._endToken([value], this._getLocation());
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
          this._requireCharCode($LBRACE);
          this._endToken([], this._getLocation());
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
      }
      _consumeExpansionCaseEnd() {
          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
          this._requireCharCode($RBRACE);
          this._endToken([], this._getLocation());
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._expansionCaseStack.pop();
      }
      _consumeExpansionFormEnd() {
          this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
          this._requireCharCode($RBRACE);
          this._endToken([]);
          this._expansionCaseStack.pop();
      }
      _consumeText() {
          const start = this._getLocation();
          this._beginToken(TokenType$1.TEXT, start);
          const parts = [];
          do {
              if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
                  parts.push(this._interpolationConfig.start);
                  this._inInterpolation = true;
              }
              else if (this._interpolationConfig && this._inInterpolation &&
                  this._attemptStr(this._interpolationConfig.end)) {
                  parts.push(this._interpolationConfig.end);
                  this._inInterpolation = false;
              }
              else {
                  parts.push(this._readChar(true));
              }
          } while (!this._isTextEnd());
          this._endToken([this._processCarriageReturns(parts.join(''))]);
      }
      _isTextEnd() {
          if (this._peek === $LT || this._peek === $EOF) {
              return true;
          }
          if (this._tokenizeIcu && !this._inInterpolation) {
              if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
                  // start of an expansion form
                  return true;
              }
              if (this._peek === $RBRACE && this._isInExpansionCase()) {
                  // end of and expansion case
                  return true;
              }
          }
          return false;
      }
      _savePosition() {
          return [this._peek, this._index, this._column, this._line, this.tokens.length];
      }
      _readUntil(char) {
          const start = this._index;
          this._attemptUntilChar(char);
          return this._input.substring(start, this._index);
      }
      _restorePosition(position) {
          this._peek = position[0];
          this._index = position[1];
          this._column = position[2];
          this._line = position[3];
          const nbTokens = position[4];
          if (nbTokens < this.tokens.length) {
              // remove any extra tokens
              this.tokens = this.tokens.slice(0, nbTokens);
          }
      }
      _isInExpansionCase() {
          return this._expansionCaseStack.length > 0 &&
              this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
                  TokenType$1.EXPANSION_CASE_EXP_START;
      }
      _isInExpansionForm() {
          return this._expansionCaseStack.length > 0 &&
              this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
                  TokenType$1.EXPANSION_FORM_START;
      }
  }
  function isNotWhitespace(code) {
      return !isWhitespace(code) || code === $EOF;
  }
  function isNameEnd(code) {
      return isWhitespace(code) || code === $GT || code === $SLASH ||
          code === $SQ || code === $DQ || code === $EQ;
  }
  function isPrefixEnd(code) {
      return (code < $a || $z < code) && (code < $A || $Z < code) &&
          (code < $0 || code > $9);
  }
  function isDigitEntityEnd(code) {
      return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
  }
  function isNamedEntityEnd(code) {
      return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
  }
  function isExpansionFormStart(input, offset, interpolationConfig) {
      const isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
      return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
  }
  function isExpansionCaseStart(peek) {
      return peek === $EQ || isAsciiLetter(peek);
  }
  function compareCharCodeCaseInsensitive(code1, code2) {
      return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
  }
  function toUpperCaseCharCode(code) {
      return code >= $a && code <= $z ? code - $a + $A : code;
  }
  function mergeTextTokens(srcTokens) {
      const dstTokens = [];
      let lastDstToken;
      for (let i = 0; i < srcTokens.length; i++) {
          const token = srcTokens[i];
          if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
              lastDstToken.parts[0] += token.parts[0];
              lastDstToken.sourceSpan.end = token.sourceSpan.end;
          }
          else {
              lastDstToken = token;
              dstTokens.push(lastDstToken);
          }
      }
      return dstTokens;
  }

  class TreeError extends ParseError {
      constructor(elementName, span, msg) {
          super(span, msg);
          this.elementName = elementName;
      }
      static create(elementName, span, msg) {
          return new TreeError(elementName, span, msg);
      }
  }
  class ParseTreeResult {
      constructor(rootNodes, errors) {
          this.rootNodes = rootNodes;
          this.errors = errors;
      }
  }
  class Parser$1 {
      constructor(getTagDefinition) {
          this.getTagDefinition = getTagDefinition;
      }
      parse(source, url, parseExpansionForms = false, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
          const tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
          const treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
          return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
      }
  }
  class _TreeBuilder {
      constructor(tokens, getTagDefinition) {
          this.tokens = tokens;
          this.getTagDefinition = getTagDefinition;
          this._index = -1;
          this._rootNodes = [];
          this._errors = [];
          this._elementStack = [];
          this._advance();
      }
      build() {
          while (this._peek.type !== TokenType$1.EOF) {
              if (this._peek.type === TokenType$1.TAG_OPEN_START) {
                  this._consumeStartTag(this._advance());
              }
              else if (this._peek.type === TokenType$1.TAG_CLOSE) {
                  this._consumeEndTag(this._advance());
              }
              else if (this._peek.type === TokenType$1.CDATA_START) {
                  this._closeVoidElement();
                  this._consumeCdata(this._advance());
              }
              else if (this._peek.type === TokenType$1.COMMENT_START) {
                  this._closeVoidElement();
                  this._consumeComment(this._advance());
              }
              else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT ||
                  this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
                  this._closeVoidElement();
                  this._consumeText(this._advance());
              }
              else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
                  this._consumeExpansion(this._advance());
              }
              else {
                  // Skip all other tokens...
                  this._advance();
              }
          }
          return new ParseTreeResult(this._rootNodes, this._errors);
      }
      _advance() {
          const prev = this._peek;
          if (this._index < this.tokens.length - 1) {
              // Note: there is always an EOF token at the end
              this._index++;
          }
          this._peek = this.tokens[this._index];
          return prev;
      }
      _advanceIf(type) {
          if (this._peek.type === type) {
              return this._advance();
          }
          return null;
      }
      _consumeCdata(startToken) {
          this._consumeText(this._advance());
          this._advanceIf(TokenType$1.CDATA_END);
      }
      _consumeComment(token) {
          const text = this._advanceIf(TokenType$1.RAW_TEXT);
          this._advanceIf(TokenType$1.COMMENT_END);
          const value = isPresent$1(text) ? text.parts[0].trim() : null;
          this._addToParent(new Comment(value, token.sourceSpan));
      }
      _consumeExpansion(token) {
          const switchValue = this._advance();
          const type = this._advance();
          const cases = [];
          // read =
          while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
              const expCase = this._parseExpansionCase();
              if (!expCase)
                  return; // error
              cases.push(expCase);
          }
          // read the final }
          if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
              this._errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '}'.`));
              return;
          }
          const sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
          this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
          this._advance();
      }
      _parseExpansionCase() {
          const value = this._advance();
          // read {
          if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
              this._errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '{'.`));
              return null;
          }
          // read until }
          const start = this._advance();
          const exp = this._collectExpansionExpTokens(start);
          if (!exp)
              return null;
          const end = this._advance();
          exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
          // parse everything in between { and }
          const parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
          if (parsedExp.errors.length > 0) {
              this._errors = this._errors.concat(parsedExp.errors);
              return null;
          }
          const sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
          const expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
          return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
      }
      _collectExpansionExpTokens(start) {
          const exp = [];
          const expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];
          while (true) {
              if (this._peek.type === TokenType$1.EXPANSION_FORM_START ||
                  this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
                  expansionFormStack.push(this._peek.type);
              }
              if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
                  if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
                      expansionFormStack.pop();
                      if (expansionFormStack.length == 0)
                          return exp;
                  }
                  else {
                      this._errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
                      return null;
                  }
              }
              if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
                  if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
                      expansionFormStack.pop();
                  }
                  else {
                      this._errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
                      return null;
                  }
              }
              if (this._peek.type === TokenType$1.EOF) {
                  this._errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
                  return null;
              }
              exp.push(this._advance());
          }
      }
      _consumeText(token) {
          let text = token.parts[0];
          if (text.length > 0 && text[0] == '\n') {
              const parent = this._getParentElement();
              if (isPresent$1(parent) && parent.children.length == 0 &&
                  this.getTagDefinition(parent.name).ignoreFirstLf) {
                  text = text.substring(1);
              }
          }
          if (text.length > 0) {
              this._addToParent(new Text(text, token.sourceSpan));
          }
      }
      _closeVoidElement() {
          if (this._elementStack.length > 0) {
              const el = this._elementStack[this._elementStack.length - 1];
              if (this.getTagDefinition(el.name).isVoid) {
                  this._elementStack.pop();
              }
          }
      }
      _consumeStartTag(startTagToken) {
          const prefix = startTagToken.parts[0];
          const name = startTagToken.parts[1];
          const attrs = [];
          while (this._peek.type === TokenType$1.ATTR_NAME) {
              attrs.push(this._consumeAttr(this._advance()));
          }
          const fullName = this._getElementFullName(prefix, name, this._getParentElement());
          let selfClosing = false;
          // Note: There could have been a tokenizer error
          // so that we don't get a token for the end tag...
          if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
              this._advance();
              selfClosing = true;
              const tagDef = this.getTagDefinition(fullName);
              if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
                  this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, `Only void and foreign elements can be self closed "${startTagToken.parts[1]}"`));
              }
          }
          else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
              this._advance();
              selfClosing = false;
          }
          const end = this._peek.sourceSpan.start;
          const span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
          const el = new Element$1(fullName, attrs, [], span, span, null);
          this._pushElement(el);
          if (selfClosing) {
              this._popElement(fullName);
              el.endSourceSpan = span;
          }
      }
      _pushElement(el) {
          if (this._elementStack.length > 0) {
              const parentEl = this._elementStack[this._elementStack.length - 1];
              if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
                  this._elementStack.pop();
              }
          }
          const tagDef = this.getTagDefinition(el.name);
          const { parent, container } = this._getParentElementSkippingContainers();
          if (parent && tagDef.requireExtraParent(parent.name)) {
              const newParent = new Element$1(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
              this._insertBeforeContainer(parent, container, newParent);
          }
          this._addToParent(el);
          this._elementStack.push(el);
      }
      _consumeEndTag(endTagToken) {
          const fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
          if (this._getParentElement()) {
              this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
          }
          if (this.getTagDefinition(fullName).isVoid) {
              this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, `Void elements do not have end tags "${endTagToken.parts[1]}"`));
          }
          else if (!this._popElement(fullName)) {
              this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, `Unexpected closing tag "${endTagToken.parts[1]}"`));
          }
      }
      _popElement(fullName) {
          for (let stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
              const el = this._elementStack[stackIndex];
              if (el.name == fullName) {
                  this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
                  return true;
              }
              if (!this.getTagDefinition(el.name).closedByParent) {
                  return false;
              }
          }
          return false;
      }
      _consumeAttr(attrName) {
          const fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
          let end = attrName.sourceSpan.end;
          let value = '';
          let valueSpan;
          if (this._peek.type === TokenType$1.ATTR_VALUE) {
              const valueToken = this._advance();
              value = valueToken.parts[0];
              end = valueToken.sourceSpan.end;
              valueSpan = valueToken.sourceSpan;
          }
          return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
      }
      _getParentElement() {
          return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
      }
      /**
       * Returns the parent in the DOM and the container.
       *
       * `<ng-container>` elements are skipped as they are not rendered as DOM element.
       */
      _getParentElementSkippingContainers() {
          let container = null;
          for (let i = this._elementStack.length - 1; i >= 0; i--) {
              if (this._elementStack[i].name !== 'ng-container') {
                  return { parent: this._elementStack[i], container };
              }
              container = this._elementStack[i];
          }
          return { parent: this._elementStack[this._elementStack.length - 1], container };
      }
      _addToParent(node) {
          const parent = this._getParentElement();
          if (isPresent$1(parent)) {
              parent.children.push(node);
          }
          else {
              this._rootNodes.push(node);
          }
      }
      /**
       * Insert a node between the parent and the container.
       * When no container is given, the node is appended as a child of the parent.
       * Also updates the element stack accordingly.
       *
       * @internal
       */
      _insertBeforeContainer(parent, container, node) {
          if (!container) {
              this._addToParent(node);
              this._elementStack.push(node);
          }
          else {
              if (parent) {
                  // replace the container with the new node in the children
                  const index = parent.children.indexOf(container);
                  parent.children[index] = node;
              }
              else {
                  this._rootNodes.push(node);
              }
              node.children.push(container);
              this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
          }
      }
      _getElementFullName(prefix, localName, parentElement) {
          if (isBlank$1(prefix)) {
              prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
              if (isBlank$1(prefix) && isPresent$1(parentElement)) {
                  prefix = getNsPrefix(parentElement.name);
              }
          }
          return mergeNsAndName(prefix, localName);
      }
  }
  function lastOnStack(stack, element) {
      return stack.length > 0 && stack[stack.length - 1] === element;
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  class Message {
      /**
       * @param nodes message AST
       * @param placeholders maps placeholder names to static content
       * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
       * @param meaning
       * @param description
       * @param id
       */
      constructor(nodes, placeholders, placeholderToMessage, meaning, description, id) {
          this.nodes = nodes;
          this.placeholders = placeholders;
          this.placeholderToMessage = placeholderToMessage;
          this.meaning = meaning;
          this.description = description;
          this.id = id;
      }
  }
  class Text$1 {
      constructor(value, sourceSpan) {
          this.value = value;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) { return visitor.visitText(this, context); }
  }
  // TODO(vicb): do we really need this node (vs an array) ?
  class Container {
      constructor(children, sourceSpan) {
          this.children = children;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) { return visitor.visitContainer(this, context); }
  }
  class Icu {
      constructor(expression, type, cases, sourceSpan) {
          this.expression = expression;
          this.type = type;
          this.cases = cases;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) { return visitor.visitIcu(this, context); }
  }
  class TagPlaceholder {
      constructor(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
          this.tag = tag;
          this.attrs = attrs;
          this.startName = startName;
          this.closeName = closeName;
          this.children = children;
          this.isVoid = isVoid;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) { return visitor.visitTagPlaceholder(this, context); }
  }
  class Placeholder {
      constructor(value, name, sourceSpan) {
          this.value = value;
          this.name = name;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) { return visitor.visitPlaceholder(this, context); }
  }
  class IcuPlaceholder {
      constructor(value, name, sourceSpan) {
          this.value = value;
          this.name = name;
          this.sourceSpan = sourceSpan;
      }
      visit(visitor, context) { return visitor.visitIcuPlaceholder(this, context); }
  }
  // Clone the AST
  class CloneVisitor {
      visitText(text, context) { return new Text$1(text.value, text.sourceSpan); }
      visitContainer(container, context) {
          const children = container.children.map(n => n.visit(this, context));
          return new Container(children, container.sourceSpan);
      }
      visitIcu(icu, context) {
          const cases = {};
          Object.keys(icu.cases).forEach(key => cases[key] = icu.cases[key].visit(this, context));
          const msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan);
          msg.expressionPlaceholder = icu.expressionPlaceholder;
          return msg;
      }
      visitTagPlaceholder(ph, context) {
          const children = ph.children.map(n => n.visit(this, context));
          return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan);
      }
      visitPlaceholder(ph, context) {
          return new Placeholder(ph.value, ph.name, ph.sourceSpan);
      }
      visitIcuPlaceholder(ph, context) {
          return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);
      }
  }
  // Visit all the nodes recursively
  class RecurseVisitor {
      visitText(text, context) { }
      ;
      visitContainer(container, context) {
          container.children.forEach(child => child.visit(this));
      }
      visitIcu(icu, context) {
          Object.keys(icu.cases).forEach(k => { icu.cases[k].visit(this); });
      }
      visitTagPlaceholder(ph, context) {
          ph.children.forEach(child => child.visit(this));
      }
      visitPlaceholder(ph, context) { }
      ;
      visitIcuPlaceholder(ph, context) { }
      ;
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const TAG_TO_PLACEHOLDER_NAMES = {
      'A': 'LINK',
      'B': 'BOLD_TEXT',
      'BR': 'LINE_BREAK',
      'EM': 'EMPHASISED_TEXT',
      'H1': 'HEADING_LEVEL1',
      'H2': 'HEADING_LEVEL2',
      'H3': 'HEADING_LEVEL3',
      'H4': 'HEADING_LEVEL4',
      'H5': 'HEADING_LEVEL5',
      'H6': 'HEADING_LEVEL6',
      'HR': 'HORIZONTAL_RULE',
      'I': 'ITALIC_TEXT',
      'LI': 'LIST_ITEM',
      'LINK': 'MEDIA_LINK',
      'OL': 'ORDERED_LIST',
      'P': 'PARAGRAPH',
      'Q': 'QUOTATION',
      'S': 'STRIKETHROUGH_TEXT',
      'SMALL': 'SMALL_TEXT',
      'SUB': 'SUBSTRIPT',
      'SUP': 'SUPERSCRIPT',
      'TBODY': 'TABLE_BODY',
      'TD': 'TABLE_CELL',
      'TFOOT': 'TABLE_FOOTER',
      'TH': 'TABLE_HEADER_CELL',
      'THEAD': 'TABLE_HEADER',
      'TR': 'TABLE_ROW',
      'TT': 'MONOSPACED_TEXT',
      'U': 'UNDERLINED_TEXT',
      'UL': 'UNORDERED_LIST',
  };
  /**
   * Creates unique names for placeholder with different content.
   *
   * Returns the same placeholder name when the content is identical.
   *
   * @internal
   */
  class PlaceholderRegistry {
      constructor() {
          // Count the occurrence of the base name top generate a unique name
          this._placeHolderNameCounts = {};
          // Maps signature to placeholder names
          this._signatureToName = {};
      }
      getStartTagPlaceholderName(tag, attrs, isVoid) {
          const signature = this._hashTag(tag, attrs, isVoid);
          if (this._signatureToName[signature]) {
              return this._signatureToName[signature];
          }
          const upperTag = tag.toUpperCase();
          const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;
          const name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);
          this._signatureToName[signature] = name;
          return name;
      }
      getCloseTagPlaceholderName(tag) {
          const signature = this._hashClosingTag(tag);
          if (this._signatureToName[signature]) {
              return this._signatureToName[signature];
          }
          const upperTag = tag.toUpperCase();
          const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;
          const name = this._generateUniqueName(`CLOSE_${baseName}`);
          this._signatureToName[signature] = name;
          return name;
      }
      getPlaceholderName(name, content) {
          const upperName = name.toUpperCase();
          const signature = `PH: ${upperName}=${content}`;
          if (this._signatureToName[signature]) {
              return this._signatureToName[signature];
          }
          const uniqueName = this._generateUniqueName(upperName);
          this._signatureToName[signature] = uniqueName;
          return uniqueName;
      }
      getUniquePlaceholder(name) {
          return this._generateUniqueName(name.toUpperCase());
      }
      // Generate a hash for a tag - does not take attribute order into account
      _hashTag(tag, attrs, isVoid) {
          const start = `<${tag}`;
          const strAttrs = Object.keys(attrs).sort().map((name) => ` ${name}=${attrs[name]}`).join('');
          const end = isVoid ? '/>' : `></${tag}>`;
          return start + strAttrs + end;
      }
      _hashClosingTag(tag) { return this._hashTag(`/${tag}`, {}, false); }
      _generateUniqueName(base) {
          const seen = this._placeHolderNameCounts.hasOwnProperty(base);
          if (!seen) {
              this._placeHolderNameCounts[base] = 1;
              return base;
          }
          const id = this._placeHolderNameCounts[base];
          this._placeHolderNameCounts[base] = id + 1;
          return `${base}_${id}`;
      }
  }

  const _expParser = new Parser(new Lexer());
  /**
   * Returns a function converting html nodes to an i18n Message given an interpolationConfig
   */
  function createI18nMessageFactory(interpolationConfig) {
      const visitor = new _I18nVisitor(_expParser, interpolationConfig);
      return (nodes, meaning, description, id) => visitor.toI18nMessage(nodes, meaning, description, id);
  }
  class _I18nVisitor {
      constructor(_expressionParser, _interpolationConfig) {
          this._expressionParser = _expressionParser;
          this._interpolationConfig = _interpolationConfig;
      }
      toI18nMessage(nodes, meaning, description, id) {
          this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
          this._icuDepth = 0;
          this._placeholderRegistry = new PlaceholderRegistry();
          this._placeholderToContent = {};
          this._placeholderToMessage = {};
          const i18nodes = visitAll(this, nodes, {});
          return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);
      }
      visitElement(el, context) {
          const children = visitAll(this, el.children);
          const attrs = {};
          el.attrs.forEach(attr => {
              // Do not visit the attributes, translatable ones are top-level ASTs
              attrs[attr.name] = attr.value;
          });
          const isVoid = getHtmlTagDefinition(el.name).isVoid;
          const startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
          this._placeholderToContent[startPhName] = el.sourceSpan.toString();
          let closePhName = '';
          if (!isVoid) {
              closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
              this._placeholderToContent[closePhName] = `</${el.name}>`;
          }
          return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
      }
      visitAttribute(attribute, context) {
          return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
      }
      visitText(text, context) {
          return this._visitTextWithInterpolation(text.value, text.sourceSpan);
      }
      visitComment(comment, context) { return null; }
      visitExpansion(icu, context) {
          this._icuDepth++;
          const i18nIcuCases = {};
          const i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
          icu.cases.forEach((caze) => {
              i18nIcuCases[caze.value] = new Container(caze.expression.map((node) => node.visit(this, {})), caze.expSourceSpan);
          });
          this._icuDepth--;
          if (this._isIcu || this._icuDepth > 0) {
              // Returns an ICU node when:
              // - the message (vs a part of the message) is an ICU message, or
              // - the ICU message is nested.
              const expPh = this._placeholderRegistry.getUniquePlaceholder(`VAR_${icu.type}`);
              i18nIcu.expressionPlaceholder = expPh;
              this._placeholderToContent[expPh] = icu.switchValue;
              return i18nIcu;
          }
          // Else returns a placeholder
          // ICU placeholders should not be replaced with their original content but with the their
          // translations. We need to create a new visitor (they are not re-entrant) to compute the
          // message id.
          // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg
          const phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
          const visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
          this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '', '');
          return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
      }
      visitExpansionCase(icuCase, context) {
          throw new Error('Unreachable code');
      }
      _visitTextWithInterpolation(text, sourceSpan) {
          const splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
          if (!splitInterpolation) {
              // No expression, return a single text
              return new Text$1(text, sourceSpan);
          }
          // Return a group of text + expressions
          const nodes = [];
          const container = new Container(nodes, sourceSpan);
          const { start: sDelimiter, end: eDelimiter } = this._interpolationConfig;
          for (let i = 0; i < splitInterpolation.strings.length - 1; i++) {
              const expression = splitInterpolation.expressions[i];
              const baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
              const phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
              if (splitInterpolation.strings[i].length) {
                  // No need to add empty strings
                  nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
              }
              nodes.push(new Placeholder(expression, phName, sourceSpan));
              this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
          }
          // The last index contains no expression
          const lastStringIdx = splitInterpolation.strings.length - 1;
          if (splitInterpolation.strings[lastStringIdx].length) {
              nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
          }
          return container;
      }
  }
  const _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
  function _extractPlaceholderName(input) {
      return input.split(_CUSTOM_PH_EXP)[1];
  }

  /**
   * An i18n error.
   */
  class I18nError extends ParseError {
      constructor(span, msg) { super(span, msg); }
  }

  const _I18N_ATTR = 'i18n';
  const _I18N_ATTR_PREFIX = 'i18n-';
  const _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
  const MEANING_SEPARATOR = '|';
  const ID_SEPARATOR = '@@';
  /**
   * Extract translatable messages from an html AST
   */
  function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
      const visitor = new _Visitor(implicitTags, implicitAttrs);
      return visitor.extract(nodes, interpolationConfig);
  }
  function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
      const visitor = new _Visitor(implicitTags, implicitAttrs);
      return visitor.merge(nodes, translations, interpolationConfig);
  }
  class ExtractionResult {
      constructor(messages, errors) {
          this.messages = messages;
          this.errors = errors;
      }
  }
  var _VisitorMode;
  (function (_VisitorMode) {
      _VisitorMode[_VisitorMode["Extract"] = 0] = "Extract";
      _VisitorMode[_VisitorMode["Merge"] = 1] = "Merge";
  })(_VisitorMode || (_VisitorMode = {}));
  /**
   * This Visitor is used:
   * 1. to extract all the translatable strings from an html AST (see `extract()`),
   * 2. to replace the translatable strings with the actual translations (see `merge()`)
   *
   * @internal
   */
  class _Visitor {
      constructor(_implicitTags, _implicitAttrs) {
          this._implicitTags = _implicitTags;
          this._implicitAttrs = _implicitAttrs;
      }
      /**
       * Extracts the messages from the tree
       */
      extract(nodes, interpolationConfig) {
          this._init(_VisitorMode.Extract, interpolationConfig);
          nodes.forEach(node => node.visit(this, null));
          if (this._inI18nBlock) {
              this._reportError(nodes[nodes.length - 1], 'Unclosed block');
          }
          return new ExtractionResult(this._messages, this._errors);
      }
      /**
       * Returns a tree where all translatable nodes are translated
       */
      merge(nodes, translations, interpolationConfig) {
          this._init(_VisitorMode.Merge, interpolationConfig);
          this._translations = translations;
          // Construct a single fake root element
          const wrapper = new Element$1('wrapper', [], nodes, null, null, null);
          const translatedNode = wrapper.visit(this, null);
          if (this._inI18nBlock) {
              this._reportError(nodes[nodes.length - 1], 'Unclosed block');
          }
          return new ParseTreeResult(translatedNode.children, this._errors);
      }
      visitExpansionCase(icuCase, context) {
          // Parse cases for translatable html attributes
          const expression = visitAll(this, icuCase.expression, context);
          if (this._mode === _VisitorMode.Merge) {
              return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
          }
      }
      visitExpansion(icu, context) {
          this._mayBeAddBlockChildren(icu);
          const wasInIcu = this._inIcu;
          if (!this._inIcu) {
              // nested ICU messages should not be extracted but top-level translated as a whole
              if (this._isInTranslatableSection) {
                  this._addMessage([icu]);
              }
              this._inIcu = true;
          }
          const cases = visitAll(this, icu.cases, context);
          if (this._mode === _VisitorMode.Merge) {
              icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
          }
          this._inIcu = wasInIcu;
          return icu;
      }
      visitComment(comment, context) {
          const isOpening = _isOpeningComment(comment);
          if (isOpening && this._isInTranslatableSection) {
              this._reportError(comment, 'Could not start a block inside a translatable section');
              return;
          }
          const isClosing = _isClosingComment(comment);
          if (isClosing && !this._inI18nBlock) {
              this._reportError(comment, 'Trying to close an unopened block');
              return;
          }
          if (!this._inI18nNode && !this._inIcu) {
              if (!this._inI18nBlock) {
                  if (isOpening) {
                      this._inI18nBlock = true;
                      this._blockStartDepth = this._depth;
                      this._blockChildren = [];
                      this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
                      this._openTranslatableSection(comment);
                  }
              }
              else {
                  if (isClosing) {
                      if (this._depth == this._blockStartDepth) {
                          this._closeTranslatableSection(comment, this._blockChildren);
                          this._inI18nBlock = false;
                          const message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
                          // merge attributes in sections
                          const nodes = this._translateMessage(comment, message);
                          return visitAll(this, nodes);
                      }
                      else {
                          this._reportError(comment, 'I18N blocks should not cross element boundaries');
                          return;
                      }
                  }
              }
          }
      }
      visitText(text, context) {
          if (this._isInTranslatableSection) {
              this._mayBeAddBlockChildren(text);
          }
          return text;
      }
      visitElement(el, context) {
          this._mayBeAddBlockChildren(el);
          this._depth++;
          const wasInI18nNode = this._inI18nNode;
          const wasInImplicitNode = this._inImplicitNode;
          let childNodes = [];
          let translatedChildNodes;
          // Extract:
          // - top level nodes with the (implicit) "i18n" attribute if not already in a section
          // - ICU messages
          const i18nAttr = _getI18nAttr(el);
          const i18nMeta = i18nAttr ? i18nAttr.value : '';
          const isImplicit = this._implicitTags.some(tag => el.name === tag) && !this._inIcu &&
              !this._isInTranslatableSection;
          const isTopLevelImplicit = !wasInImplicitNode && isImplicit;
          this._inImplicitNode = wasInImplicitNode || isImplicit;
          if (!this._isInTranslatableSection && !this._inIcu) {
              if (i18nAttr || isTopLevelImplicit) {
                  this._inI18nNode = true;
                  const message = this._addMessage(el.children, i18nMeta);
                  translatedChildNodes = this._translateMessage(el, message);
              }
              if (this._mode == _VisitorMode.Extract) {
                  const isTranslatable = i18nAttr || isTopLevelImplicit;
                  if (isTranslatable)
                      this._openTranslatableSection(el);
                  visitAll(this, el.children);
                  if (isTranslatable)
                      this._closeTranslatableSection(el, el.children);
              }
          }
          else {
              if (i18nAttr || isTopLevelImplicit) {
                  this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
              }
              if (this._mode == _VisitorMode.Extract) {
                  // Descend into child nodes for extraction
                  visitAll(this, el.children);
              }
          }
          if (this._mode === _VisitorMode.Merge) {
              const visitNodes = translatedChildNodes || el.children;
              visitNodes.forEach(child => {
                  const visited = child.visit(this, context);
                  if (visited && !this._isInTranslatableSection) {
                      // Do not add the children from translatable sections (= i18n blocks here)
                      // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)
                      childNodes = childNodes.concat(visited);
                  }
              });
          }
          this._visitAttributesOf(el);
          this._depth--;
          this._inI18nNode = wasInI18nNode;
          this._inImplicitNode = wasInImplicitNode;
          if (this._mode === _VisitorMode.Merge) {
              const translatedAttrs = this._translateAttributes(el);
              return new Element$1(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
          }
      }
      visitAttribute(attribute, context) {
          throw new Error('unreachable code');
      }
      _init(mode, interpolationConfig) {
          this._mode = mode;
          this._inI18nBlock = false;
          this._inI18nNode = false;
          this._depth = 0;
          this._inIcu = false;
          this._msgCountAtSectionStart = void 0;
          this._errors = [];
          this._messages = [];
          this._inImplicitNode = false;
          this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
      }
      // looks for translatable attributes
      _visitAttributesOf(el) {
          const explicitAttrNameToValue = {};
          const implicitAttrNames = this._implicitAttrs[el.name] || [];
          el.attrs.filter(attr => attr.name.startsWith(_I18N_ATTR_PREFIX))
              .forEach(attr => explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
              attr.value);
          el.attrs.forEach(attr => {
              if (attr.name in explicitAttrNameToValue) {
                  this._addMessage([attr], explicitAttrNameToValue[attr.name]);
              }
              else if (implicitAttrNames.some(name => attr.name === name)) {
                  this._addMessage([attr]);
              }
          });
      }
      // add a translatable message
      _addMessage(ast, msgMeta) {
          if (ast.length == 0 ||
              ast.length == 1 && ast[0] instanceof Attribute$1 && !ast[0].value) {
              // Do not create empty messages
              return;
          }
          const { meaning, description, id } = _parseMessageMeta(msgMeta);
          const message = this._createI18nMessage(ast, meaning, description, id);
          this._messages.push(message);
          return message;
      }
      // Translates the given message given the `TranslationBundle`
      // This is used for translating elements / blocks - see `_translateAttributes` for attributes
      // no-op when called in extraction mode (returns [])
      _translateMessage(el, message) {
          if (message && this._mode === _VisitorMode.Merge) {
              const nodes = this._translations.get(message);
              if (nodes) {
                  return nodes;
              }
              this._reportError(el, `Translation unavailable for message id="${this._translations.digest(message)}"`);
          }
          return [];
      }
      // translate the attributes of an element and remove i18n specific attributes
      _translateAttributes(el) {
          const attributes = el.attrs;
          const i18nAttributeMeanings = {};
          attributes.forEach(attr => {
              if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
                  i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
                      _parseMessageMeta(attr.value).meaning;
              }
          });
          const translatedAttributes = [];
          attributes.forEach((attr) => {
              if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
                  // strip i18n specific attributes
                  return;
              }
              if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {
                  const meaning = i18nAttributeMeanings[attr.name];
                  const message = this._createI18nMessage([attr], meaning, '', '');
                  const nodes = this._translations.get(message);
                  if (nodes) {
                      if (nodes.length == 0) {
                          translatedAttributes.push(new Attribute$1(attr.name, '', attr.sourceSpan));
                      }
                      else if (nodes[0] instanceof Text) {
                          const value = nodes[0].value;
                          translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
                      }
                      else {
                          this._reportError(el, `Unexpected translation for attribute "${attr.name}" (id="${this._translations.digest(message)}")`);
                      }
                  }
                  else {
                      this._reportError(el, `Translation unavailable for attribute "${attr.name}" (id="${this._translations.digest(message)}")`);
                  }
              }
              else {
                  translatedAttributes.push(attr);
              }
          });
          return translatedAttributes;
      }
      /**
       * Add the node as a child of the block when:
       * - we are in a block,
       * - we are not inside a ICU message (those are handled separately),
       * - the node is a "direct child" of the block
       */
      _mayBeAddBlockChildren(node) {
          if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
              this._blockChildren.push(node);
          }
      }
      /**
       * Marks the start of a section, see `_closeTranslatableSection`
       */
      _openTranslatableSection(node) {
          if (this._isInTranslatableSection) {
              this._reportError(node, 'Unexpected section start');
          }
          else {
              this._msgCountAtSectionStart = this._messages.length;
          }
      }
      /**
       * A translatable section could be:
       * - the content of translatable element,
       * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
       */
      get _isInTranslatableSection() {
          return this._msgCountAtSectionStart !== void 0;
      }
      /**
       * Terminates a section.
       *
       * If a section has only one significant children (comments not significant) then we should not
       * keep the message from this children:
       *
       * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
       * - one for the <p> content with meaning and description,
       * - another one for the ICU message.
       *
       * In this case the last message is discarded as it contains less information (the AST is
       * otherwise identical).
       *
       * Note that we should still keep messages extracted from attributes inside the section (ie in the
       * ICU message here)
       */
      _closeTranslatableSection(node, directChildren) {
          if (!this._isInTranslatableSection) {
              this._reportError(node, 'Unexpected section end');
              return;
          }
          const startIndex = this._msgCountAtSectionStart;
          const significantChildren = directChildren.reduce((count, node) => count + (node instanceof Comment ? 0 : 1), 0);
          if (significantChildren == 1) {
              for (let i = this._messages.length - 1; i >= startIndex; i--) {
                  const ast = this._messages[i].nodes;
                  if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
                      this._messages.splice(i, 1);
                      break;
                  }
              }
          }
          this._msgCountAtSectionStart = void 0;
      }
      _reportError(node, msg) {
          this._errors.push(new I18nError(node.sourceSpan, msg));
      }
  }
  function _isOpeningComment(n) {
      return n instanceof Comment && n.value && n.value.startsWith('i18n');
  }
  function _isClosingComment(n) {
      return n instanceof Comment && n.value && n.value === '/i18n';
  }
  function _getI18nAttr(p) {
      return p.attrs.find(attr => attr.name === _I18N_ATTR) || null;
  }
  function _parseMessageMeta(i18n) {
      if (!i18n)
          return { meaning: '', description: '', id: '' };
      const idIndex = i18n.indexOf(ID_SEPARATOR);
      const descIndex = i18n.indexOf(MEANING_SEPARATOR);
      const [meaningAndDesc, id] = (idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''];
      const [meaning, description] = (descIndex > -1) ?
          [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :
          ['', meaningAndDesc];
      return { meaning, description, id };
  }

  class XmlTagDefinition {
      constructor() {
          this.closedByParent = false;
          this.contentType = TagContentType.PARSABLE_DATA;
          this.isVoid = false;
          this.ignoreFirstLf = false;
          this.canSelfClose = true;
      }
      requireExtraParent(currentParent) { return false; }
      isClosedByChild(name) { return false; }
  }
  const _TAG_DEFINITION = new XmlTagDefinition();
  function getXmlTagDefinition(tagName) {
      return _TAG_DEFINITION;
  }

  class XmlParser extends Parser$1 {
      constructor() { super(getXmlTagDefinition); }
      parse(source, url, parseExpansionForms = false) {
          return super.parse(source, url, parseExpansionForms, null);
      }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function digest(message) {
      return message.id || sha1(serializeNodes(message.nodes).join('') + `[${message.meaning}]`);
  }
  function decimalDigest(message) {
      if (message.id) {
          return message.id;
      }
      const visitor = new _SerializerIgnoreIcuExpVisitor();
      const parts = message.nodes.map(a => a.visit(visitor, null));
      return computeMsgId(parts.join(''), message.meaning);
  }
  /**
   * Serialize the i18n ast to something xml-like in order to generate an UID.
   *
   * The visitor is also used in the i18n parser tests
   *
   * @internal
   */
  class _SerializerVisitor {
      visitText(text, context) { return text.value; }
      visitContainer(container, context) {
          return `[${container.children.map(child => child.visit(this)).join(', ')}]`;
      }
      visitIcu(icu, context) {
          const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
          return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;
      }
      visitTagPlaceholder(ph, context) {
          return ph.isVoid ?
              `<ph tag name="${ph.startName}"/>` :
              `<ph tag name="${ph.startName}">${ph.children.map(child => child.visit(this)).join(', ')}</ph name="${ph.closeName}">`;
      }
      visitPlaceholder(ph, context) {
          return ph.value ? `<ph name="${ph.name}">${ph.value}</ph>` : `<ph name="${ph.name}"/>`;
      }
      visitIcuPlaceholder(ph, context) {
          return `<ph icu name="${ph.name}">${ph.value.visit(this)}</ph>`;
      }
  }
  const serializerVisitor = new _SerializerVisitor();
  function serializeNodes(nodes) {
      return nodes.map(a => a.visit(serializerVisitor, null));
  }
  /**
   * Serialize the i18n ast to something xml-like in order to generate an UID.
   *
   * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.
   *
   * @internal
   */
  class _SerializerIgnoreIcuExpVisitor extends _SerializerVisitor {
      visitIcu(icu, context) {
          let strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
          // Do not take the expression into account
          return `{${icu.type}, ${strCases.join(', ')}}`;
      }
  }
  /**
   * Compute the SHA1 of the given string
   *
   * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
   *
   * WARNING: this function has not been designed not tested with security in mind.
   *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
   */
  function sha1(str) {
      const utf8 = utf8Encode(str);
      const words32 = stringToWords32(utf8, Endian.Big);
      const len = utf8.length * 8;
      const w = new Array(80);
      let [a, b, c, d, e] = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
      words32[len >> 5] |= 0x80 << (24 - len % 32);
      words32[((len + 64 >> 9) << 4) + 15] = len;
      for (let i = 0; i < words32.length; i += 16) {
          const [h0, h1, h2, h3, h4] = [a, b, c, d, e];
          for (let j = 0; j < 80; j++) {
              if (j < 16) {
                  w[j] = words32[i + j];
              }
              else {
                  w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
              }
              const [f, k] = fk(j, b, c, d);
              const temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
              [e, d, c, b, a] = [d, c, rol32(b, 30), a, temp];
          }
          [a, b, c, d, e] = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)];
      }
      return byteStringToHexString(words32ToByteString([a, b, c, d, e]));
  }
  function fk(index, b, c, d) {
      if (index < 20) {
          return [(b & c) | (~b & d), 0x5a827999];
      }
      if (index < 40) {
          return [b ^ c ^ d, 0x6ed9eba1];
      }
      if (index < 60) {
          return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
      }
      return [b ^ c ^ d, 0xca62c1d6];
  }
  /**
   * Compute the fingerprint of the given string
   *
   * The output is 64 bit number encoded as a decimal string
   *
   * based on:
   * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java
   */
  function fingerprint(str) {
      const utf8 = utf8Encode(str);
      let [hi, lo] = [hash32(utf8, 0), hash32(utf8, 102072)];
      if (hi == 0 && (lo == 0 || lo == 1)) {
          hi = hi ^ 0x130f9bef;
          lo = lo ^ -0x6b5f56d8;
      }
      return [hi, lo];
  }
  function computeMsgId(msg, meaning) {
      let [hi, lo] = fingerprint(msg);
      if (meaning) {
          const [him, lom] = fingerprint(meaning);
          [hi, lo] = add64(rol64([hi, lo], 1), [him, lom]);
      }
      return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));
  }
  function hash32(str, c) {
      let [a, b] = [0x9e3779b9, 0x9e3779b9];
      let i;
      const len = str.length;
      for (i = 0; i + 12 <= len; i += 12) {
          a = add32(a, wordAt(str, i, Endian.Little));
          b = add32(b, wordAt(str, i + 4, Endian.Little));
          c = add32(c, wordAt(str, i + 8, Endian.Little));
          [a, b, c] = mix([a, b, c]);
      }
      a = add32(a, wordAt(str, i, Endian.Little));
      b = add32(b, wordAt(str, i + 4, Endian.Little));
      // the first byte of c is reserved for the length
      c = add32(c, len);
      c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);
      return mix([a, b, c])[2];
  }
  // clang-format off
  function mix([a, b, c]) {
      a = sub32(a, b);
      a = sub32(a, c);
      a ^= c >>> 13;
      b = sub32(b, c);
      b = sub32(b, a);
      b ^= a << 8;
      c = sub32(c, a);
      c = sub32(c, b);
      c ^= b >>> 13;
      a = sub32(a, b);
      a = sub32(a, c);
      a ^= c >>> 12;
      b = sub32(b, c);
      b = sub32(b, a);
      b ^= a << 16;
      c = sub32(c, a);
      c = sub32(c, b);
      c ^= b >>> 5;
      a = sub32(a, b);
      a = sub32(a, c);
      a ^= c >>> 3;
      b = sub32(b, c);
      b = sub32(b, a);
      b ^= a << 10;
      c = sub32(c, a);
      c = sub32(c, b);
      c ^= b >>> 15;
      return [a, b, c];
  }
  // clang-format on
  // Utils
  var Endian;
  (function (Endian) {
      Endian[Endian["Little"] = 0] = "Little";
      Endian[Endian["Big"] = 1] = "Big";
  })(Endian || (Endian = {}));
  function utf8Encode(str) {
      let encoded = '';
      for (let index = 0; index < str.length; index++) {
          const codePoint = decodeSurrogatePairs(str, index);
          if (codePoint <= 0x7f) {
              encoded += String.fromCharCode(codePoint);
          }
          else if (codePoint <= 0x7ff) {
              encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);
          }
          else if (codePoint <= 0xffff) {
              encoded += String.fromCharCode(0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
          }
          else if (codePoint <= 0x1fffff) {
              encoded += String.fromCharCode(0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
          }
      }
      return encoded;
  }
  // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
  function decodeSurrogatePairs(str, index) {
      if (index < 0 || index >= str.length) {
          throw new Error(`index=${index} is out of range in "${str}"`);
      }
      const high = str.charCodeAt(index);
      if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {
          const low = byteAt(str, index + 1);
          if (low >= 0xdc00 && low <= 0xdfff) {
              return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
          }
      }
      return high;
  }
  function add32(a, b) {
      return add32to64(a, b)[1];
  }
  function add32to64(a, b) {
      const low = (a & 0xffff) + (b & 0xffff);
      const high = (a >>> 16) + (b >>> 16) + (low >>> 16);
      return [high >>> 16, (high << 16) | (low & 0xffff)];
  }
  function add64([ah, al], [bh, bl]) {
      const [carry, l] = add32to64(al, bl);
      const h = add32(add32(ah, bh), carry);
      return [h, l];
  }
  function sub32(a, b) {
      const low = (a & 0xffff) - (b & 0xffff);
      const high = (a >> 16) - (b >> 16) + (low >> 16);
      return (high << 16) | (low & 0xffff);
  }
  // Rotate a 32b number left `count` position
  function rol32(a, count) {
      return (a << count) | (a >>> (32 - count));
  }
  // Rotate a 64b number left `count` position
  function rol64([hi, lo], count) {
      const h = (hi << count) | (lo >>> (32 - count));
      const l = (lo << count) | (hi >>> (32 - count));
      return [h, l];
  }
  function stringToWords32(str, endian) {
      const words32 = Array((str.length + 3) >>> 2);
      for (let i = 0; i < words32.length; i++) {
          words32[i] = wordAt(str, i * 4, endian);
      }
      return words32;
  }
  function byteAt(str, index) {
      return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;
  }
  function wordAt(str, index, endian) {
      let word = 0;
      if (endian === Endian.Big) {
          for (let i = 0; i < 4; i++) {
              word += byteAt(str, index + i) << (24 - 8 * i);
          }
      }
      else {
          for (let i = 0; i < 4; i++) {
              word += byteAt(str, index + i) << 8 * i;
          }
      }
      return word;
  }
  function words32ToByteString(words32) {
      return words32.reduce((str, word) => str + word32ToByteString(word), '');
  }
  function word32ToByteString(word) {
      let str = '';
      for (let i = 0; i < 4; i++) {
          str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);
      }
      return str;
  }
  function byteStringToHexString(str) {
      let hex = '';
      for (let i = 0; i < str.length; i++) {
          const b = byteAt(str, i);
          hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);
      }
      return hex.toLowerCase();
  }
  // based on http://www.danvk.org/hex2dec.html (JS can not handle more than 56b)
  function byteStringToDecString(str) {
      let decimal = '';
      let toThePower = '1';
      for (let i = str.length - 1; i >= 0; i--) {
          decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));
          toThePower = numberTimesBigInt(256, toThePower);
      }
      return decimal.split('').reverse().join('');
  }
  // x and y decimal, lowest significant digit first
  function addBigInt(x, y) {
      let sum = '';
      const len = Math.max(x.length, y.length);
      for (let i = 0, carry = 0; i < len || carry; i++) {
          const tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);
          if (tmpSum >= 10) {
              carry = 1;
              sum += tmpSum - 10;
          }
          else {
              carry = 0;
              sum += tmpSum;
          }
      }
      return sum;
  }
  function numberTimesBigInt(num, b) {
      let product = '';
      let bToThePower = b;
      for (; num !== 0; num = num >>> 1) {
          if (num & 1)
              product = addBigInt(product, bToThePower);
          bToThePower = addBigInt(bToThePower, bToThePower);
      }
      return product;
  }

  class Serializer {
      // Creates a name mapper, see `PlaceholderMapper`
      // Returning `null` means that no name mapping is used.
      createNameMapper(message) { return null; }
  }
  /**
   * A simple mapper that take a function to transform an internal name to a public name
   */
  class SimplePlaceholderMapper extends RecurseVisitor {
      // create a mapping from the message
      constructor(message, mapName) {
          super();
          this.mapName = mapName;
          this.internalToPublic = {};
          this.publicToNextId = {};
          this.publicToInternal = {};
          message.nodes.forEach(node => node.visit(this));
      }
      toPublicName(internalName) {
          return this.internalToPublic.hasOwnProperty(internalName) ?
              this.internalToPublic[internalName] :
              null;
      }
      toInternalName(publicName) {
          return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :
              null;
      }
      visitText(text, context) { return null; }
      visitTagPlaceholder(ph, context) {
          this.visitPlaceholderName(ph.startName);
          super.visitTagPlaceholder(ph, context);
          this.visitPlaceholderName(ph.closeName);
      }
      visitPlaceholder(ph, context) { this.visitPlaceholderName(ph.name); }
      visitIcuPlaceholder(ph, context) {
          this.visitPlaceholderName(ph.name);
      }
      // XMB placeholders could only contains A-Z, 0-9 and _
      visitPlaceholderName(internalName) {
          if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {
              return;
          }
          let publicName = this.mapName(internalName);
          if (this.publicToInternal.hasOwnProperty(publicName)) {
              // Create a new XMB when it has already been used
              const nextId = this.publicToNextId[publicName];
              this.publicToNextId[publicName] = nextId + 1;
              publicName = `${publicName}_${nextId}`;
          }
          else {
              this.publicToNextId[publicName] = 1;
          }
          this.internalToPublic[internalName] = publicName;
          this.publicToInternal[publicName] = internalName;
      }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  class _Visitor$1 {
      visitTag(tag) {
          const strAttrs = this._serializeAttributes(tag.attrs);
          if (tag.children.length == 0) {
              return `<${tag.name}${strAttrs}/>`;
          }
          const strChildren = tag.children.map(node => node.visit(this));
          return `<${tag.name}${strAttrs}>${strChildren.join('')}</${tag.name}>`;
      }
      visitText(text) { return text.value; }
      visitDeclaration(decl) {
          return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;
      }
      _serializeAttributes(attrs) {
          const strAttrs = Object.keys(attrs).map((name) => `${name}="${attrs[name]}"`).join(' ');
          return strAttrs.length > 0 ? ' ' + strAttrs : '';
      }
      visitDoctype(doctype) {
          return `<!DOCTYPE ${doctype.rootTag} [\n${doctype.dtd}\n]>`;
      }
  }
  const _visitor = new _Visitor$1();
  function serialize(nodes) {
      return nodes.map((node) => node.visit(_visitor)).join('');
  }
  class Declaration {
      constructor(unescapedAttrs) {
          this.attrs = {};
          Object.keys(unescapedAttrs).forEach((k) => {
              this.attrs[k] = _escapeXml(unescapedAttrs[k]);
          });
      }
      visit(visitor) { return visitor.visitDeclaration(this); }
  }
  class Doctype {
      constructor(rootTag, dtd) {
          this.rootTag = rootTag;
          this.dtd = dtd;
      }
      ;
      visit(visitor) { return visitor.visitDoctype(this); }
  }
  class Tag {
      constructor(name, unescapedAttrs = {}, children = []) {
          this.name = name;
          this.children = children;
          this.attrs = {};
          Object.keys(unescapedAttrs).forEach((k) => {
              this.attrs[k] = _escapeXml(unescapedAttrs[k]);
          });
      }
      visit(visitor) { return visitor.visitTag(this); }
  }
  class Text$2 {
      constructor(unescapedValue) { this.value = _escapeXml(unescapedValue); }
      ;
      visit(visitor) { return visitor.visitText(this); }
  }
  class CR extends Text$2 {
      constructor(ws = 0) { super(`\n${new Array(ws + 1).join(' ')}`); }
  }
  const _ESCAPED_CHARS = [
      [/&/g, '&amp;'],
      [/"/g, '&quot;'],
      [/'/g, '&apos;'],
      [/</g, '&lt;'],
      [/>/g, '&gt;'],
  ];
  function _escapeXml(text) {
      return _ESCAPED_CHARS.reduce((text, entry) => text.replace(entry[0], entry[1]), text);
  }

  const _VERSION = '1.2';
  const _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
  // TODO(vicb): make this a param (s/_/-/)
  const _DEFAULT_SOURCE_LANG = 'en';
  const _PLACEHOLDER_TAG = 'x';
  const _FILE_TAG = 'file';
  const _SOURCE_TAG = 'source';
  const _TARGET_TAG = 'target';
  const _UNIT_TAG = 'trans-unit';
  // http://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html
  // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html
  class Xliff extends Serializer {
      write(messages, locale) {
          const visitor = new _WriteVisitor();
          const transUnits = [];
          messages.forEach(message => {
              const transUnit = new Tag(_UNIT_TAG, { id: message.id, datatype: 'html' });
              transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG));
              if (message.description) {
                  transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$2(message.description)]));
              }
              if (message.meaning) {
                  transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$2(message.meaning)]));
              }
              transUnit.children.push(new CR(6));
              transUnits.push(new CR(6), transUnit);
          });
          const body = new Tag('body', {}, [...transUnits, new CR(4)]);
          const file = new Tag('file', {
              'source-language': locale || _DEFAULT_SOURCE_LANG,
              datatype: 'plaintext',
              original: 'ng2.template',
          }, [new CR(4), body, new CR(2)]);
          const xliff = new Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [new CR(2), file, new CR()]);
          return serialize([
              new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()
          ]);
      }
      load(content, url) {
          // xliff to xml nodes
          const xliffParser = new XliffParser();
          const { locale, mlNodesByMsgId, errors } = xliffParser.parse(content, url);
          // xml nodes to i18n nodes
          const i18nNodesByMsgId = {};
          const converter = new XmlToI18n();
          Object.keys(mlNodesByMsgId).forEach(msgId => {
              const { i18nNodes, errors: e } = converter.convert(mlNodesByMsgId[msgId]);
              errors.push(...e);
              i18nNodesByMsgId[msgId] = i18nNodes;
          });
          if (errors.length) {
              throw new Error(`xliff parse errors:\n${errors.join('\n')}`);
          }
          return { locale, i18nNodesByMsgId };
      }
      digest(message) { return digest(message); }
  }
  class _WriteVisitor {
      visitText(text, context) { return [new Text$2(text.value)]; }
      visitContainer(container, context) {
          const nodes = [];
          container.children.forEach((node) => nodes.push(...node.visit(this)));
          return nodes;
      }
      visitIcu(icu, context) {
          if (this._isInIcu) {
              // nested ICU is not supported
              throw new Error('xliff does not support nested ICU messages');
          }
          this._isInIcu = true;
          // TODO(vicb): support ICU messages
          // https://lists.oasis-open.org/archives/xliff/201201/msg00028.html
          // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-po/xliff-profile-po-1.2-cd02.html
          const nodes = [];
          this._isInIcu = false;
          return nodes;
      }
      visitTagPlaceholder(ph, context) {
          const ctype = getCtypeForTag(ph.tag);
          const startTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype });
          if (ph.isVoid) {
              // void tags have no children nor closing tags
              return [startTagPh];
          }
          const closeTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype });
          return [startTagPh, ...this.serialize(ph.children), closeTagPh];
      }
      visitPlaceholder(ph, context) {
          return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
      }
      visitIcuPlaceholder(ph, context) {
          return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
      }
      serialize(nodes) {
          this._isInIcu = false;
          return [].concat(...nodes.map(node => node.visit(this)));
      }
  }
  // TODO(vicb): add error management (structure)
  // Extract messages as xml nodes from the xliff file
  class XliffParser {
      constructor() {
          this._locale = null;
      }
      parse(xliff, url) {
          this._unitMlNodes = [];
          this._mlNodesByMsgId = {};
          const xml = new XmlParser().parse(xliff, url, false);
          this._errors = xml.errors;
          visitAll(this, xml.rootNodes, null);
          return {
              mlNodesByMsgId: this._mlNodesByMsgId,
              errors: this._errors,
              locale: this._locale,
          };
      }
      visitElement(element, context) {
          switch (element.name) {
              case _UNIT_TAG:
                  this._unitMlNodes = null;
                  const idAttr = element.attrs.find((attr) => attr.name === 'id');
                  if (!idAttr) {
                      this._addError(element, `<${_UNIT_TAG}> misses the "id" attribute`);
                  }
                  else {
                      const id = idAttr.value;
                      if (this._mlNodesByMsgId.hasOwnProperty(id)) {
                          this._addError(element, `Duplicated translations for msg ${id}`);
                      }
                      else {
                          visitAll(this, element.children, null);
                          if (this._unitMlNodes) {
                              this._mlNodesByMsgId[id] = this._unitMlNodes;
                          }
                          else {
                              this._addError(element, `Message ${id} misses a translation`);
                          }
                      }
                  }
                  break;
              case _SOURCE_TAG:
                  // ignore source message
                  break;
              case _TARGET_TAG:
                  this._unitMlNodes = element.children;
                  break;
              case _FILE_TAG:
                  const localeAttr = element.attrs.find((attr) => attr.name === 'target-language');
                  if (localeAttr) {
                      this._locale = localeAttr.value;
                  }
                  visitAll(this, element.children, null);
                  break;
              default:
                  // TODO(vicb): assert file structure, xliff version
                  // For now only recurse on unhandled nodes
                  visitAll(this, element.children, null);
          }
      }
      visitAttribute(attribute, context) { }
      visitText(text, context) { }
      visitComment(comment, context) { }
      visitExpansion(expansion, context) { }
      visitExpansionCase(expansionCase, context) { }
      _addError(node, message) {
          this._errors.push(new I18nError(node.sourceSpan, message));
      }
  }
  // Convert ml nodes (xliff syntax) to i18n nodes
  class XmlToI18n {
      convert(nodes) {
          this._errors = [];
          return {
              i18nNodes: visitAll(this, nodes),
              errors: this._errors,
          };
      }
      visitText(text, context) { return new Text$1(text.value, text.sourceSpan); }
      visitElement(el, context) {
          if (el.name === _PLACEHOLDER_TAG) {
              const nameAttr = el.attrs.find((attr) => attr.name === 'id');
              if (nameAttr) {
                  return new Placeholder('', nameAttr.value, el.sourceSpan);
              }
              this._addError(el, `<${_PLACEHOLDER_TAG}> misses the "id" attribute`);
          }
          else {
              this._addError(el, `Unexpected tag`);
          }
      }
      visitExpansion(icu, context) { }
      visitExpansionCase(icuCase, context) { }
      visitComment(comment, context) { }
      visitAttribute(attribute, context) { }
      _addError(node, message) {
          this._errors.push(new I18nError(node.sourceSpan, message));
      }
  }
  function getCtypeForTag(tag) {
      switch (tag.toLowerCase()) {
          case 'br':
              return 'lb';
          case 'img':
              return 'image';
          default:
              return `x-${tag}`;
      }
  }

  const _MESSAGES_TAG = 'messagebundle';
  const _MESSAGE_TAG = 'msg';
  const _PLACEHOLDER_TAG$1 = 'ph';
  const _EXEMPLE_TAG = 'ex';
  const _DOCTYPE = `<!ELEMENT messagebundle (msg)*>
<!ATTLIST messagebundle class CDATA #IMPLIED>

<!ELEMENT msg (#PCDATA|ph|source)*>
<!ATTLIST msg id CDATA #IMPLIED>
<!ATTLIST msg seq CDATA #IMPLIED>
<!ATTLIST msg name CDATA #IMPLIED>
<!ATTLIST msg desc CDATA #IMPLIED>
<!ATTLIST msg meaning CDATA #IMPLIED>
<!ATTLIST msg obsolete (obsolete) #IMPLIED>
<!ATTLIST msg xml:space (default|preserve) "default">
<!ATTLIST msg is_hidden CDATA #IMPLIED>

<!ELEMENT source (#PCDATA)>

<!ELEMENT ph (#PCDATA|ex)*>
<!ATTLIST ph name CDATA #REQUIRED>

<!ELEMENT ex (#PCDATA)>`;
  class Xmb extends Serializer {
      write(messages, locale) {
          const exampleVisitor = new ExampleVisitor();
          const visitor = new _Visitor$2();
          let rootNode = new Tag(_MESSAGES_TAG);
          messages.forEach(message => {
              const attrs = { id: message.id };
              if (message.description) {
                  attrs['desc'] = message.description;
              }
              if (message.meaning) {
                  attrs['meaning'] = message.meaning;
              }
              rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)));
          });
          rootNode.children.push(new CR());
          return serialize([
              new Declaration({ version: '1.0', encoding: 'UTF-8' }),
              new CR(),
              new Doctype(_MESSAGES_TAG, _DOCTYPE),
              new CR(),
              exampleVisitor.addDefaultExamples(rootNode),
              new CR(),
          ]);
      }
      load(content, url) {
          throw new Error('Unsupported');
      }
      digest(message) { return digest$1(message); }
      createNameMapper(message) {
          return new SimplePlaceholderMapper(message, toPublicName);
      }
  }
  class _Visitor$2 {
      visitText(text, context) { return [new Text$2(text.value)]; }
      visitContainer(container, context) {
          const nodes = [];
          container.children.forEach((node) => nodes.push(...node.visit(this)));
          return nodes;
      }
      visitIcu(icu, context) {
          const nodes = [new Text$2(`{${icu.expressionPlaceholder}, ${icu.type}, `)];
          Object.keys(icu.cases).forEach((c) => {
              nodes.push(new Text$2(`${c} {`), ...icu.cases[c].visit(this), new Text$2(`} `));
          });
          nodes.push(new Text$2(`}`));
          return nodes;
      }
      visitTagPlaceholder(ph, context) {
          const startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2(`<${ph.tag}>`)]);
          const startTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.startName }, [startEx]);
          if (ph.isVoid) {
              // void tags have no children nor closing tags
              return [startTagPh];
          }
          const closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2(`</${ph.tag}>`)]);
          const closeTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.closeName }, [closeEx]);
          return [startTagPh, ...this.serialize(ph.children), closeTagPh];
      }
      visitPlaceholder(ph, context) {
          return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];
      }
      visitIcuPlaceholder(ph, context) {
          return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];
      }
      serialize(nodes) {
          return [].concat(...nodes.map(node => node.visit(this)));
      }
  }
  function digest$1(message) {
      return decimalDigest(message);
  }
  // TC requires at least one non-empty example on placeholders
  class ExampleVisitor {
      addDefaultExamples(node) {
          node.visit(this);
          return node;
      }
      visitTag(tag) {
          if (tag.name === _PLACEHOLDER_TAG$1) {
              if (!tag.children || tag.children.length == 0) {
                  const exText = new Text$2(tag.attrs['name'] || '...');
                  tag.children = [new Tag(_EXEMPLE_TAG, {}, [exText])];
              }
          }
          else if (tag.children) {
              tag.children.forEach(node => node.visit(this));
          }
      }
      visitText(text) { }
      visitDeclaration(decl) { }
      visitDoctype(doctype) { }
  }
  // XMB/XTB placeholders can only contain A-Z, 0-9 and _
  function toPublicName(internalName) {
      return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');
  }

  const _TRANSLATIONS_TAG = 'translationbundle';
  const _TRANSLATION_TAG = 'translation';
  const _PLACEHOLDER_TAG$2 = 'ph';
  class Xtb extends Serializer {
      write(messages, locale) { throw new Error('Unsupported'); }
      load(content, url) {
          // xtb to xml nodes
          const xtbParser = new XtbParser();
          const { locale, msgIdToHtml, errors } = xtbParser.parse(content, url);
          // xml nodes to i18n nodes
          const i18nNodesByMsgId = {};
          const converter = new XmlToI18n$1();
          // Because we should be able to load xtb files that rely on features not supported by angular,
          // we need to delay the conversion of html to i18n nodes so that non angular messages are not
          // converted
          Object.keys(msgIdToHtml).forEach(msgId => {
              const valueFn = function () {
                  const { i18nNodes, errors } = converter.convert(msgIdToHtml[msgId], url);
                  if (errors.length) {
                      throw new Error(`xtb parse errors:\n${errors.join('\n')}`);
                  }
                  return i18nNodes;
              };
              createLazyProperty(i18nNodesByMsgId, msgId, valueFn);
          });
          if (errors.length) {
              throw new Error(`xtb parse errors:\n${errors.join('\n')}`);
          }
          return { locale, i18nNodesByMsgId };
      }
      digest(message) { return digest$1(message); }
      createNameMapper(message) {
          return new SimplePlaceholderMapper(message, toPublicName);
      }
  }
  function createLazyProperty(messages, id, valueFn) {
      Object.defineProperty(messages, id, {
          configurable: true,
          enumerable: true,
          get: function () {
              const value = valueFn();
              Object.defineProperty(messages, id, { enumerable: true, value });
              return value;
          },
          set: _ => { throw new Error('Could not overwrite an XTB translation'); },
      });
  }
  // Extract messages as xml nodes from the xtb file
  class XtbParser {
      constructor() {
          this._locale = null;
      }
      parse(xtb, url) {
          this._bundleDepth = 0;
          this._msgIdToHtml = {};
          // We can not parse the ICU messages at this point as some messages might not originate
          // from Angular that could not be lex'd.
          const xml = new XmlParser().parse(xtb, url, false);
          this._errors = xml.errors;
          visitAll(this, xml.rootNodes);
          return {
              msgIdToHtml: this._msgIdToHtml,
              errors: this._errors,
              locale: this._locale,
          };
      }
      visitElement(element, context) {
          switch (element.name) {
              case _TRANSLATIONS_TAG:
                  this._bundleDepth++;
                  if (this._bundleDepth > 1) {
                      this._addError(element, `<${_TRANSLATIONS_TAG}> elements can not be nested`);
                  }
                  const langAttr = element.attrs.find((attr) => attr.name === 'lang');
                  if (langAttr) {
                      this._locale = langAttr.value;
                  }
                  visitAll(this, element.children, null);
                  this._bundleDepth--;
                  break;
              case _TRANSLATION_TAG:
                  const idAttr = element.attrs.find((attr) => attr.name === 'id');
                  if (!idAttr) {
                      this._addError(element, `<${_TRANSLATION_TAG}> misses the "id" attribute`);
                  }
                  else {
                      const id = idAttr.value;
                      if (this._msgIdToHtml.hasOwnProperty(id)) {
                          this._addError(element, `Duplicated translations for msg ${id}`);
                      }
                      else {
                          const innerTextStart = element.startSourceSpan.end.offset;
                          const innerTextEnd = element.endSourceSpan.start.offset;
                          const content = element.startSourceSpan.start.file.content;
                          const innerText = content.slice(innerTextStart, innerTextEnd);
                          this._msgIdToHtml[id] = innerText;
                      }
                  }
                  break;
              default:
                  this._addError(element, 'Unexpected tag');
          }
      }
      visitAttribute(attribute, context) { }
      visitText(text, context) { }
      visitComment(comment, context) { }
      visitExpansion(expansion, context) { }
      visitExpansionCase(expansionCase, context) { }
      _addError(node, message) {
          this._errors.push(new I18nError(node.sourceSpan, message));
      }
  }
  // Convert ml nodes (xtb syntax) to i18n nodes
  class XmlToI18n$1 {
      convert(message, url) {
          const xmlIcu = new XmlParser().parse(message, url, true);
          this._errors = xmlIcu.errors;
          const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?
              [] :
              visitAll(this, xmlIcu.rootNodes);
          return {
              i18nNodes,
              errors: this._errors,
          };
      }
      visitText(text, context) { return new Text$1(text.value, text.sourceSpan); }
      visitExpansion(icu, context) {
          const caseMap = {};
          visitAll(this, icu.cases).forEach(c => {
              caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
          });
          return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
      }
      visitExpansionCase(icuCase, context) {
          return {
              value: icuCase.value,
              nodes: visitAll(this, icuCase.expression),
          };
      }
      visitElement(el, context) {
          if (el.name === _PLACEHOLDER_TAG$2) {
              const nameAttr = el.attrs.find((attr) => attr.name === 'name');
              if (nameAttr) {
                  return new Placeholder('', nameAttr.value, el.sourceSpan);
              }
              this._addError(el, `<${_PLACEHOLDER_TAG$2}> misses the "name" attribute`);
          }
          else {
              this._addError(el, `Unexpected tag`);
          }
      }
      visitComment(comment, context) { }
      visitAttribute(attribute, context) { }
      _addError(node, message) {
          this._errors.push(new I18nError(node.sourceSpan, message));
      }
  }

  class HtmlParser extends Parser$1 {
      constructor() { super(getHtmlTagDefinition); }
      parse(source, url, parseExpansionForms = false, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
          return super.parse(source, url, parseExpansionForms, interpolationConfig);
      }
  }
  HtmlParser.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  HtmlParser.ctorParameters = () => [];

  /**
   * A container for translated messages
   */
  class TranslationBundle {
      constructor(_i18nNodesByMsgId = {}, locale, digest, mapperFactory, missingTranslationStrategy = MissingTranslationStrategy.Warning, console) {
          this._i18nNodesByMsgId = _i18nNodesByMsgId;
          this.digest = digest;
          this.mapperFactory = mapperFactory;
          this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);
      }
      // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.
      static load(content, url, serializer, missingTranslationStrategy, console) {
          const { locale, i18nNodesByMsgId } = serializer.load(content, url);
          const digestFn = (m) => serializer.digest(m);
          const mapperFactory = (m) => serializer.createNameMapper(m);
          return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);
      }
      // Returns the translation as HTML nodes from the given source message.
      get(srcMsg) {
          const html = this._i18nToHtml.convert(srcMsg);
          if (html.errors.length) {
              throw new Error(html.errors.join('\n'));
          }
          return html.nodes;
      }
      has(srcMsg) { return this.digest(srcMsg) in this._i18nNodesByMsgId; }
  }
  class I18nToHtmlVisitor {
      constructor(_i18nNodesByMsgId = {}, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {
          this._i18nNodesByMsgId = _i18nNodesByMsgId;
          this._locale = _locale;
          this._digest = _digest;
          this._mapperFactory = _mapperFactory;
          this._missingTranslationStrategy = _missingTranslationStrategy;
          this._console = _console;
          this._contextStack = [];
          this._errors = [];
      }
      convert(srcMsg) {
          this._contextStack.length = 0;
          this._errors.length = 0;
          // i18n to text
          const text = this._convertToText(srcMsg);
          // text to html
          const url = srcMsg.nodes[0].sourceSpan.start.file.url;
          const html = new HtmlParser().parse(text, url, true);
          return {
              nodes: html.rootNodes,
              errors: [...this._errors, ...html.errors],
          };
      }
      visitText(text, context) { return text.value; }
      visitContainer(container, context) {
          return container.children.map(n => n.visit(this)).join('');
      }
      visitIcu(icu, context) {
          const cases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);
          // TODO(vicb): Once all format switch to using expression placeholders
          // we should throw when the placeholder is not in the source message
          const exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?
              this._srcMsg.placeholders[icu.expression] :
              icu.expression;
          return `{${exp}, ${icu.type}, ${cases.join(' ')}}`;
      }
      visitPlaceholder(ph, context) {
          const phName = this._mapper(ph.name);
          if (this._srcMsg.placeholders.hasOwnProperty(phName)) {
              return this._srcMsg.placeholders[phName];
          }
          if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {
              return this._convertToText(this._srcMsg.placeholderToMessage[phName]);
          }
          this._addError(ph, `Unknown placeholder "${ph.name}"`);
          return '';
      }
      // Loaded message contains only placeholders (vs tag and icu placeholders).
      // However when a translation can not be found, we need to serialize the source message
      // which can contain tag placeholders
      visitTagPlaceholder(ph, context) {
          const tag = `${ph.tag}`;
          const attrs = Object.keys(ph.attrs).map(name => `${name}="${ph.attrs[name]}"`).join(' ');
          if (ph.isVoid) {
              return `<${tag} ${attrs}/>`;
          }
          const children = ph.children.map((c) => c.visit(this)).join('');
          return `<${tag} ${attrs}>${children}</${tag}>`;
      }
      // Loaded message contains only placeholders (vs tag and icu placeholders).
      // However when a translation can not be found, we need to serialize the source message
      // which can contain tag placeholders
      visitIcuPlaceholder(ph, context) {
          // An ICU placeholder references the source message to be serialized
          return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);
      }
      /**
       * Convert a source message to a translated text string:
       * - text nodes are replaced with their translation,
       * - placeholders are replaced with their content,
       * - ICU nodes are converted to ICU expressions.
       */
      _convertToText(srcMsg) {
          const id = this._digest(srcMsg);
          const mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;
          let nodes;
          this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });
          this._srcMsg = srcMsg;
          if (this._i18nNodesByMsgId.hasOwnProperty(id)) {
              // When there is a translation use its nodes as the source
              // And create a mapper to convert serialized placeholder names to internal names
              nodes = this._i18nNodesByMsgId[id];
              this._mapper = (name) => mapper ? mapper.toInternalName(name) : name;
          }
          else {
              // When no translation has been found
              // - report an error / a warning / nothing,
              // - use the nodes from the original message
              // - placeholders are already internal and need no mapper
              if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {
                  const ctx = this._locale ? ` for locale "${this._locale}"` : '';
                  this._addError(srcMsg.nodes[0], `Missing translation for message "${id}"${ctx}`);
              }
              else if (this._console &&
                  this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {
                  const ctx = this._locale ? ` for locale "${this._locale}"` : '';
                  this._console.warn(`Missing translation for message "${id}"${ctx}`);
              }
              nodes = srcMsg.nodes;
              this._mapper = (name) => name;
          }
          const text = nodes.map(node => node.visit(this)).join('');
          const context = this._contextStack.pop();
          this._srcMsg = context.msg;
          this._mapper = context.mapper;
          return text;
      }
      _addError(el, msg) {
          this._errors.push(new I18nError(el.sourceSpan, msg));
      }
  }

  class I18NHtmlParser {
      constructor(_htmlParser, translations, translationsFormat, missingTranslation = MissingTranslationStrategy.Warning, console) {
          this._htmlParser = _htmlParser;
          if (translations) {
              const serializer = createSerializer(translationsFormat);
              this._translationBundle =
                  TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);
          }
      }
      parse(source, url, parseExpansionForms = false, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
          const parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
          if (!this._translationBundle) {
              // Do not enable i18n when no translation bundle is provided
              return parseResult;
          }
          if (parseResult.errors.length) {
              return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);
          }
          return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});
      }
  }
  function createSerializer(format) {
      format = (format || 'xlf').toLowerCase();
      switch (format) {
          case 'xmb':
              return new Xmb();
          case 'xtb':
              return new Xtb();
          case 'xliff':
          case 'xlf':
          default:
              return new Xliff();
      }
  }

  // http://cldr.unicode.org/index/cldr-spec/plural-rules
  const PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
  /**
   * Expands special forms into elements.
   *
   * For example,
   *
   * ```
   * { messages.length, plural,
   *   =0 {zero}
   *   =1 {one}
   *   other {more than one}
   * }
   * ```
   *
   * will be expanded into
   *
   * ```
   * <ng-container [ngPlural]="messages.length">
   *   <ng-template ngPluralCase="=0">zero</ng-template>
   *   <ng-template ngPluralCase="=1">one</ng-template>
   *   <ng-template ngPluralCase="other">more than one</ng-template>
   * </ng-container>
   * ```
   */
  function expandNodes(nodes) {
      const expander = new _Expander();
      return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
  }
  class ExpansionResult {
      constructor(nodes, expanded, errors) {
          this.nodes = nodes;
          this.expanded = expanded;
          this.errors = errors;
      }
  }
  class ExpansionError extends ParseError {
      constructor(span, errorMsg) { super(span, errorMsg); }
  }
  /**
   * Expand expansion forms (plural, select) to directives
   *
   * @internal
   */
  class _Expander {
      constructor() {
          this.isExpanded = false;
          this.errors = [];
      }
      visitElement(element, context) {
          return new Element$1(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
      }
      visitAttribute(attribute, context) { return attribute; }
      visitText(text, context) { return text; }
      visitComment(comment, context) { return comment; }
      visitExpansion(icu, context) {
          this.isExpanded = true;
          return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :
              _expandDefaultForm(icu, this.errors);
      }
      visitExpansionCase(icuCase, context) {
          throw new Error('Should not be reached');
      }
  }
  // Plural forms are expanded to `NgPlural` and `NgPluralCase`s
  function _expandPluralForm(ast, errors) {
      const children = ast.cases.map(c => {
          if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
              errors.push(new ExpansionError(c.valueSourceSpan, `Plural cases should be "=<number>" or one of ${PLURAL_CASES.join(", ")}`));
          }
          const expansionResult = expandNodes(c.expression);
          errors.push(...expansionResult.errors);
          return new Element$1(`ng-template`, [new Attribute$1('ngPluralCase', `${c.value}`, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
      });
      const switchAttr = new Attribute$1('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
      return new Element$1('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }
  // ICU messages (excluding plural form) are expanded to `NgSwitch`  and `NgSwitychCase`s
  function _expandDefaultForm(ast, errors) {
      const children = ast.cases.map(c => {
          const expansionResult = expandNodes(c.expression);
          errors.push(...expansionResult.errors);
          if (c.value === 'other') {
              // other is the default case when no values match
              return new Element$1(`ng-template`, [new Attribute$1('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
          }
          return new Element$1(`ng-template`, [new Attribute$1('ngSwitchCase', `${c.value}`, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
      });
      const switchAttr = new Attribute$1('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
      return new Element$1('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }

  class ProviderError extends ParseError {
      constructor(message, span) { super(span, message); }
  }
  class ProviderViewContext {
      constructor(component, sourceSpan) {
          this.component = component;
          this.sourceSpan = sourceSpan;
          this.errors = [];
          this.viewQueries = _getViewQueries(component);
          this.viewProviders = new Map();
          component.viewProviders.forEach((provider) => {
              if (isBlank$1(this.viewProviders.get(tokenReference(provider.token)))) {
                  this.viewProviders.set(tokenReference(provider.token), true);
              }
          });
      }
  }
  class ProviderElementContext {
      constructor(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, isTemplate, contentQueryStartId, _sourceSpan) {
          this.viewContext = viewContext;
          this._parent = _parent;
          this._isViewRoot = _isViewRoot;
          this._directiveAsts = _directiveAsts;
          this._sourceSpan = _sourceSpan;
          this._transformedProviders = new Map();
          this._seenProviders = new Map();
          this._hasViewContainer = false;
          this._queriedTokens = new Map();
          this._attrs = {};
          attrs.forEach((attrAst) => this._attrs[attrAst.name] = attrAst.value);
          const directivesMeta = _directiveAsts.map(directiveAst => directiveAst.directive);
          this._allProviders =
              _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
          this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);
          Array.from(this._allProviders.values()).forEach((provider) => {
              this._addQueryReadsTo(provider.token, provider.token, this._queriedTokens);
          });
          if (isTemplate) {
              const templateRefId = createIdentifierToken(Identifiers.TemplateRef);
              this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);
          }
          refs.forEach((refAst) => {
              let defaultQueryValue = refAst.value || createIdentifierToken(Identifiers.ElementRef);
              this._addQueryReadsTo({ value: refAst.name }, defaultQueryValue, this._queriedTokens);
          });
          if (this._queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef))) {
              this._hasViewContainer = true;
          }
          // create the providers that we know are eager first
          Array.from(this._allProviders.values()).forEach((provider) => {
              const eager = provider.eager || this._queriedTokens.get(tokenReference(provider.token));
              if (eager) {
                  this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
              }
          });
      }
      afterElement() {
          // collect lazy providers
          Array.from(this._allProviders.values()).forEach((provider) => {
              this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
          });
      }
      get transformProviders() {
          return Array.from(this._transformedProviders.values());
      }
      get transformedDirectiveAsts() {
          const sortedProviderTypes = this.transformProviders.map(provider => provider.token.identifier);
          const sortedDirectives = this._directiveAsts.slice();
          sortedDirectives.sort((dir1, dir2) => sortedProviderTypes.indexOf(dir1.directive.type) -
              sortedProviderTypes.indexOf(dir2.directive.type));
          return sortedDirectives;
      }
      get transformedHasViewContainer() { return this._hasViewContainer; }
      get queryMatches() {
          const allMatches = [];
          this._queriedTokens.forEach((matches) => { allMatches.push(...matches); });
          return allMatches;
      }
      _addQueryReadsTo(token, defaultValue, queryReadTokens) {
          this._getQueriesFor(token).forEach((query) => {
              const queryValue = query.meta.read || defaultValue;
              const tokenRef = tokenReference(queryValue);
              let queryMatches = queryReadTokens.get(tokenRef);
              if (!queryMatches) {
                  queryMatches = [];
                  queryReadTokens.set(tokenRef, queryMatches);
              }
              queryMatches.push({ queryId: query.queryId, value: queryValue });
          });
      }
      _getQueriesFor(token) {
          const result = [];
          let currentEl = this;
          let distance = 0;
          let queries;
          while (currentEl !== null) {
              queries = currentEl._contentQueries.get(tokenReference(token));
              if (queries) {
                  result.push(...queries.filter((query) => query.meta.descendants || distance <= 1));
              }
              if (currentEl._directiveAsts.length > 0) {
                  distance++;
              }
              currentEl = currentEl._parent;
          }
          queries = this.viewContext.viewQueries.get(tokenReference(token));
          if (queries) {
              result.push(...queries);
          }
          return result;
      }
      _getOrCreateLocalProvider(requestingProviderType, token, eager) {
          const resolvedProvider = this._allProviders.get(tokenReference(token));
          if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||
              requestingProviderType === ProviderAstType.PublicService) &&
              resolvedProvider.providerType === ProviderAstType.PrivateService) ||
              ((requestingProviderType === ProviderAstType.PrivateService ||
                  requestingProviderType === ProviderAstType.PublicService) &&
                  resolvedProvider.providerType === ProviderAstType.Builtin)) {
              return null;
          }
          let transformedProviderAst = this._transformedProviders.get(tokenReference(token));
          if (transformedProviderAst) {
              return transformedProviderAst;
          }
          if (isPresent$1(this._seenProviders.get(tokenReference(token)))) {
              this.viewContext.errors.push(new ProviderError(`Cannot instantiate cyclic dependency! ${tokenName(token)}`, this._sourceSpan));
              return null;
          }
          this._seenProviders.set(tokenReference(token), true);
          const transformedProviders = resolvedProvider.providers.map((provider) => {
              let transformedUseValue = provider.useValue;
              let transformedUseExisting = provider.useExisting;
              let transformedDeps;
              if (isPresent$1(provider.useExisting)) {
                  const existingDiDep = this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager);
                  if (isPresent$1(existingDiDep.token)) {
                      transformedUseExisting = existingDiDep.token;
                  }
                  else {
                      transformedUseExisting = null;
                      transformedUseValue = existingDiDep.value;
                  }
              }
              else if (provider.useFactory) {
                  const deps = provider.deps || provider.useFactory.diDeps;
                  transformedDeps =
                      deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager));
              }
              else if (provider.useClass) {
                  const deps = provider.deps || provider.useClass.diDeps;
                  transformedDeps =
                      deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager));
              }
              return _transformProvider(provider, {
                  useExisting: transformedUseExisting,
                  useValue: transformedUseValue,
                  deps: transformedDeps
              });
          });
          transformedProviderAst =
              _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
          this._transformedProviders.set(tokenReference(token), transformedProviderAst);
          return transformedProviderAst;
      }
      _getLocalDependency(requestingProviderType, dep, eager = null) {
          if (dep.isAttribute) {
              const attrValue = this._attrs[dep.token.value];
              return { isValue: true, value: attrValue == null ? null : attrValue };
          }
          if (isPresent$1(dep.token)) {
              // access builtints
              if ((requestingProviderType === ProviderAstType.Directive ||
                  requestingProviderType === ProviderAstType.Component)) {
                  if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Renderer) ||
                      tokenReference(dep.token) === resolveIdentifier(Identifiers.ElementRef) ||
                      tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) ||
                      tokenReference(dep.token) === resolveIdentifier(Identifiers.TemplateRef)) {
                      return dep;
                  }
                  if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ViewContainerRef)) {
                      this._hasViewContainer = true;
                  }
              }
              // access the injector
              if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {
                  return dep;
              }
              // access providers
              if (isPresent$1(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
                  return dep;
              }
          }
          return null;
      }
      _getDependency(requestingProviderType, dep, eager = null) {
          let currElement = this;
          let currEager = eager;
          let result = null;
          if (!dep.isSkipSelf) {
              result = this._getLocalDependency(requestingProviderType, dep, eager);
          }
          if (dep.isSelf) {
              if (!result && dep.isOptional) {
                  result = { isValue: true, value: null };
              }
          }
          else {
              // check parent elements
              while (!result && currElement._parent) {
                  const prevElement = currElement;
                  currElement = currElement._parent;
                  if (prevElement._isViewRoot) {
                      currEager = false;
                  }
                  result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);
              }
              // check @Host restriction
              if (!result) {
                  if (!dep.isHost || this.viewContext.component.isHost ||
                      this.viewContext.component.type.reference === tokenReference(dep.token) ||
                      isPresent$1(this.viewContext.viewProviders.get(tokenReference(dep.token)))) {
                      result = dep;
                  }
                  else {
                      result = dep.isOptional ? result = { isValue: true, value: null } : null;
                  }
              }
          }
          if (!result) {
              this.viewContext.errors.push(new ProviderError(`No provider for ${tokenName(dep.token)}`, this._sourceSpan));
          }
          return result;
      }
  }
  class NgModuleProviderAnalyzer {
      constructor(ngModule, extraProviders, sourceSpan) {
          this._transformedProviders = new Map();
          this._seenProviders = new Map();
          this._errors = [];
          this._allProviders = new Map();
          ngModule.transitiveModule.modules.forEach((ngModuleType) => {
              const ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType };
              _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, this._errors, this._allProviders);
          });
          _resolveProviders(ngModule.transitiveModule.providers.map(entry => entry.provider).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
      }
      parse() {
          Array.from(this._allProviders.values()).forEach((provider) => {
              this._getOrCreateLocalProvider(provider.token, provider.eager);
          });
          if (this._errors.length > 0) {
              const errorString = this._errors.join('\n');
              throw new Error(`Provider parse errors:\n${errorString}`);
          }
          return Array.from(this._transformedProviders.values());
      }
      _getOrCreateLocalProvider(token, eager) {
          const resolvedProvider = this._allProviders.get(tokenReference(token));
          if (!resolvedProvider) {
              return null;
          }
          let transformedProviderAst = this._transformedProviders.get(tokenReference(token));
          if (transformedProviderAst) {
              return transformedProviderAst;
          }
          if (isPresent$1(this._seenProviders.get(tokenReference(token)))) {
              this._errors.push(new ProviderError(`Cannot instantiate cyclic dependency! ${tokenName(token)}`, resolvedProvider.sourceSpan));
              return null;
          }
          this._seenProviders.set(tokenReference(token), true);
          const transformedProviders = resolvedProvider.providers.map((provider) => {
              let transformedUseValue = provider.useValue;
              let transformedUseExisting = provider.useExisting;
              let transformedDeps;
              if (isPresent$1(provider.useExisting)) {
                  const existingDiDep = this._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan);
                  if (isPresent$1(existingDiDep.token)) {
                      transformedUseExisting = existingDiDep.token;
                  }
                  else {
                      transformedUseExisting = null;
                      transformedUseValue = existingDiDep.value;
                  }
              }
              else if (provider.useFactory) {
                  const deps = provider.deps || provider.useFactory.diDeps;
                  transformedDeps =
                      deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));
              }
              else if (provider.useClass) {
                  const deps = provider.deps || provider.useClass.diDeps;
                  transformedDeps =
                      deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));
              }
              return _transformProvider(provider, {
                  useExisting: transformedUseExisting,
                  useValue: transformedUseValue,
                  deps: transformedDeps
              });
          });
          transformedProviderAst =
              _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
          this._transformedProviders.set(tokenReference(token), transformedProviderAst);
          return transformedProviderAst;
      }
      _getDependency(dep, eager = null, requestorSourceSpan) {
          let foundLocal = false;
          if (!dep.isSkipSelf && isPresent$1(dep.token)) {
              // access the injector
              if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ||
                  tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {
                  foundLocal = true;
              }
              else if (isPresent$1(this._getOrCreateLocalProvider(dep.token, eager))) {
                  foundLocal = true;
              }
          }
          let result = dep;
          if (dep.isSelf && !foundLocal) {
              if (dep.isOptional) {
                  result = { isValue: true, value: null };
              }
              else {
                  this._errors.push(new ProviderError(`No provider for ${tokenName(dep.token)}`, requestorSourceSpan));
              }
          }
          return result;
      }
  }
  function _transformProvider(provider, { useExisting, useValue, deps }) {
      return {
          token: provider.token,
          useClass: provider.useClass,
          useExisting: useExisting,
          useFactory: provider.useFactory,
          useValue: useValue,
          deps: deps,
          multi: provider.multi
      };
  }
  function _transformProviderAst(provider, { eager, providers }) {
      return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
  }
  function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
      const providersByToken = new Map();
      directives.forEach((directive) => {
          const dirProvider = { token: { identifier: directive.type }, useClass: directive.type };
          _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
      });
      // Note: directives need to be able to overwrite providers of a component!
      const directivesWithComponentFirst = directives.filter(dir => dir.isComponent).concat(directives.filter(dir => !dir.isComponent));
      directivesWithComponentFirst.forEach((directive) => {
          _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
          _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
      });
      return providersByToken;
  }
  function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
      providers.forEach((provider) => {
          let resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));
          if (isPresent$1(resolvedProvider) && !!resolvedProvider.multiProvider !== !!provider.multi) {
              targetErrors.push(new ProviderError(`Mixing multi and non multi provider is not possible for token ${tokenName(resolvedProvider.token)}`, sourceSpan));
          }
          if (!resolvedProvider) {
              const lifecycleHooks = provider.token.identifier &&
                  provider.token.identifier.lifecycleHooks ?
                  provider.token.identifier.lifecycleHooks :
                  [];
              resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);
              targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);
          }
          else {
              if (!provider.multi) {
                  resolvedProvider.providers.length = 0;
              }
              resolvedProvider.providers.push(provider);
          }
      });
  }
  function _getViewQueries(component) {
      // Note: queries start with id 1 so we can use the number in a Bloom filter!
      let viewQueryId = 1;
      const viewQueries = new Map();
      if (component.viewQueries) {
          component.viewQueries.forEach((query) => _addQueryToTokenMap(viewQueries, { meta: query, queryId: viewQueryId++ }));
      }
      return viewQueries;
  }
  function _getContentQueries(contentQueryStartId, directives) {
      let contentQueryId = contentQueryStartId;
      const contentQueries = new Map();
      directives.forEach((directive, directiveIndex) => {
          if (directive.queries) {
              directive.queries.forEach((query) => _addQueryToTokenMap(contentQueries, { meta: query, queryId: contentQueryId++ }));
          }
      });
      return contentQueries;
  }
  function _addQueryToTokenMap(map, query) {
      query.meta.selectors.forEach((token) => {
          let entry = map.get(tokenReference(token));
          if (!entry) {
              entry = [];
              map.set(tokenReference(token), entry);
          }
          entry.push(query);
      });
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  class ElementSchemaRegistry {
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  class StyleWithImports {
      constructor(style, styleUrls) {
          this.style = style;
          this.styleUrls = styleUrls;
      }
  }
  function isStyleUrlResolvable(url) {
      if (url == null || url.length === 0 || url[0] == '/')
          return false;
      const schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);
      return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
  }
  /**
   * Rewrites stylesheets by resolving and removing the @import urls that
   * are either relative or don't have a `package:` scheme
   */
  function extractStyleUrls(resolver, baseUrl, cssText) {
      const foundUrls = [];
      const modifiedCssText = cssText.replace(CSS_COMMENT_REGEXP, '').replace(CSS_IMPORT_REGEXP, (...m) => {
          const url = m[1] || m[2];
          if (!isStyleUrlResolvable(url)) {
              // Do not attempt to resolve non-package absolute URLs with URI scheme
              return m[0];
          }
          foundUrls.push(resolver.resolve(baseUrl, url));
          return '';
      });
      return new StyleWithImports(modifiedCssText, foundUrls);
  }
  const CSS_IMPORT_REGEXP = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
  const CSS_COMMENT_REGEXP = /\/\*.+?\*\//g;
  const URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;

  const PROPERTY_PARTS_SEPARATOR = '.';
  const ATTRIBUTE_PREFIX = 'attr';
  const CLASS_PREFIX = 'class';
  const STYLE_PREFIX = 'style';
  const ANIMATE_PROP_PREFIX = 'animate-';
  var BoundPropertyType;
  (function (BoundPropertyType) {
      BoundPropertyType[BoundPropertyType["DEFAULT"] = 0] = "DEFAULT";
      BoundPropertyType[BoundPropertyType["LITERAL_ATTR"] = 1] = "LITERAL_ATTR";
      BoundPropertyType[BoundPropertyType["ANIMATION"] = 2] = "ANIMATION";
  })(BoundPropertyType || (BoundPropertyType = {}));
  /**
   * Represents a parsed property.
   */
  class BoundProperty {
      constructor(name, expression, type, sourceSpan) {
          this.name = name;
          this.expression = expression;
          this.type = type;
          this.sourceSpan = sourceSpan;
      }
      get isLiteral() { return this.type === BoundPropertyType.LITERAL_ATTR; }
      get isAnimation() { return this.type === BoundPropertyType.ANIMATION; }
  }
  /**
   * Parses bindings in templates and in the directive host area.
   */
  class BindingParser {
      constructor(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
          this._exprParser = _exprParser;
          this._interpolationConfig = _interpolationConfig;
          this._schemaRegistry = _schemaRegistry;
          this._targetErrors = _targetErrors;
          this.pipesByName = new Map();
          this._usedPipes = new Map();
          pipes.forEach(pipe => this.pipesByName.set(pipe.name, pipe));
      }
      getUsedPipes() { return Array.from(this._usedPipes.values()); }
      createDirectiveHostPropertyAsts(dirMeta, elementSelector, sourceSpan) {
          if (dirMeta.hostProperties) {
              const boundProps = [];
              Object.keys(dirMeta.hostProperties).forEach(propName => {
                  const expression = dirMeta.hostProperties[propName];
                  if (typeof expression === 'string') {
                      this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps);
                  }
                  else {
                      this._reportError(`Value of the host property binding "${propName}" needs to be a string representing an expression but got "${expression}" (${typeof expression})`, sourceSpan);
                  }
              });
              return boundProps.map((prop) => this.createElementPropertyAst(elementSelector, prop));
          }
      }
      createDirectiveHostEventAsts(dirMeta, sourceSpan) {
          if (dirMeta.hostListeners) {
              const targetEventAsts = [];
              Object.keys(dirMeta.hostListeners).forEach(propName => {
                  const expression = dirMeta.hostListeners[propName];
                  if (typeof expression === 'string') {
                      this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts);
                  }
                  else {
                      this._reportError(`Value of the host listener "${propName}" needs to be a string representing an expression but got "${expression}" (${typeof expression})`, sourceSpan);
                  }
              });
              return targetEventAsts;
          }
      }
      parseInterpolation(value, sourceSpan) {
          const sourceInfo = sourceSpan.start.toString();
          try {
              const ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
              if (ast)
                  this._reportExpressionParserErrors(ast.errors, sourceSpan);
              this._checkPipes(ast, sourceSpan);
              return ast;
          }
          catch (e) {
              this._reportError(`${e}`, sourceSpan);
              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
          }
      }
      parseInlineTemplateBinding(prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
          const bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);
          for (let i = 0; i < bindings.length; i++) {
              const binding = bindings[i];
              if (binding.keyIsVar) {
                  targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));
              }
              else if (binding.expression) {
                  this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);
              }
              else {
                  targetMatchableAttrs.push([binding.key, '']);
                  this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);
              }
          }
      }
      _parseTemplateBindings(prefixToken, value, sourceSpan) {
          const sourceInfo = sourceSpan.start.toString();
          try {
              const bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);
              this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
              bindingsResult.templateBindings.forEach((binding) => {
                  if (binding.expression) {
                      this._checkPipes(binding.expression, sourceSpan);
                  }
              });
              bindingsResult.warnings.forEach((warning) => { this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });
              return bindingsResult.templateBindings;
          }
          catch (e) {
              this._reportError(`${e}`, sourceSpan);
              return [];
          }
      }
      parseLiteralAttr(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
          if (_isAnimationLabel(name)) {
              name = name.substring(1);
              if (value) {
                  this._reportError(`Assigning animation triggers via @prop="exp" attributes with an expression is invalid.` +
                      ` Use property bindings (e.g. [@prop]="exp") or use an attribute without a value (e.g. @prop) instead.`, sourceSpan, ParseErrorLevel.FATAL);
              }
              this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);
          }
          else {
              targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));
          }
      }
      parsePropertyBinding(name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
          let isAnimationProp = false;
          if (name.startsWith(ANIMATE_PROP_PREFIX)) {
              isAnimationProp = true;
              name = name.substring(ANIMATE_PROP_PREFIX.length);
          }
          else if (_isAnimationLabel(name)) {
              isAnimationProp = true;
              name = name.substring(1);
          }
          if (isAnimationProp) {
              this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);
          }
          else {
              this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
          }
      }
      parsePropertyInterpolation(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
          const expr = this.parseInterpolation(value, sourceSpan);
          if (expr) {
              this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
              return true;
          }
          return false;
      }
      _parsePropertyAst(name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
          targetMatchableAttrs.push([name, ast.source]);
          targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
      }
      _parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
          // This will occur when a @trigger is not paired with an expression.
          // For animations it is valid to not have an expression since */void
          // states will be applied by angular when the element is attached/detached
          const ast = this._parseBinding(expression || 'null', false, sourceSpan);
          targetMatchableAttrs.push([name, ast.source]);
          targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
      }
      _parseBinding(value, isHostBinding, sourceSpan) {
          const sourceInfo = sourceSpan.start.toString();
          try {
              const ast = isHostBinding ?
                  this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :
                  this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
              if (ast)
                  this._reportExpressionParserErrors(ast.errors, sourceSpan);
              this._checkPipes(ast, sourceSpan);
              return ast;
          }
          catch (e) {
              this._reportError(`${e}`, sourceSpan);
              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
          }
      }
      createElementPropertyAst(elementSelector, boundProp) {
          if (boundProp.isAnimation) {
              return new BoundElementPropertyAst(boundProp.name, PropertyBindingType.Animation, SecurityContext.NONE, false, boundProp.expression, null, boundProp.sourceSpan);
          }
          let unit = null;
          let bindingType;
          let boundPropertyName = null;
          const parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
          let securityContexts;
          // Check check for special cases (prefix style, attr, class)
          if (parts.length > 1) {
              if (parts[0] == ATTRIBUTE_PREFIX) {
                  boundPropertyName = parts[1];
                  this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
                  securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
                  const nsSeparatorIdx = boundPropertyName.indexOf(':');
                  if (nsSeparatorIdx > -1) {
                      const ns = boundPropertyName.substring(0, nsSeparatorIdx);
                      const name = boundPropertyName.substring(nsSeparatorIdx + 1);
                      boundPropertyName = mergeNsAndName(ns, name);
                  }
                  bindingType = PropertyBindingType.Attribute;
              }
              else if (parts[0] == CLASS_PREFIX) {
                  boundPropertyName = parts[1];
                  bindingType = PropertyBindingType.Class;
                  securityContexts = [SecurityContext.NONE];
              }
              else if (parts[0] == STYLE_PREFIX) {
                  unit = parts.length > 2 ? parts[2] : null;
                  boundPropertyName = parts[1];
                  bindingType = PropertyBindingType.Style;
                  securityContexts = [SecurityContext.STYLE];
              }
          }
          // If not a special case, use the full property name
          if (boundPropertyName === null) {
              boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);
              securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);
              bindingType = PropertyBindingType.Property;
              this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);
          }
          return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts.length === 1 ? securityContexts[0] : null, securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan);
      }
      parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
          if (_isAnimationLabel(name)) {
              name = name.substr(1);
              this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);
          }
          else {
              this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
          }
      }
      _parseAnimationEvent(name, expression, sourceSpan, targetEvents) {
          const matches = splitAtPeriod(name, [name, '']);
          const eventName = matches[0];
          const phase = matches[1].toLowerCase();
          if (phase) {
              switch (phase) {
                  case 'start':
                  case 'done':
                      const ast = this._parseAction(expression, sourceSpan);
                      targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));
                      break;
                  default:
                      this._reportError(`The provided animation output phase value "${phase}" for "@${eventName}" is not supported (use start or done)`, sourceSpan);
                      break;
              }
          }
          else {
              this._reportError(`The animation trigger output event (@${eventName}) is missing its phase value name (start or done are currently supported)`, sourceSpan);
          }
      }
      _parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
          // long format: 'target: eventName'
          const [target, eventName] = splitAtColon(name, [null, name]);
          const ast = this._parseAction(expression, sourceSpan);
          targetMatchableAttrs.push([name, ast.source]);
          targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
          // Don't detect directives for event names for now,
          // so don't add the event name to the matchableAttrs
      }
      _parseAction(value, sourceSpan) {
          const sourceInfo = sourceSpan.start.toString();
          try {
              const ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
              if (ast) {
                  this._reportExpressionParserErrors(ast.errors, sourceSpan);
              }
              if (!ast || ast.ast instanceof EmptyExpr) {
                  this._reportError(`Empty expressions are not allowed`, sourceSpan);
                  return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
              }
              this._checkPipes(ast, sourceSpan);
              return ast;
          }
          catch (e) {
              this._reportError(`${e}`, sourceSpan);
              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
          }
      }
      _reportError(message, sourceSpan, level = ParseErrorLevel.FATAL) {
          this._targetErrors.push(new ParseError(sourceSpan, message, level));
      }
      _reportExpressionParserErrors(errors, sourceSpan) {
          for (const error of errors) {
              this._reportError(error.message, sourceSpan);
          }
      }
      _checkPipes(ast, sourceSpan) {
          if (ast) {
              const collector = new PipeCollector();
              ast.visit(collector);
              collector.pipes.forEach((ast, pipeName) => {
                  const pipeMeta = this.pipesByName.get(pipeName);
                  if (!pipeMeta) {
                      this._reportError(`The pipe '${pipeName}' could not be found`, new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));
                  }
                  else {
                      this._usedPipes.set(pipeName, pipeMeta);
                  }
              });
          }
      }
      /**
       * @param propName the name of the property / attribute
       * @param sourceSpan
       * @param isAttr true when binding to an attribute
       * @private
       */
      _validatePropertyOrAttributeName(propName, sourceSpan, isAttr) {
          const report = isAttr ? this._schemaRegistry.validateAttribute(propName) :
              this._schemaRegistry.validateProperty(propName);
          if (report.error) {
              this._reportError(report.msg, sourceSpan, ParseErrorLevel.FATAL);
          }
      }
  }
  class PipeCollector extends RecursiveAstVisitor {
      constructor() {
          super(...arguments);
          this.pipes = new Map();
      }
      visitPipe(ast, context) {
          this.pipes.set(ast.name, ast);
          ast.exp.visit(this);
          this.visitAll(ast.args, context);
          return null;
      }
  }
  function _isAnimationLabel(name) {
      return name[0] == '@';
  }
  function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
      const ctxs = [];
      CssSelector.parse(selector).forEach((selector) => {
          const elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
          const notElementNames = new Set(selector.notSelectors.filter(selector => selector.isElementSelector())
              .map((selector) => selector.element));
          const possibleElementNames = elementNames.filter(elementName => !notElementNames.has(elementName));
          ctxs.push(...possibleElementNames.map(elementName => registry.securityContext(elementName, propName, isAttribute)));
      });
      return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
  }

  const NG_CONTENT_SELECT_ATTR = 'select';
  const NG_CONTENT_ELEMENT = 'ng-content';
  const LINK_ELEMENT = 'link';
  const LINK_STYLE_REL_ATTR = 'rel';
  const LINK_STYLE_HREF_ATTR = 'href';
  const LINK_STYLE_REL_VALUE = 'stylesheet';
  const STYLE_ELEMENT = 'style';
  const SCRIPT_ELEMENT = 'script';
  const NG_NON_BINDABLE_ATTR = 'ngNonBindable';
  const NG_PROJECT_AS = 'ngProjectAs';
  function preparseElement(ast) {
      let selectAttr = null;
      let hrefAttr = null;
      let relAttr = null;
      let nonBindable = false;
      let projectAs = null;
      ast.attrs.forEach(attr => {
          const lcAttrName = attr.name.toLowerCase();
          if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
              selectAttr = attr.value;
          }
          else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
              hrefAttr = attr.value;
          }
          else if (lcAttrName == LINK_STYLE_REL_ATTR) {
              relAttr = attr.value;
          }
          else if (attr.name == NG_NON_BINDABLE_ATTR) {
              nonBindable = true;
          }
          else if (attr.name == NG_PROJECT_AS) {
              if (attr.value.length > 0) {
                  projectAs = attr.value;
              }
          }
      });
      selectAttr = normalizeNgContentSelect(selectAttr);
      const nodeName = ast.name.toLowerCase();
      let type = PreparsedElementType.OTHER;
      if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
          type = PreparsedElementType.NG_CONTENT;
      }
      else if (nodeName == STYLE_ELEMENT) {
          type = PreparsedElementType.STYLE;
      }
      else if (nodeName == SCRIPT_ELEMENT) {
          type = PreparsedElementType.SCRIPT;
      }
      else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
          type = PreparsedElementType.STYLESHEET;
      }
      return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
  }
  var PreparsedElementType;
  (function (PreparsedElementType) {
      PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
      PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
      PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
      PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
      PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
  })(PreparsedElementType || (PreparsedElementType = {}));
  class PreparsedElement {
      constructor(type, selectAttr, hrefAttr, nonBindable, projectAs) {
          this.type = type;
          this.selectAttr = selectAttr;
          this.hrefAttr = hrefAttr;
          this.nonBindable = nonBindable;
          this.projectAs = projectAs;
      }
  }
  function normalizeNgContentSelect(selectAttr) {
      if (selectAttr === null || selectAttr.length === 0) {
          return '*';
      }
      return selectAttr;
  }

  const BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
  // Group 1 = "bind-"
  const KW_BIND_IDX = 1;
  // Group 2 = "let-"
  const KW_LET_IDX = 2;
  // Group 3 = "ref-/#"
  const KW_REF_IDX = 3;
  // Group 4 = "on-"
  const KW_ON_IDX = 4;
  // Group 5 = "bindon-"
  const KW_BINDON_IDX = 5;
  // Group 6 = "@"
  const KW_AT_IDX = 6;
  // Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"
  const IDENT_KW_IDX = 7;
  // Group 8 = identifier inside [()]
  const IDENT_BANANA_BOX_IDX = 8;
  // Group 9 = identifier inside []
  const IDENT_PROPERTY_IDX = 9;
  // Group 10 = identifier inside ()
  const IDENT_EVENT_IDX = 10;
  const NG_TEMPLATE_ELEMENT = 'ng-template';
  // deprecated in 4.x
  const TEMPLATE_ELEMENT = 'template';
  // deprecated in 4.x
  const TEMPLATE_ATTR = 'template';
  const TEMPLATE_ATTR_PREFIX = '*';
  const CLASS_ATTR = 'class';
  const TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
  /**
   * Provides an array of {@link TemplateAstVisitor}s which will be used to transform
   * parsed templates before compilation is invoked, allowing custom expression syntax
   * and other advanced transformations.
   *
   * This is currently an internal-only feature and not meant for general use.
   */
  const TEMPLATE_TRANSFORMS = new InjectionToken('TemplateTransforms');
  class TemplateParseError extends ParseError {
      constructor(message, span, level) {
          super(span, message, level);
      }
  }
  class TemplateParseResult {
      constructor(templateAst, usedPipes, errors) {
          this.templateAst = templateAst;
          this.usedPipes = usedPipes;
          this.errors = errors;
      }
  }
  class TemplateParser {
      constructor(_config, _exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
          this._config = _config;
          this._exprParser = _exprParser;
          this._schemaRegistry = _schemaRegistry;
          this._htmlParser = _htmlParser;
          this._console = _console;
          this.transforms = transforms;
      }
      parse(component, template, directives, pipes, schemas, templateUrl) {
          const result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
          const warnings = result.errors.filter(error => error.level === ParseErrorLevel.WARNING);
          const errors = result.errors.filter(error => error.level === ParseErrorLevel.FATAL);
          if (warnings.length > 0) {
              this._console.warn(`Template parse warnings:\n${warnings.join('\n')}`);
          }
          if (errors.length > 0) {
              const errorString = errors.join('\n');
              throw syntaxError(`Template parse errors:\n${errorString}`);
          }
          return { template: result.templateAst, pipes: result.usedPipes };
      }
      tryParse(component, template, directives, pipes, schemas, templateUrl) {
          return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, template, directives, pipes, schemas, templateUrl);
      }
      tryParseHtml(htmlAstWithErrors, component, template, directives, pipes, schemas, templateUrl) {
          let result;
          const errors = htmlAstWithErrors.errors;
          const usedPipes = [];
          if (htmlAstWithErrors.rootNodes.length > 0) {
              const uniqDirectives = removeSummaryDuplicates(directives);
              const uniqPipes = removeSummaryDuplicates(pipes);
              const providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
              let interpolationConfig;
              if (component.template && component.template.interpolation) {
                  interpolationConfig = {
                      start: component.template.interpolation[0],
                      end: component.template.interpolation[1]
                  };
              }
              const bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
              const parseVisitor = new TemplateParseVisitor(this._config, providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
              result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
              errors.push(...providerViewContext.errors);
              usedPipes.push(...bindingParser.getUsedPipes());
          }
          else {
              result = [];
          }
          this._assertNoReferenceDuplicationOnTemplate(result, errors);
          if (errors.length > 0) {
              return new TemplateParseResult(result, usedPipes, errors);
          }
          if (this.transforms) {
              this.transforms.forEach((transform) => { result = templateVisitAll(transform, result); });
          }
          return new TemplateParseResult(result, usedPipes, errors);
      }
      expandHtml(htmlAstWithErrors, forced = false) {
          const errors = htmlAstWithErrors.errors;
          if (errors.length == 0 || forced) {
              // Transform ICU messages to angular directives
              const expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
              errors.push(...expandedHtmlAst.errors);
              htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
          }
          return htmlAstWithErrors;
      }
      getInterpolationConfig(component) {
          if (component.template) {
              return InterpolationConfig.fromArray(component.template.interpolation);
          }
      }
      /** @internal */
      _assertNoReferenceDuplicationOnTemplate(result, errors) {
          const existingReferences = [];
          result.filter(element => !!element.references)
              .forEach(element => element.references.forEach((reference) => {
              const name = reference.name;
              if (existingReferences.indexOf(name) < 0) {
                  existingReferences.push(name);
              }
              else {
                  const error = new TemplateParseError(`Reference "#${name}" is defined several times`, reference.sourceSpan, ParseErrorLevel.FATAL);
                  errors.push(error);
              }
          }));
      }
  }
  TemplateParser.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  TemplateParser.ctorParameters = () => [
      { type: CompilerConfig, },
      { type: Parser, },
      { type: ElementSchemaRegistry, },
      { type: I18NHtmlParser, },
      { type: Console, },
      { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [TEMPLATE_TRANSFORMS,] },] },
  ];
  class TemplateParseVisitor {
      constructor(config, providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
          this.config = config;
          this.providerViewContext = providerViewContext;
          this._bindingParser = _bindingParser;
          this._schemaRegistry = _schemaRegistry;
          this._schemas = _schemas;
          this._targetErrors = _targetErrors;
          this.selectorMatcher = new SelectorMatcher();
          this.directivesIndex = new Map();
          this.ngContentCount = 0;
          // Note: queries start with id 1 so we can use the number in a Bloom filter!
          this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;
          directives.forEach((directive, index) => {
              const selector = CssSelector.parse(directive.selector);
              this.selectorMatcher.addSelectables(selector, directive);
              this.directivesIndex.set(directive, index);
          });
      }
      visitExpansion(expansion, context) { return null; }
      visitExpansionCase(expansionCase, context) { return null; }
      visitText(text, parent) {
          const ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
          const expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);
          return expr ? new BoundTextAst(expr, ngContentIndex, text.sourceSpan) :
              new TextAst(text.value, ngContentIndex, text.sourceSpan);
      }
      visitAttribute(attribute, context) {
          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
      }
      visitComment(comment, context) { return null; }
      visitElement(element, parent) {
          const queryStartIndex = this.contentQueryStartId;
          const nodeName = element.name;
          const preparsedElement = preparseElement(element);
          if (preparsedElement.type === PreparsedElementType.SCRIPT ||
              preparsedElement.type === PreparsedElementType.STYLE) {
              // Skipping <script> for security reasons
              // Skipping <style> as we already processed them
              // in the StyleCompiler
              return null;
          }
          if (preparsedElement.type === PreparsedElementType.STYLESHEET &&
              isStyleUrlResolvable(preparsedElement.hrefAttr)) {
              // Skipping stylesheets with either relative urls or package scheme as we already processed
              // them in the StyleCompiler
              return null;
          }
          const matchableAttrs = [];
          const elementOrDirectiveProps = [];
          const elementOrDirectiveRefs = [];
          const elementVars = [];
          const events = [];
          const templateElementOrDirectiveProps = [];
          const templateMatchableAttrs = [];
          const templateElementVars = [];
          let hasInlineTemplates = false;
          const attrs = [];
          const isTemplateElement = isTemplate(element, this.config.enableLegacyTemplate, (m, span) => this._reportError(m, span, ParseErrorLevel.WARNING));
          element.attrs.forEach(attr => {
              const hasBinding = this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
              let templateBindingsSource;
              let prefixToken;
              let normalizedName = this._normalizeAttributeName(attr.name);
              if (this.config.enableLegacyTemplate && normalizedName == TEMPLATE_ATTR) {
                  this._reportError(`The template attribute is deprecated. Use an ng-template element instead.`, attr.sourceSpan, ParseErrorLevel.WARNING);
                  templateBindingsSource = attr.value;
              }
              else if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {
                  templateBindingsSource = attr.value;
                  prefixToken = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length) + ':';
              }
              const hasTemplateBinding = isPresent$1(templateBindingsSource);
              if (hasTemplateBinding) {
                  if (hasInlineTemplates) {
                      this._reportError(`Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *`, attr.sourceSpan);
                  }
                  hasInlineTemplates = true;
                  this._bindingParser.parseInlineTemplateBinding(prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
              }
              if (!hasBinding && !hasTemplateBinding) {
                  // don't include the bindings as attributes as well in the AST
                  attrs.push(this.visitAttribute(attr, null));
                  matchableAttrs.push([attr.name, attr.value]);
              }
          });
          const elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
          const { directives: directiveMetas, matchElement } = this._parseDirectives(this.selectorMatcher, elementCssSelector);
          const references = [];
          const boundDirectivePropNames = new Set();
          const directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references, boundDirectivePropNames);
          const elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, boundDirectivePropNames);
          const isViewRoot = parent.isTemplateElement || hasInlineTemplates;
          const providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, isTemplateElement, queryStartIndex, element.sourceSpan);
          const children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
          providerContext.afterElement();
          // Override the actual selector when the `ngProjectAs` attribute is provided
          const projectionSelector = isPresent$1(preparsedElement.projectAs) ?
              CssSelector.parse(preparsedElement.projectAs)[0] :
              elementCssSelector;
          const ngContentIndex = parent.findNgContentIndex(projectionSelector);
          let parsedElement;
          if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
              if (element.children && !element.children.every(_isEmptyTextNode)) {
                  this._reportError(`<ng-content> element cannot have content.`, element.sourceSpan);
              }
              parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
          }
          else if (isTemplateElement) {
              this._assertAllEventsPublishedByDirectives(directiveAsts, events);
              this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
              parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
          }
          else {
              this._assertElementExists(matchElement, element);
              this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
              const ngContentIndex = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
              parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan, element.endSourceSpan);
              this._findComponentDirectives(directiveAsts)
                  .forEach(componentDirectiveAst => this._validateElementAnimationInputOutputs(componentDirectiveAst.hostProperties, componentDirectiveAst.hostEvents, componentDirectiveAst.directive.template));
              const componentTemplate = providerContext.viewContext.component.template;
              this._validateElementAnimationInputOutputs(elementProps, events, componentTemplate.toSummary());
          }
          if (hasInlineTemplates) {
              const templateQueryStartIndex = this.contentQueryStartId;
              const templateSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
              const { directives: templateDirectiveMetas } = this._parseDirectives(this.selectorMatcher, templateSelector);
              const templateBoundDirectivePropNames = new Set();
              const templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, [], templateBoundDirectivePropNames);
              const templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateBoundDirectivePropNames);
              this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
              const templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], true, templateQueryStartIndex, element.sourceSpan);
              templateProviderContext.afterElement();
              parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches, [parsedElement], ngContentIndex, element.sourceSpan);
          }
          return parsedElement;
      }
      _validateElementAnimationInputOutputs(inputs, outputs, template) {
          if (this.config.useViewEngine)
              return;
          const triggerLookup = new Set();
          template.animations.forEach(entry => { triggerLookup.add(entry); });
          const animationInputs = inputs.filter(input => input.isAnimation);
          animationInputs.forEach(input => {
              const name = input.name;
              if (!triggerLookup.has(name)) {
                  this._reportError(`Couldn't find an animation entry for "${name}"`, input.sourceSpan);
              }
          });
          outputs.forEach(output => {
              if (output.isAnimation) {
                  const found = animationInputs.find(input => input.name == output.name);
                  if (!found) {
                      this._reportError(`Unable to listen on (@${output.name}.${output.phase}) because the animation trigger [@${output.name}] isn't being used on the same element`, output.sourceSpan);
                  }
              }
          });
      }
      _parseAttr(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
          const name = this._normalizeAttributeName(attr.name);
          const value = attr.value;
          const srcSpan = attr.sourceSpan;
          const bindParts = name.match(BIND_NAME_REGEXP);
          let hasBinding = false;
          if (bindParts !== null) {
              hasBinding = true;
              if (isPresent$1(bindParts[KW_BIND_IDX])) {
                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
              }
              else if (bindParts[KW_LET_IDX]) {
                  if (isTemplateElement) {
                      const identifier = bindParts[IDENT_KW_IDX];
                      this._parseVariable(identifier, value, srcSpan, targetVars);
                  }
                  else {
                      this._reportError(`"let-" is only supported on template elements.`, srcSpan);
                  }
              }
              else if (bindParts[KW_REF_IDX]) {
                  const identifier = bindParts[IDENT_KW_IDX];
                  this._parseReference(identifier, value, srcSpan, targetRefs);
              }
              else if (bindParts[KW_ON_IDX]) {
                  this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
              }
              else if (bindParts[KW_BINDON_IDX]) {
                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
                  this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
              }
              else if (bindParts[KW_AT_IDX]) {
                  this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
              }
              else if (bindParts[IDENT_BANANA_BOX_IDX]) {
                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
                  this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
              }
              else if (bindParts[IDENT_PROPERTY_IDX]) {
                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
              }
              else if (bindParts[IDENT_EVENT_IDX]) {
                  this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
              }
          }
          else {
              hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
          }
          if (!hasBinding) {
              this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
          }
          return hasBinding;
      }
      _normalizeAttributeName(attrName) {
          return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
      }
      _parseVariable(identifier, value, sourceSpan, targetVars) {
          if (identifier.indexOf('-') > -1) {
              this._reportError(`"-" is not allowed in variable names`, sourceSpan);
          }
          targetVars.push(new VariableAst(identifier, value, sourceSpan));
      }
      _parseReference(identifier, value, sourceSpan, targetRefs) {
          if (identifier.indexOf('-') > -1) {
              this._reportError(`"-" is not allowed in reference names`, sourceSpan);
          }
          targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
      }
      _parseAssignmentEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
          this._bindingParser.parseEvent(`${name}Change`, `${expression}=$event`, sourceSpan, targetMatchableAttrs, targetEvents);
      }
      _parseDirectives(selectorMatcher, elementCssSelector) {
          // Need to sort the directives so that we get consistent results throughout,
          // as selectorMatcher uses Maps inside.
          // Also deduplicate directives as they might match more than one time!
          const directives = new Array(this.directivesIndex.size);
          // Whether any directive selector matches on the element name
          let matchElement = false;
          selectorMatcher.match(elementCssSelector, (selector, directive) => {
              directives[this.directivesIndex.get(directive)] = directive;
              matchElement = matchElement || selector.hasElementSelector();
          });
          return {
              directives: directives.filter(dir => !!dir),
              matchElement,
          };
      }
      _createDirectiveAsts(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences, targetBoundDirectivePropNames) {
          const matchedReferences = new Set();
          let component = null;
          const directiveAsts = directives.map((directive) => {
              const sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, `Directive ${identifierName(directive.type)}`);
              if (directive.isComponent) {
                  component = directive;
              }
              const directiveProperties = [];
              let hostProperties = this._bindingParser.createDirectiveHostPropertyAsts(directive, this.config.useViewEngine ? elementName : directive.selector, sourceSpan);
              // Note: We need to check the host properties here as well,
              // as we don't know the element name in the DirectiveWrapperCompiler yet.
              hostProperties = this._checkPropertiesInSchema(elementName, hostProperties);
              const hostEvents = this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);
              this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);
              elementOrDirectiveRefs.forEach((elOrDirRef) => {
                  if ((elOrDirRef.value.length === 0 && directive.isComponent) ||
                      (directive.exportAs == elOrDirRef.value)) {
                      targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
                      matchedReferences.add(elOrDirRef.name);
                  }
              });
              const contentQueryStartId = this.contentQueryStartId;
              this.contentQueryStartId += directive.queries.length;
              return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId, sourceSpan);
          });
          elementOrDirectiveRefs.forEach((elOrDirRef) => {
              if (elOrDirRef.value.length > 0) {
                  if (!matchedReferences.has(elOrDirRef.name)) {
                      this._reportError(`There is no directive with "exportAs" set to "${elOrDirRef.value}"`, elOrDirRef.sourceSpan);
                  }
              }
              else if (!component) {
                  let refToken = null;
                  if (isTemplateElement) {
                      refToken = createIdentifierToken(Identifiers.TemplateRef);
                  }
                  targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
              }
          });
          return directiveAsts;
      }
      _createDirectivePropertyAsts(directiveProperties, boundProps, targetBoundDirectiveProps, targetBoundDirectivePropNames) {
          if (directiveProperties) {
              const boundPropsByName = new Map();
              boundProps.forEach(boundProp => {
                  const prevValue = boundPropsByName.get(boundProp.name);
                  if (!prevValue || prevValue.isLiteral) {
                      // give [a]="b" a higher precedence than a="b" on the same element
                      boundPropsByName.set(boundProp.name, boundProp);
                  }
              });
              Object.keys(directiveProperties).forEach(dirProp => {
                  const elProp = directiveProperties[dirProp];
                  const boundProp = boundPropsByName.get(elProp);
                  // Bindings are optional, so this binding only needs to be set up if an expression is given.
                  if (boundProp) {
                      targetBoundDirectivePropNames.add(boundProp.name);
                      if (!isEmptyExpression(boundProp.expression)) {
                          targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
                      }
                  }
              });
          }
      }
      _createElementPropertyAsts(elementName, props, boundDirectivePropNames) {
          const boundElementProps = [];
          props.forEach((prop) => {
              if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {
                  boundElementProps.push(this._bindingParser.createElementPropertyAst(elementName, prop));
              }
          });
          return this._checkPropertiesInSchema(elementName, boundElementProps);
      }
      _findComponentDirectives(directives) {
          return directives.filter(directive => directive.directive.isComponent);
      }
      _findComponentDirectiveNames(directives) {
          return this._findComponentDirectives(directives)
              .map(directive => identifierName(directive.directive.type));
      }
      _assertOnlyOneComponent(directives, sourceSpan) {
          const componentTypeNames = this._findComponentDirectiveNames(directives);
          if (componentTypeNames.length > 1) {
              this._reportError(`More than one component matched on this element.\n` +
                  `Make sure that only one component's selector can match a given element.\n` +
                  `Conflicting components: ${componentTypeNames.join(',')}`, sourceSpan);
          }
      }
      /**
       * Make sure that non-angular tags conform to the schemas.
       *
       * Note: An element is considered an angular tag when at least one directive selector matches the
       * tag name.
       *
       * @param matchElement Whether any directive has matched on the tag name
       * @param element the html element
       */
      _assertElementExists(matchElement, element) {
          const elName = element.name.replace(/^:xhtml:/, '');
          if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
              let errorMsg = `'${elName}' is not a known element:\n`;
              errorMsg +=
                  `1. If '${elName}' is an Angular component, then verify that it is part of this module.\n`;
              if (elName.indexOf('-') > -1) {
                  errorMsg +=
                      `2. If '${elName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`;
              }
              else {
                  errorMsg +=
                      `2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;
              }
              this._reportError(errorMsg, element.sourceSpan);
          }
      }
      _assertNoComponentsNorElementBindingsOnTemplate(directives, elementProps, sourceSpan) {
          const componentTypeNames = this._findComponentDirectiveNames(directives);
          if (componentTypeNames.length > 0) {
              this._reportError(`Components on an embedded template: ${componentTypeNames.join(',')}`, sourceSpan);
          }
          elementProps.forEach(prop => {
              this._reportError(`Property binding ${prop.name} not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the "@NgModule.declarations".`, sourceSpan);
          });
      }
      _assertAllEventsPublishedByDirectives(directives, events) {
          const allDirectiveEvents = new Set();
          directives.forEach(directive => {
              Object.keys(directive.directive.outputs).forEach(k => {
                  const eventName = directive.directive.outputs[k];
                  allDirectiveEvents.add(eventName);
              });
          });
          events.forEach(event => {
              if (isPresent$1(event.target) || !allDirectiveEvents.has(event.name)) {
                  this._reportError(`Event binding ${event.fullName} not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the "@NgModule.declarations".`, event.sourceSpan);
              }
          });
      }
      _checkPropertiesInSchema(elementName, boundProps) {
          // Note: We can't filter out empty expressions before this method,
          // as we still want to validate them!
          return boundProps.filter((boundProp) => {
              if (boundProp.type === PropertyBindingType.Property &&
                  !this._schemaRegistry.hasProperty(elementName, boundProp.name, this._schemas)) {
                  let errorMsg = `Can't bind to '${boundProp.name}' since it isn't a known property of '${elementName}'.`;
                  if (elementName.startsWith('ng-')) {
                      errorMsg +=
                          `\n1. If '${boundProp.name}' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component.` +
                              `\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;
                  }
                  else if (elementName.indexOf('-') > -1) {
                      errorMsg +=
                          `\n1. If '${elementName}' is an Angular component and it has '${boundProp.name}' input, then verify that it is part of this module.` +
                              `\n2. If '${elementName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.` +
                              `\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;
                  }
                  this._reportError(errorMsg, boundProp.sourceSpan);
              }
              return !isEmptyExpression(boundProp.value);
          });
      }
      _reportError(message, sourceSpan, level = ParseErrorLevel.FATAL) {
          this._targetErrors.push(new ParseError(sourceSpan, message, level));
      }
  }
  class NonBindableVisitor {
      visitElement(ast, parent) {
          const preparsedElement = preparseElement(ast);
          if (preparsedElement.type === PreparsedElementType.SCRIPT ||
              preparsedElement.type === PreparsedElementType.STYLE ||
              preparsedElement.type === PreparsedElementType.STYLESHEET) {
              // Skipping <script> for security reasons
              // Skipping <style> and stylesheets as we already processed them
              // in the StyleCompiler
              return null;
          }
          const attrNameAndValues = ast.attrs.map((attr) => [attr.name, attr.value]);
          const selector = createElementCssSelector(ast.name, attrNameAndValues);
          const ngContentIndex = parent.findNgContentIndex(selector);
          const children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
          return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, [], children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
      }
      visitComment(comment, context) { return null; }
      visitAttribute(attribute, context) {
          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
      }
      visitText(text, parent) {
          const ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
          return new TextAst(text.value, ngContentIndex, text.sourceSpan);
      }
      visitExpansion(expansion, context) { return expansion; }
      visitExpansionCase(expansionCase, context) { return expansionCase; }
  }
  class ElementOrDirectiveRef {
      constructor(name, value, sourceSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
      }
  }
  function splitClasses(classAttrValue) {
      return classAttrValue.trim().split(/\s+/g);
  }
  class ElementContext {
      constructor(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
          this.isTemplateElement = isTemplateElement;
          this._ngContentIndexMatcher = _ngContentIndexMatcher;
          this._wildcardNgContentIndex = _wildcardNgContentIndex;
          this.providerContext = providerContext;
      }
      static create(isTemplateElement, directives, providerContext) {
          const matcher = new SelectorMatcher();
          let wildcardNgContentIndex = null;
          const component = directives.find(directive => directive.directive.isComponent);
          if (component) {
              const ngContentSelectors = component.directive.template.ngContentSelectors;
              for (let i = 0; i < ngContentSelectors.length; i++) {
                  const selector = ngContentSelectors[i];
                  if (selector === '*') {
                      wildcardNgContentIndex = i;
                  }
                  else {
                      matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
                  }
              }
          }
          return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
      }
      findNgContentIndex(selector) {
          const ngContentIndices = [];
          this._ngContentIndexMatcher.match(selector, (selector, ngContentIndex) => { ngContentIndices.push(ngContentIndex); });
          ngContentIndices.sort();
          if (isPresent$1(this._wildcardNgContentIndex)) {
              ngContentIndices.push(this._wildcardNgContentIndex);
          }
          return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
      }
  }
  function createElementCssSelector(elementName, attributes) {
      const cssSelector = new CssSelector();
      const elNameNoNs = splitNsName(elementName)[1];
      cssSelector.setElement(elNameNoNs);
      for (let i = 0; i < attributes.length; i++) {
          const attrName = attributes[i][0];
          const attrNameNoNs = splitNsName(attrName)[1];
          const attrValue = attributes[i][1];
          cssSelector.addAttribute(attrNameNoNs, attrValue);
          if (attrName.toLowerCase() == CLASS_ATTR) {
              const classes = splitClasses(attrValue);
              classes.forEach(className => cssSelector.addClassName(className));
          }
      }
      return cssSelector;
  }
  const EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
  const NON_BINDABLE_VISITOR = new NonBindableVisitor();
  function _isEmptyTextNode(node) {
      return node instanceof Text && node.value.trim().length == 0;
  }
  function removeSummaryDuplicates(items) {
      const map = new Map();
      items.forEach((item) => {
          if (!map.get(item.type.reference)) {
              map.set(item.type.reference, item);
          }
      });
      return Array.from(map.values());
  }
  function isEmptyExpression(ast) {
      if (ast instanceof ASTWithSource) {
          ast = ast.ast;
      }
      return ast instanceof EmptyExpr;
  }
  // `template` is deprecated in 4.x
  function isTemplate(el, enableLegacyTemplate, reportDeprecation) {
      const tagNoNs = splitNsName(el.name)[1];
      // `<ng-template>` is an angular construct and is lower case
      if (tagNoNs === NG_TEMPLATE_ELEMENT)
          return true;
      // `<template>` is HTML and case insensitive
      if (tagNoNs.toLowerCase() === TEMPLATE_ELEMENT) {
          if (enableLegacyTemplate && tagNoNs.toLowerCase() === TEMPLATE_ELEMENT) {
              reportDeprecation(`The <template> element is deprecated. Use <ng-template> instead`, el.sourceSpan);
              return true;
          }
          return false;
      }
  }

  class AnimationAst {
      constructor() {
          this.startTime = 0;
          this.playTime = 0;
      }
  }
  class AnimationStateAst extends AnimationAst {
  }
  class AnimationEntryAst extends AnimationAst {
      constructor(name, stateDeclarations, stateTransitions) {
          super();
          this.name = name;
          this.stateDeclarations = stateDeclarations;
          this.stateTransitions = stateTransitions;
      }
      visit(visitor, context) {
          return visitor.visitAnimationEntry(this, context);
      }
  }
  class AnimationStateDeclarationAst extends AnimationStateAst {
      constructor(stateName, styles) {
          super();
          this.stateName = stateName;
          this.styles = styles;
      }
      visit(visitor, context) {
          return visitor.visitAnimationStateDeclaration(this, context);
      }
  }
  class AnimationStateTransitionExpression {
      constructor(fromState, toState) {
          this.fromState = fromState;
          this.toState = toState;
      }
  }
  class AnimationStateTransitionFnExpression extends AnimationStateTransitionExpression {
      constructor(fn) {
          super(null, null);
          this.fn = fn;
      }
  }
  class AnimationStateTransitionAst extends AnimationStateAst {
      constructor(stateChanges, animation) {
          super();
          this.stateChanges = stateChanges;
          this.animation = animation;
      }
      visit(visitor, context) {
          return visitor.visitAnimationStateTransition(this, context);
      }
  }
  class AnimationStepAst extends AnimationAst {
      constructor(startingStyles, keyframes, duration, delay, easing) {
          super();
          this.startingStyles = startingStyles;
          this.keyframes = keyframes;
          this.duration = duration;
          this.delay = delay;
          this.easing = easing;
      }
      visit(visitor, context) {
          return visitor.visitAnimationStep(this, context);
      }
  }
  class AnimationStylesAst extends AnimationAst {
      constructor(styles) {
          super();
          this.styles = styles;
      }
      visit(visitor, context) {
          return visitor.visitAnimationStyles(this, context);
      }
  }
  class AnimationKeyframeAst extends AnimationAst {
      constructor(offset, styles) {
          super();
          this.offset = offset;
          this.styles = styles;
      }
      visit(visitor, context) {
          return visitor.visitAnimationKeyframe(this, context);
      }
  }
  class AnimationWithStepsAst extends AnimationAst {
      constructor(steps) {
          super();
          this.steps = steps;
      }
  }
  class AnimationGroupAst extends AnimationWithStepsAst {
      constructor(steps) { super(steps); }
      visit(visitor, context) {
          return visitor.visitAnimationGroup(this, context);
      }
  }
  class AnimationSequenceAst extends AnimationWithStepsAst {
      constructor(steps) { super(steps); }
      visit(visitor, context) {
          return visitor.visitAnimationSequence(this, context);
      }
  }

  class StylesCollectionEntry {
      constructor(time, value) {
          this.time = time;
          this.value = value;
      }
      matches(time, value) {
          return time == this.time && value == this.value;
      }
  }
  class StylesCollection {
      constructor() {
          this.styles = {};
      }
      insertAtTime(property, time, value) {
          const tuple = new StylesCollectionEntry(time, value);
          let entries = this.styles[property];
          if (!isPresent$1(entries)) {
              entries = this.styles[property] = [];
          }
          // insert this at the right stop in the array
          // this way we can keep it sorted
          let insertionIndex = 0;
          for (let i = entries.length - 1; i >= 0; i--) {
              if (entries[i].time <= time) {
                  insertionIndex = i + 1;
                  break;
              }
          }
          entries.splice(insertionIndex, 0, tuple);
      }
      getByIndex(property, index) {
          const items = this.styles[property];
          if (isPresent$1(items)) {
              return index >= items.length ? null : items[index];
          }
          return null;
      }
      indexOfAtOrBeforeTime(property, time) {
          const entries = this.styles[property];
          if (isPresent$1(entries)) {
              for (let i = entries.length - 1; i >= 0; i--) {
                  if (entries[i].time <= time)
                      return i;
              }
          }
          return null;
      }
  }

  const _INITIAL_KEYFRAME = 0;
  const _TERMINAL_KEYFRAME = 1;
  const _ONE_SECOND = 1000;
  class AnimationParseError extends ParseError {
      constructor(message) { super(null, message); }
      toString() { return `${this.msg}`; }
  }
  class AnimationEntryParseResult {
      constructor(ast, errors) {
          this.ast = ast;
          this.errors = errors;
      }
  }
  class AnimationParser {
      constructor(_schema) {
          this._schema = _schema;
      }
      parseComponent(component) {
          const errors = [];
          const componentName = identifierName(component.type);
          const animationTriggerNames = new Set();
          const asts = component.template.animations.map(entry => {
              const result = this.parseEntry(entry);
              const ast = result.ast;
              const triggerName = ast.name;
              if (animationTriggerNames.has(triggerName)) {
                  result.errors.push(new AnimationParseError(`The animation trigger "${triggerName}" has already been registered for the ${componentName} component`));
              }
              else {
                  animationTriggerNames.add(triggerName);
              }
              if (result.errors.length > 0) {
                  let errorMessage = `- Unable to parse the animation sequence for "${triggerName}" on the ${componentName} component due to the following errors:`;
                  result.errors.forEach((error) => { errorMessage += '\n-- ' + error.msg; });
                  errors.push(errorMessage);
              }
              return ast;
          });
          if (errors.length > 0) {
              const errorString = errors.join('\n');
              throw new Error(`Animation parse errors:\n${errorString}`);
          }
          return asts;
      }
      parseEntry(entry) {
          const errors = [];
          const stateStyles = {};
          const transitions = [];
          const stateDeclarationAsts = [];
          entry.definitions.forEach(def => {
              if (def instanceof CompileAnimationStateDeclarationMetadata) {
                  _parseAnimationDeclarationStates(def, this._schema, errors).forEach(ast => {
                      stateDeclarationAsts.push(ast);
                      stateStyles[ast.stateName] = ast.styles;
                  });
              }
              else {
                  transitions.push(def);
              }
          });
          const stateTransitionAsts = transitions.map(transDef => _parseAnimationStateTransition(transDef, stateStyles, this._schema, errors));
          const ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
          return new AnimationEntryParseResult(ast, errors);
      }
  }
  AnimationParser.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  AnimationParser.ctorParameters = () => [
      { type: ElementSchemaRegistry, },
  ];
  function _parseAnimationDeclarationStates(stateMetadata, schema, errors) {
      const normalizedStyles = _normalizeStyleMetadata(stateMetadata.styles, {}, schema, errors, false);
      const defStyles = new AnimationStylesAst(normalizedStyles);
      const states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
      return states.map(state => new AnimationStateDeclarationAst(state, defStyles));
  }
  function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, schema, errors) {
      const styles = new StylesCollection();
      const transitionExprs = [];
      const stateChangeExpr = transitionStateMetadata.stateChangeExpr;
      const transitionStates = typeof stateChangeExpr == 'string' ?
          stateChangeExpr.split(/\s*,\s*/) :
          [stateChangeExpr];
      transitionStates.forEach(expr => transitionExprs.push(..._parseAnimationTransitionExpr(expr, errors)));
      const entry = _normalizeAnimationEntry(transitionStateMetadata.steps);
      const animation = _normalizeStyleSteps(entry, stateStyles, schema, errors);
      const animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
      if (errors.length == 0) {
          _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
      }
      const stepsAst = (animationAst instanceof AnimationWithStepsAst) ?
          animationAst :
          new AnimationSequenceAst([animationAst]);
      return new AnimationStateTransitionAst(transitionExprs, stepsAst);
  }
  function _parseAnimationAlias(alias, errors) {
      switch (alias) {
          case ':enter':
              return 'void => *';
          case ':leave':
              return '* => void';
          default:
              errors.push(new AnimationParseError(`the transition alias value "${alias}" is not supported`));
              return '* => *';
      }
  }
  function _parseAnimationTransitionExpr(transitionValue, errors) {
      const expressions = [];
      if (typeof transitionValue == 'string') {
          let eventStr = transitionValue;
          if (eventStr[0] == ':') {
              eventStr = _parseAnimationAlias(eventStr, errors);
          }
          const match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
          if (!isPresent$1(match) || match.length < 4) {
              errors.push(new AnimationParseError(`the provided ${eventStr} is not of a supported format`));
              return expressions;
          }
          const fromState = match[1];
          const separator = match[2];
          const toState = match[3];
          expressions.push(new AnimationStateTransitionExpression(fromState, toState));
          const isFullAnyStateExpr = fromState == ɵANY_STATE && toState == ɵANY_STATE;
          if (separator[0] == '<' && !isFullAnyStateExpr) {
              expressions.push(new AnimationStateTransitionExpression(toState, fromState));
          }
      }
      else {
          expressions.push(new AnimationStateTransitionFnExpression(transitionValue));
      }
      return expressions;
  }
  function _normalizeAnimationEntry(entry) {
      return Array.isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry;
  }
  function _normalizeStyleMetadata(entry, stateStyles, schema, errors, permitStateReferences) {
      const offset = entry.offset;
      if (offset > 1 || offset < 0) {
          errors.push(new AnimationParseError(`Offset values for animations must be between 0 and 1`));
      }
      const normalizedStyles = [];
      entry.styles.forEach(styleEntry => {
          if (typeof styleEntry === 'string') {
              if (permitStateReferences) {
                  normalizedStyles.push(..._resolveStylesFromState(styleEntry, stateStyles, errors));
              }
              else {
                  errors.push(new AnimationParseError(`State based animations cannot contain references to other states`));
              }
          }
          else {
              const stylesObj = styleEntry;
              const normalizedStylesObj = {};
              Object.keys(stylesObj).forEach(propName => {
                  const normalizedProp = schema.normalizeAnimationStyleProperty(propName);
                  const normalizedOutput = schema.normalizeAnimationStyleValue(normalizedProp, propName, stylesObj[propName]);
                  const normalizationError = normalizedOutput['error'];
                  if (normalizationError) {
                      errors.push(new AnimationParseError(normalizationError));
                  }
                  normalizedStylesObj[normalizedProp] = normalizedOutput['value'];
              });
              normalizedStyles.push(normalizedStylesObj);
          }
      });
      return normalizedStyles;
  }
  function _normalizeStyleSteps(entry, stateStyles, schema, errors) {
      const steps = _normalizeStyleStepEntry(entry, stateStyles, schema, errors);
      return (entry instanceof CompileAnimationGroupMetadata) ?
          new CompileAnimationGroupMetadata(steps) :
          new CompileAnimationSequenceMetadata(steps);
  }
  function _mergeAnimationStyles(stylesList, newItem) {
      if (typeof newItem === 'object' && newItem !== null && stylesList.length > 0) {
          const lastIndex = stylesList.length - 1;
          const lastItem = stylesList[lastIndex];
          if (typeof lastItem === 'object' && lastItem !== null) {
              stylesList[lastIndex] = StringMapWrapper$1.merge(lastItem, newItem);
              return;
          }
      }
      stylesList.push(newItem);
  }
  function _normalizeStyleStepEntry(entry, stateStyles, schema, errors) {
      let steps;
      if (entry instanceof CompileAnimationWithStepsMetadata) {
          steps = entry.steps;
      }
      else {
          return [entry];
      }
      const newSteps = [];
      let combinedStyles;
      steps.forEach(step => {
          if (step instanceof CompileAnimationStyleMetadata) {
              // this occurs when a style step is followed by a previous style step
              // or when the first style step is run. We want to concatenate all subsequent
              // style steps together into a single style step such that we have the correct
              // starting keyframe data to pass into the animation player.
              if (!isPresent$1(combinedStyles)) {
                  combinedStyles = [];
              }
              _normalizeStyleMetadata(step, stateStyles, schema, errors, true)
                  .forEach(entry => { _mergeAnimationStyles(combinedStyles, entry); });
          }
          else {
              // it is important that we create a metadata entry of the combined styles
              // before we go on an process the animate, sequence or group metadata steps.
              // This will ensure that the AST will have the previous styles painted on
              // screen before any further animations that use the styles take place.
              if (isPresent$1(combinedStyles)) {
                  newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
                  combinedStyles = null;
              }
              if (step instanceof CompileAnimationAnimateMetadata) {
                  // we do not recurse into CompileAnimationAnimateMetadata since
                  // those style steps are not going to be squashed
                  const animateStyleValue = step.styles;
                  if (animateStyleValue instanceof CompileAnimationStyleMetadata) {
                      animateStyleValue.styles =
                          _normalizeStyleMetadata(animateStyleValue, stateStyles, schema, errors, true);
                  }
                  else if (animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata) {
                      animateStyleValue.steps.forEach(step => {
                          step.styles = _normalizeStyleMetadata(step, stateStyles, schema, errors, true);
                      });
                  }
              }
              else if (step instanceof CompileAnimationWithStepsMetadata) {
                  const innerSteps = _normalizeStyleStepEntry(step, stateStyles, schema, errors);
                  step = step instanceof CompileAnimationGroupMetadata ?
                      new CompileAnimationGroupMetadata(innerSteps) :
                      new CompileAnimationSequenceMetadata(innerSteps);
              }
              newSteps.push(step);
          }
      });
      // this happens when only styles were animated within the sequence
      if (isPresent$1(combinedStyles)) {
          newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
      }
      return newSteps;
  }
  function _resolveStylesFromState(stateName, stateStyles, errors) {
      const styles = [];
      if (stateName[0] != ':') {
          errors.push(new AnimationParseError(`Animation states via styles must be prefixed with a ":"`));
      }
      else {
          const normalizedStateName = stateName.substring(1);
          const value = stateStyles[normalizedStateName];
          if (!isPresent$1(value)) {
              errors.push(new AnimationParseError(`Unable to apply styles due to missing a state: "${normalizedStateName}"`));
          }
          else {
              value.styles.forEach(stylesEntry => {
                  if (typeof stylesEntry === 'object' && stylesEntry !== null) {
                      styles.push(stylesEntry);
                  }
              });
          }
      }
      return styles;
  }
  class _AnimationTimings {
      constructor(duration, delay, easing) {
          this.duration = duration;
          this.delay = delay;
          this.easing = easing;
      }
  }
  function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
      const totalEntries = keyframeSequence.steps.length;
      let totalOffsets = 0;
      keyframeSequence.steps.forEach(step => totalOffsets += (isPresent$1(step.offset) ? 1 : 0));
      if (totalOffsets > 0 && totalOffsets < totalEntries) {
          errors.push(new AnimationParseError(`Not all style() entries contain an offset for the provided keyframe()`));
          totalOffsets = totalEntries;
      }
      let limit = totalEntries - 1;
      const margin = totalOffsets == 0 ? (1 / limit) : 0;
      const rawKeyframes = [];
      let index = 0;
      let doSortKeyframes = false;
      let lastOffset = 0;
      keyframeSequence.steps.forEach(styleMetadata => {
          let offset = styleMetadata.offset;
          const keyframeStyles = {};
          styleMetadata.styles.forEach(entry => {
              Object.keys(entry).forEach(prop => {
                  if (prop != 'offset') {
                      keyframeStyles[prop] = entry[prop];
                  }
              });
          });
          if (isPresent$1(offset)) {
              doSortKeyframes = doSortKeyframes || (offset < lastOffset);
          }
          else {
              offset = index == limit ? _TERMINAL_KEYFRAME : (margin * index);
          }
          rawKeyframes.push([offset, keyframeStyles]);
          lastOffset = offset;
          index++;
      });
      if (doSortKeyframes) {
          rawKeyframes.sort((a, b) => a[0] <= b[0] ? -1 : 1);
      }
      let firstKeyframe = rawKeyframes[0];
      if (firstKeyframe[0] != _INITIAL_KEYFRAME) {
          rawKeyframes.splice(0, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
      }
      const firstKeyframeStyles = firstKeyframe[1];
      limit = rawKeyframes.length - 1;
      let lastKeyframe = rawKeyframes[limit];
      if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {
          rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);
          limit++;
      }
      const lastKeyframeStyles = lastKeyframe[1];
      for (let i = 1; i <= limit; i++) {
          const entry = rawKeyframes[i];
          const styles = entry[1];
          Object.keys(styles).forEach(prop => {
              if (!isPresent$1(firstKeyframeStyles[prop])) {
                  firstKeyframeStyles[prop] = ɵFILL_STYLE_FLAG;
              }
          });
      }
      for (let i = limit - 1; i >= 0; i--) {
          const entry = rawKeyframes[i];
          const styles = entry[1];
          Object.keys(styles).forEach(prop => {
              if (!isPresent$1(lastKeyframeStyles[prop])) {
                  lastKeyframeStyles[prop] = styles[prop];
              }
          });
      }
      return rawKeyframes.map(entry => new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]])));
  }
  function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
      let ast /** TODO #9100 */;
      let playTime = 0;
      const startingTime = currentTime;
      if (entry instanceof CompileAnimationWithStepsMetadata) {
          let maxDuration = 0;
          const steps = [];
          const isGroup = entry instanceof CompileAnimationGroupMetadata;
          let previousStyles /** TODO #9100 */;
          entry.steps.forEach(entry => {
              // these will get picked up by the next step...
              const time = isGroup ? startingTime : currentTime;
              if (entry instanceof CompileAnimationStyleMetadata) {
                  entry.styles.forEach(stylesEntry => {
                      // by this point we know that we only have stringmap values
                      const map = stylesEntry;
                      Object.keys(map).forEach(prop => { collectedStyles.insertAtTime(prop, time, map[prop]); });
                  });
                  previousStyles = entry.styles;
                  return;
              }
              const innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
              if (isPresent$1(previousStyles)) {
                  if (entry instanceof CompileAnimationWithStepsMetadata) {
                      const startingStyles = new AnimationStylesAst(previousStyles);
                      steps.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
                  }
                  else {
                      const innerStep = innerAst;
                      innerStep.startingStyles.styles.push(...previousStyles);
                  }
                  previousStyles = null;
              }
              const astDuration = innerAst.playTime;
              currentTime += astDuration;
              playTime += astDuration;
              maxDuration = Math.max(astDuration, maxDuration);
              steps.push(innerAst);
          });
          if (isPresent$1(previousStyles)) {
              const startingStyles = new AnimationStylesAst(previousStyles);
              steps.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
          }
          if (isGroup) {
              ast = new AnimationGroupAst(steps);
              playTime = maxDuration;
              currentTime = startingTime + playTime;
          }
          else {
              ast = new AnimationSequenceAst(steps);
          }
      }
      else if (entry instanceof CompileAnimationAnimateMetadata) {
          const timings = _parseTimeExpression(entry.timings, errors);
          const styles = entry.styles;
          let keyframes /** TODO #9100 */;
          if (styles instanceof CompileAnimationKeyframesSequenceMetadata) {
              keyframes =
                  _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
          }
          else {
              const styleData = styles;
              const offset = _TERMINAL_KEYFRAME;
              const styleAst = new AnimationStylesAst(styleData.styles);
              const keyframe = new AnimationKeyframeAst(offset, styleAst);
              keyframes = [keyframe];
          }
          ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);
          playTime = timings.duration + timings.delay;
          currentTime += playTime;
          keyframes.forEach((keyframe /** TODO #9100 */) => keyframe.styles.styles.forEach((entry /** TODO #9100 */) => Object.keys(entry).forEach(prop => { collectedStyles.insertAtTime(prop, currentTime, entry[prop]); })));
      }
      else {
          // if the code reaches this stage then an error
          // has already been populated within the _normalizeStyleSteps()
          // operation...
          ast = new AnimationStepAst(null, [], 0, 0, '');
      }
      ast.playTime = playTime;
      ast.startTime = startingTime;
      return ast;
  }
  function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
      // steps that only contain style will not be filled
      if ((ast instanceof AnimationStepAst) && ast.keyframes.length > 0) {
          const keyframes = ast.keyframes;
          if (keyframes.length == 1) {
              const endKeyframe = keyframes[0];
              const startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
              ast.keyframes = [startKeyframe, endKeyframe];
          }
      }
      else if (ast instanceof AnimationWithStepsAst) {
          ast.steps.forEach(entry => _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors));
      }
  }
  function _parseTimeExpression(exp, errors) {
      const regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i;
      let duration;
      let delay = 0;
      let easing = null;
      if (typeof exp === 'string') {
          const matches = exp.match(regex);
          if (matches === null) {
              errors.push(new AnimationParseError(`The provided timing value "${exp}" is invalid.`));
              return new _AnimationTimings(0, 0, null);
          }
          let durationMatch = parseFloat(matches[1]);
          const durationUnit = matches[2];
          if (durationUnit == 's') {
              durationMatch *= _ONE_SECOND;
          }
          duration = Math.floor(durationMatch);
          const delayMatch = matches[3];
          const delayUnit = matches[4];
          if (isPresent$1(delayMatch)) {
              let delayVal = parseFloat(delayMatch);
              if (isPresent$1(delayUnit) && delayUnit == 's') {
                  delayVal *= _ONE_SECOND;
              }
              delay = Math.floor(delayVal);
          }
          const easingVal = matches[5];
          if (!isBlank$1(easingVal)) {
              easing = easingVal;
          }
      }
      else {
          duration = exp;
      }
      return new _AnimationTimings(duration, delay, easing);
  }
  function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
      const values = {};
      const endTime = startTime + duration;
      endKeyframe.styles.styles.forEach((styleData) => {
          Object.keys(styleData).forEach(prop => {
              const val = styleData[prop];
              if (prop == 'offset')
                  return;
              const resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
              let resultEntry /** TODO #9100 */, nextEntry /** TODO #9100 */, value /** TODO #9100 */;
              if (isPresent$1(resultIndex)) {
                  resultEntry = collectedStyles.getByIndex(prop, resultIndex);
                  value = resultEntry.value;
                  nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);
              }
              else {
                  // this is a flag that the runtime code uses to pass
                  // in a value either from the state declaration styles
                  // or using the AUTO_STYLE value (e.g. getComputedStyle)
                  value = ɵFILL_STYLE_FLAG;
              }
              if (isPresent$1(nextEntry) && !nextEntry.matches(endTime, val)) {
                  errors.push(new AnimationParseError(`The animated CSS property "${prop}" unexpectedly changes between steps "${resultEntry.time}ms" and "${endTime}ms" at "${nextEntry.time}ms"`));
              }
              values[prop] = value;
          });
      });
      return new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * An interface for retrieving documents by URL that the compiler uses
   * to load templates.
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ class ResourceLoader {
      get(url) { return null; }
  }

  function createOfflineCompileUrlResolver() {
      return new UrlResolver('.');
  }
  /**
   * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
   */
  const DEFAULT_PACKAGE_URL_PROVIDER = {
      provide: PACKAGE_ROOT_URL,
      useValue: '/'
  };
  /**
   * Used by the {@link Compiler} when resolving HTML and CSS template URLs.
   *
   * This class can be overridden by the application developer to create custom behavior.
   *
   * See {@link Compiler}
   *
   * ## Example
   *
   * {@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}
   *
   * @security  When compiling templates at runtime, you must
   * ensure that the entire template comes from a trusted source.
   * Attacker-controlled data introduced by a template could expose your
   * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
   */
  class UrlResolver {
      constructor(_packagePrefix = null) {
          this._packagePrefix = _packagePrefix;
      }
      /**
       * Resolves the `url` given the `baseUrl`:
       * - when the `url` is null, the `baseUrl` is returned,
       * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
       * `baseUrl` and `url`,
       * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
       * returned as is (ignoring the `baseUrl`)
       */
      resolve(baseUrl, url) {
          let resolvedUrl = url;
          if (isPresent$1(baseUrl) && baseUrl.length > 0) {
              resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
          }
          const resolvedParts = _split(resolvedUrl);
          let prefix = this._packagePrefix;
          if (isPresent$1(prefix) && isPresent$1(resolvedParts) &&
              resolvedParts[_ComponentIndex.Scheme] == 'package') {
              let path = resolvedParts[_ComponentIndex.Path];
              prefix = prefix.replace(/\/+$/, '');
              path = path.replace(/^\/+/, '');
              return `${prefix}/${path}`;
          }
          return resolvedUrl;
      }
  }
  UrlResolver.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  UrlResolver.ctorParameters = () => [
      { type: undefined, decorators: [{ type: Inject, args: [PACKAGE_ROOT_URL,] },] },
  ];
  /**
   * Extract the scheme of a URL.
   */
  function getUrlScheme(url) {
      const match = _split(url);
      return (match && match[_ComponentIndex.Scheme]) || '';
  }
  // The code below is adapted from Traceur:
  // https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js
  /**
   * Builds a URI string from already-encoded parts.
   *
   * No encoding is performed.  Any component may be omitted as either null or
   * undefined.
   *
   * @param opt_scheme The scheme such as 'http'.
   * @param opt_userInfo The user name before the '@'.
   * @param opt_domain The domain such as 'www.google.com', already
   *     URI-encoded.
   * @param opt_port The port number.
   * @param opt_path The path, already URI-encoded.  If it is not
   *     empty, it must begin with a slash.
   * @param opt_queryData The URI-encoded query data.
   * @param opt_fragment The URI-encoded fragment identifier.
   * @return The fully combined URI.
   */
  function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
      const out = [];
      if (isPresent$1(opt_scheme)) {
          out.push(opt_scheme + ':');
      }
      if (isPresent$1(opt_domain)) {
          out.push('//');
          if (isPresent$1(opt_userInfo)) {
              out.push(opt_userInfo + '@');
          }
          out.push(opt_domain);
          if (isPresent$1(opt_port)) {
              out.push(':' + opt_port);
          }
      }
      if (isPresent$1(opt_path)) {
          out.push(opt_path);
      }
      if (isPresent$1(opt_queryData)) {
          out.push('?' + opt_queryData);
      }
      if (isPresent$1(opt_fragment)) {
          out.push('#' + opt_fragment);
      }
      return out.join('');
  }
  /**
   * A regular expression for breaking a URI into its component parts.
   *
   * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
   * As the "first-match-wins" algorithm is identical to the "greedy"
   * disambiguation method used by POSIX regular expressions, it is natural and
   * commonplace to use a regular expression for parsing the potential five
   * components of a URI reference.
   *
   * The following line is the regular expression for breaking-down a
   * well-formed URI reference into its components.
   *
   * <pre>
   * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
   *  12            3  4          5       6  7        8 9
   * </pre>
   *
   * The numbers in the second line above are only to assist readability; they
   * indicate the reference points for each subexpression (i.e., each paired
   * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
   * For example, matching the above expression to
   * <pre>
   *     http://www.ics.uci.edu/pub/ietf/uri/#Related
   * </pre>
   * results in the following subexpression matches:
   * <pre>
   *    $1 = http:
   *    $2 = http
   *    $3 = //www.ics.uci.edu
   *    $4 = www.ics.uci.edu
   *    $5 = /pub/ietf/uri/
   *    $6 = <undefined>
   *    $7 = <undefined>
   *    $8 = #Related
   *    $9 = Related
   * </pre>
   * where <undefined> indicates that the component is not present, as is the
   * case for the query component in the above example. Therefore, we can
   * determine the value of the five components as
   * <pre>
   *    scheme    = $2
   *    authority = $4
   *    path      = $5
   *    query     = $7
   *    fragment  = $9
   * </pre>
   *
   * The regular expression has been modified slightly to expose the
   * userInfo, domain, and port separately from the authority.
   * The modified version yields
   * <pre>
   *    $1 = http              scheme
   *    $2 = <undefined>       userInfo -\
   *    $3 = www.ics.uci.edu   domain     | authority
   *    $4 = <undefined>       port     -/
   *    $5 = /pub/ietf/uri/    path
   *    $6 = <undefined>       query without ?
   *    $7 = Related           fragment without #
   * </pre>
   * @type {!RegExp}
   * @internal
   */
  const _splitRe = new RegExp('^' +
      '(?:' +
      '([^:/?#.]+)' +
      // used by other URL parts such as :,
      // ?, /, #, and .
      ':)?' +
      '(?://' +
      '(?:([^/?#]*)@)?' +
      '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
      // digits, dashes, dots, percent
      // escapes, and unicode characters.
      '(?::([0-9]+))?' +
      ')?' +
      '([^?#]+)?' +
      '(?:\\?([^#]*))?' +
      '(?:#(.*))?' +
      '$');
  /**
   * The index of each URI component in the return value of goog.uri.utils.split.
   * @enum {number}
   */
  var _ComponentIndex;
  (function (_ComponentIndex) {
      _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
      _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
      _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
      _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
      _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
      _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
      _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
  })(_ComponentIndex || (_ComponentIndex = {}));
  /**
   * Splits a URI into its component parts.
   *
   * Each component can be accessed via the component indices; for example:
   * <pre>
   * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
   * </pre>
   *
   * @param uri The URI string to examine.
   * @return Each component still URI-encoded.
   *     Each component that is present will contain the encoded value, whereas
   *     components that are not present will be undefined or empty, depending
   *     on the browser's regular expression implementation.  Never null, since
   *     arbitrary strings may still look like path names.
   */
  function _split(uri) {
      return uri.match(_splitRe);
  }
  /**
    * Removes dot segments in given path component, as described in
    * RFC 3986, section 5.2.4.
    *
    * @param path A non-empty path component.
    * @return Path component with removed dot segments.
    */
  function _removeDotSegments(path) {
      if (path == '/')
          return '/';
      const leadingSlash = path[0] == '/' ? '/' : '';
      const trailingSlash = path[path.length - 1] === '/' ? '/' : '';
      const segments = path.split('/');
      const out = [];
      let up = 0;
      for (let pos = 0; pos < segments.length; pos++) {
          const segment = segments[pos];
          switch (segment) {
              case '':
              case '.':
                  break;
              case '..':
                  if (out.length > 0) {
                      out.pop();
                  }
                  else {
                      up++;
                  }
                  break;
              default:
                  out.push(segment);
          }
      }
      if (leadingSlash == '') {
          while (up-- > 0) {
              out.unshift('..');
          }
          if (out.length === 0)
              out.push('.');
      }
      return leadingSlash + out.join('/') + trailingSlash;
  }
  /**
   * Takes an array of the parts from split and canonicalizes the path part
   * and then joins all the parts.
   */
  function _joinAndCanonicalizePath(parts) {
      let path = parts[_ComponentIndex.Path];
      path = isBlank$1(path) ? '' : _removeDotSegments(path);
      parts[_ComponentIndex.Path] = path;
      return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
  }
  /**
   * Resolves a URL.
   * @param base The URL acting as the base URL.
   * @param to The URL to resolve.
   */
  function _resolveUrl(base, url) {
      const parts = _split(encodeURI(url));
      const baseParts = _split(base);
      if (isPresent$1(parts[_ComponentIndex.Scheme])) {
          return _joinAndCanonicalizePath(parts);
      }
      else {
          parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
      }
      for (let i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
          if (isBlank$1(parts[i])) {
              parts[i] = baseParts[i];
          }
      }
      if (parts[_ComponentIndex.Path][0] == '/') {
          return _joinAndCanonicalizePath(parts);
      }
      let path = baseParts[_ComponentIndex.Path];
      if (isBlank$1(path))
          path = '/';
      const index = path.lastIndexOf('/');
      path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
      parts[_ComponentIndex.Path] = path;
      return _joinAndCanonicalizePath(parts);
  }

  class DirectiveNormalizer {
      constructor(_resourceLoader, _urlResolver, _htmlParser, _config) {
          this._resourceLoader = _resourceLoader;
          this._urlResolver = _urlResolver;
          this._htmlParser = _htmlParser;
          this._config = _config;
          this._resourceLoaderCache = new Map();
      }
      clearCache() { this._resourceLoaderCache.clear(); }
      clearCacheFor(normalizedDirective) {
          if (!normalizedDirective.isComponent) {
              return;
          }
          this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);
          normalizedDirective.template.externalStylesheets.forEach((stylesheet) => { this._resourceLoaderCache.delete(stylesheet.moduleUrl); });
      }
      _fetch(url) {
          let result = this._resourceLoaderCache.get(url);
          if (!result) {
              result = this._resourceLoader.get(url);
              this._resourceLoaderCache.set(url, result);
          }
          return result;
      }
      normalizeTemplate(prenormData) {
          let normalizedTemplateSync = null;
          let normalizedTemplateAsync;
          if (prenormData.template != null) {
              if (typeof prenormData.template !== 'string') {
                  throw syntaxError(`The template specified for component ${stringify$1(prenormData.componentType)} is not a string`);
              }
              normalizedTemplateSync = this.normalizeTemplateSync(prenormData);
              normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
          }
          else if (prenormData.templateUrl) {
              if (typeof prenormData.templateUrl !== 'string') {
                  throw syntaxError(`The templateUrl specified for component ${stringify$1(prenormData.componentType)} is not a string`);
              }
              normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);
          }
          else {
              throw syntaxError(`No template specified for component ${stringify$1(prenormData.componentType)}`);
          }
          if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
              // sync case
              return new SyncAsyncResult(normalizedTemplateSync);
          }
          else {
              // async case
              return new SyncAsyncResult(null, normalizedTemplateAsync.then((normalizedTemplate) => this.normalizeExternalStylesheets(normalizedTemplate)));
          }
      }
      normalizeTemplateSync(prenomData) {
          return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl);
      }
      normalizeTemplateAsync(prenomData) {
          const templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);
          return this._fetch(templateUrl)
              .then((value) => this.normalizeLoadedTemplate(prenomData, value, templateUrl));
      }
      normalizeLoadedTemplate(prenomData, template, templateAbsUrl) {
          const interpolationConfig = InterpolationConfig.fromArray(prenomData.interpolation);
          const rootNodesAndErrors = this._htmlParser.parse(template, stringify$1(prenomData.componentType), true, interpolationConfig);
          if (rootNodesAndErrors.errors.length > 0) {
              const errorString = rootNodesAndErrors.errors.join('\n');
              throw syntaxError(`Template parse errors:\n${errorString}`);
          }
          const templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
              styles: prenomData.styles,
              styleUrls: prenomData.styleUrls,
              moduleUrl: prenomData.moduleUrl
          }));
          const visitor = new TemplatePreparseVisitor();
          visitAll(visitor, rootNodesAndErrors.rootNodes);
          const templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));
          let encapsulation = prenomData.encapsulation;
          if (encapsulation == null) {
              encapsulation = this._config.defaultEncapsulation;
          }
          const styles = templateMetadataStyles.styles.concat(templateStyles.styles);
          const styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
          if (encapsulation === ViewEncapsulation.Emulated && styles.length === 0 &&
              styleUrls.length === 0) {
              encapsulation = ViewEncapsulation.None;
          }
          return new CompileTemplateMetadata({
              encapsulation,
              template,
              templateUrl: templateAbsUrl, styles, styleUrls,
              ngContentSelectors: visitor.ngContentSelectors,
              animations: prenomData.animations,
              interpolation: prenomData.interpolation,
          });
      }
      normalizeExternalStylesheets(templateMeta) {
          return this._loadMissingExternalStylesheets(templateMeta.styleUrls)
              .then((externalStylesheets) => new CompileTemplateMetadata({
              encapsulation: templateMeta.encapsulation,
              template: templateMeta.template,
              templateUrl: templateMeta.templateUrl,
              styles: templateMeta.styles,
              styleUrls: templateMeta.styleUrls,
              externalStylesheets: externalStylesheets,
              ngContentSelectors: templateMeta.ngContentSelectors,
              animations: templateMeta.animations,
              interpolation: templateMeta.interpolation
          }));
      }
      _loadMissingExternalStylesheets(styleUrls, loadedStylesheets = new Map()) {
          return Promise
              .all(styleUrls.filter((styleUrl) => !loadedStylesheets.has(styleUrl))
              .map(styleUrl => this._fetch(styleUrl).then((loadedStyle) => {
              const stylesheet = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));
              loadedStylesheets.set(styleUrl, stylesheet);
              return this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
          })))
              .then((_) => Array.from(loadedStylesheets.values()));
      }
      normalizeStylesheet(stylesheet) {
          const allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)
              .map(url => this._urlResolver.resolve(stylesheet.moduleUrl, url));
          const allStyles = stylesheet.styles.map(style => {
              const styleWithImports = extractStyleUrls(this._urlResolver, stylesheet.moduleUrl, style);
              allStyleUrls.push(...styleWithImports.styleUrls);
              return styleWithImports.style;
          });
          return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: stylesheet.moduleUrl });
      }
  }
  DirectiveNormalizer.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  DirectiveNormalizer.ctorParameters = () => [
      { type: ResourceLoader, },
      { type: UrlResolver, },
      { type: HtmlParser, },
      { type: CompilerConfig, },
  ];
  class TemplatePreparseVisitor {
      constructor() {
          this.ngContentSelectors = [];
          this.styles = [];
          this.styleUrls = [];
          this.ngNonBindableStackCount = 0;
      }
      visitElement(ast, context) {
          const preparsedElement = preparseElement(ast);
          switch (preparsedElement.type) {
              case PreparsedElementType.NG_CONTENT:
                  if (this.ngNonBindableStackCount === 0) {
                      this.ngContentSelectors.push(preparsedElement.selectAttr);
                  }
                  break;
              case PreparsedElementType.STYLE:
                  let textContent = '';
                  ast.children.forEach(child => {
                      if (child instanceof Text) {
                          textContent += child.value;
                      }
                  });
                  this.styles.push(textContent);
                  break;
              case PreparsedElementType.STYLESHEET:
                  this.styleUrls.push(preparsedElement.hrefAttr);
                  break;
              default:
                  break;
          }
          if (preparsedElement.nonBindable) {
              this.ngNonBindableStackCount++;
          }
          visitAll(this, ast.children);
          if (preparsedElement.nonBindable) {
              this.ngNonBindableStackCount--;
          }
          return null;
      }
      visitExpansion(ast, context) { visitAll(this, ast.cases); }
      visitExpansionCase(ast, context) {
          visitAll(this, ast.expression);
      }
      visitComment(ast, context) { return null; }
      visitAttribute(ast, context) { return null; }
      visitText(ast, context) { return null; }
  }

  /*
   * Resolve a `Type` for {@link Directive}.
   *
   * This interface can be overridden by the application developer to create custom behavior.
   *
   * See {@link Compiler}
   */
  class DirectiveResolver {
      constructor(_reflector = reflector) {
          this._reflector = _reflector;
      }
      isDirective(type) {
          const typeMetadata = this._reflector.annotations(resolveForwardRef(type));
          return typeMetadata && typeMetadata.some(isDirectiveMetadata);
      }
      /**
       * Return {@link Directive} for a given `Type`.
       */
      resolve(type, throwIfNotFound = true) {
          const typeMetadata = this._reflector.annotations(resolveForwardRef(type));
          if (typeMetadata) {
              const metadata = ListWrapper$1.findLast(typeMetadata, isDirectiveMetadata);
              if (metadata) {
                  const propertyMetadata = this._reflector.propMetadata(type);
                  return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
              }
          }
          if (throwIfNotFound) {
              throw new Error(`No Directive annotation found on ${stringify$1(type)}`);
          }
          return null;
      }
      _mergeWithPropertyMetadata(dm, propertyMetadata, directiveType) {
          const inputs = [];
          const outputs = [];
          const host = {};
          const queries = {};
          Object.keys(propertyMetadata).forEach((propName) => {
              const input = ListWrapper$1.findLast(propertyMetadata[propName], (a) => a instanceof Input);
              if (input) {
                  if (input.bindingPropertyName) {
                      inputs.push(`${propName}: ${input.bindingPropertyName}`);
                  }
                  else {
                      inputs.push(propName);
                  }
              }
              const output = ListWrapper$1.findLast(propertyMetadata[propName], (a) => a instanceof Output);
              if (output) {
                  if (output.bindingPropertyName) {
                      outputs.push(`${propName}: ${output.bindingPropertyName}`);
                  }
                  else {
                      outputs.push(propName);
                  }
              }
              const hostBindings = propertyMetadata[propName].filter(a => a && a instanceof HostBinding);
              hostBindings.forEach(hostBinding => {
                  if (hostBinding.hostPropertyName) {
                      const startWith = hostBinding.hostPropertyName[0];
                      if (startWith === '(') {
                          throw new Error(`@HostBinding can not bind to events. Use @HostListener instead.`);
                      }
                      else if (startWith === '[') {
                          throw new Error(`@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.`);
                      }
                      host[`[${hostBinding.hostPropertyName}]`] = propName;
                  }
                  else {
                      host[`[${propName}]`] = propName;
                  }
              });
              const hostListeners = propertyMetadata[propName].filter(a => a && a instanceof HostListener);
              hostListeners.forEach(hostListener => {
                  const args = hostListener.args || [];
                  host[`(${hostListener.eventName})`] = `${propName}(${args.join(',')})`;
              });
              const query = ListWrapper$1.findLast(propertyMetadata[propName], (a) => a instanceof Query);
              if (query) {
                  queries[propName] = query;
              }
          });
          return this._merge(dm, inputs, outputs, host, queries, directiveType);
      }
      _extractPublicName(def) { return splitAtColon(def, [null, def])[1].trim(); }
      _dedupeBindings(bindings) {
          const names = new Set();
          const reversedResult = [];
          // go last to first to allow later entries to overwrite previous entries
          for (let i = bindings.length - 1; i >= 0; i--) {
              const binding = bindings[i];
              const name = this._extractPublicName(binding);
              if (!names.has(name)) {
                  names.add(name);
                  reversedResult.push(binding);
              }
          }
          return reversedResult.reverse();
      }
      _merge(directive, inputs, outputs, host, queries, directiveType) {
          const mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);
          const mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);
          const mergedHost = directive.host ? StringMapWrapper$1.merge(directive.host, host) : host;
          const mergedQueries = directive.queries ? StringMapWrapper$1.merge(directive.queries, queries) : queries;
          if (directive instanceof Component) {
              return new Component({
                  selector: directive.selector,
                  inputs: mergedInputs,
                  outputs: mergedOutputs,
                  host: mergedHost,
                  exportAs: directive.exportAs,
                  moduleId: directive.moduleId,
                  queries: mergedQueries,
                  changeDetection: directive.changeDetection,
                  providers: directive.providers,
                  viewProviders: directive.viewProviders,
                  entryComponents: directive.entryComponents,
                  template: directive.template,
                  templateUrl: directive.templateUrl,
                  styles: directive.styles,
                  styleUrls: directive.styleUrls,
                  encapsulation: directive.encapsulation,
                  animations: directive.animations,
                  interpolation: directive.interpolation
              });
          }
          else {
              return new Directive({
                  selector: directive.selector,
                  inputs: mergedInputs,
                  outputs: mergedOutputs,
                  host: mergedHost,
                  exportAs: directive.exportAs,
                  queries: mergedQueries,
                  providers: directive.providers
              });
          }
      }
  }
  DirectiveResolver.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  DirectiveResolver.ctorParameters = () => [
      { type: ReflectorReader, },
  ];
  function isDirectiveMetadata(type) {
      return type instanceof Directive;
  }

  //// Types
  var TypeModifier;
  (function (TypeModifier) {
      TypeModifier[TypeModifier["Const"] = 0] = "Const";
  })(TypeModifier || (TypeModifier = {}));
  class Type$1 {
      constructor(modifiers = null) {
          this.modifiers = modifiers;
          if (!modifiers) {
              this.modifiers = [];
          }
      }
      hasModifier(modifier) { return this.modifiers.indexOf(modifier) !== -1; }
  }
  var BuiltinTypeName;
  (function (BuiltinTypeName) {
      BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
      BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
      BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
      BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
      BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
      BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
      BuiltinTypeName[BuiltinTypeName["Inferred"] = 6] = "Inferred";
  })(BuiltinTypeName || (BuiltinTypeName = {}));
  class BuiltinType extends Type$1 {
      constructor(name, modifiers = null) {
          super(modifiers);
          this.name = name;
      }
      visitType(visitor, context) {
          return visitor.visitBuiltintType(this, context);
      }
  }
  class ExpressionType extends Type$1 {
      constructor(value, modifiers = null) {
          super(modifiers);
          this.value = value;
      }
      visitType(visitor, context) {
          return visitor.visitExpressionType(this, context);
      }
  }
  class ArrayType extends Type$1 {
      constructor(of, modifiers = null) {
          super(modifiers);
          this.of = of;
      }
      visitType(visitor, context) {
          return visitor.visitArrayType(this, context);
      }
  }
  class MapType extends Type$1 {
      constructor(valueType, modifiers = null) {
          super(modifiers);
          this.valueType = valueType;
      }
      visitType(visitor, context) { return visitor.visitMapType(this, context); }
  }
  const DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
  const INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);
  const BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
  const INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
  const NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
  const STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
  const FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
  ///// Expressions
  var BinaryOperator;
  (function (BinaryOperator) {
      BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
      BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
      BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
      BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
      BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
      BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
      BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
      BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
      BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
      BinaryOperator[BinaryOperator["And"] = 9] = "And";
      BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
      BinaryOperator[BinaryOperator["Lower"] = 11] = "Lower";
      BinaryOperator[BinaryOperator["LowerEquals"] = 12] = "LowerEquals";
      BinaryOperator[BinaryOperator["Bigger"] = 13] = "Bigger";
      BinaryOperator[BinaryOperator["BiggerEquals"] = 14] = "BiggerEquals";
  })(BinaryOperator || (BinaryOperator = {}));
  class Expression {
      constructor(type, sourceSpan) {
          this.type = type;
          this.sourceSpan = sourceSpan;
      }
      prop(name, sourceSpan) {
          return new ReadPropExpr(this, name, null, sourceSpan);
      }
      key(index, type = null, sourceSpan) {
          return new ReadKeyExpr(this, index, type, sourceSpan);
      }
      callMethod(name, params, sourceSpan) {
          return new InvokeMethodExpr(this, name, params, null, sourceSpan);
      }
      callFn(params, sourceSpan) {
          return new InvokeFunctionExpr(this, params, null, sourceSpan);
      }
      instantiate(params, type = null, sourceSpan) {
          return new InstantiateExpr(this, params, type, sourceSpan);
      }
      conditional(trueCase, falseCase = null, sourceSpan) {
          return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);
      }
      equals(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);
      }
      notEquals(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);
      }
      identical(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);
      }
      notIdentical(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);
      }
      minus(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);
      }
      plus(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);
      }
      divide(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);
      }
      multiply(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);
      }
      modulo(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);
      }
      and(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);
      }
      or(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);
      }
      lower(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);
      }
      lowerEquals(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);
      }
      bigger(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);
      }
      biggerEquals(rhs, sourceSpan) {
          return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);
      }
      isBlank(sourceSpan) {
          // Note: We use equals by purpose here to compare to null and undefined in JS.
          // We use the typed null to allow strictNullChecks to narrow types.
          return this.equals(TYPED_NULL_EXPR, sourceSpan);
      }
      cast(type, sourceSpan) {
          return new CastExpr(this, type, sourceSpan);
      }
      toStmt() { return new ExpressionStatement(this); }
  }
  var BuiltinVar;
  (function (BuiltinVar) {
      BuiltinVar[BuiltinVar["This"] = 0] = "This";
      BuiltinVar[BuiltinVar["Super"] = 1] = "Super";
      BuiltinVar[BuiltinVar["CatchError"] = 2] = "CatchError";
      BuiltinVar[BuiltinVar["CatchStack"] = 3] = "CatchStack";
  })(BuiltinVar || (BuiltinVar = {}));
  class ReadVarExpr extends Expression {
      constructor(name, type = null, sourceSpan) {
          super(type, sourceSpan);
          if (typeof name === 'string') {
              this.name = name;
              this.builtin = null;
          }
          else {
              this.name = null;
              this.builtin = name;
          }
      }
      visitExpression(visitor, context) {
          return visitor.visitReadVarExpr(this, context);
      }
      set(value) {
          return new WriteVarExpr(this.name, value, null, this.sourceSpan);
      }
  }
  class WriteVarExpr extends Expression {
      constructor(name, value, type = null, sourceSpan) {
          super(type || value.type, sourceSpan);
          this.name = name;
          this.value = value;
      }
      visitExpression(visitor, context) {
          return visitor.visitWriteVarExpr(this, context);
      }
      toDeclStmt(type = null, modifiers = null) {
          return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);
      }
  }
  class WriteKeyExpr extends Expression {
      constructor(receiver, index, value, type = null, sourceSpan) {
          super(type || value.type, sourceSpan);
          this.receiver = receiver;
          this.index = index;
          this.value = value;
      }
      visitExpression(visitor, context) {
          return visitor.visitWriteKeyExpr(this, context);
      }
  }
  class WritePropExpr extends Expression {
      constructor(receiver, name, value, type = null, sourceSpan) {
          super(type || value.type, sourceSpan);
          this.receiver = receiver;
          this.name = name;
          this.value = value;
      }
      visitExpression(visitor, context) {
          return visitor.visitWritePropExpr(this, context);
      }
  }
  var BuiltinMethod;
  (function (BuiltinMethod) {
      BuiltinMethod[BuiltinMethod["ConcatArray"] = 0] = "ConcatArray";
      BuiltinMethod[BuiltinMethod["SubscribeObservable"] = 1] = "SubscribeObservable";
      BuiltinMethod[BuiltinMethod["Bind"] = 2] = "Bind";
  })(BuiltinMethod || (BuiltinMethod = {}));
  class InvokeMethodExpr extends Expression {
      constructor(receiver, method, args, type = null, sourceSpan) {
          super(type, sourceSpan);
          this.receiver = receiver;
          this.args = args;
          if (typeof method === 'string') {
              this.name = method;
              this.builtin = null;
          }
          else {
              this.name = null;
              this.builtin = method;
          }
      }
      visitExpression(visitor, context) {
          return visitor.visitInvokeMethodExpr(this, context);
      }
  }
  class InvokeFunctionExpr extends Expression {
      constructor(fn, args, type = null, sourceSpan) {
          super(type, sourceSpan);
          this.fn = fn;
          this.args = args;
      }
      visitExpression(visitor, context) {
          return visitor.visitInvokeFunctionExpr(this, context);
      }
  }
  class InstantiateExpr extends Expression {
      constructor(classExpr, args, type, sourceSpan) {
          super(type, sourceSpan);
          this.classExpr = classExpr;
          this.args = args;
      }
      visitExpression(visitor, context) {
          return visitor.visitInstantiateExpr(this, context);
      }
  }
  class LiteralExpr extends Expression {
      constructor(value, type = null, sourceSpan) {
          super(type, sourceSpan);
          this.value = value;
      }
      visitExpression(visitor, context) {
          return visitor.visitLiteralExpr(this, context);
      }
  }
  class ExternalExpr extends Expression {
      constructor(value, type = null, typeParams = null, sourceSpan) {
          super(type, sourceSpan);
          this.value = value;
          this.typeParams = typeParams;
      }
      visitExpression(visitor, context) {
          return visitor.visitExternalExpr(this, context);
      }
  }
  class ConditionalExpr extends Expression {
      constructor(condition, trueCase, falseCase = null, type = null, sourceSpan) {
          super(type || trueCase.type, sourceSpan);
          this.condition = condition;
          this.falseCase = falseCase;
          this.trueCase = trueCase;
      }
      visitExpression(visitor, context) {
          return visitor.visitConditionalExpr(this, context);
      }
  }
  class NotExpr extends Expression {
      constructor(condition, sourceSpan) {
          super(BOOL_TYPE, sourceSpan);
          this.condition = condition;
      }
      visitExpression(visitor, context) {
          return visitor.visitNotExpr(this, context);
      }
  }
  class CastExpr extends Expression {
      constructor(value, type, sourceSpan) {
          super(type, sourceSpan);
          this.value = value;
      }
      visitExpression(visitor, context) {
          return visitor.visitCastExpr(this, context);
      }
  }
  class FnParam {
      constructor(name, type = null) {
          this.name = name;
          this.type = type;
      }
  }
  class FunctionExpr extends Expression {
      constructor(params, statements, type = null, sourceSpan) {
          super(type, sourceSpan);
          this.params = params;
          this.statements = statements;
      }
      visitExpression(visitor, context) {
          return visitor.visitFunctionExpr(this, context);
      }
      toDeclStmt(name, modifiers = null) {
          return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);
      }
  }
  class BinaryOperatorExpr extends Expression {
      constructor(operator, lhs, rhs, type = null, sourceSpan) {
          super(type || lhs.type, sourceSpan);
          this.operator = operator;
          this.rhs = rhs;
          this.lhs = lhs;
      }
      visitExpression(visitor, context) {
          return visitor.visitBinaryOperatorExpr(this, context);
      }
  }
  class ReadPropExpr extends Expression {
      constructor(receiver, name, type = null, sourceSpan) {
          super(type, sourceSpan);
          this.receiver = receiver;
          this.name = name;
      }
      visitExpression(visitor, context) {
          return visitor.visitReadPropExpr(this, context);
      }
      set(value) {
          return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);
      }
  }
  class ReadKeyExpr extends Expression {
      constructor(receiver, index, type = null, sourceSpan) {
          super(type, sourceSpan);
          this.receiver = receiver;
          this.index = index;
      }
      visitExpression(visitor, context) {
          return visitor.visitReadKeyExpr(this, context);
      }
      set(value) {
          return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);
      }
  }
  class LiteralArrayExpr extends Expression {
      constructor(entries, type = null, sourceSpan) {
          super(type, sourceSpan);
          this.entries = entries;
      }
      visitExpression(visitor, context) {
          return visitor.visitLiteralArrayExpr(this, context);
      }
  }
  class LiteralMapEntry {
      constructor(key, value, quoted = false) {
          this.key = key;
          this.value = value;
          this.quoted = quoted;
      }
  }
  class LiteralMapExpr extends Expression {
      constructor(entries, type = null, sourceSpan) {
          super(type, sourceSpan);
          this.entries = entries;
          this.valueType = null;
          if (type) {
              this.valueType = type.valueType;
          }
      }
      visitExpression(visitor, context) {
          return visitor.visitLiteralMapExpr(this, context);
      }
  }
  const THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
  const SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
  const CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
  const CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
  const NULL_EXPR = new LiteralExpr(null, null);
  const TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE);
  //// Statements
  var StmtModifier;
  (function (StmtModifier) {
      StmtModifier[StmtModifier["Final"] = 0] = "Final";
      StmtModifier[StmtModifier["Private"] = 1] = "Private";
  })(StmtModifier || (StmtModifier = {}));
  class Statement {
      constructor(modifiers = null, sourceSpan) {
          this.modifiers = modifiers;
          this.sourceSpan = sourceSpan;
          if (!modifiers) {
              this.modifiers = [];
          }
      }
      hasModifier(modifier) { return this.modifiers.indexOf(modifier) !== -1; }
  }
  class DeclareVarStmt extends Statement {
      constructor(name, value, type = null, modifiers = null, sourceSpan) {
          super(modifiers, sourceSpan);
          this.name = name;
          this.value = value;
          this.type = type || value.type;
      }
      visitStatement(visitor, context) {
          return visitor.visitDeclareVarStmt(this, context);
      }
  }
  class DeclareFunctionStmt extends Statement {
      constructor(name, params, statements, type = null, modifiers = null, sourceSpan) {
          super(modifiers, sourceSpan);
          this.name = name;
          this.params = params;
          this.statements = statements;
          this.type = type;
      }
      visitStatement(visitor, context) {
          return visitor.visitDeclareFunctionStmt(this, context);
      }
  }
  class ExpressionStatement extends Statement {
      constructor(expr, sourceSpan) {
          super(null, sourceSpan);
          this.expr = expr;
      }
      visitStatement(visitor, context) {
          return visitor.visitExpressionStmt(this, context);
      }
  }
  class ReturnStatement extends Statement {
      constructor(value, sourceSpan) {
          super(null, sourceSpan);
          this.value = value;
      }
      visitStatement(visitor, context) {
          return visitor.visitReturnStmt(this, context);
      }
  }
  class AbstractClassPart {
      constructor(type = null, modifiers) {
          this.type = type;
          this.modifiers = modifiers;
          if (!modifiers) {
              this.modifiers = [];
          }
      }
      hasModifier(modifier) { return this.modifiers.indexOf(modifier) !== -1; }
  }
  class ClassField extends AbstractClassPart {
      constructor(name, type = null, modifiers = null) {
          super(type, modifiers);
          this.name = name;
      }
  }
  class ClassMethod extends AbstractClassPart {
      constructor(name, params, body, type = null, modifiers = null) {
          super(type, modifiers);
          this.name = name;
          this.params = params;
          this.body = body;
      }
  }
  class ClassGetter extends AbstractClassPart {
      constructor(name, body, type = null, modifiers = null) {
          super(type, modifiers);
          this.name = name;
          this.body = body;
      }
  }
  class ClassStmt extends Statement {
      constructor(name, parent, fields, getters, constructorMethod, methods, modifiers = null, sourceSpan) {
          super(modifiers, sourceSpan);
          this.name = name;
          this.parent = parent;
          this.fields = fields;
          this.getters = getters;
          this.constructorMethod = constructorMethod;
          this.methods = methods;
      }
      visitStatement(visitor, context) {
          return visitor.visitDeclareClassStmt(this, context);
      }
  }
  class IfStmt extends Statement {
      constructor(condition, trueCase, falseCase = [], sourceSpan) {
          super(null, sourceSpan);
          this.condition = condition;
          this.trueCase = trueCase;
          this.falseCase = falseCase;
      }
      visitStatement(visitor, context) {
          return visitor.visitIfStmt(this, context);
      }
  }
  class TryCatchStmt extends Statement {
      constructor(bodyStmts, catchStmts, sourceSpan) {
          super(null, sourceSpan);
          this.bodyStmts = bodyStmts;
          this.catchStmts = catchStmts;
      }
      visitStatement(visitor, context) {
          return visitor.visitTryCatchStmt(this, context);
      }
  }
  class ThrowStmt extends Statement {
      constructor(error, sourceSpan) {
          super(null, sourceSpan);
          this.error = error;
      }
      visitStatement(visitor, context) {
          return visitor.visitThrowStmt(this, context);
      }
  }
  class ExpressionTransformer {
      visitReadVarExpr(ast, context) { return ast; }
      visitWriteVarExpr(expr, context) {
          return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan);
      }
      visitWriteKeyExpr(expr, context) {
          return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan);
      }
      visitWritePropExpr(expr, context) {
          return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan);
      }
      visitInvokeMethodExpr(ast, context) {
          const method = ast.builtin || ast.name;
          return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan);
      }
      visitInvokeFunctionExpr(ast, context) {
          return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan);
      }
      visitInstantiateExpr(ast, context) {
          return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan);
      }
      visitLiteralExpr(ast, context) { return ast; }
      visitExternalExpr(ast, context) { return ast; }
      visitConditionalExpr(ast, context) {
          return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast.type, ast.sourceSpan);
      }
      visitNotExpr(ast, context) {
          return new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan);
      }
      visitCastExpr(ast, context) {
          return new CastExpr(ast.value.visitExpression(this, context), context, ast.sourceSpan);
      }
      visitFunctionExpr(ast, context) {
          // Don't descend into nested functions
          return ast;
      }
      visitBinaryOperatorExpr(ast, context) {
          return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan);
      }
      visitReadPropExpr(ast, context) {
          return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan);
      }
      visitReadKeyExpr(ast, context) {
          return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan);
      }
      visitLiteralArrayExpr(ast, context) {
          return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan);
      }
      visitLiteralMapExpr(ast, context) {
          const entries = ast.entries.map((entry) => new LiteralMapEntry(entry.key, entry.value.visitExpression(this, context), entry.quoted));
          const mapType = new MapType(ast.valueType);
          return new LiteralMapExpr(entries, mapType, ast.sourceSpan);
      }
      visitAllExpressions(exprs, context) {
          return exprs.map(expr => expr.visitExpression(this, context));
      }
      visitDeclareVarStmt(stmt, context) {
          return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers, stmt.sourceSpan);
      }
      visitDeclareFunctionStmt(stmt, context) {
          // Don't descend into nested functions
          return stmt;
      }
      visitExpressionStmt(stmt, context) {
          return new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan);
      }
      visitReturnStmt(stmt, context) {
          return new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan);
      }
      visitDeclareClassStmt(stmt, context) {
          // Don't descend into nested functions
          return stmt;
      }
      visitIfStmt(stmt, context) {
          return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan);
      }
      visitTryCatchStmt(stmt, context) {
          return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan);
      }
      visitThrowStmt(stmt, context) {
          return new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan);
      }
      visitCommentStmt(stmt, context) { return stmt; }
      visitAllStatements(stmts, context) {
          return stmts.map(stmt => stmt.visitStatement(this, context));
      }
  }
  class RecursiveExpressionVisitor {
      visitReadVarExpr(ast, context) { return ast; }
      visitWriteVarExpr(expr, context) {
          expr.value.visitExpression(this, context);
          return expr;
      }
      visitWriteKeyExpr(expr, context) {
          expr.receiver.visitExpression(this, context);
          expr.index.visitExpression(this, context);
          expr.value.visitExpression(this, context);
          return expr;
      }
      visitWritePropExpr(expr, context) {
          expr.receiver.visitExpression(this, context);
          expr.value.visitExpression(this, context);
          return expr;
      }
      visitInvokeMethodExpr(ast, context) {
          ast.receiver.visitExpression(this, context);
          this.visitAllExpressions(ast.args, context);
          return ast;
      }
      visitInvokeFunctionExpr(ast, context) {
          ast.fn.visitExpression(this, context);
          this.visitAllExpressions(ast.args, context);
          return ast;
      }
      visitInstantiateExpr(ast, context) {
          ast.classExpr.visitExpression(this, context);
          this.visitAllExpressions(ast.args, context);
          return ast;
      }
      visitLiteralExpr(ast, context) { return ast; }
      visitExternalExpr(ast, context) { return ast; }
      visitConditionalExpr(ast, context) {
          ast.condition.visitExpression(this, context);
          ast.trueCase.visitExpression(this, context);
          ast.falseCase.visitExpression(this, context);
          return ast;
      }
      visitNotExpr(ast, context) {
          ast.condition.visitExpression(this, context);
          return ast;
      }
      visitCastExpr(ast, context) {
          ast.value.visitExpression(this, context);
          return ast;
      }
      visitFunctionExpr(ast, context) { return ast; }
      visitBinaryOperatorExpr(ast, context) {
          ast.lhs.visitExpression(this, context);
          ast.rhs.visitExpression(this, context);
          return ast;
      }
      visitReadPropExpr(ast, context) {
          ast.receiver.visitExpression(this, context);
          return ast;
      }
      visitReadKeyExpr(ast, context) {
          ast.receiver.visitExpression(this, context);
          ast.index.visitExpression(this, context);
          return ast;
      }
      visitLiteralArrayExpr(ast, context) {
          this.visitAllExpressions(ast.entries, context);
          return ast;
      }
      visitLiteralMapExpr(ast, context) {
          ast.entries.forEach((entry) => entry.value.visitExpression(this, context));
          return ast;
      }
      visitAllExpressions(exprs, context) {
          exprs.forEach(expr => expr.visitExpression(this, context));
      }
      visitDeclareVarStmt(stmt, context) {
          stmt.value.visitExpression(this, context);
          return stmt;
      }
      visitDeclareFunctionStmt(stmt, context) {
          // Don't descend into nested functions
          return stmt;
      }
      visitExpressionStmt(stmt, context) {
          stmt.expr.visitExpression(this, context);
          return stmt;
      }
      visitReturnStmt(stmt, context) {
          stmt.value.visitExpression(this, context);
          return stmt;
      }
      visitDeclareClassStmt(stmt, context) {
          // Don't descend into nested functions
          return stmt;
      }
      visitIfStmt(stmt, context) {
          stmt.condition.visitExpression(this, context);
          this.visitAllStatements(stmt.trueCase, context);
          this.visitAllStatements(stmt.falseCase, context);
          return stmt;
      }
      visitTryCatchStmt(stmt, context) {
          this.visitAllStatements(stmt.bodyStmts, context);
          this.visitAllStatements(stmt.catchStmts, context);
          return stmt;
      }
      visitThrowStmt(stmt, context) {
          stmt.error.visitExpression(this, context);
          return stmt;
      }
      visitCommentStmt(stmt, context) { return stmt; }
      visitAllStatements(stmts, context) {
          stmts.forEach(stmt => stmt.visitStatement(this, context));
      }
  }
  function replaceVarInExpression(varName, newValue, expression) {
      const transformer = new _ReplaceVariableTransformer(varName, newValue);
      return expression.visitExpression(transformer, null);
  }
  class _ReplaceVariableTransformer extends ExpressionTransformer {
      constructor(_varName, _newValue) {
          super();
          this._varName = _varName;
          this._newValue = _newValue;
      }
      visitReadVarExpr(ast, context) {
          return ast.name == this._varName ? this._newValue : ast;
      }
  }
  function findReadVarNames(stmts) {
      const finder = new _VariableFinder();
      finder.visitAllStatements(stmts, null);
      return finder.varNames;
  }
  class _VariableFinder extends RecursiveExpressionVisitor {
      constructor() {
          super(...arguments);
          this.varNames = new Set();
      }
      visitReadVarExpr(ast, context) {
          this.varNames.add(ast.name);
          return null;
      }
  }
  function variable(name, type = null, sourceSpan) {
      return new ReadVarExpr(name, type, sourceSpan);
  }
  function importExpr(id, typeParams = null, sourceSpan) {
      return new ExternalExpr(id, null, typeParams, sourceSpan);
  }
  function importType(id, typeParams = null, typeModifiers = null) {
      return isPresent$1(id) ? expressionType(importExpr(id, typeParams), typeModifiers) : null;
  }
  function expressionType(expr, typeModifiers = null) {
      return isPresent$1(expr) ? new ExpressionType(expr, typeModifiers) : null;
  }
  function literalArr(values, type = null, sourceSpan) {
      return new LiteralArrayExpr(values, type, sourceSpan);
  }
  function literalMap(values, type = null, quoted = false) {
      return new LiteralMapExpr(values.map(entry => new LiteralMapEntry(entry[0], entry[1], quoted)), type);
  }
  function not(expr, sourceSpan) {
      return new NotExpr(expr, sourceSpan);
  }
  function fn(params, body, type = null, sourceSpan) {
      return new FunctionExpr(params, body, type, sourceSpan);
  }
  function literal(value, type = null, sourceSpan) {
      return new LiteralExpr(value, type, sourceSpan);
  }

  class CheckBindingField {
      constructor(expression, bindingId) {
          this.expression = expression;
          this.bindingId = bindingId;
      }
  }
  function createCheckBindingField(builder) {
      const bindingId = `${builder.fields.length}`;
      const fieldExpr = createBindFieldExpr(bindingId);
      // private is fine here as no child view will reference the cached value...
      builder.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private]));
      builder.ctorStmts.push(THIS_EXPR.prop(fieldExpr.name).set(literal(undefined)).toStmt());
      return new CheckBindingField(fieldExpr, bindingId);
  }
  function createBindFieldExpr(bindingId) {
      return THIS_EXPR.prop(`_expr_${bindingId}`);
  }
  function isFirstViewCheck(view) {
      return not(view.prop('numberOfChecks'));
  }

  function createDiTokenExpression(token) {
      if (isPresent$1(token.value)) {
          return literal(token.value);
      }
      else {
          return importExpr(token.identifier);
      }
  }
  function createInlineArray(values) {
      if (values.length === 0) {
          return importExpr(createIdentifier(Identifiers.EMPTY_INLINE_ARRAY));
      }
      const log2 = Math.log(values.length) / Math.log(2);
      const index = Math.ceil(log2);
      const identifierSpec = index < Identifiers.inlineArrays.length ? Identifiers.inlineArrays[index] :
          Identifiers.InlineArrayDynamic;
      const identifier = createIdentifier(identifierSpec);
      return importExpr(identifier).instantiate([
          literal(values.length)
      ].concat(values));
  }
  function createPureProxy(fn, argCount, pureProxyProp, builder) {
      builder.fields.push(new ClassField(pureProxyProp.name, null));
      const pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;
      if (!pureProxyId) {
          throw new Error(`Unsupported number of argument for pure functions: ${argCount}`);
      }
      builder.ctorStmts.push(THIS_EXPR.prop(pureProxyProp.name)
          .set(importExpr(createIdentifier(pureProxyId)).callFn([fn]))
          .toStmt());
  }
  function createEnumExpression(enumType, enumValue) {
      const enumName = Object.keys(enumType.runtime).find((propName) => enumType.runtime[propName] === enumValue);
      if (!enumName) {
          throw new Error(`Unknown enum value ${enumValue} in ${enumType.name}`);
      }
      return importExpr(createEnumIdentifier(enumType, enumName));
  }

  const VAL_UNWRAPPER_VAR = variable(`valUnwrapper`);
  class EventHandlerVars {
  }
  EventHandlerVars.event = variable('$event');
  class ConvertActionBindingResult {
      constructor(stmts, allowDefault) {
          this.stmts = stmts;
          this.allowDefault = allowDefault;
      }
  }
  /**
   * Converts the given expression AST into an executable output AST, assuming the expression is
   * used in an action binding (e.g. an event handler).
   */
  function convertActionBinding(localResolver, implicitReceiver, action, bindingId) {
      if (!localResolver) {
          localResolver = new DefaultLocalResolver();
      }
      const actionWithoutBuiltins = convertPropertyBindingBuiltins({
          createLiteralArrayConverter: (argCount) => {
              // Note: no caching for literal arrays in actions.
              return (args) => literalArr(args);
          },
          createLiteralMapConverter: (keys) => {
              // Note: no caching for literal maps in actions.
              return (args) => literalMap(keys.map((key, i) => [key, args[i]]));
          },
          createPipeConverter: (name) => {
              throw new Error(`Illegal State: Actions are not allowed to contain pipes. Pipe: ${name}`);
          }
      }, action);
      const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId);
      const actionStmts = [];
      flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);
      prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
      const lastIndex = actionStmts.length - 1;
      let preventDefaultVar = null;
      if (lastIndex >= 0) {
          const lastStatement = actionStmts[lastIndex];
          const returnExpr = convertStmtIntoExpression(lastStatement);
          if (returnExpr) {
              // Note: We need to cast the result of the method call to dynamic,
              // as it might be a void method!
              preventDefaultVar = createPreventDefaultVar(bindingId);
              actionStmts[lastIndex] =
                  preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false)))
                      .toDeclStmt(null, [StmtModifier.Final]);
          }
      }
      return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
  }
  function convertPropertyBindingBuiltins(converterFactory, ast) {
      return convertBuiltins(converterFactory, ast);
  }
  class ConvertPropertyBindingResult {
      constructor(stmts, currValExpr) {
          this.stmts = stmts;
          this.currValExpr = currValExpr;
      }
  }
  /**
   * Converts the given expression AST into an executable output AST, assuming the expression
   * is used in property binding. The expression has to be preprocessed via
   * `convertPropertyBindingBuiltins`.
   */
  function convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId) {
      if (!localResolver) {
          localResolver = new DefaultLocalResolver();
      }
      const currValExpr = createCurrValueExpr(bindingId);
      const stmts = [];
      const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId);
      const outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);
      if (visitor.temporaryCount) {
          for (let i = 0; i < visitor.temporaryCount; i++) {
              stmts.push(temporaryDeclaration(bindingId, i));
          }
      }
      stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final]));
      return new ConvertPropertyBindingResult(stmts, currValExpr);
  }
  class LegacyConvertPropertyBindingResult {
      constructor(stmts, currValExpr, forceUpdate) {
          this.stmts = stmts;
          this.currValExpr = currValExpr;
          this.forceUpdate = forceUpdate;
      }
  }
  /**
   * Converts the given expression AST into an executable output AST, assuming the expression is
   * used in a property binding.
   */
  function legacyConvertPropertyBinding(builder, nameResolver, implicitReceiver, expression, bindingId) {
      if (!nameResolver) {
          nameResolver = new LegacyDefaultNameResolver();
      }
      let needsValueUnwrapper = false;
      const expressionWithoutBuiltins = convertBuiltins({
          createLiteralArrayConverter: (argCount) => {
              return (args) => legacyCreateCachedLiteralArray(builder, args);
          },
          createLiteralMapConverter: (keys) => {
              return (args) => legacyCreateCachedLiteralMap(builder, keys.map((key, i) => [key, args[i]]));
          },
          createPipeConverter: (name) => {
              needsValueUnwrapper = true;
              return (args) => VAL_UNWRAPPER_VAR.callMethod('unwrap', [nameResolver.callPipe(name, args[0], args.slice(1))]);
          }
      }, expression);
      const { stmts, currValExpr } = convertPropertyBinding(nameResolver, implicitReceiver, expressionWithoutBuiltins, bindingId);
      let forceUpdate = null;
      if (needsValueUnwrapper) {
          const initValueUnwrapperStmt = VAL_UNWRAPPER_VAR.callMethod('reset', []).toStmt();
          stmts.unshift(initValueUnwrapperStmt);
          forceUpdate = VAL_UNWRAPPER_VAR.prop('hasWrappedValue');
      }
      return new LegacyConvertPropertyBindingResult(stmts, currValExpr, forceUpdate);
  }
  /**
   * Creates variables that are shared by multiple calls to `convertActionBinding` /
   * `convertPropertyBinding`
   */
  function legacyCreateSharedBindingVariablesIfNeeded(stmts) {
      const unwrapperStmts = [];
      const readVars = findReadVarNames(stmts);
      if (readVars.has(VAL_UNWRAPPER_VAR.name)) {
          unwrapperStmts.push(VAL_UNWRAPPER_VAR
              .set(importExpr(createIdentifier(Identifiers.ValueUnwrapper)).instantiate([]))
              .toDeclStmt(null, [StmtModifier.Final]));
      }
      return unwrapperStmts;
  }
  function convertBuiltins(converterFactory, ast) {
      const visitor = new _BuiltinAstConverter(converterFactory);
      return ast.visit(visitor);
  }
  function temporaryName(bindingId, temporaryNumber) {
      return `tmp_${bindingId}_${temporaryNumber}`;
  }
  function temporaryDeclaration(bindingId, temporaryNumber) {
      return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
  }
  function prependTemporaryDecls(temporaryCount, bindingId, statements) {
      for (let i = temporaryCount - 1; i >= 0; i--) {
          statements.unshift(temporaryDeclaration(bindingId, i));
      }
  }
  var _Mode;
  (function (_Mode) {
      _Mode[_Mode["Statement"] = 0] = "Statement";
      _Mode[_Mode["Expression"] = 1] = "Expression";
  })(_Mode || (_Mode = {}));
  function ensureStatementMode(mode, ast) {
      if (mode !== _Mode.Statement) {
          throw new Error(`Expected a statement, but saw ${ast}`);
      }
  }
  function ensureExpressionMode(mode, ast) {
      if (mode !== _Mode.Expression) {
          throw new Error(`Expected an expression, but saw ${ast}`);
      }
  }
  function convertToStatementIfNeeded(mode, expr) {
      if (mode === _Mode.Statement) {
          return expr.toStmt();
      }
      else {
          return expr;
      }
  }
  class _BuiltinAstConverter extends AstTransformer {
      constructor(_converterFactory) {
          super();
          this._converterFactory = _converterFactory;
      }
      visitPipe(ast, context) {
          const args = [ast.exp, ...ast.args].map(ast => ast.visit(this, context));
          return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createPipeConverter(ast.name, args.length));
      }
      visitLiteralArray(ast, context) {
          const args = ast.expressions.map(ast => ast.visit(this, context));
          return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));
      }
      visitLiteralMap(ast, context) {
          const args = ast.values.map(ast => ast.visit(this, context));
          return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralMapConverter(ast.keys));
      }
  }
  class _AstToIrVisitor {
      constructor(_localResolver, _implicitReceiver, bindingId) {
          this._localResolver = _localResolver;
          this._implicitReceiver = _implicitReceiver;
          this.bindingId = bindingId;
          this._nodeMap = new Map();
          this._resultMap = new Map();
          this._currentTemporary = 0;
          this.temporaryCount = 0;
      }
      visitBinary(ast, mode) {
          let op;
          switch (ast.operation) {
              case '+':
                  op = BinaryOperator.Plus;
                  break;
              case '-':
                  op = BinaryOperator.Minus;
                  break;
              case '*':
                  op = BinaryOperator.Multiply;
                  break;
              case '/':
                  op = BinaryOperator.Divide;
                  break;
              case '%':
                  op = BinaryOperator.Modulo;
                  break;
              case '&&':
                  op = BinaryOperator.And;
                  break;
              case '||':
                  op = BinaryOperator.Or;
                  break;
              case '==':
                  op = BinaryOperator.Equals;
                  break;
              case '!=':
                  op = BinaryOperator.NotEquals;
                  break;
              case '===':
                  op = BinaryOperator.Identical;
                  break;
              case '!==':
                  op = BinaryOperator.NotIdentical;
                  break;
              case '<':
                  op = BinaryOperator.Lower;
                  break;
              case '>':
                  op = BinaryOperator.Bigger;
                  break;
              case '<=':
                  op = BinaryOperator.LowerEquals;
                  break;
              case '>=':
                  op = BinaryOperator.BiggerEquals;
                  break;
              default:
                  throw new Error(`Unsupported operation ${ast.operation}`);
          }
          return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
      }
      visitChain(ast, mode) {
          ensureStatementMode(mode, ast);
          return this.visitAll(ast.expressions, mode);
      }
      visitConditional(ast, mode) {
          const value = this.visit(ast.condition, _Mode.Expression);
          return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
      }
      visitPipe(ast, mode) {
          throw new Error(`Illegal state: Pipes should have been converted into functions. Pipe: ${ast.name}`);
      }
      visitFunctionCall(ast, mode) {
          const convertedArgs = this.visitAll(ast.args, _Mode.Expression);
          let fnResult;
          if (ast instanceof BuiltinFunctionCall) {
              fnResult = ast.converter(convertedArgs);
          }
          else {
              fnResult = this.visit(ast.target, _Mode.Expression).callFn(convertedArgs);
          }
          return convertToStatementIfNeeded(mode, fnResult);
      }
      visitImplicitReceiver(ast, mode) {
          ensureExpressionMode(mode, ast);
          return this._implicitReceiver;
      }
      visitInterpolation(ast, mode) {
          ensureExpressionMode(mode, ast);
          const args = [literal(ast.expressions.length)];
          for (let i = 0; i < ast.strings.length - 1; i++) {
              args.push(literal(ast.strings[i]));
              args.push(this.visit(ast.expressions[i], _Mode.Expression));
          }
          args.push(literal(ast.strings[ast.strings.length - 1]));
          return ast.expressions.length <= 9 ?
              importExpr(createIdentifier(Identifiers.inlineInterpolate)).callFn(args) :
              importExpr(createIdentifier(Identifiers.interpolate)).callFn([
                  args[0], literalArr(args.slice(1))
              ]);
      }
      visitKeyedRead(ast, mode) {
          const leftMostSafe = this.leftMostSafeNode(ast);
          if (leftMostSafe) {
              return this.convertSafeAccess(ast, leftMostSafe, mode);
          }
          else {
              return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
          }
      }
      visitKeyedWrite(ast, mode) {
          const obj = this.visit(ast.obj, _Mode.Expression);
          const key = this.visit(ast.key, _Mode.Expression);
          const value = this.visit(ast.value, _Mode.Expression);
          return convertToStatementIfNeeded(mode, obj.key(key).set(value));
      }
      visitLiteralArray(ast, mode) {
          throw new Error(`Illegal State: literal arrays should have been converted into functions`);
      }
      visitLiteralMap(ast, mode) {
          throw new Error(`Illegal State: literal maps should have been converted into functions`);
      }
      visitLiteralPrimitive(ast, mode) {
          return convertToStatementIfNeeded(mode, literal(ast.value));
      }
      _getLocal(name) { return this._localResolver.getLocal(name); }
      visitMethodCall(ast, mode) {
          const leftMostSafe = this.leftMostSafeNode(ast);
          if (leftMostSafe) {
              return this.convertSafeAccess(ast, leftMostSafe, mode);
          }
          else {
              const args = this.visitAll(ast.args, _Mode.Expression);
              let result = null;
              const receiver = this.visit(ast.receiver, _Mode.Expression);
              if (receiver === this._implicitReceiver) {
                  const varExpr = this._getLocal(ast.name);
                  if (varExpr) {
                      result = varExpr.callFn(args);
                  }
              }
              if (isBlank$1(result)) {
                  result = receiver.callMethod(ast.name, args);
              }
              return convertToStatementIfNeeded(mode, result);
          }
      }
      visitPrefixNot(ast, mode) {
          return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
      }
      visitPropertyRead(ast, mode) {
          const leftMostSafe = this.leftMostSafeNode(ast);
          if (leftMostSafe) {
              return this.convertSafeAccess(ast, leftMostSafe, mode);
          }
          else {
              let result = null;
              const receiver = this.visit(ast.receiver, _Mode.Expression);
              if (receiver === this._implicitReceiver) {
                  result = this._getLocal(ast.name);
              }
              if (isBlank$1(result)) {
                  result = receiver.prop(ast.name);
              }
              return convertToStatementIfNeeded(mode, result);
          }
      }
      visitPropertyWrite(ast, mode) {
          const receiver = this.visit(ast.receiver, _Mode.Expression);
          if (receiver === this._implicitReceiver) {
              const varExpr = this._getLocal(ast.name);
              if (varExpr) {
                  throw new Error('Cannot assign to a reference or variable!');
              }
          }
          return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
      }
      visitSafePropertyRead(ast, mode) {
          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
      }
      visitSafeMethodCall(ast, mode) {
          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
      }
      visitAll(asts, mode) { return asts.map(ast => this.visit(ast, mode)); }
      visitQuote(ast, mode) {
          throw new Error('Quotes are not supported for evaluation!');
      }
      visit(ast, mode) {
          const result = this._resultMap.get(ast);
          if (result)
              return result;
          return (this._nodeMap.get(ast) || ast).visit(this, mode);
      }
      convertSafeAccess(ast, leftMostSafe, mode) {
          // If the expression contains a safe access node on the left it needs to be converted to
          // an expression that guards the access to the member by checking the receiver for blank. As
          // execution proceeds from left to right, the left most part of the expression must be guarded
          // first but, because member access is left associative, the right side of the expression is at
          // the top of the AST. The desired result requires lifting a copy of the the left part of the
          // expression up to test it for blank before generating the unguarded version.
          // Consider, for example the following expression: a?.b.c?.d.e
          // This results in the ast:
          //         .
          //        / \
          //       ?.   e
          //      /  \
          //     .    d
          //    / \
          //   ?.  c
          //  /  \
          // a    b
          // The following tree should be generated:
          //
          //        /---- ? ----\
          //       /      |      \
          //     a   /--- ? ---\  null
          //        /     |     \
          //       .      .     null
          //      / \    / \
          //     .  c   .   e
          //    / \    / \
          //   a   b  ,   d
          //         / \
          //        .   c
          //       / \
          //      a   b
          //
          // Notice that the first guard condition is the left hand of the left most safe access node
          // which comes in as leftMostSafe to this routine.
          let guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);
          let temporary;
          if (this.needsTemporary(leftMostSafe.receiver)) {
              // If the expression has method calls or pipes then we need to save the result into a
              // temporary variable to avoid calling stateful or impure code more than once.
              temporary = this.allocateTemporary();
              // Preserve the result in the temporary variable
              guardedExpression = temporary.set(guardedExpression);
              // Ensure all further references to the guarded expression refer to the temporary instead.
              this._resultMap.set(leftMostSafe.receiver, temporary);
          }
          const condition = guardedExpression.isBlank();
          // Convert the ast to an unguarded access to the receiver's member. The map will substitute
          // leftMostNode with its unguarded version in the call to `this.visit()`.
          if (leftMostSafe instanceof SafeMethodCall) {
              this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
          }
          else {
              this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
          }
          // Recursively convert the node now without the guarded member access.
          const access = this.visit(ast, _Mode.Expression);
          // Remove the mapping. This is not strictly required as the converter only traverses each node
          // once but is safer if the conversion is changed to traverse the nodes more than once.
          this._nodeMap.delete(leftMostSafe);
          // If we allcoated a temporary, release it.
          if (temporary) {
              this.releaseTemporary(temporary);
          }
          // Produce the conditional
          return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
      }
      // Given a expression of the form a?.b.c?.d.e the the left most safe node is
      // the (a?.b). The . and ?. are left associative thus can be rewritten as:
      // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or
      // safe method call as this needs be transform initially to:
      //   a == null ? null : a.c.b.c?.d.e
      // then to:
      //   a == null ? null : a.b.c == null ? null : a.b.c.d.e
      leftMostSafeNode(ast) {
          const visit = (visitor, ast) => {
              return (this._nodeMap.get(ast) || ast).visit(visitor);
          };
          return ast.visit({
              visitBinary(ast) { return null; },
              visitChain(ast) { return null; },
              visitConditional(ast) { return null; },
              visitFunctionCall(ast) { return null; },
              visitImplicitReceiver(ast) { return null; },
              visitInterpolation(ast) { return null; },
              visitKeyedRead(ast) { return visit(this, ast.obj); },
              visitKeyedWrite(ast) { return null; },
              visitLiteralArray(ast) { return null; },
              visitLiteralMap(ast) { return null; },
              visitLiteralPrimitive(ast) { return null; },
              visitMethodCall(ast) { return visit(this, ast.receiver); },
              visitPipe(ast) { return null; },
              visitPrefixNot(ast) { return null; },
              visitPropertyRead(ast) { return visit(this, ast.receiver); },
              visitPropertyWrite(ast) { return null; },
              visitQuote(ast) { return null; },
              visitSafeMethodCall(ast) { return visit(this, ast.receiver) || ast; },
              visitSafePropertyRead(ast) {
                  return visit(this, ast.receiver) || ast;
              }
          });
      }
      // Returns true of the AST includes a method or a pipe indicating that, if the
      // expression is used as the target of a safe property or method access then
      // the expression should be stored into a temporary variable.
      needsTemporary(ast) {
          const visit = (visitor, ast) => {
              return ast && (this._nodeMap.get(ast) || ast).visit(visitor);
          };
          const visitSome = (visitor, ast) => {
              return ast.some(ast => visit(visitor, ast));
          };
          return ast.visit({
              visitBinary(ast) { return visit(this, ast.left) || visit(this, ast.right); },
              visitChain(ast) { return false; },
              visitConditional(ast) {
                  return visit(this, ast.condition) || visit(this, ast.trueExp) ||
                      visit(this, ast.falseExp);
              },
              visitFunctionCall(ast) { return true; },
              visitImplicitReceiver(ast) { return false; },
              visitInterpolation(ast) { return visitSome(this, ast.expressions); },
              visitKeyedRead(ast) { return false; },
              visitKeyedWrite(ast) { return false; },
              visitLiteralArray(ast) { return true; },
              visitLiteralMap(ast) { return true; },
              visitLiteralPrimitive(ast) { return false; },
              visitMethodCall(ast) { return true; },
              visitPipe(ast) { return true; },
              visitPrefixNot(ast) { return visit(this, ast.expression); },
              visitPropertyRead(ast) { return false; },
              visitPropertyWrite(ast) { return false; },
              visitQuote(ast) { return false; },
              visitSafeMethodCall(ast) { return true; },
              visitSafePropertyRead(ast) { return false; }
          });
      }
      allocateTemporary() {
          const tempNumber = this._currentTemporary++;
          this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
          return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
      }
      releaseTemporary(temporary) {
          this._currentTemporary--;
          if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
              throw new Error(`Temporary ${temporary.name} released out of order`);
          }
      }
  }
  function flattenStatements(arg, output) {
      if (Array.isArray(arg)) {
          arg.forEach((entry) => flattenStatements(entry, output));
      }
      else {
          output.push(arg);
      }
  }
  function legacyCreateCachedLiteralArray(builder, values) {
      if (values.length === 0) {
          return importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));
      }
      const proxyExpr = THIS_EXPR.prop(`_arr_${builder.fields.length}`);
      const proxyParams = [];
      const proxyReturnEntries = [];
      for (let i = 0; i < values.length; i++) {
          const paramName = `p${i}`;
          proxyParams.push(new FnParam(paramName));
          proxyReturnEntries.push(variable(paramName));
      }
      createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, builder);
      return proxyExpr.callFn(values);
  }
  function legacyCreateCachedLiteralMap(builder, entries) {
      if (entries.length === 0) {
          return importExpr(createIdentifier(Identifiers.EMPTY_MAP));
      }
      const proxyExpr = THIS_EXPR.prop(`_map_${builder.fields.length}`);
      const proxyParams = [];
      const proxyReturnEntries = [];
      const values = [];
      for (let i = 0; i < entries.length; i++) {
          const paramName = `p${i}`;
          proxyParams.push(new FnParam(paramName));
          proxyReturnEntries.push([entries[i][0], variable(paramName)]);
          values.push(entries[i][1]);
      }
      createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, builder);
      return proxyExpr.callFn(values);
  }
  class DefaultLocalResolver {
      getLocal(name) {
          if (name === EventHandlerVars.event.name) {
              return EventHandlerVars.event;
          }
          return null;
      }
  }
  class LegacyDefaultNameResolver {
      callPipe(name, input, args) { return null; }
      getLocal(name) {
          if (name === EventHandlerVars.event.name) {
              return EventHandlerVars.event;
          }
          return null;
      }
  }
  function createCurrValueExpr(bindingId) {
      return variable(`currVal_${bindingId}`); // fix syntax highlighting: `
  }
  function createPreventDefaultVar(bindingId) {
      return variable(`pd_${bindingId}`);
  }
  function convertStmtIntoExpression(stmt) {
      if (stmt instanceof ExpressionStatement) {
          return stmt.expr;
      }
      else if (stmt instanceof ReturnStatement) {
          return stmt.value;
      }
      return null;
  }
  class BuiltinFunctionCall extends FunctionCall {
      constructor(span, args, converter) {
          super(span, null, args);
          this.args = args;
          this.converter = converter;
      }
  }

  function createCheckRenderBindingStmt(view, renderElement, boundProp, oldValue, evalResult, securityContextExpression) {
      const checkStmts = [...evalResult.stmts];
      const securityContext = calcSecurityContext(boundProp, securityContextExpression);
      switch (boundProp.type) {
          case PropertyBindingType.Property:
              checkStmts.push(importExpr(createIdentifier(Identifiers.checkRenderProperty))
                  .callFn([
                  view, renderElement, literal(boundProp.name), oldValue,
                  oldValue.set(evalResult.currValExpr),
                  evalResult.forceUpdate || literal(false), securityContext
              ])
                  .toStmt());
              break;
          case PropertyBindingType.Attribute:
              checkStmts.push(importExpr(createIdentifier(Identifiers.checkRenderAttribute))
                  .callFn([
                  view, renderElement, literal(boundProp.name), oldValue,
                  oldValue.set(evalResult.currValExpr),
                  evalResult.forceUpdate || literal(false), securityContext
              ])
                  .toStmt());
              break;
          case PropertyBindingType.Class:
              checkStmts.push(importExpr(createIdentifier(Identifiers.checkRenderClass))
                  .callFn([
                  view, renderElement, literal(boundProp.name), oldValue,
                  oldValue.set(evalResult.currValExpr), evalResult.forceUpdate || literal(false)
              ])
                  .toStmt());
              break;
          case PropertyBindingType.Style:
              checkStmts.push(importExpr(createIdentifier(Identifiers.checkRenderStyle))
                  .callFn([
                  view, renderElement, literal(boundProp.name), literal(boundProp.unit), oldValue,
                  oldValue.set(evalResult.currValExpr), evalResult.forceUpdate || literal(false),
                  securityContext
              ])
                  .toStmt());
              break;
          case PropertyBindingType.Animation:
              throw new Error('Illegal state: Should not come here!');
      }
      return checkStmts;
  }
  function calcSecurityContext(boundProp, securityContextExpression) {
      if (boundProp.securityContext === SecurityContext.NONE) {
          return NULL_EXPR; // No sanitization needed.
      }
      if (!boundProp.needsRuntimeSecurityContext) {
          securityContextExpression =
              createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);
      }
      if (!securityContextExpression) {
          throw new Error(`internal error, no SecurityContext given ${boundProp.name}`);
      }
      return securityContextExpression;
  }
  function createCheckAnimationBindingStmts(view, componentView, boundProp, boundOutputs, eventListener, renderElement, oldValue, evalResult) {
      const detachStmts = [];
      const updateStmts = [];
      const animationName = boundProp.name;
      const animationFnExpr = componentView.prop('componentType').prop('animations').key(literal(animationName));
      // it's important to normalize the void value as `void` explicitly
      // so that the styles data can be obtained from the stringmap
      const emptyStateValue = literal(ɵEMPTY_STATE);
      const animationTransitionVar = variable('animationTransition_' + animationName);
      updateStmts.push(animationTransitionVar
          .set(animationFnExpr.callFn([
          view, renderElement, isFirstViewCheck(view).conditional(emptyStateValue, oldValue),
          evalResult.currValExpr
      ]))
          .toDeclStmt());
      updateStmts.push(oldValue.set(evalResult.currValExpr).toStmt());
      detachStmts.push(animationTransitionVar
          .set(animationFnExpr.callFn([view, renderElement, evalResult.currValExpr, emptyStateValue]))
          .toDeclStmt());
      const registerStmts = [];
      const animationStartMethodExists = boundOutputs.find(event => event.isAnimation && event.name == animationName && event.phase == 'start');
      if (animationStartMethodExists) {
          registerStmts.push(animationTransitionVar
              .callMethod('onStart', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'start'))])])
              .toStmt());
      }
      const animationDoneMethodExists = boundOutputs.find(event => event.isAnimation && event.name == animationName && event.phase == 'done');
      if (animationDoneMethodExists) {
          registerStmts.push(animationTransitionVar
              .callMethod('onDone', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'done'))])])
              .toStmt());
      }
      updateStmts.push(...registerStmts);
      detachStmts.push(...registerStmts);
      const checkUpdateStmts = [
          ...evalResult.stmts,
          new IfStmt(importExpr(createIdentifier(Identifiers.checkBinding)).callFn([
              view, oldValue, evalResult.currValExpr, evalResult.forceUpdate || literal(false)
          ]), updateStmts)
      ];
      const checkDetachStmts = [...evalResult.stmts, ...detachStmts];
      return { checkUpdateStmts, checkDetachStmts };
  }

  /**
   * Create a new class stmts based on the given data.
   */
  function createClassStmt(config) {
      const parentArgs = config.parentArgs || [];
      const superCtorStmts = config.parent ? [SUPER_EXPR.callFn(parentArgs).toStmt()] : [];
      const builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]);
      const ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));
      return new ClassStmt(config.name, config.parent, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || [], config.sourceSpan);
  }
  function concatClassBuilderParts(builders) {
      return {
          fields: [].concat(...builders.map(builder => builder.fields || [])),
          methods: [].concat(...builders.map(builder => builder.methods || [])),
          getters: [].concat(...builders.map(builder => builder.getters || [])),
          ctorStmts: [].concat(...builders.map(builder => builder.ctorStmts || [])),
      };
  }

  class DirectiveWrapperCompileResult {
      constructor(statements, dirWrapperClassVar) {
          this.statements = statements;
          this.dirWrapperClassVar = dirWrapperClassVar;
      }
  }
  const CONTEXT_FIELD_NAME = 'context';
  const CHANGES_FIELD_NAME = '_changes';
  const CHANGED_FIELD_NAME = '_changed';
  const EVENT_HANDLER_FIELD_NAME = '_eventHandler';
  const CHANGE_VAR = variable('change');
  const CURR_VALUE_VAR = variable('currValue');
  const FORCE_UPDATE_VAR = variable('forceUpdate');
  const VIEW_VAR = variable('view');
  const COMPONENT_VIEW_VAR = variable('componentView');
  const RENDER_EL_VAR = variable('el');
  const EVENT_NAME_VAR = variable('eventName');
  const RESET_CHANGES_STMT = THIS_EXPR.prop(CHANGES_FIELD_NAME).set(literalMap([])).toStmt();
  /**
   * We generate directive wrappers to prevent code bloat when a directive is used.
   * A directive wrapper encapsulates
   * the dirty checking for `@Input`, the handling of `@HostListener` / `@HostBinding`
   * and calling the lifecyclehooks `ngOnInit`, `ngOnChanges`, `ngDoCheck`.
   *
   * So far, only `@Input` and the lifecycle hooks have been implemented.
   */
  class DirectiveWrapperCompiler {
      constructor(compilerConfig, _exprParser, _schemaRegistry, _console) {
          this.compilerConfig = compilerConfig;
          this._exprParser = _exprParser;
          this._schemaRegistry = _schemaRegistry;
          this._console = _console;
      }
      compile(dirMeta) {
          const hostParseResult = parseHostBindings(dirMeta, this._exprParser, this._schemaRegistry);
          reportParseErrors(hostParseResult.errors, this._console);
          const builder = new DirectiveWrapperBuilder(this.compilerConfig, dirMeta);
          Object.keys(dirMeta.inputs).forEach((inputFieldName) => {
              addCheckInputMethod(inputFieldName, builder);
          });
          addNgDoCheckMethod(builder);
          addCheckHostMethod(hostParseResult.hostProps, hostParseResult.hostListeners, builder);
          addHandleEventMethod(hostParseResult.hostListeners, builder);
          addSubscribeMethod(dirMeta, builder);
          const classStmt = builder.build();
          return new DirectiveWrapperCompileResult([classStmt], classStmt.name);
      }
  }
  DirectiveWrapperCompiler.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  DirectiveWrapperCompiler.ctorParameters = () => [
      { type: CompilerConfig, },
      { type: Parser, },
      { type: ElementSchemaRegistry, },
      { type: Console, },
  ];
  class DirectiveWrapperBuilder {
      constructor(compilerConfig, dirMeta) {
          this.compilerConfig = compilerConfig;
          this.dirMeta = dirMeta;
          this.fields = [];
          this.getters = [];
          this.methods = [];
          this.ctorStmts = [];
          this.detachStmts = [];
          this.destroyStmts = [];
          const dirLifecycleHooks = dirMeta.type.lifecycleHooks;
          this.genChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 ||
              this.compilerConfig.logBindingUpdate;
          this.ngOnChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1;
          this.ngOnInit = dirLifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1;
          this.ngDoCheck = dirLifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1;
          this.ngOnDestroy = dirLifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1;
          if (this.ngOnDestroy) {
              this.destroyStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnDestroy', []).toStmt());
          }
      }
      build() {
          const dirDepParamNames = [];
          for (let i = 0; i < this.dirMeta.type.diDeps.length; i++) {
              dirDepParamNames.push(`p${i}`);
          }
          const methods = [
              new ClassMethod('ngOnDetach', [
                  new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
                  new FnParam(COMPONENT_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
                  new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
              ], this.detachStmts),
              new ClassMethod('ngOnDestroy', [], this.destroyStmts),
          ];
          const fields = [
              new ClassField(EVENT_HANDLER_FIELD_NAME, FUNCTION_TYPE, [StmtModifier.Private]),
              new ClassField(CONTEXT_FIELD_NAME, importType(this.dirMeta.type)),
              new ClassField(CHANGED_FIELD_NAME, BOOL_TYPE, [StmtModifier.Private]),
          ];
          const ctorStmts = [
              THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt(),
          ];
          if (this.genChanges) {
              fields.push(new ClassField(CHANGES_FIELD_NAME, new MapType(DYNAMIC_TYPE), [StmtModifier.Private]));
              ctorStmts.push(RESET_CHANGES_STMT);
          }
          ctorStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
              .set(importExpr(this.dirMeta.type)
              .instantiate(dirDepParamNames.map((paramName) => variable(paramName))))
              .toStmt());
          return createClassStmt({
              name: dirWrapperClassName(this.dirMeta.type.reference),
              ctorParams: dirDepParamNames.map((paramName) => new FnParam(paramName, DYNAMIC_TYPE)),
              builders: [{ fields, ctorStmts, methods }, this]
          });
      }
  }
  function addNgDoCheckMethod(builder) {
      const changedVar = variable('changed');
      const stmts = [
          changedVar.set(THIS_EXPR.prop(CHANGED_FIELD_NAME)).toDeclStmt(),
          THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt(),
      ];
      const lifecycleStmts = [];
      if (builder.genChanges) {
          const onChangesStmts = [];
          if (builder.ngOnChanges) {
              onChangesStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
                  .callMethod('ngOnChanges', [THIS_EXPR.prop(CHANGES_FIELD_NAME)])
                  .toStmt());
          }
          if (builder.compilerConfig.logBindingUpdate) {
              onChangesStmts.push(importExpr(createIdentifier(Identifiers.setBindingDebugInfoForChanges))
                  .callFn([VIEW_VAR.prop('renderer'), RENDER_EL_VAR, THIS_EXPR.prop(CHANGES_FIELD_NAME)])
                  .toStmt());
          }
          onChangesStmts.push(RESET_CHANGES_STMT);
          lifecycleStmts.push(new IfStmt(changedVar, onChangesStmts));
      }
      if (builder.ngOnInit) {
          lifecycleStmts.push(new IfStmt(isFirstViewCheck(VIEW_VAR), [THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnInit', []).toStmt()]));
      }
      if (builder.ngDoCheck) {
          lifecycleStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngDoCheck', []).toStmt());
      }
      if (lifecycleStmts.length > 0) {
          stmts.push(new IfStmt(not(VIEW_VAR.prop('throwOnChange')), lifecycleStmts));
      }
      stmts.push(new ReturnStatement(changedVar));
      builder.methods.push(new ClassMethod('ngDoCheck', [
          new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
          new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
      ], stmts, BOOL_TYPE));
  }
  function addCheckInputMethod(input, builder) {
      const field = createCheckBindingField(builder);
      const onChangeStatements = [
          THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(true)).toStmt(),
          THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(input).set(CURR_VALUE_VAR).toStmt(),
          field.expression.set(CURR_VALUE_VAR).toStmt()
      ];
      let methodBody;
      if (builder.genChanges) {
          onChangeStatements.push(THIS_EXPR.prop(CHANGES_FIELD_NAME).key(literal(input)).set(CHANGE_VAR).toStmt());
          methodBody = [
              CHANGE_VAR
                  .set(importExpr(createIdentifier(Identifiers.checkBindingChange)).callFn([
                  VIEW_VAR, field.expression, CURR_VALUE_VAR, FORCE_UPDATE_VAR
              ]))
                  .toDeclStmt(),
              new IfStmt(CHANGE_VAR, onChangeStatements)
          ];
      }
      else {
          methodBody = [new IfStmt(importExpr(createIdentifier(Identifiers.checkBinding)).callFn([
                  VIEW_VAR, field.expression, CURR_VALUE_VAR, FORCE_UPDATE_VAR
              ]), onChangeStatements)];
      }
      builder.methods.push(new ClassMethod(`check_${input}`, [
          new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
          new FnParam(CURR_VALUE_VAR.name, DYNAMIC_TYPE),
          new FnParam(FORCE_UPDATE_VAR.name, BOOL_TYPE)
      ], methodBody));
  }
  function addCheckHostMethod(hostProps, hostEvents, builder) {
      const stmts = [];
      const methodParams = [
          new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
          new FnParam(COMPONENT_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
          new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
      ];
      hostProps.forEach((hostProp, hostPropIdx) => {
          const field = createCheckBindingField(builder);
          const evalResult = legacyConvertPropertyBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostProp.value, field.bindingId);
          if (!evalResult) {
              return;
          }
          let securityContextExpr;
          if (hostProp.needsRuntimeSecurityContext) {
              securityContextExpr = variable(`secCtx_${methodParams.length}`);
              methodParams.push(new FnParam(securityContextExpr.name, importType(createIdentifier(Identifiers.SecurityContext))));
          }
          if (hostProp.isAnimation) {
              const { checkUpdateStmts, checkDetachStmts } = createCheckAnimationBindingStmts(VIEW_VAR, COMPONENT_VIEW_VAR, hostProp, hostEvents, THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME)
                  .or(importExpr(createIdentifier(Identifiers.noop))), RENDER_EL_VAR, field.expression, evalResult);
              builder.detachStmts.push(...checkDetachStmts);
              stmts.push(...checkUpdateStmts);
          }
          else {
              stmts.push(...createCheckRenderBindingStmt(VIEW_VAR, RENDER_EL_VAR, hostProp, field.expression, evalResult, securityContextExpr));
          }
      });
      builder.methods.push(new ClassMethod('checkHost', methodParams, stmts));
  }
  function addHandleEventMethod(hostListeners, builder) {
      const resultVar = variable(`result`);
      const actionStmts = [resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE)];
      hostListeners.forEach((hostListener, eventIdx) => {
          const evalResult = convertActionBinding(null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostListener.handler, `sub_${eventIdx}`);
          const trueStmts = evalResult.stmts;
          if (evalResult.allowDefault) {
              trueStmts.push(resultVar.set(evalResult.allowDefault.and(resultVar)).toStmt());
          }
          // TODO(tbosch): convert this into a `switch` once our OutputAst supports it.
          actionStmts.push(new IfStmt(EVENT_NAME_VAR.equals(literal(hostListener.fullName)), trueStmts));
      });
      actionStmts.push(new ReturnStatement(resultVar));
      builder.methods.push(new ClassMethod('handleEvent', [
          new FnParam(EVENT_NAME_VAR.name, STRING_TYPE),
          new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)
      ], actionStmts, BOOL_TYPE));
  }
  function addSubscribeMethod(dirMeta, builder) {
      const methodParams = [
          new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
          new FnParam(EVENT_HANDLER_FIELD_NAME, DYNAMIC_TYPE)
      ];
      const stmts = [
          THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).set(variable(EVENT_HANDLER_FIELD_NAME)).toStmt()
      ];
      Object.keys(dirMeta.outputs).forEach((emitterPropName, emitterIdx) => {
          const eventName = dirMeta.outputs[emitterPropName];
          const paramName = `emit${emitterIdx}`;
          methodParams.push(new FnParam(paramName, BOOL_TYPE));
          const subscriptionFieldName = `subscription${emitterIdx}`;
          builder.fields.push(new ClassField(subscriptionFieldName, DYNAMIC_TYPE));
          stmts.push(new IfStmt(variable(paramName), [
              THIS_EXPR.prop(subscriptionFieldName)
                  .set(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
                  .prop(emitterPropName)
                  .callMethod(BuiltinMethod.SubscribeObservable, [variable(EVENT_HANDLER_FIELD_NAME)
                      .callMethod(BuiltinMethod.Bind, [VIEW_VAR, literal(eventName)])]))
                  .toStmt()
          ]));
          builder.destroyStmts.push(THIS_EXPR.prop(subscriptionFieldName)
              .and(THIS_EXPR.prop(subscriptionFieldName).callMethod('unsubscribe', []))
              .toStmt());
      });
      builder.methods.push(new ClassMethod('subscribe', methodParams, stmts));
  }
  class ParseResult {
      constructor(hostProps, hostListeners, errors) {
          this.hostProps = hostProps;
          this.hostListeners = hostListeners;
          this.errors = errors;
      }
  }
  function parseHostBindings(dirMeta, exprParser, schemaRegistry) {
      const errors = [];
      const parser = new BindingParser(exprParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors);
      const moduleUrl = identifierModuleUrl(dirMeta.type);
      const sourceFileName = moduleUrl ?
          `in Directive ${identifierName(dirMeta.type)} in ${moduleUrl}` :
          `in Directive ${identifierName(dirMeta.type)}`;
      const sourceFile = new ParseSourceFile('', sourceFileName);
      const sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
      const parsedHostProps = parser.createDirectiveHostPropertyAsts(dirMeta.toSummary(), dirMeta.selector, sourceSpan);
      const parsedHostListeners = parser.createDirectiveHostEventAsts(dirMeta.toSummary(), sourceSpan);
      return new ParseResult(parsedHostProps, parsedHostListeners, errors);
  }
  function reportParseErrors(parseErrors, console) {
      const warnings = parseErrors.filter(error => error.level === ParseErrorLevel.WARNING);
      const errors = parseErrors.filter(error => error.level === ParseErrorLevel.FATAL);
      if (warnings.length > 0) {
          this._console.warn(`Directive parse warnings:\n${warnings.join('\n')}`);
      }
      if (errors.length > 0) {
          throw new Error(`Directive parse errors:\n${errors.join('\n')}`);
      }
  }
  class DirectiveWrapperExpressions {
      static create(dir, depsExpr) {
          return importExpr(dir).instantiate(depsExpr, importType(dir));
      }
      static context(dirWrapper) {
          return dirWrapper.prop(CONTEXT_FIELD_NAME);
      }
      static ngDoCheck(dirWrapper, view, renderElement) {
          return dirWrapper.callMethod('ngDoCheck', [view, renderElement]);
      }
      static checkHost(hostProps, dirWrapper, view, componentView, renderElement, runtimeSecurityContexts) {
          if (hostProps.length) {
              return [dirWrapper
                      .callMethod('checkHost', [view, componentView, renderElement].concat(runtimeSecurityContexts))
                      .toStmt()];
          }
          else {
              return [];
          }
      }
      static ngOnDetach(hostProps, dirWrapper, view, componentView, renderEl) {
          if (hostProps.some(prop => prop.isAnimation)) {
              return [dirWrapper
                      .callMethod('ngOnDetach', [
                      view,
                      componentView,
                      renderEl,
                  ])
                      .toStmt()];
          }
          else {
              return [];
          }
      }
      static ngOnDestroy(dir, dirWrapper) {
          if (dir.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 ||
              Object.keys(dir.outputs).length > 0) {
              return [dirWrapper.callMethod('ngOnDestroy', []).toStmt()];
          }
          else {
              return [];
          }
      }
      static subscribe(dirMeta, hostProps, usedEvents, dirWrapper, view, eventListener) {
          let needsSubscribe = false;
          const eventFlags = [];
          Object.keys(dirMeta.outputs).forEach((propName) => {
              const eventName = dirMeta.outputs[propName];
              const eventUsed = usedEvents.indexOf(eventName) > -1;
              needsSubscribe = needsSubscribe || eventUsed;
              eventFlags.push(literal(eventUsed));
          });
          hostProps.forEach((hostProp) => {
              if (hostProp.isAnimation && usedEvents.length > 0) {
                  needsSubscribe = true;
              }
          });
          if (needsSubscribe) {
              return [
                  dirWrapper.callMethod('subscribe', [view, eventListener].concat(eventFlags)).toStmt()
              ];
          }
          else {
              return [];
          }
      }
      static handleEvent(hostEvents, dirWrapper, eventName, event) {
          return dirWrapper.callMethod('handleEvent', [eventName, event]);
      }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const STRIP_SRC_FILE_SUFFIXES = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;
  const NG_FACTORY = /\.ngfactory\./;
  function ngfactoryFilePath(filePath) {
      const urlWithSuffix = splitTypescriptSuffix(filePath);
      return `${urlWithSuffix[0]}.ngfactory${urlWithSuffix[1]}`;
  }
  function stripNgFactory(filePath) {
      return filePath.replace(NG_FACTORY, '.');
  }
  function isNgFactoryFile(filePath) {
      return NG_FACTORY.test(filePath);
  }
  function splitTypescriptSuffix(path) {
      if (path.endsWith('.d.ts')) {
          return [path.slice(0, -5), '.ts'];
      }
      const lastDot = path.lastIndexOf('.');
      if (lastDot !== -1) {
          return [path.substring(0, lastDot), path.substring(lastDot)];
      }
      return [path, ''];
  }
  function summaryFileName(fileName) {
      const fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');
      return `${fileNameWithoutSuffix}.ngsummary.json`;
  }

  function hasLifecycleHook(hook, token) {
      return reflector.hasLifecycleHook(token, getHookName(hook));
  }
  function getHookName(hook) {
      switch (hook) {
          case LifecycleHooks.OnInit:
              return 'ngOnInit';
          case LifecycleHooks.OnDestroy:
              return 'ngOnDestroy';
          case LifecycleHooks.DoCheck:
              return 'ngDoCheck';
          case LifecycleHooks.OnChanges:
              return 'ngOnChanges';
          case LifecycleHooks.AfterContentInit:
              return 'ngAfterContentInit';
          case LifecycleHooks.AfterContentChecked:
              return 'ngAfterContentChecked';
          case LifecycleHooks.AfterViewInit:
              return 'ngAfterViewInit';
          case LifecycleHooks.AfterViewChecked:
              return 'ngAfterViewChecked';
      }
  }

  function _isNgModuleMetadata(obj) {
      return obj instanceof NgModule;
  }
  /**
   * Resolves types to {@link NgModule}.
   */
  class NgModuleResolver {
      constructor(_reflector = reflector) {
          this._reflector = _reflector;
      }
      isNgModule(type) { return this._reflector.annotations(type).some(_isNgModuleMetadata); }
      resolve(type, throwIfNotFound = true) {
          const ngModuleMeta = ListWrapper$1.findLast(this._reflector.annotations(type), _isNgModuleMetadata);
          if (ngModuleMeta) {
              return ngModuleMeta;
          }
          else {
              if (throwIfNotFound) {
                  throw new Error(`No NgModule metadata found for '${stringify$1(type)}'.`);
              }
              return null;
          }
      }
  }
  NgModuleResolver.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  NgModuleResolver.ctorParameters = () => [
      { type: ReflectorReader, },
  ];

  function _isPipeMetadata(type) {
      return type instanceof Pipe;
  }
  /**
   * Resolve a `Type` for {@link Pipe}.
   *
   * This interface can be overridden by the application developer to create custom behavior.
   *
   * See {@link Compiler}
   */
  class PipeResolver {
      constructor(_reflector = reflector) {
          this._reflector = _reflector;
      }
      isPipe(type) {
          const typeMetadata = this._reflector.annotations(resolveForwardRef(type));
          return typeMetadata && typeMetadata.some(_isPipeMetadata);
      }
      /**
       * Return {@link Pipe} for a given `Type`.
       */
      resolve(type, throwIfNotFound = true) {
          const metas = this._reflector.annotations(resolveForwardRef(type));
          if (metas) {
              const annotation = ListWrapper$1.findLast(metas, _isPipeMetadata);
              if (annotation) {
                  return annotation;
              }
          }
          if (throwIfNotFound) {
              throw new Error(`No Pipe decorator found on ${stringify$1(type)}`);
          }
          return null;
      }
  }
  PipeResolver.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  PipeResolver.ctorParameters = () => [
      { type: ReflectorReader, },
  ];

  class SummaryResolver {
      isLibraryFile(fileName) { return false; }
      ;
      getLibraryFileName(fileName) { return null; }
      resolveSummary(reference) { return null; }
      ;
      getSymbolsOf(filePath) { return []; }
      getImportAs(reference) { return reference; }
  }
  SummaryResolver.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  SummaryResolver.ctorParameters = () => [];

  const ERROR_COLLECTOR_TOKEN = new InjectionToken('ErrorCollector');
  // Design notes:
  // - don't lazily create metadata:
  //   For some metadata, we need to do async work sometimes,
  //   so the user has to kick off this loading.
  //   But we want to report errors even when the async work is
  //   not required to check that the user would have been able
  //   to wait correctly.
  class CompileMetadataResolver {
      constructor(_config, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _staticSymbolCache, _reflector = reflector, _errorCollector) {
          this._config = _config;
          this._ngModuleResolver = _ngModuleResolver;
          this._directiveResolver = _directiveResolver;
          this._pipeResolver = _pipeResolver;
          this._summaryResolver = _summaryResolver;
          this._schemaRegistry = _schemaRegistry;
          this._directiveNormalizer = _directiveNormalizer;
          this._staticSymbolCache = _staticSymbolCache;
          this._reflector = _reflector;
          this._errorCollector = _errorCollector;
          this._nonNormalizedDirectiveCache = new Map();
          this._directiveCache = new Map();
          this._summaryCache = new Map();
          this._pipeCache = new Map();
          this._ngModuleCache = new Map();
          this._ngModuleOfTypes = new Map();
      }
      clearCacheFor(type) {
          const dirMeta = this._directiveCache.get(type);
          this._directiveCache.delete(type);
          this._nonNormalizedDirectiveCache.delete(type);
          this._summaryCache.delete(type);
          this._pipeCache.delete(type);
          this._ngModuleOfTypes.delete(type);
          // Clear all of the NgModule as they contain transitive information!
          this._ngModuleCache.clear();
          if (dirMeta) {
              this._directiveNormalizer.clearCacheFor(dirMeta);
          }
      }
      clearCache() {
          this._directiveCache.clear();
          this._nonNormalizedDirectiveCache.clear();
          this._summaryCache.clear();
          this._pipeCache.clear();
          this._ngModuleCache.clear();
          this._ngModuleOfTypes.clear();
          this._directiveNormalizer.clearCache();
      }
      _createProxyClass(baseType, name) {
          let delegate = null;
          const proxyClass = function () {
              if (!delegate) {
                  throw new Error(`Illegal state: Class ${name} for type ${stringify$1(baseType)} is not compiled yet!`);
              }
              return delegate.apply(this, arguments);
          };
          proxyClass.setDelegate = (d) => {
              delegate = d;
              proxyClass.prototype = d.prototype;
          };
          // Make stringify work correctly
          proxyClass.overriddenName = name;
          return proxyClass;
      }
      getGeneratedClass(dirType, name) {
          if (dirType instanceof StaticSymbol) {
              return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);
          }
          else {
              return this._createProxyClass(dirType, name);
          }
      }
      getDirectiveWrapperClass(dirType) {
          if (!this._config.useViewEngine) {
              return this.getGeneratedClass(dirType, dirWrapperClassName(dirType));
          }
          return null;
      }
      getComponentViewClass(dirType) {
          return this.getGeneratedClass(dirType, viewClassName(dirType, 0));
      }
      getHostComponentViewClass(dirType) {
          return this.getGeneratedClass(dirType, hostViewClassName(dirType));
      }
      getHostComponentType(dirType) {
          const name = `${identifierName({ reference: dirType })}_Host`;
          if (dirType instanceof StaticSymbol) {
              return this._staticSymbolCache.get(dirType.filePath, name);
          }
          else {
              const HostClass = function HostClass() { };
              HostClass.overriddenName = name;
              return HostClass;
          }
      }
      getRendererType(dirType) {
          if (dirType instanceof StaticSymbol) {
              return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), rendererTypeName(dirType));
          }
          else {
              // returning an object as proxy,
              // that we fill later during runtime compilation.
              return {};
          }
      }
      getComponentFactory(selector, dirType) {
          if (dirType instanceof StaticSymbol) {
              return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), componentFactoryName(dirType));
          }
          else {
              const hostView = this.getHostComponentViewClass(dirType);
              if (this._config.useViewEngine) {
                  return createComponentFactory(selector, dirType, hostView);
              }
              else {
                  return new ComponentFactory(selector, hostView, dirType);
              }
          }
      }
      _loadSummary(type, kind) {
          let typeSummary = this._summaryCache.get(type);
          if (!typeSummary) {
              const summary = this._summaryResolver.resolveSummary(type);
              typeSummary = summary ? summary.type : null;
              this._summaryCache.set(type, typeSummary);
          }
          return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;
      }
      _loadDirectiveMetadata(directiveType, isSync) {
          if (this._directiveCache.has(directiveType)) {
              return;
          }
          directiveType = resolveForwardRef(directiveType);
          const { annotation, metadata } = this.getNonNormalizedDirectiveMetadata(directiveType);
          const createDirectiveMetadata = (templateMetadata) => {
              const normalizedDirMeta = new CompileDirectiveMetadata({
                  type: metadata.type,
                  isComponent: metadata.isComponent,
                  selector: metadata.selector,
                  exportAs: metadata.exportAs,
                  changeDetection: metadata.changeDetection,
                  inputs: metadata.inputs,
                  outputs: metadata.outputs,
                  hostListeners: metadata.hostListeners,
                  hostProperties: metadata.hostProperties,
                  hostAttributes: metadata.hostAttributes,
                  providers: metadata.providers,
                  viewProviders: metadata.viewProviders,
                  queries: metadata.queries,
                  viewQueries: metadata.viewQueries,
                  entryComponents: metadata.entryComponents,
                  wrapperType: metadata.wrapperType,
                  componentViewType: metadata.componentViewType,
                  rendererType: metadata.rendererType,
                  componentFactory: metadata.componentFactory,
                  template: templateMetadata
              });
              this._directiveCache.set(directiveType, normalizedDirMeta);
              this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());
              return normalizedDirMeta;
          };
          if (metadata.isComponent) {
              const templateMeta = this._directiveNormalizer.normalizeTemplate({
                  componentType: directiveType,
                  moduleUrl: componentModuleUrl(this._reflector, directiveType, annotation),
                  encapsulation: metadata.template.encapsulation,
                  template: metadata.template.template,
                  templateUrl: metadata.template.templateUrl,
                  styles: metadata.template.styles,
                  styleUrls: metadata.template.styleUrls,
                  animations: metadata.template.animations,
                  interpolation: metadata.template.interpolation
              });
              if (templateMeta.syncResult) {
                  createDirectiveMetadata(templateMeta.syncResult);
                  return null;
              }
              else {
                  if (isSync) {
                      this._reportError(componentStillLoadingError(directiveType), directiveType);
                      return null;
                  }
                  return templateMeta.asyncResult.then(createDirectiveMetadata);
              }
          }
          else {
              // directive
              createDirectiveMetadata(null);
              return null;
          }
      }
      getNonNormalizedDirectiveMetadata(directiveType) {
          directiveType = resolveForwardRef(directiveType);
          if (!directiveType) {
              return null;
          }
          let cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);
          if (cacheEntry) {
              return cacheEntry;
          }
          const dirMeta = this._directiveResolver.resolve(directiveType, false);
          if (!dirMeta) {
              return null;
          }
          let nonNormalizedTemplateMetadata;
          if (dirMeta instanceof Component) {
              // component
              assertArrayOfStrings('styles', dirMeta.styles);
              assertArrayOfStrings('styleUrls', dirMeta.styleUrls);
              assertInterpolationSymbols('interpolation', dirMeta.interpolation);
              const animations = dirMeta.animations;
              nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
                  encapsulation: dirMeta.encapsulation,
                  template: dirMeta.template,
                  templateUrl: dirMeta.templateUrl,
                  styles: dirMeta.styles,
                  styleUrls: dirMeta.styleUrls,
                  animations: animations,
                  interpolation: dirMeta.interpolation
              });
          }
          let changeDetectionStrategy = null;
          let viewProviders = [];
          let entryComponentMetadata = [];
          let selector = dirMeta.selector;
          if (dirMeta instanceof Component) {
              // Component
              changeDetectionStrategy = dirMeta.changeDetection;
              if (dirMeta.viewProviders) {
                  viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, `viewProviders for "${stringifyType(directiveType)}"`, [], directiveType);
              }
              if (dirMeta.entryComponents) {
                  entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents)
                      .map((type) => this._getEntryComponentMetadata(type))
                      .concat(entryComponentMetadata);
              }
              if (!selector) {
                  selector = this._schemaRegistry.getDefaultComponentElementName();
              }
          }
          else {
              // Directive
              if (!selector) {
                  this._reportError(syntaxError(`Directive ${stringifyType(directiveType)} has no selector, please add it!`), directiveType);
                  selector = 'error';
              }
          }
          let providers = [];
          if (dirMeta.providers != null) {
              providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, `providers for "${stringifyType(directiveType)}"`, [], directiveType);
          }
          let queries = [];
          let viewQueries = [];
          if (dirMeta.queries != null) {
              queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
              viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
          }
          const metadata = CompileDirectiveMetadata.create({
              selector: selector,
              exportAs: dirMeta.exportAs,
              isComponent: !!nonNormalizedTemplateMetadata,
              type: this._getTypeMetadata(directiveType),
              template: nonNormalizedTemplateMetadata,
              changeDetection: changeDetectionStrategy,
              inputs: dirMeta.inputs,
              outputs: dirMeta.outputs,
              host: dirMeta.host,
              providers: providers,
              viewProviders: viewProviders,
              queries: queries,
              viewQueries: viewQueries,
              entryComponents: entryComponentMetadata,
              wrapperType: this.getDirectiveWrapperClass(directiveType),
              componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) :
                  undefined,
              rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : undefined,
              componentFactory: nonNormalizedTemplateMetadata ?
                  this.getComponentFactory(selector, directiveType) :
                  undefined
          });
          cacheEntry = { metadata, annotation: dirMeta };
          this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);
          return cacheEntry;
      }
      /**
       * Gets the metadata for the given directive.
       * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
       */
      getDirectiveMetadata(directiveType) {
          const dirMeta = this._directiveCache.get(directiveType);
          if (!dirMeta) {
              this._reportError(syntaxError(`Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive ${stringifyType(directiveType)}.`), directiveType);
          }
          return dirMeta;
      }
      getDirectiveSummary(dirType) {
          const dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);
          if (!dirSummary) {
              this._reportError(syntaxError(`Illegal state: Could not load the summary for directive ${stringifyType(dirType)}.`), dirType);
          }
          return dirSummary;
      }
      isDirective(type) { return this._directiveResolver.isDirective(type); }
      isPipe(type) { return this._pipeResolver.isPipe(type); }
      getNgModuleSummary(moduleType) {
          let moduleSummary = this._loadSummary(moduleType, CompileSummaryKind.NgModule);
          if (!moduleSummary) {
              const moduleMeta = this.getNgModuleMetadata(moduleType, false);
              moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;
              if (moduleSummary) {
                  this._summaryCache.set(moduleType, moduleSummary);
              }
          }
          return moduleSummary;
      }
      /**
       * Loads the declared directives and pipes of an NgModule.
       */
      loadNgModuleDirectiveAndPipeMetadata(moduleType, isSync, throwIfNotFound = true) {
          const ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);
          const loading = [];
          if (ngModule) {
              ngModule.declaredDirectives.forEach((id) => {
                  const promise = this._loadDirectiveMetadata(id.reference, isSync);
                  if (promise) {
                      loading.push(promise);
                  }
              });
              ngModule.declaredPipes.forEach((id) => this._loadPipeMetadata(id.reference));
          }
          return Promise.all(loading);
      }
      getNgModuleMetadata(moduleType, throwIfNotFound = true) {
          moduleType = resolveForwardRef(moduleType);
          let compileMeta = this._ngModuleCache.get(moduleType);
          if (compileMeta) {
              return compileMeta;
          }
          const meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
          if (!meta) {
              return null;
          }
          const declaredDirectives = [];
          const exportedNonModuleIdentifiers = [];
          const declaredPipes = [];
          const importedModules = [];
          const exportedModules = [];
          const providers = [];
          const entryComponents = [];
          const bootstrapComponents = [];
          const schemas = [];
          if (meta.imports) {
              flattenAndDedupeArray(meta.imports).forEach((importedType) => {
                  let importedModuleType;
                  if (isValidType(importedType)) {
                      importedModuleType = importedType;
                  }
                  else if (importedType && importedType.ngModule) {
                      const moduleWithProviders = importedType;
                      importedModuleType = moduleWithProviders.ngModule;
                      if (moduleWithProviders.providers) {
                          providers.push(...this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, `provider for the NgModule '${stringifyType(importedModuleType)}'`, [], importedType));
                      }
                  }
                  if (importedModuleType) {
                      const importedModuleSummary = this.getNgModuleSummary(importedModuleType);
                      if (!importedModuleSummary) {
                          this._reportError(syntaxError(`Unexpected ${this._getTypeDescriptor(importedType)} '${stringifyType(importedType)}' imported by the module '${stringifyType(moduleType)}'`), moduleType);
                          return;
                      }
                      importedModules.push(importedModuleSummary);
                  }
                  else {
                      this._reportError(syntaxError(`Unexpected value '${stringifyType(importedType)}' imported by the module '${stringifyType(moduleType)}'`), moduleType);
                      return;
                  }
              });
          }
          if (meta.exports) {
              flattenAndDedupeArray(meta.exports).forEach((exportedType) => {
                  if (!isValidType(exportedType)) {
                      this._reportError(syntaxError(`Unexpected value '${stringifyType(exportedType)}' exported by the module '${stringifyType(moduleType)}'`), moduleType);
                      return;
                  }
                  const exportedModuleSummary = this.getNgModuleSummary(exportedType);
                  if (exportedModuleSummary) {
                      exportedModules.push(exportedModuleSummary);
                  }
                  else {
                      exportedNonModuleIdentifiers.push(this._getIdentifierMetadata(exportedType));
                  }
              });
          }
          // Note: This will be modified later, so we rely on
          // getting a new instance every time!
          const transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);
          if (meta.declarations) {
              flattenAndDedupeArray(meta.declarations).forEach((declaredType) => {
                  if (!isValidType(declaredType)) {
                      this._reportError(syntaxError(`Unexpected value '${stringifyType(declaredType)}' declared by the module '${stringifyType(moduleType)}'`), moduleType);
                      return;
                  }
                  const declaredIdentifier = this._getIdentifierMetadata(declaredType);
                  if (this._directiveResolver.isDirective(declaredType)) {
                      transitiveModule.addDirective(declaredIdentifier);
                      declaredDirectives.push(declaredIdentifier);
                      this._addTypeToModule(declaredType, moduleType);
                  }
                  else if (this._pipeResolver.isPipe(declaredType)) {
                      transitiveModule.addPipe(declaredIdentifier);
                      transitiveModule.pipes.push(declaredIdentifier);
                      declaredPipes.push(declaredIdentifier);
                      this._addTypeToModule(declaredType, moduleType);
                  }
                  else {
                      this._reportError(syntaxError(`Unexpected ${this._getTypeDescriptor(declaredType)} '${stringifyType(declaredType)}' declared by the module '${stringifyType(moduleType)}'`), moduleType);
                      return;
                  }
              });
          }
          const exportedDirectives = [];
          const exportedPipes = [];
          exportedNonModuleIdentifiers.forEach((exportedId) => {
              if (transitiveModule.directivesSet.has(exportedId.reference)) {
                  exportedDirectives.push(exportedId);
                  transitiveModule.addExportedDirective(exportedId);
              }
              else if (transitiveModule.pipesSet.has(exportedId.reference)) {
                  exportedPipes.push(exportedId);
                  transitiveModule.addExportedPipe(exportedId);
              }
              else {
                  this._reportError(syntaxError(`Can't export ${this._getTypeDescriptor(exportedId.reference)} ${stringifyType(exportedId.reference)} from ${stringifyType(moduleType)} as it was neither declared nor imported!`), moduleType);
              }
          });
          // The providers of the module have to go last
          // so that they overwrite any other provider we already added.
          if (meta.providers) {
              providers.push(...this._getProvidersMetadata(meta.providers, entryComponents, `provider for the NgModule '${stringifyType(moduleType)}'`, [], moduleType));
          }
          if (meta.entryComponents) {
              entryComponents.push(...flattenAndDedupeArray(meta.entryComponents)
                  .map(type => this._getEntryComponentMetadata(type)));
          }
          if (meta.bootstrap) {
              flattenAndDedupeArray(meta.bootstrap).forEach(type => {
                  if (!isValidType(type)) {
                      this._reportError(syntaxError(`Unexpected value '${stringifyType(type)}' used in the bootstrap property of module '${stringifyType(moduleType)}'`), moduleType);
                      return;
                  }
                  bootstrapComponents.push(this._getIdentifierMetadata(type));
              });
          }
          entryComponents.push(...bootstrapComponents.map(type => this._getEntryComponentMetadata(type.reference)));
          if (meta.schemas) {
              schemas.push(...flattenAndDedupeArray(meta.schemas));
          }
          compileMeta = new CompileNgModuleMetadata({
              type: this._getTypeMetadata(moduleType),
              providers,
              entryComponents,
              bootstrapComponents,
              schemas,
              declaredDirectives,
              exportedDirectives,
              declaredPipes,
              exportedPipes,
              importedModules,
              exportedModules,
              transitiveModule,
              id: meta.id,
          });
          entryComponents.forEach((id) => transitiveModule.addEntryComponent(id));
          providers.forEach((provider) => transitiveModule.addProvider(provider, compileMeta.type));
          transitiveModule.addModule(compileMeta.type);
          this._ngModuleCache.set(moduleType, compileMeta);
          return compileMeta;
      }
      _getTypeDescriptor(type) {
          if (this._directiveResolver.isDirective(type)) {
              return 'directive';
          }
          if (this._pipeResolver.isPipe(type)) {
              return 'pipe';
          }
          if (this._ngModuleResolver.isNgModule(type)) {
              return 'module';
          }
          if (type.provide) {
              return 'provider';
          }
          return 'value';
      }
      _addTypeToModule(type, moduleType) {
          const oldModule = this._ngModuleOfTypes.get(type);
          if (oldModule && oldModule !== moduleType) {
              this._reportError(syntaxError(`Type ${stringifyType(type)} is part of the declarations of 2 modules: ${stringifyType(oldModule)} and ${stringifyType(moduleType)}! ` +
                  `Please consider moving ${stringifyType(type)} to a higher module that imports ${stringifyType(oldModule)} and ${stringifyType(moduleType)}. ` +
                  `You can also create a new NgModule that exports and includes ${stringifyType(type)} then import that NgModule in ${stringifyType(oldModule)} and ${stringifyType(moduleType)}.`), moduleType);
          }
          this._ngModuleOfTypes.set(type, moduleType);
      }
      _getTransitiveNgModuleMetadata(importedModules, exportedModules) {
          // collect `providers` / `entryComponents` from all imported and all exported modules
          const result = new TransitiveCompileNgModuleMetadata();
          const modulesByToken = new Map();
          importedModules.concat(exportedModules).forEach((modSummary) => {
              modSummary.modules.forEach((mod) => result.addModule(mod));
              modSummary.entryComponents.forEach((comp) => result.addEntryComponent(comp));
              const addedTokens = new Set();
              modSummary.providers.forEach((entry) => {
                  const tokenRef = tokenReference(entry.provider.token);
                  let prevModules = modulesByToken.get(tokenRef);
                  if (!prevModules) {
                      prevModules = new Set();
                      modulesByToken.set(tokenRef, prevModules);
                  }
                  const moduleRef = entry.module.reference;
                  // Note: the providers of one module may still contain multiple providers
                  // per token (e.g. for multi providers), and we need to preserve these.
                  if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {
                      prevModules.add(moduleRef);
                      addedTokens.add(tokenRef);
                      result.addProvider(entry.provider, entry.module);
                  }
              });
          });
          exportedModules.forEach((modSummary) => {
              modSummary.exportedDirectives.forEach((id) => result.addExportedDirective(id));
              modSummary.exportedPipes.forEach((id) => result.addExportedPipe(id));
          });
          importedModules.forEach((modSummary) => {
              modSummary.exportedDirectives.forEach((id) => result.addDirective(id));
              modSummary.exportedPipes.forEach((id) => result.addPipe(id));
          });
          return result;
      }
      _getIdentifierMetadata(type) {
          type = resolveForwardRef(type);
          return { reference: type };
      }
      isInjectable(type) {
          const annotations = this._reflector.annotations(type);
          // Note: We need an exact check here as @Component / @Directive / ... inherit
          // from @CompilerInjectable!
          return annotations.some(ann => ann.constructor === Injectable);
      }
      getInjectableSummary(type) {
          return { summaryKind: CompileSummaryKind.Injectable, type: this._getTypeMetadata(type) };
      }
      _getInjectableMetadata(type, dependencies = null) {
          const typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);
          if (typeSummary) {
              return typeSummary.type;
          }
          return this._getTypeMetadata(type, dependencies);
      }
      _getTypeMetadata(type, dependencies = null) {
          const identifier = this._getIdentifierMetadata(type);
          return {
              reference: identifier.reference,
              diDeps: this._getDependenciesMetadata(identifier.reference, dependencies),
              lifecycleHooks: ɵLIFECYCLE_HOOKS_VALUES.filter(hook => hasLifecycleHook(hook, identifier.reference)),
          };
      }
      _getFactoryMetadata(factory, dependencies = null) {
          factory = resolveForwardRef(factory);
          return { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };
      }
      /**
       * Gets the metadata for the given pipe.
       * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
       */
      getPipeMetadata(pipeType) {
          const pipeMeta = this._pipeCache.get(pipeType);
          if (!pipeMeta) {
              this._reportError(syntaxError(`Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe ${stringifyType(pipeType)}.`), pipeType);
          }
          return pipeMeta;
      }
      getPipeSummary(pipeType) {
          const pipeSummary = this._loadSummary(pipeType, CompileSummaryKind.Pipe);
          if (!pipeSummary) {
              this._reportError(syntaxError(`Illegal state: Could not load the summary for pipe ${stringifyType(pipeType)}.`), pipeType);
          }
          return pipeSummary;
      }
      getOrLoadPipeMetadata(pipeType) {
          let pipeMeta = this._pipeCache.get(pipeType);
          if (!pipeMeta) {
              pipeMeta = this._loadPipeMetadata(pipeType);
          }
          return pipeMeta;
      }
      _loadPipeMetadata(pipeType) {
          pipeType = resolveForwardRef(pipeType);
          const pipeAnnotation = this._pipeResolver.resolve(pipeType);
          const pipeMeta = new CompilePipeMetadata({
              type: this._getTypeMetadata(pipeType),
              name: pipeAnnotation.name,
              pure: pipeAnnotation.pure
          });
          this._pipeCache.set(pipeType, pipeMeta);
          this._summaryCache.set(pipeType, pipeMeta.toSummary());
          return pipeMeta;
      }
      _getDependenciesMetadata(typeOrFunc, dependencies) {
          let hasUnknownDeps = false;
          const params = dependencies || this._reflector.parameters(typeOrFunc) || [];
          const dependenciesMetadata = params.map((param) => {
              let isAttribute = false;
              let isHost = false;
              let isSelf = false;
              let isSkipSelf = false;
              let isOptional = false;
              let token = null;
              if (Array.isArray(param)) {
                  param.forEach((paramEntry) => {
                      if (paramEntry instanceof Host) {
                          isHost = true;
                      }
                      else if (paramEntry instanceof Self) {
                          isSelf = true;
                      }
                      else if (paramEntry instanceof SkipSelf) {
                          isSkipSelf = true;
                      }
                      else if (paramEntry instanceof Optional) {
                          isOptional = true;
                      }
                      else if (paramEntry instanceof Attribute) {
                          isAttribute = true;
                          token = paramEntry.attributeName;
                      }
                      else if (paramEntry instanceof Inject) {
                          token = paramEntry.token;
                      }
                      else if (paramEntry instanceof InjectionToken) {
                          token = paramEntry;
                      }
                      else if (isValidType(paramEntry) && token == null) {
                          token = paramEntry;
                      }
                  });
              }
              else {
                  token = param;
              }
              if (token == null) {
                  hasUnknownDeps = true;
                  return null;
              }
              return {
                  isAttribute,
                  isHost,
                  isSelf,
                  isSkipSelf,
                  isOptional,
                  token: this._getTokenMetadata(token)
              };
          });
          if (hasUnknownDeps) {
              const depsTokens = dependenciesMetadata.map((dep) => dep ? stringifyType(dep.token) : '?').join(', ');
              this._reportError(syntaxError(`Can't resolve all parameters for ${stringifyType(typeOrFunc)}: (${depsTokens}).`), typeOrFunc);
          }
          return dependenciesMetadata;
      }
      _getTokenMetadata(token) {
          token = resolveForwardRef(token);
          let compileToken;
          if (typeof token === 'string') {
              compileToken = { value: token };
          }
          else {
              compileToken = { identifier: { reference: token } };
          }
          return compileToken;
      }
      _getProvidersMetadata(providers, targetEntryComponents, debugInfo, compileProviders = [], type) {
          providers.forEach((provider, providerIdx) => {
              if (Array.isArray(provider)) {
                  this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);
              }
              else {
                  provider = resolveForwardRef(provider);
                  let providerMeta;
                  if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {
                      this._validateProvider(provider);
                      providerMeta = new ProviderMeta(provider.provide, provider);
                  }
                  else if (isValidType(provider)) {
                      providerMeta = new ProviderMeta(provider, { useClass: provider });
                  }
                  else if (provider === void 0) {
                      this._reportError(syntaxError(`Encountered undefined provider! Usually this means you have a circular dependencies (might be caused by using 'barrel' index.ts files.`));
                  }
                  else {
                      const providersInfo = providers.reduce((soFar, seenProvider, seenProviderIdx) => {
                          if (seenProviderIdx < providerIdx) {
                              soFar.push(`${stringifyType(seenProvider)}`);
                          }
                          else if (seenProviderIdx == providerIdx) {
                              soFar.push(`?${stringifyType(seenProvider)}?`);
                          }
                          else if (seenProviderIdx == providerIdx + 1) {
                              soFar.push('...');
                          }
                          return soFar;
                      }, [])
                          .join(', ');
                      this._reportError(syntaxError(`Invalid ${debugInfo ? debugInfo : 'provider'} - only instances of Provider and Type are allowed, got: [${providersInfo}]`), type);
                  }
                  if (providerMeta.token === resolveIdentifier(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {
                      targetEntryComponents.push(...this._getEntryComponentsFromProvider(providerMeta, type));
                  }
                  else {
                      compileProviders.push(this.getProviderMetadata(providerMeta));
                  }
              }
          });
          return compileProviders;
      }
      _validateProvider(provider) {
          if (provider.hasOwnProperty('useClass') && provider.useClass == null) {
              this._reportError(syntaxError(`Invalid provider for ${stringifyType(provider.provide)}. useClass cannot be ${provider.useClass}.
           Usually it happens when:
           1. There's a circular dependency (might be caused by using index.ts (barrel) files).
           2. Class was used before it was declared. Use forwardRef in this case.`));
          }
      }
      _getEntryComponentsFromProvider(provider, type) {
          const components = [];
          const collectedIdentifiers = [];
          if (provider.useFactory || provider.useExisting || provider.useClass) {
              this._reportError(syntaxError(`The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!`), type);
              return [];
          }
          if (!provider.multi) {
              this._reportError(syntaxError(`The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!`), type);
              return [];
          }
          extractIdentifiers(provider.useValue, collectedIdentifiers);
          collectedIdentifiers.forEach((identifier) => {
              const entry = this._getEntryComponentMetadata(identifier.reference, false);
              if (entry) {
                  components.push(entry);
              }
          });
          return components;
      }
      _getEntryComponentMetadata(dirType, throwIfNotFound = true) {
          const dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);
          if (dirMeta && dirMeta.metadata.isComponent) {
              return { componentType: dirType, componentFactory: dirMeta.metadata.componentFactory };
          }
          else {
              const dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);
              if (dirSummary && dirSummary.isComponent) {
                  return { componentType: dirType, componentFactory: dirSummary.componentFactory };
              }
          }
          if (throwIfNotFound) {
              throw syntaxError(`${dirType.name} cannot be used as an entry component.`);
          }
      }
      getProviderMetadata(provider) {
          let compileDeps;
          let compileTypeMetadata = null;
          let compileFactoryMetadata = null;
          let token = this._getTokenMetadata(provider.token);
          if (provider.useClass) {
              compileTypeMetadata = this._getInjectableMetadata(provider.useClass, provider.dependencies);
              compileDeps = compileTypeMetadata.diDeps;
              if (provider.token === provider.useClass) {
                  // use the compileTypeMetadata as it contains information about lifecycleHooks...
                  token = { identifier: compileTypeMetadata };
              }
          }
          else if (provider.useFactory) {
              compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);
              compileDeps = compileFactoryMetadata.diDeps;
          }
          return {
              token: token,
              useClass: compileTypeMetadata,
              useValue: provider.useValue,
              useFactory: compileFactoryMetadata,
              useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : null,
              deps: compileDeps,
              multi: provider.multi
          };
      }
      _getQueriesMetadata(queries, isViewQuery, directiveType) {
          const res = [];
          Object.keys(queries).forEach((propertyName) => {
              const query = queries[propertyName];
              if (query.isViewQuery === isViewQuery) {
                  res.push(this._getQueryMetadata(query, propertyName, directiveType));
              }
          });
          return res;
      }
      _queryVarBindings(selector) { return selector.split(/\s*,\s*/); }
      _getQueryMetadata(q, propertyName, typeOrFunc) {
          let selectors;
          if (typeof q.selector === 'string') {
              selectors =
                  this._queryVarBindings(q.selector).map(varName => this._getTokenMetadata(varName));
          }
          else {
              if (!q.selector) {
                  this._reportError(syntaxError(`Can't construct a query for the property "${propertyName}" of "${stringifyType(typeOrFunc)}" since the query selector wasn't defined.`), typeOrFunc);
              }
              selectors = [this._getTokenMetadata(q.selector)];
          }
          return {
              selectors,
              first: q.first,
              descendants: q.descendants, propertyName,
              read: q.read ? this._getTokenMetadata(q.read) : null
          };
      }
      _reportError(error, type, otherType) {
          if (this._errorCollector) {
              this._errorCollector(error, type);
              if (otherType) {
                  this._errorCollector(error, otherType);
              }
          }
          else {
              throw error;
          }
      }
  }
  CompileMetadataResolver.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  CompileMetadataResolver.ctorParameters = () => [
      { type: CompilerConfig, },
      { type: NgModuleResolver, },
      { type: DirectiveResolver, },
      { type: PipeResolver, },
      { type: SummaryResolver, },
      { type: ElementSchemaRegistry, },
      { type: DirectiveNormalizer, },
      { type: StaticSymbolCache, decorators: [{ type: Optional },] },
      { type: ReflectorReader, },
      { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ERROR_COLLECTOR_TOKEN,] },] },
  ];
  function flattenArray(tree, out = []) {
      if (tree) {
          for (let i = 0; i < tree.length; i++) {
              const item = resolveForwardRef(tree[i]);
              if (Array.isArray(item)) {
                  flattenArray(item, out);
              }
              else {
                  out.push(item);
              }
          }
      }
      return out;
  }
  function dedupeArray(array) {
      if (array) {
          return Array.from(new Set(array));
      }
      return [];
  }
  function flattenAndDedupeArray(tree) {
      return dedupeArray(flattenArray(tree));
  }
  function isValidType(value) {
      return (value instanceof StaticSymbol) || (value instanceof Type);
  }
  function componentModuleUrl(reflector, type, cmpMetadata) {
      if (type instanceof StaticSymbol) {
          return type.filePath;
      }
      const moduleId = cmpMetadata.moduleId;
      if (typeof moduleId === 'string') {
          const scheme = getUrlScheme(moduleId);
          return scheme ? moduleId : `package:${moduleId}${MODULE_SUFFIX}`;
      }
      else if (moduleId !== null && moduleId !== void 0) {
          throw syntaxError(`moduleId should be a string in "${stringifyType(type)}". See https://goo.gl/wIDDiL for more information.\n` +
              `If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.`);
      }
      return reflector.importUri(type);
  }
  function extractIdentifiers(value, targetIdentifiers) {
      visitValue(value, new _CompileValueConverter(), targetIdentifiers);
  }
  class _CompileValueConverter extends ValueTransformer {
      visitOther(value, targetIdentifiers) {
          targetIdentifiers.push({ reference: value });
      }
  }
  function stringifyType(type) {
      if (type instanceof StaticSymbol) {
          return `${type.name} in ${type.filePath}`;
      }
      else {
          return stringify$1(type);
      }
  }
  /**
   * Indicates that a component is still being loaded in a synchronous compile.
   */
  function componentStillLoadingError(compType) {
      debugger;
      const error = Error(`Can't compile synchronously as ${stringify$1(compType)} is still being loaded!`);
      error[ɵERROR_COMPONENT_TYPE] = compType;
      return error;
  }

  const QUOTED_KEYS = '$quoted$';
  function convertValueToOutputAst(value, type = null) {
      return visitValue(value, new _ValueOutputAstTransformer(), type);
  }
  class _ValueOutputAstTransformer {
      visitArray(arr, type) {
          return literalArr(arr.map(value => visitValue(value, this, null)), type);
      }
      visitStringMap(map, type) {
          const entries = [];
          const quotedSet = new Set(map && map[QUOTED_KEYS]);
          Object.keys(map).forEach(key => {
              entries.push(new LiteralMapEntry(key, visitValue(map[key], this, null), quotedSet.has(key)));
          });
          return new LiteralMapExpr(entries, type);
      }
      visitPrimitive(value, type) { return literal(value, type); }
      visitOther(value, type) {
          if (value instanceof Expression) {
              return value;
          }
          else {
              return importExpr({ reference: value });
          }
      }
  }

  /**
   * This is currently not read, but will probably be used in the future.
   * We keep it as we already pass it through all the rigth places...
   */
  class ComponentFactoryDependency {
      constructor(compType) {
          this.compType = compType;
      }
  }
  class NgModuleCompileResult {
      constructor(statements, ngModuleFactoryVar, dependencies) {
          this.statements = statements;
          this.ngModuleFactoryVar = ngModuleFactoryVar;
          this.dependencies = dependencies;
      }
  }
  class NgModuleCompiler {
      compile(ngModuleMeta, extraProviders) {
          const moduleUrl = identifierModuleUrl(ngModuleMeta.type);
          const sourceFileName = isPresent$1(moduleUrl) ?
              `in NgModule ${identifierName(ngModuleMeta.type)} in ${moduleUrl}` :
              `in NgModule ${identifierName(ngModuleMeta.type)}`;
          const sourceFile = new ParseSourceFile('', sourceFileName);
          const sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
          const deps = [];
          const bootstrapComponentFactories = [];
          const entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map((entryComponent) => {
              if (ngModuleMeta.bootstrapComponents.some((id) => id.reference === entryComponent.componentType)) {
                  bootstrapComponentFactories.push({ reference: entryComponent.componentFactory });
              }
              deps.push(new ComponentFactoryDependency(entryComponent.componentType));
              return { reference: entryComponent.componentFactory };
          });
          const builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
          const providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
          providerParser.parse().forEach((provider) => builder.addProvider(provider));
          const injectorClass = builder.build();
          const ngModuleFactoryVar = `${identifierName(ngModuleMeta.type)}NgFactory`;
          const ngModuleFactoryStmt = variable(ngModuleFactoryVar)
              .set(importExpr(createIdentifier(Identifiers.NgModuleFactory))
              .instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(createIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const])))
              .toDeclStmt(null, [StmtModifier.Final]);
          const stmts = [injectorClass, ngModuleFactoryStmt];
          if (ngModuleMeta.id) {
              const registerFactoryStmt = importExpr(createIdentifier(Identifiers.RegisterModuleFactoryFn))
                  .callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)])
                  .toStmt();
              stmts.push(registerFactoryStmt);
          }
          return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
      }
  }
  NgModuleCompiler.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  NgModuleCompiler.ctorParameters = () => [];
  class _InjectorBuilder {
      constructor(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
          this._ngModuleMeta = _ngModuleMeta;
          this._entryComponentFactories = _entryComponentFactories;
          this._bootstrapComponentFactories = _bootstrapComponentFactories;
          this._sourceSpan = _sourceSpan;
          this.fields = [];
          this.getters = [];
          this.methods = [];
          this.ctorStmts = [];
          this._tokens = [];
          this._instances = new Map();
          this._createStmts = [];
          this._destroyStmts = [];
      }
      addProvider(resolvedProvider) {
          const providerValueExpressions = resolvedProvider.providers.map((provider) => this._getProviderValue(provider));
          const propName = `_${tokenName(resolvedProvider.token)}_${this._instances.size}`;
          const instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
          if (resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
              this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());
          }
          this._tokens.push(resolvedProvider.token);
          this._instances.set(tokenReference(resolvedProvider.token), instance);
      }
      build() {
          const getMethodStmts = this._tokens.map((token) => {
              const providerExpr = this._instances.get(tokenReference(token));
              return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
          });
          const methods = [
              new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)),
              new ClassMethod('getInternal', [
                  new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE),
                  new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)
              ], getMethodStmts.concat([new ReturnStatement(InjectMethodVars.notFoundResult)]), DYNAMIC_TYPE),
              new ClassMethod('destroyInternal', [], this._destroyStmts),
          ];
          const parentArgs = [
              variable(InjectorProps.parent.name),
              literalArr(this._entryComponentFactories.map((componentFactory) => importExpr(componentFactory))),
              literalArr(this._bootstrapComponentFactories.map((componentFactory) => importExpr(componentFactory)))
          ];
          const injClassName = `${identifierName(this._ngModuleMeta.type)}Injector`;
          return createClassStmt({
              name: injClassName,
              ctorParams: [new FnParam(InjectorProps.parent.name, importType(createIdentifier(Identifiers.Injector)))],
              parent: importExpr(createIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]),
              parentArgs: parentArgs,
              builders: [{ methods }, this]
          });
      }
      _getProviderValue(provider) {
          let result;
          if (isPresent$1(provider.useExisting)) {
              result = this._getDependency({ token: provider.useExisting });
          }
          else if (isPresent$1(provider.useFactory)) {
              const deps = provider.deps || provider.useFactory.diDeps;
              const depsExpr = deps.map((dep) => this._getDependency(dep));
              result = importExpr(provider.useFactory).callFn(depsExpr);
          }
          else if (isPresent$1(provider.useClass)) {
              const deps = provider.deps || provider.useClass.diDeps;
              const depsExpr = deps.map((dep) => this._getDependency(dep));
              result =
                  importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
          }
          else {
              result = convertValueToOutputAst(provider.useValue);
          }
          return result;
      }
      _createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager) {
          let resolvedProviderValueExpr;
          let type;
          if (isMulti) {
              resolvedProviderValueExpr = literalArr(providerValueExpressions);
              type = new ArrayType(DYNAMIC_TYPE);
          }
          else {
              resolvedProviderValueExpr = providerValueExpressions[0];
              type = providerValueExpressions[0].type;
          }
          if (!type) {
              type = DYNAMIC_TYPE;
          }
          if (isEager) {
              this.fields.push(new ClassField(propName, type));
              this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
          }
          else {
              const internalField = `_${propName}`;
              this.fields.push(new ClassField(internalField, type));
              // Note: Equals is important for JS so that it also checks the undefined case!
              const getterStmts = [
                  new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]),
                  new ReturnStatement(THIS_EXPR.prop(internalField))
              ];
              this.getters.push(new ClassGetter(propName, getterStmts, type));
          }
          return THIS_EXPR.prop(propName);
      }
      _getDependency(dep) {
          let result = null;
          if (dep.isValue) {
              result = literal(dep.value);
          }
          if (!dep.isSkipSelf) {
              if (dep.token &&
                  (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ||
                      tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver))) {
                  result = THIS_EXPR;
              }
              if (!result) {
                  result = this._instances.get(tokenReference(dep.token));
              }
          }
          if (!result) {
              const args = [createDiTokenExpression(dep.token)];
              if (dep.isOptional) {
                  args.push(NULL_EXPR);
              }
              result = InjectorProps.parent.callMethod('get', args);
          }
          return result;
      }
  }
  class InjectorProps {
  }
  InjectorProps.parent = THIS_EXPR.prop('parent');
  class InjectMethodVars {
  }
  InjectMethodVars.token = variable('token');
  InjectMethodVars.notFoundResult = variable('notFoundResult');

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit
  const VERSION$2 = 3;
  const JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';
  class SourceMapGenerator {
      constructor(file = null) {
          this.file = file;
          this.sourcesContent = new Map();
          this.lines = [];
          this.lastCol0 = 0;
          this.hasMappings = false;
      }
      // The content is `null` when the content is expected to be loaded using the URL
      addSource(url, content = null) {
          if (!this.sourcesContent.has(url)) {
              this.sourcesContent.set(url, content);
          }
          return this;
      }
      addLine() {
          this.lines.push([]);
          this.lastCol0 = 0;
          return this;
      }
      addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {
          if (!this.currentLine) {
              throw new Error(`A line must be added before mappings can be added`);
          }
          if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {
              throw new Error(`Unknown source file "${sourceUrl}"`);
          }
          if (col0 == null) {
              throw new Error(`The column in the generated code must be provided`);
          }
          if (col0 < this.lastCol0) {
              throw new Error(`Mapping should be added in output order`);
          }
          if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {
              throw new Error(`The source location must be provided when a source url is provided`);
          }
          this.hasMappings = true;
          this.lastCol0 = col0;
          this.currentLine.push({ col0, sourceUrl, sourceLine0, sourceCol0 });
          return this;
      }
      get currentLine() { return this.lines.slice(-1)[0]; }
      toJSON() {
          if (!this.hasMappings) {
              return null;
          }
          const sourcesIndex = new Map();
          const sources = [];
          const sourcesContent = [];
          Array.from(this.sourcesContent.keys()).forEach((url, i) => {
              sourcesIndex.set(url, i);
              sources.push(url);
              sourcesContent.push(this.sourcesContent.get(url) || null);
          });
          let mappings = '';
          let lastCol0 = 0;
          let lastSourceIndex = 0;
          let lastSourceLine0 = 0;
          let lastSourceCol0 = 0;
          this.lines.forEach(segments => {
              lastCol0 = 0;
              mappings += segments
                  .map(segment => {
                  // zero-based starting column of the line in the generated code
                  let segAsStr = toBase64VLQ(segment.col0 - lastCol0);
                  lastCol0 = segment.col0;
                  if (segment.sourceUrl != null) {
                      // zero-based index into the “sources” list
                      segAsStr +=
                          toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);
                      lastSourceIndex = sourcesIndex.get(segment.sourceUrl);
                      // the zero-based starting line in the original source
                      segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);
                      lastSourceLine0 = segment.sourceLine0;
                      // the zero-based starting column in the original source
                      segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);
                      lastSourceCol0 = segment.sourceCol0;
                  }
                  return segAsStr;
              })
                  .join(',');
              mappings += ';';
          });
          mappings = mappings.slice(0, -1);
          return {
              'file': this.file || '',
              'version': VERSION$2,
              'sourceRoot': '',
              'sources': sources,
              'sourcesContent': sourcesContent,
              'mappings': mappings,
          };
      }
      toJsComment() {
          return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) :
              '';
      }
  }
  function toBase64String(value) {
      let b64 = '';
      for (let i = 0; i < value.length;) {
          const i1 = value.charCodeAt(i++);
          const i2 = value.charCodeAt(i++);
          const i3 = value.charCodeAt(i++);
          b64 += toBase64Digit(i1 >> 2);
          b64 += toBase64Digit(((i1 & 3) << 4) | (isNaN(i2) ? 0 : i2 >> 4));
          b64 += isNaN(i2) ? '=' : toBase64Digit(((i2 & 15) << 2) | (i3 >> 6));
          b64 += isNaN(i2) || isNaN(i3) ? '=' : toBase64Digit(i3 & 63);
      }
      return b64;
  }
  function toBase64VLQ(value) {
      value = value < 0 ? ((-value) << 1) + 1 : value << 1;
      let out = '';
      do {
          let digit = value & 31;
          value = value >> 5;
          if (value > 0) {
              digit = digit | 32;
          }
          out += toBase64Digit(digit);
      } while (value > 0);
      return out;
  }
  const B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  function toBase64Digit(value) {
      if (value < 0 || value >= 64) {
          throw new Error(`Can only encode value in the range [0, 63]`);
      }
      return B64_DIGITS[value];
  }

  const _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
  const _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
  const _INDENT_WITH = '  ';
  const CATCH_ERROR_VAR$1 = variable('error');
  const CATCH_STACK_VAR$1 = variable('stack');
  class _EmittedLine {
      constructor(indent) {
          this.indent = indent;
          this.parts = [];
          this.srcSpans = [];
      }
  }
  class EmitterVisitorContext {
      constructor(_exportedVars, _indent) {
          this._exportedVars = _exportedVars;
          this._indent = _indent;
          this._classes = [];
          this._lines = [new _EmittedLine(_indent)];
      }
      static createRoot(exportedVars) {
          return new EmitterVisitorContext(exportedVars, 0);
      }
      get _currentLine() { return this._lines[this._lines.length - 1]; }
      isExportedVar(varName) { return this._exportedVars.indexOf(varName) !== -1; }
      println(from, lastPart = '') {
          this.print(from, lastPart, true);
      }
      lineIsEmpty() { return this._currentLine.parts.length === 0; }
      print(from, part, newLine = false) {
          if (part.length > 0) {
              this._currentLine.parts.push(part);
              this._currentLine.srcSpans.push(from && from.sourceSpan || null);
          }
          if (newLine) {
              this._lines.push(new _EmittedLine(this._indent));
          }
      }
      removeEmptyLastLine() {
          if (this.lineIsEmpty()) {
              this._lines.pop();
          }
      }
      incIndent() {
          this._indent++;
          this._currentLine.indent = this._indent;
      }
      decIndent() {
          this._indent--;
          this._currentLine.indent = this._indent;
      }
      pushClass(clazz) { this._classes.push(clazz); }
      popClass() { return this._classes.pop(); }
      get currentClass() {
          return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
      }
      toSource() {
          return this.sourceLines
              .map(l => l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : '')
              .join('\n');
      }
      toSourceMapGenerator(file = null, startsAtLine = 0) {
          const map = new SourceMapGenerator(file);
          for (let i = 0; i < startsAtLine; i++) {
              map.addLine();
          }
          this.sourceLines.forEach(line => {
              map.addLine();
              const spans = line.srcSpans;
              const parts = line.parts;
              let col0 = line.indent * _INDENT_WITH.length;
              let spanIdx = 0;
              // skip leading parts without source spans
              while (spanIdx < spans.length && !spans[spanIdx]) {
                  col0 += parts[spanIdx].length;
                  spanIdx++;
              }
              while (spanIdx < spans.length) {
                  const span = spans[spanIdx];
                  const source = span.start.file;
                  const sourceLine = span.start.line;
                  const sourceCol = span.start.col;
                  map.addSource(source.url, source.content)
                      .addMapping(col0, source.url, sourceLine, sourceCol);
                  col0 += parts[spanIdx].length;
                  spanIdx++;
                  // assign parts without span or the same span to the previous segment
                  while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {
                      col0 += parts[spanIdx].length;
                      spanIdx++;
                  }
              }
          });
          return map;
      }
      get sourceLines() {
          if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {
              return this._lines.slice(0, -1);
          }
          return this._lines;
      }
  }
  class AbstractEmitterVisitor {
      constructor(_escapeDollarInStrings) {
          this._escapeDollarInStrings = _escapeDollarInStrings;
      }
      visitExpressionStmt(stmt, ctx) {
          stmt.expr.visitExpression(this, ctx);
          ctx.println(stmt, ';');
          return null;
      }
      visitReturnStmt(stmt, ctx) {
          ctx.print(stmt, `return `);
          stmt.value.visitExpression(this, ctx);
          ctx.println(stmt, ';');
          return null;
      }
      visitIfStmt(stmt, ctx) {
          ctx.print(stmt, `if (`);
          stmt.condition.visitExpression(this, ctx);
          ctx.print(stmt, `) {`);
          const hasElseCase = isPresent$1(stmt.falseCase) && stmt.falseCase.length > 0;
          if (stmt.trueCase.length <= 1 && !hasElseCase) {
              ctx.print(stmt, ` `);
              this.visitAllStatements(stmt.trueCase, ctx);
              ctx.removeEmptyLastLine();
              ctx.print(stmt, ` `);
          }
          else {
              ctx.println();
              ctx.incIndent();
              this.visitAllStatements(stmt.trueCase, ctx);
              ctx.decIndent();
              if (hasElseCase) {
                  ctx.println(stmt, `} else {`);
                  ctx.incIndent();
                  this.visitAllStatements(stmt.falseCase, ctx);
                  ctx.decIndent();
              }
          }
          ctx.println(stmt, `}`);
          return null;
      }
      visitThrowStmt(stmt, ctx) {
          ctx.print(stmt, `throw `);
          stmt.error.visitExpression(this, ctx);
          ctx.println(stmt, `;`);
          return null;
      }
      visitCommentStmt(stmt, ctx) {
          const lines = stmt.comment.split('\n');
          lines.forEach((line) => { ctx.println(stmt, `// ${line}`); });
          return null;
      }
      visitWriteVarExpr(expr, ctx) {
          const lineWasEmpty = ctx.lineIsEmpty();
          if (!lineWasEmpty) {
              ctx.print(expr, '(');
          }
          ctx.print(expr, `${expr.name} = `);
          expr.value.visitExpression(this, ctx);
          if (!lineWasEmpty) {
              ctx.print(expr, ')');
          }
          return null;
      }
      visitWriteKeyExpr(expr, ctx) {
          const lineWasEmpty = ctx.lineIsEmpty();
          if (!lineWasEmpty) {
              ctx.print(expr, '(');
          }
          expr.receiver.visitExpression(this, ctx);
          ctx.print(expr, `[`);
          expr.index.visitExpression(this, ctx);
          ctx.print(expr, `] = `);
          expr.value.visitExpression(this, ctx);
          if (!lineWasEmpty) {
              ctx.print(expr, ')');
          }
          return null;
      }
      visitWritePropExpr(expr, ctx) {
          const lineWasEmpty = ctx.lineIsEmpty();
          if (!lineWasEmpty) {
              ctx.print(expr, '(');
          }
          expr.receiver.visitExpression(this, ctx);
          ctx.print(expr, `.${expr.name} = `);
          expr.value.visitExpression(this, ctx);
          if (!lineWasEmpty) {
              ctx.print(expr, ')');
          }
          return null;
      }
      visitInvokeMethodExpr(expr, ctx) {
          expr.receiver.visitExpression(this, ctx);
          let name = expr.name;
          if (isPresent$1(expr.builtin)) {
              name = this.getBuiltinMethodName(expr.builtin);
              if (isBlank$1(name)) {
                  // some builtins just mean to skip the call.
                  return null;
              }
          }
          ctx.print(expr, `.${name}(`);
          this.visitAllExpressions(expr.args, ctx, `,`);
          ctx.print(expr, `)`);
          return null;
      }
      visitInvokeFunctionExpr(expr, ctx) {
          expr.fn.visitExpression(this, ctx);
          ctx.print(expr, `(`);
          this.visitAllExpressions(expr.args, ctx, ',');
          ctx.print(expr, `)`);
          return null;
      }
      visitReadVarExpr(ast, ctx) {
          let varName = ast.name;
          if (isPresent$1(ast.builtin)) {
              switch (ast.builtin) {
                  case BuiltinVar.Super:
                      varName = 'super';
                      break;
                  case BuiltinVar.This:
                      varName = 'this';
                      break;
                  case BuiltinVar.CatchError:
                      varName = CATCH_ERROR_VAR$1.name;
                      break;
                  case BuiltinVar.CatchStack:
                      varName = CATCH_STACK_VAR$1.name;
                      break;
                  default:
                      throw new Error(`Unknown builtin variable ${ast.builtin}`);
              }
          }
          ctx.print(ast, varName);
          return null;
      }
      visitInstantiateExpr(ast, ctx) {
          ctx.print(ast, `new `);
          ast.classExpr.visitExpression(this, ctx);
          ctx.print(ast, `(`);
          this.visitAllExpressions(ast.args, ctx, ',');
          ctx.print(ast, `)`);
          return null;
      }
      visitLiteralExpr(ast, ctx) {
          const value = ast.value;
          if (typeof value === 'string') {
              ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));
          }
          else {
              ctx.print(ast, `${value}`);
          }
          return null;
      }
      visitConditionalExpr(ast, ctx) {
          ctx.print(ast, `(`);
          ast.condition.visitExpression(this, ctx);
          ctx.print(ast, '? ');
          ast.trueCase.visitExpression(this, ctx);
          ctx.print(ast, ': ');
          ast.falseCase.visitExpression(this, ctx);
          ctx.print(ast, `)`);
          return null;
      }
      visitNotExpr(ast, ctx) {
          ctx.print(ast, '!');
          ast.condition.visitExpression(this, ctx);
          return null;
      }
      visitBinaryOperatorExpr(ast, ctx) {
          let opStr;
          switch (ast.operator) {
              case BinaryOperator.Equals:
                  opStr = '==';
                  break;
              case BinaryOperator.Identical:
                  opStr = '===';
                  break;
              case BinaryOperator.NotEquals:
                  opStr = '!=';
                  break;
              case BinaryOperator.NotIdentical:
                  opStr = '!==';
                  break;
              case BinaryOperator.And:
                  opStr = '&&';
                  break;
              case BinaryOperator.Or:
                  opStr = '||';
                  break;
              case BinaryOperator.Plus:
                  opStr = '+';
                  break;
              case BinaryOperator.Minus:
                  opStr = '-';
                  break;
              case BinaryOperator.Divide:
                  opStr = '/';
                  break;
              case BinaryOperator.Multiply:
                  opStr = '*';
                  break;
              case BinaryOperator.Modulo:
                  opStr = '%';
                  break;
              case BinaryOperator.Lower:
                  opStr = '<';
                  break;
              case BinaryOperator.LowerEquals:
                  opStr = '<=';
                  break;
              case BinaryOperator.Bigger:
                  opStr = '>';
                  break;
              case BinaryOperator.BiggerEquals:
                  opStr = '>=';
                  break;
              default:
                  throw new Error(`Unknown operator ${ast.operator}`);
          }
          ctx.print(ast, `(`);
          ast.lhs.visitExpression(this, ctx);
          ctx.print(ast, ` ${opStr} `);
          ast.rhs.visitExpression(this, ctx);
          ctx.print(ast, `)`);
          return null;
      }
      visitReadPropExpr(ast, ctx) {
          ast.receiver.visitExpression(this, ctx);
          ctx.print(ast, `.`);
          ctx.print(ast, ast.name);
          return null;
      }
      visitReadKeyExpr(ast, ctx) {
          ast.receiver.visitExpression(this, ctx);
          ctx.print(ast, `[`);
          ast.index.visitExpression(this, ctx);
          ctx.print(ast, `]`);
          return null;
      }
      visitLiteralArrayExpr(ast, ctx) {
          const useNewLine = ast.entries.length > 1;
          ctx.print(ast, `[`, useNewLine);
          ctx.incIndent();
          this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
          ctx.decIndent();
          ctx.print(ast, `]`, useNewLine);
          return null;
      }
      visitLiteralMapExpr(ast, ctx) {
          const useNewLine = ast.entries.length > 1;
          ctx.print(ast, `{`, useNewLine);
          ctx.incIndent();
          this.visitAllObjects(entry => {
              ctx.print(ast, `${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}: `);
              entry.value.visitExpression(this, ctx);
          }, ast.entries, ctx, ',', useNewLine);
          ctx.decIndent();
          ctx.print(ast, `}`, useNewLine);
          return null;
      }
      visitAllExpressions(expressions, ctx, separator, newLine = false) {
          this.visitAllObjects(expr => expr.visitExpression(this, ctx), expressions, ctx, separator, newLine);
      }
      visitAllObjects(handler, expressions, ctx, separator, newLine = false) {
          for (let i = 0; i < expressions.length; i++) {
              if (i > 0) {
                  ctx.print(null, separator, newLine);
              }
              handler(expressions[i]);
          }
          if (newLine) {
              ctx.println();
          }
      }
      visitAllStatements(statements, ctx) {
          statements.forEach((stmt) => stmt.visitStatement(this, ctx));
      }
  }
  function escapeIdentifier(input, escapeDollar, alwaysQuote = true) {
      if (isBlank$1(input)) {
          return null;
      }
      const body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match) => {
          if (match[0] == '$') {
              return escapeDollar ? '\\$' : '$';
          }
          else if (match[0] == '\n') {
              return '\\n';
          }
          else if (match[0] == '\r') {
              return '\\r';
          }
          else {
              return `\\${match[0]}`;
          }
      });
      const requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
      return requiresQuotes ? `'${body}'` : body;
  }
  function _createIndent(count) {
      let res = '';
      for (let i = 0; i < count; i++) {
          res += _INDENT_WITH;
      }
      return res;
  }

  const _debugFilePath = '/debug/lib';
  function debugOutputAstAsTypeScript(ast) {
      const converter = new _TsEmitterVisitor(_debugFilePath, {
          fileNameToModuleName(filePath, containingFilePath) { return filePath; },
          getImportAs(symbol) { return null; },
          getTypeArity: symbol => null
      });
      const ctx = EmitterVisitorContext.createRoot([]);
      const asts = Array.isArray(ast) ? ast : [ast];
      asts.forEach((ast) => {
          if (ast instanceof Statement) {
              ast.visitStatement(converter, ctx);
          }
          else if (ast instanceof Expression) {
              ast.visitExpression(converter, ctx);
          }
          else if (ast instanceof Type$1) {
              ast.visitType(converter, ctx);
          }
          else {
              throw new Error(`Don't know how to print debug info for ${ast}`);
          }
      });
      return ctx.toSource();
  }
  class TypeScriptEmitter {
      constructor(_importResolver) {
          this._importResolver = _importResolver;
      }
      emitStatements(genFilePath, stmts, exportedVars) {
          const converter = new _TsEmitterVisitor(genFilePath, this._importResolver);
          const ctx = EmitterVisitorContext.createRoot(exportedVars);
          converter.visitAllStatements(stmts, ctx);
          const srcParts = [];
          converter.reexports.forEach((reexports, exportedFilePath) => {
              const reexportsCode = reexports.map(reexport => `${reexport.name} as ${reexport.as}`).join(',');
              srcParts.push(`export {${reexportsCode}} from '${this._importResolver.fileNameToModuleName(exportedFilePath, genFilePath)}';`);
          });
          converter.importsWithPrefixes.forEach((prefix, importedFilePath) => {
              // Note: can't write the real word for import as it screws up system.js auto detection...
              srcParts.push(`imp` +
                  `ort * as ${prefix} from '${this._importResolver.fileNameToModuleName(importedFilePath, genFilePath)}';`);
          });
          srcParts.push(ctx.toSource());
          const prefixLines = converter.reexports.size + converter.importsWithPrefixes.size;
          const sm = ctx.toSourceMapGenerator(null, prefixLines).toJsComment();
          if (sm) {
              srcParts.push(sm);
          }
          return srcParts.join('\n');
      }
  }
  class _TsEmitterVisitor extends AbstractEmitterVisitor {
      constructor(_genFilePath, _importResolver) {
          super(false);
          this._genFilePath = _genFilePath;
          this._importResolver = _importResolver;
          this.typeExpression = 0;
          this.importsWithPrefixes = new Map();
          this.reexports = new Map();
      }
      visitType(t, ctx, defaultType = 'any') {
          if (isPresent$1(t)) {
              this.typeExpression++;
              t.visitType(this, ctx);
              this.typeExpression--;
          }
          else {
              ctx.print(null, defaultType);
          }
      }
      visitLiteralExpr(ast, ctx) {
          const value = ast.value;
          if (isBlank$1(value) && ast.type != INFERRED_TYPE) {
              ctx.print(ast, `(${value} as any)`);
              return null;
          }
          return super.visitLiteralExpr(ast, ctx);
      }
      // Temporary workaround to support strictNullCheck enabled consumers of ngc emit.
      // In SNC mode, [] have the type never[], so we cast here to any[].
      // TODO: narrow the cast to a more explicit type, or use a pattern that does not
      // start with [].concat. see https://github.com/angular/angular/pull/11846
      visitLiteralArrayExpr(ast, ctx) {
          if (ast.entries.length === 0) {
              ctx.print(ast, '(');
          }
          const result = super.visitLiteralArrayExpr(ast, ctx);
          if (ast.entries.length === 0) {
              ctx.print(ast, ' as any[])');
          }
          return result;
      }
      visitExternalExpr(ast, ctx) {
          this._visitIdentifier(ast.value, ast.typeParams, ctx);
          return null;
      }
      visitDeclareVarStmt(stmt, ctx) {
          if (ctx.isExportedVar(stmt.name) && stmt.value instanceof ExternalExpr && !stmt.type) {
              // check for a reexport
              const { name, filePath, members } = this._resolveStaticSymbol(stmt.value.value);
              if (members.length === 0 && filePath !== this._genFilePath) {
                  let reexports = this.reexports.get(filePath);
                  if (!reexports) {
                      reexports = [];
                      this.reexports.set(filePath, reexports);
                  }
                  reexports.push({ name, as: stmt.name });
                  return null;
              }
          }
          if (ctx.isExportedVar(stmt.name)) {
              ctx.print(stmt, `export `);
          }
          if (stmt.hasModifier(StmtModifier.Final)) {
              ctx.print(stmt, `const`);
          }
          else {
              ctx.print(stmt, `var`);
          }
          ctx.print(stmt, ` ${stmt.name}`);
          this._printColonType(stmt.type, ctx);
          ctx.print(stmt, ` = `);
          stmt.value.visitExpression(this, ctx);
          ctx.println(stmt, `;`);
          return null;
      }
      visitCastExpr(ast, ctx) {
          ctx.print(ast, `(<`);
          ast.type.visitType(this, ctx);
          ctx.print(ast, `>`);
          ast.value.visitExpression(this, ctx);
          ctx.print(ast, `)`);
          return null;
      }
      visitInstantiateExpr(ast, ctx) {
          ctx.print(ast, `new `);
          this.typeExpression++;
          ast.classExpr.visitExpression(this, ctx);
          this.typeExpression--;
          ctx.print(ast, `(`);
          this.visitAllExpressions(ast.args, ctx, ',');
          ctx.print(ast, `)`);
          return null;
      }
      visitDeclareClassStmt(stmt, ctx) {
          ctx.pushClass(stmt);
          if (ctx.isExportedVar(stmt.name)) {
              ctx.print(stmt, `export `);
          }
          ctx.print(stmt, `class ${stmt.name}`);
          if (isPresent$1(stmt.parent)) {
              ctx.print(stmt, ` extends `);
              this.typeExpression++;
              stmt.parent.visitExpression(this, ctx);
              this.typeExpression--;
          }
          ctx.println(stmt, ` {`);
          ctx.incIndent();
          stmt.fields.forEach((field) => this._visitClassField(field, ctx));
          if (isPresent$1(stmt.constructorMethod)) {
              this._visitClassConstructor(stmt, ctx);
          }
          stmt.getters.forEach((getter) => this._visitClassGetter(getter, ctx));
          stmt.methods.forEach((method) => this._visitClassMethod(method, ctx));
          ctx.decIndent();
          ctx.println(stmt, `}`);
          ctx.popClass();
          return null;
      }
      _visitClassField(field, ctx) {
          if (field.hasModifier(StmtModifier.Private)) {
              // comment out as a workaround for #10967
              ctx.print(null, `/*private*/ `);
          }
          ctx.print(null, field.name);
          this._printColonType(field.type, ctx);
          ctx.println(null, `;`);
      }
      _visitClassGetter(getter, ctx) {
          if (getter.hasModifier(StmtModifier.Private)) {
              ctx.print(null, `private `);
          }
          ctx.print(null, `get ${getter.name}()`);
          this._printColonType(getter.type, ctx);
          ctx.println(null, ` {`);
          ctx.incIndent();
          this.visitAllStatements(getter.body, ctx);
          ctx.decIndent();
          ctx.println(null, `}`);
      }
      _visitClassConstructor(stmt, ctx) {
          ctx.print(stmt, `constructor(`);
          this._visitParams(stmt.constructorMethod.params, ctx);
          ctx.println(stmt, `) {`);
          ctx.incIndent();
          this.visitAllStatements(stmt.constructorMethod.body, ctx);
          ctx.decIndent();
          ctx.println(stmt, `}`);
      }
      _visitClassMethod(method, ctx) {
          if (method.hasModifier(StmtModifier.Private)) {
              ctx.print(null, `private `);
          }
          ctx.print(null, `${method.name}(`);
          this._visitParams(method.params, ctx);
          ctx.print(null, `)`);
          this._printColonType(method.type, ctx, 'void');
          ctx.println(null, ` {`);
          ctx.incIndent();
          this.visitAllStatements(method.body, ctx);
          ctx.decIndent();
          ctx.println(null, `}`);
      }
      visitFunctionExpr(ast, ctx) {
          ctx.print(ast, `(`);
          this._visitParams(ast.params, ctx);
          ctx.print(ast, `)`);
          this._printColonType(ast.type, ctx, 'void');
          ctx.println(ast, ` => {`);
          ctx.incIndent();
          this.visitAllStatements(ast.statements, ctx);
          ctx.decIndent();
          ctx.print(ast, `}`);
          return null;
      }
      visitDeclareFunctionStmt(stmt, ctx) {
          if (ctx.isExportedVar(stmt.name)) {
              ctx.print(stmt, `export `);
          }
          ctx.print(stmt, `function ${stmt.name}(`);
          this._visitParams(stmt.params, ctx);
          ctx.print(stmt, `)`);
          this._printColonType(stmt.type, ctx, 'void');
          ctx.println(stmt, ` {`);
          ctx.incIndent();
          this.visitAllStatements(stmt.statements, ctx);
          ctx.decIndent();
          ctx.println(stmt, `}`);
          return null;
      }
      visitTryCatchStmt(stmt, ctx) {
          ctx.println(stmt, `try {`);
          ctx.incIndent();
          this.visitAllStatements(stmt.bodyStmts, ctx);
          ctx.decIndent();
          ctx.println(stmt, `} catch (${CATCH_ERROR_VAR$1.name}) {`);
          ctx.incIndent();
          const catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [
                  StmtModifier.Final
              ])].concat(stmt.catchStmts);
          this.visitAllStatements(catchStmts, ctx);
          ctx.decIndent();
          ctx.println(stmt, `}`);
          return null;
      }
      visitBuiltintType(type, ctx) {
          let typeStr;
          switch (type.name) {
              case BuiltinTypeName.Bool:
                  typeStr = 'boolean';
                  break;
              case BuiltinTypeName.Dynamic:
                  typeStr = 'any';
                  break;
              case BuiltinTypeName.Function:
                  typeStr = 'Function';
                  break;
              case BuiltinTypeName.Number:
                  typeStr = 'number';
                  break;
              case BuiltinTypeName.Int:
                  typeStr = 'number';
                  break;
              case BuiltinTypeName.String:
                  typeStr = 'string';
                  break;
              default:
                  throw new Error(`Unsupported builtin type ${type.name}`);
          }
          ctx.print(null, typeStr);
          return null;
      }
      visitExpressionType(ast, ctx) {
          ast.value.visitExpression(this, ctx);
          return null;
      }
      visitArrayType(type, ctx) {
          this.visitType(type.of, ctx);
          ctx.print(null, `[]`);
          return null;
      }
      visitMapType(type, ctx) {
          ctx.print(null, `{[key: string]:`);
          this.visitType(type.valueType, ctx);
          ctx.print(null, `}`);
          return null;
      }
      getBuiltinMethodName(method) {
          let name;
          switch (method) {
              case BuiltinMethod.ConcatArray:
                  name = 'concat';
                  break;
              case BuiltinMethod.SubscribeObservable:
                  name = 'subscribe';
                  break;
              case BuiltinMethod.Bind:
                  name = 'bind';
                  break;
              default:
                  throw new Error(`Unknown builtin method: ${method}`);
          }
          return name;
      }
      _visitParams(params, ctx) {
          this.visitAllObjects(param => {
              ctx.print(null, param.name);
              this._printColonType(param.type, ctx);
          }, params, ctx, ',');
      }
      _resolveStaticSymbol(value) {
          const reference = value.reference;
          if (!(reference instanceof StaticSymbol)) {
              throw new Error(`Internal error: unknown identifier ${JSON.stringify(value)}`);
          }
          const arity = this._importResolver.getTypeArity(reference) || undefined;
          const importReference = this._importResolver.getImportAs(reference) || reference;
          return {
              name: importReference.name,
              filePath: importReference.filePath,
              members: importReference.members, arity
          };
      }
      _visitIdentifier(value, typeParams, ctx) {
          const { name, filePath, members, arity } = this._resolveStaticSymbol(value);
          if (filePath != this._genFilePath) {
              let prefix = this.importsWithPrefixes.get(filePath);
              if (isBlank$1(prefix)) {
                  prefix = `import${this.importsWithPrefixes.size}`;
                  this.importsWithPrefixes.set(filePath, prefix);
              }
              ctx.print(null, `${prefix}.`);
          }
          if (members.length) {
              ctx.print(null, name);
              ctx.print(null, '.');
              ctx.print(null, members.join('.'));
          }
          else {
              ctx.print(null, name);
          }
          if (this.typeExpression > 0) {
              // If we are in a type expression that refers to a generic type then supply
              // the required type parameters. If there were not enough type parameters
              // supplied, supply any as the type. Outside a type expression the reference
              // should not supply type parameters and be treated as a simple value reference
              // to the constructor function itself.
              const suppliedParameters = (typeParams && typeParams.length) || 0;
              const additionalParameters = (arity || 0) - suppliedParameters;
              if (suppliedParameters > 0 || additionalParameters > 0) {
                  ctx.print(null, `<`);
                  if (suppliedParameters > 0) {
                      this.visitAllObjects(type => type.visitType(this, ctx), typeParams, ctx, ',');
                  }
                  if (additionalParameters > 0) {
                      for (let i = 0; i < additionalParameters; i++) {
                          if (i > 0 || suppliedParameters > 0)
                              ctx.print(null, ',');
                          ctx.print(null, 'any');
                      }
                  }
                  ctx.print(null, `>`);
              }
          }
      }
      _printColonType(type, ctx, defaultType) {
          if (type !== INFERRED_TYPE) {
              ctx.print(null, ':');
              this.visitType(type, ctx, defaultType);
          }
      }
  }

  // =================================================================================================
  // =================================================================================================
  // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
  // =================================================================================================
  // =================================================================================================
  //
  //        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
  //                               Reach out to mprobst for details.
  //
  // =================================================================================================
  /** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */
  const SECURITY_SCHEMA = {};
  function registerContext(ctx, specs) {
      for (const spec of specs)
          SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
  }
  // Case is insignificant below, all element and attribute names are lower-cased for lookup.
  registerContext(SecurityContext.HTML, [
      'iframe|srcdoc',
      '*|innerHTML',
      '*|outerHTML',
  ]);
  registerContext(SecurityContext.STYLE, ['*|style']);
  // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.
  registerContext(SecurityContext.URL, [
      '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',
      'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',
      'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',
      'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',
  ]);
  registerContext(SecurityContext.RESOURCE_URL, [
      'applet|code',
      'applet|codebase',
      'base|href',
      'embed|src',
      'frame|src',
      'head|profile',
      'html|manifest',
      'iframe|src',
      'link|href',
      'media|src',
      'object|codebase',
      'object|data',
      'script|src',
  ]);

  const BOOLEAN = 'boolean';
  const NUMBER = 'number';
  const STRING = 'string';
  const OBJECT = 'object';
  /**
   * This array represents the DOM schema. It encodes inheritance, properties, and events.
   *
   * ## Overview
   *
   * Each line represents one kind of element. The `element_inheritance` and properties are joined
   * using `element_inheritance|properties` syntax.
   *
   * ## Element Inheritance
   *
   * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
   * Here the individual elements are separated by `,` (commas). Every element in the list
   * has identical properties.
   *
   * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
   * specified then `""` (blank) element is assumed.
   *
   * NOTE: The blank element inherits from root `[Element]` element, the super element of all
   * elements.
   *
   * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
   *
   * ## Properties
   *
   * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
   * by a special character designating its type:
   *
   * - (no prefix): property is a string.
   * - `*`: property represents an event.
   * - `!`: property is a boolean.
   * - `#`: property is a number.
   * - `%`: property is an object.
   *
   * ## Query
   *
   * The class creates an internal squas representation which allows to easily answer the query of
   * if a given property exist on a given element.
   *
   * NOTE: We don't yet support querying for types or events.
   * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
   *       see dom_element_schema_registry_spec.ts
   */
  // =================================================================================================
  // =================================================================================================
  // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
  // =================================================================================================
  // =================================================================================================
  //
  //                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
  //
  // Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
  // dom_security_schema.ts. Reach out to mprobst & rjamet for details.
  //
  // =================================================================================================
  const SCHEMA = [
      '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop',
      '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
      'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
      'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume',
      ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',
      ':svg:graphics^:svg:|',
      ':svg:animation^:svg:|*begin,*end,*repeat',
      ':svg:geometry^:svg:|',
      ':svg:componentTransferFunction^:svg:|',
      ':svg:gradient^:svg:|',
      ':svg:textContent^:svg:graphics|',
      ':svg:textPositioning^:svg:textContent|',
      'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',
      'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username',
      'audio^media|',
      'br^[HTMLElement]|clear',
      'base^[HTMLElement]|href,target',
      'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',
      'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',
      'canvas^[HTMLElement]|#height,#width',
      'content^[HTMLElement]|select',
      'dl^[HTMLElement]|!compact',
      'datalist^[HTMLElement]|',
      'details^[HTMLElement]|!open',
      'dialog^[HTMLElement]|!open,returnValue',
      'dir^[HTMLElement]|!compact',
      'div^[HTMLElement]|align',
      'embed^[HTMLElement]|align,height,name,src,type,width',
      'fieldset^[HTMLElement]|!disabled,name',
      'font^[HTMLElement]|color,face,size',
      'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',
      'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',
      'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',
      'hr^[HTMLElement]|align,color,!noShade,size,width',
      'head^[HTMLElement]|',
      'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',
      'html^[HTMLElement]|version',
      'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',
      'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',
      'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',
      'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name',
      'li^[HTMLElement]|type,#value',
      'label^[HTMLElement]|htmlFor',
      'legend^[HTMLElement]|align',
      'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type',
      'map^[HTMLElement]|name',
      'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',
      'menu^[HTMLElement]|!compact',
      'meta^[HTMLElement]|content,httpEquiv,name,scheme',
      'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',
      'ins,del^[HTMLElement]|cite,dateTime',
      'ol^[HTMLElement]|!compact,!reversed,#start,type',
      'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',
      'optgroup^[HTMLElement]|!disabled,label',
      'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',
      'output^[HTMLElement]|defaultValue,%htmlFor,name,value',
      'p^[HTMLElement]|align',
      'param^[HTMLElement]|name,type,value,valueType',
      'picture^[HTMLElement]|',
      'pre^[HTMLElement]|#width',
      'progress^[HTMLElement]|#max,#value',
      'q,blockquote,cite^[HTMLElement]|',
      'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',
      'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',
      'shadow^[HTMLElement]|',
      'source^[HTMLElement]|media,sizes,src,srcset,type',
      'span^[HTMLElement]|',
      'style^[HTMLElement]|!disabled,media,type',
      'caption^[HTMLElement]|align',
      'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',
      'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',
      'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',
      'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',
      'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',
      'template^[HTMLElement]|',
      'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',
      'title^[HTMLElement]|text',
      'track^[HTMLElement]|!default,kind,label,src,srclang',
      'ul^[HTMLElement]|!compact,type',
      'unknown^[HTMLElement]|',
      'video^media|#height,poster,#width',
      ':svg:a^:svg:graphics|',
      ':svg:animate^:svg:animation|',
      ':svg:animateMotion^:svg:animation|',
      ':svg:animateTransform^:svg:animation|',
      ':svg:circle^:svg:geometry|',
      ':svg:clipPath^:svg:graphics|',
      ':svg:cursor^:svg:|',
      ':svg:defs^:svg:graphics|',
      ':svg:desc^:svg:|',
      ':svg:discard^:svg:|',
      ':svg:ellipse^:svg:geometry|',
      ':svg:feBlend^:svg:|',
      ':svg:feColorMatrix^:svg:|',
      ':svg:feComponentTransfer^:svg:|',
      ':svg:feComposite^:svg:|',
      ':svg:feConvolveMatrix^:svg:|',
      ':svg:feDiffuseLighting^:svg:|',
      ':svg:feDisplacementMap^:svg:|',
      ':svg:feDistantLight^:svg:|',
      ':svg:feDropShadow^:svg:|',
      ':svg:feFlood^:svg:|',
      ':svg:feFuncA^:svg:componentTransferFunction|',
      ':svg:feFuncB^:svg:componentTransferFunction|',
      ':svg:feFuncG^:svg:componentTransferFunction|',
      ':svg:feFuncR^:svg:componentTransferFunction|',
      ':svg:feGaussianBlur^:svg:|',
      ':svg:feImage^:svg:|',
      ':svg:feMerge^:svg:|',
      ':svg:feMergeNode^:svg:|',
      ':svg:feMorphology^:svg:|',
      ':svg:feOffset^:svg:|',
      ':svg:fePointLight^:svg:|',
      ':svg:feSpecularLighting^:svg:|',
      ':svg:feSpotLight^:svg:|',
      ':svg:feTile^:svg:|',
      ':svg:feTurbulence^:svg:|',
      ':svg:filter^:svg:|',
      ':svg:foreignObject^:svg:graphics|',
      ':svg:g^:svg:graphics|',
      ':svg:image^:svg:graphics|',
      ':svg:line^:svg:geometry|',
      ':svg:linearGradient^:svg:gradient|',
      ':svg:mpath^:svg:|',
      ':svg:marker^:svg:|',
      ':svg:mask^:svg:|',
      ':svg:metadata^:svg:|',
      ':svg:path^:svg:geometry|',
      ':svg:pattern^:svg:|',
      ':svg:polygon^:svg:geometry|',
      ':svg:polyline^:svg:geometry|',
      ':svg:radialGradient^:svg:gradient|',
      ':svg:rect^:svg:geometry|',
      ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',
      ':svg:script^:svg:|type',
      ':svg:set^:svg:animation|',
      ':svg:stop^:svg:|',
      ':svg:style^:svg:|!disabled,media,title,type',
      ':svg:switch^:svg:graphics|',
      ':svg:symbol^:svg:|',
      ':svg:tspan^:svg:textPositioning|',
      ':svg:text^:svg:textPositioning|',
      ':svg:textPath^:svg:textContent|',
      ':svg:title^:svg:|',
      ':svg:use^:svg:graphics|',
      ':svg:view^:svg:|#zoomAndPan',
      'data^[HTMLElement]|value',
      'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',
      'summary^[HTMLElement]|',
      'time^[HTMLElement]|dateTime',
  ];
  const _ATTR_TO_PROP = {
      'class': 'className',
      'for': 'htmlFor',
      'formaction': 'formAction',
      'innerHtml': 'innerHTML',
      'readonly': 'readOnly',
      'tabindex': 'tabIndex',
  };
  class DomElementSchemaRegistry extends ElementSchemaRegistry {
      constructor() {
          super();
          this._schema = {};
          SCHEMA.forEach(encodedType => {
              const type = {};
              const [strType, strProperties] = encodedType.split('|');
              const properties = strProperties.split(',');
              const [typeNames, superName] = strType.split('^');
              typeNames.split(',').forEach(tag => this._schema[tag.toLowerCase()] = type);
              const superType = superName && this._schema[superName.toLowerCase()];
              if (superType) {
                  Object.keys(superType).forEach((prop) => { type[prop] = superType[prop]; });
              }
              properties.forEach((property) => {
                  if (property.length > 0) {
                      switch (property[0]) {
                          case '*':
                              // We don't yet support events.
                              // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events
                              // will
                              // almost certainly introduce bad XSS vulnerabilities.
                              // type[property.substring(1)] = EVENT;
                              break;
                          case '!':
                              type[property.substring(1)] = BOOLEAN;
                              break;
                          case '#':
                              type[property.substring(1)] = NUMBER;
                              break;
                          case '%':
                              type[property.substring(1)] = OBJECT;
                              break;
                          default:
                              type[property] = STRING;
                      }
                  }
              });
          });
      }
      hasProperty(tagName, propName, schemaMetas) {
          if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA.name)) {
              return true;
          }
          if (tagName.indexOf('-') > -1) {
              if (tagName === 'ng-container' || tagName === 'ng-content') {
                  return false;
              }
              if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {
                  // Can't tell now as we don't know which properties a custom element will get
                  // once it is instantiated
                  return true;
              }
          }
          const elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
          return !!elementProperties[propName];
      }
      hasElement(tagName, schemaMetas) {
          if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA.name)) {
              return true;
          }
          if (tagName.indexOf('-') > -1) {
              if (tagName === 'ng-container' || tagName === 'ng-content') {
                  return true;
              }
              if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {
                  // Allow any custom elements
                  return true;
              }
          }
          return !!this._schema[tagName.toLowerCase()];
      }
      /**
       * securityContext returns the security context for the given property on the given DOM tag.
       *
       * Tag and property name are statically known and cannot change at runtime, i.e. it is not
       * possible to bind a value into a changing attribute or tag name.
       *
       * The filtering is white list based. All attributes in the schema above are assumed to have the
       * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known
       * attack vectors are assigned their appropriate context.
       */
      securityContext(tagName, propName, isAttribute) {
          if (isAttribute) {
              // NB: For security purposes, use the mapped property name, not the attribute name.
              propName = this.getMappedPropName(propName);
          }
          // Make sure comparisons are case insensitive, so that case differences between attribute and
          // property names do not have a security impact.
          tagName = tagName.toLowerCase();
          propName = propName.toLowerCase();
          let ctx = SECURITY_SCHEMA[tagName + '|' + propName];
          if (ctx) {
              return ctx;
          }
          ctx = SECURITY_SCHEMA['*|' + propName];
          return ctx ? ctx : SecurityContext.NONE;
      }
      getMappedPropName(propName) { return _ATTR_TO_PROP[propName] || propName; }
      getDefaultComponentElementName() { return 'ng-component'; }
      validateProperty(name) {
          if (name.toLowerCase().startsWith('on')) {
              const msg = `Binding to event property '${name}' is disallowed for security reasons, ` +
                  `please use (${name.slice(2)})=...` +
                  `\nIf '${name}' is a directive input, make sure the directive is imported by the` +
                  ` current module.`;
              return { error: true, msg: msg };
          }
          else {
              return { error: false };
          }
      }
      validateAttribute(name) {
          if (name.toLowerCase().startsWith('on')) {
              const msg = `Binding to event attribute '${name}' is disallowed for security reasons, ` +
                  `please use (${name.slice(2)})=...`;
              return { error: true, msg: msg };
          }
          else {
              return { error: false };
          }
      }
      allKnownElementNames() { return Object.keys(this._schema); }
      normalizeAnimationStyleProperty(propName) {
          return dashCaseToCamelCase(propName);
      }
      normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {
          let unit = '';
          const strVal = val.toString().trim();
          let errorMsg = null;
          if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {
              if (typeof val === 'number') {
                  unit = 'px';
              }
              else {
                  const valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
                  if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
                      errorMsg = `Please provide a CSS unit value for ${userProvidedProp}:${val}`;
                  }
              }
          }
          return { error: errorMsg, value: strVal + unit };
      }
  }
  DomElementSchemaRegistry.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  DomElementSchemaRegistry.ctorParameters = () => [];
  function _isPixelDimensionStyle(prop) {
      switch (prop) {
          case 'width':
          case 'height':
          case 'minWidth':
          case 'minHeight':
          case 'maxWidth':
          case 'maxHeight':
          case 'left':
          case 'top':
          case 'bottom':
          case 'right':
          case 'fontSize':
          case 'outlineWidth':
          case 'outlineOffset':
          case 'paddingTop':
          case 'paddingLeft':
          case 'paddingBottom':
          case 'paddingRight':
          case 'marginTop':
          case 'marginLeft':
          case 'marginBottom':
          case 'marginRight':
          case 'borderRadius':
          case 'borderWidth':
          case 'borderTopWidth':
          case 'borderLeftWidth':
          case 'borderRightWidth':
          case 'borderBottomWidth':
          case 'textIndent':
              return true;
          default:
              return false;
      }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * This file is a port of shadowCSS from webcomponents.js to TypeScript.
   *
   * Please make sure to keep to edits in sync with the source file.
   *
   * Source:
   * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
   *
   * The original file level comment is reproduced below
   */
  /*
    This is a limited shim for ShadowDOM css styling.
    https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

    The intention here is to support only the styling features which can be
    relatively simply implemented. The goal is to allow users to avoid the
    most obvious pitfalls and do so without compromising performance significantly.
    For ShadowDOM styling that's not covered here, a set of best practices
    can be provided that should allow users to accomplish more complex styling.

    The following is a list of specific ShadowDOM styling features and a brief
    discussion of the approach used to shim.

    Shimmed features:

    * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
    element using the :host rule. To shim this feature, the :host styles are
    reformatted and prefixed with a given scope name and promoted to a
    document level stylesheet.
    For example, given a scope name of .foo, a rule like this:

      :host {
          background: red;
        }
      }

    becomes:

      .foo {
        background: red;
      }

    * encapsulation: Styles defined within ShadowDOM, apply only to
    dom inside the ShadowDOM. Polymer uses one of two techniques to implement
    this feature.

    By default, rules are prefixed with the host element tag name
    as a descendant selector. This ensures styling does not leak out of the 'top'
    of the element's ShadowDOM. For example,

    div {
        font-weight: bold;
      }

    becomes:

    x-foo div {
        font-weight: bold;
      }

    becomes:


    Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
    selectors are scoped by adding an attribute selector suffix to each
    simple selector that contains the host element tag name. Each element
    in the element's ShadowDOM template is also given the scope attribute.
    Thus, these rules match only elements that have the scope attribute.
    For example, given a scope name of x-foo, a rule like this:

      div {
        font-weight: bold;
      }

    becomes:

      div[x-foo] {
        font-weight: bold;
      }

    Note that elements that are dynamically added to a scope must have the scope
    selector added to them manually.

    * upper/lower bound encapsulation: Styles which are defined outside a
    shadowRoot should not cross the ShadowDOM boundary and should not apply
    inside a shadowRoot.

    This styling behavior is not emulated. Some possible ways to do this that
    were rejected due to complexity and/or performance concerns include: (1) reset
    every possible property for every possible selector for a given scope name;
    (2) re-implement css in javascript.

    As an alternative, users should make sure to use selectors
    specific to the scope in which they are working.

    * ::distributed: This behavior is not emulated. It's often not necessary
    to style the contents of a specific insertion point and instead, descendants
    of the host element can be styled selectively. Users can also create an
    extra node around an insertion point and style that node's contents
    via descendent selectors. For example, with a shadowRoot like this:

      <style>
        ::content(div) {
          background: red;
        }
      </style>
      <content></content>

    could become:

      <style>
        / *@polyfill .content-container div * /
        ::content(div) {
          background: red;
        }
      </style>
      <div class="content-container">
        <content></content>
      </div>

    Note the use of @polyfill in the comment above a ShadowDOM specific style
    declaration. This is a directive to the styling shim to use the selector
    in comments in lieu of the next selector when running under polyfill.
  */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ class ShadowCss {
      constructor() {
          this.strictStyling = true;
      }
      /*
      * Shim some cssText with the given selector. Returns cssText that can
      * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
      *
      * When strictStyling is true:
      * - selector is the attribute added to all elements inside the host,
      * - hostSelector is the attribute added to the host itself.
      */
      shimCssText(cssText, selector, hostSelector = '') {
          const sourceMappingUrl = extractSourceMappingUrl(cssText);
          cssText = stripComments(cssText);
          cssText = this._insertDirectives(cssText);
          return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
      }
      _insertDirectives(cssText) {
          cssText = this._insertPolyfillDirectivesInCssText(cssText);
          return this._insertPolyfillRulesInCssText(cssText);
      }
      /*
       * Process styles to convert native ShadowDOM rules that will trip
       * up the css parser; we rely on decorating the stylesheet with inert rules.
       *
       * For example, we convert this rule:
       *
       * polyfill-next-selector { content: ':host menu-item'; }
       * ::content menu-item {
       *
       * to this:
       *
       * scopeName menu-item {
       *
      **/
      _insertPolyfillDirectivesInCssText(cssText) {
          // Difference with webcomponents.js: does not handle comments
          return cssText.replace(_cssContentNextSelectorRe, function (...m) { return m[2] + '{'; });
      }
      /*
       * Process styles to add rules which will only apply under the polyfill
       *
       * For example, we convert this rule:
       *
       * polyfill-rule {
       *   content: ':host menu-item';
       * ...
       * }
       *
       * to this:
       *
       * scopeName menu-item {...}
       *
      **/
      _insertPolyfillRulesInCssText(cssText) {
          // Difference with webcomponents.js: does not handle comments
          return cssText.replace(_cssContentRuleRe, (...m) => {
              const rule = m[0].replace(m[1], '').replace(m[2], '');
              return m[4] + rule;
          });
      }
      /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
       *
       *  .foo {... }
       *
       *  and converts this to
       *
       *  scopeName .foo { ... }
      */
      _scopeCssText(cssText, scopeSelector, hostSelector) {
          const unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
          // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively
          cssText = this._insertPolyfillHostInCssText(cssText);
          cssText = this._convertColonHost(cssText);
          cssText = this._convertColonHostContext(cssText);
          cssText = this._convertShadowDOMSelectors(cssText);
          if (scopeSelector) {
              cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
          }
          cssText = cssText + '\n' + unscopedRules;
          return cssText.trim();
      }
      /*
       * Process styles to add rules which will only apply under the polyfill
       * and do not process via CSSOM. (CSSOM is destructive to rules on rare
       * occasions, e.g. -webkit-calc on Safari.)
       * For example, we convert this rule:
       *
       * @polyfill-unscoped-rule {
       *   content: 'menu-item';
       * ... }
       *
       * to this:
       *
       * menu-item {...}
       *
      **/
      _extractUnscopedRulesFromCssText(cssText) {
          // Difference with webcomponents.js: does not handle comments
          let r = '';
          let m;
          _cssContentUnscopedRuleRe.lastIndex = 0;
          while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
              const rule = m[0].replace(m[2], '').replace(m[1], m[4]);
              r += rule + '\n\n';
          }
          return r;
      }
      /*
       * convert a rule like :host(.foo) > .bar { }
       *
       * to
       *
       * .foo<scopeName> > .bar
      */
      _convertColonHost(cssText) {
          return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
      }
      /*
       * convert a rule like :host-context(.foo) > .bar { }
       *
       * to
       *
       * .foo<scopeName> > .bar, .foo scopeName > .bar { }
       *
       * and
       *
       * :host-context(.foo:host) .bar { ... }
       *
       * to
       *
       * .foo<scopeName> .bar { ... }
      */
      _convertColonHostContext(cssText) {
          return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
      }
      _convertColonRule(cssText, regExp, partReplacer) {
          // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule
          return cssText.replace(regExp, function (...m) {
              if (m[2]) {
                  const parts = m[2].split(',');
                  const r = [];
                  for (let i = 0; i < parts.length; i++) {
                      const p = parts[i].trim();
                      if (!p)
                          break;
                      r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
                  }
                  return r.join(',');
              }
              else {
                  return _polyfillHostNoCombinator + m[3];
              }
          });
      }
      _colonHostContextPartReplacer(host, part, suffix) {
          if (part.indexOf(_polyfillHost) > -1) {
              return this._colonHostPartReplacer(host, part, suffix);
          }
          else {
              return host + part + suffix + ', ' + part + ' ' + host + suffix;
          }
      }
      _colonHostPartReplacer(host, part, suffix) {
          return host + part.replace(_polyfillHost, '') + suffix;
      }
      /*
       * Convert combinators like ::shadow and pseudo-elements like ::content
       * by replacing with space.
      */
      _convertShadowDOMSelectors(cssText) {
          return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);
      }
      // change a selector like 'div' to 'name div'
      _scopeSelectors(cssText, scopeSelector, hostSelector) {
          return processRules(cssText, (rule) => {
              let selector = rule.selector;
              let content = rule.content;
              if (rule.selector[0] != '@') {
                  selector =
                      this._scopeSelector(rule.selector, scopeSelector, hostSelector, this.strictStyling);
              }
              else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||
                  rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {
                  content = this._scopeSelectors(rule.content, scopeSelector, hostSelector);
              }
              return new CssRule(selector, content);
          });
      }
      _scopeSelector(selector, scopeSelector, hostSelector, strict) {
          return selector.split(',')
              .map(part => part.trim().split(_shadowDeepSelectors))
              .map((deepParts) => {
              const [shallowPart, ...otherParts] = deepParts;
              const applyScope = (shallowPart) => {
                  if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {
                      return strict ?
                          this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :
                          this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
                  }
                  else {
                      return shallowPart;
                  }
              };
              return [applyScope(shallowPart), ...otherParts].join(' ');
          })
              .join(', ');
      }
      _selectorNeedsScoping(selector, scopeSelector) {
          const re = this._makeScopeMatcher(scopeSelector);
          return !re.test(selector);
      }
      _makeScopeMatcher(scopeSelector) {
          const lre = /\[/g;
          const rre = /\]/g;
          scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
          return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
      }
      _applySelectorScope(selector, scopeSelector, hostSelector) {
          // Difference from webcomponents.js: scopeSelector could not be an array
          return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
      }
      // scope via name and [is=name]
      _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {
          // In Android browser, the lastIndex is not reset when the regex is used in String.replace()
          _polyfillHostRe.lastIndex = 0;
          if (_polyfillHostRe.test(selector)) {
              const replaceBy = this.strictStyling ? `[${hostSelector}]` : scopeSelector;
              return selector
                  .replace(_polyfillHostNoCombinatorRe, (hnc, selector) => {
                  return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {
                      return before + replaceBy + colon + after;
                  });
              })
                  .replace(_polyfillHostRe, replaceBy + ' ');
          }
          return scopeSelector + ' ' + selector;
      }
      // return a selector with [name] suffix on each simple selector
      // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */
      _applyStrictSelectorScope(selector, scopeSelector, hostSelector) {
          const isRe = /\[is=([^\]]*)\]/g;
          scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);
          const attrName = '[' + scopeSelector + ']';
          const _scopeSelectorPart = (p) => {
              let scopedP = p.trim();
              if (!scopedP) {
                  return '';
              }
              if (p.indexOf(_polyfillHostNoCombinator) > -1) {
                  scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
              }
              else {
                  // remove :host since it should be unnecessary
                  const t = p.replace(_polyfillHostRe, '');
                  if (t.length > 0) {
                      const matches = t.match(/([^:]*)(:*)(.*)/);
                      if (matches) {
                          scopedP = matches[1] + attrName + matches[2] + matches[3];
                      }
                  }
              }
              return scopedP;
          };
          const safeContent = new SafeSelector(selector);
          selector = safeContent.content();
          let scopedSelector = '';
          let startIndex = 0;
          let res;
          const sep = /( |>|\+|~(?!=))\s*/g;
          const scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
          while ((res = sep.exec(selector)) !== null) {
              const separator = res[1];
              const part = selector.slice(startIndex, res.index).trim();
              // if a selector appears before :host-context it should not be shimmed as it
              // matches on ancestor elements and not on elements in the host's shadow
              const scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
              scopedSelector += `${scopedPart} ${separator} `;
              startIndex = sep.lastIndex;
          }
          scopedSelector += _scopeSelectorPart(selector.substring(startIndex));
          // replace the placeholders with their original values
          return safeContent.restore(scopedSelector);
      }
      _insertPolyfillHostInCssText(selector) {
          return selector.replace(_colonHostContextRe, _polyfillHostContext)
              .replace(_colonHostRe, _polyfillHost);
      }
  }
  class SafeSelector {
      constructor(selector) {
          this.placeholders = [];
          this.index = 0;
          // Replaces attribute selectors with placeholders.
          // The WS in [attr="va lue"] would otherwise be interpreted as a selector separator.
          selector = selector.replace(/(\[[^\]]*\])/g, (_, keep) => {
              const replaceBy = `__ph-${this.index}__`;
              this.placeholders.push(keep);
              this.index++;
              return replaceBy;
          });
          // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.
          // WS and "+" would otherwise be interpreted as selector separators.
          this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, (_, pseudo, exp) => {
              const replaceBy = `__ph-${this.index}__`;
              this.placeholders.push(exp);
              this.index++;
              return pseudo + replaceBy;
          });
      }
      ;
      restore(content) {
          return content.replace(/__ph-(\d+)__/g, (ph, index) => this.placeholders[+index]);
      }
      content() { return this._content; }
  }
  const _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
  const _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
  const _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
  const _polyfillHost = '-shadowcsshost';
  // note: :host-context pre-processed to -shadowcsshostcontext.
  const _polyfillHostContext = '-shadowcsscontext';
  const _parenSuffix = ')(?:\\((' +
      '(?:\\([^)(]*\\)|[^)(]*)+?' +
      ')\\))?([^,{]*)';
  const _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
  const _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
  const _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
  const _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
  const _shadowDOMSelectorsRe = [
      /::shadow/g,
      /::content/g,
      // Deprecated selectors
      /\/shadow-deep\//g,
      /\/shadow\//g,
  ];
  const _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
  const _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
  const _polyfillHostRe = /-shadowcsshost/gim;
  const _colonHostRe = /:host/gim;
  const _colonHostContextRe = /:host-context/gim;
  const _commentRe = /\/\*\s*[\s\S]*?\*\//g;
  function stripComments(input) {
      return input.replace(_commentRe, '');
  }
  // all comments except inline source mapping
  const _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
  function extractSourceMappingUrl(input) {
      const matcher = input.match(_sourceMappingUrlRe);
      return matcher ? matcher[0] : '';
  }
  const _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
  const _curlyRe = /([{}])/g;
  const OPEN_CURLY = '{';
  const CLOSE_CURLY = '}';
  const BLOCK_PLACEHOLDER = '%BLOCK%';
  class CssRule {
      constructor(selector, content) {
          this.selector = selector;
          this.content = content;
      }
  }
  function processRules(input, ruleCallback) {
      const inputWithEscapedBlocks = escapeBlocks(input);
      let nextBlockIndex = 0;
      return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function (...m) {
          const selector = m[2];
          let content = '';
          let suffix = m[4];
          let contentPrefix = '';
          if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
              content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
              suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
              contentPrefix = '{';
          }
          const rule = ruleCallback(new CssRule(selector, content));
          return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;
      });
  }
  class StringWithEscapedBlocks {
      constructor(escapedString, blocks) {
          this.escapedString = escapedString;
          this.blocks = blocks;
      }
  }
  function escapeBlocks(input) {
      const inputParts = input.split(_curlyRe);
      const resultParts = [];
      const escapedBlocks = [];
      let bracketCount = 0;
      let currentBlockParts = [];
      for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {
          const part = inputParts[partIndex];
          if (part == CLOSE_CURLY) {
              bracketCount--;
          }
          if (bracketCount > 0) {
              currentBlockParts.push(part);
          }
          else {
              if (currentBlockParts.length > 0) {
                  escapedBlocks.push(currentBlockParts.join(''));
                  resultParts.push(BLOCK_PLACEHOLDER);
                  currentBlockParts = [];
              }
              resultParts.push(part);
          }
          if (part == OPEN_CURLY) {
              bracketCount++;
          }
      }
      if (currentBlockParts.length > 0) {
          escapedBlocks.push(currentBlockParts.join(''));
          resultParts.push(BLOCK_PLACEHOLDER);
      }
      return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
  }

  const COMPONENT_VARIABLE = '%COMP%';
  const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;
  const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;
  class StylesCompileDependency {
      constructor(name, moduleUrl, isShimmed, valuePlaceholder) {
          this.name = name;
          this.moduleUrl = moduleUrl;
          this.isShimmed = isShimmed;
          this.valuePlaceholder = valuePlaceholder;
      }
  }
  class StylesCompileResult {
      constructor(componentStylesheet, externalStylesheets) {
          this.componentStylesheet = componentStylesheet;
          this.externalStylesheets = externalStylesheets;
      }
  }
  class CompiledStylesheet {
      constructor(statements, stylesVar, dependencies, isShimmed, meta) {
          this.statements = statements;
          this.stylesVar = stylesVar;
          this.dependencies = dependencies;
          this.isShimmed = isShimmed;
          this.meta = meta;
      }
  }
  class StyleCompiler {
      constructor(_urlResolver) {
          this._urlResolver = _urlResolver;
          this._shadowCss = new ShadowCss();
      }
      compileComponent(comp) {
          const externalStylesheets = [];
          const componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
              styles: comp.template.styles,
              styleUrls: comp.template.styleUrls,
              moduleUrl: identifierModuleUrl(comp.type)
          }), true);
          comp.template.externalStylesheets.forEach((stylesheetMeta) => {
              const compiledStylesheet = this._compileStyles(comp, stylesheetMeta, false);
              externalStylesheets.push(compiledStylesheet);
          });
          return new StylesCompileResult(componentStylesheet, externalStylesheets);
      }
      _compileStyles(comp, stylesheet, isComponentStylesheet) {
          const shim = comp.template.encapsulation === ViewEncapsulation.Emulated;
          const styleExpressions = stylesheet.styles.map(plainStyle => literal(this._shimIfNeeded(plainStyle, shim)));
          const dependencies = [];
          for (let i = 0; i < stylesheet.styleUrls.length; i++) {
              const identifier = { reference: null };
              dependencies.push(new StylesCompileDependency(getStylesVarName(null), stylesheet.styleUrls[i], shim, identifier));
              styleExpressions.push(new ExternalExpr(identifier));
          }
          // styles variable contains plain strings and arrays of other styles arrays (recursive),
          // so we set its type to dynamic.
          const stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
          const stmt = variable(stylesVar)
              .set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])))
              .toDeclStmt(null, [StmtModifier.Final]);
          return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
      }
      _shimIfNeeded(style, shim) {
          return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
      }
  }
  StyleCompiler.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  StyleCompiler.ctorParameters = () => [
      { type: UrlResolver, },
  ];
  function getStylesVarName(component) {
      let result = `styles`;
      if (component) {
          result += `_${identifierName(component.type)}`;
      }
      return result;
  }

  class _DebugState {
      constructor(nodeIndex, sourceAst) {
          this.nodeIndex = nodeIndex;
          this.sourceAst = sourceAst;
      }
  }
  const NULL_DEBUG_STATE = new _DebugState(null, null);
  class CompileMethod {
      constructor(_view) {
          this._view = _view;
          this._newState = NULL_DEBUG_STATE;
          this._currState = NULL_DEBUG_STATE;
          this._bodyStatements = [];
          this._debugEnabled = this._view.genConfig.genDebugInfo;
      }
      _updateDebugContextIfNeeded() {
          if (this._newState.nodeIndex !== this._currState.nodeIndex ||
              this._newState.sourceAst !== this._currState.sourceAst) {
              const expr = this._updateDebugContext(this._newState);
              if (expr) {
                  this._bodyStatements.push(expr.toStmt());
              }
          }
      }
      _updateDebugContext(newState) {
          this._currState = this._newState = newState;
          if (this._debugEnabled) {
              const sourceLocation = newState.sourceAst ? newState.sourceAst.sourceSpan.start : null;
              return THIS_EXPR.callMethod('debug', [
                  literal(newState.nodeIndex),
                  sourceLocation ? literal(sourceLocation.line) : NULL_EXPR,
                  sourceLocation ? literal(sourceLocation.col) : NULL_EXPR
              ]);
          }
          else {
              return null;
          }
      }
      resetDebugInfoExpr(nodeIndex, templateAst) {
          const res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
          return res || NULL_EXPR;
      }
      resetDebugInfo(nodeIndex, templateAst) {
          this._newState = new _DebugState(nodeIndex, templateAst);
      }
      push(...stmts) { this.addStmts(stmts); }
      addStmt(stmt) {
          this._updateDebugContextIfNeeded();
          this._bodyStatements.push(stmt);
      }
      addStmts(stmts) {
          this._updateDebugContextIfNeeded();
          this._bodyStatements.push(...stmts);
      }
      finish() { return this._bodyStatements; }
      isEmpty() { return this._bodyStatements.length === 0; }
  }

  function getPropertyInView(property, callingView, definedView) {
      if (callingView === definedView) {
          return property;
      }
      else {
          let viewProp = THIS_EXPR;
          let currView = callingView;
          while (currView !== definedView && currView.declarationElement.view) {
              currView = currView.declarationElement.view;
              viewProp = viewProp.prop('parentView');
          }
          if (currView !== definedView) {
              throw new Error(`Internal error: Could not calculate a property in a parent view: ${property}`);
          }
          return property.visitExpression(new _ReplaceViewTransformer(viewProp, definedView), null);
      }
  }
  class _ReplaceViewTransformer extends ExpressionTransformer {
      constructor(_viewExpr, _view) {
          super();
          this._viewExpr = _viewExpr;
          this._view = _view;
      }
      _isThis(expr) {
          return expr instanceof ReadVarExpr && expr.builtin === BuiltinVar.This;
      }
      visitReadVarExpr(ast, context) {
          return this._isThis(ast) ? this._viewExpr : ast;
      }
      visitReadPropExpr(ast, context) {
          if (this._isThis(ast.receiver)) {
              // Note: Don't cast for members of the AppView base class...
              if (this._view.fields.some((field) => field.name == ast.name) ||
                  this._view.getters.some((field) => field.name == ast.name)) {
                  return this._viewExpr.cast(this._view.classType).prop(ast.name);
              }
          }
          return super.visitReadPropExpr(ast, context);
      }
  }
  function injectFromViewParentInjector(view, token, optional) {
      let viewExpr;
      if (view.viewType === ViewType.HOST) {
          viewExpr = THIS_EXPR;
      }
      else {
          viewExpr = THIS_EXPR.prop('parentView');
      }
      const args = [createDiTokenExpression(token), THIS_EXPR.prop('parentIndex')];
      if (optional) {
          args.push(NULL_EXPR);
      }
      return viewExpr.callMethod('injectorGet', args);
  }
  function getHandleEventMethodName(elementIndex) {
      return `handleEvent_${elementIndex}`;
  }

  class ViewQueryValues {
      constructor(view, values) {
          this.view = view;
          this.values = values;
      }
  }
  class CompileQuery {
      constructor(meta, queryList, ownerDirectiveExpression, view) {
          this.meta = meta;
          this.queryList = queryList;
          this.ownerDirectiveExpression = ownerDirectiveExpression;
          this.view = view;
          this._values = new ViewQueryValues(view, []);
      }
      addValue(value, view) {
          let currentView = view;
          const elPath = [];
          while (currentView && currentView !== this.view) {
              const parentEl = currentView.declarationElement;
              elPath.unshift(parentEl);
              currentView = parentEl.view;
          }
          const queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view);
          let viewValues = this._values;
          elPath.forEach((el) => {
              const last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
              if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
                  viewValues = last;
              }
              else {
                  const newViewValues = new ViewQueryValues(el.embeddedView, []);
                  viewValues.values.push(newViewValues);
                  viewValues = newViewValues;
              }
          });
          viewValues.values.push(value);
          if (elPath.length > 0) {
              view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());
          }
      }
      _isStatic() {
          return !this._values.values.some(value => value instanceof ViewQueryValues);
      }
      generateStatements(targetStaticMethod, targetDynamicMethod) {
          const values = createQueryValues(this._values);
          const updateStmts = [this.queryList.callMethod('reset', [literalArr(values)]).toStmt()];
          if (this.ownerDirectiveExpression) {
              const valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;
              updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
          }
          if (!this.meta.first) {
              updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());
          }
          if (this.meta.first && this._isStatic()) {
              // for queries that don't change and the user asked for a single element,
              // set it immediately. That is e.g. needed for querying for ViewContainerRefs, ...
              // we don't do this for QueryLists for now as this would break the timing when
              // we call QueryList listeners...
              targetStaticMethod.addStmts(updateStmts);
          }
          else {
              targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop('dirty'), updateStmts));
          }
      }
  }
  function createQueryValues(viewValues) {
      return ListWrapper$1.flatten(viewValues.values.map((entry) => {
          if (entry instanceof ViewQueryValues) {
              return mapNestedViews(entry.view.declarationElement.viewContainer, entry.view, createQueryValues(entry));
          }
          else {
              return entry;
          }
      }));
  }
  function mapNestedViews(viewContainer, view, expressions) {
      const adjustedExpressions = expressions.map((expr) => replaceVarInExpression(THIS_EXPR.name, variable('nestedView'), expr));
      return viewContainer.callMethod('mapNestedViews', [
          variable(view.className),
          fn([new FnParam('nestedView', view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))], DYNAMIC_TYPE)
      ]);
  }
  function createQueryList(propertyName, compileView) {
      compileView.fields.push(new ClassField(propertyName, importType(createIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])));
      const expr = THIS_EXPR.prop(propertyName);
      compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName)
          .set(importExpr(createIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE]).instantiate([]))
          .toStmt());
      return expr;
  }
  function addQueryToTokenMap(map, query) {
      query.meta.selectors.forEach((selector) => {
          let entry = map.get(tokenReference(selector));
          if (!entry) {
              entry = [];
              map.set(tokenReference(selector), entry);
          }
          entry.push(query);
      });
  }

  class ViewTypeEnum {
      static fromValue(value) {
          return createEnumExpression(Identifiers.ViewType, value);
      }
  }
  class ViewEncapsulationEnum {
      static fromValue(value) {
          return createEnumExpression(Identifiers.ViewEncapsulation, value);
      }
  }
  class ChangeDetectorStatusEnum {
      static fromValue(value) {
          return createEnumExpression(Identifiers.ChangeDetectorStatus, value);
      }
  }
  class ViewConstructorVars {
  }
  ViewConstructorVars.viewUtils = variable('viewUtils');
  ViewConstructorVars.parentView = variable('parentView');
  ViewConstructorVars.parentIndex = variable('parentIndex');
  ViewConstructorVars.parentElement = variable('parentElement');
  class ViewProperties {
  }
  ViewProperties.renderer = THIS_EXPR.prop('renderer');
  ViewProperties.viewUtils = THIS_EXPR.prop('viewUtils');
  ViewProperties.throwOnChange = THIS_EXPR.prop('throwOnChange');
  class InjectMethodVars$1 {
  }
  InjectMethodVars$1.token = variable('token');
  InjectMethodVars$1.requestNodeIndex = variable('requestNodeIndex');
  InjectMethodVars$1.notFoundResult = variable('notFoundResult');

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * This is currently not read, but will probably be used in the future.
   * We keep it as we already pass it through all the right places...
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ class ComponentViewDependency {
      constructor(compType) {
          this.compType = compType;
      }
  }
  /**
   * This is currently not read, but will probably be used in the future.
   * We keep it as we already pass it through all the right places...
   */
  class ComponentFactoryDependency$1 {
      constructor(compType) {
          this.compType = compType;
      }
  }
  /**
   * This is currently not read, but will probably be used in the future.
   * We keep it as we already pass it through all the right places...
   */
  class DirectiveWrapperDependency {
      constructor(dirType) {
          this.dirType = dirType;
      }
  }

  class CompileNode {
      constructor(parent, view, nodeIndex, renderNode, sourceAst) {
          this.parent = parent;
          this.view = view;
          this.nodeIndex = nodeIndex;
          this.renderNode = renderNode;
          this.sourceAst = sourceAst;
      }
      isNull() { return !this.renderNode; }
      isRootElement() { return this.view != this.parent.view; }
  }
  class CompileElement extends CompileNode {
      constructor(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) {
          super(parent, view, nodeIndex, renderNode, sourceAst);
          this.component = component;
          this._directives = _directives;
          this._resolvedProvidersArray = _resolvedProvidersArray;
          this.hasViewContainer = hasViewContainer;
          this.hasEmbeddedView = hasEmbeddedView;
          this.compViewExpr = null;
          this.instances = new Map();
          this.directiveWrapperInstance = new Map();
          this._queryCount = 0;
          this._queries = new Map();
          this.contentNodesByNgContentIndex = null;
          this.referenceTokens = {};
          references.forEach(ref => this.referenceTokens[ref.name] = ref.value);
          this.elementRef =
              importExpr(createIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);
          this.instances.set(resolveIdentifier(Identifiers.ElementRef), this.elementRef);
          this.instances.set(resolveIdentifier(Identifiers.Injector), THIS_EXPR.callMethod('injector', [literal(this.nodeIndex)]));
          this.instances.set(resolveIdentifier(Identifiers.Renderer), THIS_EXPR.prop('renderer'));
          if (this.hasViewContainer || this.hasEmbeddedView) {
              this._createViewContainer();
          }
          if (this.component) {
              this._createComponentFactoryResolver();
          }
      }
      static createNull() {
          return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);
      }
      _createViewContainer() {
          const fieldName = `_vc_${this.nodeIndex}`;
          const parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
          // private is fine here as no child view will reference a ViewContainer
          this.view.fields.push(new ClassField(fieldName, importType(createIdentifier(Identifiers.ViewContainer)), [StmtModifier.Private]));
          const statement = THIS_EXPR.prop(fieldName)
              .set(importExpr(createIdentifier(Identifiers.ViewContainer)).instantiate([
              literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode
          ]))
              .toStmt();
          this.view.createMethod.addStmt(statement);
          this.viewContainer = THIS_EXPR.prop(fieldName);
          this.instances.set(resolveIdentifier(Identifiers.ViewContainer), this.viewContainer);
          this.view.viewContainers.push(this.viewContainer);
      }
      _createComponentFactoryResolver() {
          const entryComponents = this.component.entryComponents.map((entryComponent) => {
              this.view.targetDependencies.push(new ComponentFactoryDependency$1(entryComponent.componentType));
              return { reference: entryComponent.componentFactory };
          });
          if (!entryComponents || entryComponents.length === 0) {
              return;
          }
          const createComponentFactoryResolverExpr = importExpr(createIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([
              literalArr(entryComponents.map((entryComponent) => importExpr(entryComponent))),
              injectFromViewParentInjector(this.view, createIdentifierToken(Identifiers.ComponentFactoryResolver), false)
          ]);
          const provider = {
              token: createIdentifierToken(Identifiers.ComponentFactoryResolver),
              useValue: createComponentFactoryResolverExpr
          };
          // Add ComponentFactoryResolver as first provider as it does not have deps on other providers
          // ProviderAstType.PrivateService as only the component and its view can see it,
          // but nobody else
          this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));
      }
      setComponentView(compViewExpr) {
          this.compViewExpr = compViewExpr;
          this.contentNodesByNgContentIndex =
              new Array(this.component.template.ngContentSelectors.length);
          for (let i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
              this.contentNodesByNgContentIndex[i] = [];
          }
      }
      setEmbeddedView(embeddedView) {
          this.embeddedView = embeddedView;
          if (isPresent$1(embeddedView)) {
              const createTemplateRefExpr = importExpr(createIdentifier(Identifiers.TemplateRef_)).instantiate([
                  THIS_EXPR, literal(this.nodeIndex), this.renderNode
              ]);
              const provider = {
                  token: createIdentifierToken(Identifiers.TemplateRef),
                  useValue: createTemplateRefExpr
              };
              // Add TemplateRef as first provider as it does not have deps on other providers
              this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));
          }
      }
      beforeChildren() {
          if (this.hasViewContainer) {
              this.instances.set(resolveIdentifier(Identifiers.ViewContainerRef), this.viewContainer.prop('vcRef'));
          }
          this._resolvedProviders = new Map();
          this._resolvedProvidersArray.forEach(provider => this._resolvedProviders.set(tokenReference(provider.token), provider));
          // create all the provider instances, some in the view constructor,
          // some as getters. We rely on the fact that they are already sorted topologically.
          Array.from(this._resolvedProviders.values()).forEach((resolvedProvider) => {
              const isDirectiveWrapper = resolvedProvider.providerType === ProviderAstType.Component ||
                  resolvedProvider.providerType === ProviderAstType.Directive;
              const providerValueExpressions = resolvedProvider.providers.map((provider) => {
                  if (provider.useExisting) {
                      return this._getDependency(resolvedProvider.providerType, { token: provider.useExisting });
                  }
                  else if (provider.useFactory) {
                      const deps = provider.deps || provider.useFactory.diDeps;
                      const depsExpr = deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep));
                      return importExpr(provider.useFactory).callFn(depsExpr);
                  }
                  else if (provider.useClass) {
                      const deps = provider.deps || provider.useClass.diDeps;
                      const depsExpr = deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep));
                      if (isDirectiveWrapper) {
                          const dirMeta = this._directives.find(dir => dir.type.reference === provider.useClass.reference);
                          this.view.targetDependencies.push(new DirectiveWrapperDependency(dirMeta.type.reference));
                          return DirectiveWrapperExpressions.create({ reference: dirMeta.wrapperType }, depsExpr);
                      }
                      else {
                          return importExpr(provider.useClass)
                              .instantiate(depsExpr, importType(provider.useClass));
                      }
                  }
                  else {
                      return convertValueToOutputAst(provider.useValue);
                  }
              });
              const propName = `_${tokenName(resolvedProvider.token)}_${this.nodeIndex}_${this.instances.size}`;
              const instance = createProviderProperty(propName, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, this);
              if (isDirectiveWrapper) {
                  this.directiveWrapperInstance.set(tokenReference(resolvedProvider.token), instance);
                  this.instances.set(tokenReference(resolvedProvider.token), DirectiveWrapperExpressions.context(instance));
              }
              else {
                  this.instances.set(tokenReference(resolvedProvider.token), instance);
              }
          });
          for (let i = 0; i < this._directives.length; i++) {
              const directive = this._directives[i];
              const directiveInstance = this.instances.get(tokenReference(identifierToken(directive.type)));
              directive.queries.forEach((queryMeta) => { this._addQuery(queryMeta, directiveInstance); });
          }
          Object.keys(this.referenceTokens).forEach(varName => {
              const token = this.referenceTokens[varName];
              let varValue;
              if (token) {
                  varValue = this.instances.get(tokenReference(token));
              }
              else {
                  varValue = this.renderNode;
              }
              this.view.locals.set(varName, varValue);
          });
      }
      afterChildren(childNodeCount) {
          Array.from(this._resolvedProviders.values()).forEach((resolvedProvider) => {
              // Note: afterChildren is called after recursing into children.
              // This is good so that an injector match in an element that is closer to a requesting element
              // matches first.
              const providerExpr = this.instances.get(tokenReference(resolvedProvider.token));
              // Note: view providers are only visible on the injector of that element.
              // This is not fully correct as the rules during codegen don't allow a directive
              // to get hold of a view provdier on the same element. We still do this semantic
              // as it simplifies our model to having only one runtime injector per element.
              const providerChildNodeCount = resolvedProvider.providerType === ProviderAstType.PrivateService ? 0 : childNodeCount;
              this.view.injectorGetMethod.addStmt(createInjectInternalCondition(this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
          });
      }
      finish() {
          Array.from(this._queries.values())
              .forEach(queries => queries.forEach(q => q.generateStatements(this.view.createMethod, this.view.updateContentQueriesMethod)));
      }
      addContentNode(ngContentIndex, nodeExpr) {
          this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
      }
      getComponent() {
          return isPresent$1(this.component) ?
              this.instances.get(tokenReference(identifierToken(this.component.type))) :
              null;
      }
      getProviderTokens() {
          return Array.from(this._resolvedProviders.values()).map(provider => provider.token);
      }
      getQueriesFor(token) {
          const result = [];
          let currentEl = this;
          let distance = 0;
          let queries;
          while (!currentEl.isNull()) {
              queries = currentEl._queries.get(tokenReference(token));
              if (isPresent$1(queries)) {
                  result.push(...queries.filter((query) => query.meta.descendants || distance <= 1));
              }
              if (currentEl._directives.length > 0) {
                  distance++;
              }
              currentEl = currentEl.parent;
          }
          queries = this.view.componentView.viewQueries.get(tokenReference(token));
          if (isPresent$1(queries)) {
              result.push(...queries);
          }
          return result;
      }
      _addQuery(queryMeta, directiveInstance) {
          const propName = `_query_${tokenName(queryMeta.selectors[0])}_${this.nodeIndex}_${this._queryCount++}`;
          const queryList = createQueryList(propName, this.view);
          const query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);
          addQueryToTokenMap(this._queries, query);
          return query;
      }
      _getLocalDependency(requestingProviderType, dep) {
          let result = null;
          if (isPresent$1(dep.token)) {
              // access builtins with special visibility
              if (!result) {
                  if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {
                      if (requestingProviderType === ProviderAstType.Component) {
                          return this.compViewExpr.prop('ref');
                      }
                      else {
                          return getPropertyInView(THIS_EXPR.prop('ref'), this.view, this.view.componentView);
                      }
                  }
              }
              // access regular providers on the element
              if (!result) {
                  const resolvedProvider = this._resolvedProviders.get(tokenReference(dep.token));
                  // don't allow directives / public services to access private services.
                  // only components and private services can access private services.
                  if (resolvedProvider && (requestingProviderType === ProviderAstType.Directive ||
                      requestingProviderType === ProviderAstType.PublicService) &&
                      resolvedProvider.providerType === ProviderAstType.PrivateService) {
                      return null;
                  }
                  result = this.instances.get(tokenReference(dep.token));
              }
          }
          return result;
      }
      _getDependency(requestingProviderType, dep) {
          let currElement = this;
          let result = null;
          if (dep.isValue) {
              result = literal(dep.value);
          }
          if (!result && !dep.isSkipSelf) {
              result = this._getLocalDependency(requestingProviderType, dep);
          }
          // check parent elements
          while (!result && !currElement.parent.isNull()) {
              currElement = currElement.parent;
              result = currElement._getLocalDependency(ProviderAstType.PublicService, { token: dep.token });
          }
          if (!result) {
              result = injectFromViewParentInjector(this.view, dep.token, dep.isOptional);
          }
          if (!result) {
              result = NULL_EXPR;
          }
          return getPropertyInView(result, this.view, currElement.view);
      }
  }
  function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
      let indexCondition;
      if (childNodeCount > 0) {
          indexCondition = literal(nodeIndex)
              .lowerEquals(InjectMethodVars$1.requestNodeIndex)
              .and(InjectMethodVars$1.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount)));
      }
      else {
          indexCondition = literal(nodeIndex).identical(InjectMethodVars$1.requestNodeIndex);
      }
      return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]);
  }
  function createProviderProperty(propName, providerValueExpressions, isMulti, isEager, compileElement) {
      const view = compileElement.view;
      let resolvedProviderValueExpr;
      let type;
      if (isMulti) {
          resolvedProviderValueExpr = literalArr(providerValueExpressions);
          type = new ArrayType(DYNAMIC_TYPE);
      }
      else {
          resolvedProviderValueExpr = providerValueExpressions[0];
          type = providerValueExpressions[0].type;
      }
      if (!type) {
          type = DYNAMIC_TYPE;
      }
      if (isEager) {
          view.fields.push(new ClassField(propName, type));
          view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
      }
      else {
          const internalField = `_${propName}`;
          view.fields.push(new ClassField(internalField, type));
          const getter = new CompileMethod(view);
          getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
          // Note: Equals is important for JS so that it also checks the undefined case!
          getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));
          getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField)));
          view.getters.push(new ClassGetter(propName, getter.finish(), type));
      }
      return THIS_EXPR.prop(propName);
  }

  class CompilePipe {
      constructor(view, meta) {
          this.view = view;
          this.meta = meta;
          this._purePipeProxyCount = 0;
          this.instance = THIS_EXPR.prop(`_pipe_${meta.name}_${view.pipeCount++}`);
          const deps = this.meta.type.diDeps.map((diDep) => {
              if (tokenReference(diDep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {
                  return getPropertyInView(THIS_EXPR.prop('ref'), this.view, this.view.componentView);
              }
              return injectFromViewParentInjector(view, diDep.token, false);
          });
          this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type)));
          this.view.createMethod.resetDebugInfo(null, null);
          this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name)
              .set(importExpr(this.meta.type).instantiate(deps))
              .toStmt());
      }
      static call(view, name, args) {
          const compView = view.componentView;
          const meta = _findPipeMeta(compView, name);
          let pipe;
          if (meta.pure) {
              // pure pipes live on the component view
              pipe = compView.purePipes.get(name);
              if (!pipe) {
                  pipe = new CompilePipe(compView, meta);
                  compView.purePipes.set(name, pipe);
                  compView.pipes.push(pipe);
              }
          }
          else {
              // Non pure pipes live on the view that called it
              pipe = new CompilePipe(view, meta);
              view.pipes.push(pipe);
          }
          return pipe._call(view, args);
      }
      get pure() { return this.meta.pure; }
      _call(callingView, args) {
          if (this.meta.pure) {
              // PurePipeProxies live on the view that called them.
              const purePipeProxyInstance = THIS_EXPR.prop(`${this.instance.name}_${this._purePipeProxyCount++}`);
              const pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);
              createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform')
                  .callMethod(BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, { fields: callingView.fields, ctorStmts: callingView.createMethod });
              return importExpr(createIdentifier(Identifiers.castByValue))
                  .callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')])
                  .callFn(args);
          }
          else {
              return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);
          }
      }
  }
  function _findPipeMeta(view, name) {
      let pipeMeta = null;
      for (let i = view.pipeMetas.length - 1; i >= 0; i--) {
          const localPipeMeta = view.pipeMetas[i];
          if (localPipeMeta.name == name) {
              pipeMeta = localPipeMeta;
              break;
          }
      }
      if (!pipeMeta) {
          throw new Error(`Illegal state: Could not find pipe ${name} although the parser should have detected this error!`);
      }
      return pipeMeta;
  }

  var CompileViewRootNodeType;
  (function (CompileViewRootNodeType) {
      CompileViewRootNodeType[CompileViewRootNodeType["Node"] = 0] = "Node";
      CompileViewRootNodeType[CompileViewRootNodeType["ViewContainer"] = 1] = "ViewContainer";
      CompileViewRootNodeType[CompileViewRootNodeType["NgContent"] = 2] = "NgContent";
  })(CompileViewRootNodeType || (CompileViewRootNodeType = {}));
  class CompileViewRootNode {
      constructor(type, expr, ngContentIndex) {
          this.type = type;
          this.expr = expr;
          this.ngContentIndex = ngContentIndex;
      }
  }
  class CompileView {
      constructor(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings, targetDependencies) {
          this.component = component;
          this.genConfig = genConfig;
          this.pipeMetas = pipeMetas;
          this.styles = styles;
          this.animations = animations;
          this.viewIndex = viewIndex;
          this.declarationElement = declarationElement;
          this.templateVariableBindings = templateVariableBindings;
          this.targetDependencies = targetDependencies;
          this.viewChildren = [];
          this.nodes = [];
          this.rootNodes = [];
          this.lastRenderNode = NULL_EXPR;
          this.viewContainers = [];
          this.methods = [];
          this.ctorStmts = [];
          this.fields = [];
          this.getters = [];
          this.disposables = [];
          this.purePipes = new Map();
          this.pipes = [];
          this.locals = new Map();
          this.literalArrayCount = 0;
          this.literalMapCount = 0;
          this.pipeCount = 0;
          this.createMethod = new CompileMethod(this);
          this.animationBindingsMethod = new CompileMethod(this);
          this.injectorGetMethod = new CompileMethod(this);
          this.updateContentQueriesMethod = new CompileMethod(this);
          this.dirtyParentQueriesMethod = new CompileMethod(this);
          this.updateViewQueriesMethod = new CompileMethod(this);
          this.detectChangesInInputsMethod = new CompileMethod(this);
          this.detectChangesRenderPropertiesMethod = new CompileMethod(this);
          this.afterContentLifecycleCallbacksMethod = new CompileMethod(this);
          this.afterViewLifecycleCallbacksMethod = new CompileMethod(this);
          this.destroyMethod = new CompileMethod(this);
          this.detachMethod = new CompileMethod(this);
          this.viewType = getViewType(component, viewIndex);
          this.className = viewClassName(component.type.reference, viewIndex);
          this.rendererTypeName = rendererTypeName(component.type.reference);
          this.classType = expressionType(variable(this.className));
          this.classExpr = variable(this.className);
          if (this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST) {
              this.componentView = this;
          }
          else {
              this.componentView = this.declarationElement.view.componentView;
          }
          this.componentContext =
              getPropertyInView(THIS_EXPR.prop('context'), this, this.componentView);
          const viewQueries = new Map();
          if (this.viewType === ViewType.COMPONENT) {
              const directiveInstance = THIS_EXPR.prop('context');
              this.component.viewQueries.forEach((queryMeta, queryIndex) => {
                  const propName = `_viewQuery_${tokenName(queryMeta.selectors[0])}_${queryIndex}`;
                  const queryList = createQueryList(propName, this);
                  const query = new CompileQuery(queryMeta, queryList, directiveInstance, this);
                  addQueryToTokenMap(viewQueries, query);
              });
          }
          this.viewQueries = viewQueries;
          templateVariableBindings.forEach((entry) => { this.locals.set(entry[1], THIS_EXPR.prop('context').prop(entry[0])); });
          if (!this.declarationElement.isNull()) {
              this.declarationElement.setEmbeddedView(this);
          }
      }
      callPipe(name, input, args) {
          return CompilePipe.call(this, name, [input].concat(args));
      }
      getLocal(name) {
          if (name == EventHandlerVars.event.name) {
              return EventHandlerVars.event;
          }
          let currView = this;
          let result = currView.locals.get(name);
          while (!result && isPresent$1(currView.declarationElement.view)) {
              currView = currView.declarationElement.view;
              result = currView.locals.get(name);
          }
          if (isPresent$1(result)) {
              return getPropertyInView(result, this, currView);
          }
          else {
              return null;
          }
      }
      finish() {
          Array.from(this.viewQueries.values())
              .forEach(queries => queries.forEach(q => q.generateStatements(this.createMethod, this.updateViewQueriesMethod)));
      }
  }
  function getViewType(component, embeddedTemplateIndex) {
      if (embeddedTemplateIndex > 0) {
          return ViewType.EMBEDDED;
      }
      if (component.isHost) {
          return ViewType.HOST;
      }
      return ViewType.COMPONENT;
  }

  function bindOutputs(boundEvents, directives, compileElement, bindToRenderer) {
      const usedEvents = collectEvents(boundEvents, directives);
      if (!usedEvents.size) {
          return false;
      }
      if (bindToRenderer) {
          subscribeToRenderEvents(usedEvents, compileElement);
      }
      subscribeToDirectiveEvents(usedEvents, directives, compileElement);
      generateHandleEventMethod(boundEvents, directives, compileElement);
      return true;
  }
  function collectEvents(boundEvents, directives) {
      const usedEvents = new Map();
      boundEvents.forEach((event) => { usedEvents.set(event.fullName, event); });
      directives.forEach((dirAst) => {
          dirAst.hostEvents.forEach((event) => { usedEvents.set(event.fullName, event); });
      });
      return usedEvents;
  }
  function subscribeToRenderEvents(usedEvents, compileElement) {
      const eventAndTargetExprs = [];
      usedEvents.forEach((event) => {
          if (!event.phase) {
              eventAndTargetExprs.push(literal(event.name), literal(event.target));
          }
      });
      if (eventAndTargetExprs.length) {
          const disposableVar = variable(`disposable_${compileElement.view.disposables.length}`);
          compileElement.view.disposables.push(disposableVar);
          compileElement.view.createMethod.addStmt(disposableVar
              .set(importExpr(createIdentifier(Identifiers.subscribeToRenderElement)).callFn([
              THIS_EXPR, compileElement.renderNode, createInlineArray(eventAndTargetExprs),
              handleEventExpr(compileElement)
          ]))
              .toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private]));
      }
  }
  function subscribeToDirectiveEvents(usedEvents, directives, compileElement) {
      const usedEventNames = Array.from(usedEvents.keys());
      directives.forEach((dirAst) => {
          const dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
          compileElement.view.createMethod.addStmts(DirectiveWrapperExpressions.subscribe(dirAst.directive, dirAst.hostProperties, usedEventNames, dirWrapper, THIS_EXPR, handleEventExpr(compileElement)));
      });
  }
  function generateHandleEventMethod(boundEvents, directives, compileElement) {
      const hasComponentHostListener = directives.some((dirAst) => dirAst.hostEvents.some((event) => dirAst.directive.isComponent));
      const markPathToRootStart = hasComponentHostListener ? compileElement.compViewExpr : THIS_EXPR;
      const handleEventStmts = new CompileMethod(compileElement.view);
      handleEventStmts.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
      handleEventStmts.push(markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt());
      const eventNameVar = variable('eventName');
      const resultVar = variable('result');
      handleEventStmts.push(resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE));
      directives.forEach((dirAst, dirIdx) => {
          const dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
          if (dirAst.hostEvents.length > 0) {
              handleEventStmts.push(resultVar
                  .set(DirectiveWrapperExpressions
                  .handleEvent(dirAst.hostEvents, dirWrapper, eventNameVar, EventHandlerVars.event)
                  .and(resultVar))
                  .toStmt());
          }
      });
      boundEvents.forEach((renderEvent, renderEventIdx) => {
          const evalResult = convertActionBinding(compileElement.view, compileElement.view.componentContext, renderEvent.handler, `sub_${renderEventIdx}`);
          const trueStmts = evalResult.stmts;
          if (evalResult.allowDefault) {
              trueStmts.push(resultVar.set(evalResult.allowDefault.and(resultVar)).toStmt());
          }
          // TODO(tbosch): convert this into a `switch` once our OutputAst supports it.
          handleEventStmts.push(new IfStmt(eventNameVar.equals(literal(renderEvent.fullName)), trueStmts));
      });
      handleEventStmts.push(new ReturnStatement(resultVar));
      compileElement.view.methods.push(new ClassMethod(getHandleEventMethodName(compileElement.nodeIndex), [
          new FnParam(eventNameVar.name, STRING_TYPE),
          new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)
      ], handleEventStmts.finish(), BOOL_TYPE));
  }
  function handleEventExpr(compileElement) {
      const handleEventMethodName = getHandleEventMethodName(compileElement.nodeIndex);
      return THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(handleEventMethodName)]);
  }

  function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
      const view = compileElement.view;
      const lifecycleHooks = directiveMeta.type.lifecycleHooks;
      const afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
      afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
      if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1) {
          afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(isFirstViewCheck(THIS_EXPR), [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));
      }
      if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1) {
          afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());
      }
  }
  function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
      const view = compileElement.view;
      const lifecycleHooks = directiveMeta.type.lifecycleHooks;
      const afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
      afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
      if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1) {
          afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(isFirstViewCheck(THIS_EXPR), [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));
      }
      if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1) {
          afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());
      }
  }
  function bindDirectiveWrapperLifecycleCallbacks(dir, directiveWrapperIntance, compileElement) {
      compileElement.view.destroyMethod.addStmts(DirectiveWrapperExpressions.ngOnDestroy(dir.directive, directiveWrapperIntance));
      compileElement.view.detachMethod.addStmts(DirectiveWrapperExpressions.ngOnDetach(dir.hostProperties, directiveWrapperIntance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode));
  }
  function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {
      const onDestroyMethod = compileElement.view.destroyMethod;
      onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
      if (provider.providerType !== ProviderAstType.Directive &&
          provider.providerType !== ProviderAstType.Component &&
          provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
          onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy', []).toStmt());
      }
  }
  function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
      const onDestroyMethod = view.destroyMethod;
      if (pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
          onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());
      }
  }

  function bindRenderText(boundText, compileNode, view) {
      const valueField = createCheckBindingField(view);
      const evalResult = legacyConvertPropertyBinding(view, view, view.componentContext, boundText.value, valueField.bindingId);
      if (!evalResult) {
          return null;
      }
      view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
      view.detectChangesRenderPropertiesMethod.addStmts(evalResult.stmts);
      view.detectChangesRenderPropertiesMethod.addStmt(importExpr(createIdentifier(Identifiers.checkRenderText))
          .callFn([
          THIS_EXPR, compileNode.renderNode, valueField.expression,
          valueField.expression.set(evalResult.currValExpr),
          evalResult.forceUpdate || literal(false)
      ])
          .toStmt());
  }
  function bindRenderInputs(boundProps, boundOutputs, hasEvents, compileElement) {
      const view = compileElement.view;
      const renderNode = compileElement.renderNode;
      boundProps.forEach((boundProp) => {
          const bindingField = createCheckBindingField(view);
          view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
          const evalResult = legacyConvertPropertyBinding(view, view, compileElement.view.componentContext, boundProp.value, bindingField.bindingId);
          if (!evalResult) {
              return;
          }
          let compileMethod = view.detectChangesRenderPropertiesMethod;
          switch (boundProp.type) {
              case PropertyBindingType.Property:
              case PropertyBindingType.Attribute:
              case PropertyBindingType.Class:
              case PropertyBindingType.Style:
                  compileMethod.addStmts(createCheckRenderBindingStmt(THIS_EXPR, renderNode, boundProp, bindingField.expression, evalResult));
                  break;
              case PropertyBindingType.Animation:
                  compileMethod = view.animationBindingsMethod;
                  const { checkUpdateStmts, checkDetachStmts } = createCheckAnimationBindingStmts(THIS_EXPR, THIS_EXPR, boundProp, boundOutputs, (hasEvents ? THIS_EXPR.prop(getHandleEventMethodName(compileElement.nodeIndex)) :
                      importExpr(createIdentifier(Identifiers.noop)))
                      .callMethod(BuiltinMethod.Bind, [THIS_EXPR]), compileElement.renderNode, bindingField.expression, evalResult);
                  view.detachMethod.addStmts(checkDetachStmts);
                  compileMethod.addStmts(checkUpdateStmts);
                  break;
          }
      });
  }
  function bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, elementName, schemaRegistry) {
      // We need to provide the SecurityContext for properties that could need sanitization.
      const runtimeSecurityCtxExprs = directiveAst.hostProperties.filter(boundProp => boundProp.needsRuntimeSecurityContext)
          .map((boundProp) => {
          let ctx;
          switch (boundProp.type) {
              case PropertyBindingType.Property:
                  ctx = schemaRegistry.securityContext(elementName, boundProp.name, false);
                  break;
              case PropertyBindingType.Attribute:
                  ctx = schemaRegistry.securityContext(elementName, boundProp.name, true);
                  break;
              default:
                  throw new Error(`Illegal state: Only property / attribute bindings can have an unknown security context! Binding ${boundProp.name}`);
          }
          return createEnumExpression(Identifiers.SecurityContext, ctx);
      });
      compileElement.view.detectChangesRenderPropertiesMethod.addStmts(DirectiveWrapperExpressions.checkHost(directiveAst.hostProperties, directiveWrapperInstance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode, runtimeSecurityCtxExprs));
  }
  function bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement) {
      const view = compileElement.view;
      const detectChangesInInputsMethod = view.detectChangesInInputsMethod;
      detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
      directiveAst.inputs.forEach((input, inputIdx) => {
          // Note: We can't use `fields.length` here, as we are not adding a field!
          const bindingId = `${compileElement.nodeIndex}_${dirIndex}_${inputIdx}`;
          detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
          const evalResult = legacyConvertPropertyBinding(view, view, view.componentContext, input.value, bindingId);
          if (!evalResult) {
              return;
          }
          detectChangesInInputsMethod.addStmts(evalResult.stmts);
          detectChangesInInputsMethod.addStmt(directiveWrapperInstance
              .callMethod(`check_${input.directiveName}`, [THIS_EXPR, evalResult.currValExpr, evalResult.forceUpdate || literal(false)])
              .toStmt());
      });
      const isOnPushComp = directiveAst.directive.isComponent &&
          !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
      const directiveDetectChangesExpr = DirectiveWrapperExpressions.ngDoCheck(directiveWrapperInstance, THIS_EXPR, compileElement.renderNode);
      const directiveDetectChangesStmt = isOnPushComp ?
          new IfStmt(directiveDetectChangesExpr, [compileElement.compViewExpr.callMethod('markAsCheckOnce', []).toStmt()]) :
          directiveDetectChangesExpr.toStmt();
      detectChangesInInputsMethod.addStmt(directiveDetectChangesStmt);
  }

  // Note: We can't do this when we create the CompileElements already,
  // as we create embedded views before the <ng-template> elements themselves.
  function bindQueryValues(ce) {
      const queriesWithReads = [];
      ce.getProviderTokens().forEach((token) => {
          const queriesForProvider = ce.getQueriesFor(token);
          queriesWithReads.push(...queriesForProvider.map(query => new _QueryWithRead(query, token)));
      });
      Object.keys(ce.referenceTokens).forEach(varName => {
          const varToken = { value: varName };
          queriesWithReads.push(...ce.getQueriesFor(varToken).map(query => new _QueryWithRead(query, varToken)));
      });
      queriesWithReads.forEach((queryWithRead) => {
          let value;
          if (queryWithRead.read.identifier) {
              // query for an identifier
              value = ce.instances.get(tokenReference(queryWithRead.read));
          }
          else {
              // query for a reference
              const token = ce.referenceTokens[queryWithRead.read.value];
              if (token) {
                  value = ce.instances.get(tokenReference(token));
              }
              else {
                  value = ce.elementRef;
              }
          }
          if (value) {
              queryWithRead.query.addValue(value, ce.view);
          }
      });
  }
  class _QueryWithRead {
      constructor(query, match) {
          this.query = query;
          this.read = query.meta.read || match;
      }
  }

  function bindView(view, parsedTemplate, schemaRegistry) {
      const visitor = new ViewBinderVisitor(view, schemaRegistry);
      templateVisitAll(visitor, parsedTemplate);
      view.pipes.forEach((pipe) => { bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view); });
  }
  class ViewBinderVisitor {
      constructor(view, _schemaRegistry) {
          this.view = view;
          this._schemaRegistry = _schemaRegistry;
          this._nodeIndex = 0;
      }
      visitBoundText(ast, parent) {
          const node = this.view.nodes[this._nodeIndex++];
          bindRenderText(ast, node, this.view);
          return null;
      }
      visitText(ast, parent) {
          this._nodeIndex++;
          return null;
      }
      visitNgContent(ast, parent) { return null; }
      visitElement(ast, parent) {
          const compileElement = this.view.nodes[this._nodeIndex++];
          bindQueryValues(compileElement);
          const hasEvents = bindOutputs(ast.outputs, ast.directives, compileElement, true);
          bindRenderInputs(ast.inputs, ast.outputs, hasEvents, compileElement);
          ast.directives.forEach((directiveAst, dirIndex) => {
              const directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
              bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
              bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, ast.name, this._schemaRegistry);
          });
          templateVisitAll(this, ast.children, compileElement);
          // afterContent and afterView lifecycles need to be called bottom up
          // so that children are notified before parents
          ast.directives.forEach((directiveAst) => {
              const directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
              const directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
              bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
              bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
              bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
          });
          ast.providers.forEach((providerAst) => {
              const providerInstance = compileElement.instances.get(tokenReference(providerAst.token));
              bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
          });
          return null;
      }
      visitEmbeddedTemplate(ast, parent) {
          const compileElement = this.view.nodes[this._nodeIndex++];
          bindQueryValues(compileElement);
          bindOutputs(ast.outputs, ast.directives, compileElement, false);
          ast.directives.forEach((directiveAst, dirIndex) => {
              const directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
              const directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
              bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
              bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
              bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
              bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
          });
          ast.providers.forEach((providerAst) => {
              const providerInstance = compileElement.instances.get(tokenReference(providerAst.token));
              bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
          });
          bindView(compileElement.embeddedView, ast.children, this._schemaRegistry);
          return null;
      }
      visitAttr(ast, ctx) { return null; }
      visitDirective(ast, ctx) { return null; }
      visitEvent(ast, eventTargetAndNames) {
          return null;
      }
      visitReference(ast, ctx) { return null; }
      visitVariable(ast, ctx) { return null; }
      visitDirectiveProperty(ast, context) { return null; }
      visitElementProperty(ast, context) { return null; }
  }

  const IMPLICIT_TEMPLATE_VAR = '\$implicit';
  const CLASS_ATTR$1 = 'class';
  const STYLE_ATTR = 'style';
  const NG_CONTAINER_TAG = 'ng-container';
  const parentRenderNodeVar = variable('parentRenderNode');
  const rootSelectorVar = variable('rootSelector');
  function buildView(view, template, targetDependencies) {
      const builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
      const parentEl = view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent;
      templateVisitAll(builderVisitor, template, parentEl);
      if (view.viewType === ViewType.EMBEDDED || view.viewType === ViewType.HOST) {
          view.lastRenderNode = builderVisitor.getOrCreateLastRenderNode();
      }
      return builderVisitor.nestedViewCount;
  }
  function finishView(view, targetStatements) {
      view.nodes.forEach((node) => {
          if (node instanceof CompileElement) {
              node.finish();
              if (node.hasEmbeddedView) {
                  finishView(node.embeddedView, targetStatements);
              }
          }
      });
      view.finish();
      createViewTopLevelStmts(view, targetStatements);
  }
  class ViewBuilderVisitor {
      constructor(view, targetDependencies) {
          this.view = view;
          this.targetDependencies = targetDependencies;
          this.nestedViewCount = 0;
      }
      _isRootNode(parent) { return parent.view !== this.view; }
      _addRootNodeAndProject(node) {
          const projectedNode = _getOuterContainerOrSelf(node);
          const parent = projectedNode.parent;
          const ngContentIndex = projectedNode.sourceAst.ngContentIndex;
          const viewContainer = (node instanceof CompileElement && node.hasViewContainer) ? node.viewContainer : null;
          if (this._isRootNode(parent)) {
              if (this.view.viewType !== ViewType.COMPONENT) {
                  this.view.rootNodes.push(new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
              }
          }
          else if (isPresent$1(parent.component) && isPresent$1(ngContentIndex)) {
              parent.addContentNode(ngContentIndex, new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
          }
      }
      _getParentRenderNode(parent) {
          parent = _getOuterContainerParentOrSelf(parent);
          if (this._isRootNode(parent)) {
              if (this.view.viewType === ViewType.COMPONENT) {
                  return parentRenderNodeVar;
              }
              else {
                  // root node of an embedded/host view
                  return NULL_EXPR;
              }
          }
          else {
              return isPresent$1(parent.component) &&
                  parent.component.template.encapsulation !== ViewEncapsulation.Native ?
                  NULL_EXPR :
                  parent.renderNode;
          }
      }
      getOrCreateLastRenderNode() {
          const view = this.view;
          if (view.rootNodes.length === 0 ||
              view.rootNodes[view.rootNodes.length - 1].type !== CompileViewRootNodeType.Node) {
              const fieldName = `_el_${view.nodes.length}`;
              view.fields.push(new ClassField(fieldName, importType(view.genConfig.renderTypes.renderElement)));
              view.createMethod.addStmt(THIS_EXPR.prop(fieldName)
                  .set(ViewProperties.renderer.callMethod('createTemplateAnchor', [NULL_EXPR, NULL_EXPR]))
                  .toStmt());
              view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.Node, THIS_EXPR.prop(fieldName)));
          }
          return view.rootNodes[view.rootNodes.length - 1].expr;
      }
      visitBoundText(ast, parent) {
          return this._visitText(ast, '', parent);
      }
      visitText(ast, parent) {
          return this._visitText(ast, ast.value, parent);
      }
      _visitText(ast, value, parent) {
          const fieldName = `_text_${this.view.nodes.length}`;
          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));
          const renderNode = THIS_EXPR.prop(fieldName);
          const compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
          const createRenderNode = THIS_EXPR.prop(fieldName)
              .set(ViewProperties.renderer.callMethod('createText', [
              this._getParentRenderNode(parent), literal(value),
              this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)
          ]))
              .toStmt();
          this.view.nodes.push(compileNode);
          this.view.createMethod.addStmt(createRenderNode);
          this._addRootNodeAndProject(compileNode);
          return renderNode;
      }
      visitNgContent(ast, parent) {
          // the projected nodes originate from a different view, so we don't
          // have debug information for them...
          this.view.createMethod.resetDebugInfo(null, ast);
          const parentRenderNode = this._getParentRenderNode(parent);
          if (parentRenderNode !== NULL_EXPR) {
              this.view.createMethod.addStmt(THIS_EXPR.callMethod('projectNodes', [parentRenderNode, literal(ast.index)])
                  .toStmt());
          }
          else if (this._isRootNode(parent)) {
              if (this.view.viewType !== ViewType.COMPONENT) {
                  // store root nodes only for embedded/host views
                  this.view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
              }
          }
          else {
              if (isPresent$1(parent.component) && isPresent$1(ast.ngContentIndex)) {
                  parent.addContentNode(ast.ngContentIndex, new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
              }
          }
          return null;
      }
      visitElement(ast, parent) {
          const nodeIndex = this.view.nodes.length;
          let createRenderNodeExpr;
          const debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
          const directives = ast.directives.map(directiveAst => directiveAst.directive);
          const component = directives.find(directive => directive.isComponent);
          if (ast.name === NG_CONTAINER_TAG) {
              createRenderNodeExpr = ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);
          }
          else {
              const htmlAttrs = _readHtmlAttrs(ast.attrs);
              const attrNameAndValues = createInlineArray(_mergeHtmlAndDirectiveAttrs(htmlAttrs, directives).map(v => literal(v)));
              if (nodeIndex === 0 && this.view.viewType === ViewType.HOST) {
                  createRenderNodeExpr =
                      importExpr(createIdentifier(Identifiers.selectOrCreateRenderHostElement)).callFn([
                          ViewProperties.renderer, literal(ast.name), attrNameAndValues, rootSelectorVar,
                          debugContextExpr
                      ]);
              }
              else {
                  createRenderNodeExpr =
                      importExpr(createIdentifier(Identifiers.createRenderElement)).callFn([
                          ViewProperties.renderer, this._getParentRenderNode(parent), literal(ast.name),
                          attrNameAndValues, debugContextExpr
                      ]);
              }
          }
          const fieldName = `_el_${nodeIndex}`;
          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement)));
          this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
          const renderNode = THIS_EXPR.prop(fieldName);
          const compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references);
          this.view.nodes.push(compileElement);
          let compViewExpr = null;
          if (isPresent$1(component)) {
              this.targetDependencies.push(new ComponentViewDependency(component.type.reference));
              compViewExpr = THIS_EXPR.prop(`compView_${nodeIndex}`); // fix highlighting: `
              this.view.fields.push(new ClassField(compViewExpr.name, importType(createIdentifier(Identifiers.AppView), [importType(component.type)])));
              this.view.viewChildren.push(compViewExpr);
              compileElement.setComponentView(compViewExpr);
              this.view.createMethod.addStmt(compViewExpr
                  .set(importExpr({ reference: component.componentViewType }).instantiate([
                  ViewProperties.viewUtils, THIS_EXPR, literal(nodeIndex), renderNode
              ]))
                  .toStmt());
          }
          compileElement.beforeChildren();
          this._addRootNodeAndProject(compileElement);
          templateVisitAll(this, ast.children, compileElement);
          compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
          if (isPresent$1(compViewExpr)) {
              this.view.createMethod.addStmt(compViewExpr.callMethod('create', [compileElement.getComponent()]).toStmt());
          }
          return null;
      }
      visitEmbeddedTemplate(ast, parent) {
          const nodeIndex = this.view.nodes.length;
          const fieldName = `_anchor_${nodeIndex}`;
          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment)));
          this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName)
              .set(ViewProperties.renderer.callMethod('createTemplateAnchor', [
              this._getParentRenderNode(parent),
              this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)
          ]))
              .toStmt());
          const renderNode = THIS_EXPR.prop(fieldName);
          const templateVariableBindings = ast.variables.map(varAst => [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name]);
          const directives = ast.directives.map(directiveAst => directiveAst.directive);
          const compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references);
          this.view.nodes.push(compileElement);
          this.nestedViewCount++;
          const embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, this.view.animations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings, this.targetDependencies);
          this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
          compileElement.beforeChildren();
          this._addRootNodeAndProject(compileElement);
          compileElement.afterChildren(0);
          return null;
      }
      visitAttr(ast, ctx) { return null; }
      visitDirective(ast, ctx) { return null; }
      visitEvent(ast, eventTargetAndNames) {
          return null;
      }
      visitReference(ast, ctx) { return null; }
      visitVariable(ast, ctx) { return null; }
      visitDirectiveProperty(ast, context) { return null; }
      visitElementProperty(ast, context) { return null; }
  }
  /**
   * Walks up the nodes while the direct parent is a container.
   *
   * Returns the outer container or the node itself when it is not a direct child of a container.
   *
   * @internal
   */
  function _getOuterContainerOrSelf(node) {
      const view = node.view;
      while (_isNgContainer(node.parent, view)) {
          node = node.parent;
      }
      return node;
  }
  /**
   * Walks up the nodes while they are container and returns the first parent which is not.
   *
   * Returns the parent of the outer container or the node itself when it is not a container.
   *
   * @internal
   */
  function _getOuterContainerParentOrSelf(el) {
      const view = el.view;
      while (_isNgContainer(el, view)) {
          el = el.parent;
      }
      return el;
  }
  function _isNgContainer(node, view) {
      return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG &&
          node.view === view;
  }
  function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
      const mapResult = {};
      Object.keys(declaredHtmlAttrs).forEach(key => { mapResult[key] = declaredHtmlAttrs[key]; });
      directives.forEach(directiveMeta => {
          Object.keys(directiveMeta.hostAttributes).forEach(name => {
              const value = directiveMeta.hostAttributes[name];
              const prevValue = mapResult[name];
              mapResult[name] = isPresent$1(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
          });
      });
      const arrResult = [];
      // Note: We need to sort to get a defined output order
      // for tests and for caching generated artifacts...
      Object.keys(mapResult).sort().forEach((attrName) => { arrResult.push(attrName, mapResult[attrName]); });
      return arrResult;
  }
  function _readHtmlAttrs(attrs) {
      const htmlAttrs = {};
      attrs.forEach((ast) => { htmlAttrs[ast.name] = ast.value; });
      return htmlAttrs;
  }
  function mergeAttributeValue(attrName, attrValue1, attrValue2) {
      if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
          return `${attrValue1} ${attrValue2}`;
      }
      else {
          return attrValue2;
      }
  }
  function createViewTopLevelStmts(view, targetStatements) {
      let nodeDebugInfosVar = NULL_EXPR;
      if (view.genConfig.genDebugInfo) {
          nodeDebugInfosVar = variable(`nodeDebugInfos_${identifierName(view.component.type)}${view.viewIndex}`); // fix
          // highlighting:
          // `
          targetStatements.push(nodeDebugInfosVar
              .set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(importType(createIdentifier(Identifiers.StaticNodeDebugInfo)), [TypeModifier.Const])))
              .toDeclStmt(null, [StmtModifier.Final]));
      }
      const renderCompTypeVar = variable(view.rendererTypeName); // fix highlighting: `
      if (view.viewIndex === 0) {
          let templateUrlInfo;
          if (view.component.template.templateUrl == identifierModuleUrl(view.component.type)) {
              templateUrlInfo =
                  `${identifierModuleUrl(view.component.type)} class ${identifierName(view.component.type)} - inline template`;
          }
          else {
              templateUrlInfo = view.component.template.templateUrl;
          }
          targetStatements.push(renderCompTypeVar
              .set(importExpr(createIdentifier(Identifiers.createRenderComponentType)).callFn([
              view.genConfig.genDebugInfo ? literal(templateUrlInfo) : literal(''),
              literal(view.component.template.ngContentSelectors.length),
              ViewEncapsulationEnum.fromValue(view.component.template.encapsulation),
              view.styles,
              literalMap(view.animations.map((entry) => [entry.name, entry.fnExp]), null, true),
          ]))
              .toDeclStmt(importType(createIdentifier(Identifiers.RenderComponentType))));
      }
      const viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
      targetStatements.push(viewClass);
  }
  function createStaticNodeDebugInfo(node) {
      const compileElement = node instanceof CompileElement ? node : null;
      let providerTokens = [];
      let componentToken = NULL_EXPR;
      const varTokenEntries = [];
      if (isPresent$1(compileElement)) {
          providerTokens =
              compileElement.getProviderTokens().map((token) => createDiTokenExpression(token));
          if (isPresent$1(compileElement.component)) {
              componentToken = createDiTokenExpression(identifierToken(compileElement.component.type));
          }
          Object.keys(compileElement.referenceTokens).forEach(varName => {
              const token = compileElement.referenceTokens[varName];
              varTokenEntries.push([varName, isPresent$1(token) ? createDiTokenExpression(token) : NULL_EXPR]);
          });
      }
      return importExpr(createIdentifier(Identifiers.StaticNodeDebugInfo))
          .instantiate([
          literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])),
          componentToken,
          literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))
      ], importType(createIdentifier(Identifiers.StaticNodeDebugInfo), null, [TypeModifier.Const]));
  }
  function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
      const viewConstructorArgs = [
          new FnParam(ViewConstructorVars.viewUtils.name, importType(createIdentifier(Identifiers.ViewUtils))),
          new FnParam(ViewConstructorVars.parentView.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
          new FnParam(ViewConstructorVars.parentIndex.name, NUMBER_TYPE),
          new FnParam(ViewConstructorVars.parentElement.name, DYNAMIC_TYPE)
      ];
      const superConstructorArgs = [
          variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType),
          ViewConstructorVars.viewUtils, ViewConstructorVars.parentView, ViewConstructorVars.parentIndex,
          ViewConstructorVars.parentElement,
          ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))
      ];
      if (view.genConfig.genDebugInfo) {
          superConstructorArgs.push(nodeDebugInfosVar);
      }
      if (view.viewType === ViewType.EMBEDDED) {
          viewConstructorArgs.push(new FnParam('declaredViewContainer', importType(createIdentifier(Identifiers.ViewContainer))));
          superConstructorArgs.push(variable('declaredViewContainer'));
      }
      const viewMethods = [
          new ClassMethod('createInternal', [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(createIdentifier(Identifiers.ComponentRef), [DYNAMIC_TYPE])),
          new ClassMethod('injectorGetInternal', [
              new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE),
              // Note: Can't use o.INT_TYPE here as the method in AppView uses number
              new FnParam(InjectMethodVars$1.requestNodeIndex.name, NUMBER_TYPE),
              new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE)
          ], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars$1.notFoundResult), DYNAMIC_TYPE),
          new ClassMethod('detectChangesInternal', [], generateDetectChangesMethod(view)),
          new ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()),
          new ClassMethod('destroyInternal', [], generateDestroyMethod(view)),
          new ClassMethod('detachInternal', [], view.detachMethod.finish()),
          generateVisitRootNodesMethod(view), generateVisitProjectableNodesMethod(view),
          generateCreateEmbeddedViewsMethod(view)
      ].filter((method) => method.body.length > 0);
      const superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView;
      const viewClass = createClassStmt({
          name: view.className,
          parent: importExpr(createIdentifier(superClass), [getContextType(view)]),
          parentArgs: superConstructorArgs,
          ctorParams: viewConstructorArgs,
          builders: [{ methods: viewMethods }, view]
      });
      return viewClass;
  }
  function generateDestroyMethod(view) {
      const stmts = [];
      view.viewContainers.forEach((viewContainer) => {
          stmts.push(viewContainer.callMethod('destroyNestedViews', []).toStmt());
      });
      view.viewChildren.forEach((viewChild) => { stmts.push(viewChild.callMethod('destroy', []).toStmt()); });
      stmts.push(...view.destroyMethod.finish());
      return stmts;
  }
  function generateCreateMethod(view) {
      let parentRenderNodeExpr = NULL_EXPR;
      let parentRenderNodeStmts = [];
      if (view.viewType === ViewType.COMPONENT) {
          parentRenderNodeExpr =
              ViewProperties.renderer.callMethod('createViewRoot', [THIS_EXPR.prop('parentElement')]);
          parentRenderNodeStmts =
              [parentRenderNodeVar.set(parentRenderNodeExpr)
                      .toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])];
      }
      let resultExpr;
      if (view.viewType === ViewType.HOST) {
          const hostEl = view.nodes[0];
          resultExpr =
              importExpr(createIdentifier(Identifiers.ComponentRef_), [DYNAMIC_TYPE]).instantiate([
                  literal(hostEl.nodeIndex), THIS_EXPR, hostEl.renderNode, hostEl.getComponent()
              ]);
      }
      else {
          resultExpr = NULL_EXPR;
      }
      const allNodesExpr = ViewProperties.renderer.cast(DYNAMIC_TYPE)
          .prop('directRenderer')
          .conditional(NULL_EXPR, literalArr(view.nodes.map(node => node.renderNode)));
      return parentRenderNodeStmts.concat(view.createMethod.finish(), [
          THIS_EXPR
              .callMethod('init', [
              view.lastRenderNode,
              allNodesExpr,
              view.disposables.length ? literalArr(view.disposables) : NULL_EXPR,
          ])
              .toStmt(),
          new ReturnStatement(resultExpr)
      ]);
  }
  function generateDetectChangesMethod(view) {
      const stmts = [];
      if (view.animationBindingsMethod.isEmpty() && view.detectChangesInInputsMethod.isEmpty() &&
          view.updateContentQueriesMethod.isEmpty() &&
          view.afterContentLifecycleCallbacksMethod.isEmpty() &&
          view.detectChangesRenderPropertiesMethod.isEmpty() &&
          view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty() &&
          view.viewContainers.length === 0 && view.viewChildren.length === 0) {
          return stmts;
      }
      stmts.push(...view.animationBindingsMethod.finish());
      stmts.push(...view.detectChangesInInputsMethod.finish());
      view.viewContainers.forEach((viewContainer) => {
          stmts.push(viewContainer.callMethod('detectChangesInNestedViews', [ViewProperties.throwOnChange])
              .toStmt());
      });
      const afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
      if (afterContentStmts.length > 0) {
          stmts.push(new IfStmt(not(ViewProperties.throwOnChange), afterContentStmts));
      }
      stmts.push(...view.detectChangesRenderPropertiesMethod.finish());
      view.viewChildren.forEach((viewChild) => {
          stmts.push(viewChild.callMethod('internalDetectChanges', [ViewProperties.throwOnChange]).toStmt());
      });
      const afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
      if (afterViewStmts.length > 0) {
          stmts.push(new IfStmt(not(ViewProperties.throwOnChange), afterViewStmts));
      }
      const varStmts = legacyCreateSharedBindingVariablesIfNeeded(stmts);
      return varStmts.concat(stmts);
  }
  function addReturnValuefNotEmpty(statements, value) {
      if (statements.length > 0) {
          return statements.concat([new ReturnStatement(value)]);
      }
      else {
          return statements;
      }
  }
  function getContextType(view) {
      if (view.viewType === ViewType.COMPONENT) {
          return importType(view.component.type);
      }
      return DYNAMIC_TYPE;
  }
  function getChangeDetectionMode(view) {
      let mode;
      if (view.viewType === ViewType.COMPONENT) {
          mode = isDefaultChangeDetectionStrategy(view.component.changeDetection) ?
              ChangeDetectorStatus.CheckAlways :
              ChangeDetectorStatus.CheckOnce;
      }
      else {
          mode = ChangeDetectorStatus.CheckAlways;
      }
      return mode;
  }
  function generateVisitRootNodesMethod(view) {
      const cbVar = variable('cb');
      const ctxVar = variable('ctx');
      const stmts = generateVisitNodesStmts(view.rootNodes, cbVar, ctxVar);
      return new ClassMethod('visitRootNodesInternal', [new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)], stmts);
  }
  function generateVisitProjectableNodesMethod(view) {
      const nodeIndexVar = variable('nodeIndex');
      const ngContentIndexVar = variable('ngContentIndex');
      const cbVar = variable('cb');
      const ctxVar = variable('ctx');
      const stmts = [];
      view.nodes.forEach((node) => {
          if (node instanceof CompileElement && node.component) {
              node.contentNodesByNgContentIndex.forEach((projectedNodes, ngContentIndex) => {
                  stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex))
                      .and(ngContentIndexVar.equals(literal(ngContentIndex))), generateVisitNodesStmts(projectedNodes, cbVar, ctxVar)));
              });
          }
      });
      return new ClassMethod('visitProjectableNodesInternal', [
          new FnParam(nodeIndexVar.name, NUMBER_TYPE),
          new FnParam(ngContentIndexVar.name, NUMBER_TYPE),
          new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)
      ], stmts);
  }
  function generateVisitNodesStmts(nodes, cb, ctx) {
      const stmts = [];
      nodes.forEach((node) => {
          switch (node.type) {
              case CompileViewRootNodeType.Node:
                  stmts.push(cb.callFn([node.expr, ctx]).toStmt());
                  break;
              case CompileViewRootNodeType.ViewContainer:
                  stmts.push(cb.callFn([node.expr.prop('nativeElement'), ctx]).toStmt());
                  stmts.push(node.expr.callMethod('visitNestedViewRootNodes', [cb, ctx]).toStmt());
                  break;
              case CompileViewRootNodeType.NgContent:
                  stmts.push(THIS_EXPR.callMethod('visitProjectedNodes', [literal(node.ngContentIndex), cb, ctx])
                      .toStmt());
                  break;
          }
      });
      return stmts;
  }
  function generateCreateEmbeddedViewsMethod(view) {
      const nodeIndexVar = variable('nodeIndex');
      const stmts = [];
      view.nodes.forEach((node) => {
          if (node instanceof CompileElement) {
              if (node.embeddedView) {
                  stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)), [new ReturnStatement(node.embeddedView.classExpr.instantiate([
                          ViewProperties.viewUtils, THIS_EXPR, literal(node.nodeIndex), node.renderNode,
                          node.viewContainer
                      ]))]));
              }
          }
      });
      if (stmts.length > 0) {
          stmts.push(new ReturnStatement(NULL_EXPR));
      }
      return new ClassMethod('createEmbeddedViewInternal', [new FnParam(nodeIndexVar.name, NUMBER_TYPE)], stmts, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE]));
  }

  class ViewCompileResult {
      constructor(statements, viewClassVar, rendererTypeVar, dependencies) {
          this.statements = statements;
          this.viewClassVar = viewClassVar;
          this.rendererTypeVar = rendererTypeVar;
          this.dependencies = dependencies;
      }
  }
  class ViewCompiler {
      constructor(_genConfig, _schemaRegistry) {
          this._genConfig = _genConfig;
          this._schemaRegistry = _schemaRegistry;
      }
      compileComponent(component, template, styles, pipes, compiledAnimations) {
          const dependencies = [];
          const view = new CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, CompileElement.createNull(), [], dependencies);
          const statements = [];
          buildView(view, template, dependencies);
          // Need to separate binding from creation to be able to refer to
          // variables that have been declared after usage.
          bindView(view, template, this._schemaRegistry);
          finishView(view, statements);
          return new ViewCompileResult(statements, view.classExpr.name, view.rendererTypeName, dependencies);
      }
  }
  ViewCompiler.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  ViewCompiler.ctorParameters = () => [
      { type: CompilerConfig, },
      { type: ElementSchemaRegistry, },
  ];

  const CLASS_ATTR$2 = 'class';
  const STYLE_ATTR$1 = 'style';
  const IMPLICIT_TEMPLATE_VAR$1 = '\$implicit';
  const NG_CONTAINER_TAG$1 = 'ng-container';
  class ViewCompilerNext extends ViewCompiler {
      constructor(_genConfigNext, _schemaRegistryNext) {
          super(_genConfigNext, _schemaRegistryNext);
          this._genConfigNext = _genConfigNext;
          this._schemaRegistryNext = _schemaRegistryNext;
      }
      compileComponent(component, template, styles, usedPipes, compiledAnimations) {
          let embeddedViewCount = 0;
          const staticQueryIds = findStaticQueryIds(template);
          const statements = [];
          const renderComponentVar = variable(rendererTypeName(component.type.reference));
          statements.push(renderComponentVar
              .set(importExpr(createIdentifier(Identifiers.createRendererTypeV2)).callFn([
              new LiteralMapExpr([
                  new LiteralMapEntry('encapsulation', literal(component.template.encapsulation)),
                  new LiteralMapEntry('styles', styles),
                  new LiteralMapEntry('data', literalMap([
                      ['animation', convertValueToOutputAst(component.template.animations)]
                  ])),
              ])
          ]))
              .toDeclStmt(importType(createIdentifier(Identifiers.RendererTypeV2)), [StmtModifier.Final]));
          const viewBuilderFactory = (parent) => {
              const embeddedViewIndex = embeddedViewCount++;
              return new ViewBuilder(parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory);
          };
          const visitor = viewBuilderFactory(null);
          visitor.visitAll([], template);
          statements.push(...visitor.build());
          return new ViewCompileResult(statements, visitor.viewName, renderComponentVar.name, []);
      }
  }
  ViewCompilerNext.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  ViewCompilerNext.ctorParameters = () => [
      { type: CompilerConfig, },
      { type: ElementSchemaRegistry, },
  ];
  const VIEW_VAR$1 = variable('view');
  const CHECK_VAR = variable('check');
  const COMP_VAR = variable('comp');
  const NODE_INDEX_VAR = variable('nodeIndex');
  const EVENT_NAME_VAR$1 = variable('eventName');
  const ALLOW_DEFAULT_VAR = variable(`allowDefault`);
  class ViewBuilder {
      constructor(parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory) {
          this.parent = parent;
          this.component = component;
          this.embeddedViewIndex = embeddedViewIndex;
          this.usedPipes = usedPipes;
          this.staticQueryIds = staticQueryIds;
          this.viewBuilderFactory = viewBuilderFactory;
          this.nodeDefs = [];
          this.purePipeNodeIndices = Object.create(null);
          // Need Object.create so that we don't have builtin values...
          this.refNodeIndices = Object.create(null);
          this.variables = [];
          this.children = [];
          this.updateDirectivesExpressions = [];
          this.updateRendererExpressions = [];
          // TODO(tbosch): The old view compiler used to use an `any` type
          // for the context in any embedded view. We keep this behaivor for now
          // to be able to introduce the new view compiler without too many errors.
          this.compType = this.embeddedViewIndex > 0 ? DYNAMIC_TYPE : importType(this.component.type);
      }
      get viewName() {
          return viewClassName(this.component.type.reference, this.embeddedViewIndex);
      }
      visitAll(variables, astNodes) {
          this.variables = variables;
          // create the pipes for the pure pipes immediately, so that we know their indices.
          if (!this.parent) {
              this.usedPipes.forEach((pipe) => {
                  if (pipe.pure) {
                      this.purePipeNodeIndices[pipe.name] = this._createPipe(pipe);
                  }
              });
          }
          if (!this.parent) {
              const queryIds = staticViewQueryIds(this.staticQueryIds);
              this.component.viewQueries.forEach((query, queryIndex) => {
                  // Note: queries start with id 1 so we can use the number in a Bloom filter!
                  const queryId = queryIndex + 1;
                  const bindingType = query.first ? QueryBindingType.First : QueryBindingType.All;
                  let flags = NodeFlags.HasViewQuery;
                  if (queryIds.staticQueryIds.has(queryId)) {
                      flags |= NodeFlags.HasStaticQuery;
                  }
                  else {
                      flags |= NodeFlags.HasDynamicQuery;
                  }
                  this.nodeDefs.push(() => importExpr(createIdentifier(Identifiers.queryDef)).callFn([
                      literal(flags), literal(queryId),
                      new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType))])
                  ]));
              });
          }
          templateVisitAll(this, astNodes);
          if (astNodes.length === 0 ||
              (this.parent && needsAdditionalRootNode(astNodes[astNodes.length - 1]))) {
              // if the view is empty, or an embedded view has a view container as last root nde,
              // create an additional root node.
              this.nodeDefs.push(() => importExpr(createIdentifier(Identifiers.anchorDef)).callFn([
                  literal(NodeFlags.None), NULL_EXPR, NULL_EXPR, literal(0)
              ]));
          }
      }
      build(targetStatements = []) {
          this.children.forEach((child) => child.build(targetStatements));
          const updateDirectivesFn = this._createUpdateFn(this.updateDirectivesExpressions);
          const updateRendererFn = this._createUpdateFn(this.updateRendererExpressions);
          let viewFlags = ViewFlags.None;
          if (!this.parent && this.component.changeDetection === ChangeDetectionStrategy.OnPush) {
              viewFlags |= ViewFlags.OnPush;
          }
          const viewFactory = new DeclareFunctionStmt(this.viewName, [], [new ReturnStatement(importExpr(createIdentifier(Identifiers.viewDef)).callFn([
                  literal(viewFlags),
                  literalArr(this.nodeDefs.map(nd => nd())),
                  updateDirectivesFn,
                  updateRendererFn,
              ]))], importType(createIdentifier(Identifiers.ViewDefinition)));
          targetStatements.push(viewFactory);
          return targetStatements;
      }
      _createUpdateFn(expressions) {
          const updateStmts = [];
          let updateBindingCount = 0;
          expressions.forEach(({ expressions, nodeIndex }) => {
              const exprs = expressions.map(({ context, value }) => {
                  const bindingId = `${updateBindingCount++}`;
                  const nameResolver = context === COMP_VAR ? this : null;
                  const { stmts, currValExpr } = convertPropertyBinding(nameResolver, context, value, bindingId);
                  updateStmts.push(...stmts);
                  return currValExpr;
              });
              updateStmts.push(callCheckStmt(nodeIndex, exprs).toStmt());
          });
          let updateFn;
          if (updateStmts.length > 0) {
              const preStmts = [];
              if (!this.component.isHost) {
                  preStmts.push(COMP_VAR.set(VIEW_VAR$1.prop('component')).toDeclStmt(this.compType));
              }
              updateFn = fn([
                  new FnParam(CHECK_VAR.name, INFERRED_TYPE),
                  new FnParam(VIEW_VAR$1.name, INFERRED_TYPE)
              ], [...preStmts, ...updateStmts], INFERRED_TYPE);
          }
          else {
              updateFn = NULL_EXPR;
          }
          return updateFn;
      }
      visitNgContent(ast, context) {
          // ngContentDef(ngContentIndex: number, index: number): NodeDef;
          this.nodeDefs.push(() => importExpr(createIdentifier(Identifiers.ngContentDef)).callFn([
              literal(ast.ngContentIndex), literal(ast.index)
          ]));
      }
      visitText(ast, context) {
          // textDef(ngContentIndex: number, constants: string[]): NodeDef;
          this.nodeDefs.push(() => importExpr(createIdentifier(Identifiers.textDef)).callFn([
              literal(ast.ngContentIndex), literalArr([literal(ast.value)])
          ]));
      }
      visitBoundText(ast, context) {
          const nodeIndex = this.nodeDefs.length;
          // reserve the space in the nodeDefs array
          this.nodeDefs.push(null);
          const astWithSource = ast.value;
          const inter = astWithSource.ast;
          this._addUpdateExpressions(nodeIndex, inter.expressions.map((expr) => { return { context: COMP_VAR, value: expr }; }), this.updateRendererExpressions);
          // textDef(ngContentIndex: number, constants: string[]): NodeDef;
          this.nodeDefs[nodeIndex] = () => importExpr(createIdentifier(Identifiers.textDef)).callFn([
              literal(ast.ngContentIndex), literalArr(inter.strings.map(s => literal(s)))
          ]);
      }
      visitEmbeddedTemplate(ast, context) {
          const nodeIndex = this.nodeDefs.length;
          // reserve the space in the nodeDefs array
          this.nodeDefs.push(null);
          const { flags, queryMatchesExpr, hostEvents } = this._visitElementOrTemplate(nodeIndex, ast);
          const childVisitor = this.viewBuilderFactory(this);
          this.children.push(childVisitor);
          childVisitor.visitAll(ast.variables, ast.children);
          const childCount = this.nodeDefs.length - nodeIndex - 1;
          // anchorDef(
          //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,
          //   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:
          //   ViewDefinitionFactory): NodeDef;
          const nodeDef = () => importExpr(createIdentifier(Identifiers.anchorDef)).callFn([
              literal(flags),
              queryMatchesExpr,
              literal(ast.ngContentIndex),
              literal(childCount),
              this._createElementHandleEventFn(nodeIndex, hostEvents),
              variable(childVisitor.viewName),
          ]);
          this.nodeDefs[nodeIndex] = nodeDef;
      }
      visitElement(ast, context) {
          const nodeIndex = this.nodeDefs.length;
          // reserve the space in the nodeDefs array so we can add children
          this.nodeDefs.push(null);
          let elName = ast.name;
          if (ast.name === NG_CONTAINER_TAG$1) {
              // Using a null element name creates an anchor.
              elName = null;
          }
          const { flags, usedEvents, queryMatchesExpr, hostBindings, hostEvents } = this._visitElementOrTemplate(nodeIndex, ast);
          let inputDefs = [];
          let outputDefs = [];
          if (elName) {
              ast.inputs.forEach((inputAst) => hostBindings.push({ context: COMP_VAR, value: inputAst.value }));
              if (hostBindings.length) {
                  this._addUpdateExpressions(nodeIndex, hostBindings, this.updateRendererExpressions);
              }
              // Note: inputDefs have to be in the same order as hostBindings:
              // - first the entries from the directives, then the ones from the element.
              ast.directives.forEach((dirAst, dirIndex) => inputDefs.push(...elementBindingDefs(dirAst.hostProperties, dirAst)));
              inputDefs.push(...elementBindingDefs(ast.inputs, null));
              outputDefs = usedEvents.map(([target, eventName]) => literalArr([literal(target), literal(eventName)]));
          }
          templateVisitAll(this, ast.children);
          const childCount = this.nodeDefs.length - nodeIndex - 1;
          const compAst = ast.directives.find(dirAst => dirAst.directive.isComponent);
          let compRendererType = NULL_EXPR;
          let compView = NULL_EXPR;
          if (compAst) {
              compView = importExpr({ reference: compAst.directive.componentViewType });
              compRendererType = importExpr({ reference: compAst.directive.rendererType });
          }
          // elementDef(
          //   flags: NodeFlags, matchedQueriesDsl: [string | number, QueryValueType][],
          //   ngContentIndex: number, childCount: number, namespaceAndName: string,
          //   fixedAttrs: [string, string][] = [],
          //   bindings?:
          //       ([BindingType.ElementClass, string] | [BindingType.ElementStyle, string, string] |
          //        [BindingType.ElementAttribute | BindingType.ElementProperty |
          //        BindingType.DirectiveHostProperty, string, SecurityContext])[],
          //   outputs?: ([OutputType.ElementOutput | OutputType.DirectiveHostOutput, string, string])[],
          //   handleEvent?: ElementHandleEventFn,
          //   componentView?: () => ViewDefinition, componentRendererType?: RendererTypeV2): NodeDef;
          const nodeDef = () => importExpr(createIdentifier(Identifiers.elementDef)).callFn([
              literal(flags), queryMatchesExpr, literal(ast.ngContentIndex), literal(childCount),
              literal(elName), elName ? fixedAttrsDef(ast) : NULL_EXPR,
              inputDefs.length ? literalArr(inputDefs) : NULL_EXPR,
              outputDefs.length ? literalArr(outputDefs) : NULL_EXPR,
              this._createElementHandleEventFn(nodeIndex, hostEvents), compView, compRendererType
          ]);
          this.nodeDefs[nodeIndex] = nodeDef;
      }
      _visitElementOrTemplate(nodeIndex, ast) {
          let flags = NodeFlags.None;
          if (ast.hasViewContainer) {
              flags |= NodeFlags.HasEmbeddedViews;
          }
          const usedEvents = new Map();
          ast.outputs.forEach((event) => {
              const { name, target } = elementEventNameAndTarget(event, null);
              usedEvents.set(elementEventFullName(target, name), [target, name]);
          });
          ast.directives.forEach((dirAst) => {
              dirAst.hostEvents.forEach((event) => {
                  const { name, target } = elementEventNameAndTarget(event, dirAst);
                  usedEvents.set(elementEventFullName(target, name), [target, name]);
              });
          });
          const hostBindings = [];
          const hostEvents = [];
          const componentFactoryResolverProvider = createComponentFactoryResolver(ast.directives);
          if (componentFactoryResolverProvider) {
              this._visitProvider(componentFactoryResolverProvider, ast.queryMatches);
          }
          ast.providers.forEach((providerAst, providerIndex) => {
              let dirAst;
              let dirIndex;
              ast.directives.forEach((localDirAst, i) => {
                  if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {
                      dirAst = localDirAst;
                      dirIndex = i;
                  }
              });
              if (dirAst) {
                  const { hostBindings: dirHostBindings, hostEvents: dirHostEvents } = this._visitDirective(providerAst, dirAst, dirIndex, nodeIndex, ast.references, ast.queryMatches, usedEvents, this.staticQueryIds.get(ast));
                  hostBindings.push(...dirHostBindings);
                  hostEvents.push(...dirHostEvents);
              }
              else {
                  this._visitProvider(providerAst, ast.queryMatches);
              }
          });
          let queryMatchExprs = [];
          ast.queryMatches.forEach((match) => {
              let valueType;
              if (tokenReference(match.value) === resolveIdentifier(Identifiers.ElementRef)) {
                  valueType = QueryValueType.ElementRef;
              }
              else if (tokenReference(match.value) === resolveIdentifier(Identifiers.ViewContainerRef)) {
                  valueType = QueryValueType.ViewContainerRef;
              }
              else if (tokenReference(match.value) === resolveIdentifier(Identifiers.TemplateRef)) {
                  valueType = QueryValueType.TemplateRef;
              }
              if (valueType != null) {
                  queryMatchExprs.push(literalArr([literal(match.queryId), literal(valueType)]));
              }
          });
          ast.references.forEach((ref) => {
              let valueType;
              if (!ref.value) {
                  valueType = QueryValueType.RenderElement;
              }
              else if (tokenReference(ref.value) === resolveIdentifier(Identifiers.TemplateRef)) {
                  valueType = QueryValueType.TemplateRef;
              }
              if (valueType != null) {
                  this.refNodeIndices[ref.name] = nodeIndex;
                  queryMatchExprs.push(literalArr([literal(ref.name), literal(valueType)]));
              }
          });
          ast.outputs.forEach((outputAst) => {
              hostEvents.push({ context: COMP_VAR, eventAst: outputAst, dirAst: null });
          });
          return {
              flags,
              usedEvents: Array.from(usedEvents.values()),
              queryMatchesExpr: queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,
              hostBindings,
              hostEvents
          };
      }
      _visitDirective(providerAst, dirAst, directiveIndex, elementNodeIndex, refs, queryMatches, usedEvents, queryIds) {
          const nodeIndex = this.nodeDefs.length;
          // reserve the space in the nodeDefs array so we can add children
          this.nodeDefs.push(null);
          dirAst.directive.queries.forEach((query, queryIndex) => {
              let flags = NodeFlags.HasContentQuery;
              const queryId = dirAst.contentQueryStartId + queryIndex;
              // Note: We only make queries static that query for a single item.
              // This is because of backwards compatibility with the old view compiler...
              if (queryIds.staticQueryIds.has(queryId) && query.first) {
                  flags |= NodeFlags.HasStaticQuery;
              }
              else {
                  flags |= NodeFlags.HasDynamicQuery;
              }
              const bindingType = query.first ? QueryBindingType.First : QueryBindingType.All;
              this.nodeDefs.push(() => importExpr(createIdentifier(Identifiers.queryDef)).callFn([
                  literal(flags), literal(queryId),
                  new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType))])
              ]));
          });
          // Note: the operation below might also create new nodeDefs,
          // but we don't want them to be a child of a directive,
          // as they might be a provider/pipe on their own.
          // I.e. we only allow queries as children of directives nodes.
          const childCount = this.nodeDefs.length - nodeIndex - 1;
          let { flags, queryMatchExprs, providerExpr, providerType, depsExpr } = this._visitProviderOrDirective(providerAst, queryMatches);
          refs.forEach((ref) => {
              if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {
                  this.refNodeIndices[ref.name] = nodeIndex;
                  queryMatchExprs.push(literalArr([literal(ref.name), literal(QueryValueType.Provider)]));
              }
          });
          if (dirAst.directive.isComponent) {
              flags |= NodeFlags.IsComponent;
          }
          const inputDefs = dirAst.inputs.map((inputAst, inputIndex) => {
              const mapValue = literalArr([literal(inputIndex), literal(inputAst.directiveName)]);
              // Note: it's important to not quote the key so that we can capture renames by minifiers!
              return new LiteralMapEntry(inputAst.directiveName, mapValue, false);
          });
          const outputDefs = [];
          const dirMeta = dirAst.directive;
          Object.keys(dirMeta.outputs).forEach((propName) => {
              const eventName = dirMeta.outputs[propName];
              if (usedEvents.has(eventName)) {
                  // Note: it's important to not quote the key so that we can capture renames by minifiers!
                  outputDefs.push(new LiteralMapEntry(propName, literal(eventName), false));
              }
          });
          if (dirAst.inputs.length || (flags & (NodeFlags.DoCheck | NodeFlags.OnInit)) > 0) {
              this._addUpdateExpressions(nodeIndex, dirAst.inputs.map((input) => { return { context: COMP_VAR, value: input.value }; }), this.updateDirectivesExpressions);
          }
          const dirContextExpr = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([
              VIEW_VAR$1, literal(nodeIndex)
          ]);
          const hostBindings = dirAst.hostProperties.map((hostBindingAst) => {
              return {
                  value: hostBindingAst.value.ast,
                  context: dirContextExpr,
              };
          });
          const hostEvents = dirAst.hostEvents.map((hostEventAst) => { return { context: dirContextExpr, eventAst: hostEventAst, dirAst }; });
          // directiveDef(
          //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], childCount: number, ctor:
          //   any,
          //   deps: ([DepFlags, any] | any)[], props?: {[name: string]: [number, string]},
          //   outputs?: {[name: string]: string}, component?: () => ViewDefinition): NodeDef;
          const nodeDef = () => importExpr(createIdentifier(Identifiers.directiveDef)).callFn([
              literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,
              literal(childCount), providerExpr, depsExpr,
              inputDefs.length ? new LiteralMapExpr(inputDefs) : NULL_EXPR,
              outputDefs.length ? new LiteralMapExpr(outputDefs) : NULL_EXPR
          ]);
          this.nodeDefs[nodeIndex] = nodeDef;
          return { hostBindings, hostEvents };
      }
      _visitProvider(providerAst, queryMatches) {
          const nodeIndex = this.nodeDefs.length;
          // reserve the space in the nodeDefs array so we can add children
          this.nodeDefs.push(null);
          const { flags, queryMatchExprs, providerExpr, providerType, depsExpr } = this._visitProviderOrDirective(providerAst, queryMatches);
          // providerDef(
          //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], type: ProviderType, token:
          //   any,
          //   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;
          const nodeDef = () => importExpr(createIdentifier(Identifiers.providerDef)).callFn([
              literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,
              literal(providerType), tokenExpr(providerAst.token), providerExpr, depsExpr
          ]);
          this.nodeDefs[nodeIndex] = nodeDef;
      }
      _visitProviderOrDirective(providerAst, queryMatches) {
          let flags = NodeFlags.None;
          if (!providerAst.eager) {
              flags |= NodeFlags.LazyProvider;
          }
          if (providerAst.providerType === ProviderAstType.PrivateService) {
              flags |= NodeFlags.PrivateProvider;
          }
          providerAst.lifecycleHooks.forEach((lifecycleHook) => {
              // for regular providers, we only support ngOnDestroy
              if (lifecycleHook === LifecycleHooks.OnDestroy ||
                  providerAst.providerType === ProviderAstType.Directive ||
                  providerAst.providerType === ProviderAstType.Component) {
                  flags |= lifecycleHookToNodeFlag(lifecycleHook);
              }
          });
          let queryMatchExprs = [];
          queryMatches.forEach((match) => {
              if (tokenReference(match.value) === tokenReference(providerAst.token)) {
                  queryMatchExprs.push(literalArr([literal(match.queryId), literal(QueryValueType.Provider)]));
              }
          });
          const { providerExpr, providerType, depsExpr } = providerDef(providerAst);
          return { flags, queryMatchExprs, providerExpr, providerType, depsExpr };
      }
      getLocal(name) {
          if (name == EventHandlerVars.event.name) {
              return EventHandlerVars.event;
          }
          let currViewExpr = VIEW_VAR$1;
          for (let currBuilder = this; currBuilder; currBuilder = currBuilder.parent, currViewExpr = currViewExpr.prop('parent')) {
              // check references
              const refNodeIndex = currBuilder.refNodeIndices[name];
              if (refNodeIndex != null) {
                  return importExpr(createIdentifier(Identifiers.nodeValue)).callFn([
                      currViewExpr, literal(refNodeIndex)
                  ]);
              }
              // check variables
              const varAst = currBuilder.variables.find((varAst) => varAst.name === name);
              if (varAst) {
                  const varValue = varAst.value || IMPLICIT_TEMPLATE_VAR$1;
                  return currViewExpr.prop('context').prop(varValue);
              }
          }
          return null;
      }
      createLiteralArrayConverter(argCount) {
          if (argCount === 0) {
              const valueExpr = importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));
              return () => valueExpr;
          }
          const nodeIndex = this.nodeDefs.length;
          // pureArrayDef(argCount: number): NodeDef;
          const nodeDef = () => importExpr(createIdentifier(Identifiers.pureArrayDef)).callFn([literal(argCount)]);
          this.nodeDefs.push(nodeDef);
          return (args) => callCheckStmt(nodeIndex, args);
      }
      createLiteralMapConverter(keys) {
          if (keys.length === 0) {
              const valueExpr = importExpr(createIdentifier(Identifiers.EMPTY_MAP));
              return () => valueExpr;
          }
          const nodeIndex = this.nodeDefs.length;
          // function pureObjectDef(propertyNames: string[]): NodeDef
          const nodeDef = () => importExpr(createIdentifier(Identifiers.pureObjectDef)).callFn([literalArr(keys.map(key => literal(key)))]);
          this.nodeDefs.push(nodeDef);
          return (args) => callCheckStmt(nodeIndex, args);
      }
      createPipeConverter(name, argCount) {
          const pipe = this._findPipe(name);
          if (pipe.pure) {
              const nodeIndex = this.nodeDefs.length;
              // function purePipeDef(argCount: number): NodeDef;
              const nodeDef = () => importExpr(createIdentifier(Identifiers.purePipeDef)).callFn([literal(argCount)]);
              this.nodeDefs.push(nodeDef);
              // find underlying pipe in the component view
              let compViewExpr = VIEW_VAR$1;
              let compBuilder = this;
              while (compBuilder.parent) {
                  compBuilder = compBuilder.parent;
                  compViewExpr = compViewExpr.prop('parent');
              }
              const pipeNodeIndex = compBuilder.purePipeNodeIndices[name];
              const pipeValueExpr = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([
                  compViewExpr, literal(pipeNodeIndex)
              ]);
              return (args) => callUnwrapValue(callCheckStmt(nodeIndex, [pipeValueExpr].concat(args)));
          }
          else {
              const nodeIndex = this._createPipe(pipe);
              const nodeValueExpr = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([
                  VIEW_VAR$1, literal(nodeIndex)
              ]);
              return (args) => callUnwrapValue(nodeValueExpr.callMethod('transform', args));
          }
      }
      _findPipe(name) {
          return this.usedPipes.find((pipeSummary) => pipeSummary.name === name);
      }
      _createPipe(pipe) {
          const nodeIndex = this.nodeDefs.length;
          let flags = NodeFlags.None;
          pipe.type.lifecycleHooks.forEach((lifecycleHook) => {
              // for pipes, we only support ngOnDestroy
              if (lifecycleHook === LifecycleHooks.OnDestroy) {
                  flags |= lifecycleHookToNodeFlag(lifecycleHook);
              }
          });
          const depExprs = pipe.type.diDeps.map(depDef);
          // function pipeDef(
          //   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef
          const nodeDef = () => importExpr(createIdentifier(Identifiers.pipeDef)).callFn([
              literal(flags), importExpr(pipe.type), literalArr(depExprs)
          ]);
          this.nodeDefs.push(nodeDef);
          return nodeIndex;
      }
      // Attention: This might create new nodeDefs (for pipes and literal arrays and literal maps)!
      _addUpdateExpressions(nodeIndex, expressions, target) {
          const transformedExpressions = expressions.map(({ context, value }) => {
              if (value instanceof ASTWithSource) {
                  value = value.ast;
              }
              return { context, value: convertPropertyBindingBuiltins(this, value) };
          });
          target.push({ nodeIndex, expressions: transformedExpressions });
      }
      _createElementHandleEventFn(nodeIndex, handlers) {
          const handleEventStmts = [];
          let handleEventBindingCount = 0;
          handlers.forEach(({ context, eventAst, dirAst }) => {
              const bindingId = `${handleEventBindingCount++}`;
              const nameResolver = context === COMP_VAR ? this : null;
              const expression = eventAst.handler instanceof ASTWithSource ? eventAst.handler.ast : eventAst.handler;
              const { stmts, allowDefault } = convertActionBinding(nameResolver, context, expression, bindingId);
              const trueStmts = stmts;
              if (allowDefault) {
                  trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());
              }
              const { target: eventTarget, name: eventName } = elementEventNameAndTarget(eventAst, dirAst);
              const fullEventName = elementEventFullName(eventTarget, eventName);
              handleEventStmts.push(new IfStmt(literal(fullEventName).identical(EVENT_NAME_VAR$1), trueStmts));
          });
          let handleEventFn;
          if (handleEventStmts.length > 0) {
              const preStmts = [ALLOW_DEFAULT_VAR.set(literal(true)).toDeclStmt(BOOL_TYPE)];
              if (!this.component.isHost) {
                  preStmts.push(COMP_VAR.set(VIEW_VAR$1.prop('component')).toDeclStmt(this.compType));
              }
              handleEventFn = fn([
                  new FnParam(VIEW_VAR$1.name, INFERRED_TYPE),
                  new FnParam(EVENT_NAME_VAR$1.name, INFERRED_TYPE),
                  new FnParam(EventHandlerVars.event.name, INFERRED_TYPE)
              ], [...preStmts, ...handleEventStmts, new ReturnStatement(ALLOW_DEFAULT_VAR)], INFERRED_TYPE);
          }
          else {
              handleEventFn = NULL_EXPR;
          }
          return handleEventFn;
      }
      visitDirective(ast, context) { }
      visitDirectiveProperty(ast, context) { }
      visitReference(ast, context) { }
      visitVariable(ast, context) { }
      visitEvent(ast, context) { }
      visitElementProperty(ast, context) { }
      visitAttr(ast, context) { }
  }
  function providerDef(providerAst) {
      return providerAst.multiProvider ? multiProviderDef(providerAst.providers) :
          singleProviderDef(providerAst.providers[0]);
  }
  function multiProviderDef(providers) {
      const allDepDefs = [];
      const allParams = [];
      const exprs = providers.map((provider, providerIndex) => {
          let expr;
          if (provider.useClass) {
              const depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);
              expr = importExpr(provider.useClass).instantiate(depExprs);
          }
          else if (provider.useFactory) {
              const depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);
              expr = importExpr(provider.useFactory).callFn(depExprs);
          }
          else if (provider.useExisting) {
              const depExprs = convertDeps(providerIndex, [{ token: provider.useExisting }]);
              expr = depExprs[0];
          }
          else {
              expr = convertValueToOutputAst(provider.useValue);
          }
          return expr;
      });
      const providerExpr = fn(allParams, [new ReturnStatement(literalArr(exprs))], INFERRED_TYPE);
      return { providerExpr, providerType: ProviderType.Factory, depsExpr: literalArr(allDepDefs) };
      function convertDeps(providerIndex, deps) {
          return deps.map((dep, depIndex) => {
              const paramName = `p${providerIndex}_${depIndex}`;
              allParams.push(new FnParam(paramName, DYNAMIC_TYPE));
              allDepDefs.push(depDef(dep));
              return variable(paramName);
          });
      }
  }
  function singleProviderDef(providerMeta) {
      let providerExpr;
      let providerType;
      let deps;
      if (providerMeta.useClass) {
          providerExpr = importExpr(providerMeta.useClass);
          providerType = ProviderType.Class;
          deps = providerMeta.deps || providerMeta.useClass.diDeps;
      }
      else if (providerMeta.useFactory) {
          providerExpr = importExpr(providerMeta.useFactory);
          providerType = ProviderType.Factory;
          deps = providerMeta.deps || providerMeta.useFactory.diDeps;
      }
      else if (providerMeta.useExisting) {
          providerExpr = NULL_EXPR;
          providerType = ProviderType.UseExisting;
          deps = [{ token: providerMeta.useExisting }];
      }
      else {
          providerExpr = convertValueToOutputAst(providerMeta.useValue);
          providerType = ProviderType.Value;
          deps = [];
      }
      const depsExpr = literalArr(deps.map(dep => depDef(dep)));
      return { providerExpr, providerType, depsExpr };
  }
  function tokenExpr(tokenMeta) {
      return tokenMeta.identifier ? importExpr(tokenMeta.identifier) : literal(tokenMeta.value);
  }
  function depDef(dep) {
      // Note: the following fields have already been normalized out by provider_analyzer:
      // - isAttribute, isSelf, isHost
      const expr = dep.isValue ? convertValueToOutputAst(dep.value) : tokenExpr(dep.token);
      let flags = DepFlags.None;
      if (dep.isSkipSelf) {
          flags |= DepFlags.SkipSelf;
      }
      if (dep.isOptional) {
          flags |= DepFlags.Optional;
      }
      if (dep.isValue) {
          flags |= DepFlags.Value;
      }
      return flags === DepFlags.None ? expr : literalArr([literal(flags), expr]);
  }
  function needsAdditionalRootNode(ast) {
      if (ast instanceof EmbeddedTemplateAst) {
          return ast.hasViewContainer;
      }
      if (ast instanceof ElementAst) {
          if (ast.name === NG_CONTAINER_TAG$1 && ast.children.length) {
              return needsAdditionalRootNode(ast.children[ast.children.length - 1]);
          }
          return ast.hasViewContainer;
      }
      return ast instanceof NgContentAst;
  }
  function lifecycleHookToNodeFlag(lifecycleHook) {
      let nodeFlag = NodeFlags.None;
      switch (lifecycleHook) {
          case LifecycleHooks.AfterContentChecked:
              nodeFlag = NodeFlags.AfterContentChecked;
              break;
          case LifecycleHooks.AfterContentInit:
              nodeFlag = NodeFlags.AfterContentInit;
              break;
          case LifecycleHooks.AfterViewChecked:
              nodeFlag = NodeFlags.AfterViewChecked;
              break;
          case LifecycleHooks.AfterViewInit:
              nodeFlag = NodeFlags.AfterViewInit;
              break;
          case LifecycleHooks.DoCheck:
              nodeFlag = NodeFlags.DoCheck;
              break;
          case LifecycleHooks.OnChanges:
              nodeFlag = NodeFlags.OnChanges;
              break;
          case LifecycleHooks.OnDestroy:
              nodeFlag = NodeFlags.OnDestroy;
              break;
          case LifecycleHooks.OnInit:
              nodeFlag = NodeFlags.OnInit;
              break;
      }
      return nodeFlag;
  }
  function elementBindingDefs(inputAsts, dirAst) {
      return inputAsts.map((inputAst) => {
          switch (inputAst.type) {
              case PropertyBindingType.Attribute:
                  return literalArr([
                      literal(BindingType.ElementAttribute), literal(inputAst.name),
                      literal(inputAst.securityContext)
                  ]);
              case PropertyBindingType.Property:
                  return literalArr([
                      literal(BindingType.ElementProperty), literal(inputAst.name),
                      literal(inputAst.securityContext)
                  ]);
              case PropertyBindingType.Animation:
                  const bindingType = dirAst && dirAst.directive.isComponent ?
                      BindingType.ComponentHostProperty :
                      BindingType.ElementProperty;
                  return literalArr([
                      literal(bindingType), literal('@' + inputAst.name),
                      literal(inputAst.securityContext)
                  ]);
              case PropertyBindingType.Class:
                  return literalArr([literal(BindingType.ElementClass), literal(inputAst.name)]);
              case PropertyBindingType.Style:
                  return literalArr([
                      literal(BindingType.ElementStyle), literal(inputAst.name), literal(inputAst.unit)
                  ]);
          }
      });
  }
  function fixedAttrsDef(elementAst) {
      const mapResult = Object.create(null);
      elementAst.attrs.forEach(attrAst => { mapResult[attrAst.name] = attrAst.value; });
      elementAst.directives.forEach(dirAst => {
          Object.keys(dirAst.directive.hostAttributes).forEach(name => {
              const value = dirAst.directive.hostAttributes[name];
              const prevValue = mapResult[name];
              mapResult[name] = prevValue != null ? mergeAttributeValue$1(name, prevValue, value) : value;
          });
      });
      const mapEntries = [];
      // Note: We need to sort to get a defined output order
      // for tests and for caching generated artifacts...
      return literalArr(Object.keys(mapResult).sort().map((attrName) => literalArr([literal(attrName), literal(mapResult[attrName])])));
  }
  function mergeAttributeValue$1(attrName, attrValue1, attrValue2) {
      if (attrName == CLASS_ATTR$2 || attrName == STYLE_ATTR$1) {
          return `${attrValue1} ${attrValue2}`;
      }
      else {
          return attrValue2;
      }
  }
  function callCheckStmt(nodeIndex, exprs) {
      if (exprs.length > 10) {
          return CHECK_VAR.callFn([VIEW_VAR$1, literal(nodeIndex), literal(ArgumentType.Dynamic), literalArr(exprs)]);
      }
      else {
          return CHECK_VAR.callFn([VIEW_VAR$1, literal(nodeIndex), literal(ArgumentType.Inline), ...exprs]);
      }
  }
  function callUnwrapValue(expr) {
      return importExpr(createIdentifier(Identifiers.unwrapValue)).callFn([expr]);
  }
  function findStaticQueryIds(nodes, result = new Map()) {
      nodes.forEach((node) => {
          const staticQueryIds = new Set();
          const dynamicQueryIds = new Set();
          let queryMatches;
          if (node instanceof ElementAst) {
              findStaticQueryIds(node.children, result);
              node.children.forEach((child) => {
                  const childData = result.get(child);
                  childData.staticQueryIds.forEach(queryId => staticQueryIds.add(queryId));
                  childData.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));
              });
              queryMatches = node.queryMatches;
          }
          else if (node instanceof EmbeddedTemplateAst) {
              findStaticQueryIds(node.children, result);
              node.children.forEach((child) => {
                  const childData = result.get(child);
                  childData.staticQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));
                  childData.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));
              });
              queryMatches = node.queryMatches;
          }
          if (queryMatches) {
              queryMatches.forEach((match) => staticQueryIds.add(match.queryId));
          }
          dynamicQueryIds.forEach(queryId => staticQueryIds.delete(queryId));
          result.set(node, { staticQueryIds, dynamicQueryIds });
      });
      return result;
  }
  function staticViewQueryIds(nodeStaticQueryIds) {
      const staticQueryIds = new Set();
      const dynamicQueryIds = new Set();
      Array.from(nodeStaticQueryIds.values()).forEach((entry) => {
          entry.staticQueryIds.forEach(queryId => staticQueryIds.add(queryId));
          entry.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));
      });
      dynamicQueryIds.forEach(queryId => staticQueryIds.delete(queryId));
      return { staticQueryIds, dynamicQueryIds };
  }
  function createComponentFactoryResolver(directives) {
      const componentDirMeta = directives.find(dirAst => dirAst.directive.isComponent);
      if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {
          const entryComponentFactories = componentDirMeta.directive.entryComponents.map((entryComponent) => importExpr({ reference: entryComponent.componentFactory }));
          const cfrExpr = importExpr(createIdentifier(Identifiers.CodegenComponentFactoryResolver))
              .instantiate([literalArr(entryComponentFactories)]);
          const token = createIdentifierToken(Identifiers.ComponentFactoryResolver);
          const classMeta = {
              diDeps: [
                  { isValue: true, value: literalArr(entryComponentFactories) },
                  { token: token, isSkipSelf: true, isOptional: true }
              ],
              lifecycleHooks: [],
              reference: resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)
          };
          return new ProviderAst(token, false, true, [{ token, multi: false, useClass: classMeta }], ProviderAstType.PrivateService, [], componentDirMeta.sourceSpan);
      }
      return null;
  }
  function elementEventNameAndTarget(eventAst, dirAst) {
      if (eventAst.isAnimation) {
          return {
              name: `@${eventAst.name}.${eventAst.phase}`,
              target: dirAst && dirAst.directive.isComponent ? 'component' : null
          };
      }
      else {
          return eventAst;
      }
  }

  class AnimationEntryCompileResult {
      constructor(name, statements, fnExp) {
          this.name = name;
          this.statements = statements;
          this.fnExp = fnExp;
      }
  }
  class AnimationCompiler {
      compile(factoryNamePrefix, parsedAnimations) {
          return parsedAnimations.map(entry => {
              const factoryName = `${factoryNamePrefix}_${entry.name}`;
              const visitor = new _AnimationBuilder(entry.name, factoryName);
              return visitor.build(entry);
          });
      }
  }
  const _ANIMATION_FACTORY_ELEMENT_VAR = variable('element');
  const _ANIMATION_DEFAULT_STATE_VAR = variable('defaultStateStyles');
  const _ANIMATION_FACTORY_VIEW_VAR = variable('view');
  const _ANIMATION_FACTORY_VIEW_CONTEXT = _ANIMATION_FACTORY_VIEW_VAR.prop('animationContext');
  const _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');
  const _ANIMATION_CURRENT_STATE_VAR = variable('currentState');
  const _ANIMATION_NEXT_STATE_VAR = variable('nextState');
  const _ANIMATION_PLAYER_VAR = variable('player');
  const _ANIMATION_TIME_VAR = variable('totalTime');
  const _ANIMATION_START_STATE_STYLES_VAR = variable('startStateStyles');
  const _ANIMATION_END_STATE_STYLES_VAR = variable('endStateStyles');
  const _ANIMATION_COLLECTED_STYLES = variable('collectedStyles');
  const _PREVIOUS_ANIMATION_PLAYERS = variable('previousPlayers');
  const _EMPTY_MAP = literalMap([]);
  const _EMPTY_ARRAY = literalArr([]);
  class _AnimationBuilder {
      constructor(animationName, factoryName) {
          this.animationName = animationName;
          this._fnVarName = factoryName + '_factory';
          this._statesMapVarName = factoryName + '_states';
          this._statesMapVar = variable(this._statesMapVarName);
      }
      visitAnimationStyles(ast, context) {
          const stylesArr = [];
          if (context.isExpectingFirstStyleStep) {
              stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);
              context.isExpectingFirstStyleStep = false;
          }
          ast.styles.forEach(entry => {
              const entries = Object.keys(entry).map((key) => [key, literal(entry[key])]);
              stylesArr.push(literalMap(entries, null, true));
          });
          return importExpr(createIdentifier(Identifiers.AnimationStyles)).instantiate([
              importExpr(createIdentifier(Identifiers.collectAndResolveStyles)).callFn([
                  _ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)
              ])
          ]);
      }
      visitAnimationKeyframe(ast, context) {
          return importExpr(createIdentifier(Identifiers.AnimationKeyframe)).instantiate([
              literal(ast.offset), ast.styles.visit(this, context)
          ]);
      }
      visitAnimationStep(ast, context) {
          if (context.endStateAnimateStep === ast) {
              return this._visitEndStateAnimation(ast, context);
          }
          const startingStylesExpr = ast.startingStyles.visit(this, context);
          const keyframeExpressions = ast.keyframes.map(keyframeEntry => keyframeEntry.visit(this, context));
          return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions), context);
      }
      /** @internal */
      _visitEndStateAnimation(ast, context) {
          const startingStylesExpr = ast.startingStyles.visit(this, context);
          const keyframeExpressions = ast.keyframes.map(keyframe => keyframe.visit(this, context));
          const keyframesExpr = importExpr(createIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([
              _ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR,
              literalArr(keyframeExpressions)
          ]);
          return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context);
      }
      /** @internal */
      _callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context) {
          let previousStylesValue = _EMPTY_ARRAY;
          if (context.isExpectingFirstAnimateStep) {
              previousStylesValue = _PREVIOUS_ANIMATION_PLAYERS;
              context.isExpectingFirstAnimateStep = false;
          }
          context.totalTransitionTime += ast.duration + ast.delay;
          return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [
              _ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration),
              literal(ast.delay), literal(ast.easing), previousStylesValue
          ]);
      }
      visitAnimationSequence(ast, context) {
          const playerExprs = ast.steps.map(step => step.visit(this, context));
          return importExpr(createIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([
              literalArr(playerExprs)
          ]);
      }
      visitAnimationGroup(ast, context) {
          const playerExprs = ast.steps.map(step => step.visit(this, context));
          return importExpr(createIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([
              literalArr(playerExprs)
          ]);
      }
      visitAnimationStateDeclaration(ast, context) {
          const flatStyles = {};
          _getStylesArray(ast).forEach(entry => { Object.keys(entry).forEach(key => { flatStyles[key] = entry[key]; }); });
          context.stateMap.registerState(ast.stateName, flatStyles);
      }
      visitAnimationStateTransition(ast, context) {
          const steps = ast.animation.steps;
          const lastStep = steps[steps.length - 1];
          if (_isEndStateAnimateStep(lastStep)) {
              context.endStateAnimateStep = lastStep;
          }
          context.totalTransitionTime = 0;
          context.isExpectingFirstStyleStep = true;
          context.isExpectingFirstAnimateStep = true;
          const stateChangePreconditions = [];
          ast.stateChanges.forEach(stateChange => {
              if (stateChange instanceof AnimationStateTransitionFnExpression) {
                  stateChangePreconditions.push(importExpr({ reference: stateChange.fn }).callFn([
                      _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR
                  ]));
              }
              else {
                  stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState)
                      .and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));
                  if (stateChange.fromState != ɵANY_STATE) {
                      context.stateMap.registerState(stateChange.fromState);
                  }
                  if (stateChange.toState != ɵANY_STATE) {
                      context.stateMap.registerState(stateChange.toState);
                  }
              }
          });
          const animationPlayerExpr = ast.animation.visit(this, context);
          const reducedStateChangesPrecondition = stateChangePreconditions.reduce((a, b) => a.or(b));
          const precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);
          const animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();
          const totalTimeStmt = _ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt();
          return new IfStmt(precondition, [animationStmt, totalTimeStmt]);
      }
      visitAnimationEntry(ast, context) {
          // visit each of the declarations first to build the context state map
          ast.stateDeclarations.forEach(def => def.visit(this, context));
          // this should always be defined even if the user overrides it
          context.stateMap.registerState(ɵDEFAULT_STATE, {});
          const statements = [];
          statements.push(_PREVIOUS_ANIMATION_PLAYERS
              .set(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('getAnimationPlayers', [
              _ANIMATION_FACTORY_ELEMENT_VAR,
              _ANIMATION_NEXT_STATE_VAR.equals(literal(ɵEMPTY_STATE))
                  .conditional(NULL_EXPR, literal(this.animationName))
          ]))
              .toDeclStmt());
          statements.push(_ANIMATION_COLLECTED_STYLES.set(_EMPTY_MAP).toDeclStmt());
          statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt());
          statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt());
          statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(ɵDEFAULT_STATE)))
              .toDeclStmt());
          statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR))
              .toDeclStmt());
          statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
          statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR))
              .toDeclStmt());
          statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
          const RENDER_STYLES_FN = importExpr(createIdentifier(Identifiers.renderStyles));
          ast.stateTransitions.forEach(transAst => statements.push(transAst.visit(this, context)));
          // this check ensures that the animation factory always returns a player
          // so that the onDone callback can be used for tracking
          statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR
                  .set(importExpr(createIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([]))
                  .toStmt()]));
          // once complete we want to apply the styles on the element
          // since the destination state's values should persist once
          // the animation sequence has completed.
          statements.push(_ANIMATION_PLAYER_VAR
              .callMethod('onDone', [fn([], [
                  _ANIMATION_PLAYER_VAR.callMethod('destroy', []).toStmt(),
                  RENDER_STYLES_FN
                      .callFn([
                      _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,
                      importExpr(createIdentifier(Identifiers.prepareFinalAnimationStyles))
                          .callFn([
                          _ANIMATION_START_STATE_STYLES_VAR,
                          _ANIMATION_END_STATE_STYLES_VAR
                      ])
                  ])
                      .toStmt()
              ])])
              .toStmt());
          statements.push(importExpr(createIdentifier(Identifiers.AnimationSequencePlayer))
              .instantiate([_PREVIOUS_ANIMATION_PLAYERS])
              .callMethod('destroy', [])
              .toStmt());
          // before we start any animation we want to clear out the starting
          // styles from the element's style property (since they were placed
          // there at the end of the last animation
          statements.push(RENDER_STYLES_FN
              .callFn([
              _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,
              importExpr(createIdentifier(Identifiers.clearStyles))
                  .callFn([_ANIMATION_START_STATE_STYLES_VAR])
          ])
              .toStmt());
          statements.push(_ANIMATION_FACTORY_VIEW_CONTEXT
              .callMethod('queueAnimation', [
              _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName),
              _ANIMATION_PLAYER_VAR
          ])
              .toStmt());
          statements.push(new ReturnStatement(importExpr(createIdentifier(Identifiers.AnimationTransition)).instantiate([
              _ANIMATION_PLAYER_VAR, _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName),
              _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR, _ANIMATION_TIME_VAR
          ])));
          return fn([
              new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
              new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE),
              new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE),
              new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)
          ], statements, importType(createIdentifier(Identifiers.AnimationTransition)));
      }
      build(ast) {
          const context = new _AnimationBuilderContext();
          const fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);
          const fnVariable = variable(this._fnVarName);
          const lookupMap = [];
          Object.keys(context.stateMap.states).forEach(stateName => {
              const value = context.stateMap.states[stateName];
              let variableValue = _EMPTY_MAP;
              if (isPresent$1(value)) {
                  const styleMap = [];
                  Object.keys(value).forEach(key => { styleMap.push([key, literal(value[key])]); });
                  variableValue = literalMap(styleMap, null, true);
              }
              lookupMap.push([stateName, variableValue]);
          });
          const compiledStatesMapStmt = this._statesMapVar.set(literalMap(lookupMap, null, true)).toDeclStmt();
          const statements = [compiledStatesMapStmt, fnStatement];
          return new AnimationEntryCompileResult(this.animationName, statements, fnVariable);
      }
  }
  class _AnimationBuilderContext {
      constructor() {
          this.stateMap = new _AnimationBuilderStateMap();
          this.endStateAnimateStep = null;
          this.isExpectingFirstStyleStep = false;
          this.isExpectingFirstAnimateStep = false;
          this.totalTransitionTime = 0;
      }
  }
  class _AnimationBuilderStateMap {
      constructor() {
          this._states = {};
      }
      get states() { return this._states; }
      registerState(name, value = null) {
          const existingEntry = this._states[name];
          if (!existingEntry) {
              this._states[name] = value;
          }
      }
  }
  function _compareToAnimationStateExpr(value, animationState) {
      const emptyStateLiteral = literal(ɵEMPTY_STATE);
      switch (animationState) {
          case ɵEMPTY_STATE:
              return value.equals(emptyStateLiteral);
          case ɵANY_STATE:
              return literal(true);
          default:
              return value.equals(literal(animationState));
      }
  }
  function _isEndStateAnimateStep(step) {
      // the final animation step is characterized by having only TWO
      // keyframe values and it must have zero styles for both keyframes
      if (step instanceof AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {
          const styles1 = _getStylesArray(step.keyframes[0])[0];
          const styles2 = _getStylesArray(step.keyframes[1])[0];
          return Object.keys(styles1).length === 0 && Object.keys(styles2).length === 0;
      }
      return false;
  }
  function _getStylesArray(obj) {
      return obj.styles.styles;
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */ class GeneratedFile {
      constructor(srcFileUrl, genFileUrl, source) {
          this.srcFileUrl = srcFileUrl;
          this.genFileUrl = genFileUrl;
          this.source = source;
      }
  }

  function serializeSummaries(summaryResolver, symbolResolver, symbols, types) {
      const serializer = new Serializer$1(symbolResolver, summaryResolver);
      // for symbols, we use everything except for the class metadata itself
      // (we keep the statics though), as the class metadata is contained in the
      // CompileTypeSummary.
      symbols.forEach((resolvedSymbol) => serializer.addOrMergeSummary({ symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata }));
      // Add summaries that are referenced by the given symbols (transitively)
      // Note: the serializer.symbols array might be growing while
      // we execute the loop!
      for (let processedIndex = 0; processedIndex < serializer.symbols.length; processedIndex++) {
          const symbol = serializer.symbols[processedIndex];
          if (summaryResolver.isLibraryFile(symbol.filePath)) {
              let summary = summaryResolver.resolveSummary(symbol);
              if (!summary) {
                  // some symbols might originate from a plain typescript library
                  // that just exported .d.ts and .metadata.json files, i.e. where no summary
                  // files were created.
                  const resolvedSymbol = symbolResolver.resolveSymbol(symbol);
                  if (resolvedSymbol) {
                      summary = { symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata };
                  }
              }
              if (summary) {
                  serializer.addOrMergeSummary(summary);
              }
          }
      }
      // Add type summaries.
      // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,
      // as the type summaries already contain the transitive data that they require
      // (in a minimal way).
      types.forEach((typeSummary) => {
          serializer.addOrMergeSummary({ symbol: typeSummary.type.reference, metadata: { __symbolic: 'class' }, type: typeSummary });
          if (typeSummary.summaryKind === CompileSummaryKind.NgModule) {
              const ngModuleSummary = typeSummary;
              ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach((id) => {
                  const symbol = id.reference;
                  if (summaryResolver.isLibraryFile(symbol.filePath)) {
                      const summary = summaryResolver.resolveSummary(symbol);
                      if (summary) {
                          serializer.addOrMergeSummary(summary);
                      }
                  }
              });
          }
      });
      return serializer.serialize();
  }
  function deserializeSummaries(symbolCache, json) {
      const deserializer = new Deserializer(symbolCache);
      return deserializer.deserialize(json);
  }
  class Serializer$1 extends ValueTransformer {
      constructor(symbolResolver, summaryResolver) {
          super();
          this.symbolResolver = symbolResolver;
          this.summaryResolver = summaryResolver;
          // Note: This only contains symbols without members.
          this.symbols = [];
          this.indexBySymbol = new Map();
          // This now contains a `__symbol: number` in the place of
          // StaticSymbols, but otherwise has the same shape as the original objects.
          this.processedSummaryBySymbol = new Map();
          this.processedSummaries = [];
      }
      addOrMergeSummary(summary) {
          let symbolMeta = summary.metadata;
          if (symbolMeta && symbolMeta.__symbolic === 'class') {
              // For classes, we only keep their statics and arity, but not the metadata
              // of the class itself as that has been captured already via other summaries
              // (e.g. DirectiveSummary, ...).
              symbolMeta = { __symbolic: 'class', statics: symbolMeta.statics, arity: symbolMeta.arity };
          }
          let processedSummary = this.processedSummaryBySymbol.get(summary.symbol);
          if (!processedSummary) {
              processedSummary = this.processValue({ symbol: summary.symbol });
              this.processedSummaries.push(processedSummary);
              this.processedSummaryBySymbol.set(summary.symbol, processedSummary);
          }
          // Note: == on purpose to compare with undefined!
          if (processedSummary.metadata == null && symbolMeta != null) {
              processedSummary.metadata = this.processValue(symbolMeta);
          }
          // Note: == on purpose to compare with undefined!
          if (processedSummary.type == null && summary.type != null) {
              processedSummary.type = this.processValue(summary.type);
          }
      }
      serialize() {
          const exportAs = [];
          const json = JSON.stringify({
              summaries: this.processedSummaries,
              symbols: this.symbols.map((symbol, index) => {
                  symbol.assertNoMembers();
                  let importAs;
                  if (this.summaryResolver.isLibraryFile(symbol.filePath)) {
                      importAs = `${symbol.name}_${index}`;
                      exportAs.push({ symbol, exportAs: importAs });
                  }
                  return {
                      __symbol: index,
                      name: symbol.name,
                      // We convert the source filenames tinto output filenames,
                      // as the generated summary file will be used when teh current
                      // compilation unit is used as a library
                      filePath: this.summaryResolver.getLibraryFileName(symbol.filePath),
                      importAs: importAs
                  };
              })
          });
          return { json, exportAs };
      }
      processValue(value) { return visitValue(value, this, null); }
      visitOther(value, context) {
          if (value instanceof StaticSymbol) {
              const baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);
              let index = this.indexBySymbol.get(baseSymbol);
              // Note: == on purpose to compare with undefined!
              if (index == null) {
                  index = this.indexBySymbol.size;
                  this.indexBySymbol.set(baseSymbol, index);
                  this.symbols.push(baseSymbol);
              }
              return { __symbol: index, members: value.members };
          }
      }
  }
  class Deserializer extends ValueTransformer {
      constructor(symbolCache) {
          super();
          this.symbolCache = symbolCache;
      }
      deserialize(json) {
          const data = JSON.parse(json);
          const importAs = [];
          this.symbols = [];
          data.symbols.forEach((serializedSymbol) => {
              const symbol = this.symbolCache.get(serializedSymbol.filePath, serializedSymbol.name);
              this.symbols.push(symbol);
              if (serializedSymbol.importAs) {
                  importAs.push({ symbol: symbol, importAs: serializedSymbol.importAs });
              }
          });
          const summaries = visitValue(data.summaries, this, null);
          return { summaries, importAs };
      }
      visitStringMap(map, context) {
          if ('__symbol' in map) {
              const baseSymbol = this.symbols[map['__symbol']];
              const members = map['members'];
              return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) :
                  baseSymbol;
          }
          else {
              return super.visitStringMap(map, context);
          }
      }
  }

  class AotCompiler {
      constructor(_config, _host, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _dirWrapperCompiler, _ngModuleCompiler, _outputEmitter, _summaryResolver, _localeId, _translationFormat, _animationParser, _symbolResolver) {
          this._config = _config;
          this._host = _host;
          this._metadataResolver = _metadataResolver;
          this._templateParser = _templateParser;
          this._styleCompiler = _styleCompiler;
          this._viewCompiler = _viewCompiler;
          this._dirWrapperCompiler = _dirWrapperCompiler;
          this._ngModuleCompiler = _ngModuleCompiler;
          this._outputEmitter = _outputEmitter;
          this._summaryResolver = _summaryResolver;
          this._localeId = _localeId;
          this._translationFormat = _translationFormat;
          this._animationParser = _animationParser;
          this._symbolResolver = _symbolResolver;
          this._animationCompiler = new AnimationCompiler();
      }
      clearCache() { this._metadataResolver.clearCache(); }
      compileAll(rootFiles) {
          const programSymbols = extractProgramSymbols(this._symbolResolver, rootFiles, this._host);
          const { ngModuleByPipeOrDirective, files, ngModules } = analyzeAndValidateNgModules(programSymbols, this._host, this._metadataResolver);
          return Promise
              .all(ngModules.map(ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false)))
              .then(() => {
              const sourceModules = files.map(file => this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables));
              return ListWrapper$1.flatten(sourceModules);
          });
      }
      _compileSrcFile(srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {
          const fileSuffix = splitTypescriptSuffix(srcFileUrl)[1];
          const statements = [];
          const exportedVars = [];
          const generatedFiles = [];
          generatedFiles.push(this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, statements, exportedVars));
          // compile all ng modules
          exportedVars.push(...ngModules.map((ngModuleType) => this._compileModule(ngModuleType, statements)));
          // compile directive wrappers
          if (!this._config.useViewEngine) {
              exportedVars.push(...directives.map((directiveType) => this._compileDirectiveWrapper(directiveType, statements)));
          }
          // compile components
          directives.forEach((dirType) => {
              const compMeta = this._metadataResolver.getDirectiveMetadata(dirType);
              if (!compMeta.isComponent) {
                  return Promise.resolve(null);
              }
              const ngModule = ngModuleByPipeOrDirective.get(dirType);
              if (!ngModule) {
                  throw new Error(`Internal Error: cannot determine the module for component ${identifierName(compMeta.type)}!`);
              }
              _assertComponent(compMeta);
              // compile styles
              const stylesCompileResults = this._styleCompiler.compileComponent(compMeta);
              stylesCompileResults.externalStylesheets.forEach((compiledStyleSheet) => {
                  generatedFiles.push(this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
              });
              // compile components
              const compViewVars = this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements);
              exportedVars.push(this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), compViewVars.viewClassVar, compViewVars.compRenderTypeVar);
          });
          if (statements.length > 0) {
              const srcModule = this._codegenSourceModule(srcFileUrl, ngfactoryFilePath(srcFileUrl), statements, exportedVars);
              generatedFiles.unshift(srcModule);
          }
          return generatedFiles;
      }
      _createSummary(srcFileUrl, directives, pipes, ngModules, injectables, targetStatements, targetExportedVars) {
          const symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileUrl)
              .map(symbol => this._symbolResolver.resolveSymbol(symbol));
          const typeSummaries = [
              ...ngModules.map(ref => this._metadataResolver.getNgModuleSummary(ref)),
              ...directives.map(ref => this._metadataResolver.getDirectiveSummary(ref)),
              ...pipes.map(ref => this._metadataResolver.getPipeSummary(ref)),
              ...injectables.map(ref => this._metadataResolver.getInjectableSummary(ref))
          ];
          const { json, exportAs } = serializeSummaries(this._summaryResolver, this._symbolResolver, symbolSummaries, typeSummaries);
          exportAs.forEach((entry) => {
              targetStatements.push(variable(entry.exportAs).set(importExpr({ reference: entry.symbol })).toDeclStmt());
              targetExportedVars.push(entry.exportAs);
          });
          return new GeneratedFile(srcFileUrl, summaryFileName(srcFileUrl), json);
      }
      _compileModule(ngModuleType, targetStatements) {
          const ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
          const providers = [];
          if (this._localeId) {
              providers.push({
                  token: createIdentifierToken(Identifiers.LOCALE_ID),
                  useValue: this._localeId,
              });
          }
          if (this._translationFormat) {
              providers.push({
                  token: createIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
                  useValue: this._translationFormat
              });
          }
          const appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);
          targetStatements.push(...appCompileResult.statements);
          return appCompileResult.ngModuleFactoryVar;
      }
      _compileDirectiveWrapper(directiveType, targetStatements) {
          const dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);
          const dirCompileResult = this._dirWrapperCompiler.compile(dirMeta);
          targetStatements.push(...dirCompileResult.statements);
          return dirCompileResult.dirWrapperClassVar;
      }
      _compileComponentFactory(compMeta, ngModule, fileSuffix, targetStatements) {
          const hostType = this._metadataResolver.getHostComponentType(compMeta.type.reference);
          const hostMeta = createHostComponentMeta(hostType, compMeta, this._metadataResolver.getHostComponentViewClass(hostType));
          const hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [compMeta.type], null, fileSuffix, targetStatements)
              .viewClassVar;
          const compFactoryVar = componentFactoryName(compMeta.type.reference);
          if (this._config.useViewEngine) {
              targetStatements.push(variable(compFactoryVar)
                  .set(importExpr(createIdentifier(Identifiers.createComponentFactory)).callFn([
                  literal(compMeta.selector),
                  importExpr(compMeta.type),
                  variable(hostViewFactoryVar),
              ]))
                  .toDeclStmt(importType(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const]), [StmtModifier.Final]));
          }
          else {
              targetStatements.push(variable(compFactoryVar)
                  .set(importExpr(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)])
                  .instantiate([
                  literal(compMeta.selector),
                  variable(hostViewFactoryVar),
                  importExpr(compMeta.type),
              ], importType(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const])))
                  .toDeclStmt(null, [StmtModifier.Final]));
          }
          return compFactoryVar;
      }
      _compileComponent(compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {
          const directives = directiveIdentifiers.map(dir => this._metadataResolver.getDirectiveSummary(dir.reference));
          const pipes = ngModule.transitiveModule.pipes.map(pipe => this._metadataResolver.getPipeSummary(pipe.reference));
          const { template: parsedTemplate, pipes: usedPipes } = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, identifierName(compMeta.type));
          const stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
          const viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, usedPipes, null);
          if (componentStyles) {
              targetStatements.push(..._resolveStyleStatements(this._symbolResolver, componentStyles, fileSuffix));
          }
          targetStatements.push(...viewResult.statements);
          return { viewClassVar: viewResult.viewClassVar, compRenderTypeVar: viewResult.rendererTypeVar };
      }
      _codgenStyles(fileUrl, stylesCompileResult, fileSuffix) {
          _resolveStyleStatements(this._symbolResolver, stylesCompileResult, fileSuffix);
          return this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
      }
      _codegenSourceModule(srcFileUrl, genFileUrl, statements, exportedVars) {
          return new GeneratedFile(srcFileUrl, genFileUrl, this._outputEmitter.emitStatements(genFileUrl, statements, exportedVars));
      }
  }
  function _resolveStyleStatements(reflector, compileResult, fileSuffix) {
      compileResult.dependencies.forEach((dep) => {
          dep.valuePlaceholder.reference = reflector.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix), dep.name);
      });
      return compileResult.statements;
  }
  function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
      return `${stylesheetUrl}${shim ? '.shim' : ''}.ngstyle${suffix}`;
  }
  function _assertComponent(meta) {
      if (!meta.isComponent) {
          throw new Error(`Could not compile '${identifierName(meta.type)}' because it is not a component.`);
      }
  }
  // Returns all the source files and a mapping from modules to directives
  function analyzeNgModules(programStaticSymbols, host, metadataResolver) {
      const { ngModules, symbolsMissingModule } = _createNgModules(programStaticSymbols, host, metadataResolver);
      return _analyzeNgModules(programStaticSymbols, ngModules, symbolsMissingModule, metadataResolver);
  }
  function analyzeAndValidateNgModules(programStaticSymbols, host, metadataResolver) {
      const result = analyzeNgModules(programStaticSymbols, host, metadataResolver);
      if (result.symbolsMissingModule && result.symbolsMissingModule.length) {
          const messages = result.symbolsMissingModule.map(s => `Cannot determine the module for class ${s.name} in ${s.filePath}! Add ${s.name} to the NgModule to fix it.`);
          throw syntaxError(messages.join('\n'));
      }
      return result;
  }
  function _analyzeNgModules(programSymbols, ngModuleMetas, symbolsMissingModule, metadataResolver) {
      const moduleMetasByRef = new Map();
      ngModuleMetas.forEach((ngModule) => moduleMetasByRef.set(ngModule.type.reference, ngModule));
      const ngModuleByPipeOrDirective = new Map();
      const ngModulesByFile = new Map();
      const ngDirectivesByFile = new Map();
      const ngPipesByFile = new Map();
      const ngInjectablesByFile = new Map();
      const filePaths = new Set();
      // Make sure we produce an analyzed file for each input file
      programSymbols.forEach((symbol) => {
          const filePath = symbol.filePath;
          filePaths.add(filePath);
          if (metadataResolver.isInjectable(symbol)) {
              ngInjectablesByFile.set(filePath, (ngInjectablesByFile.get(filePath) || []).concat(symbol));
          }
      });
      // Looping over all modules to construct:
      // - a map from file to modules `ngModulesByFile`,
      // - a map from file to directives `ngDirectivesByFile`,
      // - a map from file to pipes `ngPipesByFile`,
      // - a map from directive/pipe to module `ngModuleByPipeOrDirective`.
      ngModuleMetas.forEach((ngModuleMeta) => {
          const srcFileUrl = ngModuleMeta.type.reference.filePath;
          filePaths.add(srcFileUrl);
          ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));
          ngModuleMeta.declaredDirectives.forEach((dirIdentifier) => {
              const fileUrl = dirIdentifier.reference.filePath;
              filePaths.add(fileUrl);
              ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));
              ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);
          });
          ngModuleMeta.declaredPipes.forEach((pipeIdentifier) => {
              const fileUrl = pipeIdentifier.reference.filePath;
              filePaths.add(fileUrl);
              ngPipesByFile.set(fileUrl, (ngPipesByFile.get(fileUrl) || []).concat(pipeIdentifier.reference));
              ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);
          });
      });
      const files = [];
      filePaths.forEach((srcUrl) => {
          const directives = ngDirectivesByFile.get(srcUrl) || [];
          const pipes = ngPipesByFile.get(srcUrl) || [];
          const ngModules = ngModulesByFile.get(srcUrl) || [];
          const injectables = ngInjectablesByFile.get(srcUrl) || [];
          files.push({ srcUrl, directives, pipes, ngModules, injectables });
      });
      return {
          // map directive/pipe to module
          ngModuleByPipeOrDirective,
          // list modules and directives for every source file
          files,
          ngModules: ngModuleMetas, symbolsMissingModule
      };
  }
  function extractProgramSymbols(staticSymbolResolver, files, host) {
      const staticSymbols = [];
      files.filter(fileName => host.isSourceFile(fileName)).forEach(sourceFile => {
          staticSymbolResolver.getSymbolsOf(sourceFile).forEach((symbol) => {
              const resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);
              const symbolMeta = resolvedSymbol.metadata;
              if (symbolMeta) {
                  if (symbolMeta.__symbolic != 'error') {
                      // Ignore symbols that are only included to record error information.
                      staticSymbols.push(resolvedSymbol.symbol);
                  }
              }
          });
      });
      return staticSymbols;
  }
  // Load the NgModules and check
  // that all directives / pipes that are present in the program
  // are also declared by a module.
  function _createNgModules(programStaticSymbols, host, metadataResolver) {
      const ngModules = new Map();
      const programPipesAndDirectives = [];
      const ngModulePipesAndDirective = new Set();
      const addNgModule = (staticSymbol) => {
          if (ngModules.has(staticSymbol) || !host.isSourceFile(staticSymbol.filePath)) {
              return false;
          }
          const ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, false);
          if (ngModule) {
              ngModules.set(ngModule.type.reference, ngModule);
              ngModule.declaredDirectives.forEach((dir) => ngModulePipesAndDirective.add(dir.reference));
              ngModule.declaredPipes.forEach((pipe) => ngModulePipesAndDirective.add(pipe.reference));
              // For every input module add the list of transitively included modules
              ngModule.transitiveModule.modules.forEach(modMeta => addNgModule(modMeta.reference));
          }
          return !!ngModule;
      };
      programStaticSymbols.forEach((staticSymbol) => {
          if (!addNgModule(staticSymbol) &&
              (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {
              programPipesAndDirectives.push(staticSymbol);
          }
      });
      // Throw an error if any of the program pipe or directives is not declared by a module
      const symbolsMissingModule = programPipesAndDirectives.filter(s => !ngModulePipesAndDirective.has(s));
      return { ngModules: Array.from(ngModules.values()), symbolsMissingModule };
  }

  class StaticAndDynamicReflectionCapabilities {
      constructor(staticDelegate) {
          this.staticDelegate = staticDelegate;
          this.dynamicDelegate = new ReflectionCapabilities();
      }
      static install(staticDelegate) {
          reflector.updateCapabilities(new StaticAndDynamicReflectionCapabilities(staticDelegate));
      }
      isReflectionEnabled() { return true; }
      factory(type) { return this.dynamicDelegate.factory(type); }
      hasLifecycleHook(type, lcProperty) {
          return isStaticType(type) ? this.staticDelegate.hasLifecycleHook(type, lcProperty) :
              this.dynamicDelegate.hasLifecycleHook(type, lcProperty);
      }
      parameters(type) {
          return isStaticType(type) ? this.staticDelegate.parameters(type) :
              this.dynamicDelegate.parameters(type);
      }
      annotations(type) {
          return isStaticType(type) ? this.staticDelegate.annotations(type) :
              this.dynamicDelegate.annotations(type);
      }
      propMetadata(typeOrFunc) {
          return isStaticType(typeOrFunc) ? this.staticDelegate.propMetadata(typeOrFunc) :
              this.dynamicDelegate.propMetadata(typeOrFunc);
      }
      getter(name) { return this.dynamicDelegate.getter(name); }
      setter(name) { return this.dynamicDelegate.setter(name); }
      method(name) { return this.dynamicDelegate.method(name); }
      importUri(type) { return this.staticDelegate.importUri(type); }
      resolveIdentifier(name, moduleUrl, members, runtime) {
          return this.staticDelegate.resolveIdentifier(name, moduleUrl, members);
      }
      resolveEnum(enumIdentifier, name) {
          if (isStaticType(enumIdentifier)) {
              return this.staticDelegate.resolveEnum(enumIdentifier, name);
          }
          else {
              return null;
          }
      }
  }
  function isStaticType(type) {
      return typeof type === 'object' && type.name && type.filePath;
  }

  const ANGULAR_CORE = '@angular/core';
  const HIDDEN_KEY = /^\$.*\$$/;
  /**
   * A static reflector implements enough of the Reflector API that is necessary to compile
   * templates statically.
   */
  class StaticReflector {
      constructor(symbolResolver, knownMetadataClasses = [], knownMetadataFunctions = [], errorRecorder) {
          this.symbolResolver = symbolResolver;
          this.errorRecorder = errorRecorder;
          this.annotationCache = new Map();
          this.propertyCache = new Map();
          this.parameterCache = new Map();
          this.methodCache = new Map();
          this.conversionMap = new Map();
          this.initializeConversionMap();
          knownMetadataClasses.forEach((kc) => this._registerDecoratorOrConstructor(this.getStaticSymbol(kc.filePath, kc.name), kc.ctor));
          knownMetadataFunctions.forEach((kf) => this._registerFunction(this.getStaticSymbol(kf.filePath, kf.name), kf.fn));
      }
      importUri(typeOrFunc) {
          const staticSymbol = this.findSymbolDeclaration(typeOrFunc);
          return staticSymbol ? staticSymbol.filePath : null;
      }
      resolveIdentifier(name, moduleUrl, members) {
          const importSymbol = this.getStaticSymbol(moduleUrl, name);
          const rootSymbol = this.findDeclaration(moduleUrl, name);
          if (importSymbol != rootSymbol) {
              this.symbolResolver.recordImportAs(rootSymbol, importSymbol);
          }
          if (members && members.length) {
              return this.getStaticSymbol(rootSymbol.filePath, rootSymbol.name, members);
          }
          return rootSymbol;
      }
      findDeclaration(moduleUrl, name, containingFile) {
          return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));
      }
      findSymbolDeclaration(symbol) {
          const resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);
          if (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {
              return this.findSymbolDeclaration(resolvedSymbol.metadata);
          }
          else {
              return symbol;
          }
      }
      resolveEnum(enumIdentifier, name) {
          const staticSymbol = enumIdentifier;
          const members = (staticSymbol.members || []).concat(name);
          return this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name, members);
      }
      annotations(type) {
          let annotations = this.annotationCache.get(type);
          if (!annotations) {
              annotations = [];
              const classMetadata = this.getTypeMetadata(type);
              if (classMetadata['extends']) {
                  const parentType = this.trySimplify(type, classMetadata['extends']);
                  if (parentType && (parentType instanceof StaticSymbol)) {
                      const parentAnnotations = this.annotations(parentType);
                      annotations.push(...parentAnnotations);
                  }
              }
              if (classMetadata['decorators']) {
                  const ownAnnotations = this.simplify(type, classMetadata['decorators']);
                  annotations.push(...ownAnnotations);
              }
              this.annotationCache.set(type, annotations.filter(ann => !!ann));
          }
          return annotations;
      }
      propMetadata(type) {
          let propMetadata = this.propertyCache.get(type);
          if (!propMetadata) {
              const classMetadata = this.getTypeMetadata(type);
              propMetadata = {};
              if (classMetadata['extends']) {
                  const parentType = this.simplify(type, classMetadata['extends']);
                  if (parentType instanceof StaticSymbol) {
                      const parentPropMetadata = this.propMetadata(parentType);
                      Object.keys(parentPropMetadata).forEach((parentProp) => {
                          propMetadata[parentProp] = parentPropMetadata[parentProp];
                      });
                  }
              }
              const members = classMetadata['members'] || {};
              Object.keys(members).forEach((propName) => {
                  const propData = members[propName];
                  const prop = propData
                      .find(a => a['__symbolic'] == 'property' || a['__symbolic'] == 'method');
                  const decorators = [];
                  if (propMetadata[propName]) {
                      decorators.push(...propMetadata[propName]);
                  }
                  propMetadata[propName] = decorators;
                  if (prop && prop['decorators']) {
                      decorators.push(...this.simplify(type, prop['decorators']));
                  }
              });
              this.propertyCache.set(type, propMetadata);
          }
          return propMetadata;
      }
      parameters(type) {
          if (!(type instanceof StaticSymbol)) {
              this.reportError(new Error(`parameters received ${JSON.stringify(type)} which is not a StaticSymbol`), type);
              return [];
          }
          try {
              let parameters = this.parameterCache.get(type);
              if (!parameters) {
                  const classMetadata = this.getTypeMetadata(type);
                  const members = classMetadata ? classMetadata['members'] : null;
                  const ctorData = members ? members['__ctor__'] : null;
                  if (ctorData) {
                      const ctor = ctorData.find(a => a['__symbolic'] == 'constructor');
                      const parameterTypes = this.simplify(type, ctor['parameters'] || []);
                      const parameterDecorators = this.simplify(type, ctor['parameterDecorators'] || []);
                      parameters = [];
                      parameterTypes.forEach((paramType, index) => {
                          const nestedResult = [];
                          if (paramType) {
                              nestedResult.push(paramType);
                          }
                          const decorators = parameterDecorators ? parameterDecorators[index] : null;
                          if (decorators) {
                              nestedResult.push(...decorators);
                          }
                          parameters.push(nestedResult);
                      });
                  }
                  else if (classMetadata['extends']) {
                      const parentType = this.simplify(type, classMetadata['extends']);
                      if (parentType instanceof StaticSymbol) {
                          parameters = this.parameters(parentType);
                      }
                  }
                  if (!parameters) {
                      parameters = [];
                  }
                  this.parameterCache.set(type, parameters);
              }
              return parameters;
          }
          catch (e) {
              console.error(`Failed on type ${JSON.stringify(type)} with error ${e}`);
              throw e;
          }
      }
      _methodNames(type) {
          let methodNames = this.methodCache.get(type);
          if (!methodNames) {
              const classMetadata = this.getTypeMetadata(type);
              methodNames = {};
              if (classMetadata['extends']) {
                  const parentType = this.simplify(type, classMetadata['extends']);
                  if (parentType instanceof StaticSymbol) {
                      const parentMethodNames = this._methodNames(parentType);
                      Object.keys(parentMethodNames).forEach((parentProp) => {
                          methodNames[parentProp] = parentMethodNames[parentProp];
                      });
                  }
              }
              const members = classMetadata['members'] || {};
              Object.keys(members).forEach((propName) => {
                  const propData = members[propName];
                  const isMethod = propData.some(a => a['__symbolic'] == 'method');
                  methodNames[propName] = methodNames[propName] || isMethod;
              });
              this.methodCache.set(type, methodNames);
          }
          return methodNames;
      }
      hasLifecycleHook(type, lcProperty) {
          if (!(type instanceof StaticSymbol)) {
              this.reportError(new Error(`hasLifecycleHook received ${JSON.stringify(type)} which is not a StaticSymbol`), type);
          }
          try {
              return !!this._methodNames(type)[lcProperty];
          }
          catch (e) {
              console.error(`Failed on type ${JSON.stringify(type)} with error ${e}`);
              throw e;
          }
      }
      _registerDecoratorOrConstructor(type, ctor) {
          this.conversionMap.set(type, (context, args) => new ctor(...args));
      }
      _registerFunction(type, fn) {
          this.conversionMap.set(type, (context, args) => fn.apply(undefined, args));
      }
      initializeConversionMap() {
          this.injectionToken = this.findDeclaration(ANGULAR_CORE, 'InjectionToken');
          this.opaqueToken = this.findDeclaration(ANGULAR_CORE, 'OpaqueToken');
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), Host);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Injectable'), Injectable);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), Self);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), SkipSelf);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Inject'), Inject);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), Optional);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Attribute'), Attribute);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChild'), ContentChild);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChildren'), ContentChildren);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChild'), ViewChild);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChildren'), ViewChildren);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Input'), Input);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Output'), Output);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Pipe'), Pipe);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostBinding'), HostBinding);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostListener'), HostListener);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Directive'), Directive);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Component'), Component);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'NgModule'), NgModule);
          // Note: Some metadata classes can be used directly with Provider.deps.
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), Host);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), Self);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), SkipSelf);
          this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), Optional);
          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'trigger'), trigger$1);
          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'state'), state$1);
          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'transition'), transition$1);
          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'style'), style$1);
          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'animate'), animate$1);
          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'keyframes'), keyframes$1);
          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'sequence'), sequence$1);
          this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'group'), group$1);
      }
      /**
       * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
       * All types passed to the StaticResolver should be pseudo-types returned by this method.
       *
       * @param declarationFile the absolute path of the file where the symbol is declared
       * @param name the name of the type.
       */
      getStaticSymbol(declarationFile, name, members) {
          return this.symbolResolver.getStaticSymbol(declarationFile, name, members);
      }
      reportError(error, context, path) {
          if (this.errorRecorder) {
              this.errorRecorder(error, (context && context.filePath) || path);
          }
          else {
              throw error;
          }
      }
      /**
       * Simplify but discard any errors
       */
      trySimplify(context, value) {
          const originalRecorder = this.errorRecorder;
          this.errorRecorder = (error, fileName) => { };
          const result = this.simplify(context, value);
          this.errorRecorder = originalRecorder;
          return result;
      }
      /** @internal */
      simplify(context, value) {
          const self = this;
          let scope = BindingScope.empty;
          const calling = new Map();
          function simplifyInContext(context, value, depth) {
              function resolveReferenceValue(staticSymbol) {
                  const resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);
                  return resolvedSymbol ? resolvedSymbol.metadata : null;
              }
              function simplifyCall(functionSymbol, targetFunction, args) {
                  if (targetFunction && targetFunction['__symbolic'] == 'function') {
                      if (calling.get(functionSymbol)) {
                          throw new Error('Recursion not supported');
                      }
                      calling.set(functionSymbol, true);
                      try {
                          const value = targetFunction['value'];
                          if (value && (depth != 0 || value.__symbolic != 'error')) {
                              const parameters = targetFunction['parameters'];
                              const defaults = targetFunction.defaults;
                              args = args.map(arg => simplifyInContext(context, arg, depth + 1));
                              if (defaults && defaults.length > args.length) {
                                  args.push(...defaults.slice(args.length).map((value) => simplify(value)));
                              }
                              const functionScope = BindingScope.build();
                              for (let i = 0; i < parameters.length; i++) {
                                  functionScope.define(parameters[i], args[i]);
                              }
                              const oldScope = scope;
                              let result;
                              try {
                                  scope = functionScope.done();
                                  result = simplifyInContext(functionSymbol, value, depth + 1);
                              }
                              finally {
                                  scope = oldScope;
                              }
                              return result;
                          }
                      }
                      finally {
                          calling.delete(functionSymbol);
                      }
                  }
                  if (depth === 0) {
                      // If depth is 0 we are evaluating the top level expression that is describing element
                      // decorator. In this case, it is a decorator we don't understand, such as a custom
                      // non-angular decorator, and we should just ignore it.
                      return { __symbolic: 'ignore' };
                  }
                  return simplify({ __symbolic: 'error', message: 'Function call not supported', context: functionSymbol });
              }
              function simplify(expression) {
                  if (isPrimitive$2(expression)) {
                      return expression;
                  }
                  if (expression instanceof Array) {
                      const result = [];
                      for (const item of expression) {
                          // Check for a spread expression
                          if (item && item.__symbolic === 'spread') {
                              const spreadArray = simplify(item.expression);
                              if (Array.isArray(spreadArray)) {
                                  for (const spreadItem of spreadArray) {
                                      result.push(spreadItem);
                                  }
                                  continue;
                              }
                          }
                          const value = simplify(item);
                          if (shouldIgnore(value)) {
                              continue;
                          }
                          result.push(value);
                      }
                      return result;
                  }
                  if (expression instanceof StaticSymbol) {
                      // Stop simplification at builtin symbols
                      if (expression === self.injectionToken || expression === self.opaqueToken ||
                          self.conversionMap.has(expression)) {
                          return expression;
                      }
                      else {
                          const staticSymbol = expression;
                          const declarationValue = resolveReferenceValue(staticSymbol);
                          if (declarationValue) {
                              return simplifyInContext(staticSymbol, declarationValue, depth + 1);
                          }
                          else {
                              return staticSymbol;
                          }
                      }
                  }
                  if (expression) {
                      if (expression['__symbolic']) {
                          let staticSymbol;
                          switch (expression['__symbolic']) {
                              case 'binop':
                                  let left = simplify(expression['left']);
                                  if (shouldIgnore(left))
                                      return left;
                                  let right = simplify(expression['right']);
                                  if (shouldIgnore(right))
                                      return right;
                                  switch (expression['operator']) {
                                      case '&&':
                                          return left && right;
                                      case '||':
                                          return left || right;
                                      case '|':
                                          return left | right;
                                      case '^':
                                          return left ^ right;
                                      case '&':
                                          return left & right;
                                      case '==':
                                          return left == right;
                                      case '!=':
                                          return left != right;
                                      case '===':
                                          return left === right;
                                      case '!==':
                                          return left !== right;
                                      case '<':
                                          return left < right;
                                      case '>':
                                          return left > right;
                                      case '<=':
                                          return left <= right;
                                      case '>=':
                                          return left >= right;
                                      case '<<':
                                          return left << right;
                                      case '>>':
                                          return left >> right;
                                      case '+':
                                          return left + right;
                                      case '-':
                                          return left - right;
                                      case '*':
                                          return left * right;
                                      case '/':
                                          return left / right;
                                      case '%':
                                          return left % right;
                                  }
                                  return null;
                              case 'if':
                                  let condition = simplify(expression['condition']);
                                  return condition ? simplify(expression['thenExpression']) :
                                      simplify(expression['elseExpression']);
                              case 'pre':
                                  let operand = simplify(expression['operand']);
                                  if (shouldIgnore(operand))
                                      return operand;
                                  switch (expression['operator']) {
                                      case '+':
                                          return operand;
                                      case '-':
                                          return -operand;
                                      case '!':
                                          return !operand;
                                      case '~':
                                          return ~operand;
                                  }
                                  return null;
                              case 'index':
                                  let indexTarget = simplify(expression['expression']);
                                  let index = simplify(expression['index']);
                                  if (indexTarget && isPrimitive$2(index))
                                      return indexTarget[index];
                                  return null;
                              case 'select':
                                  const member = expression['member'];
                                  let selectContext = context;
                                  let selectTarget = simplify(expression['expression']);
                                  if (selectTarget instanceof StaticSymbol) {
                                      const members = selectTarget.members.concat(member);
                                      selectContext =
                                          self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);
                                      const declarationValue = resolveReferenceValue(selectContext);
                                      if (declarationValue) {
                                          return simplifyInContext(selectContext, declarationValue, depth + 1);
                                      }
                                      else {
                                          return selectContext;
                                      }
                                  }
                                  if (selectTarget && isPrimitive$2(member))
                                      return simplifyInContext(selectContext, selectTarget[member], depth + 1);
                                  return null;
                              case 'reference':
                                  // Note: This only has to deal with variable references,
                                  // as symbol references have been converted into StaticSymbols already
                                  // in the StaticSymbolResolver!
                                  const name = expression['name'];
                                  const localValue = scope.resolve(name);
                                  if (localValue != BindingScope.missing) {
                                      return localValue;
                                  }
                                  break;
                              case 'class':
                                  return context;
                              case 'function':
                                  return context;
                              case 'new':
                              case 'call':
                                  // Determine if the function is a built-in conversion
                                  staticSymbol = simplifyInContext(context, expression['expression'], depth + 1);
                                  if (staticSymbol instanceof StaticSymbol) {
                                      if (staticSymbol === self.injectionToken || staticSymbol === self.opaqueToken) {
                                          // if somebody calls new InjectionToken, don't create an InjectionToken,
                                          // but rather return the symbol to which the InjectionToken is assigned to.
                                          return context;
                                      }
                                      const argExpressions = expression['arguments'] || [];
                                      let converter = self.conversionMap.get(staticSymbol);
                                      if (converter) {
                                          const args = argExpressions.map(arg => simplifyInContext(context, arg, depth + 1));
                                          return converter(context, args);
                                      }
                                      else {
                                          // Determine if the function is one we can simplify.
                                          const targetFunction = resolveReferenceValue(staticSymbol);
                                          return simplifyCall(staticSymbol, targetFunction, argExpressions);
                                      }
                                  }
                                  break;
                              case 'error':
                                  let message = produceErrorMessage(expression);
                                  if (expression['line']) {
                                      message =
                                          `${message} (position ${expression['line'] + 1}:${expression['character'] + 1} in the original .ts file)`;
                                      throw positionalError(message, context.filePath, expression['line'], expression['character']);
                                  }
                                  throw new Error(message);
                          }
                          return null;
                      }
                      return mapStringMap(expression, (value, name) => simplify(value));
                  }
                  return null;
              }
              try {
                  return simplify(value);
              }
              catch (e) {
                  const members = context.members.length ? `.${context.members.join('.')}` : '';
                  const message = `${e.message}, resolving symbol ${context.name}${members} in ${context.filePath}`;
                  if (e.fileName) {
                      throw positionalError(message, e.fileName, e.line, e.column);
                  }
                  throw syntaxError(message);
              }
          }
          const recordedSimplifyInContext = (context, value, depth) => {
              try {
                  return simplifyInContext(context, value, depth);
              }
              catch (e) {
                  this.reportError(e, context);
              }
          };
          const result = this.errorRecorder ? recordedSimplifyInContext(context, value, 0) :
              simplifyInContext(context, value, 0);
          if (shouldIgnore(result)) {
              return undefined;
          }
          return result;
      }
      getTypeMetadata(type) {
          const resolvedSymbol = this.symbolResolver.resolveSymbol(type);
          return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata :
              { __symbolic: 'class' };
      }
  }
  function expandedMessage(error) {
      switch (error.message) {
          case 'Reference to non-exported class':
              if (error.context && error.context.className) {
                  return `Reference to a non-exported class ${error.context.className}. Consider exporting the class`;
              }
              break;
          case 'Variable not initialized':
              return 'Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler';
          case 'Destructuring not supported':
              return 'Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring';
          case 'Could not resolve type':
              if (error.context && error.context.typeName) {
                  return `Could not resolve type ${error.context.typeName}`;
              }
              break;
          case 'Function call not supported':
              let prefix = error.context && error.context.name ? `Calling function '${error.context.name}', f` : 'F';
              return prefix +
                  'unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function';
          case 'Reference to a local symbol':
              if (error.context && error.context.name) {
                  return `Reference to a local (non-exported) symbol '${error.context.name}'. Consider exporting the symbol`;
              }
              break;
      }
      return error.message;
  }
  function produceErrorMessage(error) {
      return `Error encountered resolving symbol values statically. ${expandedMessage(error)}`;
  }
  function mapStringMap(input, transform) {
      if (!input)
          return {};
      const result = {};
      Object.keys(input).forEach((key) => {
          const value = transform(input[key], key);
          if (!shouldIgnore(value)) {
              if (HIDDEN_KEY.test(key)) {
                  Object.defineProperty(result, key, { enumerable: false, configurable: true, value: value });
              }
              else {
                  result[key] = value;
              }
          }
      });
      return result;
  }
  function isPrimitive$2(o) {
      return o === null || (typeof o !== 'function' && typeof o !== 'object');
  }
  class BindingScope {
      static build() {
          const current = new Map();
          return {
              define: function (name, value) {
                  current.set(name, value);
                  return this;
              },
              done: function () {
                  return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;
              }
          };
      }
  }
  BindingScope.missing = {};
  BindingScope.empty = { resolve: name => BindingScope.missing };
  class PopulatedScope extends BindingScope {
      constructor(bindings) {
          super();
          this.bindings = bindings;
      }
      resolve(name) {
          return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;
      }
  }
  function shouldIgnore(value) {
      return value && value.__symbolic == 'ignore';
  }
  function positionalError(message, fileName, line, column) {
      const result = new Error(message);
      result.fileName = fileName;
      result.line = line;
      result.column = column;
      return result;
  }

  class ResolvedStaticSymbol {
      constructor(symbol, metadata) {
          this.symbol = symbol;
          this.metadata = metadata;
      }
  }
  const SUPPORTED_SCHEMA_VERSION = 3;
  /**
   * This class is responsible for loading metadata per symbol,
   * and normalizing references between symbols.
   *
   * Internally, it only uses symbols without members,
   * and deduces the values for symbols with members based
   * on these symbols.
   */
  class StaticSymbolResolver {
      constructor(host, staticSymbolCache, summaryResolver, errorRecorder) {
          this.host = host;
          this.staticSymbolCache = staticSymbolCache;
          this.summaryResolver = summaryResolver;
          this.errorRecorder = errorRecorder;
          this.metadataCache = new Map();
          // Note: this will only contain StaticSymbols without members!
          this.resolvedSymbols = new Map();
          this.resolvedFilePaths = new Set();
          // Note: this will only contain StaticSymbols without members!
          this.importAs = new Map();
      }
      resolveSymbol(staticSymbol) {
          if (staticSymbol.members.length > 0) {
              return this._resolveSymbolMembers(staticSymbol);
          }
          let result = this.resolvedSymbols.get(staticSymbol);
          if (result) {
              return result;
          }
          result = this._resolveSymbolFromSummary(staticSymbol);
          if (result) {
              return result;
          }
          // Note: Some users use libraries that were not compiled with ngc, i.e. they don't
          // have summaries, only .d.ts files. So we always need to check both, the summary
          // and metadata.
          this._createSymbolsOf(staticSymbol.filePath);
          result = this.resolvedSymbols.get(staticSymbol);
          return result;
      }
      /**
       * getImportAs produces a symbol that can be used to import the given symbol.
       * The import might be different than the symbol if the symbol is exported from
       * a library with a summary; in which case we want to import the symbol from the
       * ngfactory re-export instead of directly to avoid introducing a direct dependency
       * on an otherwise indirect dependency.
       *
       * @param staticSymbol the symbol for which to generate a import symbol
       */
      getImportAs(staticSymbol) {
          if (staticSymbol.members.length) {
              const baseSymbol = this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name);
              const baseImportAs = this.getImportAs(baseSymbol);
              return baseImportAs ?
                  this.getStaticSymbol(baseImportAs.filePath, baseImportAs.name, staticSymbol.members) :
                  null;
          }
          let result = this.summaryResolver.getImportAs(staticSymbol);
          if (!result) {
              result = this.importAs.get(staticSymbol);
          }
          return result;
      }
      /**
       * getTypeArity returns the number of generic type parameters the given symbol
       * has. If the symbol is not a type the result is null.
       */
      getTypeArity(staticSymbol) {
          // If the file is a factory file, don't resolve the symbol as doing so would
          // cause the metadata for an factory file to be loaded which doesn't exist.
          // All references to generated classes must include the correct arity whenever
          // generating code.
          if (isNgFactoryFile(staticSymbol.filePath)) {
              return null;
          }
          let resolvedSymbol = this.resolveSymbol(staticSymbol);
          while (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {
              resolvedSymbol = this.resolveSymbol(resolvedSymbol.metadata);
          }
          return (resolvedSymbol && resolvedSymbol.metadata && resolvedSymbol.metadata.arity) || null;
      }
      recordImportAs(sourceSymbol, targetSymbol) {
          sourceSymbol.assertNoMembers();
          targetSymbol.assertNoMembers();
          this.importAs.set(sourceSymbol, targetSymbol);
      }
      _resolveSymbolMembers(staticSymbol) {
          const members = staticSymbol.members;
          const baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));
          if (!baseResolvedSymbol) {
              return null;
          }
          const baseMetadata = baseResolvedSymbol.metadata;
          if (baseMetadata instanceof StaticSymbol) {
              return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));
          }
          else if (baseMetadata && baseMetadata.__symbolic === 'class') {
              if (baseMetadata.statics && members.length === 1) {
                  return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);
              }
          }
          else {
              let value = baseMetadata;
              for (let i = 0; i < members.length && value; i++) {
                  value = value[members[i]];
              }
              return new ResolvedStaticSymbol(staticSymbol, value);
          }
          return null;
      }
      _resolveSymbolFromSummary(staticSymbol) {
          const summary = this.summaryResolver.resolveSummary(staticSymbol);
          return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;
      }
      /**
       * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
       * All types passed to the StaticResolver should be pseudo-types returned by this method.
       *
       * @param declarationFile the absolute path of the file where the symbol is declared
       * @param name the name of the type.
       * @param members a symbol for a static member of the named type
       */
      getStaticSymbol(declarationFile, name, members) {
          return this.staticSymbolCache.get(declarationFile, name, members);
      }
      getSymbolsOf(filePath) {
          // Note: Some users use libraries that were not compiled with ngc, i.e. they don't
          // have summaries, only .d.ts files. So we always need to check both, the summary
          // and metadata.
          let symbols = new Set(this.summaryResolver.getSymbolsOf(filePath));
          this._createSymbolsOf(filePath);
          this.resolvedSymbols.forEach((resolvedSymbol) => {
              if (resolvedSymbol.symbol.filePath === filePath) {
                  symbols.add(resolvedSymbol.symbol);
              }
          });
          return Array.from(symbols);
      }
      _createSymbolsOf(filePath) {
          if (this.resolvedFilePaths.has(filePath)) {
              return;
          }
          this.resolvedFilePaths.add(filePath);
          const resolvedSymbols = [];
          const metadata = this.getModuleMetadata(filePath);
          if (metadata['metadata']) {
              // handle direct declarations of the symbol
              const topLevelSymbolNames = new Set(Object.keys(metadata['metadata']).map(unescapeIdentifier));
              Object.keys(metadata['metadata']).forEach((metadataKey) => {
                  const symbolMeta = metadata['metadata'][metadataKey];
                  const name = unescapeIdentifier(metadataKey);
                  const canonicalSymbol = this.getStaticSymbol(filePath, name);
                  if (metadata['importAs']) {
                      // Index bundle indexes should use the importAs module name instead of a reference
                      // to the .d.ts file directly.
                      const importSymbol = this.getStaticSymbol(metadata['importAs'], name);
                      this.recordImportAs(canonicalSymbol, importSymbol);
                  }
                  resolvedSymbols.push(this.createResolvedSymbol(canonicalSymbol, topLevelSymbolNames, symbolMeta));
              });
          }
          // handle the symbols in one of the re-export location
          if (metadata['exports']) {
              for (const moduleExport of metadata['exports']) {
                  // handle the symbols in the list of explicitly re-exported symbols.
                  if (moduleExport.export) {
                      moduleExport.export.forEach((exportSymbol) => {
                          let symbolName;
                          if (typeof exportSymbol === 'string') {
                              symbolName = exportSymbol;
                          }
                          else {
                              symbolName = exportSymbol.as;
                          }
                          symbolName = unescapeIdentifier(symbolName);
                          let symName = symbolName;
                          if (typeof exportSymbol !== 'string') {
                              symName = unescapeIdentifier(exportSymbol.name);
                          }
                          const resolvedModule = this.resolveModule(moduleExport.from, filePath);
                          if (resolvedModule) {
                              const targetSymbol = this.getStaticSymbol(resolvedModule, symName);
                              const sourceSymbol = this.getStaticSymbol(filePath, symbolName);
                              resolvedSymbols.push(this.createExport(sourceSymbol, targetSymbol));
                          }
                      });
                  }
                  else {
                      // handle the symbols via export * directives.
                      const resolvedModule = this.resolveModule(moduleExport.from, filePath);
                      if (resolvedModule) {
                          const nestedExports = this.getSymbolsOf(resolvedModule);
                          nestedExports.forEach((targetSymbol) => {
                              const sourceSymbol = this.getStaticSymbol(filePath, targetSymbol.name);
                              resolvedSymbols.push(this.createExport(sourceSymbol, targetSymbol));
                          });
                      }
                  }
              }
          }
          resolvedSymbols.forEach((resolvedSymbol) => this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol));
      }
      createResolvedSymbol(sourceSymbol, topLevelSymbolNames, metadata) {
          const self = this;
          class ReferenceTransformer extends ValueTransformer {
              visitStringMap(map, functionParams) {
                  const symbolic = map['__symbolic'];
                  if (symbolic === 'function') {
                      const oldLen = functionParams.length;
                      functionParams.push(...(map['parameters'] || []));
                      const result = super.visitStringMap(map, functionParams);
                      functionParams.length = oldLen;
                      return result;
                  }
                  else if (symbolic === 'reference') {
                      const module = map['module'];
                      const name = map['name'] ? unescapeIdentifier(map['name']) : map['name'];
                      if (!name) {
                          return null;
                      }
                      let filePath;
                      if (module) {
                          filePath = self.resolveModule(module, sourceSymbol.filePath);
                          if (!filePath) {
                              return {
                                  __symbolic: 'error',
                                  message: `Could not resolve ${module} relative to ${sourceSymbol.filePath}.`
                              };
                          }
                          return self.getStaticSymbol(filePath, name);
                      }
                      else if (functionParams.indexOf(name) >= 0) {
                          // reference to a function parameter
                          return { __symbolic: 'reference', name: name };
                      }
                      else {
                          if (topLevelSymbolNames.has(name)) {
                              return self.getStaticSymbol(sourceSymbol.filePath, name);
                          }
                          // ambient value
                          null;
                      }
                  }
                  else {
                      return super.visitStringMap(map, functionParams);
                  }
              }
          }
          const transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);
          if (transformedMeta instanceof StaticSymbol) {
              return this.createExport(sourceSymbol, transformedMeta);
          }
          return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);
      }
      createExport(sourceSymbol, targetSymbol) {
          sourceSymbol.assertNoMembers();
          targetSymbol.assertNoMembers();
          if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath)) {
              // This case is for an ng library importing symbols from a plain ts library
              // transitively.
              // Note: We rely on the fact that we discover symbols in the direction
              // from source files to library files
              this.importAs.set(targetSymbol, this.getImportAs(sourceSymbol) || sourceSymbol);
          }
          return new ResolvedStaticSymbol(sourceSymbol, targetSymbol);
      }
      reportError(error, context, path) {
          if (this.errorRecorder) {
              this.errorRecorder(error, (context && context.filePath) || path);
          }
          else {
              throw error;
          }
      }
      /**
       * @param module an absolute path to a module file.
       */
      getModuleMetadata(module) {
          let moduleMetadata = this.metadataCache.get(module);
          if (!moduleMetadata) {
              const moduleMetadatas = this.host.getMetadataFor(module);
              if (moduleMetadatas) {
                  let maxVersion = -1;
                  moduleMetadatas.forEach((md) => {
                      if (md['version'] > maxVersion) {
                          maxVersion = md['version'];
                          moduleMetadata = md;
                      }
                  });
              }
              if (!moduleMetadata) {
                  moduleMetadata =
                      { __symbolic: 'module', version: SUPPORTED_SCHEMA_VERSION, module: module, metadata: {} };
              }
              if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {
                  const errorMessage = moduleMetadata['version'] == 2 ?
                      `Unsupported metadata version ${moduleMetadata['version']} for module ${module}. This module should be compiled with a newer version of ngc` :
                      `Metadata version mismatch for module ${module}, found version ${moduleMetadata['version']}, expected ${SUPPORTED_SCHEMA_VERSION}`;
                  this.reportError(new Error(errorMessage), null);
              }
              this.metadataCache.set(module, moduleMetadata);
          }
          return moduleMetadata;
      }
      getSymbolByModule(module, symbolName, containingFile) {
          const filePath = this.resolveModule(module, containingFile);
          if (!filePath) {
              this.reportError(new Error(`Could not resolve module ${module}${containingFile ? ` relative to $ {
            containingFile
          } ` : ''}`), null);
              return this.getStaticSymbol(`ERROR:${module}`, symbolName);
          }
          return this.getStaticSymbol(filePath, symbolName);
      }
      resolveModule(module, containingFile) {
          try {
              return this.host.moduleNameToFileName(module, containingFile);
          }
          catch (e) {
              console.error(`Could not resolve module '${module}' relative to file ${containingFile}`);
              this.reportError(e, null, containingFile);
          }
      }
  }
  // Remove extra underscore from escaped identifier.
  // See https://github.com/Microsoft/TypeScript/blob/master/src/compiler/utilities.ts
  function unescapeIdentifier(identifier) {
      return identifier.startsWith('___') ? identifier.substr(1) : identifier;
  }

  class AotSummaryResolver {
      constructor(host, staticSymbolCache) {
          this.host = host;
          this.staticSymbolCache = staticSymbolCache;
          // Note: this will only contain StaticSymbols without members!
          this.summaryCache = new Map();
          this.loadedFilePaths = new Set();
          // Note: this will only contain StaticSymbols without members!
          this.importAs = new Map();
      }
      isLibraryFile(filePath) {
          // Note: We need to strip the .ngfactory. file path,
          // so this method also works for generated files
          // (for which host.isSourceFile will always return false).
          return !this.host.isSourceFile(stripNgFactory(filePath));
      }
      getLibraryFileName(filePath) { return this.host.getOutputFileName(filePath); }
      resolveSummary(staticSymbol) {
          staticSymbol.assertNoMembers();
          let summary = this.summaryCache.get(staticSymbol);
          if (!summary) {
              this._loadSummaryFile(staticSymbol.filePath);
              summary = this.summaryCache.get(staticSymbol);
          }
          return summary;
      }
      getSymbolsOf(filePath) {
          this._loadSummaryFile(filePath);
          return Array.from(this.summaryCache.keys()).filter((symbol) => symbol.filePath === filePath);
      }
      getImportAs(staticSymbol) {
          staticSymbol.assertNoMembers();
          return this.importAs.get(staticSymbol);
      }
      _loadSummaryFile(filePath) {
          if (this.loadedFilePaths.has(filePath)) {
              return;
          }
          this.loadedFilePaths.add(filePath);
          if (this.isLibraryFile(filePath)) {
              const summaryFilePath = summaryFileName(filePath);
              let json;
              try {
                  json = this.host.loadSummary(summaryFilePath);
              }
              catch (e) {
                  console.error(`Error loading summary file ${summaryFilePath}`);
                  throw e;
              }
              if (json) {
                  const { summaries, importAs } = deserializeSummaries(this.staticSymbolCache, json);
                  summaries.forEach((summary) => this.summaryCache.set(summary.symbol, summary));
                  importAs.forEach((importAs) => {
                      this.importAs.set(importAs.symbol, this.staticSymbolCache.get(ngfactoryFilePath(filePath), importAs.importAs));
                  });
              }
          }
      }
  }

  /**
   * Creates a new AotCompiler based on options and a host.
   */
  function createAotCompiler(compilerHost, options) {
      let translations = options.translations || '';
      const urlResolver = createOfflineCompileUrlResolver();
      const symbolCache = new StaticSymbolCache();
      const summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);
      const symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);
      const staticReflector = new StaticReflector(symbolResolver);
      StaticAndDynamicReflectionCapabilities.install(staticReflector);
      const console = new Console();
      const htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat, MissingTranslationStrategy.Warning, console);
      const config = new CompilerConfig({
          genDebugInfo: options.debug === true,
          defaultEncapsulation: ViewEncapsulation.Emulated,
          logBindingUpdate: false,
          useJit: false,
          useViewEngine: options.useViewEngine,
          enableLegacyTemplate: options.enableLegacyTemplate !== false,
      });
      const normalizer = new DirectiveNormalizer({ get: (url) => compilerHost.loadResource(url) }, urlResolver, htmlParser, config);
      const expressionParser = new Parser(new Lexer());
      const elementSchemaRegistry = new DomElementSchemaRegistry();
      const tmplParser = new TemplateParser(config, expressionParser, elementSchemaRegistry, htmlParser, console, []);
      const resolver = new CompileMetadataResolver(config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, symbolCache, staticReflector);
      // TODO(vicb): do not pass options.i18nFormat here
      const importResolver = {
          getImportAs: (symbol) => symbolResolver.getImportAs(symbol),
          fileNameToModuleName: (fileName, containingFilePath) => compilerHost.fileNameToModuleName(fileName, containingFilePath),
          getTypeArity: (symbol) => symbolResolver.getTypeArity(symbol)
      };
      const viewCompiler = config.useViewEngine ? new ViewCompilerNext(config, elementSchemaRegistry) :
          new ViewCompiler(config, elementSchemaRegistry);
      const compiler = new AotCompiler(config, compilerHost, resolver, tmplParser, new StyleCompiler(urlResolver), viewCompiler, new DirectiveWrapperCompiler(config, expressionParser, elementSchemaRegistry, console), new NgModuleCompiler(), new TypeScriptEmitter(importResolver), summaryResolver, options.locale, options.i18nFormat, new AnimationParser(elementSchemaRegistry), symbolResolver);
      return { compiler, reflector: staticReflector };
  }

  function interpretStatements(statements, resultVars) {
      const stmtsWithReturn = statements.concat([new ReturnStatement(literalArr(resultVars.map(resultVar => variable(resultVar))))]);
      const ctx = new _ExecutionContext(null, null, null, new Map());
      const visitor = new StatementInterpreter();
      const result = visitor.visitAllStatements(stmtsWithReturn, ctx);
      return isPresent$1(result) ? result.value : null;
  }
  function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
      const childCtx = ctx.createChildWihtLocalVars();
      for (let i = 0; i < varNames.length; i++) {
          childCtx.vars.set(varNames[i], varValues[i]);
      }
      const result = visitor.visitAllStatements(statements, childCtx);
      return result ? result.value : null;
  }
  class _ExecutionContext {
      constructor(parent, instance, className, vars) {
          this.parent = parent;
          this.instance = instance;
          this.className = className;
          this.vars = vars;
      }
      createChildWihtLocalVars() {
          return new _ExecutionContext(this, this.instance, this.className, new Map());
      }
  }
  class ReturnValue {
      constructor(value) {
          this.value = value;
      }
  }
  function createDynamicClass(_classStmt, _ctx, _visitor) {
      const propertyDescriptors = {};
      _classStmt.getters.forEach((getter) => {
          // Note: use `function` instead of arrow function to capture `this`
          propertyDescriptors[getter.name] = {
              configurable: false,
              get: function () {
                  const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
                  return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
              }
          };
      });
      _classStmt.methods.forEach(function (method) {
          const paramNames = method.params.map(param => param.name);
          // Note: use `function` instead of arrow function to capture `this`
          propertyDescriptors[method.name] = {
              writable: false,
              configurable: false,
              value: function (...args) {
                  const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
                  return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
              }
          };
      });
      const ctorParamNames = _classStmt.constructorMethod.params.map(param => param.name);
      // Note: use `function` instead of arrow function to capture `this`
      const ctor = function (...args) {
          const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
          _classStmt.fields.forEach((field) => { this[field.name] = undefined; });
          _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
      };
      const superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
      ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
      return ctor;
  }
  class StatementInterpreter {
      debugAst(ast) { return debugOutputAstAsTypeScript(ast); }
      visitDeclareVarStmt(stmt, ctx) {
          ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
          return null;
      }
      visitWriteVarExpr(expr, ctx) {
          const value = expr.value.visitExpression(this, ctx);
          let currCtx = ctx;
          while (currCtx != null) {
              if (currCtx.vars.has(expr.name)) {
                  currCtx.vars.set(expr.name, value);
                  return value;
              }
              currCtx = currCtx.parent;
          }
          throw new Error(`Not declared variable ${expr.name}`);
      }
      visitReadVarExpr(ast, ctx) {
          let varName = ast.name;
          if (isPresent$1(ast.builtin)) {
              switch (ast.builtin) {
                  case BuiltinVar.Super:
                      return ctx.instance.__proto__;
                  case BuiltinVar.This:
                      return ctx.instance;
                  case BuiltinVar.CatchError:
                      varName = CATCH_ERROR_VAR$2;
                      break;
                  case BuiltinVar.CatchStack:
                      varName = CATCH_STACK_VAR$2;
                      break;
                  default:
                      throw new Error(`Unknown builtin variable ${ast.builtin}`);
              }
          }
          let currCtx = ctx;
          while (currCtx != null) {
              if (currCtx.vars.has(varName)) {
                  return currCtx.vars.get(varName);
              }
              currCtx = currCtx.parent;
          }
          throw new Error(`Not declared variable ${varName}`);
      }
      visitWriteKeyExpr(expr, ctx) {
          const receiver = expr.receiver.visitExpression(this, ctx);
          const index = expr.index.visitExpression(this, ctx);
          const value = expr.value.visitExpression(this, ctx);
          receiver[index] = value;
          return value;
      }
      visitWritePropExpr(expr, ctx) {
          const receiver = expr.receiver.visitExpression(this, ctx);
          const value = expr.value.visitExpression(this, ctx);
          receiver[expr.name] = value;
          return value;
      }
      visitInvokeMethodExpr(expr, ctx) {
          const receiver = expr.receiver.visitExpression(this, ctx);
          const args = this.visitAllExpressions(expr.args, ctx);
          let result;
          if (isPresent$1(expr.builtin)) {
              switch (expr.builtin) {
                  case BuiltinMethod.ConcatArray:
                      result = receiver.concat(...args);
                      break;
                  case BuiltinMethod.SubscribeObservable:
                      result = receiver.subscribe({ next: args[0] });
                      break;
                  case BuiltinMethod.Bind:
                      result = receiver.bind(...args);
                      break;
                  default:
                      throw new Error(`Unknown builtin method ${expr.builtin}`);
              }
          }
          else {
              result = receiver[expr.name].apply(receiver, args);
          }
          return result;
      }
      visitInvokeFunctionExpr(stmt, ctx) {
          const args = this.visitAllExpressions(stmt.args, ctx);
          const fnExpr = stmt.fn;
          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
              ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
              return null;
          }
          else {
              const fn = stmt.fn.visitExpression(this, ctx);
              return fn.apply(null, args);
          }
      }
      visitReturnStmt(stmt, ctx) {
          return new ReturnValue(stmt.value.visitExpression(this, ctx));
      }
      visitDeclareClassStmt(stmt, ctx) {
          const clazz = createDynamicClass(stmt, ctx, this);
          ctx.vars.set(stmt.name, clazz);
          return null;
      }
      visitExpressionStmt(stmt, ctx) {
          return stmt.expr.visitExpression(this, ctx);
      }
      visitIfStmt(stmt, ctx) {
          const condition = stmt.condition.visitExpression(this, ctx);
          if (condition) {
              return this.visitAllStatements(stmt.trueCase, ctx);
          }
          else if (isPresent$1(stmt.falseCase)) {
              return this.visitAllStatements(stmt.falseCase, ctx);
          }
          return null;
      }
      visitTryCatchStmt(stmt, ctx) {
          try {
              return this.visitAllStatements(stmt.bodyStmts, ctx);
          }
          catch (e) {
              const childCtx = ctx.createChildWihtLocalVars();
              childCtx.vars.set(CATCH_ERROR_VAR$2, e);
              childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);
              return this.visitAllStatements(stmt.catchStmts, childCtx);
          }
      }
      visitThrowStmt(stmt, ctx) {
          throw stmt.error.visitExpression(this, ctx);
      }
      visitCommentStmt(stmt, context) { return null; }
      visitInstantiateExpr(ast, ctx) {
          const args = this.visitAllExpressions(ast.args, ctx);
          const clazz = ast.classExpr.visitExpression(this, ctx);
          return new clazz(...args);
      }
      visitLiteralExpr(ast, ctx) { return ast.value; }
      visitExternalExpr(ast, ctx) {
          return ast.value.reference;
      }
      visitConditionalExpr(ast, ctx) {
          if (ast.condition.visitExpression(this, ctx)) {
              return ast.trueCase.visitExpression(this, ctx);
          }
          else if (isPresent$1(ast.falseCase)) {
              return ast.falseCase.visitExpression(this, ctx);
          }
          return null;
      }
      visitNotExpr(ast, ctx) {
          return !ast.condition.visitExpression(this, ctx);
      }
      visitCastExpr(ast, ctx) {
          return ast.value.visitExpression(this, ctx);
      }
      visitFunctionExpr(ast, ctx) {
          const paramNames = ast.params.map((param) => param.name);
          return _declareFn(paramNames, ast.statements, ctx, this);
      }
      visitDeclareFunctionStmt(stmt, ctx) {
          const paramNames = stmt.params.map((param) => param.name);
          ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
          return null;
      }
      visitBinaryOperatorExpr(ast, ctx) {
          const lhs = () => ast.lhs.visitExpression(this, ctx);
          const rhs = () => ast.rhs.visitExpression(this, ctx);
          switch (ast.operator) {
              case BinaryOperator.Equals:
                  return lhs() == rhs();
              case BinaryOperator.Identical:
                  return lhs() === rhs();
              case BinaryOperator.NotEquals:
                  return lhs() != rhs();
              case BinaryOperator.NotIdentical:
                  return lhs() !== rhs();
              case BinaryOperator.And:
                  return lhs() && rhs();
              case BinaryOperator.Or:
                  return lhs() || rhs();
              case BinaryOperator.Plus:
                  return lhs() + rhs();
              case BinaryOperator.Minus:
                  return lhs() - rhs();
              case BinaryOperator.Divide:
                  return lhs() / rhs();
              case BinaryOperator.Multiply:
                  return lhs() * rhs();
              case BinaryOperator.Modulo:
                  return lhs() % rhs();
              case BinaryOperator.Lower:
                  return lhs() < rhs();
              case BinaryOperator.LowerEquals:
                  return lhs() <= rhs();
              case BinaryOperator.Bigger:
                  return lhs() > rhs();
              case BinaryOperator.BiggerEquals:
                  return lhs() >= rhs();
              default:
                  throw new Error(`Unknown operator ${ast.operator}`);
          }
      }
      visitReadPropExpr(ast, ctx) {
          let result;
          const receiver = ast.receiver.visitExpression(this, ctx);
          result = receiver[ast.name];
          return result;
      }
      visitReadKeyExpr(ast, ctx) {
          const receiver = ast.receiver.visitExpression(this, ctx);
          const prop = ast.index.visitExpression(this, ctx);
          return receiver[prop];
      }
      visitLiteralArrayExpr(ast, ctx) {
          return this.visitAllExpressions(ast.entries, ctx);
      }
      visitLiteralMapExpr(ast, ctx) {
          const result = {};
          ast.entries.forEach((entry) => result[entry.key] = entry.value.visitExpression(this, ctx));
          return result;
      }
      visitAllExpressions(expressions, ctx) {
          return expressions.map((expr) => expr.visitExpression(this, ctx));
      }
      visitAllStatements(statements, ctx) {
          for (let i = 0; i < statements.length; i++) {
              const stmt = statements[i];
              const val = stmt.visitStatement(this, ctx);
              if (val instanceof ReturnValue) {
                  return val;
              }
          }
          return null;
      }
  }
  function _declareFn(varNames, statements, ctx, visitor) {
      return (...args) => _executeFunctionStatements(varNames, args, statements, ctx, visitor);
  }
  const CATCH_ERROR_VAR$2 = 'error';
  const CATCH_STACK_VAR$2 = 'stack';

  class AbstractJsEmitterVisitor extends AbstractEmitterVisitor {
      constructor() { super(false); }
      visitDeclareClassStmt(stmt, ctx) {
          ctx.pushClass(stmt);
          this._visitClassConstructor(stmt, ctx);
          if (isPresent$1(stmt.parent)) {
              ctx.print(stmt, `${stmt.name}.prototype = Object.create(`);
              stmt.parent.visitExpression(this, ctx);
              ctx.println(stmt, `.prototype);`);
          }
          stmt.getters.forEach((getter) => this._visitClassGetter(stmt, getter, ctx));
          stmt.methods.forEach((method) => this._visitClassMethod(stmt, method, ctx));
          ctx.popClass();
          return null;
      }
      _visitClassConstructor(stmt, ctx) {
          ctx.print(stmt, `function ${stmt.name}(`);
          if (isPresent$1(stmt.constructorMethod)) {
              this._visitParams(stmt.constructorMethod.params, ctx);
          }
          ctx.println(stmt, `) {`);
          ctx.incIndent();
          if (isPresent$1(stmt.constructorMethod)) {
              if (stmt.constructorMethod.body.length > 0) {
                  ctx.println(stmt, `var self = this;`);
                  this.visitAllStatements(stmt.constructorMethod.body, ctx);
              }
          }
          ctx.decIndent();
          ctx.println(stmt, `}`);
      }
      _visitClassGetter(stmt, getter, ctx) {
          ctx.println(stmt, `Object.defineProperty(${stmt.name}.prototype, '${getter.name}', { get: function() {`);
          ctx.incIndent();
          if (getter.body.length > 0) {
              ctx.println(stmt, `var self = this;`);
              this.visitAllStatements(getter.body, ctx);
          }
          ctx.decIndent();
          ctx.println(stmt, `}});`);
      }
      _visitClassMethod(stmt, method, ctx) {
          ctx.print(stmt, `${stmt.name}.prototype.${method.name} = function(`);
          this._visitParams(method.params, ctx);
          ctx.println(stmt, `) {`);
          ctx.incIndent();
          if (method.body.length > 0) {
              ctx.println(stmt, `var self = this;`);
              this.visitAllStatements(method.body, ctx);
          }
          ctx.decIndent();
          ctx.println(stmt, `};`);
      }
      visitReadVarExpr(ast, ctx) {
          if (ast.builtin === BuiltinVar.This) {
              ctx.print(ast, 'self');
          }
          else if (ast.builtin === BuiltinVar.Super) {
              throw new Error(`'super' needs to be handled at a parent ast node, not at the variable level!`);
          }
          else {
              super.visitReadVarExpr(ast, ctx);
          }
          return null;
      }
      visitDeclareVarStmt(stmt, ctx) {
          ctx.print(stmt, `var ${stmt.name} = `);
          stmt.value.visitExpression(this, ctx);
          ctx.println(stmt, `;`);
          return null;
      }
      visitCastExpr(ast, ctx) {
          ast.value.visitExpression(this, ctx);
          return null;
      }
      visitInvokeFunctionExpr(expr, ctx) {
          const fnExpr = expr.fn;
          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
              ctx.currentClass.parent.visitExpression(this, ctx);
              ctx.print(expr, `.call(this`);
              if (expr.args.length > 0) {
                  ctx.print(expr, `, `);
                  this.visitAllExpressions(expr.args, ctx, ',');
              }
              ctx.print(expr, `)`);
          }
          else {
              super.visitInvokeFunctionExpr(expr, ctx);
          }
          return null;
      }
      visitFunctionExpr(ast, ctx) {
          ctx.print(ast, `function(`);
          this._visitParams(ast.params, ctx);
          ctx.println(ast, `) {`);
          ctx.incIndent();
          this.visitAllStatements(ast.statements, ctx);
          ctx.decIndent();
          ctx.print(ast, `}`);
          return null;
      }
      visitDeclareFunctionStmt(stmt, ctx) {
          ctx.print(stmt, `function ${stmt.name}(`);
          this._visitParams(stmt.params, ctx);
          ctx.println(stmt, `) {`);
          ctx.incIndent();
          this.visitAllStatements(stmt.statements, ctx);
          ctx.decIndent();
          ctx.println(stmt, `}`);
          return null;
      }
      visitTryCatchStmt(stmt, ctx) {
          ctx.println(stmt, `try {`);
          ctx.incIndent();
          this.visitAllStatements(stmt.bodyStmts, ctx);
          ctx.decIndent();
          ctx.println(stmt, `} catch (${CATCH_ERROR_VAR$1.name}) {`);
          ctx.incIndent();
          const catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [
                  StmtModifier.Final
              ])].concat(stmt.catchStmts);
          this.visitAllStatements(catchStmts, ctx);
          ctx.decIndent();
          ctx.println(stmt, `}`);
          return null;
      }
      _visitParams(params, ctx) {
          this.visitAllObjects(param => ctx.print(null, param.name), params, ctx, ',');
      }
      getBuiltinMethodName(method) {
          let name;
          switch (method) {
              case BuiltinMethod.ConcatArray:
                  name = 'concat';
                  break;
              case BuiltinMethod.SubscribeObservable:
                  name = 'subscribe';
                  break;
              case BuiltinMethod.Bind:
                  name = 'bind';
                  break;
              default:
                  throw new Error(`Unknown builtin method: ${method}`);
          }
          return name;
      }
  }

  function evalExpression(sourceUrl, ctx, vars) {
      const fnBody = `${ctx.toSource()}\n//# sourceURL=${sourceUrl}\n${ctx.toSourceMapGenerator().toJsComment()}`;
      const fnArgNames = [];
      const fnArgValues = [];
      for (const argName in vars) {
          fnArgNames.push(argName);
          fnArgValues.push(vars[argName]);
      }
      return new Function(...fnArgNames.concat(fnBody))(...fnArgValues);
  }
  function jitStatements(sourceUrl, statements, resultVars) {
      const converter = new JitEmitterVisitor();
      const ctx = EmitterVisitorContext.createRoot(resultVars);
      const returnStmt = new ReturnStatement(literalArr(resultVars.map(resultVar => variable(resultVar))));
      converter.visitAllStatements(statements.concat([returnStmt]), ctx);
      return evalExpression(sourceUrl, ctx, converter.getArgs());
  }
  class JitEmitterVisitor extends AbstractJsEmitterVisitor {
      constructor() {
          super(...arguments);
          this._evalArgNames = [];
          this._evalArgValues = [];
      }
      getArgs() {
          const result = {};
          for (let i = 0; i < this._evalArgNames.length; i++) {
              result[this._evalArgNames[i]] = this._evalArgValues[i];
          }
          return result;
      }
      visitExternalExpr(ast, ctx) {
          const value = ast.value.reference;
          let id = this._evalArgValues.indexOf(value);
          if (id === -1) {
              id = this._evalArgValues.length;
              this._evalArgValues.push(value);
              const name = identifierName(ast.value) || 'val';
              this._evalArgNames.push(`jit_${name}${id}`);
          }
          ctx.print(ast, this._evalArgNames[id]);
          return null;
      }
  }

  /**
   * An internal module of the Angular compiler that begins with component types,
   * extracts templates, and eventually produces a compiled version of the component
   * ready for linking into an application.
   *
   * @security  When compiling templates at runtime, you must ensure that the entire template comes
   * from a trusted source. Attacker-controlled data introduced by a template could expose your
   * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).
   */
  class JitCompiler {
      constructor(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _directiveWrapperCompiler, _compilerConfig, _animationParser) {
          this._injector = _injector;
          this._metadataResolver = _metadataResolver;
          this._templateParser = _templateParser;
          this._styleCompiler = _styleCompiler;
          this._viewCompiler = _viewCompiler;
          this._ngModuleCompiler = _ngModuleCompiler;
          this._directiveWrapperCompiler = _directiveWrapperCompiler;
          this._compilerConfig = _compilerConfig;
          this._animationParser = _animationParser;
          this._compiledTemplateCache = new Map();
          this._compiledHostTemplateCache = new Map();
          this._compiledDirectiveWrapperCache = new Map();
          this._compiledNgModuleCache = new Map();
          this._animationCompiler = new AnimationCompiler();
      }
      get injector() { return this._injector; }
      compileModuleSync(moduleType) {
          return this._compileModuleAndComponents(moduleType, true).syncResult;
      }
      compileModuleAsync(moduleType) {
          return this._compileModuleAndComponents(moduleType, false).asyncResult;
      }
      compileModuleAndAllComponentsSync(moduleType) {
          return this._compileModuleAndAllComponents(moduleType, true).syncResult;
      }
      compileModuleAndAllComponentsAsync(moduleType) {
          return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
      }
      getNgContentSelectors(component) {
          const template = this._compiledTemplateCache.get(component);
          if (!template) {
              throw new Error(`The component ${stringify$1(component)} is not yet compiled!`);
          }
          return template.compMeta.template.ngContentSelectors;
      }
      _compileModuleAndComponents(moduleType, isSync) {
          const loadingPromise = this._loadModules(moduleType, isSync);
          const createResult = () => {
              this._compileComponents(moduleType, null);
              return this._compileModule(moduleType);
          };
          if (isSync) {
              return new SyncAsyncResult(createResult());
          }
          else {
              return new SyncAsyncResult(null, loadingPromise.then(createResult));
          }
      }
      _compileModuleAndAllComponents(moduleType, isSync) {
          const loadingPromise = this._loadModules(moduleType, isSync);
          const createResult = () => {
              const componentFactories = [];
              this._compileComponents(moduleType, componentFactories);
              return new ModuleWithComponentFactories(this._compileModule(moduleType), componentFactories);
          };
          if (isSync) {
              return new SyncAsyncResult(createResult());
          }
          else {
              return new SyncAsyncResult(null, loadingPromise.then(createResult));
          }
      }
      _loadModules(mainModule, isSync) {
          const loadingPromises = [];
          const ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
          // Note: the loadingPromise for a module only includes the loading of the exported directives
          // of imported modules.
          // However, for runtime compilation, we want to transitively compile all modules,
          // so we also need to call loadNgModuleDirectiveAndPipeMetadata for all nested modules.
          ngModule.transitiveModule.modules.forEach((localModuleMeta) => {
              loadingPromises.push(this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(localModuleMeta.reference, isSync));
          });
          return Promise.all(loadingPromises);
      }
      _compileModule(moduleType) {
          let ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
          if (!ngModuleFactory) {
              const moduleMeta = this._metadataResolver.getNgModuleMetadata(moduleType);
              // Always provide a bound Compiler
              const extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(Compiler, { useFactory: () => new ModuleBoundCompiler(this, moduleMeta.type.reference) }))];
              const compileResult = this._ngModuleCompiler.compile(moduleMeta, extraProviders);
              if (!this._compilerConfig.useJit) {
                  ngModuleFactory =
                      interpretStatements(compileResult.statements, [compileResult.ngModuleFactoryVar])[0];
              }
              else {
                  ngModuleFactory = jitStatements(`/${identifierName(moduleMeta.type)}/module.ngfactory.js`, compileResult.statements, [compileResult.ngModuleFactoryVar])[0];
              }
              this._compiledNgModuleCache.set(moduleMeta.type.reference, ngModuleFactory);
          }
          return ngModuleFactory;
      }
      /**
       * @internal
       */
      _compileComponents(mainModule, allComponentFactories) {
          const ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
          const moduleByDirective = new Map();
          const templates = new Set();
          ngModule.transitiveModule.modules.forEach((localModuleSummary) => {
              const localModuleMeta = this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
              localModuleMeta.declaredDirectives.forEach((dirIdentifier) => {
                  moduleByDirective.set(dirIdentifier.reference, localModuleMeta);
                  const dirMeta = this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
                  this._compileDirectiveWrapper(dirMeta, localModuleMeta);
                  if (dirMeta.isComponent) {
                      templates.add(this._createCompiledTemplate(dirMeta, localModuleMeta));
                      if (allComponentFactories) {
                          const template = this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
                          templates.add(template);
                          allComponentFactories.push(dirMeta.componentFactory);
                      }
                  }
              });
          });
          ngModule.transitiveModule.modules.forEach((localModuleSummary) => {
              const localModuleMeta = this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
              localModuleMeta.declaredDirectives.forEach((dirIdentifier) => {
                  const dirMeta = this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
                  if (dirMeta.isComponent) {
                      dirMeta.entryComponents.forEach((entryComponentType) => {
                          const moduleMeta = moduleByDirective.get(entryComponentType.componentType);
                          templates.add(this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
                      });
                  }
              });
              localModuleMeta.entryComponents.forEach((entryComponentType) => {
                  const moduleMeta = moduleByDirective.get(entryComponentType.componentType);
                  templates.add(this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
              });
          });
          templates.forEach((template) => this._compileTemplate(template));
      }
      clearCacheFor(type) {
          this._compiledNgModuleCache.delete(type);
          this._metadataResolver.clearCacheFor(type);
          this._compiledHostTemplateCache.delete(type);
          const compiledTemplate = this._compiledTemplateCache.get(type);
          if (compiledTemplate) {
              this._compiledTemplateCache.delete(type);
          }
      }
      clearCache() {
          this._metadataResolver.clearCache();
          this._compiledTemplateCache.clear();
          this._compiledHostTemplateCache.clear();
          this._compiledNgModuleCache.clear();
      }
      _createCompiledHostTemplate(compType, ngModule) {
          if (!ngModule) {
              throw new Error(`Component ${stringify$1(compType)} is not part of any NgModule or the module has not been imported into your module.`);
          }
          let compiledTemplate = this._compiledHostTemplateCache.get(compType);
          if (!compiledTemplate) {
              const compMeta = this._metadataResolver.getDirectiveMetadata(compType);
              assertComponent(compMeta);
              const componentFactory = compMeta.componentFactory;
              const hostClass = this._metadataResolver.getHostComponentType(compType);
              const hostMeta = createHostComponentMeta(hostClass, compMeta, getComponentFactoryViewClass(componentFactory));
              compiledTemplate =
                  new CompiledTemplate(true, compMeta.type, hostMeta, ngModule, [compMeta.type]);
              this._compiledHostTemplateCache.set(compType, compiledTemplate);
          }
          return compiledTemplate;
      }
      _createCompiledTemplate(compMeta, ngModule) {
          let compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
          if (!compiledTemplate) {
              assertComponent(compMeta);
              compiledTemplate = new CompiledTemplate(false, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);
              this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
          }
          return compiledTemplate;
      }
      _compileDirectiveWrapper(dirMeta, moduleMeta) {
          if (this._compilerConfig.useViewEngine) {
              return;
          }
          const compileResult = this._directiveWrapperCompiler.compile(dirMeta);
          const statements = compileResult.statements;
          let directiveWrapperClass;
          if (!this._compilerConfig.useJit) {
              directiveWrapperClass =
                  interpretStatements(statements, [compileResult.dirWrapperClassVar])[0];
          }
          else {
              directiveWrapperClass = jitStatements(`/${identifierName(moduleMeta.type)}/${identifierName(dirMeta.type)}/wrapper.ngfactory.js`, statements, [compileResult.dirWrapperClassVar])[0];
          }
          dirMeta.wrapperType.setDelegate(directiveWrapperClass);
          this._compiledDirectiveWrapperCache.set(dirMeta.type.reference, directiveWrapperClass);
      }
      _compileTemplate(template) {
          if (template.isCompiled) {
              return;
          }
          const compMeta = template.compMeta;
          const externalStylesheetsByModuleUrl = new Map();
          const stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
          stylesCompileResult.externalStylesheets.forEach((r) => { externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r); });
          this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
          const parsedAnimations = this._compilerConfig.useViewEngine ? [] : this._animationParser.parseComponent(compMeta);
          const directives = template.directives.map(dir => this._metadataResolver.getDirectiveSummary(dir.reference));
          const pipes = template.ngModule.transitiveModule.pipes.map(pipe => this._metadataResolver.getPipeSummary(pipe.reference));
          const { template: parsedTemplate, pipes: usedPipes } = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, identifierName(compMeta.type));
          const compiledAnimations = this._compilerConfig.useViewEngine ?
              [] :
              this._animationCompiler.compile(identifierName(compMeta.type), parsedAnimations);
          const compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), usedPipes, compiledAnimations);
          const statements = stylesCompileResult.componentStylesheet.statements
              .concat(...compiledAnimations.map(ca => ca.statements))
              .concat(compileResult.statements);
          let viewClass;
          let rendererType;
          if (!this._compilerConfig.useJit) {
              [viewClass, rendererType] = interpretStatements(statements, [compileResult.viewClassVar, compileResult.rendererTypeVar]);
          }
          else {
              const sourceUrl = `/${identifierName(template.ngModule.type)}/${identifierName(template.compType)}/${template.isHost ? 'host' : 'component'}.ngfactory.js`;
              [viewClass, rendererType] = jitStatements(sourceUrl, statements, [compileResult.viewClassVar, compileResult.rendererTypeVar]);
          }
          template.compiled(viewClass, rendererType);
      }
      _resolveStylesCompileResult(result, externalStylesheetsByModuleUrl) {
          result.dependencies.forEach((dep, i) => {
              const nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
              const nestedStylesArr = this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
              dep.valuePlaceholder.reference = nestedStylesArr;
          });
      }
      _resolveAndEvalStylesCompileResult(result, externalStylesheetsByModuleUrl) {
          this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
          if (!this._compilerConfig.useJit) {
              return interpretStatements(result.statements, [result.stylesVar])[0];
          }
          else {
              return jitStatements(`/${result.meta.moduleUrl}.ngstyle.js`, result.statements, [result.stylesVar])[0];
          }
      }
  }
  JitCompiler.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  JitCompiler.ctorParameters = () => [
      { type: Injector, },
      { type: CompileMetadataResolver, },
      { type: TemplateParser, },
      { type: StyleCompiler, },
      { type: ViewCompiler, },
      { type: NgModuleCompiler, },
      { type: DirectiveWrapperCompiler, },
      { type: CompilerConfig, },
      { type: AnimationParser, },
  ];
  class CompiledTemplate {
      constructor(isHost, compType, compMeta, ngModule, directives) {
          this.isHost = isHost;
          this.compType = compType;
          this.compMeta = compMeta;
          this.ngModule = ngModule;
          this.directives = directives;
          this._viewClass = null;
          this.isCompiled = false;
      }
      compiled(viewClass, rendererType) {
          this._viewClass = viewClass;
          this.compMeta.componentViewType.setDelegate(viewClass);
          for (let prop in rendererType) {
              this.compMeta.rendererType[prop] = rendererType[prop];
          }
          this.isCompiled = true;
      }
  }
  function assertComponent(meta) {
      if (!meta.isComponent) {
          throw new Error(`Could not compile '${identifierName(meta.type)}' because it is not a component.`);
      }
  }
  /**
   * Implements `Compiler` by delegating to the JitCompiler using a known module.
   */
  class ModuleBoundCompiler {
      constructor(_delegate, _ngModule) {
          this._delegate = _delegate;
          this._ngModule = _ngModule;
      }
      get _injector() { return this._delegate.injector; }
      compileModuleSync(moduleType) {
          return this._delegate.compileModuleSync(moduleType);
      }
      compileModuleAsync(moduleType) {
          return this._delegate.compileModuleAsync(moduleType);
      }
      compileModuleAndAllComponentsSync(moduleType) {
          return this._delegate.compileModuleAndAllComponentsSync(moduleType);
      }
      compileModuleAndAllComponentsAsync(moduleType) {
          return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
      }
      getNgContentSelectors(component) {
          return this._delegate.getNgContentSelectors(component);
      }
      /**
       * Clears all caches
       */
      clearCache() { this._delegate.clearCache(); }
      /**
       * Clears the cache for the given component/ngModule.
       */
      clearCacheFor(type) { this._delegate.clearCacheFor(type); }
  }

  /**
   * A container for message extracted from the templates.
   */
  class MessageBundle {
      constructor(_htmlParser, _implicitTags, _implicitAttrs, _locale = null) {
          this._htmlParser = _htmlParser;
          this._implicitTags = _implicitTags;
          this._implicitAttrs = _implicitAttrs;
          this._locale = _locale;
          this._messages = [];
      }
      updateFromTemplate(html, url, interpolationConfig) {
          const htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
          if (htmlParserResult.errors.length) {
              return htmlParserResult.errors;
          }
          const i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
          if (i18nParserResult.errors.length) {
              return i18nParserResult.errors;
          }
          this._messages.push(...i18nParserResult.messages);
      }
      // Return the message in the internal format
      // The public (serialized) format might be different, see the `write` method.
      getMessages() { return this._messages; }
      write(serializer) {
          const messages = {};
          const mapperVisitor = new MapPlaceholderNames();
          // Deduplicate messages based on their ID
          this._messages.forEach(message => {
              const id = serializer.digest(message);
              if (!messages.hasOwnProperty(id)) {
                  messages[id] = message;
              }
          });
          // Transform placeholder names using the serializer mapping
          const msgList = Object.keys(messages).map(id => {
              const mapper = serializer.createNameMapper(messages[id]);
              const src = messages[id];
              const nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;
              return new Message(nodes, {}, {}, src.meaning, src.description, id);
          });
          return serializer.write(msgList, this._locale);
      }
  }
  // Transform an i18n AST by renaming the placeholder nodes with the given mapper
  class MapPlaceholderNames extends CloneVisitor {
      convert(nodes, mapper) {
          return mapper ? nodes.map(n => n.visit(this, mapper)) : nodes;
      }
      visitTagPlaceholder(ph, mapper) {
          const startName = mapper.toPublicName(ph.startName);
          const closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;
          const children = ph.children.map(n => n.visit(this, mapper));
          return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);
      }
      visitPlaceholder(ph, mapper) {
          return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
      }
      visitIcuPlaceholder(ph, mapper) {
          return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
      }
  }

  class Extractor {
      constructor(host, staticSymbolResolver, messageBundle, metadataResolver) {
          this.host = host;
          this.staticSymbolResolver = staticSymbolResolver;
          this.messageBundle = messageBundle;
          this.metadataResolver = metadataResolver;
      }
      extract(rootFiles) {
          const programSymbols = extractProgramSymbols(this.staticSymbolResolver, rootFiles, this.host);
          const { files, ngModules } = analyzeAndValidateNgModules(programSymbols, this.host, this.metadataResolver);
          return Promise
              .all(ngModules.map(ngModule => this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false)))
              .then(() => {
              const errors = [];
              files.forEach(file => {
                  const compMetas = [];
                  file.directives.forEach(directiveType => {
                      const dirMeta = this.metadataResolver.getDirectiveMetadata(directiveType);
                      if (dirMeta && dirMeta.isComponent) {
                          compMetas.push(dirMeta);
                      }
                  });
                  compMetas.forEach(compMeta => {
                      const html = compMeta.template.template;
                      const interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);
                      errors.push(...this.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig));
                  });
              });
              if (errors.length) {
                  throw new Error(errors.map(e => e.toString()).join('\n'));
              }
              return this.messageBundle;
          });
      }
      static create(host, locale) {
          const htmlParser = new I18NHtmlParser(new HtmlParser());
          const urlResolver = createOfflineCompileUrlResolver();
          const symbolCache = new StaticSymbolCache();
          const summaryResolver = new AotSummaryResolver(host, symbolCache);
          const staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);
          const staticReflector = new StaticReflector(staticSymbolResolver);
          StaticAndDynamicReflectionCapabilities.install(staticReflector);
          const config = new CompilerConfig({
              genDebugInfo: false,
              defaultEncapsulation: ViewEncapsulation.Emulated,
              logBindingUpdate: false,
              useJit: false
          });
          const normalizer = new DirectiveNormalizer({ get: (url) => host.loadResource(url) }, urlResolver, htmlParser, config);
          const elementSchemaRegistry = new DomElementSchemaRegistry();
          const resolver = new CompileMetadataResolver(config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, symbolCache, staticReflector);
          // TODO(vicb): implicit tags & attributes
          const messageBundle = new MessageBundle(htmlParser, [], {}, locale);
          const extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);
          return { extractor, staticReflector };
      }
  }

  const _NO_RESOURCE_LOADER = {
      get(url) {
          throw new Error(`No ResourceLoader implementation has been provided. Can't read the url "${url}"`);
      }
  };
  const baseHtmlParser = new InjectionToken('HtmlParser');
  function viewCompilerFactory(cc, sr) {
      return cc.useViewEngine ? new ViewCompilerNext(cc, sr) : new ViewCompiler(cc, sr);
  }
  /**
   * A set of providers that provide `JitCompiler` and its dependencies to use for
   * template compilation.
   */
  const COMPILER_PROVIDERS = [
      { provide: Reflector, useValue: reflector },
      { provide: ReflectorReader, useExisting: Reflector },
      { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER },
      SummaryResolver,
      Console,
      Lexer,
      Parser,
      {
          provide: baseHtmlParser,
          useClass: HtmlParser,
      },
      {
          provide: I18NHtmlParser,
          useFactory: (parser, translations, format, config, console) => new I18NHtmlParser(parser, translations, format, config.missingTranslation, console),
          deps: [
              baseHtmlParser,
              [new Optional(), new Inject(TRANSLATIONS)],
              [new Optional(), new Inject(TRANSLATIONS_FORMAT)],
              [CompilerConfig],
              [Console],
          ]
      },
      {
          provide: HtmlParser,
          useExisting: I18NHtmlParser,
      },
      TemplateParser,
      DirectiveNormalizer,
      CompileMetadataResolver,
      DEFAULT_PACKAGE_URL_PROVIDER,
      StyleCompiler,
      { provide: USE_VIEW_ENGINE, useValue: false },
      {
          provide: ViewCompiler,
          useFactory: viewCompilerFactory,
          deps: [CompilerConfig, ElementSchemaRegistry]
      },
      NgModuleCompiler,
      DirectiveWrapperCompiler,
      { provide: CompilerConfig, useValue: new CompilerConfig() },
      JitCompiler,
      { provide: Compiler, useExisting: JitCompiler },
      DomElementSchemaRegistry,
      { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },
      UrlResolver,
      DirectiveResolver,
      PipeResolver,
      NgModuleResolver,
      AnimationParser,
  ];
  class JitCompilerFactory {
      constructor(defaultOptions) {
          const compilerOptions = {
              useDebug: isDevMode(),
              useJit: true,
              defaultEncapsulation: ViewEncapsulation.Emulated,
              missingTranslation: MissingTranslationStrategy.Warning,
              enableLegacyTemplate: true,
          };
          this._defaultOptions = [compilerOptions, ...defaultOptions];
      }
      createCompiler(options = []) {
          const opts = _mergeOptions(this._defaultOptions.concat(options));
          const injector = ReflectiveInjector.resolveAndCreate([
              COMPILER_PROVIDERS, {
                  provide: CompilerConfig,
                  useFactory: (useViewEngine) => {
                      return new CompilerConfig({
                          // let explicit values from the compiler options overwrite options
                          // from the app providers. E.g. important for the testing platform.
                          genDebugInfo: opts.useDebug,
                          // let explicit values from the compiler options overwrite options
                          // from the app providers
                          useJit: opts.useJit,
                          // let explicit values from the compiler options overwrite options
                          // from the app providers
                          defaultEncapsulation: opts.defaultEncapsulation,
                          logBindingUpdate: opts.useDebug,
                          missingTranslation: opts.missingTranslation, useViewEngine,
                          enableLegacyTemplate: opts.enableLegacyTemplate,
                      });
                  },
                  deps: [USE_VIEW_ENGINE]
              },
              opts.providers
          ]);
          return injector.get(Compiler);
      }
  }
  JitCompilerFactory.decorators = [
      { type: CompilerInjectable },
  ];
  /** @nocollapse */
  JitCompilerFactory.ctorParameters = () => [
      { type: Array, decorators: [{ type: Inject, args: [COMPILER_OPTIONS,] },] },
  ];
  function _initReflector() {
      reflector.reflectionCapabilities = new ReflectionCapabilities();
  }
  /**
   * A platform that included corePlatform and the compiler.
   *
   * @experimental
   */
  const platformCoreDynamic = createPlatformFactory(platformCore, 'coreDynamic', [
      { provide: COMPILER_OPTIONS, useValue: {}, multi: true },
      { provide: CompilerFactory, useClass: JitCompilerFactory },
      { provide: PLATFORM_INITIALIZER, useValue: _initReflector, multi: true },
  ]);
  function _mergeOptions(optionsArr) {
      return {
          useDebug: _lastDefined(optionsArr.map(options => options.useDebug)),
          useJit: _lastDefined(optionsArr.map(options => options.useJit)),
          defaultEncapsulation: _lastDefined(optionsArr.map(options => options.defaultEncapsulation)),
          providers: _mergeArrays(optionsArr.map(options => options.providers)),
          missingTranslation: _lastDefined(optionsArr.map(options => options.missingTranslation)),
      };
  }
  function _lastDefined(args) {
      for (let i = args.length - 1; i >= 0; i--) {
          if (args[i] !== undefined) {
              return args[i];
          }
      }
      return undefined;
  }
  function _mergeArrays(parts) {
      const result = [];
      parts.forEach((part) => part && result.push(...part));
      return result;
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var AstPath$1 = (function () {
      function AstPath(path) {
          this.path = path;
      }
      Object.defineProperty(AstPath.prototype, "empty", {
          get: function () { return !this.path || !this.path.length; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(AstPath.prototype, "head", {
          get: function () { return this.path[0]; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(AstPath.prototype, "tail", {
          get: function () { return this.path[this.path.length - 1]; },
          enumerable: true,
          configurable: true
      });
      AstPath.prototype.parentOf = function (node) { return this.path[this.path.indexOf(node) - 1]; };
      AstPath.prototype.childOf = function (node) { return this.path[this.path.indexOf(node) + 1]; };
      AstPath.prototype.first = function (ctor) {
          for (var i = this.path.length - 1; i >= 0; i--) {
              var item = this.path[i];
              if (item instanceof ctor)
                  return item;
          }
      };
      AstPath.prototype.push = function (node) { this.path.push(node); };
      AstPath.prototype.pop = function () { return this.path.pop(); };
      return AstPath;
  }());

  function isParseSourceSpan(value) {
      return value && !!value.start;
  }
  function spanOf(span) {
      if (!span)
          return undefined;
      if (isParseSourceSpan(span)) {
          return { start: span.start.offset, end: span.end.offset };
      }
      else {
          if (span.endSourceSpan) {
              return { start: span.sourceSpan.start.offset, end: span.endSourceSpan.end.offset };
          }
          else if (span.children && span.children.length) {
              return {
                  start: span.sourceSpan.start.offset,
                  end: spanOf(span.children[span.children.length - 1]).end
              };
          }
          return { start: span.sourceSpan.start.offset, end: span.sourceSpan.end.offset };
      }
  }
  function inSpan(position, span, exclusive) {
      return span && exclusive ? position >= span.start && position < span.end :
          position >= span.start && position <= span.end;
  }
  function offsetSpan(span, amount) {
      return { start: span.start + amount, end: span.end + amount };
  }
  function isNarrower(spanA, spanB) {
      return spanA.start >= spanB.start && spanA.end <= spanB.end;
  }
  function hasTemplateReference(type) {
      if (type.diDeps) {
          for (var _i = 0, _a = type.diDeps; _i < _a.length; _i++) {
              var diDep = _a[_i];
              if (diDep.token.identifier && identifierName(diDep.token.identifier) == 'TemplateRef')
                  return true;
          }
      }
      return false;
  }
  function getSelectors(info) {
      var map = new Map();
      var selectors = flatten(info.directives.map(function (directive) {
          var selectors = CssSelector.parse(directive.selector);
          selectors.forEach(function (selector) { return map.set(selector, directive); });
          return selectors;
      }));
      return { selectors: selectors, map: map };
  }
  function flatten(a) {
      return (_a = []).concat.apply(_a, a);
      var _a;
  }
  function removeSuffix(value, suffix) {
      if (value.endsWith(suffix))
          return value.substring(0, value.length - suffix.length);
      return value;
  }
  function uniqueByName(elements) {
      if (elements) {
          var result = [];
          var set = new Set();
          for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
              var element = elements_1[_i];
              if (!set.has(element.name)) {
                  set.add(element.name);
                  result.push(element);
              }
          }
          return result;
      }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var __extends$14 = (this && this.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var TemplateAstPath = (function (_super) {
      __extends$14(TemplateAstPath, _super);
      function TemplateAstPath(ast, position, allowWidening) {
          if (allowWidening === void 0) { allowWidening = false; }
          var _this = _super.call(this, buildTemplatePath(ast, position, allowWidening)) || this;
          _this.position = position;
          return _this;
      }
      return TemplateAstPath;
  }(AstPath$1));
  function buildTemplatePath(ast, position, allowWidening) {
      if (allowWidening === void 0) { allowWidening = false; }
      var visitor = new TemplateAstPathBuilder(position, allowWidening);
      templateVisitAll(visitor, ast);
      return visitor.getPath();
  }
  var NullTemplateVisitor = (function () {
      function NullTemplateVisitor() {
      }
      NullTemplateVisitor.prototype.visitNgContent = function (ast) { };
      NullTemplateVisitor.prototype.visitEmbeddedTemplate = function (ast) { };
      NullTemplateVisitor.prototype.visitElement = function (ast) { };
      NullTemplateVisitor.prototype.visitReference = function (ast) { };
      NullTemplateVisitor.prototype.visitVariable = function (ast) { };
      NullTemplateVisitor.prototype.visitEvent = function (ast) { };
      NullTemplateVisitor.prototype.visitElementProperty = function (ast) { };
      NullTemplateVisitor.prototype.visitAttr = function (ast) { };
      NullTemplateVisitor.prototype.visitBoundText = function (ast) { };
      NullTemplateVisitor.prototype.visitText = function (ast) { };
      NullTemplateVisitor.prototype.visitDirective = function (ast) { };
      NullTemplateVisitor.prototype.visitDirectiveProperty = function (ast) { };
      return NullTemplateVisitor;
  }());
  var TemplateAstChildVisitor = (function () {
      function TemplateAstChildVisitor(visitor) {
          this.visitor = visitor;
      }
      // Nodes with children
      TemplateAstChildVisitor.prototype.visitEmbeddedTemplate = function (ast, context) {
          return this.visitChildren(context, function (visit) {
              visit(ast.attrs);
              visit(ast.references);
              visit(ast.variables);
              visit(ast.directives);
              visit(ast.providers);
              visit(ast.children);
          });
      };
      TemplateAstChildVisitor.prototype.visitElement = function (ast, context) {
          return this.visitChildren(context, function (visit) {
              visit(ast.attrs);
              visit(ast.inputs);
              visit(ast.outputs);
              visit(ast.references);
              visit(ast.directives);
              visit(ast.providers);
              visit(ast.children);
          });
      };
      TemplateAstChildVisitor.prototype.visitDirective = function (ast, context) {
          return this.visitChildren(context, function (visit) {
              visit(ast.inputs);
              visit(ast.hostProperties);
              visit(ast.hostEvents);
          });
      };
      // Terminal nodes
      TemplateAstChildVisitor.prototype.visitNgContent = function (ast, context) { };
      TemplateAstChildVisitor.prototype.visitReference = function (ast, context) { };
      TemplateAstChildVisitor.prototype.visitVariable = function (ast, context) { };
      TemplateAstChildVisitor.prototype.visitEvent = function (ast, context) { };
      TemplateAstChildVisitor.prototype.visitElementProperty = function (ast, context) { };
      TemplateAstChildVisitor.prototype.visitAttr = function (ast, context) { };
      TemplateAstChildVisitor.prototype.visitBoundText = function (ast, context) { };
      TemplateAstChildVisitor.prototype.visitText = function (ast, context) { };
      TemplateAstChildVisitor.prototype.visitDirectiveProperty = function (ast, context) { };
      TemplateAstChildVisitor.prototype.visitChildren = function (context, cb) {
          var visitor = this.visitor || this;
          var results = [];
          function visit(children) {
              if (children && children.length)
                  results.push(templateVisitAll(visitor, children, context));
          }
          cb(visit);
          return [].concat.apply([], results);
      };
      return TemplateAstChildVisitor;
  }());
  var TemplateAstPathBuilder = (function (_super) {
      __extends$14(TemplateAstPathBuilder, _super);
      function TemplateAstPathBuilder(position, allowWidening) {
          var _this = _super.call(this) || this;
          _this.position = position;
          _this.allowWidening = allowWidening;
          _this.path = [];
          return _this;
      }
      TemplateAstPathBuilder.prototype.visit = function (ast, context) {
          var span = spanOf(ast);
          if (inSpan(this.position, span)) {
              var len = this.path.length;
              if (!len || this.allowWidening || isNarrower(span, spanOf(this.path[len - 1]))) {
                  this.path.push(ast);
              }
          }
          else {
              // Returning a value here will result in the children being skipped.
              return true;
          }
      };
      TemplateAstPathBuilder.prototype.visitEmbeddedTemplate = function (ast, context) {
          return this.visitChildren(context, function (visit) {
              // Ignore reference, variable and providers
              visit(ast.attrs);
              visit(ast.directives);
              visit(ast.children);
          });
      };
      TemplateAstPathBuilder.prototype.visitElement = function (ast, context) {
          return this.visitChildren(context, function (visit) {
              // Ingnore providers
              visit(ast.attrs);
              visit(ast.inputs);
              visit(ast.outputs);
              visit(ast.references);
              visit(ast.directives);
              visit(ast.children);
          });
      };
      TemplateAstPathBuilder.prototype.visitDirective = function (ast, context) {
          // Ignore the host properties of a directive
          var result = this.visitChildren(context, function (visit) { visit(ast.inputs); });
          // We never care about the diretive itself, just its inputs.
          if (this.path[this.path.length - 1] == ast) {
              this.path.pop();
          }
          return result;
      };
      TemplateAstPathBuilder.prototype.getPath = function () { return this.path; };
      return TemplateAstPathBuilder;
  }(TemplateAstChildVisitor));

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * An enumeration of basic types.
   *
   * A `LanguageServiceHost` interface.
   *
   * @experimental
   */
  var BuiltinType$1;
  (function (BuiltinType) {
      /**
       * The type is a type that can hold any other type.
       */
      BuiltinType[BuiltinType["Any"] = 0] = "Any";
      /**
       * The type of a string literal.
       */
      BuiltinType[BuiltinType["String"] = 1] = "String";
      /**
       * The type of a numeric literal.
       */
      BuiltinType[BuiltinType["Number"] = 2] = "Number";
      /**
       * The type of the `true` and `false` literals.
       */
      BuiltinType[BuiltinType["Boolean"] = 3] = "Boolean";
      /**
       * The type of the `undefined` literal.
       */
      BuiltinType[BuiltinType["Undefined"] = 4] = "Undefined";
      /**
       * the type of the `null` literal.
       */
      BuiltinType[BuiltinType["Null"] = 5] = "Null";
      /**
       * the type is an unbound type parameter.
       */
      BuiltinType[BuiltinType["Unbound"] = 6] = "Unbound";
      /**
       * Not a built-in type.
       */
      BuiltinType[BuiltinType["Other"] = 7] = "Other";
  })(BuiltinType$1 || (BuiltinType$1 = {}));
  /**
   * The kind of diagnostic message.
   *
   * @experimental
   */
  var DiagnosticKind;
  (function (DiagnosticKind) {
      DiagnosticKind[DiagnosticKind["Error"] = 0] = "Error";
      DiagnosticKind[DiagnosticKind["Warning"] = 1] = "Warning";
  })(DiagnosticKind || (DiagnosticKind = {}));

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var __extends$13 = (this && this.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function getExpressionDiagnostics(scope, ast, query, context) {
      if (context === void 0) { context = {}; }
      var analyzer = new AstType(scope, query, context);
      analyzer.getDiagnostics(ast);
      return analyzer.diagnostics;
  }
  function getExpressionCompletions(scope, ast, position, query) {
      var path = new AstPath(ast, position);
      if (path.empty)
          return undefined;
      var tail = path.tail;
      var result = scope;
      function getType(ast) { return new AstType(scope, query, {}).getType(ast); }
      // If the completion request is in a not in a pipe or property access then the global scope
      // (that is the scope of the implicit receiver) is the right scope as the user is typing the
      // beginning of an expression.
      tail.visit({
          visitBinary: function (ast) { },
          visitChain: function (ast) { },
          visitConditional: function (ast) { },
          visitFunctionCall: function (ast) { },
          visitImplicitReceiver: function (ast) { },
          visitInterpolation: function (ast) { result = undefined; },
          visitKeyedRead: function (ast) { },
          visitKeyedWrite: function (ast) { },
          visitLiteralArray: function (ast) { },
          visitLiteralMap: function (ast) { },
          visitLiteralPrimitive: function (ast) { },
          visitMethodCall: function (ast) { },
          visitPipe: function (ast) {
              if (position >= ast.exp.span.end &&
                  (!ast.args || !ast.args.length || position < ast.args[0].span.start)) {
                  // We are in a position a pipe name is expected.
                  result = query.getPipes();
              }
          },
          visitPrefixNot: function (ast) { },
          visitPropertyRead: function (ast) {
              var receiverType = getType(ast.receiver);
              result = receiverType ? receiverType.members() : scope;
          },
          visitPropertyWrite: function (ast) {
              var receiverType = getType(ast.receiver);
              result = receiverType ? receiverType.members() : scope;
          },
          visitQuote: function (ast) {
              // For a quote, return the members of any (if there are any).
              result = query.getBuiltinType(BuiltinType$1.Any).members();
          },
          visitSafeMethodCall: function (ast) {
              var receiverType = getType(ast.receiver);
              result = receiverType ? receiverType.members() : scope;
          },
          visitSafePropertyRead: function (ast) {
              var receiverType = getType(ast.receiver);
              result = receiverType ? receiverType.members() : scope;
          },
      });
      return result && result.values();
  }
  function getExpressionSymbol(scope, ast, position, query) {
      var path = new AstPath(ast, position, /* excludeEmpty */ true);
      if (path.empty)
          return undefined;
      var tail = path.tail;
      function getType(ast) { return new AstType(scope, query, {}).getType(ast); }
      var symbol = undefined;
      var span = undefined;
      // If the completion request is in a not in a pipe or property access then the global scope
      // (that is the scope of the implicit receiver) is the right scope as the user is typing the
      // beginning of an expression.
      tail.visit({
          visitBinary: function (ast) { },
          visitChain: function (ast) { },
          visitConditional: function (ast) { },
          visitFunctionCall: function (ast) { },
          visitImplicitReceiver: function (ast) { },
          visitInterpolation: function (ast) { },
          visitKeyedRead: function (ast) { },
          visitKeyedWrite: function (ast) { },
          visitLiteralArray: function (ast) { },
          visitLiteralMap: function (ast) { },
          visitLiteralPrimitive: function (ast) { },
          visitMethodCall: function (ast) {
              var receiverType = getType(ast.receiver);
              symbol = receiverType && receiverType.members().get(ast.name);
              span = ast.span;
          },
          visitPipe: function (ast) {
              if (position >= ast.exp.span.end &&
                  (!ast.args || !ast.args.length || position < ast.args[0].span.start)) {
                  // We are in a position a pipe name is expected.
                  var pipes = query.getPipes();
                  if (pipes) {
                      symbol = pipes.get(ast.name);
                      span = ast.span;
                  }
              }
          },
          visitPrefixNot: function (ast) { },
          visitPropertyRead: function (ast) {
              var receiverType = getType(ast.receiver);
              symbol = receiverType && receiverType.members().get(ast.name);
              span = ast.span;
          },
          visitPropertyWrite: function (ast) {
              var receiverType = getType(ast.receiver);
              symbol = receiverType && receiverType.members().get(ast.name);
              span = ast.span;
          },
          visitQuote: function (ast) { },
          visitSafeMethodCall: function (ast) {
              var receiverType = getType(ast.receiver);
              symbol = receiverType && receiverType.members().get(ast.name);
              span = ast.span;
          },
          visitSafePropertyRead: function (ast) {
              var receiverType = getType(ast.receiver);
              symbol = receiverType && receiverType.members().get(ast.name);
              span = ast.span;
          },
      });
      if (symbol && span) {
          return { symbol: symbol, span: span };
      }
  }
  // Consider moving to expression_parser/ast
  var NullVisitor = (function () {
      function NullVisitor() {
      }
      NullVisitor.prototype.visitBinary = function (ast) { };
      NullVisitor.prototype.visitChain = function (ast) { };
      NullVisitor.prototype.visitConditional = function (ast) { };
      NullVisitor.prototype.visitFunctionCall = function (ast) { };
      NullVisitor.prototype.visitImplicitReceiver = function (ast) { };
      NullVisitor.prototype.visitInterpolation = function (ast) { };
      NullVisitor.prototype.visitKeyedRead = function (ast) { };
      NullVisitor.prototype.visitKeyedWrite = function (ast) { };
      NullVisitor.prototype.visitLiteralArray = function (ast) { };
      NullVisitor.prototype.visitLiteralMap = function (ast) { };
      NullVisitor.prototype.visitLiteralPrimitive = function (ast) { };
      NullVisitor.prototype.visitMethodCall = function (ast) { };
      NullVisitor.prototype.visitPipe = function (ast) { };
      NullVisitor.prototype.visitPrefixNot = function (ast) { };
      NullVisitor.prototype.visitPropertyRead = function (ast) { };
      NullVisitor.prototype.visitPropertyWrite = function (ast) { };
      NullVisitor.prototype.visitQuote = function (ast) { };
      NullVisitor.prototype.visitSafeMethodCall = function (ast) { };
      NullVisitor.prototype.visitSafePropertyRead = function (ast) { };
      return NullVisitor;
  }());
  var TypeDiagnostic = (function () {
      function TypeDiagnostic(kind, message, ast) {
          this.kind = kind;
          this.message = message;
          this.ast = ast;
      }
      return TypeDiagnostic;
  }());
  // AstType calculatetype of the ast given AST element.
  var AstType = (function () {
      function AstType(scope, query, context) {
          this.scope = scope;
          this.query = query;
          this.context = context;
      }
      AstType.prototype.getType = function (ast) { return ast.visit(this); };
      AstType.prototype.getDiagnostics = function (ast) {
          this.diagnostics = [];
          var type = ast.visit(this);
          if (this.context.event && type.callable) {
              this.reportWarning('Unexpected callable expression. Expected a method call', ast);
          }
          return this.diagnostics;
      };
      AstType.prototype.visitBinary = function (ast) {
          // Treat undefined and null as other.
          function normalize(kind, other) {
              switch (kind) {
                  case BuiltinType$1.Undefined:
                  case BuiltinType$1.Null:
                      return normalize(other, BuiltinType$1.Other);
              }
              return kind;
          }
          var leftType = this.getType(ast.left);
          var rightType = this.getType(ast.right);
          var leftRawKind = this.query.getTypeKind(leftType);
          var rightRawKind = this.query.getTypeKind(rightType);
          var leftKind = normalize(leftRawKind, rightRawKind);
          var rightKind = normalize(rightRawKind, leftRawKind);
          // The following swtich implements operator typing similar to the
          // type production tables in the TypeScript specification.
          // https://github.com/Microsoft/TypeScript/blob/v1.8.10/doc/spec.md#4.19
          var operKind = leftKind << 8 | rightKind;
          switch (ast.operation) {
              case '*':
              case '/':
              case '%':
              case '-':
              case '<<':
              case '>>':
              case '>>>':
              case '&':
              case '^':
              case '|':
                  switch (operKind) {
                      case BuiltinType$1.Any << 8 | BuiltinType$1.Any:
                      case BuiltinType$1.Number << 8 | BuiltinType$1.Any:
                      case BuiltinType$1.Any << 8 | BuiltinType$1.Number:
                      case BuiltinType$1.Number << 8 | BuiltinType$1.Number:
                          return this.query.getBuiltinType(BuiltinType$1.Number);
                      default:
                          var errorAst = ast.left;
                          switch (leftKind) {
                              case BuiltinType$1.Any:
                              case BuiltinType$1.Number:
                                  errorAst = ast.right;
                                  break;
                          }
                          return this.reportError('Expected a numeric type', errorAst);
                  }
              case '+':
                  switch (operKind) {
                      case BuiltinType$1.Any << 8 | BuiltinType$1.Any:
                      case BuiltinType$1.Any << 8 | BuiltinType$1.Boolean:
                      case BuiltinType$1.Any << 8 | BuiltinType$1.Number:
                      case BuiltinType$1.Any << 8 | BuiltinType$1.Other:
                      case BuiltinType$1.Boolean << 8 | BuiltinType$1.Any:
                      case BuiltinType$1.Number << 8 | BuiltinType$1.Any:
                      case BuiltinType$1.Other << 8 | BuiltinType$1.Any:
                          return this.anyType;
                      case BuiltinType$1.Any << 8 | BuiltinType$1.String:
                      case BuiltinType$1.Boolean << 8 | BuiltinType$1.String:
                      case BuiltinType$1.Number << 8 | BuiltinType$1.String:
                      case BuiltinType$1.String << 8 | BuiltinType$1.Any:
                      case BuiltinType$1.String << 8 | BuiltinType$1.Boolean:
                      case BuiltinType$1.String << 8 | BuiltinType$1.Number:
                      case BuiltinType$1.String << 8 | BuiltinType$1.String:
                      case BuiltinType$1.String << 8 | BuiltinType$1.Other:
                      case BuiltinType$1.Other << 8 | BuiltinType$1.String:
                          return this.query.getBuiltinType(BuiltinType$1.String);
                      case BuiltinType$1.Number << 8 | BuiltinType$1.Number:
                          return this.query.getBuiltinType(BuiltinType$1.Number);
                      case BuiltinType$1.Boolean << 8 | BuiltinType$1.Number:
                      case BuiltinType$1.Other << 8 | BuiltinType$1.Number:
                          return this.reportError('Expected a number type', ast.left);
                      case BuiltinType$1.Number << 8 | BuiltinType$1.Boolean:
                      case BuiltinType$1.Number << 8 | BuiltinType$1.Other:
                          return this.reportError('Expected a number type', ast.right);
                      default:
                          return this.reportError('Expected operands to be a string or number type', ast);
                  }
              case '>':
              case '<':
              case '<=':
              case '>=':
              case '==':
              case '!=':
              case '===':
              case '!==':
                  switch (operKind) {
                      case BuiltinType$1.Any << 8 | BuiltinType$1.Any:
                      case BuiltinType$1.Any << 8 | BuiltinType$1.Boolean:
                      case BuiltinType$1.Any << 8 | BuiltinType$1.Number:
                      case BuiltinType$1.Any << 8 | BuiltinType$1.String:
                      case BuiltinType$1.Any << 8 | BuiltinType$1.Other:
                      case BuiltinType$1.Boolean << 8 | BuiltinType$1.Any:
                      case BuiltinType$1.Boolean << 8 | BuiltinType$1.Boolean:
                      case BuiltinType$1.Number << 8 | BuiltinType$1.Any:
                      case BuiltinType$1.Number << 8 | BuiltinType$1.Number:
                      case BuiltinType$1.String << 8 | BuiltinType$1.Any:
                      case BuiltinType$1.String << 8 | BuiltinType$1.String:
                      case BuiltinType$1.Other << 8 | BuiltinType$1.Any:
                      case BuiltinType$1.Other << 8 | BuiltinType$1.Other:
                          return this.query.getBuiltinType(BuiltinType$1.Boolean);
                      default:
                          return this.reportError('Expected the operants to be of similar type or any', ast);
                  }
              case '&&':
                  return rightType;
              case '||':
                  return this.query.getTypeUnion(leftType, rightType);
          }
          return this.reportError("Unrecognized operator " + ast.operation, ast);
      };
      AstType.prototype.visitChain = function (ast) {
          if (this.diagnostics) {
              // If we are producing diagnostics, visit the children
              visitChildren(ast, this);
          }
          // The type of a chain is always undefined.
          return this.query.getBuiltinType(BuiltinType$1.Undefined);
      };
      AstType.prototype.visitConditional = function (ast) {
          // The type of a conditional is the union of the true and false conditions.
          return this.query.getTypeUnion(this.getType(ast.trueExp), this.getType(ast.falseExp));
      };
      AstType.prototype.visitFunctionCall = function (ast) {
          var _this = this;
          // The type of a function call is the return type of the selected signature.
          // The signature is selected based on the types of the arguments. Angular doesn't
          // support contextual typing of arguments so this is simpler than TypeScript's
          // version.
          var args = ast.args.map(function (arg) { return _this.getType(arg); });
          var target = this.getType(ast.target);
          if (!target || !target.callable)
              return this.reportError('Call target is not callable', ast);
          var signature = target.selectSignature(args);
          if (signature)
              return signature.result;
          // TODO: Consider a better error message here.
          return this.reportError('Unable no compatible signature found for call', ast);
      };
      AstType.prototype.visitImplicitReceiver = function (ast) {
          var _this = this;
          // Return a pseudo-symbol for the implicit receiver.
          // The members of the implicit receiver are what is defined by the
          // scope passed into this class.
          return {
              name: '$implict',
              kind: 'component',
              language: 'ng-template',
              type: undefined,
              container: undefined,
              callable: false,
              public: true,
              definition: undefined,
              members: function () { return _this.scope; },
              signatures: function () { return []; },
              selectSignature: function (types) { return undefined; },
              indexed: function (argument) { return undefined; }
          };
      };
      AstType.prototype.visitInterpolation = function (ast) {
          // If we are producing diagnostics, visit the children.
          if (this.diagnostics) {
              visitChildren(ast, this);
          }
          return this.undefinedType;
      };
      AstType.prototype.visitKeyedRead = function (ast) {
          var targetType = this.getType(ast.obj);
          var keyType = this.getType(ast.key);
          var result = targetType.indexed(keyType);
          return result || this.anyType;
      };
      AstType.prototype.visitKeyedWrite = function (ast) {
          // The write of a type is the type of the value being written.
          return this.getType(ast.value);
      };
      AstType.prototype.visitLiteralArray = function (ast) {
          var _this = this;
          // A type literal is an array type of the union of the elements
          return this.query.getArrayType((_a = this.query).getTypeUnion.apply(_a, ast.expressions.map(function (element) { return _this.getType(element); })));
          var _a;
      };
      AstType.prototype.visitLiteralMap = function (ast) {
          // If we are producing diagnostics, visit the children
          if (this.diagnostics) {
              visitChildren(ast, this);
          }
          // TODO: Return a composite type.
          return this.anyType;
      };
      AstType.prototype.visitLiteralPrimitive = function (ast) {
          // The type of a literal primitive depends on the value of the literal.
          switch (ast.value) {
              case true:
              case false:
                  return this.query.getBuiltinType(BuiltinType$1.Boolean);
              case null:
                  return this.query.getBuiltinType(BuiltinType$1.Null);
              case undefined:
                  return this.query.getBuiltinType(BuiltinType$1.Undefined);
              default:
                  switch (typeof ast.value) {
                      case 'string':
                          return this.query.getBuiltinType(BuiltinType$1.String);
                      case 'number':
                          return this.query.getBuiltinType(BuiltinType$1.Number);
                      default:
                          return this.reportError('Unrecognized primitive', ast);
                  }
          }
      };
      AstType.prototype.visitMethodCall = function (ast) {
          return this.resolveMethodCall(this.getType(ast.receiver), ast);
      };
      AstType.prototype.visitPipe = function (ast) {
          var _this = this;
          // The type of a pipe node is the return type of the pipe's transform method. The table returned
          // by getPipes() is expected to contain symbols with the corresponding transform method type.
          var pipe = this.query.getPipes().get(ast.name);
          if (!pipe)
              return this.reportError("No pipe by the name " + pipe.name + " found", ast);
          var expType = this.getType(ast.exp);
          var signature = pipe.selectSignature([expType].concat(ast.args.map(function (arg) { return _this.getType(arg); })));
          if (!signature)
              return this.reportError('Unable to resolve signature for pipe invocation', ast);
          return signature.result;
      };
      AstType.prototype.visitPrefixNot = function (ast) {
          // The type of a prefix ! is always boolean.
          return this.query.getBuiltinType(BuiltinType$1.Boolean);
      };
      AstType.prototype.visitPropertyRead = function (ast) {
          return this.resolvePropertyRead(this.getType(ast.receiver), ast);
      };
      AstType.prototype.visitPropertyWrite = function (ast) {
          // The type of a write is the type of the value being written.
          return this.getType(ast.value);
      };
      AstType.prototype.visitQuote = function (ast) {
          // The type of a quoted expression is any.
          return this.query.getBuiltinType(BuiltinType$1.Any);
      };
      AstType.prototype.visitSafeMethodCall = function (ast) {
          return this.resolveMethodCall(this.query.getNonNullableType(this.getType(ast.receiver)), ast);
      };
      AstType.prototype.visitSafePropertyRead = function (ast) {
          return this.resolvePropertyRead(this.query.getNonNullableType(this.getType(ast.receiver)), ast);
      };
      Object.defineProperty(AstType.prototype, "anyType", {
          get: function () {
              var result = this._anyType;
              if (!result) {
                  result = this._anyType = this.query.getBuiltinType(BuiltinType$1.Any);
              }
              return result;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(AstType.prototype, "undefinedType", {
          get: function () {
              var result = this._undefinedType;
              if (!result) {
                  result = this._undefinedType = this.query.getBuiltinType(BuiltinType$1.Undefined);
              }
              return result;
          },
          enumerable: true,
          configurable: true
      });
      AstType.prototype.resolveMethodCall = function (receiverType, ast) {
          var _this = this;
          if (this.isAny(receiverType)) {
              return this.anyType;
          }
          // The type of a method is the selected methods result type.
          var method = receiverType.members().get(ast.name);
          if (!method)
              return this.reportError("Unknown method " + ast.name, ast);
          if (!method.type.callable)
              return this.reportError("Member " + ast.name + " is not callable", ast);
          var signature = method.type.selectSignature(ast.args.map(function (arg) { return _this.getType(arg); }));
          if (!signature)
              return this.reportError("Unable to resolve signature for call of method " + ast.name, ast);
          return signature.result;
      };
      AstType.prototype.resolvePropertyRead = function (receiverType, ast) {
          if (this.isAny(receiverType)) {
              return this.anyType;
          }
          // The type of a property read is the seelcted member's type.
          var member = receiverType.members().get(ast.name);
          if (!member) {
              var receiverInfo = receiverType.name;
              if (receiverInfo == '$implict') {
                  receiverInfo =
                      'The component declaration, template variable declarations, and element references do';
              }
              else {
                  receiverInfo = "'" + receiverInfo + "' does";
              }
              return this.reportError("Identifier '" + ast.name + "' is not defined. " + receiverInfo + " not contain such a member", ast);
          }
          if (!member.public) {
              var receiverInfo = receiverType.name;
              if (receiverInfo == '$implict') {
                  receiverInfo = 'the component';
              }
              else {
                  receiverInfo = "'" + receiverInfo + "'";
              }
              this.reportWarning("Identifier '" + ast.name + "' refers to a private member of " + receiverInfo, ast);
          }
          return member.type;
      };
      AstType.prototype.reportError = function (message, ast) {
          if (this.diagnostics) {
              this.diagnostics.push(new TypeDiagnostic(DiagnosticKind.Error, message, ast));
          }
          return this.anyType;
      };
      AstType.prototype.reportWarning = function (message, ast) {
          if (this.diagnostics) {
              this.diagnostics.push(new TypeDiagnostic(DiagnosticKind.Warning, message, ast));
          }
          return this.anyType;
      };
      AstType.prototype.isAny = function (symbol) {
          return !symbol || this.query.getTypeKind(symbol) == BuiltinType$1.Any ||
              (symbol.type && this.isAny(symbol.type));
      };
      return AstType;
  }());
  var AstPath = (function (_super) {
      __extends$13(AstPath, _super);
      function AstPath(ast, position, excludeEmpty) {
          if (excludeEmpty === void 0) { excludeEmpty = false; }
          var _this = _super.call(this, new AstPathVisitor(position, excludeEmpty).buildPath(ast).path) || this;
          _this.position = position;
          return _this;
      }
      return AstPath;
  }(AstPath$1));
  var AstPathVisitor = (function (_super) {
      __extends$13(AstPathVisitor, _super);
      function AstPathVisitor(position, excludeEmpty) {
          var _this = _super.call(this) || this;
          _this.position = position;
          _this.excludeEmpty = excludeEmpty;
          _this.path = [];
          return _this;
      }
      AstPathVisitor.prototype.visit = function (ast) {
          if ((!this.excludeEmpty || ast.span.start < ast.span.end) && inSpan(this.position, ast.span)) {
              this.path.push(ast);
              visitChildren(ast, this);
          }
      };
      AstPathVisitor.prototype.buildPath = function (ast) {
          // We never care about the ASTWithSource node and its visit() method calls its ast's visit so
          // the visit() method above would never see it.
          if (ast instanceof ASTWithSource) {
              ast = ast.ast;
          }
          this.visit(ast);
          return this;
      };
      return AstPathVisitor;
  }(NullVisitor));
  // TODO: Consider moving to expression_parser/ast
  function visitChildren(ast, visitor) {
      function visit(ast) { visitor.visit && visitor.visit(ast) || ast.visit(visitor); }
      function visitAll(asts) { asts.forEach(visit); }
      ast.visit({
          visitBinary: function (ast) {
              visit(ast.left);
              visit(ast.right);
          },
          visitChain: function (ast) { visitAll(ast.expressions); },
          visitConditional: function (ast) {
              visit(ast.condition);
              visit(ast.trueExp);
              visit(ast.falseExp);
          },
          visitFunctionCall: function (ast) {
              visit(ast.target);
              visitAll(ast.args);
          },
          visitImplicitReceiver: function (ast) { },
          visitInterpolation: function (ast) { visitAll(ast.expressions); },
          visitKeyedRead: function (ast) {
              visit(ast.obj);
              visit(ast.key);
          },
          visitKeyedWrite: function (ast) {
              visit(ast.obj);
              visit(ast.key);
              visit(ast.obj);
          },
          visitLiteralArray: function (ast) { visitAll(ast.expressions); },
          visitLiteralMap: function (ast) { },
          visitLiteralPrimitive: function (ast) { },
          visitMethodCall: function (ast) {
              visit(ast.receiver);
              visitAll(ast.args);
          },
          visitPipe: function (ast) {
              visit(ast.exp);
              visitAll(ast.args);
          },
          visitPrefixNot: function (ast) { visit(ast.expression); },
          visitPropertyRead: function (ast) { visit(ast.receiver); },
          visitPropertyWrite: function (ast) {
              visit(ast.receiver);
              visit(ast.value);
          },
          visitQuote: function (ast) { },
          visitSafeMethodCall: function (ast) {
              visit(ast.receiver);
              visitAll(ast.args);
          },
          visitSafePropertyRead: function (ast) { visit(ast.receiver); },
      });
  }
  function getExpressionScope(info, path, includeEvent) {
      var result = info.template.members;
      var references = getReferences(info);
      var variables = getVarDeclarations(info, path);
      var events = getEventDeclaration(info, path, includeEvent);
      if (references.length || variables.length || events.length) {
          var referenceTable = info.template.query.createSymbolTable(references);
          var variableTable = info.template.query.createSymbolTable(variables);
          var eventsTable = info.template.query.createSymbolTable(events);
          result =
              info.template.query.mergeSymbolTable([result, referenceTable, variableTable, eventsTable]);
      }
      return result;
  }
  function getEventDeclaration(info, path, includeEvent) {
      var result = [];
      if (includeEvent) {
          // TODO: Determine the type of the event parameter based on the Observable<T> or EventEmitter<T>
          // of the event.
          result = [{
                  name: '$event',
                  kind: 'variable',
                  type: info.template.query.getBuiltinType(BuiltinType$1.Any)
              }];
      }
      return result;
  }
  function getReferences(info) {
      var result = [];
      function processReferences(references) {
          var _loop_1 = function (reference) {
              var type = void 0;
              if (reference.value) {
                  type = info.template.query.getTypeSymbol(tokenReference(reference.value));
              }
              result.push({
                  name: reference.name,
                  kind: 'reference',
                  type: type || info.template.query.getBuiltinType(BuiltinType$1.Any),
                  get definition() { return getDefintionOf(info, reference); }
              });
          };
          for (var _i = 0, references_1 = references; _i < references_1.length; _i++) {
              var reference = references_1[_i];
              _loop_1(reference);
          }
      }
      var visitor = new (function (_super) {
          __extends$13(class_1, _super);
          function class_1() {
              return _super !== null && _super.apply(this, arguments) || this;
          }
          class_1.prototype.visitEmbeddedTemplate = function (ast, context) {
              _super.prototype.visitEmbeddedTemplate.call(this, ast, context);
              processReferences(ast.references);
          };
          class_1.prototype.visitElement = function (ast, context) {
              _super.prototype.visitElement.call(this, ast, context);
              processReferences(ast.references);
          };
          return class_1;
      }(TemplateAstChildVisitor));
      templateVisitAll(visitor, info.templateAst);
      return result;
  }
  function getVarDeclarations(info, path) {
      var result = [];
      var current = path.tail;
      while (current) {
          if (current instanceof EmbeddedTemplateAst) {
              var _loop_2 = function (variable) {
                  var name_1 = variable.name;
                  // Find the first directive with a context.
                  var context = current.directives
                      .map(function (d) { return info.template.query.getTemplateContext(d.directive.type.reference); })
                      .find(function (c) { return !!c; });
                  // Determine the type of the context field referenced by variable.value.
                  var type = void 0;
                  if (context) {
                      var value = context.get(variable.value);
                      if (value) {
                          type = value.type;
                          var kind = info.template.query.getTypeKind(type);
                          if (kind === BuiltinType$1.Any || kind == BuiltinType$1.Unbound) {
                              // The any type is not very useful here. For special cases, such as ngFor, we can do
                              // better.
                              type = refinedVariableType(type, info, current);
                          }
                      }
                  }
                  if (!type) {
                      type = info.template.query.getBuiltinType(BuiltinType$1.Any);
                  }
                  result.push({
                      name: name_1,
                      kind: 'variable', type: type, get definition() { return getDefintionOf(info, variable); }
                  });
              };
              for (var _i = 0, _a = current.variables; _i < _a.length; _i++) {
                  var variable = _a[_i];
                  _loop_2(variable);
              }
          }
          current = path.parentOf(current);
      }
      return result;
  }
  function refinedVariableType(type, info, templateElement) {
      // Special case the ngFor directive
      var ngForDirective = templateElement.directives.find(function (d) {
          var name = identifierName(d.directive.type);
          return name == 'NgFor' || name == 'NgForOf';
      });
      if (ngForDirective) {
          var ngForOfBinding = ngForDirective.inputs.find(function (i) { return i.directiveName == 'ngForOf'; });
          if (ngForOfBinding) {
              var bindingType = new AstType(info.template.members, info.template.query, {}).getType(ngForOfBinding.value);
              if (bindingType) {
                  return info.template.query.getElementType(bindingType);
              }
          }
      }
      // We can't do better, just return the original type.
      return type;
  }
  function getDefintionOf(info, ast) {
      if (info.fileName) {
          var templateOffset = info.template.span.start;
          return [{
                  fileName: info.fileName,
                  span: {
                      start: ast.sourceSpan.start.offset + templateOffset,
                      end: ast.sourceSpan.end.offset + templateOffset
                  }
              }];
      }
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var values = [
      'ID',
      'CDATA',
      'NAME',
      ['ltr', 'rtl'],
      ['rect', 'circle', 'poly', 'default'],
      'NUMBER',
      ['nohref'],
      ['ismap'],
      ['declare'],
      ['DATA', 'REF', 'OBJECT'],
      ['GET', 'POST'],
      'IDREF',
      ['TEXT', 'PASSWORD', 'CHECKBOX', 'RADIO', 'SUBMIT', 'RESET', 'FILE', 'HIDDEN', 'IMAGE', 'BUTTON'],
      ['checked'],
      ['disabled'],
      ['readonly'],
      ['multiple'],
      ['selected'],
      ['button', 'submit', 'reset'],
      ['void', 'above', 'below', 'hsides', 'lhs', 'rhs', 'vsides', 'box', 'border'],
      ['none', 'groups', 'rows', 'cols', 'all'],
      ['left', 'center', 'right', 'justify', 'char'],
      ['top', 'middle', 'bottom', 'baseline'],
      'IDREFS',
      ['row', 'col', 'rowgroup', 'colgroup'],
      ['defer']
  ];
  var groups = [
      { id: 0 },
      {
          onclick: 1,
          ondblclick: 1,
          onmousedown: 1,
          onmouseup: 1,
          onmouseover: 1,
          onmousemove: 1,
          onmouseout: 1,
          onkeypress: 1,
          onkeydown: 1,
          onkeyup: 1
      },
      { lang: 2, dir: 3 },
      { onload: 1, onunload: 1 },
      { name: 1 },
      { href: 1 },
      { type: 1 },
      { alt: 1 },
      { tabindex: 5 },
      { media: 1 },
      { nohref: 6 },
      { usemap: 1 },
      { src: 1 },
      { onfocus: 1, onblur: 1 },
      { charset: 1 },
      { declare: 8, classid: 1, codebase: 1, data: 1, codetype: 1, archive: 1, standby: 1 },
      { title: 1 },
      { value: 1 },
      { cite: 1 },
      { datetime: 1 },
      { accept: 1 },
      { shape: 4, coords: 1 },
      { for: 11
      },
      { action: 1, method: 10, enctype: 1, onsubmit: 1, onreset: 1, 'accept-charset': 1 },
      { valuetype: 9 },
      { longdesc: 1 },
      { width: 1 },
      { disabled: 14 },
      { readonly: 15, onselect: 1 },
      { accesskey: 1 },
      { size: 5, multiple: 16 },
      { onchange: 1 },
      { label: 1 },
      { selected: 17 },
      { type: 12, checked: 13, size: 1, maxlength: 5 },
      { rows: 5, cols: 5 },
      { type: 18 },
      { height: 1 },
      { summary: 1, border: 1, frame: 19, rules: 20, cellspacing: 1, cellpadding: 1, datapagesize: 1 },
      { align: 21, char: 1, charoff: 1, valign: 22 },
      { span: 5 },
      { abbr: 1, axis: 1, headers: 23, scope: 24, rowspan: 5, colspan: 5 },
      { profile: 1 },
      { 'http-equiv': 2, name: 2, content: 1, scheme: 1 },
      { class: 1, style: 1 },
      { hreflang: 2, rel: 1, rev: 1 },
      { ismap: 7 },
      { defer: 25, event: 1, for: 1 }
  ];
  var elements = {
      TT: [0, 1, 2, 16, 44],
      I: [0, 1, 2, 16, 44],
      B: [0, 1, 2, 16, 44],
      BIG: [0, 1, 2, 16, 44],
      SMALL: [0, 1, 2, 16, 44],
      EM: [0, 1, 2, 16, 44],
      STRONG: [0, 1, 2, 16, 44],
      DFN: [0, 1, 2, 16, 44],
      CODE: [0, 1, 2, 16, 44],
      SAMP: [0, 1, 2, 16, 44],
      KBD: [0, 1, 2, 16, 44],
      VAR: [0, 1, 2, 16, 44],
      CITE: [0, 1, 2, 16, 44],
      ABBR: [0, 1, 2, 16, 44],
      ACRONYM: [0, 1, 2, 16, 44],
      SUB: [0, 1, 2, 16, 44],
      SUP: [0, 1, 2, 16, 44],
      SPAN: [0, 1, 2, 16, 44],
      BDO: [0, 2, 16, 44],
      BR: [0, 16, 44],
      BODY: [0, 1, 2, 3, 16, 44],
      ADDRESS: [0, 1, 2, 16, 44],
      DIV: [0, 1, 2, 16, 44],
      A: [0, 1, 2, 4, 5, 6, 8, 13, 14, 16, 21, 29, 44, 45],
      MAP: [0, 1, 2, 4, 16, 44],
      AREA: [0, 1, 2, 5, 7, 8, 10, 13, 16, 21, 29, 44],
      LINK: [0, 1, 2, 5, 6, 9, 14, 16, 44, 45],
      IMG: [0, 1, 2, 4, 7, 11, 12, 16, 25, 26, 37, 44, 46],
      OBJECT: [0, 1, 2, 4, 6, 8, 11, 15, 16, 26, 37, 44],
      PARAM: [0, 4, 6, 17, 24],
      HR: [0, 1, 2, 16, 44],
      P: [0, 1, 2, 16, 44],
      H1: [0, 1, 2, 16, 44],
      H2: [0, 1, 2, 16, 44],
      H3: [0, 1, 2, 16, 44],
      H4: [0, 1, 2, 16, 44],
      H5: [0, 1, 2, 16, 44],
      H6: [0, 1, 2, 16, 44],
      PRE: [0, 1, 2, 16, 44],
      Q: [0, 1, 2, 16, 18, 44],
      BLOCKQUOTE: [0, 1, 2, 16, 18, 44],
      INS: [0, 1, 2, 16, 18, 19, 44],
      DEL: [0, 1, 2, 16, 18, 19, 44],
      DL: [0, 1, 2, 16, 44],
      DT: [0, 1, 2, 16, 44],
      DD: [0, 1, 2, 16, 44],
      OL: [0, 1, 2, 16, 44],
      UL: [0, 1, 2, 16, 44],
      LI: [0, 1, 2, 16, 44],
      FORM: [0, 1, 2, 4, 16, 20, 23, 44],
      LABEL: [0, 1, 2, 13, 16, 22, 29, 44],
      INPUT: [0, 1, 2, 4, 7, 8, 11, 12, 13, 16, 17, 20, 27, 28, 29, 31, 34, 44, 46],
      SELECT: [0, 1, 2, 4, 8, 13, 16, 27, 30, 31, 44],
      OPTGROUP: [0, 1, 2, 16, 27, 32, 44],
      OPTION: [0, 1, 2, 16, 17, 27, 32, 33, 44],
      TEXTAREA: [0, 1, 2, 4, 8, 13, 16, 27, 28, 29, 31, 35, 44],
      FIELDSET: [0, 1, 2, 16, 44],
      LEGEND: [0, 1, 2, 16, 29, 44],
      BUTTON: [0, 1, 2, 4, 8, 13, 16, 17, 27, 29, 36, 44],
      TABLE: [0, 1, 2, 16, 26, 38, 44],
      CAPTION: [0, 1, 2, 16, 44],
      COLGROUP: [0, 1, 2, 16, 26, 39, 40, 44],
      COL: [0, 1, 2, 16, 26, 39, 40, 44],
      THEAD: [0, 1, 2, 16, 39, 44],
      TBODY: [0, 1, 2, 16, 39, 44],
      TFOOT: [0, 1, 2, 16, 39, 44],
      TR: [0, 1, 2, 16, 39, 44],
      TH: [0, 1, 2, 16, 39, 41, 44],
      TD: [0, 1, 2, 16, 39, 41, 44],
      HEAD: [2, 42],
      TITLE: [2],
      BASE: [5],
      META: [2, 43],
      STYLE: [2, 6, 9, 16],
      SCRIPT: [6, 12, 14, 47],
      NOSCRIPT: [0, 1, 2, 16, 44],
      HTML: [2]
  };
  var defaultAttributes = [0, 1, 2, 4];
  function elementNames() {
      return Object.keys(elements).sort().map(function (v) { return v.toLowerCase(); });
  }
  function compose(indexes) {
      var result = {};
      if (indexes) {
          for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {
              var index = indexes_1[_i];
              var group = groups[index];
              for (var name_1 in group)
                  if (group.hasOwnProperty(name_1))
                      result[name_1] = values[group[name_1]];
          }
      }
      return result;
  }
  function attributeNames(element) {
      return Object.keys(compose(elements[element.toUpperCase()] || defaultAttributes)).sort();
  }
  // This section is describes the DOM property surface of a DOM element and is dervided from
  // from the SCHEMA strings from the security context information. SCHEMA is copied here because
  // it would be an unnecessary risk to allow this array to be imported from the security context
  // schema registry.
  var SCHEMA$1 = [
      '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop',
      '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
      'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
      'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume',
      ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',
      ':svg:graphics^:svg:|',
      ':svg:animation^:svg:|*begin,*end,*repeat',
      ':svg:geometry^:svg:|',
      ':svg:componentTransferFunction^:svg:|',
      ':svg:gradient^:svg:|',
      ':svg:textContent^:svg:graphics|',
      ':svg:textPositioning^:svg:textContent|',
      'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',
      'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username',
      'audio^media|',
      'br^[HTMLElement]|clear',
      'base^[HTMLElement]|href,target',
      'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',
      'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',
      'canvas^[HTMLElement]|#height,#width',
      'content^[HTMLElement]|select',
      'dl^[HTMLElement]|!compact',
      'datalist^[HTMLElement]|',
      'details^[HTMLElement]|!open',
      'dialog^[HTMLElement]|!open,returnValue',
      'dir^[HTMLElement]|!compact',
      'div^[HTMLElement]|align',
      'embed^[HTMLElement]|align,height,name,src,type,width',
      'fieldset^[HTMLElement]|!disabled,name',
      'font^[HTMLElement]|color,face,size',
      'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',
      'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',
      'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',
      'hr^[HTMLElement]|align,color,!noShade,size,width',
      'head^[HTMLElement]|',
      'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',
      'html^[HTMLElement]|version',
      'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',
      'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',
      'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',
      'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name',
      'li^[HTMLElement]|type,#value',
      'label^[HTMLElement]|htmlFor',
      'legend^[HTMLElement]|align',
      'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type',
      'map^[HTMLElement]|name',
      'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',
      'menu^[HTMLElement]|!compact',
      'meta^[HTMLElement]|content,httpEquiv,name,scheme',
      'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',
      'ins,del^[HTMLElement]|cite,dateTime',
      'ol^[HTMLElement]|!compact,!reversed,#start,type',
      'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',
      'optgroup^[HTMLElement]|!disabled,label',
      'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',
      'output^[HTMLElement]|defaultValue,%htmlFor,name,value',
      'p^[HTMLElement]|align',
      'param^[HTMLElement]|name,type,value,valueType',
      'picture^[HTMLElement]|',
      'pre^[HTMLElement]|#width',
      'progress^[HTMLElement]|#max,#value',
      'q,blockquote,cite^[HTMLElement]|',
      'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',
      'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',
      'shadow^[HTMLElement]|',
      'source^[HTMLElement]|media,sizes,src,srcset,type',
      'span^[HTMLElement]|',
      'style^[HTMLElement]|!disabled,media,type',
      'caption^[HTMLElement]|align',
      'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',
      'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',
      'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',
      'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',
      'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',
      'template^[HTMLElement]|',
      'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',
      'title^[HTMLElement]|text',
      'track^[HTMLElement]|!default,kind,label,src,srclang',
      'ul^[HTMLElement]|!compact,type',
      'unknown^[HTMLElement]|',
      'video^media|#height,poster,#width',
      ':svg:a^:svg:graphics|',
      ':svg:animate^:svg:animation|',
      ':svg:animateMotion^:svg:animation|',
      ':svg:animateTransform^:svg:animation|',
      ':svg:circle^:svg:geometry|',
      ':svg:clipPath^:svg:graphics|',
      ':svg:cursor^:svg:|',
      ':svg:defs^:svg:graphics|',
      ':svg:desc^:svg:|',
      ':svg:discard^:svg:|',
      ':svg:ellipse^:svg:geometry|',
      ':svg:feBlend^:svg:|',
      ':svg:feColorMatrix^:svg:|',
      ':svg:feComponentTransfer^:svg:|',
      ':svg:feComposite^:svg:|',
      ':svg:feConvolveMatrix^:svg:|',
      ':svg:feDiffuseLighting^:svg:|',
      ':svg:feDisplacementMap^:svg:|',
      ':svg:feDistantLight^:svg:|',
      ':svg:feDropShadow^:svg:|',
      ':svg:feFlood^:svg:|',
      ':svg:feFuncA^:svg:componentTransferFunction|',
      ':svg:feFuncB^:svg:componentTransferFunction|',
      ':svg:feFuncG^:svg:componentTransferFunction|',
      ':svg:feFuncR^:svg:componentTransferFunction|',
      ':svg:feGaussianBlur^:svg:|',
      ':svg:feImage^:svg:|',
      ':svg:feMerge^:svg:|',
      ':svg:feMergeNode^:svg:|',
      ':svg:feMorphology^:svg:|',
      ':svg:feOffset^:svg:|',
      ':svg:fePointLight^:svg:|',
      ':svg:feSpecularLighting^:svg:|',
      ':svg:feSpotLight^:svg:|',
      ':svg:feTile^:svg:|',
      ':svg:feTurbulence^:svg:|',
      ':svg:filter^:svg:|',
      ':svg:foreignObject^:svg:graphics|',
      ':svg:g^:svg:graphics|',
      ':svg:image^:svg:graphics|',
      ':svg:line^:svg:geometry|',
      ':svg:linearGradient^:svg:gradient|',
      ':svg:mpath^:svg:|',
      ':svg:marker^:svg:|',
      ':svg:mask^:svg:|',
      ':svg:metadata^:svg:|',
      ':svg:path^:svg:geometry|',
      ':svg:pattern^:svg:|',
      ':svg:polygon^:svg:geometry|',
      ':svg:polyline^:svg:geometry|',
      ':svg:radialGradient^:svg:gradient|',
      ':svg:rect^:svg:geometry|',
      ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',
      ':svg:script^:svg:|type',
      ':svg:set^:svg:animation|',
      ':svg:stop^:svg:|',
      ':svg:style^:svg:|!disabled,media,title,type',
      ':svg:switch^:svg:graphics|',
      ':svg:symbol^:svg:|',
      ':svg:tspan^:svg:textPositioning|',
      ':svg:text^:svg:textPositioning|',
      ':svg:textPath^:svg:textContent|',
      ':svg:title^:svg:|',
      ':svg:use^:svg:graphics|',
      ':svg:view^:svg:|#zoomAndPan',
      'data^[HTMLElement]|value',
      'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',
      'summary^[HTMLElement]|',
      'time^[HTMLElement]|dateTime',
  ];
  var EVENT = 'event';
  var BOOLEAN$1 = 'boolean';
  var NUMBER$1 = 'number';
  var STRING$1 = 'string';
  var OBJECT$1 = 'object';
  var SchemaInformation = (function () {
      function SchemaInformation() {
          var _this = this;
          this.schema = {};
          SCHEMA$1.forEach(function (encodedType) {
              var parts = encodedType.split('|');
              var properties = parts[1].split(',');
              var typeParts = (parts[0] + '^').split('^');
              var typeName = typeParts[0];
              var type = {};
              typeName.split(',').forEach(function (tag) { return _this.schema[tag.toLowerCase()] = type; });
              var superName = typeParts[1];
              var superType = superName && _this.schema[superName.toLowerCase()];
              if (superType) {
                  for (var key in superType) {
                      type[key] = superType[key];
                  }
              }
              properties.forEach(function (property) {
                  if (property == '') {
                  }
                  else if (property.startsWith('*')) {
                      type[property.substring(1)] = EVENT;
                  }
                  else if (property.startsWith('!')) {
                      type[property.substring(1)] = BOOLEAN$1;
                  }
                  else if (property.startsWith('#')) {
                      type[property.substring(1)] = NUMBER$1;
                  }
                  else if (property.startsWith('%')) {
                      type[property.substring(1)] = OBJECT$1;
                  }
                  else {
                      type[property] = STRING$1;
                  }
              });
          });
      }
      SchemaInformation.prototype.allKnownElements = function () { return Object.keys(this.schema); };
      SchemaInformation.prototype.eventsOf = function (elementName) {
          var elementType = this.schema[elementName.toLowerCase()] || {};
          return Object.keys(elementType).filter(function (property) { return elementType[property] === EVENT; });
      };
      SchemaInformation.prototype.propertiesOf = function (elementName) {
          var elementType = this.schema[elementName.toLowerCase()] || {};
          return Object.keys(elementType).filter(function (property) { return elementType[property] !== EVENT; });
      };
      SchemaInformation.prototype.typeOf = function (elementName, property) {
          return (this.schema[elementName.toLowerCase()] || {})[property];
      };
      Object.defineProperty(SchemaInformation, "instance", {
          get: function () {
              var result = SchemaInformation._instance;
              if (!result) {
                  result = SchemaInformation._instance = new SchemaInformation();
              }
              return result;
          },
          enumerable: true,
          configurable: true
      });
      return SchemaInformation;
  }());
  function eventNames(elementName) {
      return SchemaInformation.instance.eventsOf(elementName);
  }
  function propertyNames(elementName) {
      return SchemaInformation.instance.propertiesOf(elementName);
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var __extends$15 = (this && this.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HtmlAstPath = (function (_super) {
      __extends$15(HtmlAstPath, _super);
      function HtmlAstPath(ast, position) {
          var _this = _super.call(this, buildPath(ast, position)) || this;
          _this.position = position;
          return _this;
      }
      return HtmlAstPath;
  }(AstPath$1));
  function buildPath(ast, position) {
      var visitor = new HtmlAstPathBuilder(position);
      visitAll(visitor, ast);
      return visitor.getPath();
  }
  var ChildVisitor = (function () {
      function ChildVisitor(visitor) {
          this.visitor = visitor;
      }
      ChildVisitor.prototype.visitElement = function (ast, context) {
          this.visitChildren(context, function (visit) {
              visit(ast.attrs);
              visit(ast.children);
          });
      };
      ChildVisitor.prototype.visitAttribute = function (ast, context) { };
      ChildVisitor.prototype.visitText = function (ast, context) { };
      ChildVisitor.prototype.visitComment = function (ast, context) { };
      ChildVisitor.prototype.visitExpansion = function (ast, context) {
          return this.visitChildren(context, function (visit) { visit(ast.cases); });
      };
      ChildVisitor.prototype.visitExpansionCase = function (ast, context) { };
      ChildVisitor.prototype.visitChildren = function (context, cb) {
          var visitor = this.visitor || this;
          var results = [];
          function visit(children) {
              if (children)
                  results.push(visitAll(visitor, children, context));
          }
          cb(visit);
          return [].concat.apply([], results);
      };
      return ChildVisitor;
  }());
  var HtmlAstPathBuilder = (function (_super) {
      __extends$15(HtmlAstPathBuilder, _super);
      function HtmlAstPathBuilder(position) {
          var _this = _super.call(this) || this;
          _this.position = position;
          _this.path = [];
          return _this;
      }
      HtmlAstPathBuilder.prototype.visit = function (ast, context) {
          var span = spanOf(ast);
          if (inSpan(this.position, span)) {
              this.path.push(ast);
          }
          else {
              // Returning a value here will result in the children being skipped.
              return true;
          }
      };
      HtmlAstPathBuilder.prototype.getPath = function () { return this.path; };
      return HtmlAstPathBuilder;
  }(ChildVisitor));

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var __extends$12 = (this && this.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var TEMPLATE_ATTR_PREFIX$1 = '*';
  var hiddenHtmlElements = {
      html: true,
      script: true,
      noscript: true,
      base: true,
      body: true,
      title: true,
      head: true,
      link: true,
  };
  function getTemplateCompletions(templateInfo) {
      var result = undefined;
      var htmlAst = templateInfo.htmlAst, templateAst = templateInfo.templateAst, template = templateInfo.template;
      // The templateNode starts at the delimiter character so we add 1 to skip it.
      var templatePosition = templateInfo.position - template.span.start;
      var path = new HtmlAstPath(htmlAst, templatePosition);
      var mostSpecific = path.tail;
      if (path.empty) {
          result = elementCompletions(templateInfo, path);
      }
      else {
          var astPosition_1 = templatePosition - mostSpecific.sourceSpan.start.offset;
          mostSpecific.visit({
              visitElement: function (ast) {
                  var startTagSpan = spanOf(ast.sourceSpan);
                  var tagLen = ast.name.length;
                  if (templatePosition <=
                      startTagSpan.start + tagLen + 1 /* 1 for the opening angle bracked */) {
                      // If we are in the tag then return the element completions.
                      result = elementCompletions(templateInfo, path);
                  }
                  else if (templatePosition < startTagSpan.end) {
                      // We are in the attribute section of the element (but not in an attribute).
                      // Return the attribute completions.
                      result = attributeCompletions(templateInfo, path);
                  }
              },
              visitAttribute: function (ast) {
                  if (!ast.valueSpan || !inSpan(templatePosition, spanOf(ast.valueSpan))) {
                      // We are in the name of an attribute. Show attribute completions.
                      result = attributeCompletions(templateInfo, path);
                  }
                  else if (ast.valueSpan && inSpan(templatePosition, spanOf(ast.valueSpan))) {
                      result = attributeValueCompletions(templateInfo, templatePosition, ast);
                  }
              },
              visitText: function (ast) {
                  // Check if we are in a entity.
                  result = entityCompletions(getSourceText(template, spanOf(ast)), astPosition_1);
                  if (result)
                      return result;
                  result = interpolationCompletions(templateInfo, templatePosition);
                  if (result)
                      return result;
                  var element = path.first(Element$1);
                  if (element) {
                      var definition = getHtmlTagDefinition(element.name);
                      if (definition.contentType === TagContentType.PARSABLE_DATA) {
                          result = voidElementAttributeCompletions(templateInfo, path);
                          if (!result) {
                              // If the element can hold content Show element completions.
                              result = elementCompletions(templateInfo, path);
                          }
                      }
                  }
                  else {
                      // If no element container, implies parsable data so show elements.
                      result = voidElementAttributeCompletions(templateInfo, path);
                      if (!result) {
                          result = elementCompletions(templateInfo, path);
                      }
                  }
              },
              visitComment: function (ast) { },
              visitExpansion: function (ast) { },
              visitExpansionCase: function (ast) { }
          }, null);
      }
      return result;
  }
  function attributeCompletions(info, path) {
      var item = path.tail instanceof Element$1 ? path.tail : path.parentOf(path.tail);
      if (item instanceof Element$1) {
          return attributeCompletionsForElement(info, item.name, item);
      }
      return undefined;
  }
  function attributeCompletionsForElement(info, elementName, element) {
      var attributes = getAttributeInfosForElement(info, elementName, element);
      // Map all the attributes to a completion
      return attributes.map(function (attr) { return ({
          kind: attr.fromHtml ? 'html attribute' : 'attribute',
          name: nameOfAttr(attr),
          sort: attr.name
      }); });
  }
  function getAttributeInfosForElement(info, elementName, element) {
      var attributes = [];
      // Add html attributes
      var htmlAttributes = attributeNames(elementName) || [];
      if (htmlAttributes) {
          attributes.push.apply(attributes, htmlAttributes.map(function (name) { return ({ name: name, fromHtml: true }); }));
      }
      // Add html properties
      var htmlProperties = propertyNames(elementName);
      if (htmlProperties) {
          attributes.push.apply(attributes, htmlProperties.map(function (name) { return ({ name: name, input: true }); }));
      }
      // Add html events
      var htmlEvents = eventNames(elementName);
      if (htmlEvents) {
          attributes.push.apply(attributes, htmlEvents.map(function (name) { return ({ name: name, output: true }); }));
      }
      var _a = getSelectors(info), selectors = _a.selectors, selectorMap = _a.map;
      if (selectors && selectors.length) {
          // All the attributes that are selectable should be shown.
          var applicableSelectors = selectors.filter(function (selector) { return !selector.element || selector.element == elementName; });
          var selectorAndAttributeNames = applicableSelectors.map(function (selector) { return ({ selector: selector, attrs: selector.attrs.filter(function (a) { return !!a; }) }); });
          var attrs_1 = flatten(selectorAndAttributeNames.map(function (selectorAndAttr) {
              var directive = selectorMap.get(selectorAndAttr.selector);
              var result = selectorAndAttr.attrs.map(function (name) { return ({ name: name, input: name in directive.inputs, output: name in directive.outputs }); });
              return result;
          }));
          // Add template attribute if a directive contains a template reference
          selectorAndAttributeNames.forEach(function (selectorAndAttr) {
              var selector = selectorAndAttr.selector;
              var directive = selectorMap.get(selector);
              if (directive && hasTemplateReference(directive.type) && selector.attrs.length &&
                  selector.attrs[0]) {
                  attrs_1.push({ name: selector.attrs[0], template: true });
              }
          });
          // All input and output properties of the matching directives should be added.
          var elementSelector = element ?
              createElementCssSelector$1(element) :
              createElementCssSelector$1(new Element$1(elementName, [], [], undefined, undefined, undefined));
          var matcher = new SelectorMatcher();
          matcher.addSelectables(selectors);
          matcher.match(elementSelector, function (selector) {
              var directive = selectorMap.get(selector);
              if (directive) {
                  attrs_1.push.apply(attrs_1, Object.keys(directive.inputs).map(function (name) { return ({ name: name, input: true }); }));
                  attrs_1.push.apply(attrs_1, Object.keys(directive.outputs).map(function (name) { return ({ name: name, output: true }); }));
              }
          });
          // If a name shows up twice, fold it into a single value.
          attrs_1 = foldAttrs(attrs_1);
          // Now expand them back out to ensure that input/output shows up as well as input and
          // output.
          attributes.push.apply(attributes, flatten(attrs_1.map(expandedAttr)));
      }
      return attributes;
  }
  function attributeValueCompletions(info, position, attr) {
      var path = new TemplateAstPath(info.templateAst, position);
      var mostSpecific = path.tail;
      if (mostSpecific) {
          var visitor = new ExpressionVisitor(info, position, attr, function () { return getExpressionScope(info, path, false); });
          mostSpecific.visit(visitor, null);
          if (!visitor.result || !visitor.result.length) {
              // Try allwoing widening the path
              var widerPath_1 = new TemplateAstPath(info.templateAst, position, /* allowWidening */ true);
              if (widerPath_1.tail) {
                  var widerVisitor = new ExpressionVisitor(info, position, attr, function () { return getExpressionScope(info, widerPath_1, false); });
                  widerPath_1.tail.visit(widerVisitor, null);
                  return widerVisitor.result;
              }
          }
          return visitor.result;
      }
  }
  function elementCompletions(info, path) {
      var htmlNames = elementNames().filter(function (name) { return !(name in hiddenHtmlElements); });
      // Collect the elements referenced by the selectors
      var directiveElements = getSelectors(info).selectors.map(function (selector) { return selector.element; }).filter(function (name) { return !!name; });
      var components = directiveElements.map(function (name) { return ({ kind: 'component', name: name, sort: name }); });
      var htmlElements = htmlNames.map(function (name) { return ({ kind: 'element', name: name, sort: name }); });
      // Return components and html elements
      return uniqueByName(htmlElements.concat(components));
  }
  function entityCompletions(value, position) {
      // Look for entity completions
      var re = /&[A-Za-z]*;?(?!\d)/g;
      var found;
      var result;
      while (found = re.exec(value)) {
          var len = found[0].length;
          if (position >= found.index && position < (found.index + len)) {
              result = Object.keys(NAMED_ENTITIES)
                  .map(function (name) { return ({ kind: 'entity', name: "&" + name + ";", sort: name }); });
              break;
          }
      }
      return result;
  }
  function interpolationCompletions(info, position) {
      // Look for an interpolation in at the position.
      var templatePath = new TemplateAstPath(info.templateAst, position);
      var mostSpecific = templatePath.tail;
      if (mostSpecific) {
          var visitor = new ExpressionVisitor(info, position, undefined, function () { return getExpressionScope(info, templatePath, false); });
          mostSpecific.visit(visitor, null);
          return uniqueByName(visitor.result);
      }
  }
  // There is a special case of HTML where text that contains a unclosed tag is treated as
  // text. For exaple '<h1> Some <a text </h1>' produces a text nodes inside of the H1
  // element "Some <a text". We, however, want to treat this as if the user was requesting
  // the attributes of an "a" element, not requesting completion in the a text element. This
  // code checks for this case and returns element completions if it is detected or undefined
  // if it is not.
  function voidElementAttributeCompletions(info, path) {
      var tail = path.tail;
      if (tail instanceof Text) {
          var match = tail.value.match(/<(\w(\w|\d|-)*:)?(\w(\w|\d|-)*)\s/);
          // The position must be after the match, otherwise we are still in a place where elements
          // are expected (such as `<|a` or `<a|`; we only want attributes for `<a |` or after).
          if (match && path.position >= match.index + match[0].length + tail.sourceSpan.start.offset) {
              return attributeCompletionsForElement(info, match[3]);
          }
      }
  }
  var ExpressionVisitor = (function (_super) {
      __extends$12(ExpressionVisitor, _super);
      function ExpressionVisitor(info, position, attr, getExpressionScope) {
          var _this = _super.call(this) || this;
          _this.info = info;
          _this.position = position;
          _this.attr = attr;
          _this.getExpressionScope = getExpressionScope;
          if (!getExpressionScope) {
              _this.getExpressionScope = function () { return info.template.members; };
          }
          return _this;
      }
      ExpressionVisitor.prototype.visitDirectiveProperty = function (ast) {
          this.attributeValueCompletions(ast.value);
      };
      ExpressionVisitor.prototype.visitElementProperty = function (ast) {
          this.attributeValueCompletions(ast.value);
      };
      ExpressionVisitor.prototype.visitEvent = function (ast) { this.attributeValueCompletions(ast.handler); };
      ExpressionVisitor.prototype.visitElement = function (ast) {
          var _this = this;
          if (this.attr && getSelectors(this.info) && this.attr.name.startsWith(TEMPLATE_ATTR_PREFIX$1)) {
              // The value is a template expression but the expression AST was not produced when the
              // TemplateAst was produce so
              // do that now.
              var key_1 = this.attr.name.substr(TEMPLATE_ATTR_PREFIX$1.length);
              // Find the selector
              var selectorInfo = getSelectors(this.info);
              var selectors = selectorInfo.selectors;
              var selector_1 = selectors.filter(function (s) { return s.attrs.some(function (attr, i) { return i % 2 == 0 && attr == key_1; }); })[0];
              var templateBindingResult = this.info.expressionParser.parseTemplateBindings(key_1, this.attr.value, null);
              // find the template binding that contains the position
              var valueRelativePosition_1 = this.position - this.attr.valueSpan.start.offset - 1;
              var bindings = templateBindingResult.templateBindings;
              var binding = bindings.find(function (binding) { return inSpan(valueRelativePosition_1, binding.span, /* exclusive */ true); }) ||
                  bindings.find(function (binding) { return inSpan(valueRelativePosition_1, binding.span); });
              var keyCompletions = function () {
                  var keys = [];
                  if (selector_1) {
                      var attrNames = selector_1.attrs.filter(function (_, i) { return i % 2 == 0; });
                      keys = attrNames.filter(function (name) { return name.startsWith(key_1) && name != key_1; })
                          .map(function (name) { return lowerName(name.substr(key_1.length)); });
                  }
                  keys.push('let');
                  _this.result = keys.map(function (key) { return ({ kind: 'key', name: key, sort: key }); });
              };
              if (!binding || (binding.key == key_1 && !binding.expression)) {
                  // We are in the root binding. We should return `let` and keys that are left in the
                  // selector.
                  keyCompletions();
              }
              else if (binding.keyIsVar) {
                  var equalLocation = this.attr.value.indexOf('=');
                  this.result = [];
                  if (equalLocation >= 0 && valueRelativePosition_1 >= equalLocation) {
                      // We are after the '=' in a let clause. The valid values here are the members of the
                      // template reference's type parameter.
                      var directiveMetadata = selectorInfo.map.get(selector_1);
                      var contextTable = this.info.template.query.getTemplateContext(directiveMetadata.type.reference);
                      if (contextTable) {
                          this.result = this.symbolsToCompletions(contextTable.values());
                      }
                  }
                  else if (binding.key && valueRelativePosition_1 <= (binding.key.length - key_1.length)) {
                      keyCompletions();
                  }
              }
              else {
                  // If the position is in the expression or after the key or there is no key, return the
                  // expression completions
                  if ((binding.expression && inSpan(valueRelativePosition_1, binding.expression.ast.span)) ||
                      (binding.key &&
                          valueRelativePosition_1 > binding.span.start + (binding.key.length - key_1.length)) ||
                      !binding.key) {
                      var span = new ParseSpan(0, this.attr.value.length);
                      this.attributeValueCompletions(binding.expression ? binding.expression.ast :
                          new PropertyRead(span, new ImplicitReceiver(span), ''), valueRelativePosition_1);
                  }
                  else {
                      keyCompletions();
                  }
              }
          }
      };
      ExpressionVisitor.prototype.visitBoundText = function (ast) {
          var expressionPosition = this.position - ast.sourceSpan.start.offset;
          if (inSpan(expressionPosition, ast.value.span)) {
              var completions = getExpressionCompletions(this.getExpressionScope(), ast.value, expressionPosition, this.info.template.query);
              if (completions) {
                  this.result = this.symbolsToCompletions(completions);
              }
          }
      };
      ExpressionVisitor.prototype.attributeValueCompletions = function (value, position) {
          var symbols = getExpressionCompletions(this.getExpressionScope(), value, position == null ? this.attributeValuePosition : position, this.info.template.query);
          if (symbols) {
              this.result = this.symbolsToCompletions(symbols);
          }
      };
      ExpressionVisitor.prototype.symbolsToCompletions = function (symbols) {
          return symbols.filter(function (s) { return !s.name.startsWith('__') && s.public; })
              .map(function (symbol) { return ({ kind: symbol.kind, name: symbol.name, sort: symbol.name }); });
      };
      Object.defineProperty(ExpressionVisitor.prototype, "attributeValuePosition", {
          get: function () {
              return this.position - this.attr.valueSpan.start.offset - 1;
          },
          enumerable: true,
          configurable: true
      });
      return ExpressionVisitor;
  }(NullTemplateVisitor));
  function getSourceText(template, span) {
      return template.source.substring(span.start, span.end);
  }
  function nameOfAttr(attr) {
      var name = attr.name;
      if (attr.output) {
          name = removeSuffix(name, 'Events');
          name = removeSuffix(name, 'Changed');
      }
      var result = [name];
      if (attr.input) {
          result.unshift('[');
          result.push(']');
      }
      if (attr.output) {
          result.unshift('(');
          result.push(')');
      }
      if (attr.template) {
          result.unshift('*');
      }
      return result.join('');
  }
  var templateAttr = /^(\w+:)?(template$|^\*)/;
  function createElementCssSelector$1(element) {
      var cssSelector = new CssSelector();
      var elNameNoNs = splitNsName(element.name)[1];
      cssSelector.setElement(elNameNoNs);
      for (var _i = 0, _a = element.attrs; _i < _a.length; _i++) {
          var attr = _a[_i];
          if (!attr.name.match(templateAttr)) {
              var _b = splitNsName(attr.name), _ = _b[0], attrNameNoNs = _b[1];
              cssSelector.addAttribute(attrNameNoNs, attr.value);
              if (attr.name.toLowerCase() == 'class') {
                  var classes = attr.value.split(/s+/g);
                  classes.forEach(function (className) { return cssSelector.addClassName(className); });
              }
          }
      }
      return cssSelector;
  }
  function foldAttrs(attrs) {
      var inputOutput = new Map();
      var templates = new Map();
      var result = [];
      attrs.forEach(function (attr) {
          if (attr.fromHtml) {
              return attr;
          }
          if (attr.template) {
              var duplicate = templates.get(attr.name);
              if (!duplicate) {
                  result.push({ name: attr.name, template: true });
                  templates.set(attr.name, attr);
              }
          }
          if (attr.input || attr.output) {
              var duplicate = inputOutput.get(attr.name);
              if (duplicate) {
                  duplicate.input = duplicate.input || attr.input;
                  duplicate.output = duplicate.output || attr.output;
              }
              else {
                  var cloneAttr = { name: attr.name };
                  if (attr.input)
                      cloneAttr.input = true;
                  if (attr.output)
                      cloneAttr.output = true;
                  result.push(cloneAttr);
                  inputOutput.set(attr.name, cloneAttr);
              }
          }
      });
      return result;
  }
  function expandedAttr(attr) {
      if (attr.input && attr.output) {
          return [
              attr, { name: attr.name, input: true, output: false },
              { name: attr.name, input: false, output: true }
          ];
      }
      return [attr];
  }
  function lowerName(name) {
      return name && (name[0].toLowerCase() + name.substr(1));
  }

  function locateSymbol(info) {
      var templatePosition = info.position - info.template.span.start;
      var path = new TemplateAstPath(info.templateAst, templatePosition);
      if (path.tail) {
          var symbol_1 = undefined;
          var span_1 = undefined;
          var attributeValueSymbol_1 = function (ast, inEvent) {
              if (inEvent === void 0) { inEvent = false; }
              var attribute = findAttribute(info);
              if (attribute) {
                  if (inSpan(templatePosition, spanOf(attribute.valueSpan))) {
                      var scope = getExpressionScope(info, path, inEvent);
                      var expressionOffset = attribute.valueSpan.start.offset + 1;
                      var result = getExpressionSymbol(scope, ast, templatePosition - expressionOffset, info.template.query);
                      if (result) {
                          symbol_1 = result.symbol;
                          span_1 = offsetSpan(result.span, expressionOffset);
                      }
                      return true;
                  }
              }
              return false;
          };
          path.tail.visit({
              visitNgContent: function (ast) { },
              visitEmbeddedTemplate: function (ast) { },
              visitElement: function (ast) {
                  var component = ast.directives.find(function (d) { return d.directive.isComponent; });
                  if (component) {
                      symbol_1 = info.template.query.getTypeSymbol(component.directive.type.reference);
                      symbol_1 = symbol_1 && new OverrideKindSymbol(symbol_1, 'component');
                      span_1 = spanOf(ast);
                  }
                  else {
                      // Find a directive that matches the element name
                      var directive = ast.directives.find(function (d) { return d.directive.selector.indexOf(ast.name) >= 0; });
                      if (directive) {
                          symbol_1 = info.template.query.getTypeSymbol(directive.directive.type.reference);
                          symbol_1 = symbol_1 && new OverrideKindSymbol(symbol_1, 'directive');
                          span_1 = spanOf(ast);
                      }
                  }
              },
              visitReference: function (ast) {
                  symbol_1 = info.template.query.getTypeSymbol(tokenReference(ast.value));
                  span_1 = spanOf(ast);
              },
              visitVariable: function (ast) { },
              visitEvent: function (ast) {
                  if (!attributeValueSymbol_1(ast.handler, /* inEvent */ true)) {
                      symbol_1 = findOutputBinding(info, path, ast);
                      symbol_1 = symbol_1 && new OverrideKindSymbol(symbol_1, 'event');
                      span_1 = spanOf(ast);
                  }
              },
              visitElementProperty: function (ast) { attributeValueSymbol_1(ast.value); },
              visitAttr: function (ast) { },
              visitBoundText: function (ast) {
                  var expressionPosition = templatePosition - ast.sourceSpan.start.offset;
                  if (inSpan(expressionPosition, ast.value.span)) {
                      var scope = getExpressionScope(info, path, /* includeEvent */ false);
                      var result = getExpressionSymbol(scope, ast.value, expressionPosition, info.template.query);
                      if (result) {
                          symbol_1 = result.symbol;
                          span_1 = offsetSpan(result.span, ast.sourceSpan.start.offset);
                      }
                  }
              },
              visitText: function (ast) { },
              visitDirective: function (ast) {
                  symbol_1 = info.template.query.getTypeSymbol(ast.directive.type.reference);
                  span_1 = spanOf(ast);
              },
              visitDirectiveProperty: function (ast) {
                  if (!attributeValueSymbol_1(ast.value)) {
                      symbol_1 = findInputBinding(info, path, ast);
                      span_1 = spanOf(ast);
                  }
              }
          }, null);
          if (symbol_1 && span_1) {
              return { symbol: symbol_1, span: offsetSpan(span_1, info.template.span.start) };
          }
      }
  }
  function findAttribute(info) {
      var templatePosition = info.position - info.template.span.start;
      var path = new HtmlAstPath(info.htmlAst, templatePosition);
      return path.first(Attribute$1);
  }
  function findInputBinding(info, path, binding) {
      var element = path.first(ElementAst);
      if (element) {
          for (var _i = 0, _a = element.directives; _i < _a.length; _i++) {
              var directive = _a[_i];
              var invertedInput = invertMap(directive.directive.inputs);
              var fieldName = invertedInput[binding.templateName];
              if (fieldName) {
                  var classSymbol = info.template.query.getTypeSymbol(directive.directive.type.reference);
                  if (classSymbol) {
                      return classSymbol.members().get(fieldName);
                  }
              }
          }
      }
  }
  function findOutputBinding(info, path, binding) {
      var element = path.first(ElementAst);
      if (element) {
          for (var _i = 0, _a = element.directives; _i < _a.length; _i++) {
              var directive = _a[_i];
              var invertedOutputs = invertMap(directive.directive.outputs);
              var fieldName = invertedOutputs[binding.name];
              if (fieldName) {
                  var classSymbol = info.template.query.getTypeSymbol(directive.directive.type.reference);
                  if (classSymbol) {
                      return classSymbol.members().get(fieldName);
                  }
              }
          }
      }
  }
  function invertMap(obj) {
      var result = {};
      for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
          var name_1 = _a[_i];
          var v = obj[name_1];
          result[v] = name_1;
      }
      return result;
  }
  /**
   * Wrap a symbol and change its kind to component.
   */
  var OverrideKindSymbol = (function () {
      function OverrideKindSymbol(sym, kindOverride) {
          this.sym = sym;
          this.kindOverride = kindOverride;
      }
      Object.defineProperty(OverrideKindSymbol.prototype, "name", {
          get: function () { return this.sym.name; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(OverrideKindSymbol.prototype, "kind", {
          get: function () { return this.kindOverride; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(OverrideKindSymbol.prototype, "language", {
          get: function () { return this.sym.language; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(OverrideKindSymbol.prototype, "type", {
          get: function () { return this.sym.type; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(OverrideKindSymbol.prototype, "container", {
          get: function () { return this.sym.container; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(OverrideKindSymbol.prototype, "public", {
          get: function () { return this.sym.public; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(OverrideKindSymbol.prototype, "callable", {
          get: function () { return this.sym.callable; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(OverrideKindSymbol.prototype, "definition", {
          get: function () { return this.sym.definition; },
          enumerable: true,
          configurable: true
      });
      OverrideKindSymbol.prototype.members = function () { return this.sym.members(); };
      OverrideKindSymbol.prototype.signatures = function () { return this.sym.signatures(); };
      OverrideKindSymbol.prototype.selectSignature = function (types) { return this.sym.selectSignature(types); };
      OverrideKindSymbol.prototype.indexed = function (argument) { return this.sym.indexed(argument); };
      return OverrideKindSymbol;
  }());

  function getDefinition(info) {
      var result = locateSymbol(info);
      return result && result.symbol.definition;
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var __extends$16 = (this && this.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function getTemplateDiagnostics(fileName, astProvider, templates) {
      var results = [];
      var _loop_1 = function (template) {
          var ast = astProvider.getTemplateAst(template, fileName);
          if (ast) {
              if (ast.parseErrors && ast.parseErrors.length) {
                  results.push.apply(results, ast.parseErrors.map(function (e) { return ({
                      kind: DiagnosticKind.Error,
                      span: offsetSpan(spanOf(e.span), template.span.start),
                      message: e.msg
                  }); }));
              }
              else if (ast.templateAst) {
                  var expressionDiagnostics = getTemplateExpressionDiagnostics(template, ast);
                  results.push.apply(results, expressionDiagnostics);
              }
              if (ast.errors) {
                  results.push.apply(results, ast.errors.map(function (e) { return ({ kind: e.kind, span: e.span || template.span, message: e.message }); }));
              }
          }
      };
      for (var _i = 0, templates_1 = templates; _i < templates_1.length; _i++) {
          var template = templates_1[_i];
          _loop_1(template);
      }
      return results;
  }
  function getDeclarationDiagnostics(declarations, modules) {
      var results = [];
      var directives = undefined;
      var _loop_2 = function (declaration) {
          var report = function (message, span) {
              results.push({
                  kind: DiagnosticKind.Error,
                  span: span || declaration.declarationSpan, message: message
              });
          };
          for (var _i = 0, _a = declaration.errors; _i < _a.length; _i++) {
              var error = _a[_i];
              report(error.message, error.span);
          }
          if (declaration.metadata) {
              if (declaration.metadata.isComponent) {
                  if (!modules.ngModuleByPipeOrDirective.has(declaration.type)) {
                      report("Component '" + declaration.type.name + "' is not included in a module and will not be available inside a template. Consider adding it to a NgModule declaration");
                  }
                  if (declaration.metadata.template.template == null &&
                      !declaration.metadata.template.templateUrl) {
                      report("Component " + declaration.type.name + " must have a template or templateUrl");
                  }
              }
              else {
                  if (!directives) {
                      directives = new Set();
                      modules.ngModules.forEach(function (module) {
                          module.declaredDirectives.forEach(function (directive) { directives.add(directive.reference); });
                      });
                  }
                  if (!directives.has(declaration.type)) {
                      report("Directive '" + declaration.type.name + "' is not included in a module and will not be available inside a template. Consider adding it to a NgModule declaration");
                  }
              }
          }
      };
      for (var _i = 0, declarations_1 = declarations; _i < declarations_1.length; _i++) {
          var declaration = declarations_1[_i];
          _loop_2(declaration);
      }
      return results;
  }
  function getTemplateExpressionDiagnostics(template, astResult) {
      var info = {
          template: template,
          htmlAst: astResult.htmlAst,
          directive: astResult.directive,
          directives: astResult.directives,
          pipes: astResult.pipes,
          templateAst: astResult.templateAst,
          expressionParser: astResult.expressionParser
      };
      var visitor = new ExpressionDiagnosticsVisitor(info, function (path, includeEvent) {
          return getExpressionScope(info, path, includeEvent);
      });
      templateVisitAll(visitor, astResult.templateAst);
      return visitor.diagnostics;
  }
  var ExpressionDiagnosticsVisitor = (function (_super) {
      __extends$16(ExpressionDiagnosticsVisitor, _super);
      function ExpressionDiagnosticsVisitor(info, getExpressionScope) {
          var _this = _super.call(this) || this;
          _this.info = info;
          _this.getExpressionScope = getExpressionScope;
          _this.diagnostics = [];
          _this.path = new TemplateAstPath([], 0);
          return _this;
      }
      ExpressionDiagnosticsVisitor.prototype.visitDirective = function (ast, context) {
          // Override the default child visitor to ignore the host properties of a directive.
          if (ast.inputs && ast.inputs.length) {
              templateVisitAll(this, ast.inputs, context);
          }
      };
      ExpressionDiagnosticsVisitor.prototype.visitBoundText = function (ast) {
          this.push(ast);
          this.diagnoseExpression(ast.value, ast.sourceSpan.start.offset, false);
          this.pop();
      };
      ExpressionDiagnosticsVisitor.prototype.visitDirectiveProperty = function (ast) {
          this.push(ast);
          this.diagnoseExpression(ast.value, this.attributeValueLocation(ast), false);
          this.pop();
      };
      ExpressionDiagnosticsVisitor.prototype.visitElementProperty = function (ast) {
          this.push(ast);
          this.diagnoseExpression(ast.value, this.attributeValueLocation(ast), false);
          this.pop();
      };
      ExpressionDiagnosticsVisitor.prototype.visitEvent = function (ast) {
          this.push(ast);
          this.diagnoseExpression(ast.handler, this.attributeValueLocation(ast), true);
          this.pop();
      };
      ExpressionDiagnosticsVisitor.prototype.visitVariable = function (ast) {
          var directive = this.directiveSummary;
          if (directive && ast.value) {
              var context = this.info.template.query.getTemplateContext(directive.type.reference);
              if (!context.has(ast.value)) {
                  if (ast.value === '$implicit') {
                      this.reportError('The template context does not have an implicit value', spanOf(ast.sourceSpan));
                  }
                  else {
                      this.reportError("The template context does not defined a member called '" + ast.value + "'", spanOf(ast.sourceSpan));
                  }
              }
          }
      };
      ExpressionDiagnosticsVisitor.prototype.visitElement = function (ast, context) {
          this.push(ast);
          _super.prototype.visitElement.call(this, ast, context);
          this.pop();
      };
      ExpressionDiagnosticsVisitor.prototype.visitEmbeddedTemplate = function (ast, context) {
          var previousDirectiveSummary = this.directiveSummary;
          this.push(ast);
          // Find directive that refernces this template
          this.directiveSummary =
              ast.directives.map(function (d) { return d.directive; }).find(function (d) { return hasTemplateReference(d.type); });
          // Process children
          _super.prototype.visitEmbeddedTemplate.call(this, ast, context);
          this.pop();
          this.directiveSummary = previousDirectiveSummary;
      };
      ExpressionDiagnosticsVisitor.prototype.attributeValueLocation = function (ast) {
          var path = new HtmlAstPath(this.info.htmlAst, ast.sourceSpan.start.offset);
          var last = path.tail;
          if (last instanceof Attribute$1 && last.valueSpan) {
              // Add 1 for the quote.
              return last.valueSpan.start.offset + 1;
          }
          return ast.sourceSpan.start.offset;
      };
      ExpressionDiagnosticsVisitor.prototype.diagnoseExpression = function (ast, offset, includeEvent) {
          var _this = this;
          var scope = this.getExpressionScope(this.path, includeEvent);
          (_a = this.diagnostics).push.apply(_a, getExpressionDiagnostics(scope, ast, this.info.template.query, {
              event: includeEvent
          }).map(function (d) { return ({
              span: offsetSpan(d.ast.span, offset + _this.info.template.span.start),
              kind: d.kind,
              message: d.message
          }); }));
          var _a;
      };
      ExpressionDiagnosticsVisitor.prototype.push = function (ast) { this.path.push(ast); };
      ExpressionDiagnosticsVisitor.prototype.pop = function () { this.path.pop(); };
      ExpressionDiagnosticsVisitor.prototype.selectors = function () {
          var result = this._selectors;
          if (!result) {
              this._selectors = result = getSelectors(this.info);
          }
          return result;
      };
      ExpressionDiagnosticsVisitor.prototype.findElement = function (position) {
          var htmlPath = new HtmlAstPath(this.info.htmlAst, position);
          if (htmlPath.tail instanceof Element) {
              return htmlPath.tail;
          }
      };
      ExpressionDiagnosticsVisitor.prototype.reportError = function (message, span) {
          this.diagnostics.push({
              span: offsetSpan(span, this.info.template.span.start),
              kind: DiagnosticKind.Error, message: message
          });
      };
      ExpressionDiagnosticsVisitor.prototype.reportWarning = function (message, span) {
          this.diagnostics.push({
              span: offsetSpan(span, this.info.template.span.start),
              kind: DiagnosticKind.Warning, message: message
          });
      };
      return ExpressionDiagnosticsVisitor;
  }(TemplateAstChildVisitor));

  function getHover(info) {
      var result = locateSymbol(info);
      if (result) {
          return { text: hoverTextOf(result.symbol), span: result.span };
      }
  }
  function hoverTextOf(symbol) {
      var result = [{ text: symbol.kind }, { text: ' ' }, { text: symbol.name, language: symbol.language }];
      var container = symbol.container;
      if (container) {
          result.push({ text: ' of ' }, { text: container.name, language: container.language });
      }
      return result;
  }

  /**
   * Create an instance of an Angular `LanguageService`.
   *
   * @experimental
   */
  function createLanguageService(host) {
      return new LanguageServiceImpl(host);
  }
  var LanguageServiceImpl = (function () {
      function LanguageServiceImpl(host) {
          this.host = host;
      }
      Object.defineProperty(LanguageServiceImpl.prototype, "metadataResolver", {
          get: function () { return this.host.resolver; },
          enumerable: true,
          configurable: true
      });
      LanguageServiceImpl.prototype.getTemplateReferences = function () { return this.host.getTemplateReferences(); };
      LanguageServiceImpl.prototype.getDiagnostics = function (fileName) {
          var results = [];
          var templates = this.host.getTemplates(fileName);
          if (templates && templates.length) {
              results.push.apply(results, getTemplateDiagnostics(fileName, this, templates));
          }
          var declarations = this.host.getDeclarations(fileName);
          if (declarations && declarations.length) {
              var summary = this.host.getAnalyzedModules();
              results.push.apply(results, getDeclarationDiagnostics(declarations, summary));
          }
          return uniqueBySpan(results);
      };
      LanguageServiceImpl.prototype.getPipesAt = function (fileName, position) {
          var templateInfo = this.getTemplateAstAtPosition(fileName, position);
          if (templateInfo) {
              return templateInfo.pipes.map(function (pipeInfo) { return ({ name: pipeInfo.name, symbol: pipeInfo.type.reference }); });
          }
      };
      LanguageServiceImpl.prototype.getCompletionsAt = function (fileName, position) {
          var templateInfo = this.getTemplateAstAtPosition(fileName, position);
          if (templateInfo) {
              return getTemplateCompletions(templateInfo);
          }
      };
      LanguageServiceImpl.prototype.getDefinitionAt = function (fileName, position) {
          var templateInfo = this.getTemplateAstAtPosition(fileName, position);
          if (templateInfo) {
              return getDefinition(templateInfo);
          }
      };
      LanguageServiceImpl.prototype.getHoverAt = function (fileName, position) {
          var templateInfo = this.getTemplateAstAtPosition(fileName, position);
          if (templateInfo) {
              return getHover(templateInfo);
          }
      };
      LanguageServiceImpl.prototype.getTemplateAstAtPosition = function (fileName, position) {
          var template = this.host.getTemplateAt(fileName, position);
          if (template) {
              var astResult = this.getTemplateAst(template, fileName);
              if (astResult && astResult.htmlAst && astResult.templateAst)
                  return {
                      position: position,
                      fileName: fileName,
                      template: template,
                      htmlAst: astResult.htmlAst,
                      directive: astResult.directive,
                      directives: astResult.directives,
                      pipes: astResult.pipes,
                      templateAst: astResult.templateAst,
                      expressionParser: astResult.expressionParser
                  };
          }
          return undefined;
      };
      LanguageServiceImpl.prototype.getTemplateAst = function (template, contextFile) {
          var _this = this;
          var result;
          try {
              var resolvedMetadata = this.metadataResolver.getNonNormalizedDirectiveMetadata(template.type);
              var metadata = resolvedMetadata && resolvedMetadata.metadata;
              if (metadata) {
                  var rawHtmlParser = new HtmlParser();
                  var htmlParser = new I18NHtmlParser(rawHtmlParser);
                  var expressionParser = new Parser(new Lexer());
                  var config = new CompilerConfig();
                  var parser = new TemplateParser(config, expressionParser, new DomElementSchemaRegistry(), htmlParser, null, []);
                  var htmlResult = htmlParser.parse(template.source, '');
                  var analyzedModules = this.host.getAnalyzedModules();
                  var errors = undefined;
                  var ngModule = analyzedModules.ngModuleByPipeOrDirective.get(template.type);
                  if (!ngModule) {
                      // Reported by the the declaration diagnostics.
                      ngModule = findSuitableDefaultModule(analyzedModules);
                  }
                  if (ngModule) {
                      var resolvedDirectives = ngModule.transitiveModule.directives.map(function (d) { return _this.host.resolver.getNonNormalizedDirectiveMetadata(d.reference); });
                      var directives = resolvedDirectives.filter(function (d) { return d !== null; }).map(function (d) { return d.metadata.toSummary(); });
                      var pipes = ngModule.transitiveModule.pipes.map(function (p) { return _this.host.resolver.getOrLoadPipeMetadata(p.reference).toSummary(); });
                      var schemas = ngModule.schemas;
                      var parseResult = parser.tryParseHtml(htmlResult, metadata, template.source, directives, pipes, schemas, '');
                      result = {
                          htmlAst: htmlResult.rootNodes,
                          templateAst: parseResult.templateAst,
                          directive: metadata, directives: directives, pipes: pipes,
                          parseErrors: parseResult.errors, expressionParser: expressionParser, errors: errors
                      };
                  }
              }
          }
          catch (e) {
              var span = template.span;
              if (e.fileName == contextFile) {
                  span = template.query.getSpanAt(e.line, e.column) || span;
              }
              result = { errors: [{ kind: DiagnosticKind.Error, message: e.message, span: span }] };
          }
          return result;
      };
      return LanguageServiceImpl;
  }());
  function uniqueBySpan(elements) {
      if (elements) {
          var result = [];
          var map = new Map();
          for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
              var element = elements_1[_i];
              var span = element.span;
              var set = map.get(span.start);
              if (!set) {
                  set = new Set();
                  map.set(span.start, set);
              }
              if (!set.has(span.end)) {
                  set.add(span.end);
                  result.push(element);
              }
          }
          return result;
      }
  }
  function findSuitableDefaultModule(modules) {
      var result;
      var resultSize = 0;
      for (var _i = 0, _a = modules.ngModules; _i < _a.length; _i++) {
          var module_1 = _a[_i];
          var moduleSize = module_1.transitiveModule.directives.length;
          if (moduleSize > resultSize) {
              result = module_1;
              resultSize = moduleSize;
          }
      }
      return result;
  }

  // Metadata Schema
  // If you make a backwards incompatible change to the schema, increment the VERSION number.
  // If you make a backwards compatible change to the metadata (such as adding an option field) then
  // leave VERSION the same. If possible, as many versions of the metadata that can represent the
  // semantics of the file in an array. For example, when generating a version 2 file, if version 1
  // can accurately represent the metadata, generate both version 1 and version 2 in an array.
  var VERSION$3 = 3;
  function isModuleMetadata(value) {
      return value && value.__symbolic === 'module';
  }
  var isModuleMetadata_1 = isModuleMetadata;
  function isClassMetadata(value) {
      return value && value.__symbolic === 'class';
  }
  var isClassMetadata_1 = isClassMetadata;
  function isMemberMetadata(value) {
      if (value) {
          switch (value.__symbolic) {
              case 'constructor':
              case 'method':
              case 'property':
                  return true;
          }
      }
      return false;
  }
  var isMemberMetadata_1 = isMemberMetadata;
  function isMethodMetadata(value) {
      return value && (value.__symbolic === 'constructor' || value.__symbolic === 'method');
  }
  var isMethodMetadata_1 = isMethodMetadata;
  function isConstructorMetadata(value) {
      return value && value.__symbolic === 'constructor';
  }
  var isConstructorMetadata_1 = isConstructorMetadata;
  function isFunctionMetadata(value) {
      return value && value.__symbolic === 'function';
  }
  var isFunctionMetadata_1 = isFunctionMetadata;
  function isMetadataSymbolicExpression(value) {
      if (value) {
          switch (value.__symbolic) {
              case 'binary':
              case 'call':
              case 'index':
              case 'new':
              case 'pre':
              case 'reference':
              case 'select':
              case 'spread':
              case 'if':
                  return true;
          }
      }
      return false;
  }
  var isMetadataSymbolicExpression_1 = isMetadataSymbolicExpression;
  function isMetadataSymbolicBinaryExpression(value) {
      return value && value.__symbolic === 'binary';
  }
  var isMetadataSymbolicBinaryExpression_1 = isMetadataSymbolicBinaryExpression;
  function isMetadataSymbolicIndexExpression(value) {
      return value && value.__symbolic === 'index';
  }
  var isMetadataSymbolicIndexExpression_1 = isMetadataSymbolicIndexExpression;
  function isMetadataSymbolicCallExpression(value) {
      return value && (value.__symbolic === 'call' || value.__symbolic === 'new');
  }
  var isMetadataSymbolicCallExpression_1 = isMetadataSymbolicCallExpression;
  function isMetadataSymbolicPrefixExpression(value) {
      return value && value.__symbolic === 'pre';
  }
  var isMetadataSymbolicPrefixExpression_1 = isMetadataSymbolicPrefixExpression;
  function isMetadataSymbolicIfExpression(value) {
      return value && value.__symbolic === 'if';
  }
  var isMetadataSymbolicIfExpression_1 = isMetadataSymbolicIfExpression;
  function isMetadataGlobalReferenceExpression(value) {
      return value && value.name && !value.module && isMetadataSymbolicReferenceExpression(value);
  }
  var isMetadataGlobalReferenceExpression_1 = isMetadataGlobalReferenceExpression;
  function isMetadataModuleReferenceExpression(value) {
      return value && value.module && !value.name && !value.default &&
          isMetadataSymbolicReferenceExpression(value);
  }
  var isMetadataModuleReferenceExpression_1 = isMetadataModuleReferenceExpression;
  function isMetadataImportedSymbolReferenceExpression(value) {
      return value && value.module && !!value.name && isMetadataSymbolicReferenceExpression(value);
  }
  var isMetadataImportedSymbolReferenceExpression_1 = isMetadataImportedSymbolReferenceExpression;
  function isMetadataImportDefaultReference(value) {
      return value.module && value.default && isMetadataSymbolicReferenceExpression(value);
  }
  var isMetadataImportDefaultReference_1 = isMetadataImportDefaultReference;
  function isMetadataSymbolicReferenceExpression(value) {
      return value && value.__symbolic === 'reference';
  }
  var isMetadataSymbolicReferenceExpression_1 = isMetadataSymbolicReferenceExpression;
  function isMetadataSymbolicSelectExpression(value) {
      return value && value.__symbolic === 'select';
  }
  var isMetadataSymbolicSelectExpression_1 = isMetadataSymbolicSelectExpression;
  function isMetadataSymbolicSpreadExpression(value) {
      return value && value.__symbolic === 'spread';
  }
  var isMetadataSymbolicSpreadExpression_1 = isMetadataSymbolicSpreadExpression;
  function isMetadataError(value) {
      return value && value.__symbolic === 'error';
  }
  var isMetadataError_1 = isMetadataError;

  var __moduleExports$31 = {
  	VERSION: VERSION$3,
  	isModuleMetadata: isModuleMetadata_1,
  	isClassMetadata: isClassMetadata_1,
  	isMemberMetadata: isMemberMetadata_1,
  	isMethodMetadata: isMethodMetadata_1,
  	isConstructorMetadata: isConstructorMetadata_1,
  	isFunctionMetadata: isFunctionMetadata_1,
  	isMetadataSymbolicExpression: isMetadataSymbolicExpression_1,
  	isMetadataSymbolicBinaryExpression: isMetadataSymbolicBinaryExpression_1,
  	isMetadataSymbolicIndexExpression: isMetadataSymbolicIndexExpression_1,
  	isMetadataSymbolicCallExpression: isMetadataSymbolicCallExpression_1,
  	isMetadataSymbolicPrefixExpression: isMetadataSymbolicPrefixExpression_1,
  	isMetadataSymbolicIfExpression: isMetadataSymbolicIfExpression_1,
  	isMetadataGlobalReferenceExpression: isMetadataGlobalReferenceExpression_1,
  	isMetadataModuleReferenceExpression: isMetadataModuleReferenceExpression_1,
  	isMetadataImportedSymbolReferenceExpression: isMetadataImportedSymbolReferenceExpression_1,
  	isMetadataImportDefaultReference: isMetadataImportDefaultReference_1,
  	isMetadataSymbolicReferenceExpression: isMetadataSymbolicReferenceExpression_1,
  	isMetadataSymbolicSelectExpression: isMetadataSymbolicSelectExpression_1,
  	isMetadataSymbolicSpreadExpression: isMetadataSymbolicSpreadExpression_1,
  	isMetadataError: isMetadataError_1
  };

  var ts$2 = ts;
  var schema_1$1 = __moduleExports$31;
  // In TypeScript 2.1 the spread element kind was renamed.
  var spreadElementSyntaxKind = ts$2.SyntaxKind.SpreadElement || ts$2.SyntaxKind.SpreadElementExpression;
  function isMethodCallOf(callExpression, memberName) {
      var expression = callExpression.expression;
      if (expression.kind === ts$2.SyntaxKind.PropertyAccessExpression) {
          var propertyAccessExpression = expression;
          var name_1 = propertyAccessExpression.name;
          if (name_1.kind == ts$2.SyntaxKind.Identifier) {
              return name_1.text === memberName;
          }
      }
      return false;
  }
  function isCallOf(callExpression, ident) {
      var expression = callExpression.expression;
      if (expression.kind === ts$2.SyntaxKind.Identifier) {
          var identifier = expression;
          return identifier.text === ident;
      }
      return false;
  }
  /**
   * ts.forEachChild stops iterating children when the callback return a truthy value.
   * This method inverts this to implement an `every` style iterator. It will return
   * true if every call to `cb` returns `true`.
   */
  function everyNodeChild(node, cb) {
      return !ts$2.forEachChild(node, function (node) { return !cb(node); });
  }
  function isPrimitive$3(value) {
      return Object(value) !== value;
  }
  var isPrimitive_1 = isPrimitive$3;
  function isDefined(obj) {
      return obj !== undefined;
  }
  function getSourceFileOfNode(node) {
      while (node && node.kind != ts$2.SyntaxKind.SourceFile) {
          node = node.parent;
      }
      return node;
  }
  /* @internal */
  function errorSymbol(message, node, context, sourceFile) {
      var result;
      if (node) {
          sourceFile = sourceFile || getSourceFileOfNode(node);
          if (sourceFile) {
              var _a = ts$2.getLineAndCharacterOfPosition(sourceFile, node.getStart(sourceFile)), line = _a.line, character = _a.character;
              result = { __symbolic: 'error', message: message, line: line, character: character };
          }
          ;
      }
      if (!result) {
          result = { __symbolic: 'error', message: message };
      }
      if (context) {
          result.context = context;
      }
      return result;
  }
  var errorSymbol_1 = errorSymbol;
  /**
   * Produce a symbolic representation of an expression folding values into their final value when
   * possible.
   */
  var Evaluator = (function () {
      function Evaluator(symbols, nodeMap, options) {
          if (options === void 0) { options = {}; }
          this.symbols = symbols;
          this.nodeMap = nodeMap;
          this.options = options;
      }
      Evaluator.prototype.nameOf = function (node) {
          if (node.kind == ts$2.SyntaxKind.Identifier) {
              return node.text;
          }
          var result = this.evaluateNode(node);
          if (schema_1$1.isMetadataError(result) || typeof result === 'string') {
              return result;
          }
          else {
              return errorSymbol('Name expected', node, { received: node.getText() });
          }
      };
      /**
       * Returns true if the expression represented by `node` can be folded into a literal expression.
       *
       * For example, a literal is always foldable. This means that literal expressions such as `1.2`
       * `"Some value"` `true` `false` are foldable.
       *
       * - An object literal is foldable if all the properties in the literal are foldable.
       * - An array literal is foldable if all the elements are foldable.
       * - A call is foldable if it is a call to a Array.prototype.concat or a call to CONST_EXPR.
       * - A property access is foldable if the object is foldable.
       * - A array index is foldable if index expression is foldable and the array is foldable.
       * - Binary operator expressions are foldable if the left and right expressions are foldable and
       *   it is one of '+', '-', '*', '/', '%', '||', and '&&'.
       * - An identifier is foldable if a value can be found for its symbol in the evaluator symbol
       *   table.
       */
      Evaluator.prototype.isFoldable = function (node) {
          return this.isFoldableWorker(node, new Map());
      };
      Evaluator.prototype.isFoldableWorker = function (node, folding) {
          var _this = this;
          if (node) {
              switch (node.kind) {
                  case ts$2.SyntaxKind.ObjectLiteralExpression:
                      return everyNodeChild(node, function (child) {
                          if (child.kind === ts$2.SyntaxKind.PropertyAssignment) {
                              var propertyAssignment = child;
                              return _this.isFoldableWorker(propertyAssignment.initializer, folding);
                          }
                          return false;
                      });
                  case ts$2.SyntaxKind.ArrayLiteralExpression:
                      return everyNodeChild(node, function (child) { return _this.isFoldableWorker(child, folding); });
                  case ts$2.SyntaxKind.CallExpression:
                      var callExpression = node;
                      // We can fold a <array>.concat(<v>).
                      if (isMethodCallOf(callExpression, 'concat') && callExpression.arguments.length === 1) {
                          var arrayNode = callExpression.expression.expression;
                          if (this.isFoldableWorker(arrayNode, folding) &&
                              this.isFoldableWorker(callExpression.arguments[0], folding)) {
                              // It needs to be an array.
                              var arrayValue = this.evaluateNode(arrayNode);
                              if (arrayValue && Array.isArray(arrayValue)) {
                                  return true;
                              }
                          }
                      }
                      // We can fold a call to CONST_EXPR
                      if (isCallOf(callExpression, 'CONST_EXPR') && callExpression.arguments.length === 1)
                          return this.isFoldableWorker(callExpression.arguments[0], folding);
                      return false;
                  case ts$2.SyntaxKind.NoSubstitutionTemplateLiteral:
                  case ts$2.SyntaxKind.StringLiteral:
                  case ts$2.SyntaxKind.NumericLiteral:
                  case ts$2.SyntaxKind.NullKeyword:
                  case ts$2.SyntaxKind.TrueKeyword:
                  case ts$2.SyntaxKind.FalseKeyword:
                      return true;
                  case ts$2.SyntaxKind.ParenthesizedExpression:
                      var parenthesizedExpression = node;
                      return this.isFoldableWorker(parenthesizedExpression.expression, folding);
                  case ts$2.SyntaxKind.BinaryExpression:
                      var binaryExpression = node;
                      switch (binaryExpression.operatorToken.kind) {
                          case ts$2.SyntaxKind.PlusToken:
                          case ts$2.SyntaxKind.MinusToken:
                          case ts$2.SyntaxKind.AsteriskToken:
                          case ts$2.SyntaxKind.SlashToken:
                          case ts$2.SyntaxKind.PercentToken:
                          case ts$2.SyntaxKind.AmpersandAmpersandToken:
                          case ts$2.SyntaxKind.BarBarToken:
                              return this.isFoldableWorker(binaryExpression.left, folding) &&
                                  this.isFoldableWorker(binaryExpression.right, folding);
                          default:
                              return false;
                      }
                  case ts$2.SyntaxKind.PropertyAccessExpression:
                      var propertyAccessExpression = node;
                      return this.isFoldableWorker(propertyAccessExpression.expression, folding);
                  case ts$2.SyntaxKind.ElementAccessExpression:
                      var elementAccessExpression = node;
                      return this.isFoldableWorker(elementAccessExpression.expression, folding) &&
                          this.isFoldableWorker(elementAccessExpression.argumentExpression, folding);
                  case ts$2.SyntaxKind.Identifier:
                      var identifier = node;
                      var reference = this.symbols.resolve(identifier.text);
                      if (reference !== undefined && isPrimitive$3(reference)) {
                          return true;
                      }
                      break;
              }
          }
          return false;
      };
      /**
       * Produce a JSON serialiable object representing `node`. The foldable values in the expression
       * tree are folded. For example, a node representing `1 + 2` is folded into `3`.
       */
      Evaluator.prototype.evaluateNode = function (node) {
          var _this = this;
          var t = this;
          var error;
          function recordEntry(entry, node) {
              t.nodeMap.set(entry, node);
              return entry;
          }
          switch (node.kind) {
              case ts$2.SyntaxKind.ObjectLiteralExpression:
                  var obj_1 = {};
                  var quoted_1 = [];
                  ts$2.forEachChild(node, function (child) {
                      switch (child.kind) {
                          case ts$2.SyntaxKind.ShorthandPropertyAssignment:
                          case ts$2.SyntaxKind.PropertyAssignment:
                              var assignment = child;
                              if (assignment.name.kind == ts$2.SyntaxKind.StringLiteral) {
                                  var name_2 = assignment.name.text;
                                  quoted_1.push(name_2);
                              }
                              var propertyName = _this.nameOf(assignment.name);
                              if (schema_1$1.isMetadataError(propertyName)) {
                                  error = propertyName;
                                  return true;
                              }
                              var propertyValue = isPropertyAssignment(assignment) ?
                                  _this.evaluateNode(assignment.initializer) :
                                  { __symbolic: 'reference', name: propertyName };
                              if (schema_1$1.isMetadataError(propertyValue)) {
                                  error = propertyValue;
                                  return true; // Stop the forEachChild.
                              }
                              else {
                                  obj_1[propertyName] = propertyValue;
                              }
                      }
                  });
                  if (error)
                      return error;
                  if (this.options.quotedNames && quoted_1.length) {
                      obj_1['$quoted$'] = quoted_1;
                  }
                  return obj_1;
              case ts$2.SyntaxKind.ArrayLiteralExpression:
                  var arr_1 = [];
                  ts$2.forEachChild(node, function (child) {
                      var value = _this.evaluateNode(child);
                      // Check for error
                      if (schema_1$1.isMetadataError(value)) {
                          error = value;
                          return true; // Stop the forEachChild.
                      }
                      // Handle spread expressions
                      if (schema_1$1.isMetadataSymbolicSpreadExpression(value)) {
                          if (Array.isArray(value.expression)) {
                              for (var _i = 0, _a = value.expression; _i < _a.length; _i++) {
                                  var spreadValue = _a[_i];
                                  arr_1.push(spreadValue);
                              }
                              return;
                          }
                      }
                      arr_1.push(value);
                  });
                  if (error)
                      return error;
                  return arr_1;
              case spreadElementSyntaxKind:
                  var spreadExpression = this.evaluateNode(node.expression);
                  return recordEntry({ __symbolic: 'spread', expression: spreadExpression }, node);
              case ts$2.SyntaxKind.CallExpression:
                  var callExpression = node;
                  if (isCallOf(callExpression, 'forwardRef') && callExpression.arguments.length === 1) {
                      var firstArgument = callExpression.arguments[0];
                      if (firstArgument.kind == ts$2.SyntaxKind.ArrowFunction) {
                          var arrowFunction = firstArgument;
                          return recordEntry(this.evaluateNode(arrowFunction.body), node);
                      }
                  }
                  var args_1 = callExpression.arguments.map(function (arg) { return _this.evaluateNode(arg); });
                  if (args_1.some(schema_1$1.isMetadataError)) {
                      return args_1.find(schema_1$1.isMetadataError);
                  }
                  if (this.isFoldable(callExpression)) {
                      if (isMethodCallOf(callExpression, 'concat')) {
                          var arrayValue = this.evaluateNode(callExpression.expression.expression);
                          if (schema_1$1.isMetadataError(arrayValue))
                              return arrayValue;
                          return arrayValue.concat(args_1[0]);
                      }
                  }
                  // Always fold a CONST_EXPR even if the argument is not foldable.
                  if (isCallOf(callExpression, 'CONST_EXPR') && callExpression.arguments.length === 1) {
                      return recordEntry(args_1[0], node);
                  }
                  var expression = this.evaluateNode(callExpression.expression);
                  if (schema_1$1.isMetadataError(expression)) {
                      return recordEntry(expression, node);
                  }
                  var result = { __symbolic: 'call', expression: expression };
                  if (args_1 && args_1.length) {
                      result.arguments = args_1;
                  }
                  return recordEntry(result, node);
              case ts$2.SyntaxKind.NewExpression:
                  var newExpression = node;
                  var newArgs = newExpression.arguments.map(function (arg) { return _this.evaluateNode(arg); });
                  if (newArgs.some(schema_1$1.isMetadataError)) {
                      return recordEntry(newArgs.find(schema_1$1.isMetadataError), node);
                  }
                  var newTarget = this.evaluateNode(newExpression.expression);
                  if (schema_1$1.isMetadataError(newTarget)) {
                      return recordEntry(newTarget, node);
                  }
                  var call = { __symbolic: 'new', expression: newTarget };
                  if (newArgs.length) {
                      call.arguments = newArgs;
                  }
                  return recordEntry(call, node);
              case ts$2.SyntaxKind.PropertyAccessExpression: {
                  var propertyAccessExpression = node;
                  var expression_1 = this.evaluateNode(propertyAccessExpression.expression);
                  if (schema_1$1.isMetadataError(expression_1)) {
                      return recordEntry(expression_1, node);
                  }
                  var member = this.nameOf(propertyAccessExpression.name);
                  if (schema_1$1.isMetadataError(member)) {
                      return recordEntry(member, node);
                  }
                  if (expression_1 && this.isFoldable(propertyAccessExpression.expression))
                      return expression_1[member];
                  if (schema_1$1.isMetadataModuleReferenceExpression(expression_1)) {
                      // A select into a module refrence and be converted into a reference to the symbol
                      // in the module
                      return recordEntry({ __symbolic: 'reference', module: expression_1.module, name: member }, node);
                  }
                  return recordEntry({ __symbolic: 'select', expression: expression_1, member: member }, node);
              }
              case ts$2.SyntaxKind.ElementAccessExpression: {
                  var elementAccessExpression = node;
                  var expression_2 = this.evaluateNode(elementAccessExpression.expression);
                  if (schema_1$1.isMetadataError(expression_2)) {
                      return recordEntry(expression_2, node);
                  }
                  var index = this.evaluateNode(elementAccessExpression.argumentExpression);
                  if (schema_1$1.isMetadataError(expression_2)) {
                      return recordEntry(expression_2, node);
                  }
                  if (this.isFoldable(elementAccessExpression.expression) &&
                      this.isFoldable(elementAccessExpression.argumentExpression))
                      return expression_2[index];
                  return recordEntry({ __symbolic: 'index', expression: expression_2, index: index }, node);
              }
              case ts$2.SyntaxKind.Identifier:
                  var identifier = node;
                  var name_3 = identifier.text;
                  var reference = this.symbols.resolve(name_3);
                  if (reference === undefined) {
                      // Encode as a global reference. StaticReflector will check the reference.
                      return recordEntry({ __symbolic: 'reference', name: name_3 }, node);
                  }
                  return reference;
              case ts$2.SyntaxKind.TypeReference:
                  var typeReferenceNode = node;
                  var typeNameNode_1 = typeReferenceNode.typeName;
                  var getReference = function (node) {
                      if (typeNameNode_1.kind === ts$2.SyntaxKind.QualifiedName) {
                          var qualifiedName = node;
                          var left_1 = _this.evaluateNode(qualifiedName.left);
                          if (schema_1$1.isMetadataModuleReferenceExpression(left_1)) {
                              return recordEntry({
                                  __symbolic: 'reference',
                                  module: left_1.module,
                                  name: qualifiedName.right.text
                              }, node);
                          }
                          // Record a type reference to a declared type as a select.
                          return { __symbolic: 'select', expression: left_1, member: qualifiedName.right.text };
                      }
                      else {
                          var identifier_1 = typeNameNode_1;
                          var symbol = _this.symbols.resolve(identifier_1.text);
                          if (schema_1$1.isMetadataError(symbol) || schema_1$1.isMetadataSymbolicReferenceExpression(symbol)) {
                              return recordEntry(symbol, node);
                          }
                          return recordEntry(errorSymbol('Could not resolve type', node, { typeName: identifier_1.text }), node);
                      }
                  };
                  var typeReference = getReference(typeNameNode_1);
                  if (schema_1$1.isMetadataError(typeReference)) {
                      return recordEntry(typeReference, node);
                  }
                  if (!schema_1$1.isMetadataModuleReferenceExpression(typeReference) &&
                      typeReferenceNode.typeArguments && typeReferenceNode.typeArguments.length) {
                      var args_2 = typeReferenceNode.typeArguments.map(function (element) { return _this.evaluateNode(element); });
                      // TODO: Remove typecast when upgraded to 2.0 as it will be corretly inferred.
                      // Some versions of 1.9 do not infer this correctly.
                      typeReference.arguments = args_2;
                  }
                  return recordEntry(typeReference, node);
              case ts$2.SyntaxKind.NoSubstitutionTemplateLiteral:
                  return node.text;
              case ts$2.SyntaxKind.StringLiteral:
                  return node.text;
              case ts$2.SyntaxKind.NumericLiteral:
                  return parseFloat(node.text);
              case ts$2.SyntaxKind.AnyKeyword:
                  return recordEntry({ __symbolic: 'reference', name: 'any' }, node);
              case ts$2.SyntaxKind.StringKeyword:
                  return recordEntry({ __symbolic: 'reference', name: 'string' }, node);
              case ts$2.SyntaxKind.NumberKeyword:
                  return recordEntry({ __symbolic: 'reference', name: 'number' }, node);
              case ts$2.SyntaxKind.BooleanKeyword:
                  return recordEntry({ __symbolic: 'reference', name: 'boolean' }, node);
              case ts$2.SyntaxKind.ArrayType:
                  var arrayTypeNode = node;
                  return recordEntry({
                      __symbolic: 'reference',
                      name: 'Array',
                      arguments: [this.evaluateNode(arrayTypeNode.elementType)]
                  }, node);
              case ts$2.SyntaxKind.NullKeyword:
                  return null;
              case ts$2.SyntaxKind.TrueKeyword:
                  return true;
              case ts$2.SyntaxKind.FalseKeyword:
                  return false;
              case ts$2.SyntaxKind.ParenthesizedExpression:
                  var parenthesizedExpression = node;
                  return this.evaluateNode(parenthesizedExpression.expression);
              case ts$2.SyntaxKind.TypeAssertionExpression:
                  var typeAssertion = node;
                  return this.evaluateNode(typeAssertion.expression);
              case ts$2.SyntaxKind.PrefixUnaryExpression:
                  var prefixUnaryExpression = node;
                  var operand = this.evaluateNode(prefixUnaryExpression.operand);
                  if (isDefined(operand) && isPrimitive$3(operand)) {
                      switch (prefixUnaryExpression.operator) {
                          case ts$2.SyntaxKind.PlusToken:
                              return +operand;
                          case ts$2.SyntaxKind.MinusToken:
                              return -operand;
                          case ts$2.SyntaxKind.TildeToken:
                              return ~operand;
                          case ts$2.SyntaxKind.ExclamationToken:
                              return !operand;
                      }
                  }
                  var operatorText = void 0;
                  switch (prefixUnaryExpression.operator) {
                      case ts$2.SyntaxKind.PlusToken:
                          operatorText = '+';
                          break;
                      case ts$2.SyntaxKind.MinusToken:
                          operatorText = '-';
                          break;
                      case ts$2.SyntaxKind.TildeToken:
                          operatorText = '~';
                          break;
                      case ts$2.SyntaxKind.ExclamationToken:
                          operatorText = '!';
                          break;
                      default:
                          return undefined;
                  }
                  return recordEntry({ __symbolic: 'pre', operator: operatorText, operand: operand }, node);
              case ts$2.SyntaxKind.BinaryExpression:
                  var binaryExpression = node;
                  var left = this.evaluateNode(binaryExpression.left);
                  var right = this.evaluateNode(binaryExpression.right);
                  if (isDefined(left) && isDefined(right)) {
                      if (isPrimitive$3(left) && isPrimitive$3(right))
                          switch (binaryExpression.operatorToken.kind) {
                              case ts$2.SyntaxKind.BarBarToken:
                                  return left || right;
                              case ts$2.SyntaxKind.AmpersandAmpersandToken:
                                  return left && right;
                              case ts$2.SyntaxKind.AmpersandToken:
                                  return left & right;
                              case ts$2.SyntaxKind.BarToken:
                                  return left | right;
                              case ts$2.SyntaxKind.CaretToken:
                                  return left ^ right;
                              case ts$2.SyntaxKind.EqualsEqualsToken:
                                  return left == right;
                              case ts$2.SyntaxKind.ExclamationEqualsToken:
                                  return left != right;
                              case ts$2.SyntaxKind.EqualsEqualsEqualsToken:
                                  return left === right;
                              case ts$2.SyntaxKind.ExclamationEqualsEqualsToken:
                                  return left !== right;
                              case ts$2.SyntaxKind.LessThanToken:
                                  return left < right;
                              case ts$2.SyntaxKind.GreaterThanToken:
                                  return left > right;
                              case ts$2.SyntaxKind.LessThanEqualsToken:
                                  return left <= right;
                              case ts$2.SyntaxKind.GreaterThanEqualsToken:
                                  return left >= right;
                              case ts$2.SyntaxKind.LessThanLessThanToken:
                                  return left << right;
                              case ts$2.SyntaxKind.GreaterThanGreaterThanToken:
                                  return left >> right;
                              case ts$2.SyntaxKind.GreaterThanGreaterThanGreaterThanToken:
                                  return left >>> right;
                              case ts$2.SyntaxKind.PlusToken:
                                  return left + right;
                              case ts$2.SyntaxKind.MinusToken:
                                  return left - right;
                              case ts$2.SyntaxKind.AsteriskToken:
                                  return left * right;
                              case ts$2.SyntaxKind.SlashToken:
                                  return left / right;
                              case ts$2.SyntaxKind.PercentToken:
                                  return left % right;
                          }
                      return recordEntry({
                          __symbolic: 'binop',
                          operator: binaryExpression.operatorToken.getText(),
                          left: left,
                          right: right
                      }, node);
                  }
                  break;
              case ts$2.SyntaxKind.ConditionalExpression:
                  var conditionalExpression = node;
                  var condition = this.evaluateNode(conditionalExpression.condition);
                  var thenExpression = this.evaluateNode(conditionalExpression.whenTrue);
                  var elseExpression = this.evaluateNode(conditionalExpression.whenFalse);
                  if (isPrimitive$3(condition)) {
                      return condition ? thenExpression : elseExpression;
                  }
                  return recordEntry({ __symbolic: 'if', condition: condition, thenExpression: thenExpression, elseExpression: elseExpression }, node);
              case ts$2.SyntaxKind.FunctionExpression:
              case ts$2.SyntaxKind.ArrowFunction:
                  return recordEntry(errorSymbol('Function call not supported', node), node);
          }
          return recordEntry(errorSymbol('Expression form not supported', node), node);
      };
      return Evaluator;
  }());
  var Evaluator_1 = Evaluator;
  function isPropertyAssignment(node) {
      return node.kind == ts$2.SyntaxKind.PropertyAssignment;
  }

  var __moduleExports$30 = {
  	isPrimitive: isPrimitive_1,
  	errorSymbol: errorSymbol_1,
  	Evaluator: Evaluator_1
  };

  var ts$3 = ts;
  var Symbols = (function () {
      function Symbols(sourceFile) {
          this.sourceFile = sourceFile;
      }
      Symbols.prototype.resolve = function (name) { return this.symbols.get(name); };
      Symbols.prototype.define = function (name, value) { this.symbols.set(name, value); };
      Symbols.prototype.has = function (name) { return this.symbols.has(name); };
      Object.defineProperty(Symbols.prototype, "symbols", {
          get: function () {
              var result = this._symbols;
              if (!result) {
                  result = this._symbols = new Map();
                  populateBuiltins(result);
                  this.buildImports();
              }
              return result;
          },
          enumerable: true,
          configurable: true
      });
      Symbols.prototype.buildImports = function () {
          var _this = this;
          var symbols = this._symbols;
          // Collect the imported symbols into this.symbols
          var stripQuotes = function (s) { return s.replace(/^['"]|['"]$/g, ''); };
          var visit = function (node) {
              switch (node.kind) {
                  case ts$3.SyntaxKind.ImportEqualsDeclaration:
                      var importEqualsDeclaration = node;
                      if (importEqualsDeclaration.moduleReference.kind ===
                          ts$3.SyntaxKind.ExternalModuleReference) {
                          var externalReference = importEqualsDeclaration.moduleReference;
                          // An `import <identifier> = require(<module-specifier>);
                          if (!externalReference.expression.parent) {
                              // The `parent` field of a node is set by the TypeScript binder (run as
                              // part of the type checker). Setting it here allows us to call `getText()`
                              // even if the `SourceFile` was not type checked (which looks for `SourceFile`
                              // in the parent chain). This doesn't damage the node as the binder unconditionally
                              // sets the parent.
                              externalReference.expression.parent = externalReference;
                              externalReference.parent = _this.sourceFile;
                          }
                          var from_1 = stripQuotes(externalReference.expression.getText());
                          symbols.set(importEqualsDeclaration.name.text, { __symbolic: 'reference', module: from_1 });
                      }
                      else {
                          symbols.set(importEqualsDeclaration.name.text, { __symbolic: 'error', message: "Unsupported import syntax" });
                      }
                      break;
                  case ts$3.SyntaxKind.ImportDeclaration:
                      var importDecl = node;
                      if (!importDecl.importClause) {
                          // An `import <module-specifier>` clause which does not bring symbols into scope.
                          break;
                      }
                      if (!importDecl.moduleSpecifier.parent) {
                          // See note above in the `ImportEqualDeclaration` case.
                          importDecl.moduleSpecifier.parent = importDecl;
                          importDecl.parent = _this.sourceFile;
                      }
                      var from = stripQuotes(importDecl.moduleSpecifier.getText());
                      if (importDecl.importClause.name) {
                          // An `import <identifier> form <module-specifier>` clause. Record the defualt symbol.
                          symbols.set(importDecl.importClause.name.text, { __symbolic: 'reference', module: from, default: true });
                      }
                      var bindings = importDecl.importClause.namedBindings;
                      if (bindings) {
                          switch (bindings.kind) {
                              case ts$3.SyntaxKind.NamedImports:
                                  // An `import { [<identifier> [, <identifier>] } from <module-specifier>` clause
                                  for (var _i = 0, _a = bindings.elements; _i < _a.length; _i++) {
                                      var binding = _a[_i];
                                      symbols.set(binding.name.text, {
                                          __symbolic: 'reference',
                                          module: from,
                                          name: binding.propertyName ? binding.propertyName.text : binding.name.text
                                      });
                                  }
                                  break;
                              case ts$3.SyntaxKind.NamespaceImport:
                                  // An `input * as <identifier> from <module-specifier>` clause.
                                  symbols.set(bindings.name.text, { __symbolic: 'reference', module: from });
                                  break;
                          }
                      }
                      break;
              }
              ts$3.forEachChild(node, visit);
          };
          if (this.sourceFile) {
              ts$3.forEachChild(this.sourceFile, visit);
          }
      };
      return Symbols;
  }());
  var Symbols_1 = Symbols;
  function populateBuiltins(symbols) {
      // From lib.core.d.ts (all "define const")
      ['Object', 'Function', 'String', 'Number', 'Array', 'Boolean', 'Map', 'NaN', 'Infinity', 'Math',
          'Date', 'RegExp', 'Error', 'Error', 'EvalError', 'RangeError', 'ReferenceError', 'SyntaxError',
          'TypeError', 'URIError', 'JSON', 'ArrayBuffer', 'DataView', 'Int8Array', 'Uint8Array',
          'Uint8ClampedArray', 'Uint16Array', 'Int16Array', 'Int32Array', 'Uint32Array', 'Float32Array',
          'Float64Array']
          .forEach(function (name) { return symbols.set(name, { __symbolic: 'reference', name: name }); });
  }

  var __moduleExports$32 = {
  	Symbols: Symbols_1
  };

  var ts$1 = ts;
  var evaluator_1 = __moduleExports$30;
  var schema_1 = __moduleExports$31;
  var symbols_1 = __moduleExports$32;
  // In TypeScript 2.1 these flags moved
  // These helpers work for both 2.0 and 2.1.
  var isExport = ts$1.ModifierFlags ?
      (function (node) {
          return !!(ts$1.getCombinedModifierFlags(node) & ts$1.ModifierFlags.Export);
      }) :
      (function (node) { return !!((node.flags & ts$1.NodeFlags.Export)); });
  var isStatic = ts$1.ModifierFlags ?
      (function (node) {
          return !!(ts$1.getCombinedModifierFlags(node) & ts$1.ModifierFlags.Static);
      }) :
      (function (node) { return !!((node.flags & ts$1.NodeFlags.Static)); });
  /**
   * A set of collector options to use when collecting metadata.
   */
  var CollectorOptions = (function () {
      function CollectorOptions() {
      }
      return CollectorOptions;
  }());
  var CollectorOptions_1 = CollectorOptions;
  /**
   * Collect decorator metadata from a TypeScript module.
   */
  var MetadataCollector = (function () {
      function MetadataCollector(options) {
          if (options === void 0) { options = {}; }
          this.options = options;
      }
      /**
       * Returns a JSON.stringify friendly form describing the decorators of the exported classes from
       * the source file that is expected to correspond to a module.
       */
      MetadataCollector.prototype.getMetadata = function (sourceFile, strict) {
          if (strict === void 0) { strict = false; }
          var locals = new symbols_1.Symbols(sourceFile);
          var nodeMap = new Map();
          var evaluator = new evaluator_1.Evaluator(locals, nodeMap, this.options);
          var metadata;
          var exports;
          function objFromDecorator(decoratorNode) {
              return evaluator.evaluateNode(decoratorNode.expression);
          }
          function recordEntry(entry, node) {
              nodeMap.set(entry, node);
              return entry;
          }
          function errorSym(message, node, context) {
              return evaluator_1.errorSymbol(message, node, context, sourceFile);
          }
          function maybeGetSimpleFunction(functionDeclaration) {
              if (functionDeclaration.name.kind == ts$1.SyntaxKind.Identifier) {
                  var nameNode = functionDeclaration.name;
                  var functionName = nameNode.text;
                  var functionBody = functionDeclaration.body;
                  if (functionBody && functionBody.statements.length == 1) {
                      var statement = functionBody.statements[0];
                      if (statement.kind === ts$1.SyntaxKind.ReturnStatement) {
                          var returnStatement = statement;
                          if (returnStatement.expression) {
                              var func = {
                                  __symbolic: 'function',
                                  parameters: namesOf(functionDeclaration.parameters),
                                  value: evaluator.evaluateNode(returnStatement.expression)
                              };
                              if (functionDeclaration.parameters.some(function (p) { return p.initializer != null; })) {
                                  var defaults = [];
                                  func.defaults = functionDeclaration.parameters.map(function (p) { return p.initializer && evaluator.evaluateNode(p.initializer); });
                              }
                              return recordEntry({ func: func, name: functionName }, functionDeclaration);
                          }
                      }
                  }
              }
          }
          function classMetadataOf(classDeclaration) {
              var result = { __symbolic: 'class' };
              function getDecorators(decorators) {
                  if (decorators && decorators.length)
                      return decorators.map(function (decorator) { return objFromDecorator(decorator); });
                  return undefined;
              }
              function referenceFrom(node) {
                  var result = evaluator.evaluateNode(node);
                  if (schema_1.isMetadataError(result) || schema_1.isMetadataSymbolicReferenceExpression(result) ||
                      schema_1.isMetadataSymbolicSelectExpression(result)) {
                      return result;
                  }
                  else {
                      return errorSym('Symbol reference expected', node);
                  }
              }
              // Add class parents
              if (classDeclaration.heritageClauses) {
                  classDeclaration.heritageClauses.forEach(function (hc) {
                      if (hc.token === ts$1.SyntaxKind.ExtendsKeyword && hc.types) {
                          hc.types.forEach(function (type) { return result.extends = referenceFrom(type.expression); });
                      }
                  });
              }
              // Add arity if the type is generic
              var typeParameters = classDeclaration.typeParameters;
              if (typeParameters && typeParameters.length) {
                  result.arity = typeParameters.length;
              }
              // Add class decorators
              if (classDeclaration.decorators) {
                  result.decorators = getDecorators(classDeclaration.decorators);
              }
              // member decorators
              var members = null;
              function recordMember(name, metadata) {
                  if (!members)
                      members = {};
                  var data = members.hasOwnProperty(name) ? members[name] : [];
                  data.push(metadata);
                  members[name] = data;
              }
              // static member
              var statics = null;
              function recordStaticMember(name, value) {
                  if (!statics)
                      statics = {};
                  statics[name] = value;
              }
              for (var _i = 0, _a = classDeclaration.members; _i < _a.length; _i++) {
                  var member = _a[_i];
                  var isConstructor = false;
                  switch (member.kind) {
                      case ts$1.SyntaxKind.Constructor:
                      case ts$1.SyntaxKind.MethodDeclaration:
                          isConstructor = member.kind === ts$1.SyntaxKind.Constructor;
                          var method = member;
                          if (isStatic(method)) {
                              var maybeFunc = maybeGetSimpleFunction(method);
                              if (maybeFunc) {
                                  recordStaticMember(maybeFunc.name, maybeFunc.func);
                              }
                              continue;
                          }
                          var methodDecorators = getDecorators(method.decorators);
                          var parameters = method.parameters;
                          var parameterDecoratorData = [];
                          var parametersData = [];
                          var hasDecoratorData = false;
                          var hasParameterData = false;
                          for (var _b = 0, parameters_1 = parameters; _b < parameters_1.length; _b++) {
                              var parameter = parameters_1[_b];
                              var parameterData = getDecorators(parameter.decorators);
                              parameterDecoratorData.push(parameterData);
                              hasDecoratorData = hasDecoratorData || !!parameterData;
                              if (isConstructor) {
                                  if (parameter.type) {
                                      parametersData.push(referenceFrom(parameter.type));
                                  }
                                  else {
                                      parametersData.push(null);
                                  }
                                  hasParameterData = true;
                              }
                          }
                          var data = { __symbolic: isConstructor ? 'constructor' : 'method' };
                          var name_1 = isConstructor ? '__ctor__' : evaluator.nameOf(member.name);
                          if (methodDecorators) {
                              data.decorators = methodDecorators;
                          }
                          if (hasDecoratorData) {
                              data.parameterDecorators = parameterDecoratorData;
                          }
                          if (hasParameterData) {
                              data.parameters = parametersData;
                          }
                          if (!schema_1.isMetadataError(name_1)) {
                              recordMember(name_1, data);
                          }
                          break;
                      case ts$1.SyntaxKind.PropertyDeclaration:
                      case ts$1.SyntaxKind.GetAccessor:
                      case ts$1.SyntaxKind.SetAccessor:
                          var property = member;
                          if (isStatic(property)) {
                              var name_2 = evaluator.nameOf(property.name);
                              if (!schema_1.isMetadataError(name_2)) {
                                  if (property.initializer) {
                                      var value = evaluator.evaluateNode(property.initializer);
                                      recordStaticMember(name_2, value);
                                  }
                                  else {
                                      recordStaticMember(name_2, errorSym('Variable not initialized', property.name));
                                  }
                              }
                          }
                          var propertyDecorators = getDecorators(property.decorators);
                          if (propertyDecorators) {
                              var name_3 = evaluator.nameOf(property.name);
                              if (!schema_1.isMetadataError(name_3)) {
                                  recordMember(name_3, { __symbolic: 'property', decorators: propertyDecorators });
                              }
                          }
                          break;
                  }
              }
              if (members) {
                  result.members = members;
              }
              if (statics) {
                  result.statics = statics;
              }
              return recordEntry(result, classDeclaration);
          }
          // Collect all exported symbols from an exports clause.
          var exportMap = new Map();
          ts$1.forEachChild(sourceFile, function (node) {
              switch (node.kind) {
                  case ts$1.SyntaxKind.ExportDeclaration:
                      var exportDeclaration = node;
                      var moduleSpecifier = exportDeclaration.moduleSpecifier, exportClause = exportDeclaration.exportClause;
                      if (!moduleSpecifier) {
                          exportClause.elements.forEach(function (spec) {
                              var exportedAs = spec.name.text;
                              var name = (spec.propertyName || spec.name).text;
                              exportMap.set(name, exportedAs);
                          });
                      }
              }
          });
          var isExportedIdentifier = function (identifier) { return exportMap.has(identifier.text); };
          var isExported = function (node) {
              return isExport(node) || isExportedIdentifier(node.name);
          };
          var exportedIdentifierName = function (identifier) {
              return exportMap.get(identifier.text) || identifier.text;
          };
          var exportedName = function (node) {
              return exportedIdentifierName(node.name);
          };
          // Predeclare classes and functions
          ts$1.forEachChild(sourceFile, function (node) {
              switch (node.kind) {
                  case ts$1.SyntaxKind.ClassDeclaration:
                      var classDeclaration = node;
                      if (classDeclaration.name) {
                          var className = classDeclaration.name.text;
                          if (isExported(classDeclaration)) {
                              locals.define(className, { __symbolic: 'reference', name: exportedName(classDeclaration) });
                          }
                          else {
                              locals.define(className, errorSym('Reference to non-exported class', node, { className: className }));
                          }
                      }
                      break;
                  case ts$1.SyntaxKind.FunctionDeclaration:
                      var functionDeclaration = node;
                      if (!isExported(functionDeclaration)) {
                          // Report references to this function as an error.
                          var nameNode = functionDeclaration.name;
                          if (nameNode && nameNode.text) {
                              locals.define(nameNode.text, errorSym('Reference to a non-exported function', nameNode, { name: nameNode.text }));
                          }
                      }
                      break;
              }
          });
          ts$1.forEachChild(sourceFile, function (node) {
              switch (node.kind) {
                  case ts$1.SyntaxKind.ExportDeclaration:
                      // Record export declarations
                      var exportDeclaration = node;
                      var moduleSpecifier = exportDeclaration.moduleSpecifier, exportClause = exportDeclaration.exportClause;
                      if (!moduleSpecifier) {
                          // no module specifier -> export {propName as name};
                          if (exportClause) {
                              exportClause.elements.forEach(function (spec) {
                                  var name = spec.name.text;
                                  // If the symbol was not already exported, export a reference since it is a
                                  // reference to an import
                                  if (!metadata || !metadata[name]) {
                                      var propNode = spec.propertyName || spec.name;
                                      var value = evaluator.evaluateNode(propNode);
                                      if (!metadata)
                                          metadata = {};
                                      metadata[name] = recordEntry(value, node);
                                  }
                              });
                          }
                      }
                      if (moduleSpecifier && moduleSpecifier.kind == ts$1.SyntaxKind.StringLiteral) {
                          // Ignore exports that don't have string literals as exports.
                          // This is allowed by the syntax but will be flagged as an error by the type checker.
                          var from = moduleSpecifier.text;
                          var moduleExport = { from: from };
                          if (exportClause) {
                              moduleExport.export = exportClause.elements.map(function (spec) { return spec.propertyName ? { name: spec.propertyName.text, as: spec.name.text } :
                                  spec.name.text; });
                          }
                          if (!exports)
                              exports = [];
                          exports.push(moduleExport);
                      }
                      break;
                  case ts$1.SyntaxKind.ClassDeclaration:
                      var classDeclaration = node;
                      if (classDeclaration.name) {
                          var className = classDeclaration.name.text;
                          if (isExported(classDeclaration)) {
                              if (!metadata)
                                  metadata = {};
                              metadata[exportedName(classDeclaration)] = classMetadataOf(classDeclaration);
                          }
                      }
                      // Otherwise don't record metadata for the class.
                      break;
                  case ts$1.SyntaxKind.FunctionDeclaration:
                      // Record functions that return a single value. Record the parameter
                      // names substitution will be performed by the StaticReflector.
                      var functionDeclaration = node;
                      if (isExported(functionDeclaration)) {
                          if (!metadata)
                              metadata = {};
                          var name_4 = exportedName(functionDeclaration);
                          var maybeFunc = maybeGetSimpleFunction(functionDeclaration);
                          metadata[name_4] =
                              maybeFunc ? recordEntry(maybeFunc.func, node) : { __symbolic: 'function' };
                      }
                      break;
                  case ts$1.SyntaxKind.EnumDeclaration:
                      var enumDeclaration = node;
                      if (isExported(enumDeclaration)) {
                          var enumValueHolder = {};
                          var enumName = exportedName(enumDeclaration);
                          var nextDefaultValue = 0;
                          var writtenMembers = 0;
                          for (var _i = 0, _a = enumDeclaration.members; _i < _a.length; _i++) {
                              var member = _a[_i];
                              var enumValue = void 0;
                              if (!member.initializer) {
                                  enumValue = nextDefaultValue;
                              }
                              else {
                                  enumValue = evaluator.evaluateNode(member.initializer);
                              }
                              var name_5 = undefined;
                              if (member.name.kind == ts$1.SyntaxKind.Identifier) {
                                  var identifier = member.name;
                                  name_5 = identifier.text;
                                  enumValueHolder[name_5] = enumValue;
                                  writtenMembers++;
                              }
                              if (typeof enumValue === 'number') {
                                  nextDefaultValue = enumValue + 1;
                              }
                              else if (name_5) {
                                  nextDefaultValue = {
                                      __symbolic: 'binary',
                                      operator: '+',
                                      left: {
                                          __symbolic: 'select',
                                          expression: recordEntry({ __symbolic: 'reference', name: enumName }, node), name: name_5
                                      }
                                  };
                              }
                              else {
                                  nextDefaultValue =
                                      recordEntry(errorSym('Unsuppported enum member name', member.name), node);
                              }
                          }
                          if (writtenMembers) {
                              if (!metadata)
                                  metadata = {};
                              metadata[enumName] = recordEntry(enumValueHolder, node);
                          }
                      }
                      break;
                  case ts$1.SyntaxKind.VariableStatement:
                      var variableStatement = node;
                      var _loop_1 = function (variableDeclaration) {
                          if (variableDeclaration.name.kind == ts$1.SyntaxKind.Identifier) {
                              var nameNode = variableDeclaration.name;
                              var varValue = void 0;
                              if (variableDeclaration.initializer) {
                                  varValue = evaluator.evaluateNode(variableDeclaration.initializer);
                              }
                              else {
                                  varValue = recordEntry(errorSym('Variable not initialized', nameNode), nameNode);
                              }
                              var exported = false;
                              if (isExport(variableStatement) || isExport(variableDeclaration) ||
                                  isExportedIdentifier(nameNode)) {
                                  if (!metadata)
                                      metadata = {};
                                  metadata[exportedIdentifierName(nameNode)] = recordEntry(varValue, node);
                                  exported = true;
                              }
                              if (evaluator_1.isPrimitive(varValue)) {
                                  locals.define(nameNode.text, varValue);
                              }
                              else if (!exported) {
                                  if (varValue && !schema_1.isMetadataError(varValue)) {
                                      locals.define(nameNode.text, recordEntry(varValue, node));
                                  }
                                  else {
                                      locals.define(nameNode.text, recordEntry(errorSym('Reference to a local symbol', nameNode, { name: nameNode.text }), node));
                                  }
                              }
                          }
                          else {
                              // Destructuring (or binding) declarations are not supported,
                              // var {<identifier>[, <identifier>]+} = <expression>;
                              //   or
                              // var [<identifier>[, <identifier}+] = <expression>;
                              // are not supported.
                              var report_1 = function (nameNode) {
                                  switch (nameNode.kind) {
                                      case ts$1.SyntaxKind.Identifier:
                                          var name_6 = nameNode;
                                          var varValue = errorSym('Destructuring not supported', name_6);
                                          locals.define(name_6.text, varValue);
                                          if (isExport(node)) {
                                              if (!metadata)
                                                  metadata = {};
                                              metadata[name_6.text] = varValue;
                                          }
                                          break;
                                      case ts$1.SyntaxKind.BindingElement:
                                          var bindingElement = nameNode;
                                          report_1(bindingElement.name);
                                          break;
                                      case ts$1.SyntaxKind.ObjectBindingPattern:
                                      case ts$1.SyntaxKind.ArrayBindingPattern:
                                          var bindings = nameNode;
                                          bindings.elements.forEach(report_1);
                                          break;
                                  }
                              };
                              report_1(variableDeclaration.name);
                          }
                      };
                      for (var _b = 0, _c = variableStatement.declarationList.declarations; _b < _c.length; _b++) {
                          var variableDeclaration = _c[_b];
                          _loop_1(variableDeclaration);
                      }
                      break;
              }
          });
          if (metadata || exports) {
              if (!metadata)
                  metadata = {};
              else if (strict) {
                  validateMetadata(sourceFile, nodeMap, metadata);
              }
              var result = {
                  __symbolic: 'module',
                  version: this.options.version || schema_1.VERSION, metadata: metadata
              };
              if (exports)
                  result.exports = exports;
              return result;
          }
      };
      return MetadataCollector;
  }());
  var MetadataCollector_1 = MetadataCollector;
  // This will throw if the metadata entry given contains an error node.
  function validateMetadata(sourceFile, nodeMap, metadata) {
      var locals = new Set(['Array', 'Object', 'Set', 'Map', 'string', 'number', 'any']);
      function validateExpression(expression) {
          if (!expression) {
              return;
          }
          else if (Array.isArray(expression)) {
              expression.forEach(validateExpression);
          }
          else if (typeof expression === 'object' && !expression.hasOwnProperty('__symbolic')) {
              Object.getOwnPropertyNames(expression).forEach(function (v) { return validateExpression(expression[v]); });
          }
          else if (schema_1.isMetadataError(expression)) {
              reportError(expression);
          }
          else if (schema_1.isMetadataGlobalReferenceExpression(expression)) {
              if (!locals.has(expression.name)) {
                  var reference = metadata[expression.name];
                  if (reference) {
                      validateExpression(reference);
                  }
              }
          }
          else if (schema_1.isFunctionMetadata(expression)) {
              validateFunction(expression);
          }
          else if (schema_1.isMetadataSymbolicExpression(expression)) {
              switch (expression.__symbolic) {
                  case 'binary':
                      var binaryExpression = expression;
                      validateExpression(binaryExpression.left);
                      validateExpression(binaryExpression.right);
                      break;
                  case 'call':
                  case 'new':
                      var callExpression = expression;
                      validateExpression(callExpression.expression);
                      if (callExpression.arguments)
                          callExpression.arguments.forEach(validateExpression);
                      break;
                  case 'index':
                      var indexExpression = expression;
                      validateExpression(indexExpression.expression);
                      validateExpression(indexExpression.index);
                      break;
                  case 'pre':
                      var prefixExpression = expression;
                      validateExpression(prefixExpression.operand);
                      break;
                  case 'select':
                      var selectExpression = expression;
                      validateExpression(selectExpression.expression);
                      break;
                  case 'spread':
                      var spreadExpression = expression;
                      validateExpression(spreadExpression.expression);
                      break;
                  case 'if':
                      var ifExpression = expression;
                      validateExpression(ifExpression.condition);
                      validateExpression(ifExpression.elseExpression);
                      validateExpression(ifExpression.thenExpression);
                      break;
              }
          }
      }
      function validateMember(classData, member) {
          if (member.decorators) {
              member.decorators.forEach(validateExpression);
          }
          if (schema_1.isMethodMetadata(member) && member.parameterDecorators) {
              member.parameterDecorators.forEach(validateExpression);
          }
          // Only validate parameters of classes for which we know that are used with our DI
          if (classData.decorators && schema_1.isConstructorMetadata(member) && member.parameters) {
              member.parameters.forEach(validateExpression);
          }
      }
      function validateClass(classData) {
          if (classData.decorators) {
              classData.decorators.forEach(validateExpression);
          }
          if (classData.members) {
              Object.getOwnPropertyNames(classData.members)
                  .forEach(function (name) { return classData.members[name].forEach(function (m) { return validateMember(classData, m); }); });
          }
      }
      function validateFunction(functionDeclaration) {
          if (functionDeclaration.value) {
              var oldLocals = locals;
              if (functionDeclaration.parameters) {
                  locals = new Set(oldLocals.values());
                  if (functionDeclaration.parameters)
                      functionDeclaration.parameters.forEach(function (n) { return locals.add(n); });
              }
              validateExpression(functionDeclaration.value);
              locals = oldLocals;
          }
      }
      function shouldReportNode(node) {
          if (node) {
              var nodeStart = node.getStart();
              return !(node.pos != nodeStart &&
                  sourceFile.text.substring(node.pos, nodeStart).indexOf('@dynamic') >= 0);
          }
          return true;
      }
      function reportError(error) {
          var node = nodeMap.get(error);
          if (shouldReportNode(node)) {
              var lineInfo = error.line != undefined ?
                  error.character != undefined ? ":" + (error.line + 1) + ":" + (error.character + 1) :
                      ":" + (error.line + 1) :
                  '';
              throw new Error("" + sourceFile.fileName + lineInfo + ": Metadata collected contains an error that will be reported at runtime: " + expandedMessage$1(error) + ".\n  " + JSON.stringify(error));
          }
      }
      Object.getOwnPropertyNames(metadata).forEach(function (name) {
          var entry = metadata[name];
          try {
              if (schema_1.isClassMetadata(entry)) {
                  validateClass(entry);
              }
          }
          catch (e) {
              var node = nodeMap.get(entry);
              if (shouldReportNode(node)) {
                  if (node) {
                      var _a = sourceFile.getLineAndCharacterOfPosition(node.getStart()), line = _a.line, character = _a.character;
                      throw new Error(sourceFile.fileName + ":" + (line + 1) + ":" + (character + 1) + ": Error encountered in metadata generated for exported symbol '" + name + "': \n " + e.message);
                  }
                  throw new Error("Error encountered in metadata generated for exported symbol " + name + ": \n " + e.message);
              }
          }
      });
  }
  // Collect parameter names from a function.
  function namesOf(parameters) {
      var result = [];
      function addNamesOf(name) {
          if (name.kind == ts$1.SyntaxKind.Identifier) {
              var identifier = name;
              result.push(identifier.text);
          }
          else {
              var bindingPattern = name;
              for (var _i = 0, _a = bindingPattern.elements; _i < _a.length; _i++) {
                  var element = _a[_i];
                  var name_7 = element.name;
                  if (name_7) {
                      addNamesOf(name_7);
                  }
              }
          }
      }
      for (var _i = 0, parameters_2 = parameters; _i < parameters_2.length; _i++) {
          var parameter = parameters_2[_i];
          addNamesOf(parameter.name);
      }
      return result;
  }
  function expandedMessage$1(error) {
      switch (error.message) {
          case 'Reference to non-exported class':
              if (error.context && error.context.className) {
                  return "Reference to a non-exported class " + error.context.className + ". Consider exporting the class";
              }
              break;
          case 'Variable not initialized':
              return 'Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler';
          case 'Destructuring not supported':
              return 'Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring';
          case 'Could not resolve type':
              if (error.context && error.context.typeName) {
                  return "Could not resolve type " + error.context.typeName;
              }
              break;
          case 'Function call not supported':
              var prefix = error.context && error.context.name ? "Calling function '" + error.context.name + "', f" : 'F';
              return prefix +
                  'unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function';
          case 'Reference to a local symbol':
              if (error.context && error.context.name) {
                  return "Reference to a local (non-exported) symbol '" + error.context.name + "'. Consider exporting the symbol";
              }
      }
      return error.message;
  }

  var collector = {
  	CollectorOptions: CollectorOptions_1,
  	MetadataCollector: MetadataCollector_1
  };

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var __extends$19 = (this && this.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var EXT = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;
  var DTS = /\.d\.ts$/;
  var NODE_MODULES = '/node_modules/';
  var IS_GENERATED = /\.(ngfactory|ngstyle)$/;
  var GENERATED_FILES = /\.ngfactory\.ts$|\.ngstyle\.ts$/;
  var GENERATED_OR_DTS_FILES = /\.d\.ts$|\.ngfactory\.ts$|\.ngstyle\.ts$/;
  var SHALLOW_IMPORT = /^((\w|-)+|(@(\w|-)+(\/(\w|-)+)+))$/;
  var CompilerHost = (function () {
      function CompilerHost(program, options, context) {
          var _this = this;
          this.program = program;
          this.options = options;
          this.context = context;
          this.metadataCollector = new MetadataCollector_1();
          this.resolverCache = new Map();
          this.bundleIndexCache = new Map();
          this.bundleIndexNames = new Set();
          // normalize the path so that it never ends with '/'.
          this.basePath = path.normalize(path.join(this.options.basePath, '.')).replace(/\\/g, '/');
          this.genDir = path.normalize(path.join(this.options.genDir, '.')).replace(/\\/g, '/');
          var genPath = path.relative(this.basePath, this.genDir);
          this.isGenDirChildOfRootDir = genPath === '' || !genPath.startsWith('..');
          this.resolveModuleNameHost = Object.create(this.context);
          // When calling ts.resolveModuleName,
          // additional allow checks for .d.ts files to be done based on
          // checks for .ngsummary.json files,
          // so that our codegen depends on fewer inputs and requires to be called
          // less often.
          // This is needed as we use ts.resolveModuleName in reflector_host
          // and it should be able to resolve summary file names.
          this.resolveModuleNameHost.fileExists = function (fileName) {
              if (_this.context.fileExists(fileName)) {
                  return true;
              }
              if (DTS.test(fileName)) {
                  var base = fileName.substring(0, fileName.length - 5);
                  return _this.context.fileExists(base + '.ngsummary.json');
              }
              return false;
          };
      }
      // We use absolute paths on disk as canonical.
      CompilerHost.prototype.getCanonicalFileName = function (fileName) { return fileName; };
      CompilerHost.prototype.moduleNameToFileName = function (m, containingFile) {
          if (!containingFile || !containingFile.length) {
              if (m.indexOf('.') === 0) {
                  throw new Error('Resolution of relative paths requires a containing file.');
              }
              // Any containing file gives the same result for absolute imports
              containingFile = this.getCanonicalFileName(path.join(this.basePath, 'index.ts'));
          }
          m = m.replace(EXT, '');
          var resolved = ts.resolveModuleName(m, containingFile.replace(/\\/g, '/'), this.options, this.resolveModuleNameHost)
              .resolvedModule;
          return resolved ? this.getCanonicalFileName(resolved.resolvedFileName) : null;
      };
      ;
      /**
       * We want a moduleId that will appear in import statements in the generated code.
       * These need to be in a form that system.js can load, so absolute file paths don't work.
       *
       * The `containingFile` is always in the `genDir`, where as the `importedFile` can be in
       * `genDir`, `node_module` or `basePath`.  The `importedFile` is either a generated file or
       * existing file.
       *
       *               | genDir   | node_module |  rootDir
       * --------------+----------+-------------+----------
       * generated     | relative |   relative  |   n/a
       * existing file |   n/a    |   absolute  |  relative(*)
       *
       * NOTE: (*) the relative path is computed depending on `isGenDirChildOfRootDir`.
       */
      CompilerHost.prototype.fileNameToModuleName = function (importedFile, containingFile) {
          // If a file does not yet exist (because we compile it later), we still need to
          // assume it exists it so that the `resolve` method works!
          if (!this.context.fileExists(importedFile)) {
              this.context.assumeFileExists(importedFile);
          }
          containingFile = this.rewriteGenDirPath(containingFile);
          var containingDir = path.dirname(containingFile);
          // drop extension
          importedFile = importedFile.replace(EXT, '');
          var nodeModulesIndex = importedFile.indexOf(NODE_MODULES);
          var importModule = nodeModulesIndex === -1 ?
              null :
              importedFile.substring(nodeModulesIndex + NODE_MODULES.length);
          var isGeneratedFile = IS_GENERATED.test(importedFile);
          if (isGeneratedFile) {
              // rewrite to genDir path
              if (importModule) {
                  // it is generated, therefore we do a relative path to the factory
                  return this.dotRelative(containingDir, this.genDir + NODE_MODULES + importModule);
              }
              else {
                  // assume that import is also in `genDir`
                  importedFile = this.rewriteGenDirPath(importedFile);
                  return this.dotRelative(containingDir, importedFile);
              }
          }
          else {
              // user code import
              if (importModule) {
                  return importModule;
              }
              else {
                  if (!this.isGenDirChildOfRootDir) {
                      // assume that they are on top of each other.
                      importedFile = importedFile.replace(this.basePath, this.genDir);
                  }
                  if (SHALLOW_IMPORT.test(importedFile)) {
                      return importedFile;
                  }
                  return this.dotRelative(containingDir, importedFile);
              }
          }
      };
      CompilerHost.prototype.dotRelative = function (from, to) {
          var rPath = path.relative(from, to).replace(/\\/g, '/');
          return rPath.startsWith('.') ? rPath : './' + rPath;
      };
      /**
       * Moves the path into `genDir` folder while preserving the `node_modules` directory.
       */
      CompilerHost.prototype.rewriteGenDirPath = function (filepath) {
          var nodeModulesIndex = filepath.indexOf(NODE_MODULES);
          if (nodeModulesIndex !== -1) {
              // If we are in node_modulse, transplant them into `genDir`.
              return path.join(this.genDir, filepath.substring(nodeModulesIndex));
          }
          else {
              // pretend that containing file is on top of the `genDir` to normalize the paths.
              // we apply the `genDir` => `rootDir` delta through `rootDirPrefix` later.
              return filepath.replace(this.basePath, this.genDir);
          }
      };
      CompilerHost.prototype.getSourceFile = function (filePath) {
          var sf = this.program.getSourceFile(filePath);
          if (!sf) {
              if (this.context.fileExists(filePath)) {
                  var sourceText = this.context.readFile(filePath);
                  return ts.createSourceFile(filePath, sourceText, ts.ScriptTarget.Latest, true);
              }
              throw new Error("Source file " + filePath + " not present in program.");
          }
          return sf;
      };
      CompilerHost.prototype.getMetadataFor = function (filePath) {
          if (!this.context.fileExists(filePath)) {
              // If the file doesn't exists then we cannot return metadata for the file.
              // This will occur if the user refernced a declared module for which no file
              // exists for the module (i.e. jQuery or angularjs).
              return;
          }
          if (DTS.test(filePath)) {
              var metadataPath = filePath.replace(DTS, '.metadata.json');
              if (this.context.fileExists(metadataPath)) {
                  return this.readMetadata(metadataPath, filePath);
              }
              else {
                  // If there is a .d.ts file but no metadata file we need to produce a
                  // v3 metadata from the .d.ts file as v3 includes the exports we need
                  // to resolve symbols.
                  return [this.upgradeVersion1Metadata({ '__symbolic': 'module', 'version': 1, 'metadata': {} }, filePath)];
              }
          }
          else {
              var sf = this.getSourceFile(filePath);
              var metadata = this.metadataCollector.getMetadata(sf);
              return metadata ? [metadata] : [];
          }
      };
      CompilerHost.prototype.readMetadata = function (filePath, dtsFilePath) {
          var metadatas = this.resolverCache.get(filePath);
          if (metadatas) {
              return metadatas;
          }
          try {
              var metadataOrMetadatas = JSON.parse(this.context.readFile(filePath));
              var metadatas_1 = metadataOrMetadatas ?
                  (Array.isArray(metadataOrMetadatas) ? metadataOrMetadatas : [metadataOrMetadatas]) :
                  [];
              var v1Metadata = metadatas_1.find(function (m) { return m.version === 1; });
              var v3Metadata = metadatas_1.find(function (m) { return m.version === 3; });
              if (!v3Metadata && v1Metadata) {
                  metadatas_1.push(this.upgradeVersion1Metadata(v1Metadata, dtsFilePath));
              }
              this.resolverCache.set(filePath, metadatas_1);
              return metadatas_1;
          }
          catch (e) {
              console.error("Failed to read JSON file " + filePath);
              throw e;
          }
      };
      CompilerHost.prototype.upgradeVersion1Metadata = function (v1Metadata, dtsFilePath) {
          // patch up v1 to v3 by merging the metadata with metadata collected from the d.ts file
          // as the only difference between the versions is whether all exports are contained in
          // the metadata and the `extends` clause.
          var v3Metadata = { '__symbolic': 'module', 'version': 3, 'metadata': {} };
          if (v1Metadata.exports) {
              v3Metadata.exports = v1Metadata.exports;
          }
          for (var prop in v1Metadata.metadata) {
              v3Metadata.metadata[prop] = v1Metadata.metadata[prop];
          }
          var exports = this.metadataCollector.getMetadata(this.getSourceFile(dtsFilePath));
          if (exports) {
              for (var prop in exports.metadata) {
                  if (!v3Metadata.metadata[prop]) {
                      v3Metadata.metadata[prop] = exports.metadata[prop];
                  }
              }
              if (exports.exports) {
                  v3Metadata.exports = exports.exports;
              }
          }
          return v3Metadata;
      };
      CompilerHost.prototype.loadResource = function (filePath) { return this.context.readResource(filePath); };
      CompilerHost.prototype.loadSummary = function (filePath) {
          if (this.context.fileExists(filePath)) {
              return this.context.readFile(filePath);
          }
      };
      CompilerHost.prototype.getOutputFileName = function (sourceFilePath) {
          return sourceFilePath.replace(EXT, '') + '.d.ts';
      };
      CompilerHost.prototype.isSourceFile = function (filePath) {
          var excludeRegex = this.options.generateCodeForLibraries === false ? GENERATED_OR_DTS_FILES : GENERATED_FILES;
          if (excludeRegex.test(filePath)) {
              return false;
          }
          if (DTS.test(filePath)) {
              // Check for a bundle index.
              if (this.hasBundleIndex(filePath)) {
                  return this.bundleIndexNames.has(filePath);
              }
          }
          return true;
      };
      CompilerHost.prototype.calculateEmitPath = function (filePath) {
          // Write codegen in a directory structure matching the sources.
          var root = this.options.basePath;
          for (var _i = 0, _a = this.options.rootDirs || []; _i < _a.length; _i++) {
              var eachRootDir = _a[_i];
              if (this.options.trace) {
                  console.error("Check if " + filePath + " is under rootDirs element " + eachRootDir);
              }
              if (path.relative(eachRootDir, filePath).indexOf('.') !== 0) {
                  root = eachRootDir;
              }
          }
          // transplant the codegen path to be inside the `genDir`
          var relativePath = path.relative(root, filePath);
          while (relativePath.startsWith('..' + path.sep)) {
              // Strip out any `..` path such as: `../node_modules/@foo` as we want to put everything
              // into `genDir`.
              relativePath = relativePath.substr(3);
          }
          return path.join(this.options.genDir, relativePath);
      };
      CompilerHost.prototype.hasBundleIndex = function (filePath) {
          var _this = this;
          var checkBundleIndex = function (directory) {
              var result = _this.bundleIndexCache.get(directory);
              if (result == null) {
                  if (path.basename(directory) == 'node_module') {
                      // Don't look outside the node_modules this package is installed in.
                      result = false;
                  }
                  else {
                      // A bundle index exists if the typings .d.ts file has a metadata.json that has an
                      // importAs.
                      try {
                          var packageFile = path.join(directory, 'package.json');
                          if (_this.context.fileExists(packageFile)) {
                              // Once we see a package.json file, assume false until it we find the bundle index.
                              result = false;
                              var packageContent = JSON.parse(_this.context.readFile(packageFile));
                              if (packageContent.typings) {
                                  var typings = path.normalize(path.join(directory, packageContent.typings));
                                  if (DTS.test(typings)) {
                                      var metadataFile = typings.replace(DTS, '.metadata.json');
                                      if (_this.context.fileExists(metadataFile)) {
                                          var metadata = JSON.parse(_this.context.readFile(metadataFile));
                                          if (metadata.importAs) {
                                              _this.bundleIndexNames.add(typings);
                                              result = true;
                                          }
                                      }
                                  }
                              }
                          }
                          else {
                              var parent_1 = path.dirname(directory);
                              if (parent_1 != directory) {
                                  // Try the parent directory.
                                  result = checkBundleIndex(parent_1);
                              }
                              else {
                                  result = false;
                              }
                          }
                      }
                      catch (e) {
                          // If we encounter any errors assume we this isn't a bundle index.
                          result = false;
                      }
                  }
                  _this.bundleIndexCache.set(directory, result);
              }
              return result;
          };
          return checkBundleIndex(path.dirname(filePath));
      };
      return CompilerHost;
  }());
  var CompilerHostContextAdapter = (function () {
      function CompilerHostContextAdapter() {
          this.assumedExists = {};
      }
      CompilerHostContextAdapter.prototype.assumeFileExists = function (fileName) { this.assumedExists[fileName] = true; };
      return CompilerHostContextAdapter;
  }());
  var ModuleResolutionHostAdapter = (function (_super) {
      __extends$19(ModuleResolutionHostAdapter, _super);
      function ModuleResolutionHostAdapter(host) {
          var _this = _super.call(this) || this;
          _this.host = host;
          if (host.directoryExists) {
              _this.directoryExists = function (directoryName) { return host.directoryExists(directoryName); };
          }
          return _this;
      }
      ModuleResolutionHostAdapter.prototype.fileExists = function (fileName) {
          return this.assumedExists[fileName] || this.host.fileExists(fileName);
      };
      ModuleResolutionHostAdapter.prototype.readFile = function (fileName) { return this.host.readFile(fileName); };
      ModuleResolutionHostAdapter.prototype.readResource = function (s) {
          if (!this.host.fileExists(s)) {
              // TODO: We should really have a test for error cases like this!
              throw new Error("Compilation failed. Resource file not found: " + s);
          }
          return Promise.resolve(this.host.readFile(s));
      };
      return ModuleResolutionHostAdapter;
  }(CompilerHostContextAdapter));
  var NodeCompilerHostContext = (function (_super) {
      __extends$19(NodeCompilerHostContext, _super);
      function NodeCompilerHostContext() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      NodeCompilerHostContext.prototype.fileExists = function (fileName) {
          return this.assumedExists[fileName] || fs.existsSync(fileName);
      };
      NodeCompilerHostContext.prototype.directoryExists = function (directoryName) {
          try {
              return fs.statSync(directoryName).isDirectory();
          }
          catch (e) {
              return false;
          }
      };
      NodeCompilerHostContext.prototype.readFile = function (fileName) { return fs.readFileSync(fileName, 'utf8'); };
      NodeCompilerHostContext.prototype.readResource = function (s) {
          if (!this.fileExists(s)) {
              // TODO: We should really have a test for error cases like this!
              throw new Error("Compilation failed. Resource file not found: " + s);
          }
          return Promise.resolve(this.readFile(s));
      };
      return NodeCompilerHostContext;
  }(CompilerHostContextAdapter));

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var __extends$20 = (this && this.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var EXT$1 = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;
  var DTS$1 = /\.d\.ts$/;
  /**
   * This version of the AotCompilerHost expects that the program will be compiled
   * and executed with a "path mapped" directory structure, where generated files
   * are in a parallel tree with the sources, and imported using a `./` relative
   * import. This requires using TS `rootDirs` option and also teaching the module
   * loader what to do.
   */
  var PathMappedCompilerHost = (function (_super) {
      __extends$20(PathMappedCompilerHost, _super);
      function PathMappedCompilerHost(program, options, context) {
          return _super.call(this, program, options, context) || this;
      }
      PathMappedCompilerHost.prototype.getCanonicalFileName = function (fileName) {
          if (!fileName)
              return fileName;
          // NB: the rootDirs should have been sorted longest-first
          for (var _i = 0, _a = this.options.rootDirs || []; _i < _a.length; _i++) {
              var dir = _a[_i];
              if (fileName.indexOf(dir) === 0) {
                  fileName = fileName.substring(dir.length);
              }
          }
          return fileName;
      };
      PathMappedCompilerHost.prototype.moduleNameToFileName = function (m, containingFile) {
          if (!containingFile || !containingFile.length) {
              if (m.indexOf('.') === 0) {
                  throw new Error('Resolution of relative paths requires a containing file.');
              }
              // Any containing file gives the same result for absolute imports
              containingFile = this.getCanonicalFileName(path.join(this.basePath, 'index.ts'));
          }
          for (var _i = 0, _a = this.options.rootDirs || ['']; _i < _a.length; _i++) {
              var root = _a[_i];
              var rootedContainingFile = path.join(root, containingFile);
              var resolved = ts.resolveModuleName(m, rootedContainingFile, this.options, this.context).resolvedModule;
              if (resolved) {
                  if (this.options.traceResolution) {
                      console.error('resolve', m, containingFile, '=>', resolved.resolvedFileName);
                  }
                  return this.getCanonicalFileName(resolved.resolvedFileName);
              }
          }
      };
      /**
       * We want a moduleId that will appear in import statements in the generated code.
       * These need to be in a form that system.js can load, so absolute file paths don't work.
       * Relativize the paths by checking candidate prefixes of the absolute path, to see if
       * they are resolvable by the moduleResolution strategy from the CompilerHost.
       */
      PathMappedCompilerHost.prototype.fileNameToModuleName = function (importedFile, containingFile) {
          var _this = this;
          if (this.options.traceResolution) {
              console.error('getImportPath from containingFile', containingFile, 'to importedFile', importedFile);
          }
          // If a file does not yet exist (because we compile it later), we still need to
          // assume it exists so that the `resolve` method works!
          if (!this.context.fileExists(importedFile)) {
              if (this.options.rootDirs && this.options.rootDirs.length > 0) {
                  this.context.assumeFileExists(path.join(this.options.rootDirs[0], importedFile));
              }
              else {
                  this.context.assumeFileExists(importedFile);
              }
          }
          var resolvable = function (candidate) {
              var resolved = _this.moduleNameToFileName(candidate, importedFile);
              return resolved && resolved.replace(EXT$1, '') === importedFile.replace(EXT$1, '');
          };
          var importModuleName = importedFile.replace(EXT$1, '');
          var parts = importModuleName.split(path.sep).filter(function (p) { return !!p; });
          var foundRelativeImport;
          for (var index = parts.length - 1; index >= 0; index--) {
              var candidate_1 = parts.slice(index, parts.length).join(path.sep);
              if (resolvable(candidate_1)) {
                  return candidate_1;
              }
              candidate_1 = '.' + path.sep + candidate_1;
              if (resolvable(candidate_1)) {
                  foundRelativeImport = candidate_1;
              }
          }
          if (foundRelativeImport)
              return foundRelativeImport;
          // Try a relative import
          var candidate = path.relative(path.dirname(containingFile), importModuleName);
          if (resolvable(candidate)) {
              return candidate;
          }
          throw new Error("Unable to find any resolvable import for " + importedFile + " relative to " + containingFile);
      };
      PathMappedCompilerHost.prototype.getMetadataFor = function (filePath) {
          for (var _i = 0, _a = this.options.rootDirs || []; _i < _a.length; _i++) {
              var root = _a[_i];
              var rootedPath = path.join(root, filePath);
              if (!this.context.fileExists(rootedPath)) {
                  // If the file doesn't exists then we cannot return metadata for the file.
                  // This will occur if the user refernced a declared module for which no file
                  // exists for the module (i.e. jQuery or angularjs).
                  continue;
              }
              if (DTS$1.test(rootedPath)) {
                  var metadataPath = rootedPath.replace(DTS$1, '.metadata.json');
                  if (this.context.fileExists(metadataPath)) {
                      return this.readMetadata(metadataPath, rootedPath);
                  }
              }
              else {
                  var sf = this.getSourceFile(rootedPath);
                  sf.fileName = sf.fileName;
                  var metadata = this.metadataCollector.getMetadata(sf);
                  return metadata ? [metadata] : [];
              }
          }
      };
      return PathMappedCompilerHost;
  }(CompilerHost));

  var GENERATED_META_FILES = /\.json$/;
  var PREAMBLE = "/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties}\n */\n /* tslint:disable */\n\n";
  var CodeGenerator = (function () {
      function CodeGenerator(options, program, host, compiler, ngCompilerHost) {
          this.options = options;
          this.program = program;
          this.host = host;
          this.compiler = compiler;
          this.ngCompilerHost = ngCompilerHost;
      }
      CodeGenerator.prototype.codegen = function () {
          var _this = this;
          return this.compiler
              .compileAll(this.program.getSourceFiles().map(function (sf) { return _this.ngCompilerHost.getCanonicalFileName(sf.fileName); }))
              .then(function (generatedModules) {
              generatedModules.forEach(function (generatedModule) {
                  var sourceFile = _this.program.getSourceFile(generatedModule.srcFileUrl);
                  var emitPath = _this.ngCompilerHost.calculateEmitPath(generatedModule.genFileUrl);
                  var source = GENERATED_META_FILES.test(emitPath) ? generatedModule.source :
                      PREAMBLE + generatedModule.source;
                  _this.host.writeFile(emitPath, source, false, function () { }, [sourceFile]);
              });
          });
      };
      CodeGenerator.create = function (options, cliOptions, program, tsCompilerHost, compilerHostContext, ngCompilerHost) {
          if (!ngCompilerHost) {
              var usePathMapping = !!options.rootDirs && options.rootDirs.length > 0;
              var context = compilerHostContext || new ModuleResolutionHostAdapter(tsCompilerHost);
              ngCompilerHost = usePathMapping ? new PathMappedCompilerHost(program, options, context) :
                  new CompilerHost(program, options, context);
          }
          var transFile = cliOptions.i18nFile;
          var locale = cliOptions.locale;
          var transContent = '';
          if (transFile) {
              if (!locale) {
                  throw new Error("The translation file (" + transFile + ") locale must be provided. Use the --locale option.");
              }
              transContent = fs.readFileSync(transFile, 'utf8');
          }
          var aotCompiler = createAotCompiler(ngCompilerHost, {
              debug: options.debug === true,
              translations: transContent,
              i18nFormat: cliOptions.i18nFormat,
              locale: cliOptions.locale,
              enableLegacyTemplate: options.enableLegacyTemplate !== false,
          }).compiler;
          return new CodeGenerator(options, program, tsCompilerHost, aotCompiler, ngCompilerHost);
      };
      return CodeGenerator;
  }());

  var Extractor$1 = (function () {
      function Extractor$$(options, ngExtractor, host, ngCompilerHost, program) {
          this.options = options;
          this.ngExtractor = ngExtractor;
          this.host = host;
          this.ngCompilerHost = ngCompilerHost;
          this.program = program;
      }
      Extractor$$.prototype.extract = function (formatName, outFile) {
          var _this = this;
          // Checks the format and returns the extension
          var ext = this.getExtension(formatName);
          var promiseBundle = this.extractBundle();
          return promiseBundle.then(function (bundle) {
              var content = _this.serialize(bundle, ext);
              var dstFile = outFile || "messages." + ext;
              var dstPath = path.join(_this.options.genDir, dstFile);
              _this.host.writeFile(dstPath, content, false);
          });
      };
      Extractor$$.prototype.extractBundle = function () {
          var _this = this;
          var files = this.program.getSourceFiles().map(function (sf) { return _this.ngCompilerHost.getCanonicalFileName(sf.fileName); });
          return this.ngExtractor.extract(files);
      };
      Extractor$$.prototype.serialize = function (bundle, ext) {
          var serializer;
          switch (ext) {
              case 'xmb':
                  serializer = new Xmb();
                  break;
              case 'xlf':
              default:
                  serializer = new Xliff();
          }
          return bundle.write(serializer);
      };
      Extractor$$.prototype.getExtension = function (formatName) {
          var format = (formatName || 'xlf').toLowerCase();
          if (format === 'xmb')
              return 'xmb';
          if (format === 'xlf' || format === 'xlif')
              return 'xlf';
          throw new Error('Unsupported format "${formatName}"');
      };
      Extractor$$.create = function (options, program, tsCompilerHost, locale, compilerHostContext, ngCompilerHost) {
          if (!ngCompilerHost) {
              var usePathMapping = !!options.rootDirs && options.rootDirs.length > 0;
              var context = compilerHostContext || new ModuleResolutionHostAdapter(tsCompilerHost);
              ngCompilerHost = usePathMapping ? new PathMappedCompilerHost(program, options, context) :
                  new CompilerHost(program, options, context);
          }
          var ngExtractor = Extractor.create(ngCompilerHost, locale || null).extractor;
          return new Extractor$$(options, ngExtractor, tsCompilerHost, ngCompilerHost, program);
      };
      return Extractor$$;
  }());

  /**
   * @stable
   */
  var VERSION$4 = new Version('4.0.0-beta.8-1f3198c');

  var ROUTER_MODULE_PATH = '@angular/router';
  var ROUTER_ROUTES_SYMBOL_NAME = 'ROUTES';
  // A route definition. Normally the short form 'path/to/module#ModuleClassName' is used by
  // the user, and this is a helper class to extract information from it.
  var RouteDef = (function () {
      function RouteDef(path, className) {
          if (className === void 0) { className = null; }
          this.path = path;
          this.className = className;
      }
      RouteDef.prototype.toString = function () {
          return (this.className === null || this.className == 'default') ?
              this.path :
              this.path + "#" + this.className;
      };
      RouteDef.fromString = function (entry) {
          var split = entry.split('#');
          return new RouteDef(split[0], split[1] || null);
      };
      return RouteDef;
  }());
  /**
   *
   * @returns {LazyRouteMap}
   * @private
   */
  function listLazyRoutesOfModule(entryModule, host, reflector) {
      var entryRouteDef = RouteDef.fromString(entryModule);
      var containingFile = _resolveModule(entryRouteDef.path, entryRouteDef.path, host);
      var modulePath = "./" + containingFile.replace(/^(.*)\//, '');
      var className = entryRouteDef.className;
      // List loadChildren of this single module.
      var appStaticSymbol = reflector.findDeclaration(modulePath, className, containingFile);
      var ROUTES = reflector.findDeclaration(ROUTER_MODULE_PATH, ROUTER_ROUTES_SYMBOL_NAME);
      var lazyRoutes = _extractLazyRoutesFromStaticModule(appStaticSymbol, reflector, host, ROUTES);
      var allLazyRoutes = lazyRoutes.reduce(function includeLazyRouteAndSubRoutes(allRoutes, lazyRoute) {
          var route = lazyRoute.routeDef.toString();
          _assertRoute(allRoutes, lazyRoute);
          allRoutes[route] = lazyRoute;
          // StaticReflector does not support discovering annotations like `NgModule` on default
          // exports
          // Which means: if a default export NgModule was lazy-loaded, we can discover it, but,
          //  we cannot parse its routes to see if they have loadChildren or not.
          if (!lazyRoute.routeDef.className) {
              return allRoutes;
          }
          var lazyModuleSymbol = reflector.findDeclaration(lazyRoute.absoluteFilePath, lazyRoute.routeDef.className || 'default');
          var subRoutes = _extractLazyRoutesFromStaticModule(lazyModuleSymbol, reflector, host, ROUTES);
          return subRoutes.reduce(includeLazyRouteAndSubRoutes, allRoutes);
      }, {});
      return allLazyRoutes;
  }
  /**
   * Try to resolve a module, and returns its absolute path.
   * @private
   */
  function _resolveModule(modulePath, containingFile, host) {
      var result = host.moduleNameToFileName(modulePath, containingFile);
      if (!result) {
          throw new Error("Could not resolve \"" + modulePath + "\" from \"" + containingFile + "\".");
      }
      return result;
  }
  /**
   * Throw an exception if a route is in a route map, but does not point to the same module.
   * @private
   */
  function _assertRoute(map, route) {
      var r = route.routeDef.toString();
      if (map[r] && map[r].absoluteFilePath != route.absoluteFilePath) {
          throw new Error("Duplicated path in loadChildren detected: \"" + r + "\" is used in 2 loadChildren, " +
              ("but they point to different modules \"(" + map[r].absoluteFilePath + " and ") +
              ("\"" + route.absoluteFilePath + "\"). Webpack cannot distinguish on context and would fail to ") +
              'load the proper one.');
      }
  }
  /**
   * Extract all the LazyRoutes from a module. This extracts all `loadChildren` keys from this
   * module and all statically referred modules.
   * @private
   */
  function _extractLazyRoutesFromStaticModule(staticSymbol, reflector, host, ROUTES) {
      var moduleMetadata = _getNgModuleMetadata(staticSymbol, reflector);
      var allRoutes = (moduleMetadata.imports || [])
          .filter(function (i) { return 'providers' in i; })
          .reduce(function (mem, m) {
          return mem.concat(_collectRoutes(m.providers || [], reflector, ROUTES));
      }, _collectRoutes(moduleMetadata.providers || [], reflector, ROUTES));
      var lazyRoutes = _collectLoadChildren(allRoutes).reduce(function (acc, route) {
          var routeDef = RouteDef.fromString(route);
          var absoluteFilePath = _resolveModule(routeDef.path, staticSymbol.filePath, host);
          acc.push({ routeDef: routeDef, absoluteFilePath: absoluteFilePath });
          return acc;
      }, []);
      var importedSymbols = (moduleMetadata.imports || [])
          .filter(function (i) { return i instanceof StaticSymbol; });
      return importedSymbols
          .reduce(function (acc, i) {
          return acc.concat(_extractLazyRoutesFromStaticModule(i, reflector, host, ROUTES));
      }, [])
          .concat(lazyRoutes);
  }
  /**
   * Get the NgModule Metadata of a symbol.
   * @private
   */
  function _getNgModuleMetadata(staticSymbol, reflector) {
      var ngModules = reflector.annotations(staticSymbol).filter(function (s) { return s instanceof NgModule; });
      if (ngModules.length === 0) {
          throw new Error(staticSymbol.name + " is not an NgModule");
      }
      return ngModules[0];
  }
  /**
   * Return the routes from the provider list.
   * @private
   */
  function _collectRoutes(providers, reflector, ROUTES) {
      return providers.reduce(function (routeList, p) {
          if (p.provide === ROUTES) {
              return routeList.concat(p.useValue);
          }
          else if (Array.isArray(p)) {
              return routeList.concat(_collectRoutes(p, reflector, ROUTES));
          }
          else {
              return routeList;
          }
      }, []);
  }
  /**
   * Return the loadChildren values of a list of Route.
   * @private
   */
  function _collectLoadChildren(routes) {
      return routes.reduce(function (m, r) {
          if (r.loadChildren && typeof r.loadChildren === 'string') {
              return m.concat(r.loadChildren);
          }
          else if (Array.isArray(r)) {
              return m.concat(_collectLoadChildren(r));
          }
          else if (r.children) {
              return m.concat(_collectLoadChildren(r.children));
          }
          else {
              return m;
          }
      }, []);
  }

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var __extends$21 = (this && this.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  /**
   * A ModuleResolutionHostAdapter that overrides the readResource() method with the one
   * passed in the interface.
   */
  var CustomLoaderModuleResolutionHostAdapter = (function (_super) {
      __extends$21(CustomLoaderModuleResolutionHostAdapter, _super);
      function CustomLoaderModuleResolutionHostAdapter(_readResource, host) {
          var _this = _super.call(this, host) || this;
          _this._readResource = _readResource;
          return _this;
      }
      CustomLoaderModuleResolutionHostAdapter.prototype.readResource = function (path) { return this._readResource(path); };
      return CustomLoaderModuleResolutionHostAdapter;
  }(ModuleResolutionHostAdapter));
  /**
   * @internal
   * @private
   */
  var NgTools_InternalApi_NG_2 = (function () {
      function NgTools_InternalApi_NG_2() {
      }
      /**
       * @internal
       * @private
       */
      NgTools_InternalApi_NG_2.codeGen = function (options) {
          var hostContext = new CustomLoaderModuleResolutionHostAdapter(options.readResource, options.host);
          var cliOptions = {
              i18nFormat: options.i18nFormat,
              i18nFile: options.i18nFile,
              locale: options.locale,
              basePath: options.basePath
          };
          // Create the Code Generator.
          var codeGenerator = CodeGenerator.create(options.angularCompilerOptions, cliOptions, options.program, options.host, hostContext);
          return codeGenerator.codegen();
      };
      /**
       * @internal
       * @private
       */
      NgTools_InternalApi_NG_2.listLazyRoutes = function (options) {
          var angularCompilerOptions = options.angularCompilerOptions;
          var program = options.program;
          var moduleResolutionHost = new ModuleResolutionHostAdapter(options.host);
          var usePathMapping = !!angularCompilerOptions.rootDirs && angularCompilerOptions.rootDirs.length > 0;
          var ngCompilerHost = usePathMapping ?
              new PathMappedCompilerHost(program, angularCompilerOptions, moduleResolutionHost) :
              new CompilerHost(program, angularCompilerOptions, moduleResolutionHost);
          var symbolCache = new StaticSymbolCache();
          var summaryResolver = new AotSummaryResolver(ngCompilerHost, symbolCache);
          var symbolResolver = new StaticSymbolResolver(ngCompilerHost, symbolCache, summaryResolver);
          var staticReflector = new StaticReflector(symbolResolver);
          var routeMap = listLazyRoutesOfModule(options.entryModule, ngCompilerHost, staticReflector);
          return Object.keys(routeMap).reduce(function (acc, route) {
              acc[route] = routeMap[route].absoluteFilePath;
              return acc;
          }, {});
      };
      /**
       * @internal
       * @private
       */
      NgTools_InternalApi_NG_2.extractI18n = function (options) {
          var hostContext = new CustomLoaderModuleResolutionHostAdapter(options.readResource, options.host);
          // Create the i18n extractor.
          var locale = options.locale || null;
          var extractor = Extractor$1.create(options.angularCompilerOptions, options.program, options.host, locale, hostContext);
          return extractor.extract(options.i18nFormat, options.outFile || null);
      };
      return NgTools_InternalApi_NG_2;
  }());

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var __extends$18 = (this && this.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ReflectorModuleModuleResolutionHost = (function () {
      function ReflectorModuleModuleResolutionHost(host) {
          var _this = this;
          this.host = host;
          if (host.directoryExists)
              this.directoryExists = function (directoryName) { return _this.host.directoryExists(directoryName); };
      }
      ReflectorModuleModuleResolutionHost.prototype.fileExists = function (fileName) { return !!this.host.getScriptSnapshot(fileName); };
      ReflectorModuleModuleResolutionHost.prototype.readFile = function (fileName) {
          var snapshot = this.host.getScriptSnapshot(fileName);
          if (snapshot) {
              return snapshot.getText(0, snapshot.getLength());
          }
      };
      return ReflectorModuleModuleResolutionHost;
  }());
  var ReflectorHost = (function (_super) {
      __extends$18(ReflectorHost, _super);
      function ReflectorHost(getProgram, serviceHost, options) {
          var _this = _super.call(this, null, options, new ModuleResolutionHostAdapter(new ReflectorModuleModuleResolutionHost(serviceHost))) || this;
          _this.getProgram = getProgram;
          return _this;
      }
      Object.defineProperty(ReflectorHost.prototype, "program", {
          get: function () { return this.getProgram(); },
          set: function (value) {
              // Discard the result set by ancestor constructor
          },
          enumerable: true,
          configurable: true
      });
      return ReflectorHost;
  }(CompilerHost));

  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var __extends$17 = (this && this.__extends) || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  // In TypeScript 2.1 these flags moved
  // These helpers work for both 2.0 and 2.1.
  var isPrivate = ts.ModifierFlags ?
      (function (node) {
          return !!(ts.getCombinedModifierFlags(node) & ts.ModifierFlags.Private);
      }) :
      (function (node) { return !!(node.flags & ts.NodeFlags.Private); });
  var isReferenceType = ts.ObjectFlags ?
      (function (type) {
          return !!(type.flags & ts.TypeFlags.Object &&
              type.objectFlags & ts.ObjectFlags.Reference);
      }) :
      (function (type) { return !!(type.flags & ts.TypeFlags.Reference); });
  /**
   * Create a `LanguageServiceHost`
   */
  function createLanguageServiceFromTypescript(host, service) {
      var ngHost = new TypeScriptServiceHost(host, service);
      var ngServer = createLanguageService(ngHost);
      ngHost.setSite(ngServer);
      return ngServer;
  }
  /**
   * The language service never needs the normalized versions of the metadata. To avoid parsing
   * the content and resolving references, return an empty file. This also allows normalizing
   * template that are syntatically incorrect which is required to provide completions in
   * syntatically incorrect templates.
   */
  var DummyHtmlParser = (function (_super) {
      __extends$17(DummyHtmlParser, _super);
      function DummyHtmlParser() {
          return _super.call(this) || this;
      }
      DummyHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
          if (parseExpansionForms === void 0) { parseExpansionForms = false; }
          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
          return new ParseTreeResult([], []);
      };
      return DummyHtmlParser;
  }(HtmlParser));
  /**
   * Avoid loading resources in the language servcie by using a dummy loader.
   */
  var DummyResourceLoader = (function (_super) {
      __extends$17(DummyResourceLoader, _super);
      function DummyResourceLoader() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      DummyResourceLoader.prototype.get = function (url) { return Promise.resolve(''); };
      return DummyResourceLoader;
  }(ResourceLoader));
  /**
   * An implemntation of a `LanguageServiceHost` for a TypeScript project.
   *
   * The `TypeScriptServiceHost` implements the Angular `LanguageServiceHost` using
   * the TypeScript language services.
   *
   * @expermental
   */
  var TypeScriptServiceHost = (function () {
      function TypeScriptServiceHost(host, tsService) {
          this.host = host;
          this.tsService = tsService;
          this._staticSymbolCache = new StaticSymbolCache();
          this._typeCache = [];
          this.modulesOutOfDate = true;
      }
      TypeScriptServiceHost.prototype.setSite = function (service) { this.service = service; };
      Object.defineProperty(TypeScriptServiceHost.prototype, "resolver", {
          /**
           * Angular LanguageServiceHost implementation
           */
          get: function () {
              var _this = this;
              this.validate();
              var result = this._resolver;
              if (!result) {
                  var moduleResolver = new NgModuleResolver(this.reflector);
                  var directiveResolver = new DirectiveResolver(this.reflector);
                  var pipeResolver = new PipeResolver(this.reflector);
                  var elementSchemaRegistry = new DomElementSchemaRegistry();
                  var resourceLoader = new DummyResourceLoader();
                  var urlResolver = createOfflineCompileUrlResolver();
                  var htmlParser = new DummyHtmlParser();
                  // This tracks the CompileConfig in codegen.ts. Currently these options
                  // are hard-coded except for genDebugInfo which is not applicable as we
                  // never generate code.
                  var config = new CompilerConfig({
                      genDebugInfo: false,
                      defaultEncapsulation: ViewEncapsulation.Emulated,
                      logBindingUpdate: false,
                      useJit: false
                  });
                  var directiveNormalizer = new DirectiveNormalizer(resourceLoader, urlResolver, htmlParser, config);
                  result = this._resolver = new CompileMetadataResolver(config, moduleResolver, directiveResolver, pipeResolver, new SummaryResolver(), elementSchemaRegistry, directiveNormalizer, this._staticSymbolCache, this.reflector, function (error, type) { return _this.collectError(error, type && type.filePath); });
              }
              return result;
          },
          enumerable: true,
          configurable: true
      });
      TypeScriptServiceHost.prototype.getTemplateReferences = function () {
          this.ensureTemplateMap();
          return this.templateReferences;
      };
      TypeScriptServiceHost.prototype.getTemplateAt = function (fileName, position) {
          var sourceFile = this.getSourceFile(fileName);
          if (sourceFile) {
              this.context = sourceFile.fileName;
              var node = this.findNode(sourceFile, position);
              if (node) {
                  return this.getSourceFromNode(fileName, this.host.getScriptVersion(sourceFile.fileName), node);
              }
          }
          else {
              this.ensureTemplateMap();
              // TODO: Cannocalize the file?
              var componentType = this.fileToComponent.get(fileName);
              if (componentType) {
                  return this.getSourceFromType(fileName, this.host.getScriptVersion(fileName), componentType);
              }
          }
      };
      TypeScriptServiceHost.prototype.getAnalyzedModules = function () {
          this.validate();
          return this.ensureAnalyzedModules();
      };
      TypeScriptServiceHost.prototype.ensureAnalyzedModules = function () {
          var analyzedModules = this.analyzedModules;
          if (!analyzedModules) {
              var analyzeHost = { isSourceFile: function (filePath) { return true; } };
              var programSymbols = extractProgramSymbols(this.staticSymbolResolver, this.program.getSourceFiles().map(function (sf) { return sf.fileName; }), analyzeHost);
              analyzedModules = this.analyzedModules =
                  analyzeNgModules(programSymbols, analyzeHost, this.resolver);
          }
          return analyzedModules;
      };
      TypeScriptServiceHost.prototype.getTemplates = function (fileName) {
          var _this = this;
          this.ensureTemplateMap();
          var componentType = this.fileToComponent.get(fileName);
          if (componentType) {
              var templateSource = this.getTemplateAt(fileName, 0);
              if (templateSource) {
                  return [templateSource];
              }
          }
          else {
              var version_1 = this.host.getScriptVersion(fileName);
              var result_1 = [];
              // Find each template string in the file
              var visit_1 = function (child) {
                  var templateSource = _this.getSourceFromNode(fileName, version_1, child);
                  if (templateSource) {
                      result_1.push(templateSource);
                  }
                  else {
                      ts.forEachChild(child, visit_1);
                  }
              };
              var sourceFile = this.getSourceFile(fileName);
              if (sourceFile) {
                  this.context = sourceFile.path;
                  ts.forEachChild(sourceFile, visit_1);
              }
              return result_1.length ? result_1 : undefined;
          }
      };
      TypeScriptServiceHost.prototype.getDeclarations = function (fileName) {
          var _this = this;
          var result = [];
          var sourceFile = this.getSourceFile(fileName);
          if (sourceFile) {
              var visit_2 = function (child) {
                  var declaration = _this.getDeclarationFromNode(sourceFile, child);
                  if (declaration) {
                      result.push(declaration);
                  }
                  else {
                      ts.forEachChild(child, visit_2);
                  }
              };
              ts.forEachChild(sourceFile, visit_2);
          }
          return result;
      };
      TypeScriptServiceHost.prototype.getSourceFile = function (fileName) {
          return this.tsService.getProgram().getSourceFile(fileName);
      };
      TypeScriptServiceHost.prototype.updateAnalyzedModules = function () {
          this.validate();
          if (this.modulesOutOfDate) {
              this.analyzedModules = null;
              this._reflector = null;
              this._staticSymbolResolver = null;
              this.templateReferences = null;
              this.fileToComponent = null;
              this.ensureAnalyzedModules();
              this.modulesOutOfDate = false;
          }
      };
      Object.defineProperty(TypeScriptServiceHost.prototype, "program", {
          get: function () { return this.tsService.getProgram(); },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(TypeScriptServiceHost.prototype, "checker", {
          get: function () {
              var checker = this._checker;
              if (!checker) {
                  checker = this._checker = this.program.getTypeChecker();
              }
              return checker;
          },
          enumerable: true,
          configurable: true
      });
      TypeScriptServiceHost.prototype.validate = function () {
          var program = this.program;
          if (this.lastProgram != program) {
              this.clearCaches();
              this.lastProgram = program;
          }
      };
      TypeScriptServiceHost.prototype.clearCaches = function () {
          this._checker = null;
          this._typeCache = [];
          this._resolver = null;
          this.collectedErrors = null;
          this.modulesOutOfDate = true;
      };
      TypeScriptServiceHost.prototype.ensureTemplateMap = function () {
          if (!this.fileToComponent || !this.templateReferences) {
              var fileToComponent = new Map();
              var templateReference = [];
              var ngModuleSummary = this.getAnalyzedModules();
              var urlResolver = createOfflineCompileUrlResolver();
              for (var _i = 0, _a = ngModuleSummary.ngModules; _i < _a.length; _i++) {
                  var module_1 = _a[_i];
                  for (var _b = 0, _c = module_1.declaredDirectives; _b < _c.length; _b++) {
                      var directive = _c[_b];
                      var _d = this.resolver.getNonNormalizedDirectiveMetadata(directive.reference), metadata = _d.metadata, annotation = _d.annotation;
                      if (metadata.isComponent && metadata.template && metadata.template.templateUrl) {
                          var templateName = urlResolver.resolve(componentModuleUrl(this.reflector, directive.reference, annotation), metadata.template.templateUrl);
                          fileToComponent.set(templateName, directive.reference);
                          templateReference.push(templateName);
                      }
                  }
              }
              this.fileToComponent = fileToComponent;
              this.templateReferences = templateReference;
          }
      };
      TypeScriptServiceHost.prototype.getSourceFromDeclaration = function (fileName, version, source, span, type, declaration, node, sourceFile) {
          var queryCache = undefined;
          var t = this;
          if (declaration) {
              return {
                  version: version,
                  source: source,
                  span: span,
                  type: type,
                  get members() {
                      var checker = t.checker;
                      var program = t.program;
                      var type = checker.getTypeAtLocation(declaration);
                      return new TypeWrapper(type, { node: node, program: program, checker: checker }).members();
                  },
                  get query() {
                      if (!queryCache) {
                          queryCache = new TypeScriptSymbolQuery(t.program, t.checker, sourceFile, function () {
                              var pipes = t.service.getPipesAt(fileName, node.getStart());
                              var checker = t.checker;
                              var program = t.program;
                              return new PipesTable(pipes, { node: node, program: program, checker: checker });
                          });
                      }
                      return queryCache;
                  }
              };
          }
      };
      TypeScriptServiceHost.prototype.getSourceFromNode = function (fileName, version, node) {
          var result = undefined;
          var t = this;
          switch (node.kind) {
              case ts.SyntaxKind.NoSubstitutionTemplateLiteral:
              case ts.SyntaxKind.StringLiteral:
                  var _a = this.getTemplateClassDeclFromNode(node), declaration = _a[0], decorator = _a[1];
                  var queryCache = undefined;
                  if (declaration && declaration.name) {
                      var sourceFile = this.getSourceFile(fileName);
                      return this.getSourceFromDeclaration(fileName, version, this.stringOf(node), shrink(spanOf$1(node)), this.reflector.getStaticSymbol(sourceFile.fileName, declaration.name.text), declaration, node, sourceFile);
                  }
                  break;
          }
          return result;
      };
      TypeScriptServiceHost.prototype.getSourceFromType = function (fileName, version, type) {
          var result = undefined;
          var declaration = this.getTemplateClassFromStaticSymbol(type);
          if (declaration) {
              var snapshot = this.host.getScriptSnapshot(fileName);
              var source = snapshot.getText(0, snapshot.getLength());
              result = this.getSourceFromDeclaration(fileName, version, source, { start: 0, end: source.length }, type, declaration, declaration, declaration.getSourceFile());
          }
          return result;
      };
      Object.defineProperty(TypeScriptServiceHost.prototype, "reflectorHost", {
          get: function () {
              var _this = this;
              var result = this._reflectorHost;
              if (!result) {
                  if (!this.context) {
                      // Make up a context by finding the first script and using that as the base dir.
                      this.context = this.host.getScriptFileNames()[0];
                  }
                  // Use the file context's directory as the base directory.
                  // The host's getCurrentDirectory() is not reliable as it is always "" in
                  // tsserver. We don't need the exact base directory, just one that contains
                  // a source file.
                  var source = this.tsService.getProgram().getSourceFile(this.context);
                  if (!source) {
                      throw new Error('Internal error: no context could be determined');
                  }
                  var tsConfigPath = findTsConfig(source.fileName);
                  var basePath = path.dirname(tsConfigPath || this.context);
                  result = this._reflectorHost = new ReflectorHost(function () { return _this.tsService.getProgram(); }, this.host, { basePath: basePath, genDir: basePath });
              }
              return result;
          },
          enumerable: true,
          configurable: true
      });
      TypeScriptServiceHost.prototype.collectError = function (error, filePath) {
          var errorMap = this.collectedErrors;
          if (!errorMap) {
              errorMap = this.collectedErrors = new Map();
          }
          var errors = errorMap.get(filePath);
          if (!errors) {
              errors = [];
              this.collectedErrors.set(filePath, errors);
          }
          errors.push(error);
      };
      Object.defineProperty(TypeScriptServiceHost.prototype, "staticSymbolResolver", {
          get: function () {
              var _this = this;
              var result = this._staticSymbolResolver;
              if (!result) {
                  var summaryResolver = new AotSummaryResolver({
                      loadSummary: function (filePath) { return null; },
                      isSourceFile: function (sourceFilePath) { return true; },
                      getOutputFileName: function (sourceFilePath) { return null; }
                  }, this._staticSymbolCache);
                  result = this._staticSymbolResolver = new StaticSymbolResolver(this.reflectorHost, this._staticSymbolCache, summaryResolver, function (e, filePath) { return _this.collectError(e, filePath); });
              }
              return result;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(TypeScriptServiceHost.prototype, "reflector", {
          get: function () {
              var _this = this;
              var result = this._reflector;
              if (!result) {
                  result = this._reflector = new StaticReflector(this.staticSymbolResolver, [], [], function (e, filePath) { return _this.collectError(e, filePath); });
              }
              return result;
          },
          enumerable: true,
          configurable: true
      });
      TypeScriptServiceHost.prototype.getTemplateClassFromStaticSymbol = function (type) {
          var source = this.getSourceFile(type.filePath);
          if (source) {
              var declarationNode = ts.forEachChild(source, function (child) {
                  if (child.kind === ts.SyntaxKind.ClassDeclaration) {
                      var classDeclaration = child;
                      if (classDeclaration.name.text === type.name) {
                          return classDeclaration;
                      }
                  }
              });
              return declarationNode;
          }
          return undefined;
      };
      /**
       * Given a template string node, see if it is an Angular template string, and if so return the
       * containing class.
       */
      TypeScriptServiceHost.prototype.getTemplateClassDeclFromNode = function (currentToken) {
          // Verify we are in a 'template' property assignment, in an object literal, which is an call
          // arg, in a decorator
          var parentNode = currentToken.parent; // PropertyAssignment
          if (!parentNode) {
              return TypeScriptServiceHost.missingTemplate;
          }
          if (parentNode.kind !== ts.SyntaxKind.PropertyAssignment) {
              return TypeScriptServiceHost.missingTemplate;
          }
          else {
              // TODO: Is this different for a literal, i.e. a quoted property name like "template"?
              if (parentNode.name.text !== 'template') {
                  return TypeScriptServiceHost.missingTemplate;
              }
          }
          parentNode = parentNode.parent; // ObjectLiteralExpression
          if (!parentNode || parentNode.kind !== ts.SyntaxKind.ObjectLiteralExpression) {
              return TypeScriptServiceHost.missingTemplate;
          }
          parentNode = parentNode.parent; // CallExpression
          if (!parentNode || parentNode.kind !== ts.SyntaxKind.CallExpression) {
              return TypeScriptServiceHost.missingTemplate;
          }
          var callTarget = parentNode.expression;
          var decorator = parentNode.parent; // Decorator
          if (!decorator || decorator.kind !== ts.SyntaxKind.Decorator) {
              return TypeScriptServiceHost.missingTemplate;
          }
          var declaration = decorator.parent; // ClassDeclaration
          if (!declaration || declaration.kind !== ts.SyntaxKind.ClassDeclaration) {
              return TypeScriptServiceHost.missingTemplate;
          }
          return [declaration, callTarget];
      };
      TypeScriptServiceHost.prototype.getCollectedErrors = function (defaultSpan, sourceFile) {
          var errors = (this.collectedErrors && this.collectedErrors.get(sourceFile.fileName));
          return (errors && errors.map(function (e) {
              return { message: e.message, span: spanAt(sourceFile, e.line, e.column) || defaultSpan };
          })) ||
              [];
      };
      TypeScriptServiceHost.prototype.getDeclarationFromNode = function (sourceFile, node) {
          if (node.kind == ts.SyntaxKind.ClassDeclaration && node.decorators &&
              node.name) {
              for (var _i = 0, _a = node.decorators; _i < _a.length; _i++) {
                  var decorator = _a[_i];
                  if (decorator.expression && decorator.expression.kind == ts.SyntaxKind.CallExpression) {
                      var classDeclaration = node;
                      if (classDeclaration.name) {
                          var call = decorator.expression;
                          var target = call.expression;
                          var type = this.checker.getTypeAtLocation(target);
                          if (type) {
                              var staticSymbol = this._reflector.getStaticSymbol(sourceFile.fileName, classDeclaration.name.text);
                              try {
                                  if (this.resolver.isDirective(staticSymbol)) {
                                      var metadata = this.resolver.getNonNormalizedDirectiveMetadata(staticSymbol).metadata;
                                      var declarationSpan = spanOf$1(target);
                                      return {
                                          type: staticSymbol,
                                          declarationSpan: declarationSpan,
                                          metadata: metadata,
                                          errors: this.getCollectedErrors(declarationSpan, sourceFile)
                                      };
                                  }
                              }
                              catch (e) {
                                  if (e.message) {
                                      this.collectError(e, sourceFile.fileName);
                                      var declarationSpan = spanOf$1(target);
                                      return {
                                          type: staticSymbol,
                                          declarationSpan: declarationSpan,
                                          errors: this.getCollectedErrors(declarationSpan, sourceFile)
                                      };
                                  }
                              }
                          }
                      }
                  }
              }
          }
      };
      TypeScriptServiceHost.prototype.stringOf = function (node) {
          switch (node.kind) {
              case ts.SyntaxKind.NoSubstitutionTemplateLiteral:
                  return node.text;
              case ts.SyntaxKind.StringLiteral:
                  return node.text;
          }
      };
      TypeScriptServiceHost.prototype.findNode = function (sourceFile, position) {
          var _this = this;
          function find(node) {
              if (position >= node.getStart() && position < node.getEnd()) {
                  return ts.forEachChild(node, find) || node;
              }
          }
          return find(sourceFile);
      };
      TypeScriptServiceHost.prototype.findLiteralType = function (kind, context) {
          var checker = this.checker;
          var type;
          switch (kind) {
              case BuiltinType$1.Any:
                  type = checker.getTypeAtLocation({
                      kind: ts.SyntaxKind.AsExpression,
                      expression: { kind: ts.SyntaxKind.TrueKeyword },
                      type: { kind: ts.SyntaxKind.AnyKeyword }
                  });
                  break;
              case BuiltinType$1.Boolean:
                  type = checker.getTypeAtLocation({ kind: ts.SyntaxKind.TrueKeyword });
                  break;
              case BuiltinType$1.Null:
                  type = checker.getTypeAtLocation({ kind: ts.SyntaxKind.NullKeyword });
                  break;
              case BuiltinType$1.Number:
                  type = checker.getTypeAtLocation({ kind: ts.SyntaxKind.NumericLiteral });
                  break;
              case BuiltinType$1.String:
                  type =
                      checker.getTypeAtLocation({ kind: ts.SyntaxKind.NoSubstitutionTemplateLiteral });
                  break;
              case BuiltinType$1.Undefined:
                  type = checker.getTypeAtLocation({ kind: ts.SyntaxKind.VoidExpression });
                  break;
              default:
                  throw new Error("Internal error, unhandled literal kind " + kind + ":" + BuiltinType$1[kind]);
          }
          return new TypeWrapper(type, context);
      };
      return TypeScriptServiceHost;
  }());
  TypeScriptServiceHost.missingTemplate = [];
  var TypeScriptSymbolQuery = (function () {
      function TypeScriptSymbolQuery(program, checker, source, fetchPipes) {
          this.program = program;
          this.checker = checker;
          this.source = source;
          this.fetchPipes = fetchPipes;
          this.typeCache = new Map();
      }
      TypeScriptSymbolQuery.prototype.getTypeKind = function (symbol) { return typeKindOf(this.getTsTypeOf(symbol)); };
      TypeScriptSymbolQuery.prototype.getBuiltinType = function (kind) {
          // TODO: Replace with typeChecker API when available.
          var result = this.typeCache.get(kind);
          if (!result) {
              var type = getBuiltinTypeFromTs(kind, { checker: this.checker, node: this.source, program: this.program });
              result =
                  new TypeWrapper(type, { program: this.program, checker: this.checker, node: this.source });
              this.typeCache.set(kind, result);
          }
          return result;
      };
      TypeScriptSymbolQuery.prototype.getTypeUnion = function () {
          var types = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              types[_i] = arguments[_i];
          }
          // TODO: Replace with typeChecker API when available
          var checker = this.checker;
          // No API exists so the cheat is to just return the last type any if no types are given.
          return types.length ? types[types.length - 1] : this.getBuiltinType(BuiltinType$1.Any);
      };
      TypeScriptSymbolQuery.prototype.getArrayType = function (type) {
          // TODO: Replace with typeChecker API when available
          return this.getBuiltinType(BuiltinType$1.Any);
      };
      TypeScriptSymbolQuery.prototype.getElementType = function (type) {
          if (type instanceof TypeWrapper) {
              var elementType = getTypeParameterOf(type.tsType, 'Array');
              if (elementType) {
                  return new TypeWrapper(elementType, type.context);
              }
          }
      };
      TypeScriptSymbolQuery.prototype.getNonNullableType = function (symbol) {
          // TODO: Replace with typeChecker API when available;
          return symbol;
      };
      TypeScriptSymbolQuery.prototype.getPipes = function () {
          var result = this.pipesCache;
          if (!result) {
              result = this.pipesCache = this.fetchPipes();
          }
          return result;
      };
      TypeScriptSymbolQuery.prototype.getTemplateContext = function (type) {
          var context = { node: this.source, program: this.program, checker: this.checker };
          var typeSymbol = findClassSymbolInContext(type, context);
          if (typeSymbol) {
              var contextType = this.getTemplateRefContextType(typeSymbol);
              if (contextType)
                  return new SymbolWrapper(contextType, context).members();
          }
      };
      TypeScriptSymbolQuery.prototype.getTypeSymbol = function (type) {
          var context = { node: this.source, program: this.program, checker: this.checker };
          var typeSymbol = findClassSymbolInContext(type, context);
          return new SymbolWrapper(typeSymbol, context);
      };
      TypeScriptSymbolQuery.prototype.createSymbolTable = function (symbols) {
          var result = new MapSymbolTable();
          result.addAll(symbols.map(function (s) { return new DeclaredSymbol(s); }));
          return result;
      };
      TypeScriptSymbolQuery.prototype.mergeSymbolTable = function (symbolTables) {
          var result = new MapSymbolTable();
          for (var _i = 0, symbolTables_1 = symbolTables; _i < symbolTables_1.length; _i++) {
              var symbolTable = symbolTables_1[_i];
              result.addAll(symbolTable.values());
          }
          return result;
      };
      TypeScriptSymbolQuery.prototype.getSpanAt = function (line, column) { return spanAt(this.source, line, column); };
      TypeScriptSymbolQuery.prototype.getTemplateRefContextType = function (type) {
          var constructor = type.members['__constructor'];
          if (constructor) {
              var constructorDeclaration = constructor.declarations[0];
              for (var _i = 0, _a = constructorDeclaration.parameters; _i < _a.length; _i++) {
                  var parameter = _a[_i];
                  var type_1 = this.checker.getTypeAtLocation(parameter.type);
                  if (type_1.symbol.name == 'TemplateRef' && isReferenceType(type_1)) {
                      var typeReference = type_1;
                      if (typeReference.typeArguments.length === 1) {
                          return typeReference.typeArguments[0].symbol;
                      }
                  }
              }
              ;
          }
      };
      TypeScriptSymbolQuery.prototype.getTsTypeOf = function (symbol) {
          var type = this.getTypeWrapper(symbol);
          return type && type.tsType;
      };
      TypeScriptSymbolQuery.prototype.getTypeWrapper = function (symbol) {
          var type = undefined;
          if (symbol instanceof TypeWrapper) {
              type = symbol;
          }
          else if (symbol.type instanceof TypeWrapper) {
              type = symbol.type;
          }
          return type;
      };
      return TypeScriptSymbolQuery;
  }());
  function typeCallable(type) {
      var signatures = type.getCallSignatures();
      return signatures && signatures.length != 0;
  }
  function signaturesOf(type, context) {
      return type.getCallSignatures().map(function (s) { return new SignatureWrapper(s, context); });
  }
  function selectSignature(type, context, types) {
      // TODO: Do a better job of selecting the right signature.
      var signatures = type.getCallSignatures();
      return signatures.length ? new SignatureWrapper(signatures[0], context) : undefined;
  }
  function toSymbolTable(symbols) {
      var result = {};
      for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {
          var symbol = symbols_1[_i];
          result[symbol.name] = symbol;
      }
      return result;
  }
  function toSymbols(symbolTable, filter) {
      var result = [];
      var own = typeof symbolTable.hasOwnProperty === 'function' ?
          function (name) { return symbolTable.hasOwnProperty(name); } :
          function (name) { return !!symbolTable[name]; };
      for (var name_1 in symbolTable) {
          if (own(name_1) && (!filter || filter(symbolTable[name_1]))) {
              result.push(symbolTable[name_1]);
          }
      }
      return result;
  }
  var TypeWrapper = (function () {
      function TypeWrapper(tsType, context) {
          this.tsType = tsType;
          this.context = context;
          if (!tsType) {
              throw Error('Internal: null type');
          }
      }
      Object.defineProperty(TypeWrapper.prototype, "name", {
          get: function () {
              var symbol = this.tsType.symbol;
              return (symbol && symbol.name) || '<anonymous>';
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(TypeWrapper.prototype, "kind", {
          get: function () { return 'type'; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(TypeWrapper.prototype, "language", {
          get: function () { return 'typescript'; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(TypeWrapper.prototype, "type", {
          get: function () { return undefined; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(TypeWrapper.prototype, "container", {
          get: function () { return undefined; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(TypeWrapper.prototype, "public", {
          get: function () { return true; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(TypeWrapper.prototype, "callable", {
          get: function () { return typeCallable(this.tsType); },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(TypeWrapper.prototype, "definition", {
          get: function () { return definitionFromTsSymbol(this.tsType.getSymbol()); },
          enumerable: true,
          configurable: true
      });
      TypeWrapper.prototype.members = function () {
          return new SymbolTableWrapper(this.tsType.getProperties(), this.context);
      };
      TypeWrapper.prototype.signatures = function () { return signaturesOf(this.tsType, this.context); };
      TypeWrapper.prototype.selectSignature = function (types) {
          return selectSignature(this.tsType, this.context, types);
      };
      TypeWrapper.prototype.indexed = function (argument) { return undefined; };
      return TypeWrapper;
  }());
  var SymbolWrapper = (function () {
      function SymbolWrapper(symbol, context) {
          this.symbol = symbol;
          this.context = context;
      }
      Object.defineProperty(SymbolWrapper.prototype, "name", {
          get: function () { return this.symbol.name; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SymbolWrapper.prototype, "kind", {
          get: function () { return this.callable ? 'method' : 'property'; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SymbolWrapper.prototype, "language", {
          get: function () { return 'typescript'; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SymbolWrapper.prototype, "type", {
          get: function () { return new TypeWrapper(this.tsType, this.context); },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SymbolWrapper.prototype, "container", {
          get: function () { return getContainerOf(this.symbol, this.context); },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SymbolWrapper.prototype, "public", {
          get: function () {
              // Symbols that are not explicitly made private are public.
              return !isSymbolPrivate(this.symbol);
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SymbolWrapper.prototype, "callable", {
          get: function () { return typeCallable(this.tsType); },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SymbolWrapper.prototype, "definition", {
          get: function () { return definitionFromTsSymbol(this.symbol); },
          enumerable: true,
          configurable: true
      });
      SymbolWrapper.prototype.members = function () { return new SymbolTableWrapper(this.symbol.members, this.context); };
      SymbolWrapper.prototype.signatures = function () { return signaturesOf(this.tsType, this.context); };
      SymbolWrapper.prototype.selectSignature = function (types) {
          return selectSignature(this.tsType, this.context, types);
      };
      SymbolWrapper.prototype.indexed = function (argument) { return undefined; };
      Object.defineProperty(SymbolWrapper.prototype, "tsType", {
          get: function () {
              var type = this._tsType;
              if (!type) {
                  type = this._tsType =
                      this.context.checker.getTypeOfSymbolAtLocation(this.symbol, this.context.node);
              }
              return type;
          },
          enumerable: true,
          configurable: true
      });
      return SymbolWrapper;
  }());
  var DeclaredSymbol = (function () {
      function DeclaredSymbol(declaration) {
          this.declaration = declaration;
      }
      Object.defineProperty(DeclaredSymbol.prototype, "name", {
          get: function () { return this.declaration.name; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(DeclaredSymbol.prototype, "kind", {
          get: function () { return this.declaration.kind; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(DeclaredSymbol.prototype, "language", {
          get: function () { return 'ng-template'; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(DeclaredSymbol.prototype, "container", {
          get: function () { return undefined; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(DeclaredSymbol.prototype, "type", {
          get: function () { return this.declaration.type; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(DeclaredSymbol.prototype, "callable", {
          get: function () { return this.declaration.type.callable; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(DeclaredSymbol.prototype, "public", {
          get: function () { return true; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(DeclaredSymbol.prototype, "definition", {
          get: function () { return this.declaration.definition; },
          enumerable: true,
          configurable: true
      });
      DeclaredSymbol.prototype.members = function () { return this.declaration.type.members(); };
      DeclaredSymbol.prototype.signatures = function () { return this.declaration.type.signatures(); };
      DeclaredSymbol.prototype.selectSignature = function (types) {
          return this.declaration.type.selectSignature(types);
      };
      DeclaredSymbol.prototype.indexed = function (argument) { return undefined; };
      return DeclaredSymbol;
  }());
  var SignatureWrapper = (function () {
      function SignatureWrapper(signature, context) {
          this.signature = signature;
          this.context = context;
      }
      Object.defineProperty(SignatureWrapper.prototype, "arguments", {
          get: function () {
              return new SymbolTableWrapper(this.signature.getParameters(), this.context);
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SignatureWrapper.prototype, "result", {
          get: function () { return new TypeWrapper(this.signature.getReturnType(), this.context); },
          enumerable: true,
          configurable: true
      });
      return SignatureWrapper;
  }());
  var SignatureResultOverride = (function () {
      function SignatureResultOverride(signature, resultType) {
          this.signature = signature;
          this.resultType = resultType;
      }
      Object.defineProperty(SignatureResultOverride.prototype, "arguments", {
          get: function () { return this.signature.arguments; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(SignatureResultOverride.prototype, "result", {
          get: function () { return this.resultType; },
          enumerable: true,
          configurable: true
      });
      return SignatureResultOverride;
  }());
  var SymbolTableWrapper = (function () {
      function SymbolTableWrapper(symbols, context, filter) {
          this.context = context;
          if (Array.isArray(symbols)) {
              this.symbols = filter ? symbols.filter(filter) : symbols;
              this.symbolTable = toSymbolTable(symbols);
          }
          else {
              this.symbols = toSymbols(symbols, filter);
              this.symbolTable = filter ? toSymbolTable(this.symbols) : symbols;
          }
      }
      Object.defineProperty(SymbolTableWrapper.prototype, "size", {
          get: function () { return this.symbols.length; },
          enumerable: true,
          configurable: true
      });
      SymbolTableWrapper.prototype.get = function (key) {
          var symbol = this.symbolTable[key];
          return symbol ? new SymbolWrapper(symbol, this.context) : undefined;
      };
      SymbolTableWrapper.prototype.has = function (key) { return this.symbolTable[key] != null; };
      SymbolTableWrapper.prototype.values = function () {
          var _this = this;
          return this.symbols.map(function (s) { return new SymbolWrapper(s, _this.context); });
      };
      return SymbolTableWrapper;
  }());
  var MapSymbolTable = (function () {
      function MapSymbolTable() {
          this.map = new Map();
          this._values = [];
      }
      Object.defineProperty(MapSymbolTable.prototype, "size", {
          get: function () { return this.map.size; },
          enumerable: true,
          configurable: true
      });
      MapSymbolTable.prototype.get = function (key) { return this.map.get(key); };
      MapSymbolTable.prototype.add = function (symbol) {
          if (this.map.has(symbol.name)) {
              var previous = this.map.get(symbol.name);
              this._values[this._values.indexOf(previous)] = symbol;
          }
          this.map.set(symbol.name, symbol);
          this._values.push(symbol);
      };
      MapSymbolTable.prototype.addAll = function (symbols) {
          for (var _i = 0, symbols_2 = symbols; _i < symbols_2.length; _i++) {
              var symbol = symbols_2[_i];
              this.add(symbol);
          }
      };
      MapSymbolTable.prototype.has = function (key) { return this.map.has(key); };
      MapSymbolTable.prototype.values = function () {
          // Switch to this.map.values once iterables are supported by the target language.
          return this._values;
      };
      return MapSymbolTable;
  }());
  var PipesTable = (function () {
      function PipesTable(pipes, context) {
          this.pipes = pipes;
          this.context = context;
      }
      Object.defineProperty(PipesTable.prototype, "size", {
          get: function () { return this.pipes.length; },
          enumerable: true,
          configurable: true
      });
      PipesTable.prototype.get = function (key) {
          var pipe = this.pipes.find(function (pipe) { return pipe.name == key; });
          if (pipe) {
              return new PipeSymbol(pipe, this.context);
          }
      };
      PipesTable.prototype.has = function (key) { return this.pipes.find(function (pipe) { return pipe.name == key; }) != null; };
      PipesTable.prototype.values = function () {
          var _this = this;
          return this.pipes.map(function (pipe) { return new PipeSymbol(pipe, _this.context); });
      };
      return PipesTable;
  }());
  var PipeSymbol = (function () {
      function PipeSymbol(pipe, context) {
          this.pipe = pipe;
          this.context = context;
      }
      Object.defineProperty(PipeSymbol.prototype, "name", {
          get: function () { return this.pipe.name; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(PipeSymbol.prototype, "kind", {
          get: function () { return 'pipe'; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(PipeSymbol.prototype, "language", {
          get: function () { return 'typescript'; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(PipeSymbol.prototype, "type", {
          get: function () { return new TypeWrapper(this.tsType, this.context); },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(PipeSymbol.prototype, "container", {
          get: function () { return undefined; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(PipeSymbol.prototype, "callable", {
          get: function () { return true; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(PipeSymbol.prototype, "public", {
          get: function () { return true; },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(PipeSymbol.prototype, "definition", {
          get: function () { return definitionFromTsSymbol(this.tsType.getSymbol()); },
          enumerable: true,
          configurable: true
      });
      PipeSymbol.prototype.members = function () { return EmptyTable.instance; };
      PipeSymbol.prototype.signatures = function () { return signaturesOf(this.tsType, this.context); };
      PipeSymbol.prototype.selectSignature = function (types) {
          var signature = selectSignature(this.tsType, this.context, types);
          if (types.length == 1) {
              var parameterType = types[0];
              if (parameterType instanceof TypeWrapper) {
                  var resultType = undefined;
                  switch (this.name) {
                      case 'async':
                          switch (parameterType.name) {
                              case 'Observable':
                              case 'Promise':
                              case 'EventEmitter':
                                  resultType = getTypeParameterOf(parameterType.tsType, parameterType.name);
                                  break;
                          }
                          break;
                      case 'slice':
                          resultType = getTypeParameterOf(parameterType.tsType, 'Array');
                          break;
                  }
                  if (resultType) {
                      signature = new SignatureResultOverride(signature, new TypeWrapper(resultType, parameterType.context));
                  }
              }
          }
          return signature;
      };
      PipeSymbol.prototype.indexed = function (argument) { return undefined; };
      Object.defineProperty(PipeSymbol.prototype, "tsType", {
          get: function () {
              var type = this._tsType;
              if (!type) {
                  var classSymbol = this.findClassSymbol(this.pipe.symbol);
                  if (classSymbol) {
                      type = this._tsType = this.findTransformMethodType(classSymbol);
                  }
                  if (!type) {
                      type = this._tsType = getBuiltinTypeFromTs(BuiltinType$1.Any, this.context);
                  }
              }
              return type;
          },
          enumerable: true,
          configurable: true
      });
      PipeSymbol.prototype.findClassSymbol = function (type) {
          return findClassSymbolInContext(type, this.context);
      };
      PipeSymbol.prototype.findTransformMethodType = function (classSymbol) {
          var transform = classSymbol.members['transform'];
          if (transform) {
              return this.context.checker.getTypeOfSymbolAtLocation(transform, this.context.node);
          }
      };
      return PipeSymbol;
  }());
  function findClassSymbolInContext(type, context) {
      var sourceFile = context.program.getSourceFile(type.filePath);
      if (sourceFile) {
          var moduleSymbol = sourceFile.module || sourceFile.symbol;
          var exports_1 = context.checker.getExportsOfModule(moduleSymbol);
          return (exports_1 || []).find(function (symbol) { return symbol.name == type.name; });
      }
  }
  var EmptyTable = (function () {
      function EmptyTable() {
      }
      Object.defineProperty(EmptyTable.prototype, "size", {
          get: function () { return 0; },
          enumerable: true,
          configurable: true
      });
      EmptyTable.prototype.get = function (key) { return undefined; };
      EmptyTable.prototype.has = function (key) { return false; };
      EmptyTable.prototype.values = function () { return []; };
      return EmptyTable;
  }());
  EmptyTable.instance = new EmptyTable();
  function findTsConfig(fileName) {
      var dir = path.dirname(fileName);
      while (fs.existsSync(dir)) {
          var candidate = path.join(dir, 'tsconfig.json');
          if (fs.existsSync(candidate))
              return candidate;
          dir = path.dirname(dir);
      }
  }
  function isSymbolPrivate(s) {
      return s.valueDeclaration && isPrivate(s.valueDeclaration);
  }
  function getBuiltinTypeFromTs(kind, context) {
      var type;
      var checker = context.checker;
      var node = context.node;
      switch (kind) {
          case BuiltinType$1.Any:
              type = checker.getTypeAtLocation(setParents({
                  kind: ts.SyntaxKind.AsExpression,
                  expression: { kind: ts.SyntaxKind.TrueKeyword },
                  type: { kind: ts.SyntaxKind.AnyKeyword }
              }, node));
              break;
          case BuiltinType$1.Boolean:
              type =
                  checker.getTypeAtLocation(setParents({ kind: ts.SyntaxKind.TrueKeyword }, node));
              break;
          case BuiltinType$1.Null:
              type =
                  checker.getTypeAtLocation(setParents({ kind: ts.SyntaxKind.NullKeyword }, node));
              break;
          case BuiltinType$1.Number:
              var numeric = { kind: ts.SyntaxKind.NumericLiteral };
              setParents({ kind: ts.SyntaxKind.ExpressionStatement, expression: numeric }, node);
              type = checker.getTypeAtLocation(numeric);
              break;
          case BuiltinType$1.String:
              type = checker.getTypeAtLocation(setParents({ kind: ts.SyntaxKind.NoSubstitutionTemplateLiteral }, node));
              break;
          case BuiltinType$1.Undefined:
              type = checker.getTypeAtLocation(setParents({
                  kind: ts.SyntaxKind.VoidExpression,
                  expression: { kind: ts.SyntaxKind.NumericLiteral }
              }, node));
              break;
          default:
              throw new Error("Internal error, unhandled literal kind " + kind + ":" + BuiltinType$1[kind]);
      }
      return type;
  }
  function setParents(node, parent) {
      node.parent = parent;
      ts.forEachChild(node, function (child) { return setParents(child, node); });
      return node;
  }
  function spanOf$1(node) {
      return { start: node.getStart(), end: node.getEnd() };
  }
  function shrink(span, offset) {
      if (offset == null)
          offset = 1;
      return { start: span.start + offset, end: span.end - offset };
  }
  function spanAt(sourceFile, line, column) {
      if (line != null && column != null) {
          var position_1 = ts.getPositionOfLineAndCharacter(sourceFile, line, column);
          var findChild = function findChild(node) {
              if (node.kind > ts.SyntaxKind.LastToken && node.pos <= position_1 && node.end > position_1) {
                  var betterNode = ts.forEachChild(node, findChild);
                  return betterNode || node;
              }
          };
          var node = ts.forEachChild(sourceFile, findChild);
          if (node) {
              return { start: node.getStart(), end: node.getEnd() };
          }
      }
  }
  function definitionFromTsSymbol(symbol) {
      var declarations = symbol.declarations;
      if (declarations) {
          return declarations.map(function (declaration) {
              var sourceFile = declaration.getSourceFile();
              return {
                  fileName: sourceFile.fileName,
                  span: { start: declaration.getStart(), end: declaration.getEnd() }
              };
          });
      }
  }
  function parentDeclarationOf(node) {
      while (node) {
          switch (node.kind) {
              case ts.SyntaxKind.ClassDeclaration:
              case ts.SyntaxKind.InterfaceDeclaration:
                  return node;
              case ts.SyntaxKind.SourceFile:
                  return null;
          }
          node = node.parent;
      }
  }
  function getContainerOf(symbol, context) {
      if (symbol.getFlags() & ts.SymbolFlags.ClassMember && symbol.declarations) {
          for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
              var declaration = _a[_i];
              var parent_1 = parentDeclarationOf(declaration);
              if (parent_1) {
                  var type = context.checker.getTypeAtLocation(parent_1);
                  if (type) {
                      return new TypeWrapper(type, context);
                  }
              }
          }
      }
  }
  function getTypeParameterOf(type, name) {
      if (type && type.symbol && type.symbol.name == name) {
          var typeArguments = type.typeArguments;
          if (typeArguments && typeArguments.length <= 1) {
              return typeArguments[0];
          }
      }
  }
  function typeKindOf(type) {
      if (type) {
          if (type.flags & ts.TypeFlags.Any) {
              return BuiltinType$1.Any;
          }
          else if (type.flags & (ts.TypeFlags.String | ts.TypeFlags.StringLike | ts.TypeFlags.StringLiteral)) {
              return BuiltinType$1.String;
          }
          else if (type.flags & (ts.TypeFlags.Number | ts.TypeFlags.NumberLike)) {
              return BuiltinType$1.Number;
          }
          else if (type.flags & (ts.TypeFlags.Undefined)) {
              return BuiltinType$1.Undefined;
          }
          else if (type.flags & (ts.TypeFlags.Null)) {
              return BuiltinType$1.Null;
          }
          else if (type.flags & ts.TypeFlags.Union) {
              // If all the constituent types of a union are the same kind, it is also that kind.
              var candidate = void 0;
              var unionType = type;
              if (unionType.types.length > 0) {
                  candidate = typeKindOf(unionType.types[0]);
                  for (var _i = 0, _a = unionType.types; _i < _a.length; _i++) {
                      var subType = _a[_i];
                      if (candidate != typeKindOf(subType)) {
                          return BuiltinType$1.Other;
                      }
                  }
              }
              return candidate;
          }
          else if (type.flags & ts.TypeFlags.TypeParameter) {
              return BuiltinType$1.Unbound;
          }
      }
      return BuiltinType$1.Other;
  }

  function create(info /* ts.server.PluginCreateInfo */) {
      // Create the proxy
      var proxy = Object.create(null);
      var oldLS = info.languageService;
      var _loop_1 = function (k) {
          proxy[k] = function () { return oldLS[k].apply(oldLS, arguments); };
      };
      for (var k in oldLS) {
          _loop_1(k);
      }
      function completionToEntry(c) {
          return { kind: c.kind, name: c.name, sortText: c.sort, kindModifiers: '' };
      }
      function diagnosticToDiagnostic(d, file) {
          return {
              file: file,
              start: d.span.start,
              length: d.span.end - d.span.start,
              messageText: d.message,
              category: ts.DiagnosticCategory.Error,
              code: 0
          };
      }
      function tryOperation(attempting, callback) {
          try {
              callback();
          }
          catch (e) {
              info.project.projectService.logger.info("Failed to " + attempting + ": " + e.toString());
              info.project.projectService.logger.info("Stack trace: " + e.stack);
          }
      }
      var serviceHost = new TypeScriptServiceHost(info.languageServiceHost, info.languageService);
      var ls = createLanguageService(serviceHost);
      serviceHost.setSite(ls);
      proxy.getCompletionsAtPosition = function (fileName, position) {
          var base = oldLS.getCompletionsAtPosition(fileName, position);
          tryOperation('get completions', function () {
              var results = ls.getCompletionsAt(fileName, position);
              if (results && results.length) {
                  if (base === undefined) {
                      base = {
                          isGlobalCompletion: false,
                          isMemberCompletion: false,
                          isNewIdentifierLocation: false,
                          entries: []
                      };
                  }
                  for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {
                      var entry = results_1[_i];
                      base.entries.push(completionToEntry(entry));
                  }
              }
          });
          return base;
      };
      proxy.getQuickInfoAtPosition = function (fileName, position) {
          var base = oldLS.getQuickInfoAtPosition(fileName, position);
          tryOperation('get quick info', function () {
              var ours = ls.getHoverAt(fileName, position);
              if (ours) {
                  var displayParts = [];
                  for (var _i = 0, _a = ours.text; _i < _a.length; _i++) {
                      var part = _a[_i];
                      displayParts.push({ kind: part.language, text: part.text });
                  }
                  base = {
                      displayParts: displayParts,
                      documentation: [],
                      kind: 'angular',
                      kindModifiers: 'what does this do?',
                      textSpan: { start: ours.span.start, length: ours.span.end - ours.span.start },
                      tags: [],
                  };
              }
          });
          return base;
      };
      proxy.getSemanticDiagnostics = function (fileName) {
          var base = oldLS.getSemanticDiagnostics(fileName);
          if (base === undefined) {
              base = [];
          }
          tryOperation('get diagnostics', function () {
              info.project.projectService.logger.info("Computing Angular semantic diagnostics...");
              var ours = ls.getDiagnostics(fileName);
              if (ours && ours.length) {
                  var file_1 = oldLS.getProgram().getSourceFile(fileName);
                  base.push.apply(base, ours.map(function (d) { return diagnosticToDiagnostic(d, file_1); }));
              }
          });
          return base;
      };
      proxy.getDefinitionAtPosition = function (fileName, position) {
          var base = oldLS.getDefinitionAtPosition(fileName, position);
          if (base && base.length) {
              return base;
          }
          tryOperation('get definition', function () {
              var ours = ls.getDefinitionAt(fileName, position);
              if (ours && ours.length) {
                  base = base || [];
                  for (var _i = 0, ours_1 = ours; _i < ours_1.length; _i++) {
                      var loc = ours_1[_i];
                      base.push({
                          fileName: loc.fileName,
                          textSpan: { start: loc.span.start, length: loc.span.end - loc.span.start },
                          name: '',
                          kind: 'definition',
                          containerName: loc.fileName,
                          containerKind: 'file'
                      });
                  }
              }
          });
          return base;
      };
      return proxy;
  }

  /**
   * @stable
   */
  var VERSION$5 = new Version('4.0.0-beta.8-1f3198c');

  exports.createLanguageService = createLanguageService;
  exports.create = create;
  exports.TypeScriptServiceHost = TypeScriptServiceHost;
  exports.createLanguageServiceFromTypescript = createLanguageServiceFromTypescript;
  exports.VERSION = VERSION$5;

});