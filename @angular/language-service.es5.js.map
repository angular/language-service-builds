{"version":3,"file":"language-service.es5.js","sources":["../../../../packages/language-service/src/version.ts","../../../../packages/language-service/src/ts_plugin.ts","../../../../packages/language-service/src/typescript_host.ts","../../../../packages/language-service/src/reflector_host.ts","../../../../packages/language-service/src/language_service.ts","../../../../packages/language-service/src/hover.ts","../../../../packages/language-service/src/diagnostics.ts","../../../../packages/language-service/src/definitions.ts","../../../../packages/language-service/src/locate_symbol.ts","../../../../packages/language-service/src/completions.ts","../../../../packages/language-service/src/html_path.ts","../../../../packages/language-service/src/html_info.ts","../../../../packages/language-service/src/expressions.ts","../../../../packages/language-service/src/types.ts","../../../../packages/language-service/src/template_path.ts","../../../../packages/language-service/src/utils.ts","../../../../packages/language-service/src/ast_path.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n/**\n * @stable\n */\nexport const VERSION = new Version('4.0.0-rc.4-b7212f5');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {createLanguageService} from './language_service';\nimport {Completion, Diagnostic, LanguageService, LanguageServiceHost} from './types';\nimport {TypeScriptServiceHost} from './typescript_host';\n\nexport function create(info: any /* ts.server.PluginCreateInfo */): ts.LanguageService {\n  // Create the proxy\n  const proxy: ts.LanguageService = Object.create(null);\n  const oldLS: ts.LanguageService = info.languageService;\n  for (const k in oldLS) {\n    (<any>proxy)[k] = function() { return (oldLS as any)[k].apply(oldLS, arguments); };\n  }\n\n  function completionToEntry(c: Completion): ts.CompletionEntry {\n    return {kind: c.kind, name: c.name, sortText: c.sort, kindModifiers: ''};\n  }\n\n  function diagnosticToDiagnostic(d: Diagnostic, file: ts.SourceFile): ts.Diagnostic {\n    return {\n      file,\n      start: d.span.start,\n      length: d.span.end - d.span.start,\n      messageText: d.message,\n      category: ts.DiagnosticCategory.Error,\n      code: 0\n    };\n  }\n\n  function tryOperation(attempting: string, callback: () => void) {\n    try {\n      callback();\n    } catch (e) {\n      info.project.projectService.logger.info(`Failed to ${attempting}: ${e.toString()}`);\n      info.project.projectService.logger.info(`Stack trace: ${e.stack}`);\n    }\n  }\n\n  const serviceHost = new TypeScriptServiceHost(info.languageServiceHost, info.languageService);\n  const ls = createLanguageService(serviceHost);\n  serviceHost.setSite(ls);\n\n  proxy.getCompletionsAtPosition = function(fileName: string, position: number) {\n    let base = oldLS.getCompletionsAtPosition(fileName, position);\n    tryOperation('get completions', () => {\n      const results = ls.getCompletionsAt(fileName, position);\n      if (results && results.length) {\n        if (base === undefined) {\n          base = {\n            isGlobalCompletion: false,\n            isMemberCompletion: false,\n            isNewIdentifierLocation: false,\n            entries: []\n          };\n        }\n        for (const entry of results) {\n          base.entries.push(completionToEntry(entry));\n        }\n      }\n    });\n    return base;\n  };\n\n  proxy.getQuickInfoAtPosition = function(fileName: string, position: number): ts.QuickInfo {\n    let base = oldLS.getQuickInfoAtPosition(fileName, position);\n    tryOperation('get quick info', () => {\n      const ours = ls.getHoverAt(fileName, position);\n      if (ours) {\n        const displayParts: typeof base.displayParts = [];\n        for (const part of ours.text) {\n          displayParts.push({kind: part.language, text: part.text});\n        }\n        base = {\n          displayParts,\n          documentation: [],\n          kind: 'angular',\n          kindModifiers: 'what does this do?',\n          textSpan: {start: ours.span.start, length: ours.span.end - ours.span.start},\n          tags: [],\n        };\n      }\n    });\n\n    return base;\n  };\n\n  proxy.getSemanticDiagnostics = function(fileName: string) {\n    let base = oldLS.getSemanticDiagnostics(fileName);\n    if (base === undefined) {\n      base = [];\n    }\n    tryOperation('get diagnostics', () => {\n      info.project.projectService.logger.info(`Computing Angular semantic diagnostics...`);\n      const ours = ls.getDiagnostics(fileName);\n      if (ours && ours.length) {\n        const file = oldLS.getProgram().getSourceFile(fileName);\n        base.push.apply(base, ours.map(d => diagnosticToDiagnostic(d, file)));\n      }\n    });\n\n    return base;\n  };\n\n  proxy.getDefinitionAtPosition = function(\n                                      fileName: string, position: number): ts.DefinitionInfo[] {\n    let base = oldLS.getDefinitionAtPosition(fileName, position);\n    if (base && base.length) {\n      return base;\n    }\n\n    tryOperation('get definition', () => {\n      const ours = ls.getDefinitionAt(fileName, position);\n      if (ours && ours.length) {\n        base = base || [];\n        for (const loc of ours) {\n          base.push({\n            fileName: loc.fileName,\n            textSpan: {start: loc.span.start, length: loc.span.end - loc.span.start},\n            name: '',\n            kind: 'definition',\n            containerName: loc.fileName,\n            containerKind: 'file'\n          });\n        }\n      }\n    });\n    return base;\n  };\n\n  return proxy;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AotSummaryResolver, CompileDirectiveMetadata, CompileMetadataResolver, CompilerConfig, DEFAULT_INTERPOLATION_CONFIG, DirectiveNormalizer, DirectiveResolver, DomElementSchemaRegistry, HtmlParser, InterpolationConfig, NgAnalyzedModules, NgModuleResolver, ParseTreeResult, Parser, PipeResolver, ResourceLoader, StaticReflector, StaticSymbol, StaticSymbolCache, StaticSymbolResolver, SummaryResolver, UrlResolver, analyzeNgModules, componentModuleUrl, createOfflineCompileUrlResolver, extractProgramSymbols} from '@angular/compiler';\nimport {Type, ViewEncapsulation, ÉµConsole as Console} from '@angular/core';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {createLanguageService} from './language_service';\nimport {ReflectorHost} from './reflector_host';\nimport {BuiltinType, CompletionKind, Declaration, DeclarationError, Declarations, Definition, LanguageService, LanguageServiceHost, PipeInfo, Pipes, Signature, Span, Symbol, SymbolDeclaration, SymbolQuery, SymbolTable, TemplateSource, TemplateSources} from './types';\n\n\n// In TypeScript 2.1 these flags moved\n// These helpers work for both 2.0 and 2.1.\nconst isPrivate = (ts as any).ModifierFlags ?\n    ((node: ts.Node) =>\n         !!((ts as any).getCombinedModifierFlags(node) & (ts as any).ModifierFlags.Private)) :\n    ((node: ts.Node) => !!(node.flags & (ts as any).NodeFlags.Private));\nconst isReferenceType = (ts as any).ObjectFlags ?\n    ((type: ts.Type) =>\n         !!(type.flags & (ts as any).TypeFlags.Object &&\n            (type as any).objectFlags & (ts as any).ObjectFlags.Reference)) :\n    ((type: ts.Type) => !!(type.flags & (ts as any).TypeFlags.Reference));\n\n/**\n * Create a `LanguageServiceHost`\n */\nexport function createLanguageServiceFromTypescript(\n    host: ts.LanguageServiceHost, service: ts.LanguageService): LanguageService {\n  const ngHost = new TypeScriptServiceHost(host, service);\n  const ngServer = createLanguageService(ngHost);\n  ngHost.setSite(ngServer);\n  return ngServer;\n}\n\n/**\n * The language service never needs the normalized versions of the metadata. To avoid parsing\n * the content and resolving references, return an empty file. This also allows normalizing\n * template that are syntatically incorrect which is required to provide completions in\n * syntatically incorrect templates.\n */\nexport class DummyHtmlParser extends HtmlParser {\n  constructor() { super(); }\n\n  parse(\n      source: string, url: string, parseExpansionForms: boolean = false,\n      interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ParseTreeResult {\n    return new ParseTreeResult([], []);\n  }\n}\n\n/**\n * Avoid loading resources in the language servcie by using a dummy loader.\n */\nexport class DummyResourceLoader extends ResourceLoader {\n  get(url: string): Promise<string> { return Promise.resolve(''); }\n}\n\n/**\n * An implemntation of a `LanguageServiceHost` for a TypeScript project.\n *\n * The `TypeScriptServiceHost` implements the Angular `LanguageServiceHost` using\n * the TypeScript language services.\n *\n * @expermental\n */\nexport class TypeScriptServiceHost implements LanguageServiceHost {\n  private _resolver: CompileMetadataResolver;\n  private _staticSymbolCache = new StaticSymbolCache();\n  private _staticSymbolResolver: StaticSymbolResolver;\n  private _reflector: StaticReflector;\n  private _reflectorHost: ReflectorHost;\n  private _checker: ts.TypeChecker;\n  private _typeCache: Symbol[] = [];\n  private context: string|undefined;\n  private lastProgram: ts.Program|undefined;\n  private modulesOutOfDate: boolean = true;\n  private analyzedModules: NgAnalyzedModules;\n  private service: LanguageService;\n  private fileToComponent: Map<string, StaticSymbol>;\n  private templateReferences: string[];\n  private collectedErrors: Map<string, any[]>;\n\n  constructor(private host: ts.LanguageServiceHost, private tsService: ts.LanguageService) {}\n\n  setSite(service: LanguageService) { this.service = service; }\n\n  /**\n   * Angular LanguageServiceHost implementation\n   */\n  get resolver(): CompileMetadataResolver {\n    this.validate();\n    let result = this._resolver;\n    if (!result) {\n      const moduleResolver = new NgModuleResolver(this.reflector);\n      const directiveResolver = new DirectiveResolver(this.reflector);\n      const pipeResolver = new PipeResolver(this.reflector);\n      const elementSchemaRegistry = new DomElementSchemaRegistry();\n      const resourceLoader = new DummyResourceLoader();\n      const urlResolver = createOfflineCompileUrlResolver();\n      const htmlParser = new DummyHtmlParser();\n      // This tracks the CompileConfig in codegen.ts. Currently these options\n      // are hard-coded.\n      const config =\n          new CompilerConfig({defaultEncapsulation: ViewEncapsulation.Emulated, useJit: false});\n      const directiveNormalizer =\n          new DirectiveNormalizer(resourceLoader, urlResolver, htmlParser, config);\n\n      result = this._resolver = new CompileMetadataResolver(\n          config, moduleResolver, directiveResolver, pipeResolver, new SummaryResolver(),\n          elementSchemaRegistry, directiveNormalizer, new Console(), this._staticSymbolCache,\n          this.reflector, (error, type) => this.collectError(error, type && type.filePath));\n    }\n    return result;\n  }\n\n  getTemplateReferences(): string[] {\n    this.ensureTemplateMap();\n    return this.templateReferences;\n  }\n\n  getTemplateAt(fileName: string, position: number): TemplateSource|undefined {\n    let sourceFile = this.getSourceFile(fileName);\n    if (sourceFile) {\n      this.context = sourceFile.fileName;\n      let node = this.findNode(sourceFile, position);\n      if (node) {\n        return this.getSourceFromNode(\n            fileName, this.host.getScriptVersion(sourceFile.fileName), node);\n      }\n    } else {\n      this.ensureTemplateMap();\n      // TODO: Cannocalize the file?\n      const componentType = this.fileToComponent.get(fileName);\n      if (componentType) {\n        return this.getSourceFromType(\n            fileName, this.host.getScriptVersion(fileName), componentType);\n      }\n    }\n  }\n\n  getAnalyzedModules(): NgAnalyzedModules {\n    this.validate();\n    return this.ensureAnalyzedModules();\n  }\n\n  private ensureAnalyzedModules(): NgAnalyzedModules {\n    let analyzedModules = this.analyzedModules;\n    if (!analyzedModules) {\n      const analyzeHost = {isSourceFile(filePath: string) { return true; }};\n      const programSymbols = extractProgramSymbols(\n          this.staticSymbolResolver, this.program.getSourceFiles().map(sf => sf.fileName),\n          analyzeHost);\n\n      analyzedModules = this.analyzedModules =\n          analyzeNgModules(programSymbols, analyzeHost, this.resolver);\n    }\n    return analyzedModules;\n  }\n\n  getTemplates(fileName: string): TemplateSources {\n    this.ensureTemplateMap();\n    const componentType = this.fileToComponent.get(fileName);\n    if (componentType) {\n      const templateSource = this.getTemplateAt(fileName, 0);\n      if (templateSource) {\n        return [templateSource];\n      }\n    } else {\n      let version = this.host.getScriptVersion(fileName);\n      let result: TemplateSource[] = [];\n\n      // Find each template string in the file\n      let visit = (child: ts.Node) => {\n        let templateSource = this.getSourceFromNode(fileName, version, child);\n        if (templateSource) {\n          result.push(templateSource);\n        } else {\n          ts.forEachChild(child, visit);\n        }\n      };\n\n      let sourceFile = this.getSourceFile(fileName);\n      if (sourceFile) {\n        this.context = sourceFile.path;\n        ts.forEachChild(sourceFile, visit);\n      }\n      return result.length ? result : undefined;\n    }\n  }\n\n  getDeclarations(fileName: string): Declarations {\n    const result: Declarations = [];\n    const sourceFile = this.getSourceFile(fileName);\n    if (sourceFile) {\n      let visit = (child: ts.Node) => {\n        let declaration = this.getDeclarationFromNode(sourceFile, child);\n        if (declaration) {\n          result.push(declaration);\n        } else {\n          ts.forEachChild(child, visit);\n        }\n      };\n      ts.forEachChild(sourceFile, visit);\n    }\n    return result;\n  }\n\n  getSourceFile(fileName: string): ts.SourceFile {\n    return this.tsService.getProgram().getSourceFile(fileName);\n  }\n\n  updateAnalyzedModules() {\n    this.validate();\n    if (this.modulesOutOfDate) {\n      this.analyzedModules = null;\n      this._reflector = null;\n      this._staticSymbolResolver = null;\n      this.templateReferences = null;\n      this.fileToComponent = null;\n      this.ensureAnalyzedModules();\n      this.modulesOutOfDate = false;\n    }\n  }\n\n  private get program() { return this.tsService.getProgram(); }\n\n  private get checker() {\n    let checker = this._checker;\n    if (!checker) {\n      checker = this._checker = this.program.getTypeChecker();\n    }\n    return checker;\n  }\n\n  private validate() {\n    const program = this.program;\n    if (this.lastProgram != program) {\n      this.clearCaches();\n      this.lastProgram = program;\n    }\n  }\n\n  private clearCaches() {\n    this._checker = null;\n    this._typeCache = [];\n    this._resolver = null;\n    this.collectedErrors = null;\n    this.modulesOutOfDate = true;\n  }\n\n  private ensureTemplateMap() {\n    if (!this.fileToComponent || !this.templateReferences) {\n      const fileToComponent = new Map<string, StaticSymbol>();\n      const templateReference: string[] = [];\n      const ngModuleSummary = this.getAnalyzedModules();\n      const urlResolver = createOfflineCompileUrlResolver();\n      for (const module of ngModuleSummary.ngModules) {\n        for (const directive of module.declaredDirectives) {\n          const {metadata, annotation} =\n              this.resolver.getNonNormalizedDirectiveMetadata(directive.reference);\n          if (metadata.isComponent && metadata.template && metadata.template.templateUrl) {\n            const templateName = urlResolver.resolve(\n                componentModuleUrl(this.reflector, directive.reference, annotation),\n                metadata.template.templateUrl);\n            fileToComponent.set(templateName, directive.reference);\n            templateReference.push(templateName);\n          }\n        }\n      }\n      this.fileToComponent = fileToComponent;\n      this.templateReferences = templateReference;\n    }\n  }\n\n  private getSourceFromDeclaration(\n      fileName: string, version: string, source: string, span: Span, type: StaticSymbol,\n      declaration: ts.ClassDeclaration, node: ts.Node, sourceFile: ts.SourceFile): TemplateSource\n      |undefined {\n    let queryCache: SymbolQuery|undefined = undefined;\n    const t = this;\n    if (declaration) {\n      return {\n        version,\n        source,\n        span,\n        type,\n        get members():\n            SymbolTable{const checker = t.checker; const program = t.program;\n                        const type = checker.getTypeAtLocation(declaration);\n                        return new TypeWrapper(type, {node, program, checker}).members();},\n        get query(): SymbolQuery{\n          if (!queryCache) {\n            queryCache = new TypeScriptSymbolQuery(t.program, t.checker, sourceFile, () => {\n              const pipes = t.service.getPipesAt(fileName, node.getStart());\n              const checker = t.checker;\n              const program = t.program;\n              return new PipesTable(pipes, {node, program, checker});\n            });\n          } return queryCache;\n        }\n      };\n    }\n  }\n\n  private getSourceFromNode(fileName: string, version: string, node: ts.Node): TemplateSource\n      |undefined {\n    let result: TemplateSource|undefined = undefined;\n    const t = this;\n    switch (node.kind) {\n      case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n      case ts.SyntaxKind.StringLiteral:\n        let [declaration, decorator] = this.getTemplateClassDeclFromNode(node);\n        let queryCache: SymbolQuery|undefined = undefined;\n        if (declaration && declaration.name) {\n          const sourceFile = this.getSourceFile(fileName);\n          return this.getSourceFromDeclaration(\n              fileName, version, this.stringOf(node), shrink(spanOf(node)),\n              this.reflector.getStaticSymbol(sourceFile.fileName, declaration.name.text),\n              declaration, node, sourceFile);\n        }\n        break;\n    }\n    return result;\n  }\n\n  private getSourceFromType(fileName: string, version: string, type: StaticSymbol): TemplateSource\n      |undefined {\n    let result: TemplateSource|undefined = undefined;\n    const declaration = this.getTemplateClassFromStaticSymbol(type);\n    if (declaration) {\n      const snapshot = this.host.getScriptSnapshot(fileName);\n      const source = snapshot.getText(0, snapshot.getLength());\n      result = this.getSourceFromDeclaration(\n          fileName, version, source, {start: 0, end: source.length}, type, declaration, declaration,\n          declaration.getSourceFile());\n    }\n    return result;\n  }\n\n  private get reflectorHost(): ReflectorHost {\n    let result = this._reflectorHost;\n    if (!result) {\n      if (!this.context) {\n        // Make up a context by finding the first script and using that as the base dir.\n        this.context = this.host.getScriptFileNames()[0];\n      }\n\n      // Use the file context's directory as the base directory.\n      // The host's getCurrentDirectory() is not reliable as it is always \"\" in\n      // tsserver. We don't need the exact base directory, just one that contains\n      // a source file.\n      const source = this.tsService.getProgram().getSourceFile(this.context);\n      if (!source) {\n        throw new Error('Internal error: no context could be determined');\n      }\n\n      const tsConfigPath = findTsConfig(source.fileName);\n      const basePath = path.dirname(tsConfigPath || this.context);\n\n      result = this._reflectorHost = new ReflectorHost(\n          () => this.tsService.getProgram(), this.host, {basePath, genDir: basePath});\n    }\n    return result;\n  }\n\n  private collectError(error: any, filePath: string) {\n    let errorMap = this.collectedErrors;\n    if (!errorMap) {\n      errorMap = this.collectedErrors = new Map();\n    }\n    let errors = errorMap.get(filePath);\n    if (!errors) {\n      errors = [];\n      this.collectedErrors.set(filePath, errors);\n    }\n    errors.push(error);\n  }\n\n  private get staticSymbolResolver(): StaticSymbolResolver {\n    let result = this._staticSymbolResolver;\n    if (!result) {\n      const summaryResolver = new AotSummaryResolver(\n          {\n            loadSummary(filePath: string) { return null; },\n            isSourceFile(sourceFilePath: string) { return true; },\n            getOutputFileName(sourceFilePath: string) { return null; }\n          },\n          this._staticSymbolCache);\n      result = this._staticSymbolResolver = new StaticSymbolResolver(\n          this.reflectorHost, this._staticSymbolCache, summaryResolver,\n          (e, filePath) => this.collectError(e, filePath));\n    }\n    return result;\n  }\n\n  private get reflector(): StaticReflector {\n    let result = this._reflector;\n    if (!result) {\n      result = this._reflector = new StaticReflector(\n          this.staticSymbolResolver, [], [], (e, filePath) => this.collectError(e, filePath));\n    }\n    return result;\n  }\n\n  private getTemplateClassFromStaticSymbol(type: StaticSymbol): ts.ClassDeclaration|undefined {\n    const source = this.getSourceFile(type.filePath);\n    if (source) {\n      const declarationNode = ts.forEachChild(source, child => {\n        if (child.kind === ts.SyntaxKind.ClassDeclaration) {\n          const classDeclaration = child as ts.ClassDeclaration;\n          if (classDeclaration.name.text === type.name) {\n            return classDeclaration;\n          }\n        }\n      });\n      return declarationNode as ts.ClassDeclaration;\n    }\n\n    return undefined;\n  }\n\n  private static missingTemplate = <[ts.ClassDeclaration, ts.Expression]>[];\n\n  /**\n   * Given a template string node, see if it is an Angular template string, and if so return the\n   * containing class.\n   */\n  private getTemplateClassDeclFromNode(currentToken: ts.Node):\n      [ts.ClassDeclaration, ts.Expression] {\n    // Verify we are in a 'template' property assignment, in an object literal, which is an call\n    // arg, in a decorator\n    let parentNode = currentToken.parent;  // PropertyAssignment\n    if (!parentNode) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n    if (parentNode.kind !== ts.SyntaxKind.PropertyAssignment) {\n      return TypeScriptServiceHost.missingTemplate;\n    } else {\n      // TODO: Is this different for a literal, i.e. a quoted property name like \"template\"?\n      if ((parentNode as any).name.text !== 'template') {\n        return TypeScriptServiceHost.missingTemplate;\n      }\n    }\n    parentNode = parentNode.parent;  // ObjectLiteralExpression\n    if (!parentNode || parentNode.kind !== ts.SyntaxKind.ObjectLiteralExpression) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n\n    parentNode = parentNode.parent;  // CallExpression\n    if (!parentNode || parentNode.kind !== ts.SyntaxKind.CallExpression) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n    const callTarget = (<ts.CallExpression>parentNode).expression;\n\n    let decorator = parentNode.parent;  // Decorator\n    if (!decorator || decorator.kind !== ts.SyntaxKind.Decorator) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n\n    let declaration = <ts.ClassDeclaration>decorator.parent;  // ClassDeclaration\n    if (!declaration || declaration.kind !== ts.SyntaxKind.ClassDeclaration) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n    return [declaration, callTarget];\n  }\n\n  private getCollectedErrors(defaultSpan: Span, sourceFile: ts.SourceFile): DeclarationError[] {\n    const errors = (this.collectedErrors && this.collectedErrors.get(sourceFile.fileName));\n    return (errors && errors.map((e: any) => {\n             return {message: e.message, span: spanAt(sourceFile, e.line, e.column) || defaultSpan};\n           })) ||\n        [];\n  }\n\n  private getDeclarationFromNode(sourceFile: ts.SourceFile, node: ts.Node): Declaration|undefined {\n    if (node.kind == ts.SyntaxKind.ClassDeclaration && node.decorators &&\n        (node as ts.ClassDeclaration).name) {\n      for (const decorator of node.decorators) {\n        if (decorator.expression && decorator.expression.kind == ts.SyntaxKind.CallExpression) {\n          const classDeclaration = node as ts.ClassDeclaration;\n          if (classDeclaration.name) {\n            const call = decorator.expression as ts.CallExpression;\n            const target = call.expression;\n            const type = this.checker.getTypeAtLocation(target);\n            if (type) {\n              const staticSymbol =\n                  this._reflector.getStaticSymbol(sourceFile.fileName, classDeclaration.name.text);\n              try {\n                if (this.resolver.isDirective(staticSymbol as any)) {\n                  const {metadata} =\n                      this.resolver.getNonNormalizedDirectiveMetadata(staticSymbol as any);\n                  const declarationSpan = spanOf(target);\n                  return {\n                    type: staticSymbol,\n                    declarationSpan,\n                    metadata,\n                    errors: this.getCollectedErrors(declarationSpan, sourceFile)\n                  };\n                }\n              } catch (e) {\n                if (e.message) {\n                  this.collectError(e, sourceFile.fileName);\n                  const declarationSpan = spanOf(target);\n                  return {\n                    type: staticSymbol,\n                    declarationSpan,\n                    errors: this.getCollectedErrors(declarationSpan, sourceFile)\n                  };\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private stringOf(node: ts.Node): string|undefined {\n    switch (node.kind) {\n      case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n        return (<ts.LiteralExpression>node).text;\n      case ts.SyntaxKind.StringLiteral:\n        return (<ts.StringLiteral>node).text;\n    }\n  }\n\n  private findNode(sourceFile: ts.SourceFile, position: number): ts.Node|undefined {\n    let _this = this;\n\n    function find(node: ts.Node): ts.Node|undefined {\n      if (position >= node.getStart() && position < node.getEnd()) {\n        return ts.forEachChild(node, find) || node;\n      }\n    }\n\n    return find(sourceFile);\n  }\n\n  private findLiteralType(kind: BuiltinType, context: TypeContext): Symbol {\n    const checker = this.checker;\n    let type: ts.Type;\n    switch (kind) {\n      case BuiltinType.Any:\n        type = checker.getTypeAtLocation(<ts.Node><any>{\n          kind: ts.SyntaxKind.AsExpression,\n          expression: <ts.Node>{kind: ts.SyntaxKind.TrueKeyword},\n          type: <ts.Node>{kind: ts.SyntaxKind.AnyKeyword}\n        });\n        break;\n      case BuiltinType.Boolean:\n        type = checker.getTypeAtLocation(<ts.Node>{kind: ts.SyntaxKind.TrueKeyword});\n        break;\n      case BuiltinType.Null:\n        type = checker.getTypeAtLocation(<ts.Node>{kind: ts.SyntaxKind.NullKeyword});\n        break;\n      case BuiltinType.Number:\n        type = checker.getTypeAtLocation(<ts.Node>{kind: ts.SyntaxKind.NumericLiteral});\n        break;\n      case BuiltinType.String:\n        type =\n            checker.getTypeAtLocation(<ts.Node>{kind: ts.SyntaxKind.NoSubstitutionTemplateLiteral});\n        break;\n      case BuiltinType.Undefined:\n        type = checker.getTypeAtLocation(<ts.Node>{kind: ts.SyntaxKind.VoidExpression});\n        break;\n      default:\n        throw new Error(`Internal error, unhandled literal kind ${kind}:${BuiltinType[kind]}`);\n    }\n    return new TypeWrapper(type, context);\n  }\n}\n\nclass TypeScriptSymbolQuery implements SymbolQuery {\n  private typeCache = new Map<BuiltinType, Symbol>();\n  private pipesCache: SymbolTable;\n\n  constructor(\n      private program: ts.Program, private checker: ts.TypeChecker, private source: ts.SourceFile,\n      private fetchPipes: () => SymbolTable) {}\n\n  getTypeKind(symbol: Symbol): BuiltinType { return typeKindOf(this.getTsTypeOf(symbol)); }\n\n  getBuiltinType(kind: BuiltinType): Symbol {\n    // TODO: Replace with typeChecker API when available.\n    let result = this.typeCache.get(kind);\n    if (!result) {\n      const type = getBuiltinTypeFromTs(\n          kind, {checker: this.checker, node: this.source, program: this.program});\n      result =\n          new TypeWrapper(type, {program: this.program, checker: this.checker, node: this.source});\n      this.typeCache.set(kind, result);\n    }\n    return result;\n  }\n\n  getTypeUnion(...types: Symbol[]): Symbol {\n    // TODO: Replace with typeChecker API when available\n    const checker = this.checker;\n\n    // No API exists so the cheat is to just return the last type any if no types are given.\n    return types.length ? types[types.length - 1] : this.getBuiltinType(BuiltinType.Any);\n  }\n\n  getArrayType(type: Symbol): Symbol {\n    // TODO: Replace with typeChecker API when available\n    return this.getBuiltinType(BuiltinType.Any);\n  }\n\n  getElementType(type: Symbol): Symbol {\n    if (type instanceof TypeWrapper) {\n      const elementType = getTypeParameterOf(type.tsType, 'Array');\n      if (elementType) {\n        return new TypeWrapper(elementType, type.context);\n      }\n    }\n  }\n\n  getNonNullableType(symbol: Symbol): Symbol {\n    // TODO: Replace with typeChecker API when available;\n    return symbol;\n  }\n\n  getPipes(): SymbolTable {\n    let result = this.pipesCache;\n    if (!result) {\n      result = this.pipesCache = this.fetchPipes();\n    }\n    return result;\n  }\n\n  getTemplateContext(type: StaticSymbol): SymbolTable {\n    const context: TypeContext = {node: this.source, program: this.program, checker: this.checker};\n    const typeSymbol = findClassSymbolInContext(type, context);\n    if (typeSymbol) {\n      const contextType = this.getTemplateRefContextType(typeSymbol);\n      if (contextType) return new SymbolWrapper(contextType, context).members();\n    }\n  }\n\n  getTypeSymbol(type: StaticSymbol): Symbol {\n    const context: TypeContext = {node: this.source, program: this.program, checker: this.checker};\n    const typeSymbol = findClassSymbolInContext(type, context);\n    return new SymbolWrapper(typeSymbol, context);\n  }\n\n  createSymbolTable(symbols: SymbolDeclaration[]): SymbolTable {\n    const result = new MapSymbolTable();\n    result.addAll(symbols.map(s => new DeclaredSymbol(s)));\n    return result;\n  }\n\n  mergeSymbolTable(symbolTables: SymbolTable[]): SymbolTable {\n    const result = new MapSymbolTable();\n    for (const symbolTable of symbolTables) {\n      result.addAll(symbolTable.values());\n    }\n    return result;\n  }\n\n  getSpanAt(line: number, column: number): Span { return spanAt(this.source, line, column); }\n\n  private getTemplateRefContextType(type: ts.Symbol): ts.Symbol {\n    const constructor = type.members['__constructor'];\n    if (constructor) {\n      const constructorDeclaration = constructor.declarations[0] as ts.ConstructorTypeNode;\n      for (const parameter of constructorDeclaration.parameters) {\n        const type = this.checker.getTypeAtLocation(parameter.type);\n        if (type.symbol.name == 'TemplateRef' && isReferenceType(type)) {\n          const typeReference = type as ts.TypeReference;\n          if (typeReference.typeArguments.length === 1) {\n            return typeReference.typeArguments[0].symbol;\n          }\n        }\n      };\n    }\n  }\n\n  private getTsTypeOf(symbol: Symbol): ts.Type {\n    const type = this.getTypeWrapper(symbol);\n    return type && type.tsType;\n  }\n\n  private getTypeWrapper(symbol: Symbol): TypeWrapper|undefined {\n    let type: TypeWrapper|undefined = undefined;\n    if (symbol instanceof TypeWrapper) {\n      type = symbol;\n    } else if (symbol.type instanceof TypeWrapper) {\n      type = symbol.type;\n    }\n    return type;\n  }\n}\n\ninterface TypeContext {\n  node: ts.Node;\n  program: ts.Program;\n  checker: ts.TypeChecker;\n}\n\nfunction typeCallable(type: ts.Type): boolean {\n  const signatures = type.getCallSignatures();\n  return signatures && signatures.length != 0;\n}\n\nfunction signaturesOf(type: ts.Type, context: TypeContext): Signature[] {\n  return type.getCallSignatures().map(s => new SignatureWrapper(s, context));\n}\n\nfunction selectSignature(type: ts.Type, context: TypeContext, types: Symbol[]): Signature|\n    undefined {\n  // TODO: Do a better job of selecting the right signature.\n  const signatures = type.getCallSignatures();\n  return signatures.length ? new SignatureWrapper(signatures[0], context) : undefined;\n}\n\nfunction toSymbolTable(symbols: ts.Symbol[]): ts.SymbolTable {\n  const result: ts.SymbolTable = <any>{};\n  for (const symbol of symbols) {\n    result[symbol.name] = symbol;\n  }\n  return result;\n}\n\nfunction toSymbols(symbolTable: ts.SymbolTable, filter?: (symbol: ts.Symbol) => boolean) {\n  const result: ts.Symbol[] = [];\n  const own = typeof symbolTable.hasOwnProperty === 'function' ?\n      (name: string) => symbolTable.hasOwnProperty(name) :\n      (name: string) => !!symbolTable[name];\n  for (const name in symbolTable) {\n    if (own(name) && (!filter || filter(symbolTable[name]))) {\n      result.push(symbolTable[name]);\n    }\n  }\n  return result;\n}\n\nclass TypeWrapper implements Symbol {\n  constructor(public tsType: ts.Type, public context: TypeContext) {\n    if (!tsType) {\n      throw Error('Internal: null type');\n    }\n  }\n\n  get name(): string {\n    const symbol = this.tsType.symbol;\n    return (symbol && symbol.name) || '<anonymous>';\n  }\n\n  get kind(): CompletionKind { return 'type'; }\n\n  get language(): string { return 'typescript'; }\n\n  get type(): Symbol|undefined { return undefined; }\n\n  get container(): Symbol|undefined { return undefined; }\n\n  get public(): boolean { return true; }\n\n  get callable(): boolean { return typeCallable(this.tsType); }\n\n  get definition(): Definition { return definitionFromTsSymbol(this.tsType.getSymbol()); }\n\n  members(): SymbolTable {\n    return new SymbolTableWrapper(this.tsType.getProperties(), this.context);\n  }\n\n  signatures(): Signature[] { return signaturesOf(this.tsType, this.context); }\n\n  selectSignature(types: Symbol[]): Signature|undefined {\n    return selectSignature(this.tsType, this.context, types);\n  }\n\n  indexed(argument: Symbol): Symbol|undefined { return undefined; }\n}\n\nclass SymbolWrapper implements Symbol {\n  private _tsType: ts.Type;\n\n  constructor(private symbol: ts.Symbol, private context: TypeContext) {}\n\n  get name(): string { return this.symbol.name; }\n\n  get kind(): CompletionKind { return this.callable ? 'method' : 'property'; }\n\n  get language(): string { return 'typescript'; }\n\n  get type(): Symbol|undefined { return new TypeWrapper(this.tsType, this.context); }\n\n  get container(): Symbol|undefined { return getContainerOf(this.symbol, this.context); }\n\n  get public(): boolean {\n    // Symbols that are not explicitly made private are public.\n    return !isSymbolPrivate(this.symbol);\n  }\n\n  get callable(): boolean { return typeCallable(this.tsType); }\n\n  get definition(): Definition { return definitionFromTsSymbol(this.symbol); }\n\n  members(): SymbolTable { return new SymbolTableWrapper(this.symbol.members, this.context); }\n\n  signatures(): Signature[] { return signaturesOf(this.tsType, this.context); }\n\n  selectSignature(types: Symbol[]): Signature|undefined {\n    return selectSignature(this.tsType, this.context, types);\n  }\n\n  indexed(argument: Symbol): Symbol|undefined { return undefined; }\n\n  private get tsType(): ts.Type {\n    let type = this._tsType;\n    if (!type) {\n      type = this._tsType =\n          this.context.checker.getTypeOfSymbolAtLocation(this.symbol, this.context.node);\n    }\n    return type;\n  }\n}\n\nclass DeclaredSymbol implements Symbol {\n  constructor(private declaration: SymbolDeclaration) {}\n\n  get name() { return this.declaration.name; }\n\n  get kind() { return this.declaration.kind; }\n\n  get language(): string { return 'ng-template'; }\n\n  get container(): Symbol|undefined { return undefined; }\n\n  get type() { return this.declaration.type; }\n\n  get callable(): boolean { return this.declaration.type.callable; }\n\n  get public(): boolean { return true; }\n\n  get definition(): Definition { return this.declaration.definition; }\n\n  members(): SymbolTable { return this.declaration.type.members(); }\n\n  signatures(): Signature[] { return this.declaration.type.signatures(); }\n\n  selectSignature(types: Symbol[]): Signature|undefined {\n    return this.declaration.type.selectSignature(types);\n  }\n\n  indexed(argument: Symbol): Symbol|undefined { return undefined; }\n}\n\nclass SignatureWrapper implements Signature {\n  constructor(private signature: ts.Signature, private context: TypeContext) {}\n\n  get arguments(): SymbolTable {\n    return new SymbolTableWrapper(this.signature.getParameters(), this.context);\n  }\n\n  get result(): Symbol { return new TypeWrapper(this.signature.getReturnType(), this.context); }\n}\n\nclass SignatureResultOverride implements Signature {\n  constructor(private signature: Signature, private resultType: Symbol) {}\n\n  get arguments(): SymbolTable { return this.signature.arguments; }\n\n  get result(): Symbol { return this.resultType; }\n}\n\nclass SymbolTableWrapper implements SymbolTable {\n  private symbols: ts.Symbol[];\n  private symbolTable: ts.SymbolTable;\n\n  constructor(\n      symbols: ts.SymbolTable|ts.Symbol[], private context: TypeContext,\n      filter?: (symbol: ts.Symbol) => boolean) {\n    if (Array.isArray(symbols)) {\n      this.symbols = filter ? symbols.filter(filter) : symbols;\n      this.symbolTable = toSymbolTable(symbols);\n    } else {\n      this.symbols = toSymbols(symbols, filter);\n      this.symbolTable = filter ? toSymbolTable(this.symbols) : symbols;\n    }\n  }\n\n  get size(): number { return this.symbols.length; }\n\n  get(key: string): Symbol|undefined {\n    const symbol = this.symbolTable[key];\n    return symbol ? new SymbolWrapper(symbol, this.context) : undefined;\n  }\n\n  has(key: string): boolean { return this.symbolTable[key] != null; }\n\n  values(): Symbol[] { return this.symbols.map(s => new SymbolWrapper(s, this.context)); }\n}\n\nclass MapSymbolTable implements SymbolTable {\n  private map = new Map<string, Symbol>();\n  private _values: Symbol[] = [];\n\n  get size(): number { return this.map.size; }\n\n  get(key: string): Symbol|undefined { return this.map.get(key); }\n\n  add(symbol: Symbol) {\n    if (this.map.has(symbol.name)) {\n      const previous = this.map.get(symbol.name);\n      this._values[this._values.indexOf(previous)] = symbol;\n    }\n    this.map.set(symbol.name, symbol);\n    this._values.push(symbol);\n  }\n\n  addAll(symbols: Symbol[]) {\n    for (const symbol of symbols) {\n      this.add(symbol);\n    }\n  }\n\n  has(key: string): boolean { return this.map.has(key); }\n\n  values(): Symbol[] {\n    // Switch to this.map.values once iterables are supported by the target language.\n    return this._values;\n  }\n}\n\nclass PipesTable implements SymbolTable {\n  constructor(private pipes: Pipes, private context: TypeContext) {}\n\n  get size() { return this.pipes.length; }\n\n  get(key: string): Symbol {\n    const pipe = this.pipes.find(pipe => pipe.name == key);\n    if (pipe) {\n      return new PipeSymbol(pipe, this.context);\n    }\n  }\n\n  has(key: string): boolean { return this.pipes.find(pipe => pipe.name == key) != null; }\n\n  values(): Symbol[] { return this.pipes.map(pipe => new PipeSymbol(pipe, this.context)); }\n}\n\nclass PipeSymbol implements Symbol {\n  private _tsType: ts.Type;\n\n  constructor(private pipe: PipeInfo, private context: TypeContext) {}\n\n  get name(): string { return this.pipe.name; }\n\n  get kind(): CompletionKind { return 'pipe'; }\n\n  get language(): string { return 'typescript'; }\n\n  get type(): Symbol|undefined { return new TypeWrapper(this.tsType, this.context); }\n\n  get container(): Symbol|undefined { return undefined; }\n\n  get callable(): boolean { return true; }\n\n  get public(): boolean { return true; }\n\n  get definition(): Definition { return definitionFromTsSymbol(this.tsType.getSymbol()); }\n\n  members(): SymbolTable { return EmptyTable.instance; }\n\n  signatures(): Signature[] { return signaturesOf(this.tsType, this.context); }\n\n  selectSignature(types: Symbol[]): Signature|undefined {\n    let signature = selectSignature(this.tsType, this.context, types);\n    if (types.length == 1) {\n      const parameterType = types[0];\n      if (parameterType instanceof TypeWrapper) {\n        let resultType: ts.Type = undefined;\n        switch (this.name) {\n          case 'async':\n            switch (parameterType.name) {\n              case 'Observable':\n              case 'Promise':\n              case 'EventEmitter':\n                resultType = getTypeParameterOf(parameterType.tsType, parameterType.name);\n                break;\n            }\n            break;\n          case 'slice':\n            resultType = getTypeParameterOf(parameterType.tsType, 'Array');\n            break;\n        }\n        if (resultType) {\n          signature = new SignatureResultOverride(\n              signature, new TypeWrapper(resultType, parameterType.context));\n        }\n      }\n    }\n    return signature;\n  }\n\n  indexed(argument: Symbol): Symbol|undefined { return undefined; }\n\n  private get tsType(): ts.Type {\n    let type = this._tsType;\n    if (!type) {\n      const classSymbol = this.findClassSymbol(this.pipe.symbol);\n      if (classSymbol) {\n        type = this._tsType = this.findTransformMethodType(classSymbol);\n      }\n      if (!type) {\n        type = this._tsType = getBuiltinTypeFromTs(BuiltinType.Any, this.context);\n      }\n    }\n    return type;\n  }\n\n  private findClassSymbol(type: StaticSymbol): ts.Symbol {\n    return findClassSymbolInContext(type, this.context);\n  }\n\n  private findTransformMethodType(classSymbol: ts.Symbol): ts.Type {\n    const transform = classSymbol.members['transform'];\n    if (transform) {\n      return this.context.checker.getTypeOfSymbolAtLocation(transform, this.context.node);\n    }\n  }\n}\n\nfunction findClassSymbolInContext(type: StaticSymbol, context: TypeContext): ts.Symbol {\n  const sourceFile = context.program.getSourceFile(type.filePath);\n  if (sourceFile) {\n    const moduleSymbol = (sourceFile as any).module || (sourceFile as any).symbol;\n    const exports = context.checker.getExportsOfModule(moduleSymbol);\n    return (exports || []).find(symbol => symbol.name == type.name);\n  }\n}\n\nclass EmptyTable implements SymbolTable {\n  get size(): number { return 0; }\n  get(key: string): Symbol|undefined { return undefined; }\n  has(key: string): boolean { return false; }\n  values(): Symbol[] { return []; }\n  static instance = new EmptyTable();\n}\n\nfunction findTsConfig(fileName: string): string {\n  let dir = path.dirname(fileName);\n  while (fs.existsSync(dir)) {\n    const candidate = path.join(dir, 'tsconfig.json');\n    if (fs.existsSync(candidate)) return candidate;\n    dir = path.dirname(dir);\n  }\n}\n\nfunction isBindingPattern(node: ts.Node): node is ts.BindingPattern {\n  return !!node && (node.kind === ts.SyntaxKind.ArrayBindingPattern ||\n                    node.kind === ts.SyntaxKind.ObjectBindingPattern);\n}\n\nfunction walkUpBindingElementsAndPatterns(node: ts.Node): ts.Node {\n  while (node && (node.kind === ts.SyntaxKind.BindingElement || isBindingPattern(node))) {\n    node = node.parent;\n  }\n\n  return node;\n}\n\nfunction getCombinedNodeFlags(node: ts.Node): ts.NodeFlags {\n  node = walkUpBindingElementsAndPatterns(node);\n\n  let flags = node.flags;\n  if (node.kind === ts.SyntaxKind.VariableDeclaration) {\n    node = node.parent;\n  }\n\n  if (node && node.kind === ts.SyntaxKind.VariableDeclarationList) {\n    flags |= node.flags;\n    node = node.parent;\n  }\n\n  if (node && node.kind === ts.SyntaxKind.VariableStatement) {\n    flags |= node.flags;\n  }\n\n  return flags;\n}\n\nfunction isSymbolPrivate(s: ts.Symbol): boolean {\n  return s.valueDeclaration && isPrivate(s.valueDeclaration);\n}\n\nfunction getBuiltinTypeFromTs(kind: BuiltinType, context: TypeContext): ts.Type {\n  let type: ts.Type;\n  const checker = context.checker;\n  const node = context.node;\n  switch (kind) {\n    case BuiltinType.Any:\n      type = checker.getTypeAtLocation(setParents(\n          <ts.Node><any>{\n            kind: ts.SyntaxKind.AsExpression,\n            expression: <ts.Node>{kind: ts.SyntaxKind.TrueKeyword},\n            type: <ts.Node>{kind: ts.SyntaxKind.AnyKeyword}\n          },\n          node));\n      break;\n    case BuiltinType.Boolean:\n      type =\n          checker.getTypeAtLocation(setParents(<ts.Node>{kind: ts.SyntaxKind.TrueKeyword}, node));\n      break;\n    case BuiltinType.Null:\n      type =\n          checker.getTypeAtLocation(setParents(<ts.Node>{kind: ts.SyntaxKind.NullKeyword}, node));\n      break;\n    case BuiltinType.Number:\n      const numeric = <ts.Node>{kind: ts.SyntaxKind.NumericLiteral};\n      setParents(<any>{kind: ts.SyntaxKind.ExpressionStatement, expression: numeric}, node);\n      type = checker.getTypeAtLocation(numeric);\n      break;\n    case BuiltinType.String:\n      type = checker.getTypeAtLocation(\n          setParents(<ts.Node>{kind: ts.SyntaxKind.NoSubstitutionTemplateLiteral}, node));\n      break;\n    case BuiltinType.Undefined:\n      type = checker.getTypeAtLocation(setParents(\n          <ts.Node><any>{\n            kind: ts.SyntaxKind.VoidExpression,\n            expression: <ts.Node>{kind: ts.SyntaxKind.NumericLiteral}\n          },\n          node));\n      break;\n    default:\n      throw new Error(`Internal error, unhandled literal kind ${kind}:${BuiltinType[kind]}`);\n  }\n  return type;\n}\n\nfunction setParents<T extends ts.Node>(node: T, parent: ts.Node): T {\n  node.parent = parent;\n  ts.forEachChild(node, child => setParents(child, node));\n  return node;\n}\n\nfunction spanOf(node: ts.Node): Span {\n  return {start: node.getStart(), end: node.getEnd()};\n}\n\nfunction shrink(span: Span, offset?: number) {\n  if (offset == null) offset = 1;\n  return {start: span.start + offset, end: span.end - offset};\n}\n\nfunction spanAt(sourceFile: ts.SourceFile, line: number, column: number): Span {\n  if (line != null && column != null) {\n    const position = ts.getPositionOfLineAndCharacter(sourceFile, line, column);\n    const findChild = function findChild(node: ts.Node): ts.Node {\n      if (node.kind > ts.SyntaxKind.LastToken && node.pos <= position && node.end > position) {\n        const betterNode = ts.forEachChild(node, findChild);\n        return betterNode || node;\n      }\n    };\n\n    const node = ts.forEachChild(sourceFile, findChild);\n    if (node) {\n      return {start: node.getStart(), end: node.getEnd()};\n    }\n  }\n}\n\nfunction definitionFromTsSymbol(symbol: ts.Symbol): Definition {\n  const declarations = symbol.declarations;\n  if (declarations) {\n    return declarations.map(declaration => {\n      const sourceFile = declaration.getSourceFile();\n      return {\n        fileName: sourceFile.fileName,\n        span: {start: declaration.getStart(), end: declaration.getEnd()}\n      };\n    });\n  }\n}\n\nfunction parentDeclarationOf(node: ts.Node): ts.Node {\n  while (node) {\n    switch (node.kind) {\n      case ts.SyntaxKind.ClassDeclaration:\n      case ts.SyntaxKind.InterfaceDeclaration:\n        return node;\n      case ts.SyntaxKind.SourceFile:\n        return null;\n    }\n    node = node.parent;\n  }\n}\n\nfunction getContainerOf(symbol: ts.Symbol, context: TypeContext): Symbol {\n  if (symbol.getFlags() & ts.SymbolFlags.ClassMember && symbol.declarations) {\n    for (const declaration of symbol.declarations) {\n      const parent = parentDeclarationOf(declaration);\n      if (parent) {\n        const type = context.checker.getTypeAtLocation(parent);\n        if (type) {\n          return new TypeWrapper(type, context);\n        }\n      }\n    }\n  }\n}\n\nfunction getTypeParameterOf(type: ts.Type, name: string): ts.Type {\n  if (type && type.symbol && type.symbol.name == name) {\n    const typeArguments: ts.Type[] = (type as any).typeArguments;\n    if (typeArguments && typeArguments.length <= 1) {\n      return typeArguments[0];\n    }\n  }\n}\n\nfunction typeKindOf(type: ts.Type): BuiltinType {\n  if (type) {\n    if (type.flags & ts.TypeFlags.Any) {\n      return BuiltinType.Any;\n    } else if (\n        type.flags & (ts.TypeFlags.String | ts.TypeFlags.StringLike | ts.TypeFlags.StringLiteral)) {\n      return BuiltinType.String;\n    } else if (type.flags & (ts.TypeFlags.Number | ts.TypeFlags.NumberLike)) {\n      return BuiltinType.Number;\n    } else if (type.flags & (ts.TypeFlags.Undefined)) {\n      return BuiltinType.Undefined;\n    } else if (type.flags & (ts.TypeFlags.Null)) {\n      return BuiltinType.Null;\n    } else if (type.flags & ts.TypeFlags.Union) {\n      // If all the constituent types of a union are the same kind, it is also that kind.\n      let candidate: BuiltinType;\n      const unionType = type as ts.UnionType;\n      if (unionType.types.length > 0) {\n        candidate = typeKindOf(unionType.types[0]);\n        for (const subType of unionType.types) {\n          if (candidate != typeKindOf(subType)) {\n            return BuiltinType.Other;\n          }\n        }\n      }\n      return candidate;\n    } else if (type.flags & ts.TypeFlags.TypeParameter) {\n      return BuiltinType.Unbound;\n    }\n  }\n  return BuiltinType.Other;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AngularCompilerOptions, AotCompilerHost, CompilerHost, ModuleResolutionHostAdapter} from '@angular/compiler-cli';\nimport * as ts from 'typescript';\n\nclass ReflectorModuleModuleResolutionHost implements ts.ModuleResolutionHost {\n  constructor(private host: ts.LanguageServiceHost) {\n    if (host.directoryExists)\n      this.directoryExists = directoryName => this.host.directoryExists(directoryName);\n  }\n\n  fileExists(fileName: string): boolean { return !!this.host.getScriptSnapshot(fileName); }\n\n  readFile(fileName: string): string {\n    let snapshot = this.host.getScriptSnapshot(fileName);\n    if (snapshot) {\n      return snapshot.getText(0, snapshot.getLength());\n    }\n  }\n\n  directoryExists: (directoryName: string) => boolean;\n}\n\nexport class ReflectorHost extends CompilerHost {\n  constructor(\n      private getProgram: () => ts.Program, serviceHost: ts.LanguageServiceHost,\n      options: AngularCompilerOptions) {\n    super(\n        null, options,\n        new ModuleResolutionHostAdapter(new ReflectorModuleModuleResolutionHost(serviceHost)),\n        {verboseInvalidExpression: true});\n  }\n\n  protected get program() { return this.getProgram(); }\n  protected set program(value: ts.Program) {\n    // Discard the result set by ancestor constructor\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileMetadataResolver, CompileNgModuleMetadata, CompilerConfig, DomElementSchemaRegistry, HtmlParser, I18NHtmlParser, Lexer, NgAnalyzedModules, Parser, TemplateParser} from '@angular/compiler';\n\nimport {AstResult, AttrInfo, TemplateInfo} from './common';\nimport {getTemplateCompletions} from './completions';\nimport {getDefinition} from './definitions';\nimport {getDeclarationDiagnostics, getTemplateDiagnostics} from './diagnostics';\nimport {getHover} from './hover';\nimport {Completion, CompletionKind, Completions, Declaration, Declarations, Definition, Diagnostic, DiagnosticKind, Diagnostics, Hover, LanguageService, LanguageServiceHost, Location, PipeInfo, Pipes, Signature, Span, Symbol, SymbolDeclaration, SymbolQuery, SymbolTable, TemplateSource, TemplateSources} from './types';\n\n\n/**\n * Create an instance of an Angular `LanguageService`.\n *\n * @experimental\n */\nexport function createLanguageService(host: LanguageServiceHost): LanguageService {\n  return new LanguageServiceImpl(host);\n}\n\nclass LanguageServiceImpl implements LanguageService {\n  constructor(private host: LanguageServiceHost) {}\n\n  private get metadataResolver(): CompileMetadataResolver { return this.host.resolver; }\n\n  getTemplateReferences(): string[] { return this.host.getTemplateReferences(); }\n\n  getDiagnostics(fileName: string): Diagnostics {\n    let results: Diagnostics = [];\n    let templates = this.host.getTemplates(fileName);\n    if (templates && templates.length) {\n      results.push(...getTemplateDiagnostics(fileName, this, templates));\n    }\n\n    let declarations = this.host.getDeclarations(fileName);\n    if (declarations && declarations.length) {\n      const summary = this.host.getAnalyzedModules();\n      results.push(...getDeclarationDiagnostics(declarations, summary));\n    }\n\n    return uniqueBySpan(results);\n  }\n\n  getPipesAt(fileName: string, position: number): Pipes {\n    let templateInfo = this.getTemplateAstAtPosition(fileName, position);\n    if (templateInfo) {\n      return templateInfo.pipes.map(\n          pipeInfo => ({name: pipeInfo.name, symbol: pipeInfo.type.reference}));\n    }\n  }\n\n  getCompletionsAt(fileName: string, position: number): Completions {\n    let templateInfo = this.getTemplateAstAtPosition(fileName, position);\n    if (templateInfo) {\n      return getTemplateCompletions(templateInfo);\n    }\n  }\n\n  getDefinitionAt(fileName: string, position: number): Definition {\n    let templateInfo = this.getTemplateAstAtPosition(fileName, position);\n    if (templateInfo) {\n      return getDefinition(templateInfo);\n    }\n  }\n\n  getHoverAt(fileName: string, position: number): Hover {\n    let templateInfo = this.getTemplateAstAtPosition(fileName, position);\n    if (templateInfo) {\n      return getHover(templateInfo);\n    }\n  }\n\n  private getTemplateAstAtPosition(fileName: string, position: number): TemplateInfo {\n    let template = this.host.getTemplateAt(fileName, position);\n    if (template) {\n      let astResult = this.getTemplateAst(template, fileName);\n      if (astResult && astResult.htmlAst && astResult.templateAst)\n        return {\n          position,\n          fileName,\n          template,\n          htmlAst: astResult.htmlAst,\n          directive: astResult.directive,\n          directives: astResult.directives,\n          pipes: astResult.pipes,\n          templateAst: astResult.templateAst,\n          expressionParser: astResult.expressionParser\n        };\n    }\n    return undefined;\n  }\n\n  getTemplateAst(template: TemplateSource, contextFile: string): AstResult {\n    let result: AstResult;\n    try {\n      const resolvedMetadata =\n          this.metadataResolver.getNonNormalizedDirectiveMetadata(template.type as any);\n      const metadata = resolvedMetadata && resolvedMetadata.metadata;\n      if (metadata) {\n        const rawHtmlParser = new HtmlParser();\n        const htmlParser = new I18NHtmlParser(rawHtmlParser);\n        const expressionParser = new Parser(new Lexer());\n        const config = new CompilerConfig();\n        const parser = new TemplateParser(\n            config, expressionParser, new DomElementSchemaRegistry(), htmlParser, null, []);\n        const htmlResult = htmlParser.parse(template.source, '');\n        const analyzedModules = this.host.getAnalyzedModules();\n        let errors: Diagnostic[] = undefined;\n        let ngModule = analyzedModules.ngModuleByPipeOrDirective.get(template.type);\n        if (!ngModule) {\n          // Reported by the the declaration diagnostics.\n          ngModule = findSuitableDefaultModule(analyzedModules);\n        }\n        if (ngModule) {\n          const resolvedDirectives = ngModule.transitiveModule.directives.map(\n              d => this.host.resolver.getNonNormalizedDirectiveMetadata(d.reference));\n          const directives =\n              resolvedDirectives.filter(d => d !== null).map(d => d.metadata.toSummary());\n          const pipes = ngModule.transitiveModule.pipes.map(\n              p => this.host.resolver.getOrLoadPipeMetadata(p.reference).toSummary());\n          const schemas = ngModule.schemas;\n          const parseResult = parser.tryParseHtml(\n              htmlResult, metadata, template.source, directives, pipes, schemas, '');\n          result = {\n            htmlAst: htmlResult.rootNodes,\n            templateAst: parseResult.templateAst,\n            directive: metadata, directives, pipes,\n            parseErrors: parseResult.errors, expressionParser, errors\n          };\n        }\n      }\n    } catch (e) {\n      let span = template.span;\n      if (e.fileName == contextFile) {\n        span = template.query.getSpanAt(e.line, e.column) || span;\n      }\n      result = {errors: [{kind: DiagnosticKind.Error, message: e.message, span}]};\n    }\n    return result;\n  }\n}\n\nfunction uniqueBySpan < T extends {\n  span: Span;\n}\n> (elements: T[] | undefined): T[]|undefined {\n  if (elements) {\n    const result: T[] = [];\n    const map = new Map<number, Set<number>>();\n    for (const element of elements) {\n      let span = element.span;\n      let set = map.get(span.start);\n      if (!set) {\n        set = new Set();\n        map.set(span.start, set);\n      }\n      if (!set.has(span.end)) {\n        set.add(span.end);\n        result.push(element);\n      }\n    }\n    return result;\n  }\n}\n\nfunction findSuitableDefaultModule(modules: NgAnalyzedModules): CompileNgModuleMetadata {\n  let result: CompileNgModuleMetadata;\n  let resultSize = 0;\n  for (const module of modules.ngModules) {\n    const moduleSize = module.transitiveModule.directives.length;\n    if (moduleSize > resultSize) {\n      result = module;\n      resultSize = moduleSize;\n    }\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplateInfo} from './common';\nimport {locateSymbol} from './locate_symbol';\nimport {Hover, HoverTextSection, Symbol} from './types';\n\nexport function getHover(info: TemplateInfo): Hover {\n  const result = locateSymbol(info);\n  if (result) {\n    return {text: hoverTextOf(result.symbol), span: result.span};\n  }\n}\n\nfunction hoverTextOf(symbol: Symbol): HoverTextSection[] {\n  const result: HoverTextSection[] =\n      [{text: symbol.kind}, {text: ' '}, {text: symbol.name, language: symbol.language}];\n  const container = symbol.container;\n  if (container) {\n    result.push({text: ' of '}, {text: container.name, language: container.language});\n  }\n  return result;\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AST, AttrAst, Attribute, BoundDirectivePropertyAst, BoundElementPropertyAst, BoundEventAst, BoundTextAst, CompileDirectiveMetadata, CompileDirectiveSummary, DirectiveAst, ElementAst, EmbeddedTemplateAst, NgAnalyzedModules, NgContentAst, ReferenceAst, StaticSymbol, TemplateAst, TemplateAstVisitor, TextAst, VariableAst, templateVisitAll} from '@angular/compiler';\n\nimport {AstResult, SelectorInfo, TemplateInfo} from './common';\nimport {getExpressionDiagnostics, getExpressionScope} from './expressions';\nimport {HtmlAstPath} from './html_path';\nimport {NullTemplateVisitor, TemplateAstChildVisitor, TemplateAstPath} from './template_path';\nimport {Declaration, Declarations, Diagnostic, DiagnosticKind, Diagnostics, Span, SymbolTable, TemplateSource} from './types';\nimport {getSelectors, hasTemplateReference, offsetSpan, spanOf} from './utils';\n\nexport interface AstProvider {\n  getTemplateAst(template: TemplateSource, fileName: string): AstResult;\n}\n\nexport function getTemplateDiagnostics(\n    fileName: string, astProvider: AstProvider, templates: TemplateSource[]): Diagnostics {\n  const results: Diagnostics = [];\n  for (const template of templates) {\n    const ast = astProvider.getTemplateAst(template, fileName);\n    if (ast) {\n      if (ast.parseErrors && ast.parseErrors.length) {\n        results.push(...ast.parseErrors.map<Diagnostic>(\n            e => ({\n              kind: DiagnosticKind.Error,\n              span: offsetSpan(spanOf(e.span), template.span.start),\n              message: e.msg\n            })));\n      } else if (ast.templateAst) {\n        const expressionDiagnostics = getTemplateExpressionDiagnostics(template, ast);\n        results.push(...expressionDiagnostics);\n      }\n      if (ast.errors) {\n        results.push(...ast.errors.map<Diagnostic>(\n            e => ({kind: e.kind, span: e.span || template.span, message: e.message})));\n      }\n    }\n  }\n  return results;\n}\n\nexport function getDeclarationDiagnostics(\n    declarations: Declarations, modules: NgAnalyzedModules): Diagnostics {\n  const results: Diagnostics = [];\n\n  let directives: Set<StaticSymbol>|undefined = undefined;\n  for (const declaration of declarations) {\n    const report = (message: string, span?: Span) => {\n      results.push(<Diagnostic>{\n        kind: DiagnosticKind.Error,\n        span: span || declaration.declarationSpan, message\n      });\n    };\n    for (const error of declaration.errors) {\n      report(error.message, error.span);\n    }\n    if (declaration.metadata) {\n      if (declaration.metadata.isComponent) {\n        if (!modules.ngModuleByPipeOrDirective.has(declaration.type)) {\n          report(\n              `Component '${declaration.type.name}' is not included in a module and will not be available inside a template. Consider adding it to a NgModule declaration`);\n        }\n        if (declaration.metadata.template.template == null &&\n            !declaration.metadata.template.templateUrl) {\n          report(`Component ${declaration.type.name} must have a template or templateUrl`);\n        }\n      } else {\n        if (!directives) {\n          directives = new Set();\n          modules.ngModules.forEach(module => {\n            module.declaredDirectives.forEach(\n                directive => { directives.add(directive.reference); });\n          });\n        }\n        if (!directives.has(declaration.type)) {\n          report(\n              `Directive '${declaration.type.name}' is not included in a module and will not be available inside a template. Consider adding it to a NgModule declaration`);\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction getTemplateExpressionDiagnostics(\n    template: TemplateSource, astResult: AstResult): Diagnostics {\n  const info: TemplateInfo = {\n    template,\n    htmlAst: astResult.htmlAst,\n    directive: astResult.directive,\n    directives: astResult.directives,\n    pipes: astResult.pipes,\n    templateAst: astResult.templateAst,\n    expressionParser: astResult.expressionParser\n  };\n  const visitor = new ExpressionDiagnosticsVisitor(\n      info, (path: TemplateAstPath, includeEvent: boolean) =>\n                getExpressionScope(info, path, includeEvent));\n  templateVisitAll(visitor, astResult.templateAst);\n  return visitor.diagnostics;\n}\n\nclass ExpressionDiagnosticsVisitor extends TemplateAstChildVisitor {\n  private path: TemplateAstPath;\n  private directiveSummary: CompileDirectiveSummary;\n\n  diagnostics: Diagnostics = [];\n\n  constructor(\n      private info: TemplateInfo,\n      private getExpressionScope: (path: TemplateAstPath, includeEvent: boolean) => SymbolTable) {\n    super();\n    this.path = new TemplateAstPath([], 0);\n  }\n\n  visitDirective(ast: DirectiveAst, context: any): any {\n    // Override the default child visitor to ignore the host properties of a directive.\n    if (ast.inputs && ast.inputs.length) {\n      templateVisitAll(this, ast.inputs, context);\n    }\n  }\n\n  visitBoundText(ast: BoundTextAst): void {\n    this.push(ast);\n    this.diagnoseExpression(ast.value, ast.sourceSpan.start.offset, false);\n    this.pop();\n  }\n\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst): void {\n    this.push(ast);\n    this.diagnoseExpression(ast.value, this.attributeValueLocation(ast), false);\n    this.pop();\n  }\n\n  visitElementProperty(ast: BoundElementPropertyAst): void {\n    this.push(ast);\n    this.diagnoseExpression(ast.value, this.attributeValueLocation(ast), false);\n    this.pop();\n  }\n\n  visitEvent(ast: BoundEventAst): void {\n    this.push(ast);\n    this.diagnoseExpression(ast.handler, this.attributeValueLocation(ast), true);\n    this.pop();\n  }\n\n  visitVariable(ast: VariableAst): void {\n    const directive = this.directiveSummary;\n    if (directive && ast.value) {\n      const context = this.info.template.query.getTemplateContext(directive.type.reference);\n      if (!context.has(ast.value)) {\n        if (ast.value === '$implicit') {\n          this.reportError(\n              'The template context does not have an implicit value', spanOf(ast.sourceSpan));\n        } else {\n          this.reportError(\n              `The template context does not defined a member called '${ast.value}'`,\n              spanOf(ast.sourceSpan));\n        }\n      }\n    }\n  }\n\n  visitElement(ast: ElementAst, context: any): void {\n    this.push(ast);\n    super.visitElement(ast, context);\n    this.pop();\n  }\n\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any {\n    const previousDirectiveSummary = this.directiveSummary;\n\n    this.push(ast);\n\n    // Find directive that refernces this template\n    this.directiveSummary =\n        ast.directives.map(d => d.directive).find(d => hasTemplateReference(d.type));\n\n    // Process children\n    super.visitEmbeddedTemplate(ast, context);\n\n    this.pop();\n\n    this.directiveSummary = previousDirectiveSummary;\n  }\n\n  private attributeValueLocation(ast: TemplateAst) {\n    const path = new HtmlAstPath(this.info.htmlAst, ast.sourceSpan.start.offset);\n    const last = path.tail;\n    if (last instanceof Attribute && last.valueSpan) {\n      // Add 1 for the quote.\n      return last.valueSpan.start.offset + 1;\n    }\n    return ast.sourceSpan.start.offset;\n  }\n\n  private diagnoseExpression(ast: AST, offset: number, includeEvent: boolean) {\n    const scope = this.getExpressionScope(this.path, includeEvent);\n    this.diagnostics.push(\n        ...getExpressionDiagnostics(scope, ast, this.info.template.query, {\n          event: includeEvent\n        }).map(d => ({\n                 span: offsetSpan(d.ast.span, offset + this.info.template.span.start),\n                 kind: d.kind,\n                 message: d.message\n               })));\n  }\n\n  private push(ast: TemplateAst) { this.path.push(ast); }\n\n  private pop() { this.path.pop(); }\n\n  private _selectors: SelectorInfo;\n  private selectors(): SelectorInfo {\n    let result = this._selectors;\n    if (!result) {\n      this._selectors = result = getSelectors(this.info);\n    }\n    return result;\n  }\n\n  private findElement(position: number): Element {\n    const htmlPath = new HtmlAstPath(this.info.htmlAst, position);\n    if (htmlPath.tail instanceof Element) {\n      return htmlPath.tail;\n    }\n  }\n\n  private reportError(message: string, span: Span) {\n    this.diagnostics.push({\n      span: offsetSpan(span, this.info.template.span.start),\n      kind: DiagnosticKind.Error, message\n    });\n  }\n\n  private reportWarning(message: string, span: Span) {\n    this.diagnostics.push({\n      span: offsetSpan(span, this.info.template.span.start),\n      kind: DiagnosticKind.Warning, message\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplateInfo} from './common';\nimport {locateSymbol} from './locate_symbol';\nimport {Definition} from './types';\n\nexport function getDefinition(info: TemplateInfo): Definition {\n  const result = locateSymbol(info);\n  return result && result.symbol.definition;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AST, Attribute, BoundDirectivePropertyAst, BoundEventAst, ElementAst, TemplateAst, tokenReference} from '@angular/compiler';\n\nimport {TemplateInfo} from './common';\nimport {getExpressionScope, getExpressionSymbol} from './expressions';\nimport {HtmlAstPath} from './html_path';\nimport {TemplateAstPath} from './template_path';\nimport {Definition, Location, Span, Symbol, SymbolTable} from './types';\nimport {inSpan, offsetSpan, spanOf} from './utils';\n\nexport interface SymbolInfo {\n  symbol: Symbol;\n  span: Span;\n}\n\nexport function locateSymbol(info: TemplateInfo): SymbolInfo {\n  const templatePosition = info.position - info.template.span.start;\n  const path = new TemplateAstPath(info.templateAst, templatePosition);\n  if (path.tail) {\n    let symbol: Symbol = undefined;\n    let span: Span = undefined;\n    const attributeValueSymbol = (ast: AST, inEvent: boolean = false): boolean => {\n      const attribute = findAttribute(info);\n      if (attribute) {\n        if (inSpan(templatePosition, spanOf(attribute.valueSpan))) {\n          const scope = getExpressionScope(info, path, inEvent);\n          const expressionOffset = attribute.valueSpan.start.offset + 1;\n          const result = getExpressionSymbol(\n              scope, ast, templatePosition - expressionOffset, info.template.query);\n          if (result) {\n            symbol = result.symbol;\n            span = offsetSpan(result.span, expressionOffset);\n          }\n          return true;\n        }\n      }\n      return false;\n    };\n    path.tail.visit(\n        {\n          visitNgContent(ast) {},\n          visitEmbeddedTemplate(ast) {},\n          visitElement(ast) {\n            const component = ast.directives.find(d => d.directive.isComponent);\n            if (component) {\n              symbol = info.template.query.getTypeSymbol(component.directive.type.reference);\n              symbol = symbol && new OverrideKindSymbol(symbol, 'component');\n              span = spanOf(ast);\n            } else {\n              // Find a directive that matches the element name\n              const directive =\n                  ast.directives.find(d => d.directive.selector.indexOf(ast.name) >= 0);\n              if (directive) {\n                symbol = info.template.query.getTypeSymbol(directive.directive.type.reference);\n                symbol = symbol && new OverrideKindSymbol(symbol, 'directive');\n                span = spanOf(ast);\n              }\n            }\n          },\n          visitReference(ast) {\n            symbol = info.template.query.getTypeSymbol(tokenReference(ast.value));\n            span = spanOf(ast);\n          },\n          visitVariable(ast) {},\n          visitEvent(ast) {\n            if (!attributeValueSymbol(ast.handler, /* inEvent */ true)) {\n              symbol = findOutputBinding(info, path, ast);\n              symbol = symbol && new OverrideKindSymbol(symbol, 'event');\n              span = spanOf(ast);\n            }\n          },\n          visitElementProperty(ast) { attributeValueSymbol(ast.value); },\n          visitAttr(ast) {},\n          visitBoundText(ast) {\n            const expressionPosition = templatePosition - ast.sourceSpan.start.offset;\n            if (inSpan(expressionPosition, ast.value.span)) {\n              const scope = getExpressionScope(info, path, /* includeEvent */ false);\n              const result =\n                  getExpressionSymbol(scope, ast.value, expressionPosition, info.template.query);\n              if (result) {\n                symbol = result.symbol;\n                span = offsetSpan(result.span, ast.sourceSpan.start.offset);\n              }\n            }\n          },\n          visitText(ast) {},\n          visitDirective(ast) {\n            symbol = info.template.query.getTypeSymbol(ast.directive.type.reference);\n            span = spanOf(ast);\n          },\n          visitDirectiveProperty(ast) {\n            if (!attributeValueSymbol(ast.value)) {\n              symbol = findInputBinding(info, path, ast);\n              span = spanOf(ast);\n            }\n          }\n        },\n        null);\n    if (symbol && span) {\n      return {symbol, span: offsetSpan(span, info.template.span.start)};\n    }\n  }\n}\n\nfunction findAttribute(info: TemplateInfo): Attribute {\n  const templatePosition = info.position - info.template.span.start;\n  const path = new HtmlAstPath(info.htmlAst, templatePosition);\n  return path.first(Attribute);\n}\n\nfunction findInputBinding(\n    info: TemplateInfo, path: TemplateAstPath, binding: BoundDirectivePropertyAst): Symbol {\n  const element = path.first(ElementAst);\n  if (element) {\n    for (const directive of element.directives) {\n      const invertedInput = invertMap(directive.directive.inputs);\n      const fieldName = invertedInput[binding.templateName];\n      if (fieldName) {\n        const classSymbol = info.template.query.getTypeSymbol(directive.directive.type.reference);\n        if (classSymbol) {\n          return classSymbol.members().get(fieldName);\n        }\n      }\n    }\n  }\n}\n\nfunction findOutputBinding(\n    info: TemplateInfo, path: TemplateAstPath, binding: BoundEventAst): Symbol {\n  const element = path.first(ElementAst);\n  if (element) {\n    for (const directive of element.directives) {\n      const invertedOutputs = invertMap(directive.directive.outputs);\n      const fieldName = invertedOutputs[binding.name];\n      if (fieldName) {\n        const classSymbol = info.template.query.getTypeSymbol(directive.directive.type.reference);\n        if (classSymbol) {\n          return classSymbol.members().get(fieldName);\n        }\n      }\n    }\n  }\n}\n\nfunction invertMap(obj: {[name: string]: string}): {[name: string]: string} {\n  const result: {[name: string]: string} = {};\n  for (const name of Object.keys(obj)) {\n    const v = obj[name];\n    result[v] = name;\n  }\n  return result;\n}\n\n/**\n * Wrap a symbol and change its kind to component.\n */\nclass OverrideKindSymbol implements Symbol {\n  constructor(private sym: Symbol, private kindOverride: string) {}\n\n  get name(): string { return this.sym.name; }\n\n  get kind(): string { return this.kindOverride; }\n\n  get language(): string { return this.sym.language; }\n\n  get type(): Symbol|undefined { return this.sym.type; }\n\n  get container(): Symbol|undefined { return this.sym.container; }\n\n  get public(): boolean { return this.sym.public; }\n\n  get callable(): boolean { return this.sym.callable; }\n\n  get definition(): Definition { return this.sym.definition; }\n\n  members() { return this.sym.members(); }\n\n  signatures() { return this.sym.signatures(); }\n\n  selectSignature(types: Symbol[]) { return this.sym.selectSignature(types); }\n\n  indexed(argument: Symbol) { return this.sym.indexed(argument); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AST, AttrAst, Attribute, BoundDirectivePropertyAst, BoundElementPropertyAst, BoundEventAst, BoundTextAst, CssSelector, DirectiveAst, Element, ElementAst, EmbeddedTemplateAst, ImplicitReceiver, NAMED_ENTITIES, NgContentAst, Node as HtmlAst, ParseSpan, PropertyRead, ReferenceAst, SelectorMatcher, TagContentType, TemplateAst, TemplateAstVisitor, Text, TextAst, VariableAst, getHtmlTagDefinition, splitNsName, templateVisitAll} from '@angular/compiler';\n\nimport {AstResult, AttrInfo, SelectorInfo, TemplateInfo} from './common';\nimport {getExpressionCompletions, getExpressionScope} from './expressions';\nimport {attributeNames, elementNames, eventNames, propertyNames} from './html_info';\nimport {HtmlAstPath} from './html_path';\nimport {NullTemplateVisitor, TemplateAstChildVisitor, TemplateAstPath} from './template_path';\nimport {BuiltinType, Completion, Completions, Span, Symbol, SymbolDeclaration, SymbolTable, TemplateSource} from './types';\nimport {flatten, getSelectors, hasTemplateReference, inSpan, removeSuffix, spanOf, uniqueByName} from './utils';\n\nconst TEMPLATE_ATTR_PREFIX = '*';\n\nconst hiddenHtmlElements = {\n  html: true,\n  script: true,\n  noscript: true,\n  base: true,\n  body: true,\n  title: true,\n  head: true,\n  link: true,\n};\n\nexport function getTemplateCompletions(templateInfo: TemplateInfo): Completions {\n  let result: Completions = undefined;\n  let {htmlAst, templateAst, template} = templateInfo;\n  // The templateNode starts at the delimiter character so we add 1 to skip it.\n  let templatePosition = templateInfo.position - template.span.start;\n  let path = new HtmlAstPath(htmlAst, templatePosition);\n  let mostSpecific = path.tail;\n  if (path.empty) {\n    result = elementCompletions(templateInfo, path);\n  } else {\n    let astPosition = templatePosition - mostSpecific.sourceSpan.start.offset;\n    mostSpecific.visit(\n        {\n          visitElement(ast) {\n            let startTagSpan = spanOf(ast.sourceSpan);\n            let tagLen = ast.name.length;\n            if (templatePosition <=\n                startTagSpan.start + tagLen + 1 /* 1 for the opening angle bracked */) {\n              // If we are in the tag then return the element completions.\n              result = elementCompletions(templateInfo, path);\n            } else if (templatePosition < startTagSpan.end) {\n              // We are in the attribute section of the element (but not in an attribute).\n              // Return the attribute completions.\n              result = attributeCompletions(templateInfo, path);\n            }\n          },\n          visitAttribute(ast) {\n            if (!ast.valueSpan || !inSpan(templatePosition, spanOf(ast.valueSpan))) {\n              // We are in the name of an attribute. Show attribute completions.\n              result = attributeCompletions(templateInfo, path);\n            } else if (ast.valueSpan && inSpan(templatePosition, spanOf(ast.valueSpan))) {\n              result = attributeValueCompletions(templateInfo, templatePosition, ast);\n            }\n          },\n          visitText(ast) {\n            // Check if we are in a entity.\n            result = entityCompletions(getSourceText(template, spanOf(ast)), astPosition);\n            if (result) return result;\n            result = interpolationCompletions(templateInfo, templatePosition);\n            if (result) return result;\n            let element = path.first(Element);\n            if (element) {\n              let definition = getHtmlTagDefinition(element.name);\n              if (definition.contentType === TagContentType.PARSABLE_DATA) {\n                result = voidElementAttributeCompletions(templateInfo, path);\n                if (!result) {\n                  // If the element can hold content Show element completions.\n                  result = elementCompletions(templateInfo, path);\n                }\n              }\n            } else {\n              // If no element container, implies parsable data so show elements.\n              result = voidElementAttributeCompletions(templateInfo, path);\n              if (!result) {\n                result = elementCompletions(templateInfo, path);\n              }\n            }\n          },\n          visitComment(ast) {},\n          visitExpansion(ast) {},\n          visitExpansionCase(ast) {}\n        },\n        null);\n  }\n  return result;\n}\n\nfunction attributeCompletions(info: TemplateInfo, path: HtmlAstPath): Completions {\n  let item = path.tail instanceof Element ? path.tail : path.parentOf(path.tail);\n  if (item instanceof Element) {\n    return attributeCompletionsForElement(info, item.name, item);\n  }\n  return undefined;\n}\n\nfunction attributeCompletionsForElement(\n    info: TemplateInfo, elementName: string, element?: Element): Completions {\n  const attributes = getAttributeInfosForElement(info, elementName, element);\n\n  // Map all the attributes to a completion\n  return attributes.map<Completion>(attr => ({\n                                      kind: attr.fromHtml ? 'html attribute' : 'attribute',\n                                      name: nameOfAttr(attr),\n                                      sort: attr.name\n                                    }));\n}\n\nfunction getAttributeInfosForElement(\n    info: TemplateInfo, elementName: string, element?: Element): AttrInfo[] {\n  let attributes: AttrInfo[] = [];\n\n  // Add html attributes\n  let htmlAttributes = attributeNames(elementName) || [];\n  if (htmlAttributes) {\n    attributes.push(...htmlAttributes.map<AttrInfo>(name => ({name, fromHtml: true})));\n  }\n\n  // Add html properties\n  let htmlProperties = propertyNames(elementName);\n  if (htmlProperties) {\n    attributes.push(...htmlProperties.map<AttrInfo>(name => ({name, input: true})));\n  }\n\n  // Add html events\n  let htmlEvents = eventNames(elementName);\n  if (htmlEvents) {\n    attributes.push(...htmlEvents.map<AttrInfo>(name => ({name, output: true})));\n  }\n\n  let {selectors, map: selectorMap} = getSelectors(info);\n  if (selectors && selectors.length) {\n    // All the attributes that are selectable should be shown.\n    const applicableSelectors =\n        selectors.filter(selector => !selector.element || selector.element == elementName);\n    const selectorAndAttributeNames =\n        applicableSelectors.map(selector => ({selector, attrs: selector.attrs.filter(a => !!a)}));\n    let attrs = flatten(selectorAndAttributeNames.map<AttrInfo[]>(selectorAndAttr => {\n      const directive = selectorMap.get(selectorAndAttr.selector);\n      const result = selectorAndAttr.attrs.map<AttrInfo>(\n          name => ({name, input: name in directive.inputs, output: name in directive.outputs}));\n      return result;\n    }));\n\n    // Add template attribute if a directive contains a template reference\n    selectorAndAttributeNames.forEach(selectorAndAttr => {\n      const selector = selectorAndAttr.selector;\n      const directive = selectorMap.get(selector);\n      if (directive && hasTemplateReference(directive.type) && selector.attrs.length &&\n          selector.attrs[0]) {\n        attrs.push({name: selector.attrs[0], template: true});\n      }\n    });\n\n    // All input and output properties of the matching directives should be added.\n    let elementSelector = element ?\n        createElementCssSelector(element) :\n        createElementCssSelector(new Element(elementName, [], [], undefined, undefined, undefined));\n\n    let matcher = new SelectorMatcher();\n    matcher.addSelectables(selectors);\n    matcher.match(elementSelector, selector => {\n      let directive = selectorMap.get(selector);\n      if (directive) {\n        attrs.push(...Object.keys(directive.inputs).map(name => ({name, input: true})));\n        attrs.push(...Object.keys(directive.outputs).map(name => ({name, output: true})));\n      }\n    });\n\n    // If a name shows up twice, fold it into a single value.\n    attrs = foldAttrs(attrs);\n\n    // Now expand them back out to ensure that input/output shows up as well as input and\n    // output.\n    attributes.push(...flatten(attrs.map(expandedAttr)));\n  }\n  return attributes;\n}\n\nfunction attributeValueCompletions(\n    info: TemplateInfo, position: number, attr: Attribute): Completions {\n  const path = new TemplateAstPath(info.templateAst, position);\n  const mostSpecific = path.tail;\n  if (mostSpecific) {\n    const visitor =\n        new ExpressionVisitor(info, position, attr, () => getExpressionScope(info, path, false));\n    mostSpecific.visit(visitor, null);\n    if (!visitor.result || !visitor.result.length) {\n      // Try allwoing widening the path\n      const widerPath = new TemplateAstPath(info.templateAst, position, /* allowWidening */ true);\n      if (widerPath.tail) {\n        const widerVisitor = new ExpressionVisitor(\n            info, position, attr, () => getExpressionScope(info, widerPath, false));\n        widerPath.tail.visit(widerVisitor, null);\n        return widerVisitor.result;\n      }\n    }\n    return visitor.result;\n  }\n}\n\nfunction elementCompletions(info: TemplateInfo, path: HtmlAstPath): Completions {\n  let htmlNames = elementNames().filter(name => !(name in hiddenHtmlElements));\n\n  // Collect the elements referenced by the selectors\n  let directiveElements =\n      getSelectors(info).selectors.map(selector => selector.element).filter(name => !!name);\n\n  let components =\n      directiveElements.map<Completion>(name => ({kind: 'component', name: name, sort: name}));\n  let htmlElements = htmlNames.map<Completion>(name => ({kind: 'element', name: name, sort: name}));\n\n  // Return components and html elements\n  return uniqueByName(htmlElements.concat(components));\n}\n\nfunction entityCompletions(value: string, position: number): Completions {\n  // Look for entity completions\n  const re = /&[A-Za-z]*;?(?!\\d)/g;\n  let found: RegExpExecArray|null;\n  let result: Completions;\n  while (found = re.exec(value)) {\n    let len = found[0].length;\n    if (position >= found.index && position < (found.index + len)) {\n      result = Object.keys(NAMED_ENTITIES)\n                   .map<Completion>(name => ({kind: 'entity', name: `&${name};`, sort: name}));\n      break;\n    }\n  }\n  return result;\n}\n\nfunction interpolationCompletions(info: TemplateInfo, position: number): Completions {\n  // Look for an interpolation in at the position.\n  const templatePath = new TemplateAstPath(info.templateAst, position);\n  const mostSpecific = templatePath.tail;\n  if (mostSpecific) {\n    let visitor = new ExpressionVisitor(\n        info, position, undefined, () => getExpressionScope(info, templatePath, false));\n    mostSpecific.visit(visitor, null);\n    return uniqueByName(visitor.result);\n  }\n}\n\n// There is a special case of HTML where text that contains a unclosed tag is treated as\n// text. For exaple '<h1> Some <a text </h1>' produces a text nodes inside of the H1\n// element \"Some <a text\". We, however, want to treat this as if the user was requesting\n// the attributes of an \"a\" element, not requesting completion in the a text element. This\n// code checks for this case and returns element completions if it is detected or undefined\n// if it is not.\nfunction voidElementAttributeCompletions(info: TemplateInfo, path: HtmlAstPath): Completions {\n  let tail = path.tail;\n  if (tail instanceof Text) {\n    let match = tail.value.match(/<(\\w(\\w|\\d|-)*:)?(\\w(\\w|\\d|-)*)\\s/);\n    // The position must be after the match, otherwise we are still in a place where elements\n    // are expected (such as `<|a` or `<a|`; we only want attributes for `<a |` or after).\n    if (match && path.position >= match.index + match[0].length + tail.sourceSpan.start.offset) {\n      return attributeCompletionsForElement(info, match[3]);\n    }\n  }\n}\n\nclass ExpressionVisitor extends NullTemplateVisitor {\n  result: Completions;\n\n  constructor(\n      private info: TemplateInfo, private position: number, private attr?: Attribute,\n      private getExpressionScope?: () => SymbolTable) {\n    super();\n    if (!getExpressionScope) {\n      this.getExpressionScope = () => info.template.members;\n    }\n  }\n\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst): void {\n    this.attributeValueCompletions(ast.value);\n  }\n\n  visitElementProperty(ast: BoundElementPropertyAst): void {\n    this.attributeValueCompletions(ast.value);\n  }\n\n  visitEvent(ast: BoundEventAst): void { this.attributeValueCompletions(ast.handler); }\n\n  visitElement(ast: ElementAst): void {\n    if (this.attr && getSelectors(this.info) && this.attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {\n      // The value is a template expression but the expression AST was not produced when the\n      // TemplateAst was produce so\n      // do that now.\n\n      const key = this.attr.name.substr(TEMPLATE_ATTR_PREFIX.length);\n\n      // Find the selector\n      const selectorInfo = getSelectors(this.info);\n      const selectors = selectorInfo.selectors;\n      const selector =\n          selectors.filter(s => s.attrs.some((attr, i) => i % 2 == 0 && attr == key))[0];\n\n      const templateBindingResult =\n          this.info.expressionParser.parseTemplateBindings(key, this.attr.value, null);\n\n      // find the template binding that contains the position\n      const valueRelativePosition = this.position - this.attr.valueSpan.start.offset - 1;\n      const bindings = templateBindingResult.templateBindings;\n      const binding =\n          bindings.find(\n              binding => inSpan(valueRelativePosition, binding.span, /* exclusive */ true)) ||\n          bindings.find(binding => inSpan(valueRelativePosition, binding.span));\n\n      const keyCompletions = () => {\n        let keys: string[] = [];\n        if (selector) {\n          const attrNames = selector.attrs.filter((_, i) => i % 2 == 0);\n          keys = attrNames.filter(name => name.startsWith(key) && name != key)\n                     .map(name => lowerName(name.substr(key.length)));\n        }\n        keys.push('let');\n        this.result = keys.map(key => <Completion>{kind: 'key', name: key, sort: key});\n      };\n\n      if (!binding || (binding.key == key && !binding.expression)) {\n        // We are in the root binding. We should return `let` and keys that are left in the\n        // selector.\n        keyCompletions();\n      } else if (binding.keyIsVar) {\n        const equalLocation = this.attr.value.indexOf('=');\n        this.result = [];\n        if (equalLocation >= 0 && valueRelativePosition >= equalLocation) {\n          // We are after the '=' in a let clause. The valid values here are the members of the\n          // template reference's type parameter.\n          const directiveMetadata = selectorInfo.map.get(selector);\n          const contextTable =\n              this.info.template.query.getTemplateContext(directiveMetadata.type.reference);\n          if (contextTable) {\n            this.result = this.symbolsToCompletions(contextTable.values());\n          }\n        } else if (binding.key && valueRelativePosition <= (binding.key.length - key.length)) {\n          keyCompletions();\n        }\n      } else {\n        // If the position is in the expression or after the key or there is no key, return the\n        // expression completions\n        if ((binding.expression && inSpan(valueRelativePosition, binding.expression.ast.span)) ||\n            (binding.key &&\n             valueRelativePosition > binding.span.start + (binding.key.length - key.length)) ||\n            !binding.key) {\n          const span = new ParseSpan(0, this.attr.value.length);\n          this.attributeValueCompletions(\n              binding.expression ? binding.expression.ast :\n                                   new PropertyRead(span, new ImplicitReceiver(span), ''),\n              valueRelativePosition);\n        } else {\n          keyCompletions();\n        }\n      }\n    }\n  }\n\n  visitBoundText(ast: BoundTextAst) {\n    const expressionPosition = this.position - ast.sourceSpan.start.offset;\n    if (inSpan(expressionPosition, ast.value.span)) {\n      const completions = getExpressionCompletions(\n          this.getExpressionScope(), ast.value, expressionPosition, this.info.template.query);\n      if (completions) {\n        this.result = this.symbolsToCompletions(completions);\n      }\n    }\n  }\n\n  private attributeValueCompletions(value: AST, position?: number) {\n    const symbols = getExpressionCompletions(\n        this.getExpressionScope(), value, position == null ? this.attributeValuePosition : position,\n        this.info.template.query);\n    if (symbols) {\n      this.result = this.symbolsToCompletions(symbols);\n    }\n  }\n\n  private symbolsToCompletions(symbols: Symbol[]): Completions {\n    return symbols.filter(s => !s.name.startsWith('__') && s.public)\n        .map(symbol => <Completion>{kind: symbol.kind, name: symbol.name, sort: symbol.name});\n  }\n\n  private get attributeValuePosition() {\n    return this.position - this.attr.valueSpan.start.offset - 1;\n  }\n}\n\n\n\nfunction getSourceText(template: TemplateSource, span: Span): string {\n  return template.source.substring(span.start, span.end);\n}\n\nfunction nameOfAttr(attr: AttrInfo): string {\n  let name = attr.name;\n  if (attr.output) {\n    name = removeSuffix(name, 'Events');\n    name = removeSuffix(name, 'Changed');\n  }\n  let result = [name];\n  if (attr.input) {\n    result.unshift('[');\n    result.push(']');\n  }\n  if (attr.output) {\n    result.unshift('(');\n    result.push(')');\n  }\n  if (attr.template) {\n    result.unshift('*');\n  }\n  return result.join('');\n}\n\nconst templateAttr = /^(\\w+:)?(template$|^\\*)/;\nfunction createElementCssSelector(element: Element): CssSelector {\n  const cssSelector = new CssSelector();\n  let elNameNoNs = splitNsName(element.name)[1];\n\n  cssSelector.setElement(elNameNoNs);\n\n  for (let attr of element.attrs) {\n    if (!attr.name.match(templateAttr)) {\n      let [_, attrNameNoNs] = splitNsName(attr.name);\n      cssSelector.addAttribute(attrNameNoNs, attr.value);\n      if (attr.name.toLowerCase() == 'class') {\n        const classes = attr.value.split(/s+/g);\n        classes.forEach(className => cssSelector.addClassName(className));\n      }\n    }\n  }\n  return cssSelector;\n}\n\nfunction foldAttrs(attrs: AttrInfo[]): AttrInfo[] {\n  let inputOutput = new Map<string, AttrInfo>();\n  let templates = new Map<string, AttrInfo>();\n  let result: AttrInfo[] = [];\n  attrs.forEach(attr => {\n    if (attr.fromHtml) {\n      return attr;\n    }\n    if (attr.template) {\n      let duplicate = templates.get(attr.name);\n      if (!duplicate) {\n        result.push({name: attr.name, template: true});\n        templates.set(attr.name, attr);\n      }\n    }\n    if (attr.input || attr.output) {\n      let duplicate = inputOutput.get(attr.name);\n      if (duplicate) {\n        duplicate.input = duplicate.input || attr.input;\n        duplicate.output = duplicate.output || attr.output;\n      } else {\n        let cloneAttr: AttrInfo = {name: attr.name};\n        if (attr.input) cloneAttr.input = true;\n        if (attr.output) cloneAttr.output = true;\n        result.push(cloneAttr);\n        inputOutput.set(attr.name, cloneAttr);\n      }\n    }\n  });\n  return result;\n}\n\nfunction expandedAttr(attr: AttrInfo): AttrInfo[] {\n  if (attr.input && attr.output) {\n    return [\n      attr, {name: attr.name, input: true, output: false},\n      {name: attr.name, input: false, output: true}\n    ];\n  }\n  return [attr];\n}\n\nfunction lowerName(name: string): string {\n  return name && (name[0].toLowerCase() + name.substr(1));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, Comment, Element, Expansion, ExpansionCase, Node, Text, Visitor, visitAll} from '@angular/compiler';\n\nimport {AstPath} from './ast_path';\nimport {inSpan, spanOf} from './utils';\n\nexport class HtmlAstPath extends AstPath<Node> {\n  constructor(ast: Node[], public position: number) { super(buildPath(ast, position)); }\n}\n\nfunction buildPath(ast: Node[], position: number): Node[] {\n  let visitor = new HtmlAstPathBuilder(position);\n  visitAll(visitor, ast);\n  return visitor.getPath();\n}\n\nexport class ChildVisitor implements Visitor {\n  constructor(private visitor?: Visitor) {}\n\n  visitElement(ast: Element, context: any): any {\n    this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.children);\n    });\n  }\n\n  visitAttribute(ast: Attribute, context: any): any {}\n  visitText(ast: Text, context: any): any {}\n  visitComment(ast: Comment, context: any): any {}\n\n  visitExpansion(ast: Expansion, context: any): any {\n    return this.visitChildren(context, visit => { visit(ast.cases); });\n  }\n\n  visitExpansionCase(ast: ExpansionCase, context: any): any {}\n\n  private visitChildren<T extends Node>(\n      context: any, cb: (visit: (<V extends Node>(children: V[]|undefined) => void)) => void) {\n    const visitor = this.visitor || this;\n    let results: any[][] = [];\n    function visit<T extends Node>(children: T[] | undefined) {\n      if (children) results.push(visitAll(visitor, children, context));\n    }\n    cb(visit);\n    return [].concat.apply([], results);\n  }\n}\n\nclass HtmlAstPathBuilder extends ChildVisitor {\n  private path: Node[] = [];\n\n  constructor(private position: number) { super(); }\n\n  visit(ast: Node, context: any): any {\n    let span = spanOf(ast);\n    if (inSpan(this.position, span)) {\n      this.path.push(ast);\n    } else {\n      // Returning a value here will result in the children being skipped.\n      return true;\n    }\n  }\n\n  getPath(): Node[] { return this.path; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Information about the HTML DOM elements\n\n// This section defines the HTML elements and attribute surface of HTML 4\n// which is derived from https://www.w3.org/TR/html4/strict.dtd\ntype attrType = string | string[];\ntype hash<T> = {\n  [name: string]: T\n};\n\nconst values: attrType[] = [\n  'ID',\n  'CDATA',\n  'NAME',\n  ['ltr', 'rtl'],\n  ['rect', 'circle', 'poly', 'default'],\n  'NUMBER',\n  ['nohref'],\n  ['ismap'],\n  ['declare'],\n  ['DATA', 'REF', 'OBJECT'],\n  ['GET', 'POST'],\n  'IDREF',\n  ['TEXT', 'PASSWORD', 'CHECKBOX', 'RADIO', 'SUBMIT', 'RESET', 'FILE', 'HIDDEN', 'IMAGE', 'BUTTON'],\n  ['checked'],\n  ['disabled'],\n  ['readonly'],\n  ['multiple'],\n  ['selected'],\n  ['button', 'submit', 'reset'],\n  ['void', 'above', 'below', 'hsides', 'lhs', 'rhs', 'vsides', 'box', 'border'],\n  ['none', 'groups', 'rows', 'cols', 'all'],\n  ['left', 'center', 'right', 'justify', 'char'],\n  ['top', 'middle', 'bottom', 'baseline'],\n  'IDREFS',\n  ['row', 'col', 'rowgroup', 'colgroup'],\n  ['defer']\n];\n\nconst groups: hash<number>[] = [\n  {id: 0},\n  {\n    onclick: 1,\n    ondblclick: 1,\n    onmousedown: 1,\n    onmouseup: 1,\n    onmouseover: 1,\n    onmousemove: 1,\n    onmouseout: 1,\n    onkeypress: 1,\n    onkeydown: 1,\n    onkeyup: 1\n  },\n  {lang: 2, dir: 3},\n  {onload: 1, onunload: 1},\n  {name: 1},\n  {href: 1},\n  {type: 1},\n  {alt: 1},\n  {tabindex: 5},\n  {media: 1},\n  {nohref: 6},\n  {usemap: 1},\n  {src: 1},\n  {onfocus: 1, onblur: 1},\n  {charset: 1},\n  {declare: 8, classid: 1, codebase: 1, data: 1, codetype: 1, archive: 1, standby: 1},\n  {title: 1},\n  {value: 1},\n  {cite: 1},\n  {datetime: 1},\n  {accept: 1},\n  {shape: 4, coords: 1},\n  { for: 11\n  },\n  {action: 1, method: 10, enctype: 1, onsubmit: 1, onreset: 1, 'accept-charset': 1},\n  {valuetype: 9},\n  {longdesc: 1},\n  {width: 1},\n  {disabled: 14},\n  {readonly: 15, onselect: 1},\n  {accesskey: 1},\n  {size: 5, multiple: 16},\n  {onchange: 1},\n  {label: 1},\n  {selected: 17},\n  {type: 12, checked: 13, size: 1, maxlength: 5},\n  {rows: 5, cols: 5},\n  {type: 18},\n  {height: 1},\n  {summary: 1, border: 1, frame: 19, rules: 20, cellspacing: 1, cellpadding: 1, datapagesize: 1},\n  {align: 21, char: 1, charoff: 1, valign: 22},\n  {span: 5},\n  {abbr: 1, axis: 1, headers: 23, scope: 24, rowspan: 5, colspan: 5},\n  {profile: 1},\n  {'http-equiv': 2, name: 2, content: 1, scheme: 1},\n  {class: 1, style: 1},\n  {hreflang: 2, rel: 1, rev: 1},\n  {ismap: 7},\n  { defer: 25, event: 1, for : 1 }\n];\n\nconst elements: {[name: string]: number[]} = {\n  TT: [0, 1, 2, 16, 44],\n  I: [0, 1, 2, 16, 44],\n  B: [0, 1, 2, 16, 44],\n  BIG: [0, 1, 2, 16, 44],\n  SMALL: [0, 1, 2, 16, 44],\n  EM: [0, 1, 2, 16, 44],\n  STRONG: [0, 1, 2, 16, 44],\n  DFN: [0, 1, 2, 16, 44],\n  CODE: [0, 1, 2, 16, 44],\n  SAMP: [0, 1, 2, 16, 44],\n  KBD: [0, 1, 2, 16, 44],\n  VAR: [0, 1, 2, 16, 44],\n  CITE: [0, 1, 2, 16, 44],\n  ABBR: [0, 1, 2, 16, 44],\n  ACRONYM: [0, 1, 2, 16, 44],\n  SUB: [0, 1, 2, 16, 44],\n  SUP: [0, 1, 2, 16, 44],\n  SPAN: [0, 1, 2, 16, 44],\n  BDO: [0, 2, 16, 44],\n  BR: [0, 16, 44],\n  BODY: [0, 1, 2, 3, 16, 44],\n  ADDRESS: [0, 1, 2, 16, 44],\n  DIV: [0, 1, 2, 16, 44],\n  A: [0, 1, 2, 4, 5, 6, 8, 13, 14, 16, 21, 29, 44, 45],\n  MAP: [0, 1, 2, 4, 16, 44],\n  AREA: [0, 1, 2, 5, 7, 8, 10, 13, 16, 21, 29, 44],\n  LINK: [0, 1, 2, 5, 6, 9, 14, 16, 44, 45],\n  IMG: [0, 1, 2, 4, 7, 11, 12, 16, 25, 26, 37, 44, 46],\n  OBJECT: [0, 1, 2, 4, 6, 8, 11, 15, 16, 26, 37, 44],\n  PARAM: [0, 4, 6, 17, 24],\n  HR: [0, 1, 2, 16, 44],\n  P: [0, 1, 2, 16, 44],\n  H1: [0, 1, 2, 16, 44],\n  H2: [0, 1, 2, 16, 44],\n  H3: [0, 1, 2, 16, 44],\n  H4: [0, 1, 2, 16, 44],\n  H5: [0, 1, 2, 16, 44],\n  H6: [0, 1, 2, 16, 44],\n  PRE: [0, 1, 2, 16, 44],\n  Q: [0, 1, 2, 16, 18, 44],\n  BLOCKQUOTE: [0, 1, 2, 16, 18, 44],\n  INS: [0, 1, 2, 16, 18, 19, 44],\n  DEL: [0, 1, 2, 16, 18, 19, 44],\n  DL: [0, 1, 2, 16, 44],\n  DT: [0, 1, 2, 16, 44],\n  DD: [0, 1, 2, 16, 44],\n  OL: [0, 1, 2, 16, 44],\n  UL: [0, 1, 2, 16, 44],\n  LI: [0, 1, 2, 16, 44],\n  FORM: [0, 1, 2, 4, 16, 20, 23, 44],\n  LABEL: [0, 1, 2, 13, 16, 22, 29, 44],\n  INPUT: [0, 1, 2, 4, 7, 8, 11, 12, 13, 16, 17, 20, 27, 28, 29, 31, 34, 44, 46],\n  SELECT: [0, 1, 2, 4, 8, 13, 16, 27, 30, 31, 44],\n  OPTGROUP: [0, 1, 2, 16, 27, 32, 44],\n  OPTION: [0, 1, 2, 16, 17, 27, 32, 33, 44],\n  TEXTAREA: [0, 1, 2, 4, 8, 13, 16, 27, 28, 29, 31, 35, 44],\n  FIELDSET: [0, 1, 2, 16, 44],\n  LEGEND: [0, 1, 2, 16, 29, 44],\n  BUTTON: [0, 1, 2, 4, 8, 13, 16, 17, 27, 29, 36, 44],\n  TABLE: [0, 1, 2, 16, 26, 38, 44],\n  CAPTION: [0, 1, 2, 16, 44],\n  COLGROUP: [0, 1, 2, 16, 26, 39, 40, 44],\n  COL: [0, 1, 2, 16, 26, 39, 40, 44],\n  THEAD: [0, 1, 2, 16, 39, 44],\n  TBODY: [0, 1, 2, 16, 39, 44],\n  TFOOT: [0, 1, 2, 16, 39, 44],\n  TR: [0, 1, 2, 16, 39, 44],\n  TH: [0, 1, 2, 16, 39, 41, 44],\n  TD: [0, 1, 2, 16, 39, 41, 44],\n  HEAD: [2, 42],\n  TITLE: [2],\n  BASE: [5],\n  META: [2, 43],\n  STYLE: [2, 6, 9, 16],\n  SCRIPT: [6, 12, 14, 47],\n  NOSCRIPT: [0, 1, 2, 16, 44],\n  HTML: [2]\n};\n\nconst defaultAttributes = [0, 1, 2, 4];\n\nexport function elementNames(): string[] {\n  return Object.keys(elements).sort().map(v => v.toLowerCase());\n}\n\nfunction compose(indexes: number[] | undefined): hash<attrType> {\n  const result: hash<attrType> = {};\n  if (indexes) {\n    for (let index of indexes) {\n      const group = groups[index];\n      for (let name in group)\n        if (group.hasOwnProperty(name)) result[name] = values[group[name]];\n    }\n  }\n  return result;\n}\n\nexport function attributeNames(element: string): string[] {\n  return Object.keys(compose(elements[element.toUpperCase()] || defaultAttributes)).sort();\n}\n\nexport function attributeType(element: string, attribute: string): string|string[]|undefined {\n  return compose(elements[element.toUpperCase()] || defaultAttributes)[attribute.toLowerCase()];\n}\n\n// This section is describes the DOM property surface of a DOM element and is dervided from\n// from the SCHEMA strings from the security context information. SCHEMA is copied here because\n// it would be an unnecessary risk to allow this array to be imported from the security context\n// schema registry.\n\nconst SCHEMA:\n    string[] =\n        [\n          '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop',\n          '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n          'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n          'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume',\n          ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',\n          ':svg:graphics^:svg:|',\n          ':svg:animation^:svg:|*begin,*end,*repeat',\n          ':svg:geometry^:svg:|',\n          ':svg:componentTransferFunction^:svg:|',\n          ':svg:gradient^:svg:|',\n          ':svg:textContent^:svg:graphics|',\n          ':svg:textPositioning^:svg:textContent|',\n          'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',\n          'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username',\n          'audio^media|',\n          'br^[HTMLElement]|clear',\n          'base^[HTMLElement]|href,target',\n          'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',\n          'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',\n          'canvas^[HTMLElement]|#height,#width',\n          'content^[HTMLElement]|select',\n          'dl^[HTMLElement]|!compact',\n          'datalist^[HTMLElement]|',\n          'details^[HTMLElement]|!open',\n          'dialog^[HTMLElement]|!open,returnValue',\n          'dir^[HTMLElement]|!compact',\n          'div^[HTMLElement]|align',\n          'embed^[HTMLElement]|align,height,name,src,type,width',\n          'fieldset^[HTMLElement]|!disabled,name',\n          'font^[HTMLElement]|color,face,size',\n          'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',\n          'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',\n          'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',\n          'hr^[HTMLElement]|align,color,!noShade,size,width',\n          'head^[HTMLElement]|',\n          'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',\n          'html^[HTMLElement]|version',\n          'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',\n          'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',\n          'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',\n          'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name',\n          'li^[HTMLElement]|type,#value',\n          'label^[HTMLElement]|htmlFor',\n          'legend^[HTMLElement]|align',\n          'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type',\n          'map^[HTMLElement]|name',\n          'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',\n          'menu^[HTMLElement]|!compact',\n          'meta^[HTMLElement]|content,httpEquiv,name,scheme',\n          'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',\n          'ins,del^[HTMLElement]|cite,dateTime',\n          'ol^[HTMLElement]|!compact,!reversed,#start,type',\n          'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',\n          'optgroup^[HTMLElement]|!disabled,label',\n          'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',\n          'output^[HTMLElement]|defaultValue,%htmlFor,name,value',\n          'p^[HTMLElement]|align',\n          'param^[HTMLElement]|name,type,value,valueType',\n          'picture^[HTMLElement]|',\n          'pre^[HTMLElement]|#width',\n          'progress^[HTMLElement]|#max,#value',\n          'q,blockquote,cite^[HTMLElement]|',\n          'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',\n          'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',\n          'shadow^[HTMLElement]|',\n          'source^[HTMLElement]|media,sizes,src,srcset,type',\n          'span^[HTMLElement]|',\n          'style^[HTMLElement]|!disabled,media,type',\n          'caption^[HTMLElement]|align',\n          'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',\n          'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',\n          'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',\n          'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',\n          'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',\n          'template^[HTMLElement]|',\n          'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',\n          'title^[HTMLElement]|text',\n          'track^[HTMLElement]|!default,kind,label,src,srclang',\n          'ul^[HTMLElement]|!compact,type',\n          'unknown^[HTMLElement]|',\n          'video^media|#height,poster,#width',\n          ':svg:a^:svg:graphics|',\n          ':svg:animate^:svg:animation|',\n          ':svg:animateMotion^:svg:animation|',\n          ':svg:animateTransform^:svg:animation|',\n          ':svg:circle^:svg:geometry|',\n          ':svg:clipPath^:svg:graphics|',\n          ':svg:cursor^:svg:|',\n          ':svg:defs^:svg:graphics|',\n          ':svg:desc^:svg:|',\n          ':svg:discard^:svg:|',\n          ':svg:ellipse^:svg:geometry|',\n          ':svg:feBlend^:svg:|',\n          ':svg:feColorMatrix^:svg:|',\n          ':svg:feComponentTransfer^:svg:|',\n          ':svg:feComposite^:svg:|',\n          ':svg:feConvolveMatrix^:svg:|',\n          ':svg:feDiffuseLighting^:svg:|',\n          ':svg:feDisplacementMap^:svg:|',\n          ':svg:feDistantLight^:svg:|',\n          ':svg:feDropShadow^:svg:|',\n          ':svg:feFlood^:svg:|',\n          ':svg:feFuncA^:svg:componentTransferFunction|',\n          ':svg:feFuncB^:svg:componentTransferFunction|',\n          ':svg:feFuncG^:svg:componentTransferFunction|',\n          ':svg:feFuncR^:svg:componentTransferFunction|',\n          ':svg:feGaussianBlur^:svg:|',\n          ':svg:feImage^:svg:|',\n          ':svg:feMerge^:svg:|',\n          ':svg:feMergeNode^:svg:|',\n          ':svg:feMorphology^:svg:|',\n          ':svg:feOffset^:svg:|',\n          ':svg:fePointLight^:svg:|',\n          ':svg:feSpecularLighting^:svg:|',\n          ':svg:feSpotLight^:svg:|',\n          ':svg:feTile^:svg:|',\n          ':svg:feTurbulence^:svg:|',\n          ':svg:filter^:svg:|',\n          ':svg:foreignObject^:svg:graphics|',\n          ':svg:g^:svg:graphics|',\n          ':svg:image^:svg:graphics|',\n          ':svg:line^:svg:geometry|',\n          ':svg:linearGradient^:svg:gradient|',\n          ':svg:mpath^:svg:|',\n          ':svg:marker^:svg:|',\n          ':svg:mask^:svg:|',\n          ':svg:metadata^:svg:|',\n          ':svg:path^:svg:geometry|',\n          ':svg:pattern^:svg:|',\n          ':svg:polygon^:svg:geometry|',\n          ':svg:polyline^:svg:geometry|',\n          ':svg:radialGradient^:svg:gradient|',\n          ':svg:rect^:svg:geometry|',\n          ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',\n          ':svg:script^:svg:|type',\n          ':svg:set^:svg:animation|',\n          ':svg:stop^:svg:|',\n          ':svg:style^:svg:|!disabled,media,title,type',\n          ':svg:switch^:svg:graphics|',\n          ':svg:symbol^:svg:|',\n          ':svg:tspan^:svg:textPositioning|',\n          ':svg:text^:svg:textPositioning|',\n          ':svg:textPath^:svg:textContent|',\n          ':svg:title^:svg:|',\n          ':svg:use^:svg:graphics|',\n          ':svg:view^:svg:|#zoomAndPan',\n          'data^[HTMLElement]|value',\n          'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',\n          'summary^[HTMLElement]|',\n          'time^[HTMLElement]|dateTime',\n        ];\n\nconst attrToPropMap: {[name: string]: string} = <any>{\n  'class': 'className',\n  'formaction': 'formAction',\n  'innerHtml': 'innerHTML',\n  'readonly': 'readOnly',\n  'tabindex': 'tabIndex'\n};\n\nconst EVENT = 'event';\nconst BOOLEAN = 'boolean';\nconst NUMBER = 'number';\nconst STRING = 'string';\nconst OBJECT = 'object';\n\nexport class SchemaInformation {\n  schema = <{[element: string]: {[property: string]: string}}>{};\n\n  constructor() {\n    SCHEMA.forEach(encodedType => {\n      const parts = encodedType.split('|');\n      const properties = parts[1].split(',');\n      const typeParts = (parts[0] + '^').split('^');\n      const typeName = typeParts[0];\n      const type = <{[property: string]: string}>{};\n      typeName.split(',').forEach(tag => this.schema[tag.toLowerCase()] = type);\n      const superName = typeParts[1];\n      const superType = superName && this.schema[superName.toLowerCase()];\n      if (superType) {\n        for (const key in superType) {\n          type[key] = superType[key];\n        }\n      }\n      properties.forEach((property: string) => {\n        if (property == '') {\n        } else if (property.startsWith('*')) {\n          type[property.substring(1)] = EVENT;\n        } else if (property.startsWith('!')) {\n          type[property.substring(1)] = BOOLEAN;\n        } else if (property.startsWith('#')) {\n          type[property.substring(1)] = NUMBER;\n        } else if (property.startsWith('%')) {\n          type[property.substring(1)] = OBJECT;\n        } else {\n          type[property] = STRING;\n        }\n      });\n    });\n  }\n\n  allKnownElements(): string[] { return Object.keys(this.schema); }\n\n  eventsOf(elementName: string): string[] {\n    const elementType = this.schema[elementName.toLowerCase()] || {};\n    return Object.keys(elementType).filter(property => elementType[property] === EVENT);\n  }\n\n  propertiesOf(elementName: string): string[] {\n    const elementType = this.schema[elementName.toLowerCase()] || {};\n    return Object.keys(elementType).filter(property => elementType[property] !== EVENT);\n  }\n\n  typeOf(elementName: string, property: string): string {\n    return (this.schema[elementName.toLowerCase()] || {})[property];\n  }\n\n  private static _instance: SchemaInformation;\n\n  static get instance(): SchemaInformation {\n    let result = SchemaInformation._instance;\n    if (!result) {\n      result = SchemaInformation._instance = new SchemaInformation();\n    }\n    return result;\n  }\n}\n\nexport function eventNames(elementName: string): string[] {\n  return SchemaInformation.instance.eventsOf(elementName);\n}\n\nexport function propertyNames(elementName: string): string[] {\n  return SchemaInformation.instance.propertiesOf(elementName);\n}\n\nexport function propertyType(elementName: string, propertyName: string): string {\n  return SchemaInformation.instance.typeOf(elementName, propertyName);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AST, ASTWithSource, AstVisitor, Binary, BindingPipe, Chain, Conditional, ElementAst, EmbeddedTemplateAst, FunctionCall, ImplicitReceiver, Interpolation, KeyedRead, KeyedWrite, LiteralArray, LiteralMap, LiteralPrimitive, MethodCall, PrefixNot, PropertyRead, PropertyWrite, Quote, ReferenceAst, SafeMethodCall, SafePropertyRead, StaticSymbol, TemplateAst, identifierName, templateVisitAll, tokenReference} from '@angular/compiler';\n\nimport {AstPath as AstPathBase} from './ast_path';\nimport {TemplateInfo} from './common';\nimport {TemplateAstChildVisitor, TemplateAstPath} from './template_path';\nimport {BuiltinType, CompletionKind, Definition, DiagnosticKind, Signature, Span, Symbol, SymbolDeclaration, SymbolQuery, SymbolTable} from './types';\nimport {inSpan, spanOf} from './utils';\n\nexport interface ExpressionDiagnosticsContext { event?: boolean; }\n\nexport function getExpressionDiagnostics(\n    scope: SymbolTable, ast: AST, query: SymbolQuery,\n    context: ExpressionDiagnosticsContext = {}): TypeDiagnostic[] {\n  const analyzer = new AstType(scope, query, context);\n  analyzer.getDiagnostics(ast);\n  return analyzer.diagnostics;\n}\n\nexport function getExpressionCompletions(\n    scope: SymbolTable, ast: AST, position: number, query: SymbolQuery): Symbol[] {\n  const path = new AstPath(ast, position);\n  if (path.empty) return undefined;\n  const tail = path.tail;\n  let result: SymbolTable|undefined = scope;\n\n  function getType(ast: AST): Symbol { return new AstType(scope, query, {}).getType(ast); }\n\n  // If the completion request is in a not in a pipe or property access then the global scope\n  // (that is the scope of the implicit receiver) is the right scope as the user is typing the\n  // beginning of an expression.\n  tail.visit({\n    visitBinary(ast) {},\n    visitChain(ast) {},\n    visitConditional(ast) {},\n    visitFunctionCall(ast) {},\n    visitImplicitReceiver(ast) {},\n    visitInterpolation(ast) { result = undefined; },\n    visitKeyedRead(ast) {},\n    visitKeyedWrite(ast) {},\n    visitLiteralArray(ast) {},\n    visitLiteralMap(ast) {},\n    visitLiteralPrimitive(ast) {},\n    visitMethodCall(ast) {},\n    visitPipe(ast) {\n      if (position >= ast.exp.span.end &&\n          (!ast.args || !ast.args.length || position < (<AST>ast.args[0]).span.start)) {\n        // We are in a position a pipe name is expected.\n        result = query.getPipes();\n      }\n    },\n    visitPrefixNot(ast) {},\n    visitPropertyRead(ast) {\n      const receiverType = getType(ast.receiver);\n      result = receiverType ? receiverType.members() : scope;\n    },\n    visitPropertyWrite(ast) {\n      const receiverType = getType(ast.receiver);\n      result = receiverType ? receiverType.members() : scope;\n    },\n    visitQuote(ast) {\n      // For a quote, return the members of any (if there are any).\n      result = query.getBuiltinType(BuiltinType.Any).members();\n    },\n    visitSafeMethodCall(ast) {\n      const receiverType = getType(ast.receiver);\n      result = receiverType ? receiverType.members() : scope;\n    },\n    visitSafePropertyRead(ast) {\n      const receiverType = getType(ast.receiver);\n      result = receiverType ? receiverType.members() : scope;\n    },\n  });\n\n  return result && result.values();\n}\n\nexport function getExpressionSymbol(\n    scope: SymbolTable, ast: AST, position: number,\n    query: SymbolQuery): {symbol: Symbol, span: Span} {\n  const path = new AstPath(ast, position, /* excludeEmpty */ true);\n  if (path.empty) return undefined;\n  const tail = path.tail;\n\n  function getType(ast: AST): Symbol { return new AstType(scope, query, {}).getType(ast); }\n\n  let symbol: Symbol = undefined;\n  let span: Span = undefined;\n\n  // If the completion request is in a not in a pipe or property access then the global scope\n  // (that is the scope of the implicit receiver) is the right scope as the user is typing the\n  // beginning of an expression.\n  tail.visit({\n    visitBinary(ast) {},\n    visitChain(ast) {},\n    visitConditional(ast) {},\n    visitFunctionCall(ast) {},\n    visitImplicitReceiver(ast) {},\n    visitInterpolation(ast) {},\n    visitKeyedRead(ast) {},\n    visitKeyedWrite(ast) {},\n    visitLiteralArray(ast) {},\n    visitLiteralMap(ast) {},\n    visitLiteralPrimitive(ast) {},\n    visitMethodCall(ast) {\n      const receiverType = getType(ast.receiver);\n      symbol = receiverType && receiverType.members().get(ast.name);\n      span = ast.span;\n    },\n    visitPipe(ast) {\n      if (position >= ast.exp.span.end &&\n          (!ast.args || !ast.args.length || position < (<AST>ast.args[0]).span.start)) {\n        // We are in a position a pipe name is expected.\n        const pipes = query.getPipes();\n        if (pipes) {\n          symbol = pipes.get(ast.name);\n          span = ast.span;\n        }\n      }\n    },\n    visitPrefixNot(ast) {},\n    visitPropertyRead(ast) {\n      const receiverType = getType(ast.receiver);\n      symbol = receiverType && receiverType.members().get(ast.name);\n      span = ast.span;\n    },\n    visitPropertyWrite(ast) {\n      const receiverType = getType(ast.receiver);\n      symbol = receiverType && receiverType.members().get(ast.name);\n      span = ast.span;\n    },\n    visitQuote(ast) {},\n    visitSafeMethodCall(ast) {\n      const receiverType = getType(ast.receiver);\n      symbol = receiverType && receiverType.members().get(ast.name);\n      span = ast.span;\n    },\n    visitSafePropertyRead(ast) {\n      const receiverType = getType(ast.receiver);\n      symbol = receiverType && receiverType.members().get(ast.name);\n      span = ast.span;\n    },\n  });\n\n  if (symbol && span) {\n    return {symbol, span};\n  }\n}\n\ninterface ExpressionVisitor extends AstVisitor {\n  visit?(ast: AST, context?: any): any;\n}\n\n\n// Consider moving to expression_parser/ast\nclass NullVisitor implements ExpressionVisitor {\n  visitBinary(ast: Binary): void {}\n  visitChain(ast: Chain): void {}\n  visitConditional(ast: Conditional): void {}\n  visitFunctionCall(ast: FunctionCall): void {}\n  visitImplicitReceiver(ast: ImplicitReceiver): void {}\n  visitInterpolation(ast: Interpolation): void {}\n  visitKeyedRead(ast: KeyedRead): void {}\n  visitKeyedWrite(ast: KeyedWrite): void {}\n  visitLiteralArray(ast: LiteralArray): void {}\n  visitLiteralMap(ast: LiteralMap): void {}\n  visitLiteralPrimitive(ast: LiteralPrimitive): void {}\n  visitMethodCall(ast: MethodCall): void {}\n  visitPipe(ast: BindingPipe): void {}\n  visitPrefixNot(ast: PrefixNot): void {}\n  visitPropertyRead(ast: PropertyRead): void {}\n  visitPropertyWrite(ast: PropertyWrite): void {}\n  visitQuote(ast: Quote): void {}\n  visitSafeMethodCall(ast: SafeMethodCall): void {}\n  visitSafePropertyRead(ast: SafePropertyRead): void {}\n}\n\nexport class TypeDiagnostic {\n  constructor(public kind: DiagnosticKind, public message: string, public ast: AST) {}\n}\n\n// AstType calculatetype of the ast given AST element.\nclass AstType implements ExpressionVisitor {\n  public diagnostics: TypeDiagnostic[];\n\n  constructor(\n      private scope: SymbolTable, private query: SymbolQuery,\n      private context: ExpressionDiagnosticsContext) {}\n\n  getType(ast: AST): Symbol { return ast.visit(this); }\n\n  getDiagnostics(ast: AST): TypeDiagnostic[] {\n    this.diagnostics = [];\n    const type: Symbol = ast.visit(this);\n    if (this.context.event && type.callable) {\n      this.reportWarning('Unexpected callable expression. Expected a method call', ast);\n    }\n    return this.diagnostics;\n  }\n\n  visitBinary(ast: Binary): Symbol {\n    // Treat undefined and null as other.\n    function normalize(kind: BuiltinType, other: BuiltinType): BuiltinType {\n      switch (kind) {\n        case BuiltinType.Undefined:\n        case BuiltinType.Null:\n          return normalize(other, BuiltinType.Other);\n      }\n      return kind;\n    }\n\n    const leftType = this.getType(ast.left);\n    const rightType = this.getType(ast.right);\n    const leftRawKind = this.query.getTypeKind(leftType);\n    const rightRawKind = this.query.getTypeKind(rightType);\n    const leftKind = normalize(leftRawKind, rightRawKind);\n    const rightKind = normalize(rightRawKind, leftRawKind);\n\n    // The following swtich implements operator typing similar to the\n    // type production tables in the TypeScript specification.\n    // https://github.com/Microsoft/TypeScript/blob/v1.8.10/doc/spec.md#4.19\n    const operKind = leftKind << 8 | rightKind;\n    switch (ast.operation) {\n      case '*':\n      case '/':\n      case '%':\n      case '-':\n      case '<<':\n      case '>>':\n      case '>>>':\n      case '&':\n      case '^':\n      case '|':\n        switch (operKind) {\n          case BuiltinType.Any << 8 | BuiltinType.Any:\n          case BuiltinType.Number << 8 | BuiltinType.Any:\n          case BuiltinType.Any << 8 | BuiltinType.Number:\n          case BuiltinType.Number << 8 | BuiltinType.Number:\n            return this.query.getBuiltinType(BuiltinType.Number);\n          default:\n            let errorAst = ast.left;\n            switch (leftKind) {\n              case BuiltinType.Any:\n              case BuiltinType.Number:\n                errorAst = ast.right;\n                break;\n            }\n            return this.reportError('Expected a numeric type', errorAst);\n        }\n      case '+':\n        switch (operKind) {\n          case BuiltinType.Any << 8 | BuiltinType.Any:\n          case BuiltinType.Any << 8 | BuiltinType.Boolean:\n          case BuiltinType.Any << 8 | BuiltinType.Number:\n          case BuiltinType.Any << 8 | BuiltinType.Other:\n          case BuiltinType.Boolean << 8 | BuiltinType.Any:\n          case BuiltinType.Number << 8 | BuiltinType.Any:\n          case BuiltinType.Other << 8 | BuiltinType.Any:\n            return this.anyType;\n          case BuiltinType.Any << 8 | BuiltinType.String:\n          case BuiltinType.Boolean << 8 | BuiltinType.String:\n          case BuiltinType.Number << 8 | BuiltinType.String:\n          case BuiltinType.String << 8 | BuiltinType.Any:\n          case BuiltinType.String << 8 | BuiltinType.Boolean:\n          case BuiltinType.String << 8 | BuiltinType.Number:\n          case BuiltinType.String << 8 | BuiltinType.String:\n          case BuiltinType.String << 8 | BuiltinType.Other:\n          case BuiltinType.Other << 8 | BuiltinType.String:\n            return this.query.getBuiltinType(BuiltinType.String);\n          case BuiltinType.Number << 8 | BuiltinType.Number:\n            return this.query.getBuiltinType(BuiltinType.Number);\n          case BuiltinType.Boolean << 8 | BuiltinType.Number:\n          case BuiltinType.Other << 8 | BuiltinType.Number:\n            return this.reportError('Expected a number type', ast.left);\n          case BuiltinType.Number << 8 | BuiltinType.Boolean:\n          case BuiltinType.Number << 8 | BuiltinType.Other:\n            return this.reportError('Expected a number type', ast.right);\n          default:\n            return this.reportError('Expected operands to be a string or number type', ast);\n        }\n      case '>':\n      case '<':\n      case '<=':\n      case '>=':\n      case '==':\n      case '!=':\n      case '===':\n      case '!==':\n        switch (operKind) {\n          case BuiltinType.Any << 8 | BuiltinType.Any:\n          case BuiltinType.Any << 8 | BuiltinType.Boolean:\n          case BuiltinType.Any << 8 | BuiltinType.Number:\n          case BuiltinType.Any << 8 | BuiltinType.String:\n          case BuiltinType.Any << 8 | BuiltinType.Other:\n          case BuiltinType.Boolean << 8 | BuiltinType.Any:\n          case BuiltinType.Boolean << 8 | BuiltinType.Boolean:\n          case BuiltinType.Number << 8 | BuiltinType.Any:\n          case BuiltinType.Number << 8 | BuiltinType.Number:\n          case BuiltinType.String << 8 | BuiltinType.Any:\n          case BuiltinType.String << 8 | BuiltinType.String:\n          case BuiltinType.Other << 8 | BuiltinType.Any:\n          case BuiltinType.Other << 8 | BuiltinType.Other:\n            return this.query.getBuiltinType(BuiltinType.Boolean);\n          default:\n            return this.reportError('Expected the operants to be of similar type or any', ast);\n        }\n      case '&&':\n        return rightType;\n      case '||':\n        return this.query.getTypeUnion(leftType, rightType);\n    }\n\n    return this.reportError(`Unrecognized operator ${ast.operation}`, ast);\n  }\n\n  visitChain(ast: Chain) {\n    if (this.diagnostics) {\n      // If we are producing diagnostics, visit the children\n      visitChildren(ast, this);\n    }\n    // The type of a chain is always undefined.\n    return this.query.getBuiltinType(BuiltinType.Undefined);\n  }\n\n  visitConditional(ast: Conditional) {\n    // The type of a conditional is the union of the true and false conditions.\n    return this.query.getTypeUnion(this.getType(ast.trueExp), this.getType(ast.falseExp));\n  }\n\n  visitFunctionCall(ast: FunctionCall) {\n    // The type of a function call is the return type of the selected signature.\n    // The signature is selected based on the types of the arguments. Angular doesn't\n    // support contextual typing of arguments so this is simpler than TypeScript's\n    // version.\n    const args = ast.args.map(arg => this.getType(arg));\n    const target = this.getType(ast.target);\n    if (!target || !target.callable) return this.reportError('Call target is not callable', ast);\n    const signature = target.selectSignature(args);\n    if (signature) return signature.result;\n    // TODO: Consider a better error message here.\n    return this.reportError('Unable no compatible signature found for call', ast);\n  }\n\n  visitImplicitReceiver(ast: ImplicitReceiver): Symbol {\n    const _this = this;\n    // Return a pseudo-symbol for the implicit receiver.\n    // The members of the implicit receiver are what is defined by the\n    // scope passed into this class.\n    return {\n      name: '$implict',\n      kind: 'component',\n      language: 'ng-template',\n      type: undefined,\n      container: undefined,\n      callable: false,\n      public: true,\n      definition: undefined,\n      members(): SymbolTable{return _this.scope;},\n      signatures(): Signature[]{return [];},\n      selectSignature(types): Signature | undefined{return undefined;},\n      indexed(argument): Symbol | undefined{return undefined;}\n    };\n  }\n\n  visitInterpolation(ast: Interpolation): Symbol {\n    // If we are producing diagnostics, visit the children.\n    if (this.diagnostics) {\n      visitChildren(ast, this);\n    }\n    return this.undefinedType;\n  }\n\n  visitKeyedRead(ast: KeyedRead): Symbol {\n    const targetType = this.getType(ast.obj);\n    const keyType = this.getType(ast.key);\n    const result = targetType.indexed(keyType);\n    return result || this.anyType;\n  }\n\n  visitKeyedWrite(ast: KeyedWrite): Symbol {\n    // The write of a type is the type of the value being written.\n    return this.getType(ast.value);\n  }\n\n  visitLiteralArray(ast: LiteralArray): Symbol {\n    // A type literal is an array type of the union of the elements\n    return this.query.getArrayType(\n        this.query.getTypeUnion(...ast.expressions.map(element => this.getType(element))));\n  }\n\n  visitLiteralMap(ast: LiteralMap): Symbol {\n    // If we are producing diagnostics, visit the children\n    if (this.diagnostics) {\n      visitChildren(ast, this);\n    }\n    // TODO: Return a composite type.\n    return this.anyType;\n  }\n\n  visitLiteralPrimitive(ast: LiteralPrimitive) {\n    // The type of a literal primitive depends on the value of the literal.\n    switch (ast.value) {\n      case true:\n      case false:\n        return this.query.getBuiltinType(BuiltinType.Boolean);\n      case null:\n        return this.query.getBuiltinType(BuiltinType.Null);\n      case undefined:\n        return this.query.getBuiltinType(BuiltinType.Undefined);\n      default:\n        switch (typeof ast.value) {\n          case 'string':\n            return this.query.getBuiltinType(BuiltinType.String);\n          case 'number':\n            return this.query.getBuiltinType(BuiltinType.Number);\n          default:\n            return this.reportError('Unrecognized primitive', ast);\n        }\n    }\n  }\n\n  visitMethodCall(ast: MethodCall) {\n    return this.resolveMethodCall(this.getType(ast.receiver), ast);\n  }\n\n  visitPipe(ast: BindingPipe) {\n    // The type of a pipe node is the return type of the pipe's transform method. The table returned\n    // by getPipes() is expected to contain symbols with the corresponding transform method type.\n    const pipe = this.query.getPipes().get(ast.name);\n    if (!pipe) return this.reportError(`No pipe by the name ${pipe.name} found`, ast);\n    const expType = this.getType(ast.exp);\n    const signature =\n        pipe.selectSignature([expType].concat(ast.args.map(arg => this.getType(arg))));\n    if (!signature) return this.reportError('Unable to resolve signature for pipe invocation', ast);\n    return signature.result;\n  }\n\n  visitPrefixNot(ast: PrefixNot) {\n    // The type of a prefix ! is always boolean.\n    return this.query.getBuiltinType(BuiltinType.Boolean);\n  }\n\n  visitPropertyRead(ast: PropertyRead) {\n    return this.resolvePropertyRead(this.getType(ast.receiver), ast);\n  }\n\n  visitPropertyWrite(ast: PropertyWrite) {\n    // The type of a write is the type of the value being written.\n    return this.getType(ast.value);\n  }\n\n  visitQuote(ast: Quote) {\n    // The type of a quoted expression is any.\n    return this.query.getBuiltinType(BuiltinType.Any);\n  }\n\n  visitSafeMethodCall(ast: SafeMethodCall) {\n    return this.resolveMethodCall(this.query.getNonNullableType(this.getType(ast.receiver)), ast);\n  }\n\n  visitSafePropertyRead(ast: SafePropertyRead) {\n    return this.resolvePropertyRead(this.query.getNonNullableType(this.getType(ast.receiver)), ast);\n  }\n\n  private _anyType: Symbol;\n  private get anyType(): Symbol {\n    let result = this._anyType;\n    if (!result) {\n      result = this._anyType = this.query.getBuiltinType(BuiltinType.Any);\n    }\n    return result;\n  }\n\n  private _undefinedType: Symbol;\n  private get undefinedType(): Symbol {\n    let result = this._undefinedType;\n    if (!result) {\n      result = this._undefinedType = this.query.getBuiltinType(BuiltinType.Undefined);\n    }\n    return result;\n  }\n\n  private resolveMethodCall(receiverType: Symbol, ast: SafeMethodCall|MethodCall) {\n    if (this.isAny(receiverType)) {\n      return this.anyType;\n    }\n\n    // The type of a method is the selected methods result type.\n    const method = receiverType.members().get(ast.name);\n    if (!method) return this.reportError(`Unknown method ${ast.name}`, ast);\n    if (!method.type.callable) return this.reportError(`Member ${ast.name} is not callable`, ast);\n    const signature = method.type.selectSignature(ast.args.map(arg => this.getType(arg)));\n    if (!signature)\n      return this.reportError(`Unable to resolve signature for call of method ${ast.name}`, ast);\n    return signature.result;\n  }\n\n  private resolvePropertyRead(receiverType: Symbol, ast: SafePropertyRead|PropertyRead) {\n    if (this.isAny(receiverType)) {\n      return this.anyType;\n    }\n\n    // The type of a property read is the seelcted member's type.\n    const member = receiverType.members().get(ast.name);\n    if (!member) {\n      let receiverInfo = receiverType.name;\n      if (receiverInfo == '$implict') {\n        receiverInfo =\n            'The component declaration, template variable declarations, and element references do';\n      } else {\n        receiverInfo = `'${receiverInfo}' does`;\n      }\n      return this.reportError(\n          `Identifier '${ast.name}' is not defined. ${receiverInfo} not contain such a member`,\n          ast);\n    }\n    if (!member.public) {\n      let receiverInfo = receiverType.name;\n      if (receiverInfo == '$implict') {\n        receiverInfo = 'the component';\n      } else {\n        receiverInfo = `'${receiverInfo}'`;\n      }\n      this.reportWarning(\n          `Identifier '${ast.name}' refers to a private member of ${receiverInfo}`, ast);\n    }\n    return member.type;\n  }\n\n  private reportError(message: string, ast: AST): Symbol {\n    if (this.diagnostics) {\n      this.diagnostics.push(new TypeDiagnostic(DiagnosticKind.Error, message, ast));\n    }\n    return this.anyType;\n  }\n\n  private reportWarning(message: string, ast: AST): Symbol {\n    if (this.diagnostics) {\n      this.diagnostics.push(new TypeDiagnostic(DiagnosticKind.Warning, message, ast));\n    }\n    return this.anyType;\n  }\n\n  private isAny(symbol: Symbol): boolean {\n    return !symbol || this.query.getTypeKind(symbol) == BuiltinType.Any ||\n        (symbol.type && this.isAny(symbol.type));\n  }\n}\n\nclass AstPath extends AstPathBase<AST> {\n  constructor(ast: AST, public position: number, excludeEmpty: boolean = false) {\n    super(new AstPathVisitor(position, excludeEmpty).buildPath(ast).path);\n  }\n}\n\nclass AstPathVisitor extends NullVisitor {\n  public path: AST[] = [];\n\n  constructor(private position: number, private excludeEmpty: boolean) { super(); }\n\n  visit(ast: AST) {\n    if ((!this.excludeEmpty || ast.span.start < ast.span.end) && inSpan(this.position, ast.span)) {\n      this.path.push(ast);\n      visitChildren(ast, this);\n    }\n  }\n\n  buildPath(ast: AST): AstPathVisitor {\n    // We never care about the ASTWithSource node and its visit() method calls its ast's visit so\n    // the visit() method above would never see it.\n    if (ast instanceof ASTWithSource) {\n      ast = ast.ast;\n    }\n    this.visit(ast);\n    return this;\n  }\n}\n\n// TODO: Consider moving to expression_parser/ast\nfunction visitChildren(ast: AST, visitor: ExpressionVisitor) {\n  function visit(ast: AST) { visitor.visit && visitor.visit(ast) || ast.visit(visitor); }\n\n  function visitAll<T extends AST>(asts: T[]) { asts.forEach(visit); }\n\n  ast.visit({\n    visitBinary(ast) {\n      visit(ast.left);\n      visit(ast.right);\n    },\n    visitChain(ast) { visitAll(ast.expressions); },\n    visitConditional(ast) {\n      visit(ast.condition);\n      visit(ast.trueExp);\n      visit(ast.falseExp);\n    },\n    visitFunctionCall(ast) {\n      visit(ast.target);\n      visitAll(ast.args);\n    },\n    visitImplicitReceiver(ast) {},\n    visitInterpolation(ast) { visitAll(ast.expressions); },\n    visitKeyedRead(ast) {\n      visit(ast.obj);\n      visit(ast.key);\n    },\n    visitKeyedWrite(ast) {\n      visit(ast.obj);\n      visit(ast.key);\n      visit(ast.obj);\n    },\n    visitLiteralArray(ast) { visitAll(ast.expressions); },\n    visitLiteralMap(ast) {},\n    visitLiteralPrimitive(ast) {},\n    visitMethodCall(ast) {\n      visit(ast.receiver);\n      visitAll(ast.args);\n    },\n    visitPipe(ast) {\n      visit(ast.exp);\n      visitAll(ast.args);\n    },\n    visitPrefixNot(ast) { visit(ast.expression); },\n    visitPropertyRead(ast) { visit(ast.receiver); },\n    visitPropertyWrite(ast) {\n      visit(ast.receiver);\n      visit(ast.value);\n    },\n    visitQuote(ast) {},\n    visitSafeMethodCall(ast) {\n      visit(ast.receiver);\n      visitAll(ast.args);\n    },\n    visitSafePropertyRead(ast) { visit(ast.receiver); },\n  });\n}\n\nexport function getExpressionScope(\n    info: TemplateInfo, path: TemplateAstPath, includeEvent: boolean): SymbolTable {\n  let result = info.template.members;\n  const references = getReferences(info);\n  const variables = getVarDeclarations(info, path);\n  const events = getEventDeclaration(info, path, includeEvent);\n  if (references.length || variables.length || events.length) {\n    const referenceTable = info.template.query.createSymbolTable(references);\n    const variableTable = info.template.query.createSymbolTable(variables);\n    const eventsTable = info.template.query.createSymbolTable(events);\n    result =\n        info.template.query.mergeSymbolTable([result, referenceTable, variableTable, eventsTable]);\n  }\n  return result;\n}\n\nfunction getEventDeclaration(info: TemplateInfo, path: TemplateAstPath, includeEvent?: boolean) {\n  let result: SymbolDeclaration[] = [];\n  if (includeEvent) {\n    // TODO: Determine the type of the event parameter based on the Observable<T> or EventEmitter<T>\n    // of the event.\n    result = [{\n      name: '$event',\n      kind: 'variable',\n      type: info.template.query.getBuiltinType(BuiltinType.Any)\n    }];\n  }\n  return result;\n}\n\nfunction getReferences(info: TemplateInfo): SymbolDeclaration[] {\n  const result: SymbolDeclaration[] = [];\n\n  function processReferences(references: ReferenceAst[]) {\n    for (const reference of references) {\n      let type: Symbol;\n      if (reference.value) {\n        type = info.template.query.getTypeSymbol(tokenReference(reference.value));\n      }\n      result.push({\n        name: reference.name,\n        kind: 'reference',\n        type: type || info.template.query.getBuiltinType(BuiltinType.Any),\n        get definition() { return getDefintionOf(info, reference); }\n      });\n    }\n  }\n\n  const visitor = new class extends TemplateAstChildVisitor {\n    visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any {\n      super.visitEmbeddedTemplate(ast, context);\n      processReferences(ast.references);\n    }\n    visitElement(ast: ElementAst, context: any): any {\n      super.visitElement(ast, context);\n      processReferences(ast.references);\n    }\n  };\n\n  templateVisitAll(visitor, info.templateAst);\n\n  return result;\n}\n\nfunction getVarDeclarations(info: TemplateInfo, path: TemplateAstPath): SymbolDeclaration[] {\n  const result: SymbolDeclaration[] = [];\n\n  let current = path.tail;\n  while (current) {\n    if (current instanceof EmbeddedTemplateAst) {\n      for (const variable of current.variables) {\n        const name = variable.name;\n\n        // Find the first directive with a context.\n        const context =\n            current.directives\n                .map(d => info.template.query.getTemplateContext(d.directive.type.reference))\n                .find(c => !!c);\n\n        // Determine the type of the context field referenced by variable.value.\n        let type: Symbol;\n        if (context) {\n          const value = context.get(variable.value);\n          if (value) {\n            type = value.type;\n            let kind = info.template.query.getTypeKind(type);\n            if (kind === BuiltinType.Any || kind == BuiltinType.Unbound) {\n              // The any type is not very useful here. For special cases, such as ngFor, we can do\n              // better.\n              type = refinedVariableType(type, info, current);\n            }\n          }\n        }\n        if (!type) {\n          type = info.template.query.getBuiltinType(BuiltinType.Any);\n        }\n        result.push({\n          name,\n          kind: 'variable', type, get definition() { return getDefintionOf(info, variable); }\n        });\n      }\n    }\n    current = path.parentOf(current);\n  }\n\n  return result;\n}\n\nfunction refinedVariableType(\n    type: Symbol, info: TemplateInfo, templateElement: EmbeddedTemplateAst): Symbol {\n  // Special case the ngFor directive\n  const ngForDirective = templateElement.directives.find(d => {\n    const name = identifierName(d.directive.type);\n    return name == 'NgFor' || name == 'NgForOf';\n  });\n  if (ngForDirective) {\n    const ngForOfBinding = ngForDirective.inputs.find(i => i.directiveName == 'ngForOf');\n    if (ngForOfBinding) {\n      const bindingType =\n          new AstType(info.template.members, info.template.query, {}).getType(ngForOfBinding.value);\n      if (bindingType) {\n        return info.template.query.getElementType(bindingType);\n      }\n    }\n  }\n\n  // We can't do better, just return the original type.\n  return type;\n}\n\nfunction getDefintionOf(info: TemplateInfo, ast: TemplateAst): Definition {\n  if (info.fileName) {\n    const templateOffset = info.template.span.start;\n    return [{\n      fileName: info.fileName,\n      span: {\n        start: ast.sourceSpan.start.offset + templateOffset,\n        end: ast.sourceSpan.end.offset + templateOffset\n      }\n    }];\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompileMetadataResolver, NgAnalyzedModules, StaticSymbol} from '@angular/compiler';\n\n\n\n/**\n * The range of a span of text in a source file.\n *\n * @experimental\n */\nexport interface Span {\n  /**\n   * The first code-point of the span as an offset relative to the beginning of the source assuming\n   * a UTF-16 encoding.\n   */\n  start: number;\n\n  /**\n   * The first code-point after the span as an offset relative to the beginning of the source\n   * assuming a UTF-16 encoding.\n   */\n  end: number;\n}\n\n/**\n * The information `LanguageService` needs from the `LanguageServiceHost` to describe the content of\n * a template and the\n * langauge context the template is in.\n *\n * A host interface; see `LanguageSeriviceHost`.\n *\n * @experimental\n */\nexport interface TemplateSource {\n  /**\n   * The source of the template.\n   */\n  readonly source: string;\n\n  /**\n   * The version of the source. As files are modified the version should change. That is, if the\n   * `LanguageService` requesting\n   * template infomration for a source file and that file has changed since the last time the host\n   * was asked for the file then\n   * this version string should be different. No assumptions are made about the format of this\n   * string.\n   *\n   * The version can change more often than the source but should not change less often.\n   */\n  readonly version: string;\n\n  /**\n   * The span of the template within the source file.\n   */\n  readonly span: Span;\n\n  /**\n   * A static symbol for the template's component.\n   */\n  readonly type: StaticSymbol;\n\n  /**\n   * The `SymbolTable` for the members of the component.\n   */\n  readonly members: SymbolTable;\n\n  /**\n   * A `SymbolQuery` for the context of the template.\n   */\n  readonly query: SymbolQuery;\n}\n\n/**\n * A sequence of template sources.\n *\n * A host type; see `LanguageSeriviceHost`.\n *\n * @experimental\n */\nexport type TemplateSources = TemplateSource[] /* | undefined */;\n\n/**\n * Error information found getting declaration information\n *\n * A host type; see `LanagueServiceHost`.\n *\n * @experimental\n */\nexport interface DeclarationError {\n  /**\n   * The span of the error in the declaration's module.\n   */\n  readonly span: Span;\n\n  /**\n   * The message to display describing the error.\n   */\n  readonly message: string;\n}\n\n/**\n * Information about the component declarations.\n *\n * A file might contain a declaration without a template because the file contains only\n * templateUrl references. However, the compoennt declaration might contain errors that\n * need to be reported such as the template string is missing or the component is not\n * declared in a module. These error should be reported on the declaration, not the\n * template.\n *\n * A host type; see `LanguageSeriviceHost`.\n *\n * @experimental\n */\nexport interface Declaration {\n  /**\n   * The static symbol of the compponent being declared.\n   */\n  readonly type: StaticSymbol;\n\n  /**\n   * The span of the declaration annotation reference (e.g. the 'Component' or 'Directive'\n   * reference).\n   */\n  readonly declarationSpan: Span;\n\n  /**\n   * Reference to the compiler directive metadata for the declaration.\n   */\n  readonly metadata?: CompileDirectiveMetadata;\n\n  /**\n   * Error reported trying to get the metadata.\n   */\n  readonly errors: DeclarationError[];\n}\n\n/**\n * A sequence of declarations.\n *\n * A host type; see `LanguageSeriviceHost`.\n *\n * @experimental\n */\nexport type Declarations = Declaration[];\n\n/**\n * An enumeration of basic types.\n *\n * A `LanguageServiceHost` interface.\n *\n * @experimental\n */\nexport enum BuiltinType {\n  /**\n   * The type is a type that can hold any other type.\n   */\n  Any,\n\n  /**\n   * The type of a string literal.\n   */\n  String,\n\n  /**\n   * The type of a numeric literal.\n   */\n  Number,\n\n  /**\n   * The type of the `true` and `false` literals.\n   */\n  Boolean,\n\n  /**\n   * The type of the `undefined` literal.\n   */\n  Undefined,\n\n  /**\n   * the type of the `null` literal.\n   */\n  Null,\n\n  /**\n   * the type is an unbound type parameter.\n   */\n  Unbound,\n\n  /**\n   * Not a built-in type.\n   */\n  Other\n}\n\n/**\n * A symbol describing a language element that can be referenced by expressions\n * in an Angular template.\n *\n * A `LanguageServiceHost` interface.\n *\n * @experimental\n */\nexport interface Symbol {\n  /**\n   * The name of the symbol as it would be referenced in an Angular expression.\n   */\n  readonly name: string;\n\n  /**\n   * The kind of completion this symbol should generate if included.\n   */\n  readonly kind: string;\n\n  /**\n   * The language of the source that defines the symbol. (e.g. typescript for TypeScript,\n   * ng-template for an Angular template, etc.)\n   */\n  readonly language: string;\n\n  /**\n   * A symbol representing type of the symbol.\n   */\n  readonly type: Symbol /* | undefined */;\n\n\n  /**\n   * A symbol for the container of this symbol. For example, if this is a method, the container\n   * is the class or interface of the method. If no container is appropriate, undefined is\n   * returned.\n   */\n  readonly container: Symbol /* | undefined */;\n\n  /**\n   * The symbol is public in the container.\n   */\n  readonly public: boolean;\n\n  /**\n   * `true` if the symbol can be the target of a call.\n   */\n  readonly callable: boolean;\n\n  /**\n   * The location of the definition of the symbol\n   */\n  readonly definition: Definition;\n  /**\n\n   * A table of the members of the symbol; that is, the members that can appear\n   * after a `.` in an Angular expression.\n   *\n   */\n  members(): SymbolTable;\n\n  /**\n   * The list of overloaded signatures that can be used if the symbol is the\n   * target of a call.\n   */\n  signatures(): Signature[];\n\n  /**\n   * Return which signature of returned by `signatures()` would be used selected\n   * given the `types` supplied. If no signature would match, this method should\n   * return `undefined`.\n   */\n  selectSignature(types: Symbol[]): Signature /* | undefined */;\n\n  /**\n   * Return the type of the expression if this symbol is indexed by `argument`.\n   * If the symbol cannot be indexed, this method should return `undefined`.\n   */\n  indexed(argument: Symbol): Symbol /* | undefined */;\n}\n\n/**\n * A table of `Symbol`s accessible by name.\n *\n * A `LanguageServiceHost` interface.\n *\n * @experimental\n */\nexport interface SymbolTable {\n  /**\n   * The number of symbols in the table.\n   */\n  readonly size: number;\n\n  /**\n   * Get the symbol corresponding to `key` or `undefined` if there is no symbol in the\n   * table by the name `key`.\n   */\n  get(key: string): Symbol /* | undefined */;\n\n  /**\n   * Returns `true` if the table contains a `Symbol` with the name `key`.\n   */\n  has(key: string): boolean;\n\n  /**\n   * Returns all the `Symbol`s in the table. The order should be, but is not required to be,\n   * in declaration order.\n   */\n  values(): Symbol[];\n}\n\n/**\n * A description of a function or method signature.\n *\n * A `LanguageServiceHost` interface.\n *\n * @experimental\n */\nexport interface Signature {\n  /**\n   * The arguments of the signture. The order of `argumetnts.symbols()` must be in the order\n   * of argument declaration.\n   */\n  readonly arguments: SymbolTable;\n\n  /**\n   * The symbol of the signature result type.\n   */\n  readonly result: Symbol;\n}\n\n/**\n * Describes the language context in which an Angular expression is evaluated.\n *\n * A `LanguageServiceHost` interface.\n *\n * @experimental\n */\nexport interface SymbolQuery {\n  /**\n   * Return the built-in type this symbol represents or Other if it is not a built-in type.\n   */\n  getTypeKind(symbol: Symbol): BuiltinType;\n\n  /**\n   * Return a symbol representing the given built-in type.\n   */\n  getBuiltinType(kind: BuiltinType): Symbol;\n\n  /**\n   * Return the symbol for a type that represents the union of all the types given. Any value\n   * of one of the types given should be assignable to the returned type. If no one type can\n   * be constructed then this should be the Any type.\n   */\n  getTypeUnion(...types: Symbol[]): Symbol;\n\n  /**\n   * Return a symbol for an array type that has the `type` as its element type.\n   */\n  getArrayType(type: Symbol): Symbol;\n\n  /**\n   * Return element type symbol for an array type if the `type` is an array type. Otherwise return\n   * undefined.\n   */\n  getElementType(type: Symbol): Symbol /* | undefined */;\n\n  /**\n   * Return a type that is the non-nullable version of the given type. If `type` is already\n   * non-nullable, return `type`.\n   */\n  getNonNullableType(type: Symbol): Symbol;\n\n  /**\n   * Return a symbol table for the pipes that are in scope.\n   */\n  getPipes(): SymbolTable;\n\n  /**\n   * Return the type symbol for the given static symbol.\n   */\n  getTypeSymbol(type: StaticSymbol): Symbol;\n\n  /**\n   * Return the members that are in the context of a type's template reference.\n   */\n  getTemplateContext(type: StaticSymbol): SymbolTable;\n\n  /**\n   * Produce a symbol table with the given symbols. Used to produce a symbol table\n   * for use with mergeSymbolTables().\n   */\n  createSymbolTable(symbols: SymbolDeclaration[]): SymbolTable;\n\n  /**\n   * Produce a merged symbol table. If the symbol tables contain duplicate entries\n   * the entries of the latter symbol tables will obscure the entries in the prior\n   * symbol tables.\n   *\n   * The symbol tables passed to this routine MUST be produces by the same instance\n   * of SymbolQuery that is being called.\n   */\n  mergeSymbolTable(symbolTables: SymbolTable[]): SymbolTable;\n\n  /**\n   * Return the span of the narrowest non-token node at the given location.\n   */\n  getSpanAt(line: number, column: number): Span /* | undefined */;\n}\n\n/**\n * The host for a `LanguageService`. This provides all the `LanguageService` requires to respond to\n * the `LanguageService` requests.\n *\n * This interface describes the requirements of the `LanguageService` on its host.\n *\n * The host interface is host language agnostic.\n *\n * Adding optional member to this interface or any interface that is described as a\n * `LanguageServiceHost`\n * interface is not considered a breaking change as defined by SemVer. Removing a method or changing\n * a\n * member from required to optional will also not be considered a breaking change.\n *\n * If a member is deprecated it will be changed to optional in a minor release before it is removed\n * in\n * a major release.\n *\n * Adding a required member or changing a method's parameters, is considered a breaking change and\n * will\n * only be done when breaking changes are allowed. When possible, a new optional member will be\n * added and\n * the old member will be deprecated. The new member will then be made required in and the old\n * member will\n * be removed only when breaking chnages are allowed.\n *\n * While an interface is marked as experimental breaking-changes will be allowed between minor\n * releases.\n * After an interface is marked as stable breaking-changes will only be allowed between major\n * releases.\n * No breaking changes are allowed between patch releases.\n *\n * @experimental\n */\nexport interface LanguageServiceHost {\n  /**\n   * The resolver to use to find compiler metadata.\n   */\n  readonly resolver: CompileMetadataResolver;\n\n  /**\n   * Returns the template information for templates in `fileName` at the given location. If\n   * `fileName`\n   * refers to a template file then the `position` should be ignored. If the `position` is not in a\n   * template literal string then this method should return `undefined`.\n   */\n  getTemplateAt(fileName: string, position: number): TemplateSource /* |undefined */;\n\n  /**\n   * Return the template source information for all templates in `fileName` or for `fileName` if it\n   * is\n   * a template file.\n   */\n  getTemplates(fileName: string): TemplateSources;\n\n  /**\n   * Returns the Angular declarations in the given file.\n   */\n  getDeclarations(fileName: string): Declarations;\n\n  /**\n   * Return a summary of all Angular modules in the project.\n   */\n  getAnalyzedModules(): NgAnalyzedModules;\n\n  /**\n   * Return a list all the template files referenced by the project.\n   */\n  getTemplateReferences(): string[];\n}\n\n/**\n * The kinds of completions generated by the language service.\n *\n * A 'LanguageService' interface.\n *\n * @experimental\n */\nexport type CompletionKind = 'attribute' | 'html attribute' | 'component' | 'element' | 'entity' |\n    'key' | 'method' | 'pipe' | 'property' | 'type' | 'reference' | 'variable';\n\n/**\n * An item of the completion result to be displayed by an editor.\n *\n * A `LanguageService` interface.\n *\n * @experimental\n */\nexport interface Completion {\n  /**\n   * The kind of comletion.\n   */\n  kind: CompletionKind;\n\n  /**\n   * The name of the completion to be displayed\n   */\n  name: string;\n\n  /**\n   * The key to use to sort the completions for display.\n   */\n  sort: string;\n}\n\n/**\n * A sequence of completions.\n *\n * @experimental\n */\nexport type Completions = Completion[] /* | undefined */;\n\n/**\n * A file and span.\n */\nexport interface Location {\n  fileName: string;\n  span: Span;\n}\n\n/**\n * A defnition location(s).\n */\nexport type Definition = Location[] /* | undefined */;\n\n/**\n * The kind of diagnostic message.\n *\n * @experimental\n */\nexport enum DiagnosticKind {\n  Error,\n  Warning,\n}\n\n/**\n * An template diagnostic message to display.\n *\n * @experimental\n */\nexport interface Diagnostic {\n  /**\n   * The kind of diagnostic message\n   */\n  kind: DiagnosticKind;\n\n  /**\n   * The source span that should be highlighted.\n   */\n  span: Span;\n\n  /**\n   * The text of the diagnostic message to display.\n   */\n  message: string;\n}\n\n/**\n * A sequence of diagnostic message.\n *\n * @experimental\n */\nexport type Diagnostics = Diagnostic[];\n\n/**\n * Information about the pipes that are available for use in a template.\n *\n * A `LanguageService` interface.\n *\n * @experimental\n */\nexport interface PipeInfo {\n  /**\n   * The name of the pipe.\n   */\n  name: string;\n\n  /**\n   * The static symbol for the pipe's constructor.\n   */\n  symbol: StaticSymbol;\n}\n\n/**\n * A sequence of pipe information.\n *\n * @experimental\n */\nexport type Pipes = PipeInfo[] /* | undefined */;\n\n/**\n * Describes a symbol to type binding used to build a symbol table.\n *\n * A `LanguageServiceHost` interface.\n *\n * @experimental\n */\n\nexport interface SymbolDeclaration {\n  /**\n   * The name of the symbol in table.\n   */\n  readonly name: string;\n\n  /**\n   * The kind of symbol to declare.\n   */\n  readonly kind: CompletionKind;\n\n  /**\n   * Type of the symbol. The type symbol should refer to a symbol for a type.\n   */\n  readonly type: Symbol;\n\n  /**\n   * The definion of the symbol if one exists.\n   */\n  readonly definition?: Definition;\n}\n\n/**\n * A section of hover text. If the text is code then langauge should be provided.\n * Otherwise the text is assumed to be Markdown text that will be sanitized.\n */\nexport interface HoverTextSection {\n  /**\n   * Source code or markdown text describing the symbol a the hover location.\n   */\n  readonly text: string;\n\n  /**\n   * The langauge of the source if `text` is a souce code fragment.\n   */\n  readonly language?: string;\n}\n\n/**\n * Hover infomration for a symbol at the hover location.\n */\nexport interface Hover {\n  /**\n   * The hover text to display for the symbol at the hover location. If the text includes\n   * source code, the section will specify which langauge it should be interpreted as.\n   */\n  readonly text: HoverTextSection[];\n\n  /**\n   * The span of source the hover covers.\n   */\n  readonly span: Span;\n}\n\n/**\n * An instance of an Angular language service created by `createLanguageService()`.\n *\n * The language service returns information about Angular templates that are included in a project\n * as\n * defined by the `LanguageServiceHost`.\n *\n * When a method expects a `fileName` this file can either be source file in the project that\n * contains\n * a template in a string literal or a template file referenced by the project returned by\n * `getTemplateReference()`. All other files will cause the method to return `undefined`.\n *\n * If a method takes a `position`, it is the offset of the UTF-16 code-point relative to the\n * beginning\n * of the file reference by `fileName`.\n *\n * This interface and all interfaces and types marked as `LanguageService` types, describe  a\n * particlar\n * implementation of the Angular language service and is not intented to be implemented. Adding\n * members\n * to the interface will not be considered a breaking change as defined by SemVer.\n *\n * Removing a member or making a member optional, changing a method parameters, or changing a\n * member's\n * type will all be considered a breaking change.\n *\n * While an interface is marked as experimental breaking-changes will be allowed between minor\n * releases.\n * After an interface is marked as stable breaking-changes will only be allowed between major\n * releases.\n * No breaking changes are allowed between patch releases.\n *\n * @experimental\n */\nexport interface LanguageService {\n  /**\n   * Returns a list of all the external templates referenced by the project.\n   */\n  getTemplateReferences(): string[] /* | undefined */;\n\n  /**\n   * Returns a list of all error for all templates in the given file.\n   */\n  getDiagnostics(fileName: string): Diagnostics /* | undefined */;\n\n  /**\n   * Return the completions at the given position.\n   */\n  getCompletionsAt(fileName: string, position: number): Completions /* | undefined */;\n\n  /**\n   * Return the definition location for the symbol at position.\n   */\n  getDefinitionAt(fileName: string, position: number): Definition /* | undefined */;\n\n  /**\n   * Return the hover information for the symbol at position.\n   */\n  getHoverAt(fileName: string, position: number): Hover /* | undefined */;\n\n  /**\n   * Return the pipes that are available at the given position.\n   */\n  getPipesAt(fileName: string, position: number): Pipes /* | undefined */;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AttrAst, BoundDirectivePropertyAst, BoundElementPropertyAst, BoundEventAst, BoundTextAst, DirectiveAst, ElementAst, EmbeddedTemplateAst, NgContentAst, ReferenceAst, TemplateAst, TemplateAstVisitor, TextAst, VariableAst, templateVisitAll} from '@angular/compiler';\n\nimport {AstPath} from './ast_path';\nimport {inSpan, isNarrower, spanOf} from './utils';\n\nexport class TemplateAstPath extends AstPath<TemplateAst> {\n  constructor(ast: TemplateAst[], public position: number, allowWidening: boolean = false) {\n    super(buildTemplatePath(ast, position, allowWidening));\n  }\n}\n\nfunction buildTemplatePath(\n    ast: TemplateAst[], position: number, allowWidening: boolean = false): TemplateAst[] {\n  const visitor = new TemplateAstPathBuilder(position, allowWidening);\n  templateVisitAll(visitor, ast);\n  return visitor.getPath();\n}\n\nexport class NullTemplateVisitor implements TemplateAstVisitor {\n  visitNgContent(ast: NgContentAst): void {}\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst): void {}\n  visitElement(ast: ElementAst): void {}\n  visitReference(ast: ReferenceAst): void {}\n  visitVariable(ast: VariableAst): void {}\n  visitEvent(ast: BoundEventAst): void {}\n  visitElementProperty(ast: BoundElementPropertyAst): void {}\n  visitAttr(ast: AttrAst): void {}\n  visitBoundText(ast: BoundTextAst): void {}\n  visitText(ast: TextAst): void {}\n  visitDirective(ast: DirectiveAst): void {}\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst): void {}\n}\n\nexport class TemplateAstChildVisitor implements TemplateAstVisitor {\n  constructor(private visitor?: TemplateAstVisitor) {}\n\n  // Nodes with children\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.references);\n      visit(ast.variables);\n      visit(ast.directives);\n      visit(ast.providers);\n      visit(ast.children);\n    });\n  }\n\n  visitElement(ast: ElementAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.inputs);\n      visit(ast.outputs);\n      visit(ast.references);\n      visit(ast.directives);\n      visit(ast.providers);\n      visit(ast.children);\n    });\n  }\n\n  visitDirective(ast: DirectiveAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      visit(ast.inputs);\n      visit(ast.hostProperties);\n      visit(ast.hostEvents);\n    });\n  }\n\n  // Terminal nodes\n  visitNgContent(ast: NgContentAst, context: any): any {}\n  visitReference(ast: ReferenceAst, context: any): any {}\n  visitVariable(ast: VariableAst, context: any): any {}\n  visitEvent(ast: BoundEventAst, context: any): any {}\n  visitElementProperty(ast: BoundElementPropertyAst, context: any): any {}\n  visitAttr(ast: AttrAst, context: any): any {}\n  visitBoundText(ast: BoundTextAst, context: any): any {}\n  visitText(ast: TextAst, context: any): any {}\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): any {}\n\n  protected visitChildren<T extends TemplateAst>(\n      context: any,\n      cb: (visit: (<V extends TemplateAst>(children: V[]|undefined) => void)) => void) {\n    const visitor = this.visitor || this;\n    let results: any[][] = [];\n    function visit<T extends TemplateAst>(children: T[] | undefined) {\n      if (children && children.length) results.push(templateVisitAll(visitor, children, context));\n    }\n    cb(visit);\n    return [].concat.apply([], results);\n  }\n}\n\nclass TemplateAstPathBuilder extends TemplateAstChildVisitor {\n  private path: TemplateAst[] = [];\n\n  constructor(private position: number, private allowWidening: boolean) { super(); }\n\n  visit(ast: TemplateAst, context: any): any {\n    let span = spanOf(ast);\n    if (inSpan(this.position, span)) {\n      const len = this.path.length;\n      if (!len || this.allowWidening || isNarrower(span, spanOf(this.path[len - 1]))) {\n        this.path.push(ast);\n      }\n    } else {\n      // Returning a value here will result in the children being skipped.\n      return true;\n    }\n  }\n\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      // Ignore reference, variable and providers\n      visit(ast.attrs);\n      visit(ast.directives);\n      visit(ast.children);\n    });\n  }\n\n  visitElement(ast: ElementAst, context: any): any {\n    return this.visitChildren(context, visit => {\n      // Ingnore providers\n      visit(ast.attrs);\n      visit(ast.inputs);\n      visit(ast.outputs);\n      visit(ast.references);\n      visit(ast.directives);\n      visit(ast.children);\n    });\n  }\n\n  visitDirective(ast: DirectiveAst, context: any): any {\n    // Ignore the host properties of a directive\n    const result = this.visitChildren(context, visit => { visit(ast.inputs); });\n    // We never care about the diretive itself, just its inputs.\n    if (this.path[this.path.length - 1] == ast) {\n      this.path.pop();\n    }\n    return result;\n  }\n\n  getPath() { return this.path; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveSummary, CompileTypeMetadata, CssSelector, ParseSourceSpan, SelectorMatcher, identifierName} from '@angular/compiler';\n\nimport {SelectorInfo, TemplateInfo} from './common';\nimport {Span} from './types';\n\nexport interface SpanHolder {\n  sourceSpan: ParseSourceSpan;\n  endSourceSpan?: ParseSourceSpan;\n  children?: SpanHolder[];\n}\n\nexport function isParseSourceSpan(value: any): value is ParseSourceSpan {\n  return value && !!value.start;\n}\n\nexport function spanOf(span?: SpanHolder | ParseSourceSpan): Span {\n  if (!span) return undefined;\n  if (isParseSourceSpan(span)) {\n    return {start: span.start.offset, end: span.end.offset};\n  } else {\n    if (span.endSourceSpan) {\n      return {start: span.sourceSpan.start.offset, end: span.endSourceSpan.end.offset};\n    } else if (span.children && span.children.length) {\n      return {\n        start: span.sourceSpan.start.offset,\n        end: spanOf(span.children[span.children.length - 1]).end\n      };\n    }\n    return {start: span.sourceSpan.start.offset, end: span.sourceSpan.end.offset};\n  }\n}\n\nexport function inSpan(position: number, span?: Span, exclusive?: boolean): boolean {\n  return span && exclusive ? position >= span.start && position < span.end :\n                             position >= span.start && position <= span.end;\n}\n\nexport function offsetSpan(span: Span, amount: number): Span {\n  return {start: span.start + amount, end: span.end + amount};\n}\n\nexport function isNarrower(spanA: Span, spanB: Span): boolean {\n  return spanA.start >= spanB.start && spanA.end <= spanB.end;\n}\n\nexport function hasTemplateReference(type: CompileTypeMetadata): boolean {\n  if (type.diDeps) {\n    for (let diDep of type.diDeps) {\n      if (diDep.token.identifier && identifierName(diDep.token.identifier) == 'TemplateRef')\n        return true;\n    }\n  }\n  return false;\n}\n\nexport function getSelectors(info: TemplateInfo): SelectorInfo {\n  const map = new Map<CssSelector, CompileDirectiveSummary>();\n  const selectors = flatten(info.directives.map(directive => {\n    const selectors = CssSelector.parse(directive.selector);\n    selectors.forEach(selector => map.set(selector, directive));\n    return selectors;\n  }));\n  return {selectors, map};\n}\n\nexport function flatten<T>(a: T[][]) {\n  return (<T[]>[]).concat(...a);\n}\n\nexport function removeSuffix(value: string, suffix: string) {\n  if (value.endsWith(suffix)) return value.substring(0, value.length - suffix.length);\n  return value;\n}\n\nexport function uniqueByName < T extends {\n  name: string;\n}\n> (elements: T[] | undefined): T[]|undefined {\n  if (elements) {\n    const result: T[] = [];\n    const set = new Set<string>();\n    for (const element of elements) {\n      if (!set.has(element.name)) {\n        set.add(element.name);\n        result.push(element);\n      }\n    }\n    return result;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport class AstPath<T> {\n  constructor(private path: T[]) {}\n\n  get empty(): boolean { return !this.path || !this.path.length; }\n  get head(): T|undefined { return this.path[0]; }\n  get tail(): T|undefined { return this.path[this.path.length - 1]; }\n\n  parentOf(node: T): T|undefined { return this.path[this.path.indexOf(node) - 1]; }\n  childOf(node: T): T|undefined { return this.path[this.path.indexOf(node) + 1]; }\n\n  first<N extends T>(ctor: {new (...args: any[]): N}): N|undefined {\n    for (let i = this.path.length - 1; i >= 0; i--) {\n      let item = this.path[i];\n      if (item instanceof ctor) return <N>item;\n    }\n  }\n\n  push(node: T) { this.path.push(node); }\n\n  pop(): T { return this.path.pop(); }\n}\n"],"names":["__extends"],"mappings":"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"}