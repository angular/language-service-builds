{"version":3,"file":"typescript_host.js","sourceRoot":"","sources":["../../../../../packages/language-service/src/typescript_host.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AotSummaryResolver, CompileMetadataResolver, CompilerConfig, DEFAULT_INTERPOLATION_CONFIG, DirectiveNormalizer, DirectiveResolver, DomElementSchemaRegistry, FormattedError, FormattedMessageChain, HtmlParser, InterpolationConfig, JitSummaryResolver, NgAnalyzedModules, NgModuleResolver, ParseTreeResult, PipeResolver, ResourceLoader, StaticReflector, StaticSymbol, StaticSymbolCache, StaticSymbolResolver, SummaryResolver, analyzeNgModules, createOfflineCompileUrlResolver, isFormattedError} from '@angular/compiler';\nimport {CompilerOptions, getClassMembersFromDeclaration, getPipesTable, getSymbolQuery} from '@angular/compiler-cli/src/language_services';\nimport {ViewEncapsulation, ɵConsole as Console} from '@angular/core';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {createLanguageService} from './language_service';\nimport {ReflectorHost} from './reflector_host';\nimport {BuiltinType, Declaration, DeclarationError, DeclarationKind, Declarations, Definition, DiagnosticMessageChain, LanguageService, LanguageServiceHost, PipeInfo, Pipes, Signature, Span, Symbol, SymbolDeclaration, SymbolQuery, SymbolTable, TemplateSource, TemplateSources} from './types';\nimport {isTypescriptVersion} from './utils';\n\n\n\n/**\n * Create a `LanguageServiceHost`\n */\nexport function createLanguageServiceFromTypescript(\n    host: ts.LanguageServiceHost, service: ts.LanguageService): LanguageService {\n  const ngHost = new TypeScriptServiceHost(host, service);\n  const ngServer = createLanguageService(ngHost);\n  ngHost.setSite(ngServer);\n  return ngServer;\n}\n\n/**\n * The language service never needs the normalized versions of the metadata. To avoid parsing\n * the content and resolving references, return an empty file. This also allows normalizing\n * template that are syntatically incorrect which is required to provide completions in\n * syntactically incorrect templates.\n */\nexport class DummyHtmlParser extends HtmlParser {\n  parse(\n      source: string, url: string, parseExpansionForms: boolean = false,\n      interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ParseTreeResult {\n    return new ParseTreeResult([], []);\n  }\n}\n\n/**\n * Avoid loading resources in the language servcie by using a dummy loader.\n */\nexport class DummyResourceLoader extends ResourceLoader {\n  get(url: string): Promise<string> { return Promise.resolve(''); }\n}\n\n/**\n * An implementation of a `LanguageServiceHost` for a TypeScript project.\n *\n * The `TypeScriptServiceHost` implements the Angular `LanguageServiceHost` using\n * the TypeScript language services.\n *\n * @experimental\n */\nexport class TypeScriptServiceHost implements LanguageServiceHost {\n  private _resolver: CompileMetadataResolver|null;\n  private _staticSymbolCache = new StaticSymbolCache();\n  private _summaryResolver: AotSummaryResolver;\n  private _staticSymbolResolver: StaticSymbolResolver;\n  private _reflector: StaticReflector|null;\n  private _reflectorHost: ReflectorHost;\n  private _checker: ts.TypeChecker|null;\n  private _typeCache: Symbol[] = [];\n  private context: string|undefined;\n  private lastProgram: ts.Program|undefined;\n  private modulesOutOfDate: boolean = true;\n  private analyzedModules: NgAnalyzedModules|null;\n  private service: LanguageService;\n  private fileToComponent: Map<string, StaticSymbol>|null;\n  private templateReferences: string[]|null;\n  private collectedErrors: Map<string, any[]>|null;\n  private fileVersions = new Map<string, string>();\n\n  constructor(private host: ts.LanguageServiceHost, private tsService: ts.LanguageService) {}\n\n  setSite(service: LanguageService) { this.service = service; }\n\n  /**\n   * Angular LanguageServiceHost implementation\n   */\n  get resolver(): CompileMetadataResolver {\n    this.validate();\n    let result = this._resolver;\n    if (!result) {\n      const moduleResolver = new NgModuleResolver(this.reflector);\n      const directiveResolver = new DirectiveResolver(this.reflector);\n      const pipeResolver = new PipeResolver(this.reflector);\n      const elementSchemaRegistry = new DomElementSchemaRegistry();\n      const resourceLoader = new DummyResourceLoader();\n      const urlResolver = createOfflineCompileUrlResolver();\n      const htmlParser = new DummyHtmlParser();\n      // This tracks the CompileConfig in codegen.ts. Currently these options\n      // are hard-coded.\n      const config =\n          new CompilerConfig({defaultEncapsulation: ViewEncapsulation.Emulated, useJit: false});\n      const directiveNormalizer =\n          new DirectiveNormalizer(resourceLoader, urlResolver, htmlParser, config);\n\n      result = this._resolver = new CompileMetadataResolver(\n          config, htmlParser, moduleResolver, directiveResolver, pipeResolver,\n          new JitSummaryResolver(), elementSchemaRegistry, directiveNormalizer, new Console(),\n          this._staticSymbolCache, this.reflector,\n          (error, type) => this.collectError(error, type && type.filePath));\n    }\n    return result;\n  }\n\n  getTemplateReferences(): string[] {\n    this.ensureTemplateMap();\n    return this.templateReferences || [];\n  }\n\n  getTemplateAt(fileName: string, position: number): TemplateSource|undefined {\n    let sourceFile = this.getSourceFile(fileName);\n    if (sourceFile) {\n      this.context = sourceFile.fileName;\n      let node = this.findNode(sourceFile, position);\n      if (node) {\n        return this.getSourceFromNode(\n            fileName, this.host.getScriptVersion(sourceFile.fileName), node);\n      }\n    } else {\n      this.ensureTemplateMap();\n      // TODO: Cannocalize the file?\n      const componentType = this.fileToComponent !.get(fileName);\n      if (componentType) {\n        return this.getSourceFromType(\n            fileName, this.host.getScriptVersion(fileName), componentType);\n      }\n    }\n    return undefined;\n  }\n\n  getAnalyzedModules(): NgAnalyzedModules {\n    this.updateAnalyzedModules();\n    return this.ensureAnalyzedModules();\n  }\n\n  private ensureAnalyzedModules(): NgAnalyzedModules {\n    let analyzedModules = this.analyzedModules;\n    if (!analyzedModules) {\n      if (this.host.getScriptFileNames().length === 0) {\n        analyzedModules = {\n          files: [],\n          ngModuleByPipeOrDirective: new Map(),\n          ngModules: [],\n        };\n      } else {\n        const analyzeHost = {isSourceFile(filePath: string) { return true; }};\n        const programFiles = this.program.getSourceFiles().map(sf => sf.fileName);\n        analyzedModules =\n            analyzeNgModules(programFiles, analyzeHost, this.staticSymbolResolver, this.resolver);\n      }\n      this.analyzedModules = analyzedModules;\n    }\n    return analyzedModules;\n  }\n\n  getTemplates(fileName: string): TemplateSources {\n    this.ensureTemplateMap();\n    const componentType = this.fileToComponent !.get(fileName);\n    if (componentType) {\n      const templateSource = this.getTemplateAt(fileName, 0);\n      if (templateSource) {\n        return [templateSource];\n      }\n    } else {\n      let version = this.host.getScriptVersion(fileName);\n      let result: TemplateSource[] = [];\n\n      // Find each template string in the file\n      let visit = (child: ts.Node) => {\n        let templateSource = this.getSourceFromNode(fileName, version, child);\n        if (templateSource) {\n          result.push(templateSource);\n        } else {\n          ts.forEachChild(child, visit);\n        }\n      };\n\n      let sourceFile = this.getSourceFile(fileName);\n      if (sourceFile) {\n        this.context = (sourceFile as any).path || sourceFile.fileName;\n        ts.forEachChild(sourceFile, visit);\n      }\n      return result.length ? result : undefined;\n    }\n  }\n\n  getDeclarations(fileName: string): Declarations {\n    const result: Declarations = [];\n    const sourceFile = this.getSourceFile(fileName);\n    if (sourceFile) {\n      let visit = (child: ts.Node) => {\n        let declaration = this.getDeclarationFromNode(sourceFile, child);\n        if (declaration) {\n          result.push(declaration);\n        } else {\n          ts.forEachChild(child, visit);\n        }\n      };\n      ts.forEachChild(sourceFile, visit);\n    }\n    return result;\n  }\n\n  getSourceFile(fileName: string): ts.SourceFile|undefined {\n    return this.tsService.getProgram().getSourceFile(fileName);\n  }\n\n  updateAnalyzedModules() {\n    this.validate();\n    if (this.modulesOutOfDate) {\n      this.analyzedModules = null;\n      this._reflector = null;\n      this.templateReferences = null;\n      this.fileToComponent = null;\n      this.ensureAnalyzedModules();\n      this.modulesOutOfDate = false;\n    }\n  }\n\n  private get program() { return this.tsService.getProgram(); }\n\n  private get checker() {\n    let checker = this._checker;\n    if (!checker) {\n      checker = this._checker = this.program.getTypeChecker();\n    }\n    return checker;\n  }\n\n  private validate() {\n    const program = this.program;\n    if (this.lastProgram !== program) {\n      // Invalidate file that have changed in the static symbol resolver\n      const invalidateFile = (fileName: string) =>\n          this._staticSymbolResolver.invalidateFile(fileName);\n      this.clearCaches();\n      const seen = new Set<string>();\n      for (let sourceFile of this.program.getSourceFiles()) {\n        const fileName = sourceFile.fileName;\n        seen.add(fileName);\n        const version = this.host.getScriptVersion(fileName);\n        const lastVersion = this.fileVersions.get(fileName);\n        if (version != lastVersion) {\n          this.fileVersions.set(fileName, version);\n          if (this._staticSymbolResolver) {\n            invalidateFile(fileName);\n          }\n        }\n      }\n\n      // Remove file versions that are no longer in the file and invalidate them.\n      const missing = Array.from(this.fileVersions.keys()).filter(f => !seen.has(f));\n      missing.forEach(f => this.fileVersions.delete(f));\n      if (this._staticSymbolResolver) {\n        missing.forEach(invalidateFile);\n      }\n\n      this.lastProgram = program;\n    }\n  }\n\n  private clearCaches() {\n    this._checker = null;\n    this._typeCache = [];\n    this._resolver = null;\n    this.collectedErrors = null;\n    this.modulesOutOfDate = true;\n  }\n\n  private ensureTemplateMap() {\n    if (!this.fileToComponent || !this.templateReferences) {\n      const fileToComponent = new Map<string, StaticSymbol>();\n      const templateReference: string[] = [];\n      const ngModuleSummary = this.getAnalyzedModules();\n      const urlResolver = createOfflineCompileUrlResolver();\n      for (const module of ngModuleSummary.ngModules) {\n        for (const directive of module.declaredDirectives) {\n          const {metadata} = this.resolver.getNonNormalizedDirectiveMetadata(directive.reference) !;\n          if (metadata.isComponent && metadata.template && metadata.template.templateUrl) {\n            const templateName = urlResolver.resolve(\n                this.reflector.componentModuleUrl(directive.reference),\n                metadata.template.templateUrl);\n            fileToComponent.set(templateName, directive.reference);\n            templateReference.push(templateName);\n          }\n        }\n      }\n      this.fileToComponent = fileToComponent;\n      this.templateReferences = templateReference;\n    }\n  }\n\n  private getSourceFromDeclaration(\n      fileName: string, version: string, source: string, span: Span, type: StaticSymbol,\n      declaration: ts.ClassDeclaration, node: ts.Node, sourceFile: ts.SourceFile): TemplateSource\n      |undefined {\n    let queryCache: SymbolQuery|undefined = undefined;\n    const t = this;\n    if (declaration) {\n      return {\n        version,\n        source,\n        span,\n        type,\n        get members() {\n          return getClassMembersFromDeclaration(t.program, t.checker, sourceFile, declaration);\n        },\n        get query() {\n          if (!queryCache) {\n            const pipes = t.service.getPipesAt(fileName, node.getStart());\n            queryCache = getSymbolQuery(\n                t.program, t.checker, sourceFile,\n                () => getPipesTable(sourceFile, t.program, t.checker, pipes));\n          }\n          return queryCache;\n        }\n      };\n    }\n  }\n\n  private getSourceFromNode(fileName: string, version: string, node: ts.Node): TemplateSource\n      |undefined {\n    let result: TemplateSource|undefined = undefined;\n    const t = this;\n    switch (node.kind) {\n      case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n      case ts.SyntaxKind.StringLiteral:\n        let [declaration, decorator] = this.getTemplateClassDeclFromNode(node);\n        if (declaration && declaration.name) {\n          const sourceFile = this.getSourceFile(fileName);\n          if (sourceFile) {\n            return this.getSourceFromDeclaration(\n                fileName, version, this.stringOf(node) || '', shrink(spanOf(node)),\n                this.reflector.getStaticSymbol(sourceFile.fileName, declaration.name.text),\n                declaration, node, sourceFile);\n          }\n        }\n        break;\n    }\n    return result;\n  }\n\n  private getSourceFromType(fileName: string, version: string, type: StaticSymbol): TemplateSource\n      |undefined {\n    let result: TemplateSource|undefined = undefined;\n    const declaration = this.getTemplateClassFromStaticSymbol(type);\n    if (declaration) {\n      const snapshot = this.host.getScriptSnapshot(fileName);\n      if (snapshot) {\n        const source = snapshot.getText(0, snapshot.getLength());\n        result = this.getSourceFromDeclaration(\n            fileName, version, source, {start: 0, end: source.length}, type, declaration,\n            declaration, declaration.getSourceFile());\n      }\n    }\n    return result;\n  }\n\n  private get reflectorHost(): ReflectorHost {\n    let result = this._reflectorHost;\n    if (!result) {\n      if (!this.context) {\n        // Make up a context by finding the first script and using that as the base dir.\n        const scriptFileNames = this.host.getScriptFileNames();\n        if (0 === scriptFileNames.length) {\n          throw new Error('Internal error: no script file names found');\n        }\n        this.context = scriptFileNames[0];\n      }\n\n      // Use the file context's directory as the base directory.\n      // The host's getCurrentDirectory() is not reliable as it is always \"\" in\n      // tsserver. We don't need the exact base directory, just one that contains\n      // a source file.\n      const source = this.tsService.getProgram().getSourceFile(this.context);\n      if (!source) {\n        throw new Error('Internal error: no context could be determined');\n      }\n\n      const tsConfigPath = findTsConfig(source.fileName);\n      const basePath = path.dirname(tsConfigPath || this.context);\n      const options: CompilerOptions = {basePath, genDir: basePath};\n      const compilerOptions = this.host.getCompilationSettings();\n      if (compilerOptions && compilerOptions.baseUrl) {\n        options.baseUrl = compilerOptions.baseUrl;\n      }\n      if (compilerOptions && compilerOptions.paths) {\n        options.paths = compilerOptions.paths;\n      }\n      result = this._reflectorHost =\n          new ReflectorHost(() => this.tsService.getProgram(), this.host, options);\n    }\n    return result;\n  }\n\n  private collectError(error: any, filePath: string|null) {\n    if (filePath) {\n      let errorMap = this.collectedErrors;\n      if (!errorMap || !this.collectedErrors) {\n        errorMap = this.collectedErrors = new Map();\n      }\n      let errors = errorMap.get(filePath);\n      if (!errors) {\n        errors = [];\n        this.collectedErrors.set(filePath, errors);\n      }\n      errors.push(error);\n    }\n  }\n\n  private get staticSymbolResolver(): StaticSymbolResolver {\n    let result = this._staticSymbolResolver;\n    if (!result) {\n      this._summaryResolver = new AotSummaryResolver(\n          {\n            loadSummary(filePath: string) { return null; },\n            isSourceFile(sourceFilePath: string) { return true; },\n            toSummaryFileName(sourceFilePath: string) { return sourceFilePath; },\n            fromSummaryFileName(filePath: string): string{return filePath;},\n          },\n          this._staticSymbolCache);\n      result = this._staticSymbolResolver = new StaticSymbolResolver(\n          this.reflectorHost as any, this._staticSymbolCache, this._summaryResolver,\n          (e, filePath) => this.collectError(e, filePath !));\n    }\n    return result;\n  }\n\n  private get reflector(): StaticReflector {\n    let result = this._reflector;\n    if (!result) {\n      const ssr = this.staticSymbolResolver;\n      result = this._reflector = new StaticReflector(\n          this._summaryResolver, ssr, [], [], (e, filePath) => this.collectError(e, filePath !));\n    }\n    return result;\n  }\n\n  private getTemplateClassFromStaticSymbol(type: StaticSymbol): ts.ClassDeclaration|undefined {\n    const source = this.getSourceFile(type.filePath);\n    if (source) {\n      const declarationNode = ts.forEachChild(source, child => {\n        if (child.kind === ts.SyntaxKind.ClassDeclaration) {\n          const classDeclaration = child as ts.ClassDeclaration;\n          if (classDeclaration.name != null && classDeclaration.name.text === type.name) {\n            return classDeclaration;\n          }\n        }\n      });\n      return declarationNode as ts.ClassDeclaration;\n    }\n\n    return undefined;\n  }\n\n  private static missingTemplate: [ts.ClassDeclaration | undefined, ts.Expression|undefined] =\n      [undefined, undefined];\n\n  /**\n   * Given a template string node, see if it is an Angular template string, and if so return the\n   * containing class.\n   */\n  private getTemplateClassDeclFromNode(currentToken: ts.Node):\n      [ts.ClassDeclaration | undefined, ts.Expression|undefined] {\n    // Verify we are in a 'template' property assignment, in an object literal, which is an call\n    // arg, in a decorator\n    let parentNode = currentToken.parent;  // PropertyAssignment\n    if (!parentNode) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n    if (parentNode.kind !== ts.SyntaxKind.PropertyAssignment) {\n      return TypeScriptServiceHost.missingTemplate;\n    } else {\n      // TODO: Is this different for a literal, i.e. a quoted property name like \"template\"?\n      if ((parentNode as any).name.text !== 'template') {\n        return TypeScriptServiceHost.missingTemplate;\n      }\n    }\n    parentNode = parentNode.parent;  // ObjectLiteralExpression\n    if (!parentNode || parentNode.kind !== ts.SyntaxKind.ObjectLiteralExpression) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n\n    parentNode = parentNode.parent;  // CallExpression\n    if (!parentNode || parentNode.kind !== ts.SyntaxKind.CallExpression) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n    const callTarget = (<ts.CallExpression>parentNode).expression;\n\n    let decorator = parentNode.parent;  // Decorator\n    if (!decorator || decorator.kind !== ts.SyntaxKind.Decorator) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n\n    let declaration = <ts.ClassDeclaration>decorator.parent;  // ClassDeclaration\n    if (!declaration || declaration.kind !== ts.SyntaxKind.ClassDeclaration) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n    return [declaration, callTarget];\n  }\n\n  private getCollectedErrors(defaultSpan: Span, sourceFile: ts.SourceFile): DeclarationError[] {\n    const errors = (this.collectedErrors && this.collectedErrors.get(sourceFile.fileName));\n    return (errors && errors.map((e: any) => {\n             const line = e.line || (e.position && e.position.line);\n             const column = e.column || (e.position && e.position.column);\n             const span = spanAt(sourceFile, line, column) || defaultSpan;\n             if (isFormattedError(e)) {\n               return errorToDiagnosticWithChain(e, span);\n             }\n             return {message: e.message, span};\n           })) ||\n        [];\n  }\n\n  private getDeclarationFromNode(sourceFile: ts.SourceFile, node: ts.Node): Declaration|undefined {\n    if (node.kind == ts.SyntaxKind.ClassDeclaration && node.decorators &&\n        (node as ts.ClassDeclaration).name) {\n      for (const decorator of node.decorators) {\n        if (decorator.expression && decorator.expression.kind == ts.SyntaxKind.CallExpression) {\n          const classDeclaration = node as ts.ClassDeclaration;\n          if (classDeclaration.name) {\n            const call = decorator.expression as ts.CallExpression;\n            const target = call.expression;\n            const type = this.checker.getTypeAtLocation(target);\n            if (type) {\n              const staticSymbol =\n                  this.reflector.getStaticSymbol(sourceFile.fileName, classDeclaration.name.text);\n              try {\n                if (this.resolver.isDirective(staticSymbol as any)) {\n                  const {metadata} =\n                      this.resolver.getNonNormalizedDirectiveMetadata(staticSymbol as any) !;\n                  const declarationSpan = spanOf(target);\n                  return {\n                    type: staticSymbol,\n                    declarationSpan,\n                    metadata,\n                    errors: this.getCollectedErrors(declarationSpan, sourceFile)\n                  };\n                }\n              } catch (e) {\n                if (e.message) {\n                  this.collectError(e, sourceFile.fileName);\n                  const declarationSpan = spanOf(target);\n                  return {\n                    type: staticSymbol,\n                    declarationSpan,\n                    errors: this.getCollectedErrors(declarationSpan, sourceFile)\n                  };\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private stringOf(node: ts.Node): string|undefined {\n    switch (node.kind) {\n      case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n        return (<ts.LiteralExpression>node).text;\n      case ts.SyntaxKind.StringLiteral:\n        return (<ts.StringLiteral>node).text;\n    }\n  }\n\n  private findNode(sourceFile: ts.SourceFile, position: number): ts.Node|undefined {\n    function find(node: ts.Node): ts.Node|undefined {\n      if (position >= node.getStart() && position < node.getEnd()) {\n        return ts.forEachChild(node, find) || node;\n      }\n    }\n\n    return find(sourceFile);\n  }\n}\n\n\nfunction findTsConfig(fileName: string): string|undefined {\n  let dir = path.dirname(fileName);\n  while (fs.existsSync(dir)) {\n    const candidate = path.join(dir, 'tsconfig.json');\n    if (fs.existsSync(candidate)) return candidate;\n    const parentDir = path.dirname(dir);\n    if (parentDir === dir) break;\n    dir = parentDir;\n  }\n}\n\nfunction spanOf(node: ts.Node): Span {\n  return {start: node.getStart(), end: node.getEnd()};\n}\n\nfunction shrink(span: Span, offset?: number) {\n  if (offset == null) offset = 1;\n  return {start: span.start + offset, end: span.end - offset};\n}\n\nfunction spanAt(sourceFile: ts.SourceFile, line: number, column: number): Span|undefined {\n  if (line != null && column != null) {\n    const position = ts.getPositionOfLineAndCharacter(sourceFile, line, column);\n    const findChild = function findChild(node: ts.Node): ts.Node | undefined {\n      if (node.kind > ts.SyntaxKind.LastToken && node.pos <= position && node.end > position) {\n        const betterNode = ts.forEachChild(node, findChild);\n        return betterNode || node;\n      }\n    };\n\n    const node = ts.forEachChild(sourceFile, findChild);\n    if (node) {\n      return {start: node.getStart(), end: node.getEnd()};\n    }\n  }\n}\n\nfunction chainedMessage(chain: DiagnosticMessageChain, indent = ''): string {\n  return indent + chain.message + (chain.next ? chainedMessage(chain.next, indent + '  ') : '');\n}\n\nclass DiagnosticMessageChainImpl implements DiagnosticMessageChain {\n  constructor(public message: string, public next?: DiagnosticMessageChain) {}\n  toString(): string { return chainedMessage(this); }\n}\n\nfunction convertChain(chain: FormattedMessageChain): DiagnosticMessageChain {\n  return {message: chain.message, next: chain.next ? convertChain(chain.next) : undefined};\n}\n\nfunction errorToDiagnosticWithChain(error: FormattedError, span: Span): DeclarationError {\n  return {message: error.chain ? convertChain(error.chain) : error.message, span};\n}\n"]}