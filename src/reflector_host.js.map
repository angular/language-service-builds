{"version":3,"file":"reflector_host.js","sourceRoot":"","sources":["../../../../modules/@angular/language-service/src/reflector_host.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAA0C,YAAY,EAAE,2BAA2B,EAAC,MAAM,uBAAuB;AAGxH;IACE,YAAoB,IAA4B;QAA5B,SAAI,GAAJ,IAAI,CAAwB;QAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;YACvB,IAAI,CAAC,eAAe,GAAG,aAAa,IAAI,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;IACrF,CAAC;IAED,UAAU,CAAC,QAAgB,IAAa,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAEzF,QAAQ,CAAC,QAAgB;QACvB,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACrD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;AAGH,CAAC;AAED,mCAAmC,YAAY;IAC7C,YACY,UAA4B,EAAE,WAAmC,EACzE,OAA+B;QACjC,MACI,IAAI,EAAE,OAAO,EACb,IAAI,2BAA2B,CAAC,IAAI,mCAAmC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAJjF,eAAU,GAAV,UAAU,CAAkB;IAKxC,CAAC;IAED,IAAc,OAAO,KAAK,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IACrD,IAAc,OAAO,CAAC,KAAiB;QACrC,iDAAiD;IACnD,CAAC;AACH,CAAC;AAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AngularCompilerOptions, AotCompilerHost, CompilerHost, ModuleResolutionHostAdapter} from '@angular/compiler-cli';\nimport * as ts from 'typescript';\n\nclass ReflectorModuleModuleResolutionHost implements ts.ModuleResolutionHost {\n  constructor(private host: ts.LanguageServiceHost) {\n    if (host.directoryExists)\n      this.directoryExists = directoryName => this.host.directoryExists(directoryName);\n  }\n\n  fileExists(fileName: string): boolean { return !!this.host.getScriptSnapshot(fileName); }\n\n  readFile(fileName: string): string {\n    let snapshot = this.host.getScriptSnapshot(fileName);\n    if (snapshot) {\n      return snapshot.getText(0, snapshot.getLength());\n    }\n  }\n\n  directoryExists: (directoryName: string) => boolean;\n}\n\nexport class ReflectorHost extends CompilerHost {\n  constructor(\n      private getProgram: () => ts.Program, serviceHost: ts.LanguageServiceHost,\n      options: AngularCompilerOptions) {\n    super(\n        null, options,\n        new ModuleResolutionHostAdapter(new ReflectorModuleModuleResolutionHost(serviceHost)));\n  }\n\n  protected get program() { return this.getProgram(); }\n  protected set program(value: ts.Program) {\n    // Discard the result set by ancestor constructor\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}