{"version":3,"file":"html_path.js","sourceRoot":"","sources":["../../../../modules/@angular/language-service/src/html_path.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAA6E,QAAQ,EAAC,MAAM,qCAAqC;OAEjI,EAAC,OAAO,EAAC,MAAM,YAAY;OAC3B,EAAC,MAAM,EAAE,MAAM,EAAC,MAAM,SAAS;AAEtC,iCAAiC,OAAO;IACtC,YAAY,GAAW,EAAS,QAAgB;QAAI,MAAM,SAAS,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;QAApD,aAAQ,GAAR,QAAQ,CAAQ;IAAqC,CAAC;AACxF,CAAC;AAED,mBAAmB,GAAW,EAAE,QAAgB;IAC9C,IAAI,OAAO,GAAG,IAAI,kBAAkB,CAAC,QAAQ,CAAC,CAAC;IAC/C,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IACvB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;AAC3B,CAAC;AAED;IACE,YAAoB,OAAiB;QAAjB,YAAO,GAAP,OAAO,CAAU;IAAG,CAAC;IAEzC,YAAY,CAAC,GAAY,EAAE,OAAY;QACrC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK;YAC/B,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACjB,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,cAAc,CAAC,GAAc,EAAE,OAAY,IAAQ,CAAC;IACpD,SAAS,CAAC,GAAS,EAAE,OAAY,IAAQ,CAAC;IAC1C,YAAY,CAAC,GAAY,EAAE,OAAY,IAAQ,CAAC;IAEhD,cAAc,CAAC,GAAc,EAAE,OAAY;QACzC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,MAAM,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,kBAAkB,CAAC,GAAkB,EAAE,OAAY,IAAQ,CAAC;IAEpD,aAAa,CACjB,OAAY,EAAE,EAAwE;QACxF,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC;QACrC,IAAI,OAAO,GAAY,EAAE,CAAC;QAC1B,eAA+B,QAAyB;YACtD,EAAE,CAAC,CAAC,QAAQ,CAAC;gBAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;QACnE,CAAC;QACD,EAAE,CAAC,KAAK,CAAC,CAAC;QACV,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;AACH,CAAC;AAED,iCAAiC,YAAY;IAG3C,YAAoB,QAAgB;QAAI,OAAO,CAAC;QAA5B,aAAQ,GAAR,QAAQ,CAAQ;QAF5B,SAAI,GAAW,EAAE,CAAC;IAEuB,CAAC;IAElD,KAAK,CAAC,GAAS,EAAE,OAAY;QAC3B,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QACvB,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,oEAAoE;YACpE,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,OAAO,KAAa,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACzC,CAAC;AAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, Comment, Element, Expansion, ExpansionCase, Node, Text, Visitor, visitAll} from '@angular/compiler/src/ml_parser/ast';\n\nimport {AstPath} from './ast_path';\nimport {inSpan, spanOf} from './utils';\n\nexport class HtmlAstPath extends AstPath<Node> {\n  constructor(ast: Node[], public position: number) { super(buildPath(ast, position)); }\n}\n\nfunction buildPath(ast: Node[], position: number): Node[] {\n  let visitor = new HtmlAstPathBuilder(position);\n  visitAll(visitor, ast);\n  return visitor.getPath();\n}\n\nexport class ChildVisitor implements Visitor {\n  constructor(private visitor?: Visitor) {}\n\n  visitElement(ast: Element, context: any): any {\n    this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.children);\n    });\n  }\n\n  visitAttribute(ast: Attribute, context: any): any {}\n  visitText(ast: Text, context: any): any {}\n  visitComment(ast: Comment, context: any): any {}\n\n  visitExpansion(ast: Expansion, context: any): any {\n    return this.visitChildren(context, visit => { visit(ast.cases); });\n  }\n\n  visitExpansionCase(ast: ExpansionCase, context: any): any {}\n\n  private visitChildren<T extends Node>(\n      context: any, cb: (visit: (<V extends Node>(children: V[]|undefined) => void)) => void) {\n    const visitor = this.visitor || this;\n    let results: any[][] = [];\n    function visit<T extends Node>(children: T[] | undefined) {\n      if (children) results.push(visitAll(visitor, children, context));\n    }\n    cb(visit);\n    return [].concat.apply([], results);\n  }\n}\n\nclass HtmlAstPathBuilder extends ChildVisitor {\n  private path: Node[] = [];\n\n  constructor(private position: number) { super(); }\n\n  visit(ast: Node, context: any): any {\n    let span = spanOf(ast);\n    if (inSpan(this.position, span)) {\n      this.path.push(ast);\n    } else {\n      // Returning a value here will result in the children being skipped.\n      return true;\n    }\n  }\n\n  getPath(): Node[] { return this.path; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}