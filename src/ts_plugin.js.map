{"version":3,"file":"ts_plugin.js","sourceRoot":"","sources":["../../../../modules/@angular/language-service/src/ts_plugin.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,KAAK,EAAE,MAAM,YAAY;OAEzB,EAAC,qBAAqB,EAAC,MAAM,oBAAoB;OAEjD,EAAC,qBAAqB,EAAC,MAAM,mBAAmB;AAGvD;;;;GAIG;AACH;IAOE,+BAAY,MAGX;QACC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,IAAI,qBAAqB,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QAC1E,IAAI,CAAC,OAAO,GAAG,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACvD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IAED;;;OAGG;IACH,4DAA4B,GAA5B,UAA6B,QAAgB,EAAE,QAAyB;QACtE,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QACnD,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5B,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACpD,GAAG,CAAC,CAAgB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM,CAAC;gBAAtB,IAAM,KAAK,eAAA;gBACd,QAAQ,CAAC,IAAI,CAAC;oBACZ,UAAI;oBACJ,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK;oBACvB,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK;oBACzC,WAAW,EAAE,KAAK,CAAC,OAAO;oBAC1B,QAAQ,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK;oBACrC,IAAI,EAAE,CAAC;iBACR,CAAC,CAAC;aACJ;QACH,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,wDAAwB,GAAxB,UAAyB,QAAgB,EAAE,QAAgB;QACzD,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC/D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,MAAM,CAAC;gBACL,kBAAkB,EAAE,KAAK;gBACzB,uBAAuB,EAAE,KAAK;gBAC9B,OAAO,EAAE,MAAM,CAAC,GAAG,CACf,UAAA,KAAK;oBACD,OAAA,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,aAAa,EAAE,EAAE,EAAE,QAAQ,EAAE,KAAK,CAAC,IAAI,EAAC,CAAC;gBAA/E,CAA+E,CAAC;aACzF,CAAC;QACJ,CAAC;IACH,CAAC;IAhDM,uCAAgB,GAAG,kBAAkB,CAAC;IAiD/C,4BAAC;AAAD,CAAC,AAtDD,IAsDC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {createLanguageService} from './language_service';\nimport {LanguageService, LanguageServiceHost} from './types';\nimport {TypeScriptServiceHost} from './typescript_host';\n\n\n/** A plugin to TypeScript's langauge service that provide language services for\n * templates in string literals.\n *\n * @experimental\n */\nexport class LanguageServicePlugin {\n  private serviceHost: TypeScriptServiceHost;\n  private service: LanguageService;\n  private host: ts.LanguageServiceHost;\n\n  static 'extension-kind' = 'language-service';\n\n  constructor(config: {\n    host: ts.LanguageServiceHost; service: ts.LanguageService;\n    registry?: ts.DocumentRegistry, args?: any\n  }) {\n    this.host = config.host;\n    this.serviceHost = new TypeScriptServiceHost(config.host, config.service);\n    this.service = createLanguageService(this.serviceHost);\n    this.serviceHost.setSite(this.service);\n  }\n\n  /**\n   * Augment the diagnostics reported by TypeScript with errors from the templates in string\n   * literals.\n   */\n  getSemanticDiagnosticsFilter(fileName: string, previous: ts.Diagnostic[]): ts.Diagnostic[] {\n    let errors = this.service.getDiagnostics(fileName);\n    if (errors && errors.length) {\n      let file = this.serviceHost.getSourceFile(fileName);\n      for (const error of errors) {\n        previous.push({\n          file,\n          start: error.span.start,\n          length: error.span.end - error.span.start,\n          messageText: error.message,\n          category: ts.DiagnosticCategory.Error,\n          code: 0\n        });\n      }\n    }\n    return previous;\n  }\n\n  /**\n   * Get completions for angular templates if one is at the given position.\n   */\n  getCompletionsAtPosition(fileName: string, position: number): ts.CompletionInfo {\n    let result = this.service.getCompletionsAt(fileName, position);\n    if (result) {\n      return {\n        isMemberCompletion: false,\n        isNewIdentifierLocation: false,\n        entries: result.map<ts.CompletionEntry>(\n            entry =>\n                ({name: entry.name, kind: entry.kind, kindModifiers: '', sortText: entry.sort}))\n      };\n    }\n  }\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}