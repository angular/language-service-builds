{"version":3,"file":"language_service.js","sourceRoot":"","sources":["../../../../modules/@angular/language-service/src/language_service.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAII,EAAC,KAAK,EAAC,MAAM,+CAA+C;OAC5D,EAAC,MAAM,EAAC,MAAM,gDAAgD;OAC9D,EAAC,cAAc,EAAC,MAAM,6CAA6C;OAEnE,EAAC,UAAU,EAAC,MAAM,6CAA6C;OAC/D,EAAC,wBAAwB,EAAC,MAAM,0DAA0D;OAC1F,EAAC,cAAc,EAAC,MAAM,uDAAuD;OAG7E,EAAC,sBAAsB,EAAC,MAAM,eAAe;OAC7C,EAAC,aAAa,EAAC,MAAM,eAAe;OACpC,EAAC,yBAAyB,EAAE,sBAAsB,EAAC,MAAM,eAAe;OACxE,EAAC,QAAQ,EAAC,MAAM,SAAS;OACzB,EAA6F,cAAc,EAA6L,MAAM,SAAS;AAE9T;;;;GAIG;AACH,sCAAsC,IAAyB;IAC7D,MAAM,CAAC,IAAI,mBAAmB,CAAC,IAAI,CAAC,CAAC;AACvC,CAAC;AAED;IACE,6BAAoB,IAAyB;QAAzB,SAAI,GAAJ,IAAI,CAAqB;IAAG,CAAC;IAEjD,sBAAY,iDAAgB;aAA5B,cAA0D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;;;OAAA;IAEtF,mDAAqB,GAArB,cAAoC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC;IAE/E,4CAAc,GAAd,UAAe,QAAgB;QAC7B,IAAI,OAAO,GAAgB,EAAE,CAAC;QAC9B,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QACjD,EAAE,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YAClC,OAAO,CAAC,IAAI,OAAZ,OAAO,EAAS,sBAAsB,CAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;QACrE,CAAC;QAED,IAAI,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QACvD,EAAE,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACxC,IAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC/C,OAAO,CAAC,IAAI,OAAZ,OAAO,EAAS,yBAAyB,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC;QACpE,CAAC;QAED,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAED,wCAAU,GAAV,UAAW,QAAgB,EAAE,QAAgB;QAC3C,IAAI,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACrE,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CACzB,UAAA,QAAQ,IAAI,OAAA,CAAC,EAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAC,CAAC,EAAxD,CAAwD,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;IAED,8CAAgB,GAAhB,UAAiB,QAAgB,EAAE,QAAgB;QACjD,IAAI,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACrE,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;IAED,6CAAe,GAAf,UAAgB,QAAgB,EAAE,QAAgB;QAChD,IAAI,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACrE,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAED,wCAAU,GAAV,UAAW,QAAgB,EAAE,QAAgB;QAC3C,IAAI,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACrE,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAChC,CAAC;IACH,CAAC;IAEO,sDAAwB,GAAhC,UAAiC,QAAgB,EAAE,QAAgB;QACjE,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC3D,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACb,IAAI,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACxD,EAAE,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,WAAW,CAAC;gBAC1D,MAAM,CAAC;oBACL,kBAAQ;oBACR,kBAAQ;oBACR,kBAAQ;oBACR,OAAO,EAAE,SAAS,CAAC,OAAO;oBAC1B,SAAS,EAAE,SAAS,CAAC,SAAS;oBAC9B,UAAU,EAAE,SAAS,CAAC,UAAU;oBAChC,KAAK,EAAE,SAAS,CAAC,KAAK;oBACtB,WAAW,EAAE,SAAS,CAAC,WAAW;oBAClC,gBAAgB,EAAE,SAAS,CAAC,gBAAgB;iBAC7C,CAAC;QACN,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAED,4CAAc,GAAd,UAAe,QAAwB,EAAE,WAAmB;QAA5D,iBA4CC;QA3CC,IAAI,MAAiB,CAAC;QACtB,IAAI,CAAC;YACI,8FAAQ,CACmE;YAClF,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACb,IAAM,aAAa,GAAG,IAAI,UAAU,EAAE,CAAC;gBACvC,IAAM,UAAU,GAAG,IAAI,cAAc,CAAC,aAAa,CAAC,CAAC;gBACrD,IAAM,gBAAgB,GAAG,IAAI,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC;gBACjD,IAAM,MAAM,GAAG,IAAI,cAAc,CAC7B,gBAAgB,EAAE,IAAI,wBAAwB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;gBAC5E,IAAM,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBACzD,IAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBACvD,IAAI,MAAM,GAAiB,SAAS,CAAC;gBACrC,IAAI,QAAQ,GAAG,eAAe,CAAC,yBAAyB,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC5E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACd,+CAA+C;oBAC/C,QAAQ,GAAG,yBAAyB,CAAC,eAAe,CAAC,CAAC;gBACxD,CAAC;gBACD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACb,IAAM,UAAU,GAAG,QAAQ,CAAC,gBAAgB,CAAC,UAAU,CAAC,GAAG,CACvD,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,iCAAiC,CAAC,CAAC,CAAC,SAAS,CAAC;yBAC5D,QAAQ,CAAC,SAAS,EAAE,EADzB,CACyB,CAAC,CAAC;oBACpC,IAAM,KAAK,GAAG,QAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAC7C,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,EAAjE,CAAiE,CAAC,CAAC;oBAC5E,IAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;oBACjC,IAAM,WAAW,GAAG,MAAM,CAAC,YAAY,CACnC,UAAU,EAAE,QAAQ,EAAE,QAAQ,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;oBAC3E,MAAM,GAAG;wBACP,OAAO,EAAE,UAAU,CAAC,SAAS;wBAC7B,WAAW,EAAE,WAAW,CAAC,WAAW;wBACpC,SAAS,EAAE,QAAQ,EAAE,sBAAU,EAAE,YAAK;wBACtC,WAAW,EAAE,WAAW,CAAC,MAAM,EAAE,kCAAgB,EAAE,cAAM;qBAC1D,CAAC;gBACJ,CAAC;YACH,CAAC;QACH,CAAE;QAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;YACzB,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,WAAW,CAAC,CAAC,CAAC;gBAC9B,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;YAC5D,CAAC;YACD,MAAM,GAAG,EAAC,MAAM,EAAE,CAAC,EAAC,IAAI,EAAE,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE,UAAI,EAAC,CAAC,EAAC,CAAC;QAC9E,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH,0BAAC;AAAD,CAAC,AArHD,IAqHC;AAED,sBAGG,QAAyB;IAC1B,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACb,IAAM,MAAM,GAAQ,EAAE,CAAC;QACvB,IAAM,GAAG,GAAG,IAAI,GAAG,EAAuB,CAAC;QAC3C,GAAG,CAAC,CAAkB,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,CAAC;YAA1B,IAAM,OAAO,iBAAA;YAChB,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YACxB,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9B,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACT,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;gBAChB,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YAC3B,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvB,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAClB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACvB,CAAC;SACF;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;AACH,CAAC;AAED,mCAAmC,OAA0B;IAC3D,IAAI,MAA+B,CAAC;IACpC,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,GAAG,CAAC,CAAiB,UAAiB,EAAjB,KAAA,OAAO,CAAC,SAAS,EAAjB,cAAiB,EAAjB,IAAiB,CAAC;QAAlC,IAAM,QAAM,SAAA;QACf,IAAM,UAAU,GAAG,QAAM,CAAC,gBAAgB,CAAC,UAAU,CAAC,MAAM,CAAC;QAC7D,EAAE,CAAC,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC;YAC5B,MAAM,GAAG,QAAM,CAAC;YAChB,UAAU,GAAG,UAAU,CAAC;QAC1B,CAAC;KACF;IACD,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgAnalyzedModules} from '@angular/compiler/src/aot/compiler';\nimport {CompileNgModuleMetadata} from '@angular/compiler/src/compile_metadata';\nimport {Lexer} from '@angular/compiler/src/expression_parser/lexer';\nimport {Parser} from '@angular/compiler/src/expression_parser/parser';\nimport {I18NHtmlParser} from '@angular/compiler/src/i18n/i18n_html_parser';\nimport {CompileMetadataResolver} from '@angular/compiler/src/metadata_resolver';\nimport {HtmlParser} from '@angular/compiler/src/ml_parser/html_parser';\nimport {DomElementSchemaRegistry} from '@angular/compiler/src/schema/dom_element_schema_registry';\nimport {TemplateParser} from '@angular/compiler/src/template_parser/template_parser';\n\nimport {AstResult, AttrInfo, TemplateInfo} from './common';\nimport {getTemplateCompletions} from './completions';\nimport {getDefinition} from './definitions';\nimport {getDeclarationDiagnostics, getTemplateDiagnostics} from './diagnostics';\nimport {getHover} from './hover';\nimport {Completion, CompletionKind, Completions, Declaration, Declarations, Definition, Diagnostic, DiagnosticKind, Diagnostics, Hover, LanguageService, LanguageServiceHost, Location, PipeInfo, Pipes, Signature, Span, Symbol, SymbolDeclaration, SymbolQuery, SymbolTable, TemplateSource, TemplateSources} from './types';\n\n/**\n * Create an instance of an Angular `LanguageService`.\n *\n * @experimental\n */\nexport function createLanguageService(host: LanguageServiceHost): LanguageService {\n  return new LanguageServiceImpl(host);\n}\n\nclass LanguageServiceImpl implements LanguageService {\n  constructor(private host: LanguageServiceHost) {}\n\n  private get metadataResolver(): CompileMetadataResolver { return this.host.resolver; }\n\n  getTemplateReferences(): string[] { return this.host.getTemplateReferences(); }\n\n  getDiagnostics(fileName: string): Diagnostics {\n    let results: Diagnostics = [];\n    let templates = this.host.getTemplates(fileName);\n    if (templates && templates.length) {\n      results.push(...getTemplateDiagnostics(fileName, this, templates));\n    }\n\n    let declarations = this.host.getDeclarations(fileName);\n    if (declarations && declarations.length) {\n      const summary = this.host.getAnalyzedModules();\n      results.push(...getDeclarationDiagnostics(declarations, summary));\n    }\n\n    return uniqueBySpan(results);\n  }\n\n  getPipesAt(fileName: string, position: number): Pipes {\n    let templateInfo = this.getTemplateAstAtPosition(fileName, position);\n    if (templateInfo) {\n      return templateInfo.pipes.map(\n          pipeInfo => ({name: pipeInfo.name, symbol: pipeInfo.type.reference}));\n    }\n  }\n\n  getCompletionsAt(fileName: string, position: number): Completions {\n    let templateInfo = this.getTemplateAstAtPosition(fileName, position);\n    if (templateInfo) {\n      return getTemplateCompletions(templateInfo);\n    }\n  }\n\n  getDefinitionAt(fileName: string, position: number): Definition {\n    let templateInfo = this.getTemplateAstAtPosition(fileName, position);\n    if (templateInfo) {\n      return getDefinition(templateInfo);\n    }\n  }\n\n  getHoverAt(fileName: string, position: number): Hover {\n    let templateInfo = this.getTemplateAstAtPosition(fileName, position);\n    if (templateInfo) {\n      return getHover(templateInfo);\n    }\n  }\n\n  private getTemplateAstAtPosition(fileName: string, position: number): TemplateInfo {\n    let template = this.host.getTemplateAt(fileName, position);\n    if (template) {\n      let astResult = this.getTemplateAst(template, fileName);\n      if (astResult && astResult.htmlAst && astResult.templateAst)\n        return {\n          position,\n          fileName,\n          template,\n          htmlAst: astResult.htmlAst,\n          directive: astResult.directive,\n          directives: astResult.directives,\n          pipes: astResult.pipes,\n          templateAst: astResult.templateAst,\n          expressionParser: astResult.expressionParser\n        };\n    }\n    return undefined;\n  }\n\n  getTemplateAst(template: TemplateSource, contextFile: string): AstResult {\n    let result: AstResult;\n    try {\n      const {metadata} =\n          this.metadataResolver.getNonNormalizedDirectiveMetadata(template.type as any);\n      if (metadata) {\n        const rawHtmlParser = new HtmlParser();\n        const htmlParser = new I18NHtmlParser(rawHtmlParser);\n        const expressionParser = new Parser(new Lexer());\n        const parser = new TemplateParser(\n            expressionParser, new DomElementSchemaRegistry(), htmlParser, null, []);\n        const htmlResult = htmlParser.parse(template.source, '');\n        const analyzedModules = this.host.getAnalyzedModules();\n        let errors: Diagnostic[] = undefined;\n        let ngModule = analyzedModules.ngModuleByPipeOrDirective.get(template.type);\n        if (!ngModule) {\n          // Reported by the the declaration diagnostics.\n          ngModule = findSuitableDefaultModule(analyzedModules);\n        }\n        if (ngModule) {\n          const directives = ngModule.transitiveModule.directives.map(\n              d => this.host.resolver.getNonNormalizedDirectiveMetadata(d.reference)\n                       .metadata.toSummary());\n          const pipes = ngModule.transitiveModule.pipes.map(\n              p => this.host.resolver.getOrLoadPipeMetadata(p.reference).toSummary());\n          const schemas = ngModule.schemas;\n          const parseResult = parser.tryParseHtml(\n              htmlResult, metadata, template.source, directives, pipes, schemas, '');\n          result = {\n            htmlAst: htmlResult.rootNodes,\n            templateAst: parseResult.templateAst,\n            directive: metadata, directives, pipes,\n            parseErrors: parseResult.errors, expressionParser, errors\n          };\n        }\n      }\n    } catch (e) {\n      let span = template.span;\n      if (e.fileName == contextFile) {\n        span = template.query.getSpanAt(e.line, e.column) || span;\n      }\n      result = {errors: [{kind: DiagnosticKind.Error, message: e.message, span}]};\n    }\n    return result;\n  }\n}\n\nfunction uniqueBySpan < T extends {\n  span: Span;\n}\n> (elements: T[] | undefined): T[]|undefined {\n  if (elements) {\n    const result: T[] = [];\n    const map = new Map<number, Set<number>>();\n    for (const element of elements) {\n      let span = element.span;\n      let set = map.get(span.start);\n      if (!set) {\n        set = new Set();\n        map.set(span.start, set);\n      }\n      if (!set.has(span.end)) {\n        set.add(span.end);\n        result.push(element);\n      }\n    }\n    return result;\n  }\n}\n\nfunction findSuitableDefaultModule(modules: NgAnalyzedModules): CompileNgModuleMetadata {\n  let result: CompileNgModuleMetadata;\n  let resultSize = 0;\n  for (const module of modules.ngModules) {\n    const moduleSize = module.transitiveModule.directives.length;\n    if (moduleSize > resultSize) {\n      result = module;\n      resultSize = moduleSize;\n    }\n  }\n  return result;\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}