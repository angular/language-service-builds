{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../modules/@angular/language-service/src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveSummary, CompileTypeMetadata, identifierName} from '@angular/compiler';\nimport {ParseSourceSpan} from '@angular/compiler/src/parse_util';\nimport {CssSelector, SelectorMatcher} from '@angular/compiler/src/selector';\n\nimport {SelectorInfo, TemplateInfo} from './common';\nimport {Span} from './types';\n\nexport interface SpanHolder {\n  sourceSpan: ParseSourceSpan;\n  endSourceSpan?: ParseSourceSpan;\n  children?: SpanHolder[];\n}\n\nexport function isParseSourceSpan(value: any): value is ParseSourceSpan {\n  return value && !!value.start;\n}\n\nexport function spanOf(span?: SpanHolder | ParseSourceSpan): Span {\n  if (!span) return undefined;\n  if (isParseSourceSpan(span)) {\n    return {start: span.start.offset, end: span.end.offset};\n  } else {\n    if (span.endSourceSpan) {\n      return {start: span.sourceSpan.start.offset, end: span.endSourceSpan.end.offset};\n    } else if (span.children && span.children.length) {\n      return {\n        start: span.sourceSpan.start.offset,\n        end: spanOf(span.children[span.children.length - 1]).end\n      };\n    }\n    return {start: span.sourceSpan.start.offset, end: span.sourceSpan.end.offset};\n  }\n}\n\nexport function inSpan(position: number, span?: Span, exclusive?: boolean): boolean {\n  return span && exclusive ? position >= span.start && position < span.end :\n                             position >= span.start && position <= span.end;\n}\n\nexport function offsetSpan(span: Span, amount: number): Span {\n  return {start: span.start + amount, end: span.end + amount};\n}\n\nexport function isNarrower(spanA: Span, spanB: Span): boolean {\n  return spanA.start >= spanB.start && spanA.end <= spanB.end;\n}\n\nexport function hasTemplateReference(type: CompileTypeMetadata): boolean {\n  if (type.diDeps) {\n    for (let diDep of type.diDeps) {\n      if (diDep.token.identifier && identifierName(diDep.token.identifier) == 'TemplateRef')\n        return true;\n    }\n  }\n  return false;\n}\n\nexport function getSelectors(info: TemplateInfo): SelectorInfo {\n  const map = new Map<CssSelector, CompileDirectiveSummary>();\n  const selectors = flatten(info.directives.map(directive => {\n    const selectors = CssSelector.parse(directive.selector);\n    selectors.forEach(selector => map.set(selector, directive));\n    return selectors;\n  }));\n  return {selectors, map};\n}\n\nexport function flatten<T>(a: T[][]) {\n  return (<T[]>[]).concat(...a);\n}\n\nexport function removeSuffix(value: string, suffix: string) {\n  if (value.endsWith(suffix)) return value.substring(0, value.length - suffix.length);\n  return value;\n}\n\nexport function uniqueByName < T extends {\n  name: string;\n}\n> (elements: T[] | undefined): T[]|undefined {\n  if (elements) {\n    const result: T[] = [];\n    const set = new Set<string>();\n    for (const element of elements) {\n      if (!set.has(element.name)) {\n        set.add(element.name);\n        result.push(element);\n      }\n    }\n    return result;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}